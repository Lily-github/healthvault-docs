<Type Name="HealthServicePage" FullName="Microsoft.Health.Web.HealthServicePage">
  <TypeSignature Language="C#" Value="public class HealthServicePage : System.Web.UI.Page" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HealthServicePage extends System.Web.UI.Page" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Health.Web.HealthServicePage" />
  <TypeSignature Language="VB.NET" Value="Public Class HealthServicePage&#xA;Inherits Page" />
  <TypeSignature Language="F#" Value="type HealthServicePage = class&#xA;    inherit Page" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Health.Web</AssemblyName>
    <AssemblyVersion>2.64.0.0</AssemblyVersion>
    <AssemblyVersion>2.68.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Page</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary> 
            A base page for ASP.NET applications building against HealthVault.
            </summary>
    <remarks>
            By deriving from this base page, ASP.NET applications can inherit 
            much of the data management capabilities that are needed to implement
            a HealthVault application. The base page handles redirecting to the
            HealthVault Shell to authenticate the user, getting information
            about the records the user is authorized to use, and serializing and
            making available to other pages the person's information and 
            self/selected record.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HealthServicePage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.Web.HealthServicePage.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health.Web</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnonymousConnection">
      <MemberSignature Language="C#" Value="public static Microsoft.Health.AnonymousConnection AnonymousConnection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Microsoft.Health.AnonymousConnection AnonymousConnection" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.Web.HealthServicePage.AnonymousConnection" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AnonymousConnection As AnonymousConnection" />
      <MemberSignature Language="F#" Value="member this.AnonymousConnection : Microsoft.Health.AnonymousConnection" Usage="Microsoft.Health.Web.HealthServicePage.AnonymousConnection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health.Web</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.AnonymousConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a HealthVault connection without an authentication token.
            </summary>
        <value>
            A connection to HealthVault that does not contain user
            authentication information.
            </value>
        <remarks>
            If a connection has already been made on the page, that connection
            is returned. If no connection has been made, a new connection is
            created a returned.
            </remarks>
        <exception cref="T:System.Security.SecurityException">
            If the application private key could not be found in the 
            certificate store to sign requests.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="ApplicationAuthenticationCredential">
      <MemberSignature Language="C#" Value="public Microsoft.Health.Web.Authentication.WebApplicationCredential ApplicationAuthenticationCredential { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Health.Web.Authentication.WebApplicationCredential ApplicationAuthenticationCredential" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.Web.HealthServicePage.ApplicationAuthenticationCredential" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ApplicationAuthenticationCredential As WebApplicationCredential" />
      <MemberSignature Language="F#" Value="member this.ApplicationAuthenticationCredential : Microsoft.Health.Web.Authentication.WebApplicationCredential" Usage="Microsoft.Health.Web.HealthServicePage.ApplicationAuthenticationCredential" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health.Web</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.Web.Authentication.WebApplicationCredential</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a credential used to authenticate the web application to
            HealthVault.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplicationConnection">
      <MemberSignature Language="C#" Value="public Microsoft.Health.ApplicationConnection ApplicationConnection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Health.ApplicationConnection ApplicationConnection" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.Web.HealthServicePage.ApplicationConnection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ApplicationConnection As ApplicationConnection" />
      <MemberSignature Language="F#" Value="member this.ApplicationConnection : Microsoft.Health.ApplicationConnection" Usage="Microsoft.Health.Web.HealthServicePage.ApplicationConnection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health.Web</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.ApplicationConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a HealthVault connection authenticated at tier 1 for the configured
            default HealthVault web-service instance.
            </summary>
        <value>
            A <see cref="T:Microsoft.Health.ApplicationConnection" /> connection.
            </value>
        <remarks>
            If a connection has already been made on the page, that connection
            is returned. If no connection has been made, a new connection is
            created and returned.
            </remarks>
        <exception cref="T:System.Security.SecurityException">
            If the application private key could not be found in the 
            certificate store to sign requests.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="ApplicationId">
      <MemberSignature Language="C#" Value="protected virtual Guid ApplicationId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid ApplicationId" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.Web.HealthServicePage.ApplicationId" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Property ApplicationId As Guid" />
      <MemberSignature Language="F#" Value="member this.ApplicationId : Guid with get, set" Usage="Microsoft.Health.Web.HealthServicePage.ApplicationId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health.Web</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the unique application identifier.
            </summary>
        <value>To be added.</value>
        <remarks>
            By default the value is set to <see cref="P:Microsoft.Health.HealthApplicationConfiguration.ApplicationId" />. If the
            application needs to change the application identifier it can set the value during
            <see cref="M:Microsoft.Health.Web.HealthServicePage.OnInit(System.EventArgs)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AuthenticatedConnection">
      <MemberSignature Language="C#" Value="public Microsoft.Health.Web.WebApplicationConnection AuthenticatedConnection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Health.Web.WebApplicationConnection AuthenticatedConnection" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.Web.HealthServicePage.AuthenticatedConnection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AuthenticatedConnection As WebApplicationConnection" />
      <MemberSignature Language="F#" Value="member this.AuthenticatedConnection : Microsoft.Health.Web.WebApplicationConnection" Usage="Microsoft.Health.Web.HealthServicePage.AuthenticatedConnection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health.Web</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.Web.WebApplicationConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a HealthVault connection authenticated at tier 3.
            </summary>
        <value>
            A <see cref="T:Microsoft.Health.Web.WebApplicationConnection" /> 
            connection.
            </value>
        <remarks>
            If a connection has already been made on the page, that connection
            is returned. If no connection has been made, a new connection is
            created and returned.
            </remarks>
        <exception cref="T:System.Security.SecurityException">
            If the application private key could not be found in the 
            certificate store to sign requests.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            If a person has not been logged in.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="ConstructShellTargetUrl">
      <MemberSignature Language="C#" Value="public static Uri ConstructShellTargetUrl (string targetLocation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Uri ConstructShellTargetUrl(string targetLocation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.Web.HealthServicePage.ConstructShellTargetUrl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConstructShellTargetUrl (targetLocation As String) As Uri" />
      <MemberSignature Language="F#" Value="static member ConstructShellTargetUrl : string -&gt; Uri" Usage="Microsoft.Health.Web.HealthServicePage.ConstructShellTargetUrl targetLocation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health.Web</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetLocation" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetLocation">
            A known constant indicating the internal HealthVault 
            service Shell location to redirect to.
            See <a href="http://msdn.microsoft.com/en-us/library/ff803620.aspx">Shell redirect interface</a>.
            </param>
        <summary>
            Constructs a URL to be redirected to via the HealthVault URL 
            redirector.
            </summary>
        <returns>
            The constructed URL.
            </returns>
        <remarks>
            The <paramref name="targetLocation" /> will be passed as the target parameter value to
            the redirector URL.
            </remarks>
        <exception cref="T:System.UriFormatException">
            If the specific target location causes an improper URL to be
            constructed.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="ConstructShellTargetUrl">
      <MemberSignature Language="C#" Value="public static Uri ConstructShellTargetUrl (string targetLocation, string targetQuery);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Uri ConstructShellTargetUrl(string targetLocation, string targetQuery) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.Web.HealthServicePage.ConstructShellTargetUrl(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConstructShellTargetUrl (targetLocation As String, targetQuery As String) As Uri" />
      <MemberSignature Language="F#" Value="static member ConstructShellTargetUrl : string * string -&gt; Uri" Usage="Microsoft.Health.Web.HealthServicePage.ConstructShellTargetUrl (targetLocation, targetQuery)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health.Web</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetLocation" Type="System.String" />
        <Parameter Name="targetQuery" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetLocation">
            A known constant indicating the internal HealthVault 
            service Shell location to redirect to.
            See <a href="http://msdn.microsoft.com/en-us/library/ff803620.aspx">Shell redirect interface</a>.
            </param>
        <param name="targetQuery">
            The query string value to pass to the URL to which redirection is 
            taking place.
            </param>
        <summary>
            Constructs a URL to be redirected to via the HealthVault URL 
            redirector.
            </summary>
        <returns>
            The constructed URL.
            </returns>
        <remarks>
            The <paramref name="targetLocation" /> will be passed as the target parameter value to
            the redirector URL.
            The <paramref name="targetQuery" /> will be URL encoded and passed as the targetqs 
            parameter value to the redirector URL.
            </remarks>
        <exception cref="T:System.UriFormatException">
            If the specific target location causes an improper URL to be
            constructed.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="ConstructShellTargetUrl">
      <MemberSignature Language="C#" Value="public static Uri ConstructShellTargetUrl (string targetLocation, string targetQuery, string actionUrlQueryString);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Uri ConstructShellTargetUrl(string targetLocation, string targetQuery, string actionUrlQueryString) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.Web.HealthServicePage.ConstructShellTargetUrl(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConstructShellTargetUrl (targetLocation As String, targetQuery As String, actionUrlQueryString As String) As Uri" />
      <MemberSignature Language="F#" Value="static member ConstructShellTargetUrl : string * string * string -&gt; Uri" Usage="Microsoft.Health.Web.HealthServicePage.ConstructShellTargetUrl (targetLocation, targetQuery, actionUrlQueryString)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health.Web</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetLocation" Type="System.String" />
        <Parameter Name="targetQuery" Type="System.String" />
        <Parameter Name="actionUrlQueryString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetLocation">
            A known constant indicating the internal HealthVault 
            service Shell location to redirect to.
            See <a href="http://msdn.microsoft.com/en-us/library/ff803620.aspx">Shell redirect interface</a>.
            </param>
        <param name="targetQuery">
            The query string value to pass to the URL to which redirection is 
            taking place.
            </param>
        <param name="actionUrlQueryString">
            The query string parameters passed to the calling application action URL after the
            target action is completed in the Shell.
            </param>
        <summary>
            Constructs a URL to be redirected to via the HealthVault URL 
            redirector.
            </summary>
        <returns>
            The constructed URL.
            </returns>
        <remarks>
            The <paramref name="targetLocation" /> will be passed as the target parameter value to
            the redirector URL.
            The <paramref name="targetQuery" /> will be URL encoded and passed as the targetqs 
            parameter value to the redirector URL.
            The <paramref name="actionUrlQueryString" /> will be URL encoded and passed as the actionqs
            parameter value to the redirector URL.
            </remarks>
        <exception cref="T:System.UriFormatException">
            If the specific target location causes an improper URL to be
            constructed.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CurrentPage">
      <MemberSignature Language="C#" Value="public static Microsoft.Health.Web.HealthServicePage CurrentPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Microsoft.Health.Web.HealthServicePage CurrentPage" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.Web.HealthServicePage.CurrentPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentPage As HealthServicePage" />
      <MemberSignature Language="F#" Value="member this.CurrentPage : Microsoft.Health.Web.HealthServicePage" Usage="Microsoft.Health.Web.HealthServicePage.CurrentPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health.Web</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.Web.HealthServicePage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the current page as a HealthServicePage.
            </summary>
        <value>To be added.</value>
        <remarks>
            This property can be used to retrieve an instance of the page from
            objects that don't have a reference to the page.
            The property accesses the <see cref="T:System.Web.HttpContext" /> to retrieve
            the page and casts it to a HealthServicePage. If the page is not
            a HealthServicePage or the page hasn't been instantiated, null 
            is returned.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DictionaryConnection">
      <MemberSignature Language="C#" Value="public Microsoft.Health.ApplicationConnection DictionaryConnection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Health.ApplicationConnection DictionaryConnection" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.Web.HealthServicePage.DictionaryConnection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DictionaryConnection As ApplicationConnection" />
      <MemberSignature Language="F#" Value="member this.DictionaryConnection : Microsoft.Health.ApplicationConnection" Usage="Microsoft.Health.Web.HealthServicePage.DictionaryConnection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health.Web</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.ApplicationConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a HealthVault connection without an authentication token.
            </summary>
        <value>
            A <see cref="P:Microsoft.Health.Web.HealthServicePage.ApplicationConnection" /> connection.
            </value>
        <remarks>
            If a connection has already been made on the page, that connection
            is returned. If no connection has been made, a new connection is
            created a returned.
            </remarks>
        <exception cref="T:System.Security.SecurityException">
            If the application private key could not be found in the 
            certificate store to sign requests.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="InitializeUserData">
      <MemberSignature Language="C#" Value="protected void InitializeUserData (bool logOnRequired);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InitializeUserData(bool logOnRequired) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.Web.HealthServicePage.InitializeUserData(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InitializeUserData (logOnRequired As Boolean)" />
      <MemberSignature Language="F#" Value="member this.InitializeUserData : bool -&gt; unit" Usage="healthServicePage.InitializeUserData logOnRequired" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health.Web</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logOnRequired" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="logOnRequired"> 
            If true and the user hasn't already logged in to HealthVault, 
            the page will automatically redirect to the HealthVault logon page 
            and then return to this page with the auth-token.
            </param>
        <summary>
            Initializes the user data for the page. 
            </summary>
        <remarks>
            The base implementation of OnPreLoad will automatically call this
            method with the value specified in the <see cref="P:Microsoft.Health.Web.HealthServicePage.LogOnRequired" />
            property. This method should only be called explicitly if there
            is a need to initialize the user data again after the page has
            been loaded.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLoggedIn">
      <MemberSignature Language="C#" Value="public bool IsLoggedIn { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLoggedIn" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.Web.HealthServicePage.IsLoggedIn" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLoggedIn As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsLoggedIn : bool" Usage="Microsoft.Health.Web.HealthServicePage.IsLoggedIn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health.Web</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets whether a person is logged-in or not.
            </summary>
        <value>
            True if a person is logged-in, or false otherwise.
            </value>
        <remarks>
            The page handles logon automatically if the 
            <see cref="P:Microsoft.Health.Web.HealthServicePage.LogOnRequired" /> is set to true.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMra">
      <MemberSignature Language="C#" Value="protected virtual bool IsMra { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMra" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.Web.HealthServicePage.IsMra" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property IsMra As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsMra : bool" Usage="Microsoft.Health.Web.HealthServicePage.IsMra" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health.Web</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value indicating whether the page is for multi-record application.
            </summary>
        <value>To be added.</value>
        <remarks>
            By default the value is set to true. The default can be overridden on an application
            wide basis by setting the WCPage_IsMRA setting in the web.config file. The value can
            also be overridden on a per page basis by overriding this property in a derived class.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPageSslSecure">
      <MemberSignature Language="C#" Value="protected virtual bool IsPageSslSecure { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPageSslSecure" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.Web.HealthServicePage.IsPageSslSecure" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property IsPageSslSecure As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsPageSslSecure : bool" Usage="Microsoft.Health.Web.HealthServicePage.IsPageSslSecure" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health.Web</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value indicating whether a page wants to use SSL for 
            security.
            </summary>
        <value>To be added.</value>
        <remarks>
            Used to indicate if a page wants to use SSL for security. 
            By default this property returns true as every page is assumed
            to use SSL when allowed. However individual pages can choose not 
            to use SSL by overriding it and making it return false.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogOnRequired">
      <MemberSignature Language="C#" Value="protected virtual bool LogOnRequired { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LogOnRequired" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.Web.HealthServicePage.LogOnRequired" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property LogOnRequired As Boolean" />
      <MemberSignature Language="F#" Value="member this.LogOnRequired : bool" Usage="Microsoft.Health.Web.HealthServicePage.LogOnRequired" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health.Web</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            True if the page requires the user to be logged in to HealthVault.
            </summary>
        <value>To be added.</value>
        <remarks>
            The default implementation returns true. For pages that don't 
            require logon, the page should override the property and return
            false.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.Web.HealthServicePage.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="healthServicePage.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health.Web</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
            Event arguments for the Init event thrown
            </param>
        <summary>
            Initializes the page to use SSL if necessary.
            </summary>
        <remarks>
            This is called on init of every page. We handle the SSL 
            redirection at this point. Any page inheriting this class and
            wanting to be an insecure page must override this delegate 
            method and set the isSecure member variable to false before
            calling the parent init.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreLoad">
      <MemberSignature Language="C#" Value="protected override void OnPreLoad (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPreLoad(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.Web.HealthServicePage.OnPreLoad(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnPreLoad (e As EventArgs)" />
      <MemberSignature Language="F#" Value="override this.OnPreLoad : EventArgs -&gt; unit" Usage="healthServicePage.OnPreLoad e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health.Web</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
            Event arguments for the event.
            </param>
        <summary>
            Handles the PreLoad event for the page.
            </summary>
        <remarks>
            The base implementation calls <see cref="M:Microsoft.Health.Web.WebApplicationUtilities.PageOnPreLoad(System.Web.HttpContext,System.Boolean)" />
            and then calls the 
            <see cref="M:System.Web.UI.Page.OnPreLoad(System.EventArgs)" />.
            
            If a derived class overrides this method, it must call the base 
            implementation so that the user data gets initialized.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="PersonInfo">
      <MemberSignature Language="C#" Value="public Microsoft.Health.PersonInfo PersonInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Health.PersonInfo PersonInfo" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.Web.HealthServicePage.PersonInfo" />
      <MemberSignature Language="VB.NET" Value="Public Property PersonInfo As PersonInfo" />
      <MemberSignature Language="F#" Value="member this.PersonInfo : Microsoft.Health.PersonInfo with get, set" Usage="Microsoft.Health.Web.HealthServicePage.PersonInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health.Web</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.PersonInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> 
            Gets information about the logged-in person.
            </summary>
        <value>
            Information about the logged-in person or null if not logged-in.
            </value>
        <remarks>
            This information is a mirror of the 
            <see cref="T:Microsoft.Health.PersonInfo" /> class and is used to 
            serialize information to and from the session.<br /><br />
            PersonInfo should never be set to null. If the application wants
            to log off the user, call <see cref="M:Microsoft.Health.Web.HealthServicePage.SignOut(System.String)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RedirectToLogOn">
      <MemberSignature Language="C#" Value="public void RedirectToLogOn ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RedirectToLogOn() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.Web.HealthServicePage.RedirectToLogOn" />
      <MemberSignature Language="VB.NET" Value="Public Sub RedirectToLogOn ()" />
      <MemberSignature Language="F#" Value="member this.RedirectToLogOn : unit -&gt; unit" Usage="healthServicePage.RedirectToLogOn " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health.Web</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Redirects the caller's browser to the logon page for 
            authentication.
            </summary>
        <remarks>
            After the user successfully authenticates, they get redirected 
            back to the action url for which the target is set to either
            AppAuthSuccess or AppAuthRejected depending on whether the user
            authorized one or more records for use with the application, 
            with the authentication token in the query
            string. This is stripped out and used to populate HealthVault
            data for the page.<br /><br />
            This overload assumes that the applications does not simultaneously
            deal with multiple records for the same person i.e. isMra is false.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RedirectToLogOn">
      <MemberSignature Language="C#" Value="public void RedirectToLogOn (bool isMra);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RedirectToLogOn(bool isMra) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.Web.HealthServicePage.RedirectToLogOn(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RedirectToLogOn (isMra As Boolean)" />
      <MemberSignature Language="F#" Value="member this.RedirectToLogOn : bool -&gt; unit" Usage="healthServicePage.RedirectToLogOn isMra" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health.Web</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isMra" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isMra">
            Whether this application simultaneously deals with multiple records
            for the same person.
            </param>
        <summary>
            Redirects the caller's browser to the logon page for 
            authentication.
            </summary>
        <remarks>
            After the user successfully authenticates, they get redirected 
            to the action url for which the target is set to either
            AppAuthSuccess or AppAuthRejected depending on whether the user
            authorized one or more records for use with the application, with 
            the authentication token in the query
            string. This is stripped out and used to populate HealthVault
            data for the page.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RedirectToShellUrl">
      <MemberSignature Language="C#" Value="public void RedirectToShellUrl (string targetLocation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RedirectToShellUrl(string targetLocation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.Web.HealthServicePage.RedirectToShellUrl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RedirectToShellUrl (targetLocation As String)" />
      <MemberSignature Language="F#" Value="member this.RedirectToShellUrl : string -&gt; unit" Usage="healthServicePage.RedirectToShellUrl targetLocation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health.Web</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetLocation" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetLocation">
            A known constant indicating the internal HealthVault 
            service Shell location to redirect to.
            See <a href="http://msdn.microsoft.com/en-us/library/ff803620.aspx">Shell redirect interface</a>.
            </param>
        <summary>
            Redirects to the HealthVault Shell URL with the query string params 
            appended.
            </summary>
        <remarks>
            The <paramref name="targetLocation" /> will be passed as the target parameter value to
            the redirector URL.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RedirectToShellUrl">
      <MemberSignature Language="C#" Value="public void RedirectToShellUrl (string targetLocation, string targetQuery);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RedirectToShellUrl(string targetLocation, string targetQuery) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.Web.HealthServicePage.RedirectToShellUrl(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RedirectToShellUrl (targetLocation As String, targetQuery As String)" />
      <MemberSignature Language="F#" Value="member this.RedirectToShellUrl : string * string -&gt; unit" Usage="healthServicePage.RedirectToShellUrl (targetLocation, targetQuery)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health.Web</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetLocation" Type="System.String" />
        <Parameter Name="targetQuery" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetLocation">
            A known constant indicating the internal HealthVault 
            service Shell location to redirect to.
            See <a href="http://msdn.microsoft.com/en-us/library/ff803620.aspx">Shell redirect interface</a>.
            </param>
        <param name="targetQuery">
            The query string value to pass to the URL to which redirection is 
            taking place. 
            </param>
        <summary>
            Redirects to the HealthVault Shell URL with the queryString params 
            appended.
            </summary>
        <remarks>
            The <paramref name="targetLocation" /> will be passed as the target parameter value to
            the redirector URL.
            The <paramref name="targetQuery" /> will be URL encoded and passed as the targetqs 
            parameter value to the redirector URL.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RedirectToShellUrl">
      <MemberSignature Language="C#" Value="public void RedirectToShellUrl (string targetLocation, string targetQuery, string actionUrlQueryString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RedirectToShellUrl(string targetLocation, string targetQuery, string actionUrlQueryString) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.Web.HealthServicePage.RedirectToShellUrl(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RedirectToShellUrl (targetLocation As String, targetQuery As String, actionUrlQueryString As String)" />
      <MemberSignature Language="F#" Value="member this.RedirectToShellUrl : string * string * string -&gt; unit" Usage="healthServicePage.RedirectToShellUrl (targetLocation, targetQuery, actionUrlQueryString)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health.Web</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetLocation" Type="System.String" />
        <Parameter Name="targetQuery" Type="System.String" />
        <Parameter Name="actionUrlQueryString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetLocation">
            A known constant indicating the internal HealthVault 
            service Shell location to redirect to.
            See <a href="http://msdn.microsoft.com/en-us/library/ff803620.aspx">Shell redirect interface</a>.
            </param>
        <param name="targetQuery">
            The query string value to pass to the URL to which redirection is 
            taking place. 
            </param>
        <param name="actionUrlQueryString">
            The query string parameters passed to the calling application action URL after the
            target action is completed in the Shell.
            </param>
        <summary>
            Redirects to the HealthVault Shell URL with the queryString params 
            appended.
            </summary>
        <remarks>
            The <paramref name="targetLocation" /> will be passed as the target parameter value to
            the redirector URL.
            The <paramref name="targetQuery" /> will be URL encoded and passed as the targetqs 
            parameter value to the redirector URL.
            The <paramref name="actionUrlQueryString" /> will be URL encoded and passed as the actionqs
            parameter value to the redirector URL.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RefreshAndPersist">
      <MemberSignature Language="C#" Value="public void RefreshAndPersist ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RefreshAndPersist() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.Web.HealthServicePage.RefreshAndPersist" />
      <MemberSignature Language="VB.NET" Value="Public Sub RefreshAndPersist ()" />
      <MemberSignature Language="F#" Value="member this.RefreshAndPersist : unit -&gt; unit" Usage="healthServicePage.RefreshAndPersist " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health.Web</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> 
            Cleans the application's session of HealthVault information and 
            then repopulates it.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
            If a person isn't logged on when this is called.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="RefreshAndPersist">
      <MemberSignature Language="C#" Value="public void RefreshAndPersist (string authToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RefreshAndPersist(string authToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.Web.HealthServicePage.RefreshAndPersist(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RefreshAndPersist (authToken As String)" />
      <MemberSignature Language="F#" Value="member this.RefreshAndPersist : string -&gt; unit" Usage="healthServicePage.RefreshAndPersist authToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health.Web</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="authToken" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="authToken">
            The authentication to use to populate the session with HealthVault
            information.
            </param>
        <summary> 
            Cleans the application's session of HealthVault information and 
            then repopulates it using the specified authentication token.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            If HealthVault returns an error when getting information
            about the person in the <paramref name="authToken" />.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SetSelectedRecord">
      <MemberSignature Language="C#" Value="public void SetSelectedRecord (Microsoft.Health.HealthRecordInfo activeRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSelectedRecord(class Microsoft.Health.HealthRecordInfo activeRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.Web.HealthServicePage.SetSelectedRecord(Microsoft.Health.HealthRecordInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSelectedRecord (activeRecord As HealthRecordInfo)" />
      <MemberSignature Language="F#" Value="member this.SetSelectedRecord : Microsoft.Health.HealthRecordInfo -&gt; unit" Usage="healthServicePage.SetSelectedRecord activeRecord" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health.Web</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activeRecord" Type="Microsoft.Health.HealthRecordInfo" />
      </Parameters>
      <Docs>
        <param name="activeRecord">
            The health record to set as the "active" record for the 
            application.
            </param>
        <summary> 
            Sets the selected health record for the application.
            </summary>
        <remarks>
            By setting the selected record, the HealthVault page framework will
            ensure that every page of the application will have the same 
            record selected by serializing the record information into the
            session, and deserializing it for each page.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SignOut">
      <MemberSignature Language="C#" Value="public void SignOut ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SignOut() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.Web.HealthServicePage.SignOut" />
      <MemberSignature Language="VB.NET" Value="Public Sub SignOut ()" />
      <MemberSignature Language="F#" Value="member this.SignOut : unit -&gt; unit" Usage="healthServicePage.SignOut " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health.Web</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Signs the person out, cleans up the HealthVault session 
            information, and redirects the user's browser to the signout action 
            URL.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SignOut">
      <MemberSignature Language="C#" Value="public void SignOut (string actionUrlQueryString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SignOut(string actionUrlQueryString) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.Web.HealthServicePage.SignOut(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SignOut (actionUrlQueryString As String)" />
      <MemberSignature Language="F#" Value="member this.SignOut : string -&gt; unit" Usage="healthServicePage.SignOut actionUrlQueryString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health.Web</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actionUrlQueryString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="actionUrlQueryString">
            The query string parameters to pass to the signout action URL after
            cleaning up data.
            </param>
        <summary>
            Signs the person out, cleans up the HealthVault session 
            information, and redirects the user's browser to the signout action 
            URL with the specified querystring parameter if any.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StripFromQueryString">
      <MemberSignature Language="C#" Value="protected string StripFromQueryString (params string[] keys);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string StripFromQueryString(string[] keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.Web.HealthServicePage.StripFromQueryString(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Protected Function StripFromQueryString (ParamArray keys As String()) As String" />
      <MemberSignature Language="F#" Value="member this.StripFromQueryString : string[] -&gt; string" Usage="healthServicePage.StripFromQueryString keys" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health.Web</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="keys"> 
            variable(s) to remove 
            </param>
        <summary> 
            remove one variable from query string 
            </summary>
        <returns> 
            original url without key 
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>