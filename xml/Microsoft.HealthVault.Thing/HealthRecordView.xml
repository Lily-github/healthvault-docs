<Type Name="HealthRecordView" FullName="Microsoft.HealthVault.Thing.HealthRecordView">
  <TypeSignature Language="C#" Value="public class HealthRecordView" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HealthRecordView extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.HealthVault.Thing.HealthRecordView" />
  <TypeSignature Language="VB.NET" Value="Public Class HealthRecordView" />
  <TypeSignature Language="F#" Value="type HealthRecordView = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.HealthVault</AssemblyName>
    <AssemblyVersion>1.65.0.0</AssemblyVersion>
    <AssemblyVersion>1.66.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Sections = {Sections}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
             Defines a result view for use with
             <see cref="T:Microsoft.HealthVault.Thing.HealthRecordSearcher" /> searches.
             </summary>
    <remarks>
             This class wraps up the logic for constructing the format tag for
             querying things with the "GetThings" method.
             </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HealthRecordView (Microsoft.HealthVault.Configuration.HealthVaultConfiguration configuration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.HealthVault.Configuration.HealthVaultConfiguration configuration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.HealthVault.Thing.HealthRecordView.#ctor(Microsoft.HealthVault.Configuration.HealthVaultConfiguration)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (configuration As HealthVaultConfiguration)" />
      <MemberSignature Language="F#" Value="new Microsoft.HealthVault.Thing.HealthRecordView : Microsoft.HealthVault.Configuration.HealthVaultConfiguration -&gt; Microsoft.HealthVault.Thing.HealthRecordView" Usage="new Microsoft.HealthVault.Thing.HealthRecordView configuration" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.HealthVault</AssemblyName>
        <AssemblyVersion>1.65.0.0</AssemblyVersion>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="configuration" Type="Microsoft.HealthVault.Configuration.HealthVaultConfiguration" />
      </Parameters>
      <Docs>
        <param name="configuration">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BlobFormat">
      <MemberSignature Language="C#" Value="public Microsoft.HealthVault.ItemTypes.BlobFormat BlobFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.HealthVault.ItemTypes.BlobFormat BlobFormat" />
      <MemberSignature Language="DocId" Value="P:Microsoft.HealthVault.Thing.HealthRecordView.BlobFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property BlobFormat As BlobFormat" />
      <MemberSignature Language="F#" Value="member this.BlobFormat : Microsoft.HealthVault.ItemTypes.BlobFormat with get, set" Usage="Microsoft.HealthVault.Thing.HealthRecordView.BlobFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.HealthVault</AssemblyName>
        <AssemblyVersion>1.65.0.0</AssemblyVersion>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.HealthVault.ItemTypes.BlobFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets the format of the BLOB that should be returned.
             </summary>
        <value>To be added.</value>
        <remarks>
             Defaults to <see cref="P:Microsoft.HealthVault.Thing.HealthRecordView.BlobFormat" />.Unknown.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="BlobNames">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;string&gt; BlobNames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;string&gt; BlobNames" />
      <MemberSignature Language="DocId" Value="P:Microsoft.HealthVault.Thing.HealthRecordView.BlobNames" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BlobNames As Collection(Of String)" />
      <MemberSignature Language="F#" Value="member this.BlobNames : System.Collections.ObjectModel.Collection&lt;string&gt;" Usage="Microsoft.HealthVault.Thing.HealthRecordView.BlobNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.HealthVault</AssemblyName>
        <AssemblyVersion>1.65.0.0</AssemblyVersion>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets a collection representing the names of the BLOBs to return for the item(s).
             </summary>
        <value>To be added.</value>
        <remarks>
             If no BLOB names are specified, all BLOBs will be returned.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sections">
      <MemberSignature Language="C#" Value="public Microsoft.HealthVault.Thing.ThingSections Sections { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.HealthVault.Thing.ThingSections Sections" />
      <MemberSignature Language="DocId" Value="P:Microsoft.HealthVault.Thing.HealthRecordView.Sections" />
      <MemberSignature Language="VB.NET" Value="Public Property Sections As ThingSections" />
      <MemberSignature Language="F#" Value="member this.Sections : Microsoft.HealthVault.Thing.ThingSections with get, set" Usage="Microsoft.HealthVault.Thing.HealthRecordView.Sections" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.HealthVault</AssemblyName>
        <AssemblyVersion>1.65.0.0</AssemblyVersion>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.HealthVault.Thing.ThingSections</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets or sets the sections that will be retrieved when the
             query is made.
             </summary>
        <value>
             An instance of <see cref="T:Microsoft.HealthVault.Thing.ThingSections" />. The default
             values are Core and XML.
             </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.HealthVault.Thing.HealthRecordView.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="healthRecordView.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.HealthVault</AssemblyName>
        <AssemblyVersion>1.65.0.0</AssemblyVersion>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
             Gets a string representation of the instance.
             </summary>
        <returns>
             A string representing the XML used as the group portion of the
             XML request for a "GetThings" method call.
             </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformsToApply">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;string&gt; TransformsToApply { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;string&gt; TransformsToApply" />
      <MemberSignature Language="DocId" Value="P:Microsoft.HealthVault.Thing.HealthRecordView.TransformsToApply" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TransformsToApply As Collection(Of String)" />
      <MemberSignature Language="F#" Value="member this.TransformsToApply : System.Collections.ObjectModel.Collection&lt;string&gt;" Usage="Microsoft.HealthVault.Thing.HealthRecordView.TransformsToApply" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.HealthVault</AssemblyName>
        <AssemblyVersion>1.65.0.0</AssemblyVersion>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets the names of the transforms to apply to the resulting
             XML data section.
             </summary>
        <value>To be added.</value>
        <remarks>
             The name of the transform refers to the format of the data to
             which the transform converts the XML data. For example, "rss"
             converts the XML data into RSS format. Note, all formats to
             which the data can be converted are legal XML documents
             (RSS, XHTML, and so on).  A list of the valid transform names is
             available in the HealthVault Developer's Guide.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeVersionFormat">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;Guid&gt; TypeVersionFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;valuetype System.Guid&gt; TypeVersionFormat" />
      <MemberSignature Language="DocId" Value="P:Microsoft.HealthVault.Thing.HealthRecordView.TypeVersionFormat" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeVersionFormat As Collection(Of Guid)" />
      <MemberSignature Language="F#" Value="member this.TypeVersionFormat : System.Collections.ObjectModel.Collection&lt;Guid&gt;" Usage="Microsoft.HealthVault.Thing.HealthRecordView.TypeVersionFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.HealthVault</AssemblyName>
        <AssemblyVersion>1.65.0.0</AssemblyVersion>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Guid&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets a collection of the version IDs for the types in which the results should be
             formatted.
             </summary>
        <value>To be added.</value>
        <remarks>
             When a type gets versioned, HealthVault will retrieve instances of
             multiple versions even when only one type is specified in the request
             filter.  By default HealthVault will map the XML of the instance to
             the version supported by the application based on the base
             authorization XML specified in the configuration of the application in
             HealthVault. However, if multiple versions are supported by the
             application, it can use this property to state the version format to
             use when writing out the instance XML.
             For example, when querying for medications, HealthVault will retrieve
             medications of both version one and two schemas. If an application
             only supports version one of the medication schema, then HealthVault
             will automatically map version two instances down to the version one
             schema. However, if the application supports both version one and two
             by declaring both type IDs in the applications configuration, then
             version one instances will be returned using the version one schema, and
             version two instances will be returned using the version two schema.
             If this application wants to retrieve all instances using a common
             schema (say version two), then it would specify the version two type
             ID in this parameter and all instances will be mapped to version two
             of the medication schema before being returned.
             Be careful when adding to this collection. If you are not specifying any
             <see cref="P:Microsoft.HealthVault.Thing.HealthRecordView.TransformsToApply" /> and the Microsoft.Health.ItemTypes namespace doesn't
             contain a class for parsing the type version you specify, you will get a
             <see cref="T:Microsoft.HealthVault.Thing.ThingBase" /> instance rather than the type specific class instance.
             </remarks>
      </Docs>
    </Member>
  </Members>
</Type>