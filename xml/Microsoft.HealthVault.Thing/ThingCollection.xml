<Type Name="ThingCollection" FullName="Microsoft.HealthVault.Thing.ThingCollection">
  <TypeSignature Language="C#" Value="public class ThingCollection : System.Collections.Generic.ICollection&lt;Microsoft.HealthVault.Thing.IThing&gt;, System.Collections.Generic.IEnumerable&lt;Microsoft.HealthVault.Thing.IThing&gt;, System.Collections.Generic.IList&lt;Microsoft.HealthVault.Thing.IThing&gt;, System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ThingCollection extends System.Object implements class System.Collections.Generic.ICollection`1&lt;class Microsoft.HealthVault.Thing.IThing&gt;, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.HealthVault.Thing.IThing&gt;, class System.Collections.Generic.IList`1&lt;class Microsoft.HealthVault.Thing.IThing&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <TypeSignature Language="DocId" Value="T:Microsoft.HealthVault.Thing.ThingCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class ThingCollection&#xA;Implements ICollection(Of IThing), IEnumerable(Of IThing), IList, IList(Of IThing)" />
  <TypeSignature Language="F#" Value="type ThingCollection = class&#xA;    interface IList&lt;IThing&gt;&#xA;    interface ICollection&lt;IThing&gt;&#xA;    interface seq&lt;IThing&gt;&#xA;    interface IEnumerable&#xA;    interface IList&#xA;    interface ICollection" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.HealthVault</AssemblyName>
    <AssemblyVersion>1.65.0.0</AssemblyVersion>
    <AssemblyVersion>1.66.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;Microsoft.HealthVault.Thing.IThing&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;Microsoft.HealthVault.Thing.IThing&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IList&lt;Microsoft.HealthVault.Thing.IThing&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(Microsoft.HealthVault.Thing.ThingCollection/HealthRecordItemCollectionDebugView))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
             Defines a group of results that gets returned from the
             <see cref="T:Microsoft.HealthVault.Thing.HealthRecordSearcher" />.
             </summary>
    <remarks>
             This collection is read-only.
             </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ThingCollection (System.Collections.Generic.IEnumerable&lt;Microsoft.HealthVault.Thing.ThingBase&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.HealthVault.Thing.ThingBase&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.HealthVault.Thing.ThingCollection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.HealthVault.Thing.ThingBase})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (items As IEnumerable(Of ThingBase))" />
      <MemberSignature Language="F#" Value="new Microsoft.HealthVault.Thing.ThingCollection : seq&lt;Microsoft.HealthVault.Thing.ThingBase&gt; -&gt; Microsoft.HealthVault.Thing.ThingCollection" Usage="new Microsoft.HealthVault.Thing.ThingCollection items" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.HealthVault</AssemblyName>
        <AssemblyVersion>1.65.0.0</AssemblyVersion>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.HealthVault.Thing.ThingBase&gt;" />
      </Parameters>
      <Docs>
        <param name="items">The items to put into the collection.</param>
        <summary>
             Create an instance of the <see cref="T:Microsoft.HealthVault.Thing.ThingCollection" /> class with a specific set of items.
             </summary>
        <remarks>
             This constructor is intended for testing purposes.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (Microsoft.HealthVault.Thing.IThing item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(class Microsoft.HealthVault.Thing.IThing item) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.HealthVault.Thing.ThingCollection.Add(Microsoft.HealthVault.Thing.IThing)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (item As IThing)" />
      <MemberSignature Language="F#" Value="abstract member Add : Microsoft.HealthVault.Thing.IThing -&gt; unit&#xA;override this.Add : Microsoft.HealthVault.Thing.IThing -&gt; unit" Usage="thingCollection.Add item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.HealthVault</AssemblyName>
        <AssemblyVersion>1.65.0.0</AssemblyVersion>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="Microsoft.HealthVault.Thing.IThing" />
      </Parameters>
      <Docs>
        <param name="item">
             This parameter is ignored, because items cannot be added.
             </param>
        <summary>
             This method is not used, because the collection is read-only and
             you cannot add items to it.
             </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
             This exception is always thrown.
             </exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.HealthVault.Thing.ThingCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="thingCollection.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.HealthVault</AssemblyName>
        <AssemblyVersion>1.65.0.0</AssemblyVersion>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
             This method is not used, because the result group is read-only,
             and you cannot clear items from it.
             </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
             This exception is always thrown.
             </exception>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (Microsoft.HealthVault.Thing.IThing item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(class Microsoft.HealthVault.Thing.IThing item) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.HealthVault.Thing.ThingCollection.Contains(Microsoft.HealthVault.Thing.IThing)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (item As IThing) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member Contains : Microsoft.HealthVault.Thing.IThing -&gt; bool&#xA;override this.Contains : Microsoft.HealthVault.Thing.IThing -&gt; bool" Usage="thingCollection.Contains item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.HealthVault</AssemblyName>
        <AssemblyVersion>1.65.0.0</AssemblyVersion>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="Microsoft.HealthVault.Thing.IThing" />
      </Parameters>
      <Docs>
        <param name="item">
             The <see cref="T:Microsoft.HealthVault.Thing.IThing" /> to locate in the collection.
             </param>
        <summary>
             Gets a value indicating whether the collection contains the
             specified <see cref="T:Microsoft.HealthVault.Thing.IThing" />.
             </summary>
        <returns>
          <b>true</b> if a matching <see cref="T:Microsoft.HealthVault.Thing.IThing" /> is found;
             otherwise, <b>false</b>.
             </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (Microsoft.HealthVault.Thing.ThingKey itemKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class Microsoft.HealthVault.Thing.ThingKey itemKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.HealthVault.Thing.ThingCollection.Contains(Microsoft.HealthVault.Thing.ThingKey)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (itemKey As ThingKey) As Boolean" />
      <MemberSignature Language="F#" Value="member this.Contains : Microsoft.HealthVault.Thing.ThingKey -&gt; bool" Usage="thingCollection.Contains itemKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.HealthVault</AssemblyName>
        <AssemblyVersion>1.65.0.0</AssemblyVersion>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemKey" Type="Microsoft.HealthVault.Thing.ThingKey" />
      </Parameters>
      <Docs>
        <param name="itemKey">
             The unique <see cref="T:Microsoft.HealthVault.Thing.ThingKey" /> used to locate the
             <see cref="T:Microsoft.HealthVault.Thing.ThingBase" />item in the collection. The key
             contains a unique identifier for the <see cref="T:Microsoft.HealthVault.Thing.ThingBase" />
             and a unique version stamp identifying the version of
             the <see cref="T:Microsoft.HealthVault.Thing.IThing" />.
             </param>
        <summary>
             Gets a value indicating whether the collection contains a
             <see cref="T:Microsoft.HealthVault.Thing.IThing" /> with the specified
             <see cref="T:Microsoft.HealthVault.Thing.ThingKey" />.
             </summary>
        <returns>
          <b>true</b> if a matching object is found; otherwise, <b>false</b>.
             </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Microsoft.HealthVault.Thing.IThing[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class Microsoft.HealthVault.Thing.IThing[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.HealthVault.Thing.ThingCollection.CopyTo(Microsoft.HealthVault.Thing.IThing[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As IThing(), arrayIndex As Integer)" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Microsoft.HealthVault.Thing.IThing[] * int -&gt; unit&#xA;override this.CopyTo : Microsoft.HealthVault.Thing.IThing[] * int -&gt; unit" Usage="thingCollection.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.HealthVault</AssemblyName>
        <AssemblyVersion>1.65.0.0</AssemblyVersion>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="Microsoft.HealthVault.Thing.IThing[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
             This parameter is ignored, since the result group cannot be copied.
             </param>
        <param name="arrayIndex">
             This parameter is also ignored, since the result group cannot be copied.
             </param>
        <summary>
             This method is not used, because copying the result group might
             cause unexpected network access.
             </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
             This exception is always thrown.
             </exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.HealthVault.Thing.ThingCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="Microsoft.HealthVault.Thing.ThingCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.HealthVault</AssemblyName>
        <AssemblyVersion>1.65.0.0</AssemblyVersion>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets the number of items in the result group.
             </summary>
        <value>To be added.</value>
        <remarks>
             This number can include partial results returned from the server
             if the maximum number of items returned is reached. If accessed,
             the partial items are retrieved automatically from the server.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;Microsoft.HealthVault.Thing.IThing&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class Microsoft.HealthVault.Thing.IThing&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.HealthVault.Thing.ThingCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of IThing)" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;Microsoft.HealthVault.Thing.IThing&gt;&#xA;override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;Microsoft.HealthVault.Thing.IThing&gt;" Usage="thingCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.HealthVault</AssemblyName>
        <AssemblyVersion>1.65.0.0</AssemblyVersion>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;Microsoft.HealthVault.Thing.IThing&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
             Returns an enumerator that iterates through the collection.
             </summary>
        <returns>
             A IEnumerator that iterates through the collection.
             </returns>
        <remarks>
             This enumerator might cause network requests to the HealthVault service
             as it enumerates the results. The HealthVault service limits the
             number of results with each request, therefore, it might be
             necessary to make multiple requests to fill in the result data as the
             collection is enumerated.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRange">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;Microsoft.HealthVault.Thing.IThing&gt; GetRange (int minIndex, int maxIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.Collection`1&lt;class Microsoft.HealthVault.Thing.IThing&gt; GetRange(int32 minIndex, int32 maxIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.HealthVault.Thing.ThingCollection.GetRange(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRange (minIndex As Integer, maxIndex As Integer) As Collection(Of IThing)" />
      <MemberSignature Language="F#" Value="member this.GetRange : int * int -&gt; System.Collections.ObjectModel.Collection&lt;Microsoft.HealthVault.Thing.IThing&gt;" Usage="thingCollection.GetRange (minIndex, maxIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.HealthVault</AssemblyName>
        <AssemblyVersion>1.65.0.0</AssemblyVersion>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;Microsoft.HealthVault.Thing.IThing&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="minIndex" Type="System.Int32" />
        <Parameter Name="maxIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="minIndex">
             The starting point for retrieving items.
             </param>
        <param name="maxIndex">
             The stopping point for retrieving items.
             </param>
        <summary>
             Retrieves the <see cref="T:Microsoft.HealthVault.Thing.IThing" /> from the result group in the
             specified range of indexes, including the specified indexes.
             </summary>
        <returns>
             A collection of items in the specified index range.
             </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
             The <paramref name="minIndex" /> parameter is greater than the
             <paramref name="maxIndex" /> parameter.
             </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
             Either the <paramref name="minIndex" /> parameter or the
             <paramref name="maxIndex" /> parameter is less than zero, or the
             <paramref name="maxIndex" /> parameter is greater than
             <see cref="P:Microsoft.HealthVault.Thing.ThingCollection.Count" /> -1.
             </exception>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (Microsoft.HealthVault.Thing.IThing item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(class Microsoft.HealthVault.Thing.IThing item) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.HealthVault.Thing.ThingCollection.IndexOf(Microsoft.HealthVault.Thing.IThing)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As IThing) As Integer" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : Microsoft.HealthVault.Thing.IThing -&gt; int&#xA;override this.IndexOf : Microsoft.HealthVault.Thing.IThing -&gt; int" Usage="thingCollection.IndexOf item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.IndexOf(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.HealthVault</AssemblyName>
        <AssemblyVersion>1.65.0.0</AssemblyVersion>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="Microsoft.HealthVault.Thing.IThing" />
      </Parameters>
      <Docs>
        <param name="item">
             The <see cref="T:Microsoft.HealthVault.Thing.IThing" /> to locate in the list.
             </param>
        <summary>
             Determines the index of the specific <see cref="T:Microsoft.HealthVault.Thing.IThing" />
             in the list.
             </summary>
        <returns>
             The index of the <see cref="T:Microsoft.HealthVault.Thing.IThing" />, if found;
             otherwise, -1.
             </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (Microsoft.HealthVault.Thing.ThingKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(class Microsoft.HealthVault.Thing.ThingKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.HealthVault.Thing.ThingCollection.IndexOf(Microsoft.HealthVault.Thing.ThingKey)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (key As ThingKey) As Integer" />
      <MemberSignature Language="F#" Value="member this.IndexOf : Microsoft.HealthVault.Thing.ThingKey -&gt; int" Usage="thingCollection.IndexOf key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.HealthVault</AssemblyName>
        <AssemblyVersion>1.65.0.0</AssemblyVersion>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.HealthVault.Thing.ThingKey" />
      </Parameters>
      <Docs>
        <param name="key">
             The unique thing key used to locate the
             item in the list.
             </param>
        <summary>
             Determines the index of the specific item in the list using the
             unique thing identifier.
             </summary>
        <returns>
             The index of item, if found in the list; otherwise, -1.
             </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, Microsoft.HealthVault.Thing.IThing item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Insert(int32 index, class Microsoft.HealthVault.Thing.IThing item) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.HealthVault.Thing.ThingCollection.Insert(System.Int32,Microsoft.HealthVault.Thing.IThing)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (index As Integer, item As IThing)" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * Microsoft.HealthVault.Thing.IThing -&gt; unit&#xA;override this.Insert : int * Microsoft.HealthVault.Thing.IThing -&gt; unit" Usage="thingCollection.Insert (index, item)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.HealthVault</AssemblyName>
        <AssemblyVersion>1.65.0.0</AssemblyVersion>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="Microsoft.HealthVault.Thing.IThing" />
      </Parameters>
      <Docs>
        <param name="index">
             This parameter is ignored because the collection is read-only.
             </param>
        <param name="item">
             This parameter is also ignored because the collection is read-only.
             </param>
        <summary>
             This method is not used, because items cannot be inserted into a
             read-only collection.
             </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
             The collection is read-only and does not support insertion.
             </exception>
      </Docs>
    </Member>
    <Member MemberName="IsFixedSize">
      <MemberSignature Language="C#" Value="public bool IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:Microsoft.HealthVault.Thing.ThingCollection.IsFixedSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFixedSize As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsFixedSize : bool" Usage="Microsoft.HealthVault.Thing.ThingCollection.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.HealthVault</AssemblyName>
        <AssemblyVersion>1.65.0.0</AssemblyVersion>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets a value indicating that the IList has a fixed size.
             </summary>
        <value>
             This property always returns <b>true</b>.
             </value>
        <remarks>
             A collection with a fixed size does not allow the addition or
             removal of elements after the collection is created, but it
             might allow the modification of existing elements.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:Microsoft.HealthVault.Thing.ThingCollection.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="Microsoft.HealthVault.Thing.ThingCollection.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.HealthVault</AssemblyName>
        <AssemblyVersion>1.65.0.0</AssemblyVersion>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets a value indicating that this collection is read-only.
             </summary>
        <value>
             This property always returns <b>true</b>.
             </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:Microsoft.HealthVault.Thing.ThingCollection.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsSynchronized : bool" Usage="Microsoft.HealthVault.Thing.ThingCollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.HealthVault</AssemblyName>
        <AssemblyVersion>1.65.0.0</AssemblyVersion>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets a value indicating that this collection is thread-safe
             when the <see cref="P:Microsoft.HealthVault.Thing.ThingCollection.SyncRoot" /> is used.
             </summary>
        <value>
             This property always returns <b>true</b>.
             </value>
        <remarks>
          <see cref="P:Microsoft.HealthVault.Thing.ThingCollection.SyncRoot" /> returns an object that can be used to
             synchronize access to the ICollection.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public Microsoft.HealthVault.Thing.IThing this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.HealthVault.Thing.IThing Item(int32)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.HealthVault.Thing.ThingCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(index As Integer) As IThing" />
      <MemberSignature Language="F#" Value="member this.Item(int) : Microsoft.HealthVault.Thing.IThing with get, set" Usage="Microsoft.HealthVault.Thing.ThingCollection.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IList`1.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.HealthVault</AssemblyName>
        <AssemblyVersion>1.65.0.0</AssemblyVersion>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.HealthVault.Thing.IThing</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
             The zero-based index of the item.
             </param>
        <summary>
             Retrieves the <see cref="T:Microsoft.HealthVault.Thing.IThing" /> at the specified index.
             </summary>
        <value>
             The item at the specified index.
             </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
             Set is called on a read-only collection.
             </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
             The <paramref name="index" /> parameter is less than zero or
             greater than the value of <see cref="P:Microsoft.HealthVault.Thing.ThingCollection.Count" />.
             </exception>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:Microsoft.HealthVault.Thing.ThingCollection.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="Microsoft.HealthVault.Thing.ThingCollection.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.HealthVault</AssemblyName>
        <AssemblyVersion>1.65.0.0</AssemblyVersion>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets the name of the filter group.
             </summary>
        <value>
             A string containing the name of the filter to which the results
             in this group apply.
             </value>
        <remarks>
             This name is used to distinguish the responses for the filter
             group that was specified in the search.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderByCulture">
      <MemberSignature Language="C#" Value="public string OrderByCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OrderByCulture" />
      <MemberSignature Language="DocId" Value="P:Microsoft.HealthVault.Thing.ThingCollection.OrderByCulture" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OrderByCulture As String" />
      <MemberSignature Language="F#" Value="member this.OrderByCulture : string" Usage="Microsoft.HealthVault.Thing.ThingCollection.OrderByCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.HealthVault</AssemblyName>
        <AssemblyVersion>1.65.0.0</AssemblyVersion>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets the value indicating the culture that order by values were sorted in.
             </summary>
        <value>To be added.</value>
        <remarks>
             The culture may not be the same culture as requested in request header.  It is the closest match HealthVault supports.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (Microsoft.HealthVault.Thing.IThing item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(class Microsoft.HealthVault.Thing.IThing item) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.HealthVault.Thing.ThingCollection.Remove(Microsoft.HealthVault.Thing.IThing)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (item As IThing) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member Remove : Microsoft.HealthVault.Thing.IThing -&gt; bool&#xA;override this.Remove : Microsoft.HealthVault.Thing.IThing -&gt; bool" Usage="thingCollection.Remove item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.HealthVault</AssemblyName>
        <AssemblyVersion>1.65.0.0</AssemblyVersion>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="Microsoft.HealthVault.Thing.IThing" />
      </Parameters>
      <Docs>
        <param name="item">
             This parameter is ignored, since items cannot be removed.
             </param>
        <summary>
             This method is not used, because items cannot be removed from a
             read-only result group.
             </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
             This exception is always thrown.
             </exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.HealthVault.Thing.ThingCollection.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; unit&#xA;override this.RemoveAt : int -&gt; unit" Usage="thingCollection.RemoveAt index" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)</InterfaceMember>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.HealthVault</AssemblyName>
        <AssemblyVersion>1.65.0.0</AssemblyVersion>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
             This parameter is ignored because the collection is read-only.
             </param>
        <summary>
             This method is not used, because items cannot be removed from a
             read-only collection.
             </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
             The collection is read-only and does not support the removal of
             items.
             </exception>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (System.Collections.Generic.IComparer&lt;Microsoft.HealthVault.Thing.IThing&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort(class System.Collections.Generic.IComparer`1&lt;class Microsoft.HealthVault.Thing.IThing&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.HealthVault.Thing.ThingCollection.Sort(System.Collections.Generic.IComparer{Microsoft.HealthVault.Thing.IThing})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort (comparer As IComparer(Of IThing))" />
      <MemberSignature Language="F#" Value="member this.Sort : System.Collections.Generic.IComparer&lt;Microsoft.HealthVault.Thing.IThing&gt; -&gt; unit" Usage="thingCollection.Sort comparer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.HealthVault</AssemblyName>
        <AssemblyVersion>1.65.0.0</AssemblyVersion>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;Microsoft.HealthVault.Thing.IThing&gt;" />
      </Parameters>
      <Docs>
        <param name="comparer">
             The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements,
             or <b>null</b> to use the defalt comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" />.
             </param>
        <summary>
             Sorts the IThings in the collection using the specified comparer.
             </summary>
        <remarks>
             This method will cause all result to be retrieved from HealthVault.<br />
             When a query results in many matches, HealthVault will return a fixed number
             of "full" results (all data requested is returned) and the remaining matches
             as "partial" (only identifying information is returned). ThingCollection
             automatically pages down the full information for the partial results as the
             collection gets enumerated. In order to sort the results, ThingCollection
             must retrieve the full set of data for all the results. This may cause several
             requests to HealthVault to retrieve all the data.
             </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="comparer" /> is <b>null</b>, and the default comparer
             <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find implementation of the
             <see cref="T:System.IComparable`1" /> generic interface.
             </exception>
        <exception cref="T:System.ArgumentException">
             The implementation of <paramref name="comparer" /> caused an error during the sort.
             For example, <paramref name="comparer" /> might not return 0 when
             comparing an item with itself.
             </exception>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (Comparison&lt;Microsoft.HealthVault.Thing.IThing&gt; comparison);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort(class System.Comparison`1&lt;class Microsoft.HealthVault.Thing.IThing&gt; comparison) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.HealthVault.Thing.ThingCollection.Sort(System.Comparison{Microsoft.HealthVault.Thing.IThing})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort (comparison As Comparison(Of IThing))" />
      <MemberSignature Language="F#" Value="member this.Sort : Comparison&lt;Microsoft.HealthVault.Thing.IThing&gt; -&gt; unit" Usage="thingCollection.Sort comparison" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.HealthVault</AssemblyName>
        <AssemblyVersion>1.65.0.0</AssemblyVersion>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparison" Type="System.Comparison&lt;Microsoft.HealthVault.Thing.IThing&gt;" />
      </Parameters>
      <Docs>
        <param name="comparison">
             The comparison method to use when sorting the collection.
             </param>
        <summary>
             Sorts the IThings in the collection using the specified comparison
             method.
             </summary>
        <remarks>
             This method will cause all results to be retrieved from HealthVault.<br />
             When a query results in many matches, HealthVault will return a fixed number
             of "full" results (all data requested is returned) and the remaining matches
             as "partial" (only identifying information is returned). ThingCollection
             automatically retrieves the full information for the partial results as the
             collection gets enumerated. In order to sort the results, ThingCollection
             must retrieve the full set of data for all the results. This may cause several
             requests to HealthVault to retrieve all the data.
             </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="comparison" /> is <b>null</b>.
             </exception>
        <exception cref="T:System.ArgumentException">
             The implementation of <paramref name="comparison" /> caused an error during the sort.
             For example, <paramref name="comparison" /> might not return 0 when comparing an item
             with itself.
             </exception>
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:Microsoft.HealthVault.Thing.ThingCollection.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="F#" Value="member this.SyncRoot : obj" Usage="Microsoft.HealthVault.Thing.ThingCollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.HealthVault</AssemblyName>
        <AssemblyVersion>1.65.0.0</AssemblyVersion>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets an object that can be used to synchronize access to the
             ICollection.
             </summary>
        <value>
             An object that can be used to synchronize access to the
             ICollection.
             </value>
        <remarks>
             For collections whose underlying store is not publicly available,
             the expected implementation is to return the current instance.
             Note that the pointer to the current instance might be
             insufficient for collections that wrap other collections; those
             should return the underlying collection's SyncRoot property.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.HealthVault.Thing.ThingCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.HealthVault</AssemblyName>
        <AssemblyVersion>1.65.0.0</AssemblyVersion>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
             This parameter is ignored, since the result group cannot be copied.
             </param>
        <param name="index">
             This parameter is also ignored, since the result group cannot be copied.
             </param>
        <summary>
             This method is not used, because copying the result group might
             cause unexpected network access.
             </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
             This exception is always thrown.
             </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.HealthVault.Thing.ThingCollection.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.HealthVault</AssemblyName>
        <AssemblyVersion>1.65.0.0</AssemblyVersion>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
             Returns an enumerator that iterates through the collection.
             </summary>
        <returns>
             A IEnumerator that iterates through the collection.
             </returns>
        <remarks>
             This enumerator may cause network requests to the HealthVault service
             as it enumerates the results. The HealthVault service limits the
             number of results with each request so it may be necessary to
             make multiple requests to fill in the result data as the
             collection is enumerated.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.HealthVault.Thing.ThingCollection.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (value As Object) As Integer Implements IList.Add" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.HealthVault</AssemblyName>
        <AssemblyVersion>1.65.0.0</AssemblyVersion>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
             This parameter is ignored, because items cannot be added.
             </param>
        <summary>
             This method is not used, because the collection is read-only
             you cannot add items to it.
             </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
             This exception is always thrown.
             </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.HealthVault.Thing.ThingCollection.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (value As Object) As Boolean Implements IList.Contains" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.HealthVault</AssemblyName>
        <AssemblyVersion>1.65.0.0</AssemblyVersion>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
             The thing to locate in the collection.
             </param>
        <summary>
             Gets a value indicating whether the collection contains the object
             having the specified value.
             </summary>
        <returns>
          <b>true</b> if a matching object is found; otherwise, <b>false</b>.
             </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.HealthVault.Thing.ThingCollection.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.HealthVault</AssemblyName>
        <AssemblyVersion>1.65.0.0</AssemblyVersion>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
             The object to locate in the list.
             </param>
        <summary>
             Determines the index of the specific item in the list.
             </summary>
        <returns>
             The index of the item, if found in the list; otherwise, -1.
             </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.HealthVault.Thing.ThingCollection.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.HealthVault</AssemblyName>
        <AssemblyVersion>1.65.0.0</AssemblyVersion>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">
             This parameter is ignored because the collection is read-only.
             </param>
        <param name="value">
             This parameter is also ignored because the collection is read-only.
             </param>
        <summary>
             This method is not used, because items cannot be inserted into a
             read-only collection.
             </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
             The collection is read-only and does not support insertion.
             </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.HealthVault.Thing.ThingCollection.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.HealthVault</AssemblyName>
        <AssemblyVersion>1.65.0.0</AssemblyVersion>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
             The zero-based index at which to get the object.
             </param>
        <summary>
             Retrieves the object at the specified index.
             </summary>
        <value>
             The object at the specified index.
             </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
             Set is called on a read-only collection.
             </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.HealthVault.Thing.ThingCollection.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (value As Object) Implements IList.Remove" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.HealthVault</AssemblyName>
        <AssemblyVersion>1.65.0.0</AssemblyVersion>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
             This parameter is ignored because the collection is read-only.
             </param>
        <summary>
             This method is not used, because items cannot be removed from a
             read-only collection.
             </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
             The collection is read-only and does not support the removal of
             items.
             </exception>
      </Docs>
    </Member>
    <Member MemberName="WasFiltered">
      <MemberSignature Language="C#" Value="public bool WasFiltered { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WasFiltered" />
      <MemberSignature Language="DocId" Value="P:Microsoft.HealthVault.Thing.ThingCollection.WasFiltered" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WasFiltered As Boolean" />
      <MemberSignature Language="F#" Value="member this.WasFiltered : bool" Usage="Microsoft.HealthVault.Thing.ThingCollection.WasFiltered" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.HealthVault</AssemblyName>
        <AssemblyVersion>1.65.0.0</AssemblyVersion>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets a value indicating whether the result set of health record
             items was filtered.
             </summary>
        <value>
          <b>true</b> if the result set of things was filtered due
             to the callers permissions; otherwise, <b>false</b>.
             </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>