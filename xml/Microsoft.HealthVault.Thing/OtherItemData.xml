<Type Name="OtherItemData" FullName="Microsoft.HealthVault.Thing.OtherItemData">
  <TypeSignature Language="C#" Value="public class OtherItemData" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit OtherItemData extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.HealthVault.Thing.OtherItemData" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.HealthVault</AssemblyName>
    <AssemblyVersion>1.66.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
             Represents data, typically binary data, that extends the XML of the
             thing.
             </summary>
    <remarks>
             Other data for a thing is usually auxiliary to the
             thing. This data might either be large or not
             easily or efficiently stored as XML. Examples include
             binary data such as images, videos, or binary files.
             </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OtherItemData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.HealthVault.Thing.OtherItemData.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
             Creates a new instance of the <see cref="T:Microsoft.HealthVault.Thing.OtherItemData" /> class
             using default values.
             </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OtherItemData (string data, string contentEncoding, string contentType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string data, string contentEncoding, string contentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.HealthVault.Thing.OtherItemData.#ctor(System.String,System.String,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="data" Type="System.String" />
        <Parameter Name="contentEncoding" Type="System.String" />
        <Parameter Name="contentType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
             The data to store in the other data section of the health record
             item.
             </param>
        <param name="contentEncoding">
             The type of encoding that was done on the data. Usually this will
             be "base64" but other encodings are acceptable.
             </param>
        <param name="contentType">
             The MIME-content type of the data.
             </param>
        <summary>
             Creates a new instance of the <see cref="T:Microsoft.HealthVault.Thing.OtherItemData" /> class
             with the specified data, encoding, and content type.
             </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentEncoding">
      <MemberSignature Language="C#" Value="public string ContentEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContentEncoding" />
      <MemberSignature Language="DocId" Value="P:Microsoft.HealthVault.Thing.OtherItemData.ContentEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets or sets the content encoding of other data for the health
             record item.
             </summary>
        <value>
             A string representing the encoding.
             </value>
        <remarks>
             In most cases, this should be set to base64, but other
             encodings are acceptable, such as XML.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentType">
      <MemberSignature Language="C#" Value="public string ContentType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContentType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.HealthVault.Thing.OtherItemData.ContentType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets or sets the MIME content type of other data for the health
             record item.
             </summary>
        <value>
             A string representing the content type.
             </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public string Data { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Data" />
      <MemberSignature Language="DocId" Value="P:Microsoft.HealthVault.Thing.OtherItemData.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets or sets the data.
             </summary>
        <value>
             A string representing the data.
             </value>
        <remarks>
             Binary data can be base64 encoded to be stored as a string.
             <br /><br />
             The <see cref="P:Microsoft.HealthVault.Thing.OtherItemData.ContentType" /> and <see cref="P:Microsoft.HealthVault.Thing.OtherItemData.ContentEncoding" />
             properties should be set to appropriate values for the data.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseXml">
      <MemberSignature Language="C#" Value="public void ParseXml (System.Xml.XPath.XPathNavigator otherDataNavigator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ParseXml(class System.Xml.XPath.XPathNavigator otherDataNavigator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.HealthVault.Thing.OtherItemData.ParseXml(System.Xml.XPath.XPathNavigator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherDataNavigator" Type="System.Xml.XPath.XPathNavigator" />
      </Parameters>
      <Docs>
        <param name="otherDataNavigator">
             The <see cref="T:System.Xml.XPath.XPathNavigator" /> to read the data from.
             </param>
        <summary>
             Populate the <see cref="T:Microsoft.HealthVault.Thing.OtherItemData" /> instance from the supplied <see cref="T:System.Xml.XPath.XPathNavigator" />.
             </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public virtual void WriteXml (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteXml(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.HealthVault.Thing.OtherItemData.WriteXml(System.Xml.XmlWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.66.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
             The XmlWriter to write the data to.
             </param>
        <summary>
             Writes the other data section to the passed-in XmlWriter.
             </summary>
        <remarks>
             Classes that override this method must call the base method to do the actual conversion.
             </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
