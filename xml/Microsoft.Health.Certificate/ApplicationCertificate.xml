<Type Name="ApplicationCertificate" FullName="Microsoft.Health.Certificate.ApplicationCertificate">
  <TypeSignature Language="C#" Value="public class ApplicationCertificate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ApplicationCertificate extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Health.Certificate.ApplicationCertificate" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Health</AssemblyName>
    <AssemblyVersion>2.64.0.0</AssemblyVersion>
    <AssemblyVersion>2.68.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Generates a new HealthVault application certificate.
            </summary>
    <remarks>
            This certificate is typically used by HealthVaultClientApplication.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="Certificate">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.X509Certificates.X509Certificate2 Certificate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.X509Certificates.X509Certificate2 Certificate" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.Certificate.ApplicationCertificate.Certificate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509Certificate2</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the certificate.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCertificate">
      <MemberSignature Language="C#" Value="public static Microsoft.Health.Certificate.ApplicationCertificate CreateCertificate (string certificateName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Health.Certificate.ApplicationCertificate CreateCertificate(string certificateName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.Certificate.ApplicationCertificate.CreateCertificate(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Health.Certificate.ApplicationCertificate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="certificateName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="certificateName">To be added.</param>
        <summary>
            Generate an X509 certificate that works with the HealthVault SDK using the
            specified name.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
            If <paramref name="certificateName" /> is <b>null</b>, empty, or all whitespace.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateCertificate">
      <MemberSignature Language="C#" Value="public static Microsoft.Health.Certificate.ApplicationCertificate CreateCertificate (string certificateName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Health.Certificate.ApplicationCertificate CreateCertificate(string certificateName, valuetype System.Security.Cryptography.X509Certificates.StoreLocation storeLocation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.Certificate.ApplicationCertificate.CreateCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Health.Certificate.ApplicationCertificate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="certificateName" Type="System.String" />
        <Parameter Name="storeLocation" Type="System.Security.Cryptography.X509Certificates.StoreLocation" />
      </Parameters>
      <Docs>
        <param name="certificateName">To be added.</param>
        <param name="storeLocation">To be added.</param>
        <summary>
            Generate an X509 certificate that works with the HealthVault SDK using the
            specified name.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
            If <paramref name="certificateName" /> is <b>null</b>, empty, or all whitespace.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateCertificate">
      <MemberSignature Language="C#" Value="public static Microsoft.Health.Certificate.ApplicationCertificate CreateCertificate (Guid applicationId, bool alwaysCreate, bool persist, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Health.Certificate.ApplicationCertificate CreateCertificate(valuetype System.Guid applicationId, bool alwaysCreate, bool persist, valuetype System.Security.Cryptography.X509Certificates.StoreLocation storeLocation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.Certificate.ApplicationCertificate.CreateCertificate(System.Guid,System.Boolean,System.Boolean,System.Security.Cryptography.X509Certificates.StoreLocation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Health.Certificate.ApplicationCertificate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationId" Type="System.Guid" />
        <Parameter Name="alwaysCreate" Type="System.Boolean" />
        <Parameter Name="persist" Type="System.Boolean" />
        <Parameter Name="storeLocation" Type="System.Security.Cryptography.X509Certificates.StoreLocation" />
      </Parameters>
      <Docs>
        <param name="applicationId">
            The unique identifier of the application to create the certificate for.
            </param>
        <param name="alwaysCreate">
            If true, a new certificate will be created even if it already exists in
            the specified certificate store.
            </param>
        <param name="persist">
            If true, the certificate is persisted in the specified certificate store, otherwise
            the key container is deleted.
            </param>
        <param name="storeLocation">
            The store location to fetch or create the certificate in.
            </param>
        <summary>
            Generate or fetch a persisted certificate in the specified certificate store.
            </summary>
        <returns>
            An ApplicationCertificate instance containing the certificate for the 
            specified application.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
            If <paramref name="applicationId" /> is Guid.Empty.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateCertificate">
      <MemberSignature Language="C#" Value="public static Microsoft.Health.Certificate.ApplicationCertificate CreateCertificate (string certificateName, bool alwaysCreate, bool persist, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Health.Certificate.ApplicationCertificate CreateCertificate(string certificateName, bool alwaysCreate, bool persist, valuetype System.Security.Cryptography.X509Certificates.StoreLocation storeLocation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.Certificate.ApplicationCertificate.CreateCertificate(System.String,System.Boolean,System.Boolean,System.Security.Cryptography.X509Certificates.StoreLocation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Health.Certificate.ApplicationCertificate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="certificateName" Type="System.String" />
        <Parameter Name="alwaysCreate" Type="System.Boolean" />
        <Parameter Name="persist" Type="System.Boolean" />
        <Parameter Name="storeLocation" Type="System.Security.Cryptography.X509Certificates.StoreLocation" />
      </Parameters>
      <Docs>
        <param name="certificateName">
            The name to use when creating the certificate.
            </param>
        <param name="alwaysCreate">
            If true a new certificate will be created even if it already exists in
            the specified certificate store.
            </param>
        <param name="persist">
            If true, the certificate is persisted in the specified certificate store, otherwise
            the key container is deleted.
            </param>
        <param name="storeLocation">
            The store location to fetch or create the certificate in.
            </param>
        <summary>
            Generate or fetch a persisted certificate in the specified certificate store.
            </summary>
        <returns>
            An ApplicationCertificate instance containing the certificate for the 
            specified application.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePersistedCertificate">
      <MemberSignature Language="C#" Value="public static Microsoft.Health.Certificate.ApplicationCertificate CreatePersistedCertificate (Guid applicationId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Health.Certificate.ApplicationCertificate CreatePersistedCertificate(valuetype System.Guid applicationId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.Certificate.ApplicationCertificate.CreatePersistedCertificate(System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Health.Certificate.ApplicationCertificate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="applicationId">
            The unique identifier of the application to create the certificate for.
            </param>
        <summary>
            Generate or fetch a persisted certificate in the specified certificate store.
            </summary>
        <returns>
            An ApplicationCertificate instance containing the certificate for the 
            specified application.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
            If <paramref name="applicationId" /> is Guid.Empty.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CreatePersistedCertificate">
      <MemberSignature Language="C#" Value="public static Microsoft.Health.Certificate.ApplicationCertificate CreatePersistedCertificate (Guid applicationId, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Health.Certificate.ApplicationCertificate CreatePersistedCertificate(valuetype System.Guid applicationId, valuetype System.Security.Cryptography.X509Certificates.StoreLocation storeLocation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.Certificate.ApplicationCertificate.CreatePersistedCertificate(System.Guid,System.Security.Cryptography.X509Certificates.StoreLocation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Health.Certificate.ApplicationCertificate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationId" Type="System.Guid" />
        <Parameter Name="storeLocation" Type="System.Security.Cryptography.X509Certificates.StoreLocation" />
      </Parameters>
      <Docs>
        <param name="applicationId">
            The unique identifier of the application to create the certificate for.
            </param>
        <param name="storeLocation">
            The store location to fetch or create the certificate in.
            </param>
        <summary>
            Generate or fetch a persisted certificate in the specified certificate store.
            </summary>
        <returns>
            An ApplicationCertificate instance containing the certificate for the 
            specified application.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
            If <paramref name="applicationId" /> is Guid.Empty.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteCertificate">
      <MemberSignature Language="C#" Value="public static void DeleteCertificate (Guid applicationId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteCertificate(valuetype System.Guid applicationId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.Certificate.ApplicationCertificate.DeleteCertificate(System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="applicationId">
            The unique identifier of the application for which to remove the certificate from the current
            user store.
            </param>
        <summary>
            Removes the certificate for the specified application identifier
            from the certificate store and deletes the key container.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteCertificate">
      <MemberSignature Language="C#" Value="public static void DeleteCertificate (string certificateName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteCertificate(string certificateName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.Certificate.ApplicationCertificate.DeleteCertificate(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="certificateName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="certificateName">
            The name of the certificate to delete.
            </param>
        <summary>
            Removes the certificate with the specified certificate name
            from the certificate store and deletes the key container.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteCertificate">
      <MemberSignature Language="C#" Value="public static void DeleteCertificate (Guid applicationId, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteCertificate(valuetype System.Guid applicationId, valuetype System.Security.Cryptography.X509Certificates.StoreLocation storeLocation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.Certificate.ApplicationCertificate.DeleteCertificate(System.Guid,System.Security.Cryptography.X509Certificates.StoreLocation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationId" Type="System.Guid" />
        <Parameter Name="storeLocation" Type="System.Security.Cryptography.X509Certificates.StoreLocation" />
      </Parameters>
      <Docs>
        <param name="applicationId">
            The unique identifier of the application for which to remove the certificate from the 
            specified store.
            </param>
        <param name="storeLocation">
            The certificate store from which to remove the certificate.
            </param>
        <summary>
            Removes the certificate for the specified application identifier
            from the certificate store and deletes the key container.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteCertificate">
      <MemberSignature Language="C#" Value="public static void DeleteCertificate (string certificateName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteCertificate(string certificateName, valuetype System.Security.Cryptography.X509Certificates.StoreLocation storeLocation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.Certificate.ApplicationCertificate.DeleteCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="certificateName" Type="System.String" />
        <Parameter Name="storeLocation" Type="System.Security.Cryptography.X509Certificates.StoreLocation" />
      </Parameters>
      <Docs>
        <param name="certificateName">
            The name of the certificate to delete.
            </param>
        <param name="storeLocation">
            The certificate store from which to remove the certificate.
            </param>
        <summary>
            Removes the certificate with the specified certificate name
            from the certificate store and deletes the key container.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteKeyContainer">
      <MemberSignature Language="C#" Value="public static void DeleteKeyContainer (Guid applicationId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteKeyContainer(valuetype System.Guid applicationId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.Certificate.ApplicationCertificate.DeleteKeyContainer(System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="applicationId">
            The unique identifier for the HealthVault application which was used in creating
            the key container.
            </param>
        <summary>
            Removes the key container for the specified application identifier.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteKeyContainer">
      <MemberSignature Language="C#" Value="public static void DeleteKeyContainer (string certificateName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteKeyContainer(string certificateName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.Certificate.ApplicationCertificate.DeleteKeyContainer(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="certificateName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="certificateName">
            The certificate name which was used in creating
            the key container.
            </param>
        <summary>
            Removes the key container for the specified certificate name.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
            If <paramref name="certificateName" /> is <b>null</b>, empty, or all whitespace.
            </exception>
      </Docs>
    </Member>
  </Members>
</Type>