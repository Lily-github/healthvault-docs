<Type Name="ItemTypeManager" FullName="Microsoft.Health.ItemTypeManager">
  <TypeSignature Language="C#" Value="public static class ItemTypeManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ItemTypeManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Health.ItemTypeManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ItemTypeManager" />
  <TypeSignature Language="F#" Value="type ItemTypeManager = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Health</AssemblyName>
    <AssemblyVersion>2.64.0.0</AssemblyVersion>
    <AssemblyVersion>2.68.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Manages the mapping of a health record item type ID to a class 
            representing the type-specific data for an item and the method used 
            to deserialize it.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ClearItemTypeCache">
      <MemberSignature Language="C#" Value="public static void ClearItemTypeCache ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearItemTypeCache() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ItemTypeManager.ClearItemTypeCache" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearItemTypeCache ()" />
      <MemberSignature Language="F#" Value="static member ClearItemTypeCache : unit -&gt; unit" Usage="Microsoft.Health.ItemTypeManager.ClearItemTypeCache " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> 
            Removes all item type definitions from the client-side cache.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeserializeItem">
      <MemberSignature Language="C#" Value="public static Microsoft.Health.HealthRecordItem DeserializeItem (string itemXml);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Health.HealthRecordItem DeserializeItem(string itemXml) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ItemTypeManager.DeserializeItem(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeserializeItem (itemXml As String) As HealthRecordItem" />
      <MemberSignature Language="F#" Value="static member DeserializeItem : string -&gt; Microsoft.Health.HealthRecordItem" Usage="Microsoft.Health.ItemTypeManager.DeserializeItem itemXml" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.HealthRecordItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemXml" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="itemXml">
            The item XML, including the health record item tag as the root, to be
            deserialized into a <see cref="T:Microsoft.Health.HealthRecordItem" />.
            </param>
        <summary>
            Constructs a <see cref="T:Microsoft.Health.HealthRecordItem" /> or an appropriate derived type for the
            specified item XML.
            </summary>
        <returns>
            A <see cref="T:Microsoft.Health.HealthRecordItem" /> or derived type based on the specified item XML.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBaseHealthRecordItemTypeDefinition">
      <MemberSignature Language="C#" Value="public static Microsoft.Health.HealthRecordItemTypeDefinition GetBaseHealthRecordItemTypeDefinition (Microsoft.Health.HealthServiceConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Health.HealthRecordItemTypeDefinition GetBaseHealthRecordItemTypeDefinition(class Microsoft.Health.HealthServiceConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ItemTypeManager.GetBaseHealthRecordItemTypeDefinition(Microsoft.Health.HealthServiceConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetBaseHealthRecordItemTypeDefinition (connection As HealthServiceConnection) As HealthRecordItemTypeDefinition" />
      <MemberSignature Language="F#" Value="static member GetBaseHealthRecordItemTypeDefinition : Microsoft.Health.HealthServiceConnection -&gt; Microsoft.Health.HealthRecordItemTypeDefinition" Usage="Microsoft.Health.ItemTypeManager.GetBaseHealthRecordItemTypeDefinition connection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.HealthRecordItemTypeDefinition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="Microsoft.Health.HealthServiceConnection" />
      </Parameters>
      <Docs>
        <param name="connection"> 
            A connection to the HealthVault service.
            </param>
        <summary> 
            Gets the health record item type definition for the base item type.
            </summary>
        <returns>To be added.</returns>
        <remarks> 
            The base item type is a constructed item type that contains
            definitions of the standard item transforms that will work 
            for any item type. If a specific item type does not define a 
            standard transformation, the base item type transformation can
            be used instead.
            <br /><br />
            This method calls the HealthVault service if the type is not
            already in the client-side cache.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
            The <paramref name="connection" /> parameter is <b>null</b>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetHealthRecordItemTypeDefinition">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;Guid,Microsoft.Health.HealthRecordItemTypeDefinition&gt; GetHealthRecordItemTypeDefinition (Microsoft.Health.HealthServiceConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;valuetype System.Guid, class Microsoft.Health.HealthRecordItemTypeDefinition&gt; GetHealthRecordItemTypeDefinition(class Microsoft.Health.HealthServiceConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(Microsoft.Health.HealthServiceConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetHealthRecordItemTypeDefinition (connection As HealthServiceConnection) As IDictionary(Of Guid, HealthRecordItemTypeDefinition)" />
      <MemberSignature Language="F#" Value="static member GetHealthRecordItemTypeDefinition : Microsoft.Health.HealthServiceConnection -&gt; System.Collections.Generic.IDictionary&lt;Guid, Microsoft.Health.HealthRecordItemTypeDefinition&gt;" Usage="Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition connection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.Guid,Microsoft.Health.HealthRecordItemTypeDefinition&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="Microsoft.Health.HealthServiceConnection" />
      </Parameters>
      <Docs>
        <param name="connection"> 
            A connection to the HealthVault service.
            </param>
        <summary>
            Gets the definitions for all health record item type definitions
            supported by HealthVault.
            </summary>
        <returns>
            The type definitions for all health record item type definitions
            supported by HealthVault.
            </returns>
        <remarks>
            This method calls the HealthVault service if the types are not
            already in the client-side cache.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection" /> parameter is <b>null</b>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetHealthRecordItemTypeDefinition">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;Guid,Microsoft.Health.HealthRecordItemTypeDefinition&gt; GetHealthRecordItemTypeDefinition (Microsoft.Health.HealthRecordItemTypeSections sections, Microsoft.Health.HealthServiceConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;valuetype System.Guid, class Microsoft.Health.HealthRecordItemTypeDefinition&gt; GetHealthRecordItemTypeDefinition(valuetype Microsoft.Health.HealthRecordItemTypeSections sections, class Microsoft.Health.HealthServiceConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(Microsoft.Health.HealthRecordItemTypeSections,Microsoft.Health.HealthServiceConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetHealthRecordItemTypeDefinition (sections As HealthRecordItemTypeSections, connection As HealthServiceConnection) As IDictionary(Of Guid, HealthRecordItemTypeDefinition)" />
      <MemberSignature Language="F#" Value="static member GetHealthRecordItemTypeDefinition : Microsoft.Health.HealthRecordItemTypeSections * Microsoft.Health.HealthServiceConnection -&gt; System.Collections.Generic.IDictionary&lt;Guid, Microsoft.Health.HealthRecordItemTypeDefinition&gt;" Usage="Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition (sections, connection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.Guid,Microsoft.Health.HealthRecordItemTypeDefinition&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sections" Type="Microsoft.Health.HealthRecordItemTypeSections" />
        <Parameter Name="connection" Type="Microsoft.Health.HealthServiceConnection" />
      </Parameters>
      <Docs>
        <param name="sections">
            A collection of HealthRecordItemTypeSections enumeration values that indicate the type of
            details to be returned for the specified health item record(s).
            </param>
        <param name="connection"> 
            A connection to the HealthVault service.
            </param>
        <summary>
            Gets the definitions for all health record item type definitions
            supported by HealthVault.
            </summary>
        <returns>
            The type definitions for all the health record item type definitions
            supported by HealthVault.
            </returns>
        <remarks>
            This method calls the HealthVault service if the types are not
            already in the client-side cache.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection" /> parameter is <b>null</b>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetHealthRecordItemTypeDefinition">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;Guid,Microsoft.Health.HealthRecordItemTypeDefinition&gt; GetHealthRecordItemTypeDefinition (System.Collections.Generic.IList&lt;Guid&gt; typeIds, Microsoft.Health.HealthServiceConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;valuetype System.Guid, class Microsoft.Health.HealthRecordItemTypeDefinition&gt; GetHealthRecordItemTypeDefinition(class System.Collections.Generic.IList`1&lt;valuetype System.Guid&gt; typeIds, class Microsoft.Health.HealthServiceConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList{System.Guid},Microsoft.Health.HealthServiceConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetHealthRecordItemTypeDefinition (typeIds As IList(Of Guid), connection As HealthServiceConnection) As IDictionary(Of Guid, HealthRecordItemTypeDefinition)" />
      <MemberSignature Language="F#" Value="static member GetHealthRecordItemTypeDefinition : System.Collections.Generic.IList&lt;Guid&gt; * Microsoft.Health.HealthServiceConnection -&gt; System.Collections.Generic.IDictionary&lt;Guid, Microsoft.Health.HealthRecordItemTypeDefinition&gt;" Usage="Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition (typeIds, connection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.Guid,Microsoft.Health.HealthRecordItemTypeDefinition&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeIds" Type="System.Collections.Generic.IList&lt;System.Guid&gt;" />
        <Parameter Name="connection" Type="Microsoft.Health.HealthServiceConnection" />
      </Parameters>
      <Docs>
        <param name="typeIds"> 
            The unique identifiers for the type to get the definition of.
            </param>
        <param name="connection"> 
            A connection to the HealthVault service.
            </param>
        <summary>
            Gets the definition of one or more health record item type definitions
            supported by HealthVault.
            </summary>
        <returns>
            The type definitions for the specified types, or empty if the
            <paramref name="typeIds" /> parameter does not represent a known unique
            type identifier.
            </returns>
        <remarks>
            This method calls the HealthVault service if the types are not
            already in the client-side cache.
            </remarks>
        <exception cref="T:System.ArgumentException">
            If <paramref name="typeIds" /> is <b>null</b> and empty, or 
            <paramref name="typeIds" /> is <b>null</b> and member in <paramref name="typeIds" /> is 
            <see cref="F:System.Guid.Empty" />.
            </exception>
        <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection" /> parameter is <b>null</b>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetHealthRecordItemTypeDefinition">
      <MemberSignature Language="C#" Value="public static Microsoft.Health.HealthRecordItemTypeDefinition GetHealthRecordItemTypeDefinition (Guid typeId, Microsoft.Health.HealthServiceConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Health.HealthRecordItemTypeDefinition GetHealthRecordItemTypeDefinition(valuetype System.Guid typeId, class Microsoft.Health.HealthServiceConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Guid,Microsoft.Health.HealthServiceConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetHealthRecordItemTypeDefinition (typeId As Guid, connection As HealthServiceConnection) As HealthRecordItemTypeDefinition" />
      <MemberSignature Language="F#" Value="static member GetHealthRecordItemTypeDefinition : Guid * Microsoft.Health.HealthServiceConnection -&gt; Microsoft.Health.HealthRecordItemTypeDefinition" Usage="Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition (typeId, connection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.HealthRecordItemTypeDefinition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeId" Type="System.Guid" />
        <Parameter Name="connection" Type="Microsoft.Health.HealthServiceConnection" />
      </Parameters>
      <Docs>
        <param name="typeId"> 
            The unique identifier for the type to get the definition of.
            </param>
        <param name="connection"> 
            A connection to the HealthVault service.
            </param>
        <summary>
            Gets the definition for a health record item type.
            </summary>
        <returns>
            The type definition for the specified type, or <b>null</b> if the
            <paramref name="typeId" /> parameter does not represent a known unique
            type identifier.
            </returns>
        <remarks>
            This method calls the HealthVault service if the type is not
            already in the client-side cache.
            </remarks>
        <exception cref="T:System.ArgumentException">
            The <paramref name="typeId" /> parameter is Guid.Empty.
            </exception>
        <exception cref="T:System.ArgumentNullException">
            The <paramref name="connection" /> parameter is <b>null</b>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetHealthRecordItemTypeDefinition">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;Guid,Microsoft.Health.HealthRecordItemTypeDefinition&gt; GetHealthRecordItemTypeDefinition (System.Collections.Generic.IList&lt;Guid&gt; typeIds, Microsoft.Health.HealthRecordItemTypeSections sections, Microsoft.Health.HealthServiceConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;valuetype System.Guid, class Microsoft.Health.HealthRecordItemTypeDefinition&gt; GetHealthRecordItemTypeDefinition(class System.Collections.Generic.IList`1&lt;valuetype System.Guid&gt; typeIds, valuetype Microsoft.Health.HealthRecordItemTypeSections sections, class Microsoft.Health.HealthServiceConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList{System.Guid},Microsoft.Health.HealthRecordItemTypeSections,Microsoft.Health.HealthServiceConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetHealthRecordItemTypeDefinition (typeIds As IList(Of Guid), sections As HealthRecordItemTypeSections, connection As HealthServiceConnection) As IDictionary(Of Guid, HealthRecordItemTypeDefinition)" />
      <MemberSignature Language="F#" Value="static member GetHealthRecordItemTypeDefinition : System.Collections.Generic.IList&lt;Guid&gt; * Microsoft.Health.HealthRecordItemTypeSections * Microsoft.Health.HealthServiceConnection -&gt; System.Collections.Generic.IDictionary&lt;Guid, Microsoft.Health.HealthRecordItemTypeDefinition&gt;" Usage="Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition (typeIds, sections, connection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.Guid,Microsoft.Health.HealthRecordItemTypeDefinition&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeIds" Type="System.Collections.Generic.IList&lt;System.Guid&gt;" />
        <Parameter Name="sections" Type="Microsoft.Health.HealthRecordItemTypeSections" />
        <Parameter Name="connection" Type="Microsoft.Health.HealthServiceConnection" />
      </Parameters>
      <Docs>
        <param name="typeIds">
            A collection of health item record type Ids whose details are being requested. Null 
            indicates that all health item record types should be returned.
            </param>
        <param name="sections">
            A collection of HealthRecordItemTypeSections enumeration values that indicate the type of
            details to be returned for the specified health item record(s).
            </param>
        <param name="connection"> 
            A connection to the HealthVault service.
            </param>
        <summary>
            Gets the requested definitions for the specified health record item type definitions
            supported by HealthVault.
            </summary>
        <returns>
            The type definitions for the specified types, or empty if the
            <paramref name="typeIds" /> parameter does not represent a known unique
            type identifier.
            </returns>
        <remarks>
            This method calls the HealthVault service if the types are not
            already in the client-side cache.
            </remarks>
        <exception cref="T:System.ArgumentException">
            If <paramref name="typeIds" /> is <b>null</b> and empty, or 
            <paramref name="typeIds" /> is <b>null</b> and member in <paramref name="typeIds" /> is 
            <see cref="F:System.Guid.Empty" />.
            </exception>
        <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection" /> parameter is <b>null</b>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetHealthRecordItemTypeDefinition">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;Guid,Microsoft.Health.HealthRecordItemTypeDefinition&gt; GetHealthRecordItemTypeDefinition (System.Collections.Generic.IList&lt;Guid&gt; typeIds, Nullable&lt;DateTime&gt; lastClientRefreshDate, Microsoft.Health.HealthServiceConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;valuetype System.Guid, class Microsoft.Health.HealthRecordItemTypeDefinition&gt; GetHealthRecordItemTypeDefinition(class System.Collections.Generic.IList`1&lt;valuetype System.Guid&gt; typeIds, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; lastClientRefreshDate, class Microsoft.Health.HealthServiceConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList{System.Guid},System.Nullable{System.DateTime},Microsoft.Health.HealthServiceConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetHealthRecordItemTypeDefinition (typeIds As IList(Of Guid), lastClientRefreshDate As Nullable(Of DateTime), connection As HealthServiceConnection) As IDictionary(Of Guid, HealthRecordItemTypeDefinition)" />
      <MemberSignature Language="F#" Value="static member GetHealthRecordItemTypeDefinition : System.Collections.Generic.IList&lt;Guid&gt; * Nullable&lt;DateTime&gt; * Microsoft.Health.HealthServiceConnection -&gt; System.Collections.Generic.IDictionary&lt;Guid, Microsoft.Health.HealthRecordItemTypeDefinition&gt;" Usage="Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition (typeIds, lastClientRefreshDate, connection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.Guid,Microsoft.Health.HealthRecordItemTypeDefinition&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeIds" Type="System.Collections.Generic.IList&lt;System.Guid&gt;" />
        <Parameter Name="lastClientRefreshDate" Type="System.Nullable&lt;System.DateTime&gt;" />
        <Parameter Name="connection" Type="Microsoft.Health.HealthServiceConnection" />
      </Parameters>
      <Docs>
        <param name="typeIds">
            A collection of health record items whose details are being requested. Null indicates 
            that all health item records should be returned.
            </param>
        <param name="lastClientRefreshDate">
            A <see cref="T:System.DateTime" /> instance that specifies the time of the last refresh
            made by the client.
            </param>
        <param name="connection"> 
            A connection to the HealthVault service.
            </param>
        <summary>
            Gets the definitions for all health record item type definitions
            supported by HealthVault only if they have been updated since the 
            specified last client refresh date.
            </summary>
        <returns>
            The type definitions for the specified types, or empty if the
            <paramref name="typeIds" /> parameter does not represent a known unique
            type identifier.
            </returns>
        <remarks>
            This method calls the HealthVault service if the types are not
            already in the client-side cache.
            </remarks>
        <exception cref="T:System.ArgumentException">
            If <paramref name="typeIds" /> is <b>null</b> and empty, or 
            <paramref name="typeIds" /> is <b>null</b> and member in <paramref name="typeIds" /> is 
            <see cref="F:System.Guid.Empty" />.
            </exception>
        <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection" /> parameter is <b>null</b>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetHealthRecordItemTypeDefinition">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;Guid,Microsoft.Health.HealthRecordItemTypeDefinition&gt; GetHealthRecordItemTypeDefinition (System.Collections.Generic.IList&lt;Guid&gt; typeIds, Microsoft.Health.HealthRecordItemTypeSections sections, Nullable&lt;DateTime&gt; lastClientRefreshDate, Microsoft.Health.HealthServiceConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;valuetype System.Guid, class Microsoft.Health.HealthRecordItemTypeDefinition&gt; GetHealthRecordItemTypeDefinition(class System.Collections.Generic.IList`1&lt;valuetype System.Guid&gt; typeIds, valuetype Microsoft.Health.HealthRecordItemTypeSections sections, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; lastClientRefreshDate, class Microsoft.Health.HealthServiceConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList{System.Guid},Microsoft.Health.HealthRecordItemTypeSections,System.Nullable{System.DateTime},Microsoft.Health.HealthServiceConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetHealthRecordItemTypeDefinition (typeIds As IList(Of Guid), sections As HealthRecordItemTypeSections, lastClientRefreshDate As Nullable(Of DateTime), connection As HealthServiceConnection) As IDictionary(Of Guid, HealthRecordItemTypeDefinition)" />
      <MemberSignature Language="F#" Value="static member GetHealthRecordItemTypeDefinition : System.Collections.Generic.IList&lt;Guid&gt; * Microsoft.Health.HealthRecordItemTypeSections * Nullable&lt;DateTime&gt; * Microsoft.Health.HealthServiceConnection -&gt; System.Collections.Generic.IDictionary&lt;Guid, Microsoft.Health.HealthRecordItemTypeDefinition&gt;" Usage="Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition (typeIds, sections, lastClientRefreshDate, connection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.Guid,Microsoft.Health.HealthRecordItemTypeDefinition&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeIds" Type="System.Collections.Generic.IList&lt;System.Guid&gt;" />
        <Parameter Name="sections" Type="Microsoft.Health.HealthRecordItemTypeSections" />
        <Parameter Name="lastClientRefreshDate" Type="System.Nullable&lt;System.DateTime&gt;" />
        <Parameter Name="connection" Type="Microsoft.Health.HealthServiceConnection" />
      </Parameters>
      <Docs>
        <param name="typeIds">
            A collection of health item type IDs whose details are being requested. Null 
            indicates that all health item types should be returned.
            </param>
        <param name="sections">
            A collection of HealthRecordItemTypeSections enumeration values that indicate the type of
            details to be returned for the specified health item record(s).
            </param>
        <param name="lastClientRefreshDate">
            A <see cref="T:System.DateTime" /> instance that specifies the time of the last refresh
            made by the client.
            </param>
        <param name="connection"> 
            A connection to the HealthVault service.
            </param>
        <summary>
            Gets the requested health record item type definitions supported by HealthVault 
            only if they have been updated since the specified last client refresh date.
            </summary>
        <returns>
            The type definitions for the specified types, or empty if the
            <paramref name="typeIds" /> parameter does not represent a known unique
            type identifier.
            </returns>
        <remarks>
            This method calls the HealthVault service if the types are not
            already in the client-side cache.
            </remarks>
        <exception cref="T:System.ArgumentException">
            If <paramref name="typeIds" /> is <b>null</b> and empty, or 
            <paramref name="typeIds" /> is <b>null</b> and member in <paramref name="typeIds" /> is 
            <see cref="F:System.Guid.Empty" />.
            </exception>
        <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection" /> parameter is <b>null</b>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetHealthRecordItemTypeDefinition">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;Guid,Microsoft.Health.HealthRecordItemTypeDefinition&gt; GetHealthRecordItemTypeDefinition (System.Collections.Generic.IList&lt;Guid&gt; typeIds, Microsoft.Health.HealthRecordItemTypeSections sections, System.Collections.Generic.IList&lt;string&gt; imageTypes, Nullable&lt;DateTime&gt; lastClientRefreshDate, Microsoft.Health.HealthServiceConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;valuetype System.Guid, class Microsoft.Health.HealthRecordItemTypeDefinition&gt; GetHealthRecordItemTypeDefinition(class System.Collections.Generic.IList`1&lt;valuetype System.Guid&gt; typeIds, valuetype Microsoft.Health.HealthRecordItemTypeSections sections, class System.Collections.Generic.IList`1&lt;string&gt; imageTypes, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; lastClientRefreshDate, class Microsoft.Health.HealthServiceConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList{System.Guid},Microsoft.Health.HealthRecordItemTypeSections,System.Collections.Generic.IList{System.String},System.Nullable{System.DateTime},Microsoft.Health.HealthServiceConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetHealthRecordItemTypeDefinition (typeIds As IList(Of Guid), sections As HealthRecordItemTypeSections, imageTypes As IList(Of String), lastClientRefreshDate As Nullable(Of DateTime), connection As HealthServiceConnection) As IDictionary(Of Guid, HealthRecordItemTypeDefinition)" />
      <MemberSignature Language="F#" Value="static member GetHealthRecordItemTypeDefinition : System.Collections.Generic.IList&lt;Guid&gt; * Microsoft.Health.HealthRecordItemTypeSections * System.Collections.Generic.IList&lt;string&gt; * Nullable&lt;DateTime&gt; * Microsoft.Health.HealthServiceConnection -&gt; System.Collections.Generic.IDictionary&lt;Guid, Microsoft.Health.HealthRecordItemTypeDefinition&gt;" Usage="Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition (typeIds, sections, imageTypes, lastClientRefreshDate, connection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.Guid,Microsoft.Health.HealthRecordItemTypeDefinition&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeIds" Type="System.Collections.Generic.IList&lt;System.Guid&gt;" />
        <Parameter Name="sections" Type="Microsoft.Health.HealthRecordItemTypeSections" />
        <Parameter Name="imageTypes" Type="System.Collections.Generic.IList&lt;System.String&gt;" />
        <Parameter Name="lastClientRefreshDate" Type="System.Nullable&lt;System.DateTime&gt;" />
        <Parameter Name="connection" Type="Microsoft.Health.HealthServiceConnection" />
      </Parameters>
      <Docs>
        <param name="typeIds">
            A collection of health item type IDs whose details are being requested. Null 
            indicates that all health item types should be returned.
            </param>
        <param name="sections">
            A collection of HealthRecordItemTypeSections enumeration values that indicate the type 
            of details to be returned for the specified health item records(s).
            </param>
        <param name="imageTypes">
            A collection of strings that identify which health item record images should be 
            retrieved.
            
            This requests an image of the specified mime type should be returned. For example, 
            to request a GIF image, "image/gif" should be specified. For icons, "image/vnd.microsoft.icon" 
            should be specified. Note, not all health item records will have all image types and 
            some may not have any images at all.
                           
            If '*' is specified, all image types will be returned.
            </param>
        <param name="lastClientRefreshDate">
            A <see cref="T:System.DateTime" /> instance that specifies the time of the last refresh
            made by the client.
            </param>
        <param name="connection"> 
            A connection to the HealthVault service.
            </param>
        <summary>
            Gets the definitions for one or more health record item type definitions
            supported by HealthVault.
            </summary>
        <returns>
            The type definitions for the specified types, or empty if the
            <paramref name="typeIds" /> parameter does not represent a known unique
            type identifier.
            </returns>
        <remarks>
            This method calls the HealthVault service if the types are not
            already in the client-side cache.
            </remarks>
        <exception cref="T:System.ArgumentException">
            If <paramref name="typeIds" /> is <b>null</b> and empty, or 
            <paramref name="typeIds" /> is <b>null</b> and member in <paramref name="typeIds" /> is 
            <see cref="F:System.Guid.Empty" />.
            </exception>
        <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection" /> parameter is <b>null</b>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredTypeForTypeId">
      <MemberSignature Language="C#" Value="public static Type GetRegisteredTypeForTypeId (Guid typeId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetRegisteredTypeForTypeId(valuetype System.Guid typeId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ItemTypeManager.GetRegisteredTypeForTypeId(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRegisteredTypeForTypeId (typeId As Guid) As Type" />
      <MemberSignature Language="F#" Value="static member GetRegisteredTypeForTypeId : Guid -&gt; Type" Usage="Microsoft.Health.ItemTypeManager.GetRegisteredTypeForTypeId typeId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="typeId"></param>
        <summary>
            Gets the <see cref="T:System.Type" /> instance of the class that is registered to
            handle this type id.
            </summary>
        <returns>The typeId.</returns>
        <remarks>
            This method looks up the type id in the list of types that the SDK understands how
            to process. If new types were added to the HealthVault service since this SDK was
            released, this method will not return them. 
            
            To retrieve information about the types from the HealthVault service, 
            use the <see cref="M:Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(Microsoft.Health.HealthServiceConnection)" /> method.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterApplicationSpecificHandler">
      <MemberSignature Language="C#" Value="public static void RegisterApplicationSpecificHandler (Guid applicationId, string subtypeTag, Type applicationSpecificHandlerClass);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterApplicationSpecificHandler(valuetype System.Guid applicationId, string subtypeTag, class System.Type applicationSpecificHandlerClass) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ItemTypeManager.RegisterApplicationSpecificHandler(System.Guid,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterApplicationSpecificHandler (applicationId As Guid, subtypeTag As String, applicationSpecificHandlerClass As Type)" />
      <MemberSignature Language="F#" Value="static member RegisterApplicationSpecificHandler : Guid * string * Type -&gt; unit" Usage="Microsoft.Health.ItemTypeManager.RegisterApplicationSpecificHandler (applicationId, subtypeTag, applicationSpecificHandlerClass)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationId" Type="System.Guid" />
        <Parameter Name="subtypeTag" Type="System.String" />
        <Parameter Name="applicationSpecificHandlerClass" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="applicationId">
            The application identifier for the application specific data that the
            specified type will handle.
            </param>
        <param name="subtypeTag">
            The subtype tag for the application specific data that the specified type
            will handle.
            </param>
        <param name="applicationSpecificHandlerClass">
            The .NET type that handles parsing of the application specific data for
            the specified application ID and subtype tag.
            </param>
        <summary>
            Registers a class as the handler for the application specific health record
            item type with the specific application ID and subtype tag.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
            If <paramref name="applicationId" /> is <see cref="F:System.Guid.Empty" />,
            or <paramref name="subtypeTag" /> is 
            <b>null</b> or empty, or if <paramref name="applicationSpecificHandlerClass" /> 
            does not derive from ApplicationSpecific.
            </exception>
        <exception cref="T:System.ArgumentNullException">
            If <paramref name="applicationSpecificHandlerClass" /> is <b>null</b>.
            </exception>
        <exception cref="T:Microsoft.Health.TypeHandlerAlreadyRegisteredException">
            If a type is already registered to handle the application specific data
            for the specified <paramref name="applicationId" /> and
            <paramref name="subtypeTag" />.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterApplicationSpecificHandler">
      <MemberSignature Language="C#" Value="public static void RegisterApplicationSpecificHandler (string applicationId, string subtypeTag, Type applicationSpecificHandlerClass);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterApplicationSpecificHandler(string applicationId, string subtypeTag, class System.Type applicationSpecificHandlerClass) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ItemTypeManager.RegisterApplicationSpecificHandler(System.String,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterApplicationSpecificHandler (applicationId As String, subtypeTag As String, applicationSpecificHandlerClass As Type)" />
      <MemberSignature Language="F#" Value="static member RegisterApplicationSpecificHandler : string * string * Type -&gt; unit" Usage="Microsoft.Health.ItemTypeManager.RegisterApplicationSpecificHandler (applicationId, subtypeTag, applicationSpecificHandlerClass)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationId" Type="System.String" />
        <Parameter Name="subtypeTag" Type="System.String" />
        <Parameter Name="applicationSpecificHandlerClass" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="applicationId">
            The application identifier for the application specific data that the
            specified type will handle.
            </param>
        <param name="subtypeTag">
            The subtype tag for the application specific data that the specified type
            will handle.
            </param>
        <param name="applicationSpecificHandlerClass">
            The .NET type that handles parsing of the application specific data for
            the specified application ID and subtype tag.
            </param>
        <summary>
            Registers a class as the handler for the application specific health record
            item type with the specific application ID and subtype tag.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
            If <paramref name="applicationId" /> or <paramref name="subtypeTag" /> is 
            <b>null</b> or empty, or if <paramref name="applicationSpecificHandlerClass" /> 
            does not derive from ApplicationSpecific.
            </exception>
        <exception cref="T:System.ArgumentNullException">
            If <paramref name="applicationSpecificHandlerClass" /> is <b>null</b>.
            </exception>
        <exception cref="T:Microsoft.Health.TypeHandlerAlreadyRegisteredException">
            If a type is already registered to handle the application specific data
            for the specified <paramref name="applicationId" /> and
            <paramref name="subtypeTag" />.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterApplicationSpecificHandler">
      <MemberSignature Language="C#" Value="public static void RegisterApplicationSpecificHandler (string applicationId, string subtypeTag, Type applicationSpecificHandlerClass, bool overwriteExisting);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterApplicationSpecificHandler(string applicationId, string subtypeTag, class System.Type applicationSpecificHandlerClass, bool overwriteExisting) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ItemTypeManager.RegisterApplicationSpecificHandler(System.String,System.String,System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterApplicationSpecificHandler (applicationId As String, subtypeTag As String, applicationSpecificHandlerClass As Type, overwriteExisting As Boolean)" />
      <MemberSignature Language="F#" Value="static member RegisterApplicationSpecificHandler : string * string * Type * bool -&gt; unit" Usage="Microsoft.Health.ItemTypeManager.RegisterApplicationSpecificHandler (applicationId, subtypeTag, applicationSpecificHandlerClass, overwriteExisting)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationId" Type="System.String" />
        <Parameter Name="subtypeTag" Type="System.String" />
        <Parameter Name="applicationSpecificHandlerClass" Type="System.Type" />
        <Parameter Name="overwriteExisting" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="applicationId">
            The application identifier for the application specific data that the
            specified type will handle.
            </param>
        <param name="subtypeTag">
            The subtype tag for the application specific data that the specified type
            will handle.
            </param>
        <param name="applicationSpecificHandlerClass">
            The .NET type that handles parsing of the application specific data for
            the specified application ID and subtype tag.
            </param>
        <param name="overwriteExisting">
            If true and an entry exist for the specified <paramref name="applicationId" />
            and <paramref name="subtypeTag" /> it will be replaced.
            </param>
        <summary>
            Registers a class as the handler for the application specific health record
            item type with the specific application ID and subtype tag.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
            If <paramref name="applicationId" /> or <paramref name="subtypeTag" /> is 
            <b>null</b> or empty, or if <paramref name="applicationSpecificHandlerClass" /> 
            does not derive from ApplicationSpecific.
            </exception>
        <exception cref="T:System.ArgumentNullException">
            If <paramref name="applicationSpecificHandlerClass" /> is <b>null</b>.
            </exception>
        <exception cref="T:Microsoft.Health.TypeHandlerAlreadyRegisteredException">
            If a type is already registered to handle the application specific data
            for the specified <paramref name="applicationId" /> and
            <paramref name="subtypeTag" /> and <paramref name="overwriteExisting" /> is false.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="RegisteredTypes">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;Guid,Type&gt; RegisteredTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IDictionary`2&lt;valuetype System.Guid, class System.Type&gt; RegisteredTypes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.ItemTypeManager.RegisteredTypes" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property RegisteredTypes As IDictionary(Of Guid, Type)" />
      <MemberSignature Language="F#" Value="member this.RegisteredTypes : System.Collections.Generic.IDictionary&lt;Guid, Type&gt;" Usage="Microsoft.Health.ItemTypeManager.RegisteredTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.Guid,System.Type&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get a collection of all the HealthRecordItem-derived types that are registered.
            </summary>
        <value>A dictionary of <see cref="T:System.Type" /> instances.</value>
        <remarks>
            This set of types defines all of the HealthVault item types that this SDK 
            understands how to process. If new types have been added, it may be a subset of the
            types that are available through the HealthVault service.
            
            To retrieve information about the types from the HealthVault service, 
            use the <see cref="M:Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(Microsoft.Health.HealthServiceConnection)" /> method.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterExtensionHandler">
      <MemberSignature Language="C#" Value="public static void RegisterExtensionHandler (string extensionSource, Type itemExtensionClass);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterExtensionHandler(string extensionSource, class System.Type itemExtensionClass) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ItemTypeManager.RegisterExtensionHandler(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterExtensionHandler (extensionSource As String, itemExtensionClass As Type)" />
      <MemberSignature Language="F#" Value="static member RegisterExtensionHandler : string * Type -&gt; unit" Usage="Microsoft.Health.ItemTypeManager.RegisterExtensionHandler (extensionSource, itemExtensionClass)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extensionSource" Type="System.String" />
        <Parameter Name="itemExtensionClass" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="extensionSource">
            The unique identifier for the source of the item extension.
            </param>
        <param name="itemExtensionClass">
            The class that implements the item extension. It must
            be public, derive from <see cref="T:Microsoft.Health.HealthRecordItemExtension" />, 
            and have a default constructor.
            </param>
        <summary>
            Registers a deserializer for item extension data.
            </summary>
        <remarks>
            Extension data is available to all applications, and since there is no registration
            method for the extensionSource identifiers, collisions between applications are possible.
            
            Applications should be written to be tolerant of the presence of extension data using the
            same extensionSource but a different schema. It is also recommended that extensionSource be
            specified the same way .NET namespaces are specified, prefixing the extensionSource with the
            company name. 
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterExtensionHandler">
      <MemberSignature Language="C#" Value="public static void RegisterExtensionHandler (string extensionSource, Type itemExtensionClass, bool overwriteExisting);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterExtensionHandler(string extensionSource, class System.Type itemExtensionClass, bool overwriteExisting) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ItemTypeManager.RegisterExtensionHandler(System.String,System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterExtensionHandler (extensionSource As String, itemExtensionClass As Type, overwriteExisting As Boolean)" />
      <MemberSignature Language="F#" Value="static member RegisterExtensionHandler : string * Type * bool -&gt; unit" Usage="Microsoft.Health.ItemTypeManager.RegisterExtensionHandler (extensionSource, itemExtensionClass, overwriteExisting)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extensionSource" Type="System.String" />
        <Parameter Name="itemExtensionClass" Type="System.Type" />
        <Parameter Name="overwriteExisting" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="extensionSource">
             The unique identifier for the source of the item extension.
             </param>
        <param name="itemExtensionClass">
             The class that implements the item extension. It must
             be public, derive from <see cref="T:Microsoft.Health.HealthRecordItemExtension" />, 
             and have a default constructor.
             </param>
        <param name="overwriteExisting">
          <b>true</b> to register the new deserializer even if the type
             already has a deserializer registered; <b>false</b> to throw an 
             exception because a deserializer is already registered.
             </param>
        <summary>
             Registers a deserializer for item extension data.
             </summary>
        <remarks>
             Extension data is available to all applications, and since there is no registration
             method for the extensionSource identifiers, collisions between applications are possible.
             
             Applications should be written to be tolerant of the presence of extension data using the
             same extensionSource but a different schema. It is also recommended that extensionSource be
             specified the same way .NET namespaces are specified, prefixing the extensionSource with the
             company name. 
             </remarks>
        <exception cref="T:System.ArgumentException">
             The <paramref name="extensionSource" /> parameter is <b>null</b> or empty or
             the <paramref name="itemExtensionClass" /> parameter does not derive from
             <see cref="T:Microsoft.Health.HealthRecordItemExtension" />.
             </exception>
        <exception cref="T:System.ArgumentNullException">
             The <paramref name="itemExtensionClass" /> parameter is <b>null</b>.
             </exception>
        <exception cref="T:Microsoft.Health.TypeHandlerAlreadyRegisteredException">
             The <paramref name="extensionSource" /> already has a handler 
             registered and <paramref name="overwriteExisting" /> is <b>false</b>.
             </exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterTypeHandler">
      <MemberSignature Language="C#" Value="public static void RegisterTypeHandler (Guid typeId, Type itemTypeClass);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterTypeHandler(valuetype System.Guid typeId, class System.Type itemTypeClass) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ItemTypeManager.RegisterTypeHandler(System.Guid,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterTypeHandler (typeId As Guid, itemTypeClass As Type)" />
      <MemberSignature Language="F#" Value="static member RegisterTypeHandler : Guid * Type -&gt; unit" Usage="Microsoft.Health.ItemTypeManager.RegisterTypeHandler (typeId, itemTypeClass)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeId" Type="System.Guid" />
        <Parameter Name="itemTypeClass" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="typeId">
            The unique identifier for the item type-specific data as defined
            by the HealthVault service.
            </param>
        <param name="itemTypeClass">
            The class that implements the item type-specific data. It must
            be public, derive from <see cref="T:Microsoft.Health.HealthRecordItem" />, and 
            have a default constructor.
            </param>
        <summary>
            Registers a deserializer for item type-specific data.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterTypeHandler">
      <MemberSignature Language="C#" Value="public static void RegisterTypeHandler (Guid typeId, Type itemTypeClass, bool overwriteExisting);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterTypeHandler(valuetype System.Guid typeId, class System.Type itemTypeClass, bool overwriteExisting) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ItemTypeManager.RegisterTypeHandler(System.Guid,System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterTypeHandler (typeId As Guid, itemTypeClass As Type, overwriteExisting As Boolean)" />
      <MemberSignature Language="F#" Value="static member RegisterTypeHandler : Guid * Type * bool -&gt; unit" Usage="Microsoft.Health.ItemTypeManager.RegisterTypeHandler (typeId, itemTypeClass, overwriteExisting)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeId" Type="System.Guid" />
        <Parameter Name="itemTypeClass" Type="System.Type" />
        <Parameter Name="overwriteExisting" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeId">
             The unique identifier for the item type-specific data as defined
             by the HealthVault service.
             </param>
        <param name="itemTypeClass">
             The class that implements the item type-specific data. It must
             be public, derive from <see cref="T:Microsoft.Health.HealthRecordItem" />, and 
             have a default constructor.
             </param>
        <param name="overwriteExisting">
          <b>true</b> to register the new deserializer even if the type
             already has a deserializer registered; <b>false</b> to throw an 
             exception because a deserializer is already registered.
             </param>
        <summary>
             Registers a deserializer for item type-specific data.
             </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
             The <paramref name="typeId" /> parameter is <see cref="F:System.Guid.Empty" /> or
             the <paramref name="itemTypeClass" /> parameter does not derive from
             <see cref="T:Microsoft.Health.HealthRecordItem" />.
             </exception>
        <exception cref="T:System.ArgumentNullException">
             The <paramref name="itemTypeClass" /> parameter is <b>null</b>.
             </exception>
        <exception cref="T:Microsoft.Health.TypeHandlerAlreadyRegisteredException">
             The <paramref name="typeId" /> parameter already has a handler 
             registered and <paramref name="overwriteExisting" /> is <b>false</b>.
             </exception>
      </Docs>
    </Member>
  </Members>
</Type>