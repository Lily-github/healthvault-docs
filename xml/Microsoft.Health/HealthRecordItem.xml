<Type Name="HealthRecordItem" FullName="Microsoft.Health.HealthRecordItem">
  <TypeSignature Language="C#" Value="public class HealthRecordItem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HealthRecordItem extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Health.HealthRecordItem" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Health</AssemblyName>
    <AssemblyVersion>2.64.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Represents a health record item.
            </summary>
    <remarks>
            A health record item is a single piece of data in a health record 
            that is accessible through the HealthVault service. Examples of health 
            record items include a blood pressure measurement, an exercise session, 
            or an insurance claim.
            <br /><br />
            Health record items are typed and have XML data that adheres to the 
            schema for the type.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected HealthRecordItem (Guid typeId);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(valuetype System.Guid typeId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.HealthRecordItem.#ctor(System.Guid)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="typeId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="typeId">
            The unique identifier of the type of which the item is an instance.
            </param>
        <summary>
            Derived classes must call this method when their default 
            constructor is called.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HealthRecordItem (Guid typeId, System.Xml.XPath.IXPathNavigable typeSpecificData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Guid typeId, class System.Xml.XPath.IXPathNavigable typeSpecificData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.HealthRecordItem.#ctor(System.Guid,System.Xml.XPath.IXPathNavigable)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="typeId" Type="System.Guid" />
        <Parameter Name="typeSpecificData" Type="System.Xml.XPath.IXPathNavigable" />
      </Parameters>
      <Docs>
        <param name="typeId">
            The unique identifier for the item type.
            </param>
        <param name="typeSpecificData">
            The type-specific data XML for the item. 
            </param>
        <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.HealthRecordItem" /> class 
            with the specified type identifier and type-specific data.
            </summary>
        <remarks>
            This constructor is reserved for when there are no derived
            classes for the item type being created. In most situations, use the
            derived type constructor.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonData">
      <MemberSignature Language="C#" Value="public Microsoft.Health.CommonItemData CommonData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Health.CommonItemData CommonData" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.HealthRecordItem.CommonData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.CommonItemData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the common data for the <see cref="T:Microsoft.Health.HealthRecordItem" />.
            </summary>
        <value>
            An instance of <see cref="T:Microsoft.Health.CommonItemData" /> for the 
            <see cref="T:Microsoft.Health.HealthRecordItem" />.
            </value>
        <remarks>
            The common data includes notes, source, and extensions.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Created">
      <MemberSignature Language="C#" Value="public Microsoft.Health.HealthServiceAudit Created { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Health.HealthServiceAudit Created" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.HealthRecordItem.Created" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.HealthServiceAudit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the audit information associated with the creation of
            this health record item.
            </summary>
        <value>To be added.</value>
        <remarks> 
            It is the responsibility of the application to convert the audit time
            to local time if necessary.
            <br /><br />
            This data value is only available when the
            <see cref="P:Microsoft.Health.HealthRecordItem.Sections" /> show the
            <see cref="F:Microsoft.Health.HealthRecordItemSections.Audits" /> bit
            set.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static Microsoft.Health.HealthRecordItem Deserialize (string itemXml);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Health.HealthRecordItem Deserialize(string itemXml) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.HealthRecordItem.Deserialize(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.HealthRecordItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemXml" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="itemXml">To be added.</param>
        <summary>
            Create a <see cref="T:Microsoft.Health.HealthRecordItem" /> instance from the item XML. 
            </summary>
        <returns>
            A instance of the <see cref="T:Microsoft.Health.HealthRecordItem" /> class.
            </returns>
        <remarks>
            This method is identical to calling <see cref="M:Microsoft.Health.ItemTypeManager.DeserializeItem(System.String)" />.
            
            The item XML should come from a previous call to <see cref="M:Microsoft.Health.HealthRecordItem.Serialize" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="EffectiveDate">
      <MemberSignature Language="C#" Value="public DateTime EffectiveDate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime EffectiveDate" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.HealthRecordItem.EffectiveDate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the date and time that the health record item data was taken.
            </summary>
        <value>To be added.</value>
        <remarks>
            This might not be the same time that the data was entered
            into the system.
            <br /><br />
            This data value is only available when the
            <see cref="P:Microsoft.Health.HealthRecordItem.Sections" /> show the
            <see cref="F:Microsoft.Health.HealthRecordItemSections.Core" /> bit
            set.       
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="EffectivePermissions">
      <MemberSignature Language="C#" Value="public Nullable&lt;Microsoft.Health.HealthRecordItemPermissions&gt; EffectivePermissions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype Microsoft.Health.HealthRecordItemPermissions&gt; EffectivePermissions" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.HealthRecordItem.EffectivePermissions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.Health.HealthRecordItemPermissions&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the effective permissions on the item granted to the person 
            retrieving the <see cref="T:Microsoft.Health.HealthRecordItem" />.
            </summary>
        <value>
            If the permissions are unknown, the value is <b>null</b>; otherwise
            the appropriate permissions are returned.
            </value>
        <remarks> 
            This data value is only available when the
            <see cref="P:Microsoft.Health.HealthRecordItem.Sections" /> show the
            <see cref="F:Microsoft.Health.HealthRecordItemSections.EffectivePermissions" /> 
            bit set.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flags">
      <MemberSignature Language="C#" Value="public Microsoft.Health.HealthRecordItemFlags Flags { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Health.HealthRecordItemFlags Flags" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.HealthRecordItem.Flags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.HealthRecordItemFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the <see cref="T:Microsoft.Health.HealthRecordItem" /> flags.
            </summary>
        <value>To be added.</value>
        <remarks>
          <see cref="P:Microsoft.Health.HealthRecordItem.Sections" /> show the
            <see cref="F:Microsoft.Health.HealthRecordItemSections.Core" /> bit
            set.       
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobStore">
      <MemberSignature Language="C#" Value="public Microsoft.Health.BlobStore GetBlobStore (Microsoft.Health.HealthRecordAccessor record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Health.BlobStore GetBlobStore(class Microsoft.Health.HealthRecordAccessor record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.HealthRecordItem.GetBlobStore(Microsoft.Health.HealthRecordAccessor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.BlobStore</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.Health.HealthRecordAccessor" />
      </Parameters>
      <Docs>
        <param name="record">
            The <see cref="T:Microsoft.Health.HealthRecordAccessor" /> that any BLOB data will be written to. This parameter
            may be <b>null</b> if only read access is required or the BLOB data to be written is 
            for a <see cref="T:Microsoft.Health.Package.ConnectPackage" />.
            </param>
        <summary>
            Gets the BLOB store for this health record item.
            </summary>
        <returns>
            A <see cref="T:Microsoft.Health.BlobStore" /> instance related to this health record item.
            </returns>
        <remarks>
            This method replaces the previous OtherData property. All binary data is now created,
            updated, and retrieved through <see cref="T:Microsoft.Health.BlobStore" /> instance associated with the
            <see cref="T:Microsoft.Health.HealthRecordItem" />.<br /><br />
            GetBlobStore will return an empty store on an existing <see cref="T:Microsoft.Health.HealthRecordItem" />
            if <see cref="F:Microsoft.Health.HealthRecordItemSections.BlobPayload" /> is not specified when retrieving
            the item. In this case it is possible to overwrite or remove existing Blobs in the
            <see cref="T:Microsoft.Health.HealthRecordItem" /> instance stored in HealthVault by using the same name
            as the existing Blob. It is recommended that if you are going to be manipulating 
            Blobs in the BlobStore, that you specify
            <see cref="F:Microsoft.Health.HealthRecordItemSections.BlobPayload" /> when retrieving the item.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobStore">
      <MemberSignature Language="C#" Value="public Microsoft.Health.BlobStore GetBlobStore (Microsoft.Health.Package.ConnectPackageCreationParameters connectPackageParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Health.BlobStore GetBlobStore(class Microsoft.Health.Package.ConnectPackageCreationParameters connectPackageParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.HealthRecordItem.GetBlobStore(Microsoft.Health.Package.ConnectPackageCreationParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.BlobStore</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connectPackageParameters" Type="Microsoft.Health.Package.ConnectPackageCreationParameters" />
      </Parameters>
      <Docs>
        <param name="connectPackageParameters">
            The <see cref="T:Microsoft.Health.Package.ConnectPackageCreationParameters" /> that define 
            the <see cref="T:Microsoft.Health.Package.ConnectPackage" /> to which any BLOB data will be written to.
            </param>
        <summary>
            Gets the BLOB store for this health record item.
            </summary>
        <returns>
            A <see cref="T:Microsoft.Health.BlobStore" /> instance related to this health record item.
            </returns>
        <remarks>
            This method replaces the previous OtherData property. All binary data is now created,
            updated, and retrieved through <see cref="T:Microsoft.Health.BlobStore" /> instance associated with the
            <see cref="T:Microsoft.Health.HealthRecordItem" />.<br /><br />
            GetBlobStore will return an empty store on an existing <see cref="T:Microsoft.Health.HealthRecordItem" />
            if <see cref="F:Microsoft.Health.HealthRecordItemSections.BlobPayload" /> is not specified when retrieving
            the item. In this case it is possible to overwrite or remove existing Blobs in the
            <see cref="T:Microsoft.Health.HealthRecordItem" /> instance stored in HealthVault by using the same name
            as the existing Blob. It is recommended that if you are going to be manipulating 
            Blobs in the BlobStore, that you specify
            <see cref="F:Microsoft.Health.HealthRecordItemSections.BlobPayload" /> when retrieving the item.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
            If <paramref name="connectPackageParameters" /> is <b>null</b>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetItemXml">
      <MemberSignature Language="C#" Value="public string GetItemXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetItemXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.HealthRecordItem.GetItemXml" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets the XML representation of the health record item.
            </summary>
        <returns>
            A string containing the XML representation of the item.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemXml">
      <MemberSignature Language="C#" Value="public string GetItemXml (Microsoft.Health.HealthRecordItemSections sections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetItemXml(valuetype Microsoft.Health.HealthRecordItemSections sections) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.HealthRecordItem.GetItemXml(Microsoft.Health.HealthRecordItemSections)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sections" Type="Microsoft.Health.HealthRecordItemSections" />
      </Parameters>
      <Docs>
        <param name="sections">
            The sections of the item to write to the XML.
            </param>
        <summary>
            Gets the XML representation of the health record item.
            </summary>
        <returns>
            A string containing the XML representation of the item wrapped by a "thing" element. 
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
            If <paramref name="sections" /> is <b>null</b> or empty.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetItemXml">
      <MemberSignature Language="C#" Value="public string GetItemXml (string elementName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetItemXml(string elementName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.HealthRecordItem.GetItemXml(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">
            The element that will wrap the thing's contents.
            </param>
        <summary>
            Gets the XML representation of the health record item.
            </summary>
        <returns>
            A string containing the XML representation of the item wrapped by the specified 
            <paramref name="elementName" />.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
            If <paramref name="elementName" /> is <b>null</b> or empty.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetItemXml">
      <MemberSignature Language="C#" Value="public string GetItemXml (Microsoft.Health.HealthRecordItemSections sections, string elementName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetItemXml(valuetype Microsoft.Health.HealthRecordItemSections sections, string elementName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.HealthRecordItem.GetItemXml(Microsoft.Health.HealthRecordItemSections,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sections" Type="Microsoft.Health.HealthRecordItemSections" />
        <Parameter Name="elementName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sections">
            The sections of the item to write to the XML.
            </param>
        <param name="elementName">
            The element that will wrap the thing's contents.
            </param>
        <summary>
            Gets the XML representation of the health record item.
            </summary>
        <returns>
            A string containing the XML representation of the item wrapped by the specified 
            <paramref name="elementName" />.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
            If <paramref name="elementName" /> is <b>null</b> or empty.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSizeInBytes">
      <MemberSignature Language="C#" Value="public int GetSizeInBytes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetSizeInBytes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.HealthRecordItem.GetSizeInBytes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets the size of the health record item which will be added to the quota used in the
            person's health record.
            </summary>
        <returns>
            The size in bytes of the health record item.
            </returns>
        <remarks>
            This size may be used to determine if there is sufficient room left in the person's health
            record. It is recommended that this be used only for large items that may cause the
            person to exceed their quota. This measurement is an approximation. The HealthVault
            service may evaluate the item to have slightly more or fewer bytes depending on how the
            white space is transformed between the client and server. The person's health record
            quota usage may also change on the HealthVault service due to data being added by other
            applications.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HealthRecordItemSignatures">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;Microsoft.Health.HealthRecordItemSignature&gt; HealthRecordItemSignatures { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class Microsoft.Health.HealthRecordItemSignature&gt; HealthRecordItemSignatures" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.HealthRecordItem.HealthRecordItemSignatures" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;Microsoft.Health.HealthRecordItemSignature&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the signatures for the <see cref="T:Microsoft.Health.HealthRecordItem" />. 
            </summary>
        <value>
            An collection of <see cref="T:Microsoft.Health.HealthRecordItemSignature" />.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDownVersioned">
      <MemberSignature Language="C#" Value="public bool IsDownVersioned { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDownVersioned" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.HealthRecordItem.IsDownVersioned" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the value indicating if the <see cref="T:Microsoft.Health.HealthRecordItem" /> is down-versioned.
            </summary>
        <value>To be added.</value>
        <remarks>
            If this value is true then an attempt to update the <see cref="T:Microsoft.Health.HealthRecordItem" />
            will fail.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsImmutable">
      <MemberSignature Language="C#" Value="public bool IsImmutable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsImmutable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.HealthRecordItem.IsImmutable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value indicating whether the <see cref="T:Microsoft.Health.HealthRecordItem" /> 
            is immutable.
            </summary>
        <value>
          <b>true</b> if the <see cref="T:Microsoft.Health.HealthRecordItem" /> is immutable; otherwise,
            <b>false</b>.
            </value>
        <remarks> 
            This data value is only available when the
            <see cref="P:Microsoft.Health.HealthRecordItem.Sections" /> show the
            <see cref="F:Microsoft.Health.HealthRecordItemSections.EffectivePermissions" /> 
            bit set. Returns true if either Thing Type is immutable or Thing instance is read-only.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPersonal">
      <MemberSignature Language="C#" Value="public bool IsPersonal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPersonal" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.HealthRecordItem.IsPersonal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the value indicating if the <see cref="T:Microsoft.Health.HealthRecordItem" /> is private.
            </summary>
        <value>To be added.</value>
        <remarks>
            Private items are accessible only by custodians.
            <see cref="P:Microsoft.Health.HealthRecordItem.Sections" /> show the
            <see cref="F:Microsoft.Health.HealthRecordItemSections.Core" /> bit
            set.       
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.HealthRecordItem.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value indicating whether <see cref="T:Microsoft.Health.HealthRecordItem" /> is read-only.
            </summary>
        <value>
          <b>true</b> if the <see cref="T:Microsoft.Health.HealthRecordItem" /> is read-only; otherwise,
            <b>false</b>.
            </value>
        <remarks>
            Returns true if either Thing Type is immutable or Thing instance is read-only 
            but sets only the instance immutability.
            </remarks>
        <exception cref="T:System.InvalidOperationException">
            Cannot change read-only flag to false if it is already true.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="IsSignatureValid">
      <MemberSignature Language="C#" Value="public bool IsSignatureValid ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsSignatureValid() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.HealthRecordItem.IsSignatureValid" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Checks if the health record item's signature is valid.
            </summary>
        <returns>
          <b>true</b> if the signature is valid against the XML representation of the item 
            returned from the service, or for new items, if the signature is valid against
            the XML of the item at the time the item was signed. Returns <b>false</b> if the 
            signature could not be validated.
            </returns>
        <remarks>
            Verifies that the signature on the item is valid for the XML representation of the 
            item as retrieved from the HealthVault service.
            <br /><br />
            This method will always verify against the underlying XML of this item as returned 
            from the service, even if local modifications are made to the item. In the case 
            of new items that have not yet been created in the HealthVault service, this method 
            validates the signature against the XML of the item at the time of signing.
            <br /><br />
            For more information about XML digital signatures see: 
            <see cref="N:System.Security.Cryptography.Xml" />. 
            </remarks>
        <exception cref="T:System.InvalidOperationException">
            The signature could not be validated because the <see cref="T:Microsoft.Health.HealthRecordItem" /> is not 
            signed.
            </exception>
        <exception cref="T:Microsoft.Health.SignatureFailureException">
            Signature validation failed becaue either the 
            <see cref="T:Microsoft.Health.HealthRecordItemSignatureMethod" /> of this item is unknown and cannot be
            validated, or the integrity of the signature could not be verified in which case the 
            inner exception contains details on the reasons why.
            The inner exception is <see cref="T:System.Security.Cryptography.CryptographicException" />, thrown because of one of:
            The SignatureAlgorithm property of the public key in the 
            signature does not match the SignatureMethod property.
            The signature description could not be created.
            The hash algorithm could not be created. 
            </exception>
      </Docs>
    </Member>
    <Member MemberName="IsUpVersioned">
      <MemberSignature Language="C#" Value="public bool IsUpVersioned { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUpVersioned" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.HealthRecordItem.IsUpVersioned" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the value indicating if the <see cref="T:Microsoft.Health.HealthRecordItem" /> is up-versioned.
            </summary>
        <value>To be added.</value>
        <remarks>
            If this value is true then an application should get explicit permission to update the
            instance from the user. This will cause the stored instance to be converted to the 
            type version which may cause data loss in some cases.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Key">
      <MemberSignature Language="C#" Value="public Microsoft.Health.HealthRecordItemKey Key { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Health.HealthRecordItemKey Key" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.HealthRecordItem.Key" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.HealthRecordItemKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the key of the health record item.
            </summary>
        <value>
            A globally unique identifier for the item issued when the item is 
            created and a globally unique version stamp updated every time 
            the item is changed.
            </value>
        <remarks>
            This is the only property that
            is guaranteed to be available regardless of how 
            <see cref="P:Microsoft.Health.HealthRecordItem.Sections" /> is set.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LastUpdated">
      <MemberSignature Language="C#" Value="public Microsoft.Health.HealthServiceAudit LastUpdated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Health.HealthServiceAudit LastUpdated" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.HealthRecordItem.LastUpdated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.HealthServiceAudit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the audit information associated with the last update of
            this health record item.
            </summary>
        <value>To be added.</value>
        <remarks> 
            It is the responsibility of the application to convert the audit time
            to local time if necessary.
            <br /><br />
            This data value is only available when the
            <see cref="P:Microsoft.Health.HealthRecordItem.Sections" /> show the
            <see cref="F:Microsoft.Health.HealthRecordItemSections.Audits" /> bit
            set.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseXml">
      <MemberSignature Language="C#" Value="protected virtual void ParseXml (System.Xml.XPath.IXPathNavigable typeSpecificXml);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ParseXml(class System.Xml.XPath.IXPathNavigable typeSpecificXml) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.HealthRecordItem.ParseXml(System.Xml.XPath.IXPathNavigable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeSpecificXml" Type="System.Xml.XPath.IXPathNavigable" />
      </Parameters>
      <Docs>
        <param name="typeSpecificXml">
            The type-specific data XML for the item.
            </param>
        <summary>
            Parses the type-specific XML data for the item.
            </summary>
        <remarks>
            Derived classes should override this method and populate their
            members with the data from the XML.
            <br /><br />
            The default implementation does nothing.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sections">
      <MemberSignature Language="C#" Value="public Microsoft.Health.HealthRecordItemSections Sections { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Health.HealthRecordItemSections Sections" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.HealthRecordItem.Sections" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.HealthRecordItemSections</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the data sections that this HealthRecordItem represents.
            </summary>
        <value>
            An instance of <see cref="T:Microsoft.Health.HealthRecordItemSections" />.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public string Serialize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Serialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.HealthRecordItem.Serialize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets the XML representation of the item for serialization.
            </summary>
        <returns>
            A string containing the XML representation of the item.
            </returns>
        <remarks>
            There are two ways to obtain an XML representation of the item.
            GetItemXml() returns only the XML for the type-specific information of the item.
            Serialize() returns the full XML.
            
            Use GetItemXml() if you want to save the XML representation to pass to the HealthVault platform for a 
            new or update operation.
            Use Serialize if you want to serialize and deserialize the item and have the deserialized item be
            identical to the serialized one.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public void Sign (System.Security.Cryptography.X509Certificates.X509Certificate2 signingCertificate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sign(class System.Security.Cryptography.X509Certificates.X509Certificate2 signingCertificate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.HealthRecordItem.Sign(System.Security.Cryptography.X509Certificates.X509Certificate2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signingCertificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" />
      </Parameters>
      <Docs>
        <param name="signingCertificate">
             An X509 certificate. The private key from the certificate is used to sign the
             <see cref="T:Microsoft.Health.HealthRecordItem" />.
             </param>
        <summary>
             Signs the <see cref="T:Microsoft.Health.HealthRecordItem" /> with a digital signature.
             </summary>
        <remarks>
             Creates an instance of <see cref="T:Microsoft.Health.HealthRecordItemSignature" /> and calls its Sign method.
             </remarks>
        <exception cref="T:System.ArgumentNullException">
             The specified argument is null.
             </exception>
        <exception cref="T:System.InvalidOperationException">
             The <see cref="T:Microsoft.Health.HealthRecordItem" /> is already signed and may only have one signature.
             </exception>
        <exception cref="T:System.Xml.XmlException">
             There is a load or parse error in the XML.
             </exception>
        <exception cref="T:Microsoft.Health.SignatureFailureException">
             Signing failed. See the inner exception.
             The inner exception may be one of the following:
             An <see cref="T:System.Xml.XmlException" /> is thrown because there is a load or parse error loading 
             the xsl.
             A CryptographicException is thrown because the nodelist from the xsl does not contain 
             an <see cref="T:System.Security.Cryptography.Xml.XmlDsigXsltTransform" /> object.
             A <see cref="T:System.Security.Cryptography.CryptographicException" /> is thrown because signingCertificate.PrivateKey 
             is not an RSA or DSA key, or is unreadable.
             A <see cref="T:System.Security.Cryptography.CryptographicException" /> is thrown because signingCertificate.PrivateKey 
             is not a DSA or RSA object.
             </exception>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public Microsoft.Health.HealthRecordItemState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Health.HealthRecordItemState State" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.HealthRecordItem.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.HealthRecordItemState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the state of the <see cref="T:Microsoft.Health.HealthRecordItem" />.
            </summary>
        <value>To be added.</value>
        <remarks>
          <see cref="P:Microsoft.Health.HealthRecordItem.Sections" /> show the
            <see cref="F:Microsoft.Health.HealthRecordItemSections.Core" /> bit
            set.       
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tags">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;string&gt; Tags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;string&gt; Tags" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.HealthRecordItem.Tags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the list of tags on the <see cref="T:Microsoft.Health.HealthRecordItem" />.
            </summary>
        <value>
            A string representing the tag list.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformedXmlData">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,System.Xml.XmlDocument&gt; TransformedXmlData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;string, class System.Xml.XmlDocument&gt; TransformedXmlData" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.HealthRecordItem.TransformedXmlData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Xml.XmlDocument&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the transformed XML data of the <see cref="T:Microsoft.Health.HealthRecordItem" />.
            </summary>
        <value>To be added.</value>
        <remarks> 
            Transformed XML data is provided if you so specify in 
            <see cref="T:Microsoft.Health.HealthRecordSearcher" />. The dictionary values are 
            indexed by the name of the transform that was specified when the 
            search was performed.
            <br /><br />
            This data value is only available to get when the
            <see cref="P:Microsoft.Health.HealthRecordItem.Sections" /> show the
            <see cref="F:Microsoft.Health.HealthRecordItemSections.Xml" /> bit
            set though it will not contain data unless a transform was 
            specified when getting the item.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeId">
      <MemberSignature Language="C#" Value="public Guid TypeId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid TypeId" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.HealthRecordItem.TypeId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the type identifier for the health record item type.
            </summary>
        <value>
            A globally unique identifier for the type of the item.
            </value>
        <remarks> 
            The types available can be queried using  
            <see cref="M:Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Guid,Microsoft.Health.HealthServiceConnection)" />
            .
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public string TypeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.HealthRecordItem.TypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the health record item type name.
            </summary>
        <value>To be added.</value>
        <remarks> 
            The types and names of types available can be queried using 
            <see cref="M:Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Guid,Microsoft.Health.HealthServiceConnection)" />
            .
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeSpecificData">
      <MemberSignature Language="C#" Value="public System.Xml.XPath.IXPathNavigable TypeSpecificData { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XPath.IXPathNavigable TypeSpecificData" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.HealthRecordItem.TypeSpecificData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.IXPathNavigable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the XML representation of the type-specific data for the 
            <see cref="T:Microsoft.Health.HealthRecordItem" />.
            </summary>
        <value>To be added.</value>
        <remarks> 
            This data might contain data from other applications that also work
            with the same type of data. Take care not to overwrite
            existing data when making updates. Do not remove or manipulate
            elements in the XML that you do not understand.
            <br /><br />
            If this property is set on a type derived from <see cref="T:Microsoft.Health.HealthRecordItem" /> the data
            is not parsed into the object model so properties of the class may still show old data.
            <br /><br />
            This data value is only available to get when the
            <see cref="P:Microsoft.Health.HealthRecordItem.Sections" /> show the
            <see cref="F:Microsoft.Health.HealthRecordItemSections.Xml" /> bit
            set.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatedEndDate">
      <MemberSignature Language="C#" Value="public DateTime UpdatedEndDate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime UpdatedEndDate" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.HealthRecordItem.UpdatedEndDate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the date when HealthRecordItem is not relevant.
            </summary>
        <value>To be added.</value>
        <remarks>
            This data value is only available when the
            <see cref="P:Microsoft.Health.HealthRecordItem.Sections" /> show the
            <see cref="F:Microsoft.Health.HealthRecordItemSections.Core" /> bit
            set.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateCertificate">
      <MemberSignature Language="C#" Value="public void ValidateCertificate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateCertificate() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.HealthRecordItem.ValidateCertificate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Checks if the certificates are valid.
            </summary>
        <remarks>
            Validates the certificates of each signature on the <see cref="T:Microsoft.Health.HealthRecordItem" />.
            </remarks>
        <exception cref="T:Microsoft.Health.CertificateValidationException">
            Certificate validation failed.
            There may be an inner exception is <see cref="T:System.Security.Cryptography.CryptographicException" />, thrown because
            of:
            The certificate is unreadable. 
            If there is no inner exception, there will be a string with info about the certificate
            and the error.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            The certificate could not be validated because the <see cref="T:Microsoft.Health.HealthRecordItem" /> is 
            not signed.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public virtual void WriteXml (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteXml(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.HealthRecordItem.WriteXml(System.Xml.XmlWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
            The XmlWriter that receives the type-specific data.
            </param>
        <summary>
            Writes the XML for the type-specific data of the item to the
            specified XmlWriter.
            </summary>
        <remarks>
            Derived classes should override this method and write the type-
            specific XML which goes in the data-xml section of the item.
            <br /><br />
            The default implementation writes the XML in the 
            <see cref="P:Microsoft.Health.HealthRecordItem.TypeSpecificData" /> property to the specified writer.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
