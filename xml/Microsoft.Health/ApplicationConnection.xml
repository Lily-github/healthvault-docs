<Type Name="ApplicationConnection" FullName="Microsoft.Health.ApplicationConnection">
  <TypeSignature Language="C#" Value="public class ApplicationConnection : Microsoft.Health.HealthServiceConnection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ApplicationConnection extends Microsoft.Health.HealthServiceConnection" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Health.ApplicationConnection" />
  <TypeSignature Language="VB.NET" Value="Public Class ApplicationConnection&#xA;Inherits HealthServiceConnection" />
  <TypeSignature Language="F#" Value="type ApplicationConnection = class&#xA;    inherit HealthServiceConnection" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Health</AssemblyName>
    <AssemblyVersion>2.64.0.0</AssemblyVersion>
    <AssemblyVersion>2.68.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.Health.HealthServiceConnection</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Base class that represents a connection of an application 
            to the HealthVault service for either online or offline operations.
            </summary>
    <remarks>
            You must connect to the HealthVault service to access its
            web methods. This class does not maintain
            an open connection to the service, but uses XML over HTTP to 
            make requests and receive responses from the service. The connection
            only maintains the data necessary for the request.
            <br /><br />
            For operations that require authentication, use the 
            <see cref="T:Microsoft.Health.AuthenticatedConnection" /> class.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ApplicationConnection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ApplicationConnection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.ApplicationConnection" /> 
            class with default values taken from the application or web 
            configuration file.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Health.InvalidConfigurationException">
            If the web or application configuration file does not contain 
            configuration entries for "ApplicationID" or "HealthServiceUrl".
            </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ApplicationConnection (Microsoft.Health.HealthServiceInstance serviceInstance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Health.HealthServiceInstance serviceInstance) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ApplicationConnection.#ctor(Microsoft.Health.HealthServiceInstance)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (serviceInstance As HealthServiceInstance)" />
      <MemberSignature Language="F#" Value="new Microsoft.Health.ApplicationConnection : Microsoft.Health.HealthServiceInstance -&gt; Microsoft.Health.ApplicationConnection" Usage="new Microsoft.Health.ApplicationConnection serviceInstance" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serviceInstance" Type="Microsoft.Health.HealthServiceInstance" />
      </Parameters>
      <Docs>
        <param name="serviceInstance">
            The HealthVault web-service instance.
            </param>
        <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.ApplicationConnection" /> 
            class for the application having the specified
            HealthVault web-service instance.
            </summary>
        <remarks>
            If <paramref name="serviceInstance" /> is <b>null</b>, the URL for the configured
            default HealthVault web-service instance is used.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ApplicationConnection (Guid callingApplicationId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Guid callingApplicationId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ApplicationConnection.#ctor(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callingApplicationId As Guid)" />
      <MemberSignature Language="F#" Value="new Microsoft.Health.ApplicationConnection : Guid -&gt; Microsoft.Health.ApplicationConnection" Usage="new Microsoft.Health.ApplicationConnection callingApplicationId" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callingApplicationId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="callingApplicationId">
            The GUID of the HealthVault application.
            </param>
        <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.ApplicationConnection" /> 
            class for the application having the specified globally unique 
            identifier (GUID). 
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ApplicationConnection (Guid callingApplicationId, Microsoft.Health.HealthServiceInstance serviceInstance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Guid callingApplicationId, class Microsoft.Health.HealthServiceInstance serviceInstance) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ApplicationConnection.#ctor(System.Guid,Microsoft.Health.HealthServiceInstance)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callingApplicationId As Guid, serviceInstance As HealthServiceInstance)" />
      <MemberSignature Language="F#" Value="new Microsoft.Health.ApplicationConnection : Guid * Microsoft.Health.HealthServiceInstance -&gt; Microsoft.Health.ApplicationConnection" Usage="new Microsoft.Health.ApplicationConnection (callingApplicationId, serviceInstance)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callingApplicationId" Type="System.Guid" />
        <Parameter Name="serviceInstance" Type="Microsoft.Health.HealthServiceInstance" />
      </Parameters>
      <Docs>
        <param name="callingApplicationId">
            The GUID of the HealthVault application.
            </param>
        <param name="serviceInstance">
            The HealthVault web-service instance.
            </param>
        <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.ApplicationConnection" /> 
            class for the application having the specified globally unique 
            identifier (GUID) and HealthVault web-service instance.
            </summary>
        <remarks>
            If <paramref name="serviceInstance" /> is <b>null</b>, the URL for the configured
            default HealthVault web-service instance is used.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ApplicationConnection (Guid callingApplicationId, string healthServiceUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Guid callingApplicationId, string healthServiceUrl) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ApplicationConnection.#ctor(System.Guid,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callingApplicationId As Guid, healthServiceUrl As String)" />
      <MemberSignature Language="F#" Value="new Microsoft.Health.ApplicationConnection : Guid * string -&gt; Microsoft.Health.ApplicationConnection" Usage="new Microsoft.Health.ApplicationConnection (callingApplicationId, healthServiceUrl)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callingApplicationId" Type="System.Guid" />
        <Parameter Name="healthServiceUrl" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="callingApplicationId">
            The GUID of the HealthVault application.
            </param>
        <param name="healthServiceUrl">
            A string representing the URL of the HealthVault application.
            </param>
        <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.ApplicationConnection" /> 
            class for the application having the specified globally unique 
            identifier (GUID) and string representing the HealthVault service 
            uniform resource locator (URL).
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            The <paramref name="healthServiceUrl" /> parameter is <b>null</b>.
            </exception>
        <exception cref="T:System.UriFormatException">
            The <paramref name="healthServiceUrl" /> string is not formatted 
            properly.
            </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ApplicationConnection (Guid callingApplicationId, Uri healthServiceUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Guid callingApplicationId, class System.Uri healthServiceUrl) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ApplicationConnection.#ctor(System.Guid,System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callingApplicationId As Guid, healthServiceUrl As Uri)" />
      <MemberSignature Language="F#" Value="new Microsoft.Health.ApplicationConnection : Guid * Uri -&gt; Microsoft.Health.ApplicationConnection" Usage="new Microsoft.Health.ApplicationConnection (callingApplicationId, healthServiceUrl)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callingApplicationId" Type="System.Guid" />
        <Parameter Name="healthServiceUrl" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="callingApplicationId">
            The GUID of the HealthVault application.
            </param>
        <param name="healthServiceUrl">
            The URL of the HealthVault web service.
            </param>
        <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.ApplicationConnection" /> 
            class for the application having the specified globally unique 
            identifier (GUID) and HealthVault service uniform resource
            locator (URL).
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            The <paramref name="healthServiceUrl" /> parameter is <b>null</b>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateRequest">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Health.HealthServiceRequest CreateRequest (Microsoft.Health.HealthRecordAccessor record, string methodName, int methodVersion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Health.HealthServiceRequest CreateRequest(class Microsoft.Health.HealthRecordAccessor record, string methodName, int32 methodVersion) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ApplicationConnection.CreateRequest(Microsoft.Health.HealthRecordAccessor,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateRequest (record As HealthRecordAccessor, methodName As String, methodVersion As Integer) As HealthServiceRequest" />
      <MemberSignature Language="F#" Value="override this.CreateRequest : Microsoft.Health.HealthRecordAccessor * string * int -&gt; Microsoft.Health.HealthServiceRequest" Usage="applicationConnection.CreateRequest (record, methodName, methodVersion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.HealthServiceRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.Health.HealthRecordAccessor" />
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="methodVersion" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="record">
            The record that prepopulates the request.
            </param>
        <param name="methodName">
            The name of the method to call.
            </param>
        <param name="methodVersion">
            The version of the method to call.
            </param>
        <summary>
            Represents a simple wrapper around the XML request for the web 
            service.
            </summary>
        <returns>
            A <see cref="T:Microsoft.Health.HealthServiceRequest" /> that wraps 
            the XML request for the web service.
            </returns>
        <remarks>
            This method skips the object model provided by the other
            methods of this class and acts as a simple wrapper around
            the XML request for the web service. The caller must provide the
            parameters in the correct format for the called method and parse 
            the response data.
            The information in the <paramref name="record" /> parameter
            prepopulates the request.
            <br /><br />
            By creating the request object directly rather than using the 
            object model, you can pass parameters that are not directly 
            exposed by the object model. Please provide feedback
            to us if this is the case. This also allows for request-specific
            parameters that are set by default when using the object model. 
            For example, you can change the language for a specific request 
            without affecting other requests to the HealthVault service through
            the same connection.
            <br /><br /><br /><br />
            You can find a list of the HealthVault methods (including their
            request and response schema) at 
            <a href="http://labs.microsoftlivehealth.com/Lab">the Microsoft
            Live Health Lab</a> site.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
            The <paramref name="record" /> parameter is <b>null</b>.
            </exception>
        <exception cref="T:System.ArgumentException">
            The <paramref name="methodName" /> parameter is <b>null</b> or 
            empty.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetApplicationInfo">
      <MemberSignature Language="C#" Value="public Microsoft.Health.ApplicationInfo GetApplicationInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Health.ApplicationInfo GetApplicationInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ApplicationConnection.GetApplicationInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function GetApplicationInfo () As ApplicationInfo" />
      <MemberSignature Language="F#" Value="member this.GetApplicationInfo : unit -&gt; Microsoft.Health.ApplicationInfo" Usage="applicationConnection.GetApplicationInfo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.ApplicationInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets the application configuration information for the calling application.
            </summary>
        <returns>
            An ApplicationInfo object for the calling application.
            </returns>
        <remarks>
            This method always calls the HealthVault service to get the latest 
            information. It returns installation configuration about the calling 
            application.
            </remarks>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            The HealthVault service returned an error.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetApplicationInfo">
      <MemberSignature Language="C#" Value="public Microsoft.Health.ApplicationInfo GetApplicationInfo (bool allLanguages);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Health.ApplicationInfo GetApplicationInfo(bool allLanguages) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ApplicationConnection.GetApplicationInfo(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetApplicationInfo (allLanguages As Boolean) As ApplicationInfo" />
      <MemberSignature Language="F#" Value="member this.GetApplicationInfo : bool -&gt; Microsoft.Health.ApplicationInfo" Usage="applicationConnection.GetApplicationInfo allLanguages" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.ApplicationInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="allLanguages" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="allLanguages">
            A boolean value indicating whether the localized values all languages should be 
            returned, just one language. This affects all properties which can have multiple 
            localized values, including <see cref="P:Microsoft.Health.ApplicationInfo.CultureSpecificNames" />, 
            <see cref="P:Microsoft.Health.ApplicationInfo.CultureSpecificDescriptions" />,
            <see cref="P:Microsoft.Health.ApplicationInfo.CultureSpecificAuthorizationReasons" />, 
            <see cref="P:Microsoft.Health.ApplicationInfo.LargeLogo" />,
            <see cref="P:Microsoft.Health.ApplicationInfo.SmallLogo" />,
            <see cref="P:Microsoft.Health.ApplicationInfo.PrivacyStatement" />,
            <see cref="P:Microsoft.Health.ApplicationInfo.TermsOfUse" />,
            and <see cref="P:Microsoft.Health.ApplicationInfo.DtcSuccessMessage" /></param>
        <summary>
            Gets the application configuration information for the calling application.
            </summary>
        <returns>
            An ApplicationInfo object for the calling application.
            </returns>
        <remarks>
            This method always calls the HealthVault service to get the latest 
            information. It returns installation configuration about the calling 
            application.
            </remarks>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            The HealthVault service returned an error.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAuthorizedPeople">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.Health.PersonInfo&gt; GetAuthorizedPeople ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Health.PersonInfo&gt; GetAuthorizedPeople() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ApplicationConnection.GetAuthorizedPeople" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAuthorizedPeople () As IEnumerable(Of PersonInfo)" />
      <MemberSignature Language="F#" Value="member this.GetAuthorizedPeople : unit -&gt; seq&lt;Microsoft.Health.PersonInfo&gt;" Usage="applicationConnection.GetAuthorizedPeople " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.Health.PersonInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets information about people authorized for an application.
            </summary>
        <returns>
            An IEnumerable iterator of <see cref="T:Microsoft.Health.PersonInfo" /> objects representing 
            people authorized for the application.
            </returns>
        <remarks>
            The returned IEnumerable iterator will access the HealthVault service 
            across the network. The default <see cref="T:Microsoft.Health.GetAuthorizedPeopleSettings" /> 
            values are used.
            </remarks>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            The HealthVault service returned an error.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAuthorizedPeople">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.Health.PersonInfo&gt; GetAuthorizedPeople (Microsoft.Health.GetAuthorizedPeopleSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Health.PersonInfo&gt; GetAuthorizedPeople(class Microsoft.Health.GetAuthorizedPeopleSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ApplicationConnection.GetAuthorizedPeople(Microsoft.Health.GetAuthorizedPeopleSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAuthorizedPeople (settings As GetAuthorizedPeopleSettings) As IEnumerable(Of PersonInfo)" />
      <MemberSignature Language="F#" Value="member this.GetAuthorizedPeople : Microsoft.Health.GetAuthorizedPeopleSettings -&gt; seq&lt;Microsoft.Health.PersonInfo&gt;" Usage="applicationConnection.GetAuthorizedPeople settings" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.Health.PersonInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="settings" Type="Microsoft.Health.GetAuthorizedPeopleSettings" />
      </Parameters>
      <Docs>
        <param name="settings">
            The <see cref="T:Microsoft.Health.GetAuthorizedPeopleSettings" /> object used to configure the 
            IEnumerable iterator returned by this method.
            </param>
        <summary>
            Gets information about people authorized for an application.
            </summary>
        <returns>
            An IEnumerable iterator of <see cref="T:Microsoft.Health.PersonInfo" /> objects representing 
            people authorized for the application.
            </returns>
        <remarks>
            The returned IEnumerable iterator will access the HealthVault service 
            across the network. See <see cref="T:Microsoft.Health.GetAuthorizedPeopleSettings" /> for applicable 
            settings.
            </remarks>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            The HealthVault service returned an error. The retrieval can be retried from the 
            current position by calling this method again and using the last successfully 
            retrieved person Id for <see cref="P:Microsoft.Health.GetAuthorizedPeopleSettings.StartingPersonId" />.        
            </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="settings" /> is null.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAuthorizedRecords">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;Microsoft.Health.HealthRecordInfo&gt; GetAuthorizedRecords (System.Collections.Generic.IList&lt;Guid&gt; recordIds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.Collection`1&lt;class Microsoft.Health.HealthRecordInfo&gt; GetAuthorizedRecords(class System.Collections.Generic.IList`1&lt;valuetype System.Guid&gt; recordIds) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ApplicationConnection.GetAuthorizedRecords(System.Collections.Generic.IList{System.Guid})" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAuthorizedRecords (recordIds As IList(Of Guid)) As Collection(Of HealthRecordInfo)" />
      <MemberSignature Language="F#" Value="member this.GetAuthorizedRecords : System.Collections.Generic.IList&lt;Guid&gt; -&gt; System.Collections.ObjectModel.Collection&lt;Microsoft.Health.HealthRecordInfo&gt;" Usage="applicationConnection.GetAuthorizedRecords recordIds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;Microsoft.Health.HealthRecordInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recordIds" Type="System.Collections.Generic.IList&lt;System.Guid&gt;" />
      </Parameters>
      <Docs>
        <param name="recordIds">
            The unique identifiers for the records to retrieve.
            </param>
        <summary>
            Gets the <see cref="T:Microsoft.Health.HealthRecordInfo" /> for the records identified
            by the specified <paramref name="recordIds" />.
            </summary>
        <returns>
            A collection of the records matching the specified record 
            identifiers and authorized for the authenticated person.
            </returns>
        <remarks>
            This method is useful in cases where the application is storing
            record identifiers and needs access to the functionality provided
            by the object model.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMeaningfulUseTimelyAccessDocumentReport">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.Health.MeaningfulUse.DocumentReceipt&gt; GetMeaningfulUseTimelyAccessDocumentReport (Microsoft.Health.DateRange reportingPeriodFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Health.MeaningfulUse.DocumentReceipt&gt; GetMeaningfulUseTimelyAccessDocumentReport(class Microsoft.Health.DateRange reportingPeriodFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ApplicationConnection.GetMeaningfulUseTimelyAccessDocumentReport(Microsoft.Health.DateRange)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMeaningfulUseTimelyAccessDocumentReport (reportingPeriodFilter As DateRange) As IEnumerable(Of DocumentReceipt)" />
      <MemberSignature Language="F#" Value="abstract member GetMeaningfulUseTimelyAccessDocumentReport : Microsoft.Health.DateRange -&gt; seq&lt;Microsoft.Health.MeaningfulUse.DocumentReceipt&gt;&#xA;override this.GetMeaningfulUseTimelyAccessDocumentReport : Microsoft.Health.DateRange -&gt; seq&lt;Microsoft.Health.MeaningfulUse.DocumentReceipt&gt;" Usage="applicationConnection.GetMeaningfulUseTimelyAccessDocumentReport reportingPeriodFilter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.Health.MeaningfulUse.DocumentReceipt&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reportingPeriodFilter" Type="Microsoft.Health.DateRange" />
      </Parameters>
      <Docs>
        <param name="reportingPeriodFilter">
            The UTC reporting period to be used to retrieve the Timely Access Report.
            </param>
        <summary>
            Retrieves the Meaningful Use Timely Access Report for the application.
            </summary>
        <returns>
            An IEnumerable iterator of <see cref="T:Microsoft.Health.MeaningfulUse.DocumentReceipt" /> objects which contains the
            list of document receipts having an event date (visit or discharge date) within the specified reporting period.
            </returns>
        <remarks>
          <p>
            The Timely Access Report gives applications information to determine if they meet the Meaningful Use Stage 2 measure for timely patient access to information.
            For ambulatory settings, the measure states "More than 50 percent of all unique patients seen by the EP during the EHR reporting period are provided timely
            (available to the patient within 4 business days after the information is available to the EP)
            online access to their health information subject to the EP's discretion to withhold certain information".
            For the inpatient settings, the measure states "More than 50 percent of all patients who are discharged from the
            Inpatient or emergency department (POS 21 or 23) of an eligible hospital or CAH have their information available online
            within 36 hours of discharge". (For more regarding this measure see "View, download, and transmit to a 3rd party"
            in the <a href="http://www.healthit.gov/policy-researchers-implementers/meaningful-use-stage-2">Meaningful Use Stage 2 Reference Grid</a>.)
            </p>
          <p>
            HealthVault returns an entry in the report for each CCDA document received by the data source having an event date
            (which is the visit date for ambulatory settings, and the discharge date for inpatient settings) within the specified
            reporting period filter. Each entry consists of the date the document was made available to the patient in HealthVault, the event date,
            and the patient ID as specified in the CCDA document. The application can use this information to help calculate the percentage value of the measure.
            </p>
          <p>
            Note that HealthVault does not know the full list of patients seen by the provider and does not apply any logic to determine whether patients
            had access to the data within the timeframe specified by the measure. To calculate the percentage for this measure, the application must take into
            account the total number of unique patients seen or discharged within the desired reporting period, and for each patient determine if the data was made
            available to them within the measure's specified timeframe.
            </p>
        </remarks>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            The HealthVault service returned an error.
            </exception>
        <exception cref="T:System.ArgumentNullException">
            If <paramref name="reportingPeriodFilter" /> is <b>null</b>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetMeaningfulUseTimelyAccessDOPUDocumentReport">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt&gt; GetMeaningfulUseTimelyAccessDOPUDocumentReport (Microsoft.Health.DateRange availableDateFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt&gt; GetMeaningfulUseTimelyAccessDOPUDocumentReport(class Microsoft.Health.DateRange availableDateFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ApplicationConnection.GetMeaningfulUseTimelyAccessDOPUDocumentReport(Microsoft.Health.DateRange)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMeaningfulUseTimelyAccessDOPUDocumentReport (availableDateFilter As DateRange) As IEnumerable(Of DOPUDocumentReceipt)" />
      <MemberSignature Language="F#" Value="abstract member GetMeaningfulUseTimelyAccessDOPUDocumentReport : Microsoft.Health.DateRange -&gt; seq&lt;Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt&gt;&#xA;override this.GetMeaningfulUseTimelyAccessDOPUDocumentReport : Microsoft.Health.DateRange -&gt; seq&lt;Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt&gt;" Usage="applicationConnection.GetMeaningfulUseTimelyAccessDOPUDocumentReport availableDateFilter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableDateFilter" Type="Microsoft.Health.DateRange" />
      </Parameters>
      <Docs>
        <param name="availableDateFilter">
            The UTC date range used to filter the entries in the Timely Access Report by the date the CCDA document was made available to HealthVault.
            </param>
        <summary>
            Retrieves the Meaningful Use Timely Access Report for applications that use DOPU to transfer CCDA documents to HealthVault.
            </summary>
        <returns>
            An IEnumerable iterator of <see cref="T:Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt" /> objects which contains the list of CCDA document receipts sent to HealthVault using DOPU, filtered by the available date range. 
            </returns>
        <remarks>
          <p>
            The Timely Access Report gives applications information to determine if they meet the Meaningful Use Stage 2 measure for timely patient access to information.
            For ambulatory settings, the measure states "More than 50 percent of all unique patients seen by the EP during the EHR reporting period are provided timely
            (available to the patient within 4 business days after the information is available to the EP) online access to their health information subject to the EP's discretion to withhold certain information".
            For the inpatient settings, the measure states "More than 50 percent of all patients who are discharged from the Inpatient or emergency department (POS 21 or 23) of an eligible hospital
            or CAH have their information available online within 36 hours of discharge". (For more regarding this measure see "View, download, and transmit to a 3rd party"
            in the <a href="http://www.healthit.gov/policy-researchers-implementers/meaningful-use-stage-2">Meaningful Use Stage 2 Reference Grid</a>.)
            </p>
          <p>
            HealthVault returns an entry in the report for each CCDA document received by the data source using DOPU.
            The entries are filtered to those that were made available to HealthVault within the specified available date range filter.
            Each entry consists of the date the document was made available to the patient in HealthVault, and the identifier of the DOPU package that was made available to the patient.
            The application can use this information to help calculate the percentage value of the measure.
            </p>
          <p>
            Note that HealthVault does not know the full list of patients seen by the provider and does not apply any logic to determine whether patients had access to the data within the
            timeframe specified by the measure. To calculate the percentage for this measure, the application must take into account the total number of unique patients seen or
            discharged within the desired reporting period, and for each patient determine if the data was made available to them within the measure's specified timeframe.
            </p>
        </remarks>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            The HealthVault service returned an error.
            </exception>
        <exception cref="T:System.ArgumentNullException">
            If <paramref name="availableDateFilter" /> is <b>null</b>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetMeaningfulUseVDTReport">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.Health.MeaningfulUse.PatientActivity&gt; GetMeaningfulUseVDTReport (Microsoft.Health.DateRange reportingPeriodFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Health.MeaningfulUse.PatientActivity&gt; GetMeaningfulUseVDTReport(class Microsoft.Health.DateRange reportingPeriodFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ApplicationConnection.GetMeaningfulUseVDTReport(Microsoft.Health.DateRange)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMeaningfulUseVDTReport (reportingPeriodFilter As DateRange) As IEnumerable(Of PatientActivity)" />
      <MemberSignature Language="F#" Value="abstract member GetMeaningfulUseVDTReport : Microsoft.Health.DateRange -&gt; seq&lt;Microsoft.Health.MeaningfulUse.PatientActivity&gt;&#xA;override this.GetMeaningfulUseVDTReport : Microsoft.Health.DateRange -&gt; seq&lt;Microsoft.Health.MeaningfulUse.PatientActivity&gt;" Usage="applicationConnection.GetMeaningfulUseVDTReport reportingPeriodFilter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.Health.MeaningfulUse.PatientActivity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reportingPeriodFilter" Type="Microsoft.Health.DateRange" />
      </Parameters>
      <Docs>
        <param name="reportingPeriodFilter">
            The UTC reporting period to be used to retrieve the VDT Report.
            </param>
        <summary>
            Retrieves the Meaningful Use View, Download, and Transmit (VDT) Report for the application.
            </summary>
        <returns>
            An IEnumerable iterator of <see cref="T:Microsoft.Health.MeaningfulUse.PatientActivity" /> objects which contains the list of patients to which the
            data source sent a CCDA document where the event date (visit or discharge date) is within the specified reporting period,
            and additionally, the patient viewed, downloaded or transmitted to a 3rd party, health information in the record.
            </returns>
        <remarks>
          <p>
            The View, Download, and Transmit (VDT) Report gives applications information to determine if they meet the Meaningful Use Stage 2 measure
            for patients taking action on their health information. For ambulatory settings, the measure states
            "More than 5 percent of all unique patients seen by the EP during the EHR reporting period (or their authorized representatives)
            view, download or transmit to a third party their health information". For inpatient settings, the measure states
            "More than 5 percent of all patients who are discharged from the Inpatient or emergency department (POS 21 or 23) of an eligible hospital
            or CAH (or their authorized representative) view, download or transmit to a third party their information during the EHR reporting period."
            (For more regarding this measure see "View, download, and transmit to a 3rd party"
            in the <a href="http://www.healthit.gov/policy-researchers-implementers/meaningful-use-stage-2">Meaningful Use Stage 2 Reference Grid</a>.)
            </p>
          <p>
            HealthVault returns an entry in the report for each patient to which the data source has sent a CCDA document and
            where the patient has viewed, downloaded, or transmitted to a 3rd party health information from the health record.
            The entries in the report are filtered such that only those CCDAs having an event date (which is the visit date for ambulatory settings,
            and the discharge date for inpatient settings) within the specified reporting period filter, will lead to the receiving patient being included in the report.
            The application can use the patient identifiers in the report to help calculate the percentage value of the measure.
            </p>
          <p>
            Note that HealthVault does not know the full list of patients seen by the provider. To calculate the percentage for this measure,
            the application must take into account the total number of unique patients seen or discharged within the desired reporting period.
            </p>
        </remarks>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            The HealthVault service returned an error.
            </exception>
        <exception cref="T:System.ArgumentNullException">
            If <paramref name="reportingPeriodFilter" /> is <b>null</b>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetPersonInfo">
      <MemberSignature Language="C#" Value="public Microsoft.Health.PersonInfo GetPersonInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Health.PersonInfo GetPersonInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ApplicationConnection.GetPersonInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPersonInfo () As PersonInfo" />
      <MemberSignature Language="F#" Value="member this.GetPersonInfo : unit -&gt; Microsoft.Health.PersonInfo" Usage="applicationConnection.GetPersonInfo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.PersonInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets the information about the person specified.
            </summary>
        <returns>
            Information about the person's HealthVault account.
            </returns>
        <remarks>
            This method always calls the HealthVault service to get the latest 
            information. It is recommended that the calling application cache 
            the return value and only call this method again if it needs to 
            refresh the cache.
            </remarks>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            The HealthVault service returned an error.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetUpdatedRecordInfoForApplication">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;Microsoft.Health.HealthRecordUpdateInfo&gt; GetUpdatedRecordInfoForApplication (Nullable&lt;DateTime&gt; updatedDate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IList`1&lt;class Microsoft.Health.HealthRecordUpdateInfo&gt; GetUpdatedRecordInfoForApplication(valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; updatedDate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ApplicationConnection.GetUpdatedRecordInfoForApplication(System.Nullable{System.DateTime})" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUpdatedRecordInfoForApplication (updatedDate As Nullable(Of DateTime)) As IList(Of HealthRecordUpdateInfo)" />
      <MemberSignature Language="F#" Value="member this.GetUpdatedRecordInfoForApplication : Nullable&lt;DateTime&gt; -&gt; System.Collections.Generic.IList&lt;Microsoft.Health.HealthRecordUpdateInfo&gt;" Usage="applicationConnection.GetUpdatedRecordInfoForApplication updatedDate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Microsoft.Health.HealthRecordUpdateInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="updatedDate" Type="System.Nullable&lt;System.DateTime&gt;" />
      </Parameters>
      <Docs>
        <param name="updatedDate">
            Date that is used to filter health record IDs according to whether or not they have
            been updated since the specified date.
            </param>
        <summary>
            Gets a list of <see cref="T:Microsoft.Health.HealthRecordUpdateInfo" /> objects for the current application, 
            that optionally have been updated since a specified date.
            </summary>
        <returns>
            List of <see cref="T:Microsoft.Health.HealthRecordUpdateInfo" /> objects filtered by any specified input parameters.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUpdatedRecordsForApplication">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;Guid&gt; GetUpdatedRecordsForApplication (Nullable&lt;DateTime&gt; updatedDate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IList`1&lt;valuetype System.Guid&gt; GetUpdatedRecordsForApplication(valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; updatedDate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ApplicationConnection.GetUpdatedRecordsForApplication(System.Nullable{System.DateTime})" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUpdatedRecordsForApplication (updatedDate As Nullable(Of DateTime)) As IList(Of Guid)" />
      <MemberSignature Language="F#" Value="member this.GetUpdatedRecordsForApplication : Nullable&lt;DateTime&gt; -&gt; System.Collections.Generic.IList&lt;Guid&gt;" Usage="applicationConnection.GetUpdatedRecordsForApplication updatedDate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Guid&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="updatedDate" Type="System.Nullable&lt;System.DateTime&gt;" />
      </Parameters>
      <Docs>
        <param name="updatedDate">
            Date that is used to filter health record IDs according to whether or not they have
            been updated since the specified date.
            </param>
        <summary>
            Gets a list of health record IDs for the current application, 
            that optionally have been updated since a specified date.
            </summary>
        <returns>
            List of health record IDs filtered by any specified input parameters.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVocabulary">
      <MemberSignature Language="C#" Value="public Microsoft.Health.Vocabulary GetVocabulary (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Health.Vocabulary GetVocabulary(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ApplicationConnection.GetVocabulary(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetVocabulary (name As String) As Vocabulary" />
      <MemberSignature Language="F#" Value="member this.GetVocabulary : string -&gt; Microsoft.Health.Vocabulary" Usage="applicationConnection.GetVocabulary name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.Vocabulary</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
            The name of the vocabulary requested.
            </param>
        <summary>
            Retrieves a list of vocabulary items for the specified vocabulary.  
            </summary>
        <returns>
            The requested vocabulary and its items.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
            The <paramref name="name" /> parameter <b>null</b> or an empty 
            string.
            </exception>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            There is an error in the server request.
            <br></br>
            -Or- 
            <br></br>
            One of the requested vocabularies is not found on the server.
            <br></br>
            -Or- 
            <br></br>
            -Or- 
            <br></br>
            There is an error loading the vocabulary.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVocabulary">
      <MemberSignature Language="C#" Value="public Microsoft.Health.Vocabulary GetVocabulary (Microsoft.Health.VocabularyKey vocabularyKey, bool cultureIsFixed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Health.Vocabulary GetVocabulary(class Microsoft.Health.VocabularyKey vocabularyKey, bool cultureIsFixed) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ApplicationConnection.GetVocabulary(Microsoft.Health.VocabularyKey,System.Boolean)" />
      <MemberSignature Language="F#" Value="member this.GetVocabulary : Microsoft.Health.VocabularyKey * bool -&gt; Microsoft.Health.Vocabulary" Usage="applicationConnection.GetVocabulary (vocabularyKey, cultureIsFixed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.Vocabulary</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vocabularyKey" Type="Microsoft.Health.VocabularyKey" />
        <Parameter Name="cultureIsFixed" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="vocabularyKey">
            A key identifying the vocabulary requested.
            </param>
        <param name="cultureIsFixed">
            HealthVault looks for the vocabulary items for the culture info
            specified using <see cref="P:Microsoft.Health.HealthServiceConnection.Culture" />.
            If <paramref name="cultureIsFixed" /> is set to <b>false</b> and if 
            items are not found for the specified culture, items for the 
            default fallback culture are returned. If 
            <paramref name="cultureIsFixed" /> is set to <b>true</b>, 
            fallback will not occur, and if items are not found for the 
            specified culture, empty strings are returned.
            </param>
        <summary>
            Retrieves a list of vocabulary items for the specified vocabulary
            and culture.
            </summary>
        <returns>
            The specified vocabulary and its items, or empty strings.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            The <paramref name="vocabularyKey" /> is <b>null</b>.
            </exception>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            There is an error in the server request.
            <br></br>
            -Or- 
            <br></br>
            The requested vocabulary is not found on the server.
            <br></br>
            -Or- 
            <br></br>
            The requested vocabulary does not contain representations 
            for its items for the specified culture when 
            <paramref name="cultureIsFixed" /> is <b>true</b>.
            <br></br>
            -Or- 
            <br></br>
            There is an error loading the vocabulary.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVocabulary">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;Microsoft.Health.Vocabulary&gt; GetVocabulary (System.Collections.Generic.IList&lt;Microsoft.Health.VocabularyKey&gt; vocabularyKeys, bool cultureIsFixed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class Microsoft.Health.Vocabulary&gt; GetVocabulary(class System.Collections.Generic.IList`1&lt;class Microsoft.Health.VocabularyKey&gt; vocabularyKeys, bool cultureIsFixed) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ApplicationConnection.GetVocabulary(System.Collections.Generic.IList{Microsoft.Health.VocabularyKey},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetVocabulary (vocabularyKeys As IList(Of VocabularyKey), cultureIsFixed As Boolean) As ReadOnlyCollection(Of Vocabulary)" />
      <MemberSignature Language="F#" Value="member this.GetVocabulary : System.Collections.Generic.IList&lt;Microsoft.Health.VocabularyKey&gt; * bool -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;Microsoft.Health.Vocabulary&gt;" Usage="applicationConnection.GetVocabulary (vocabularyKeys, cultureIsFixed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;Microsoft.Health.Vocabulary&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vocabularyKeys" Type="System.Collections.Generic.IList&lt;Microsoft.Health.VocabularyKey&gt;" />
        <Parameter Name="cultureIsFixed" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="vocabularyKeys">
            A list of keys identifying the requested vocabularies.
            </param>
        <param name="cultureIsFixed">
            HealthVault looks for the vocabulary items for the culture info
            specified using <see cref="P:Microsoft.Health.HealthServiceConnection.Culture" />.
            If <paramref name="cultureIsFixed" /> is set to <b>false</b> and if 
            items are not found for the specified culture, items for the 
            default fallback culture are returned. If 
            <paramref name="cultureIsFixed" /> is set to <b>true</b>, 
            fallback will not occur, and if items are not found for the 
            specified culture, empty strings are returned.
            </param>
        <summary>
            Retrieves lists of vocabulary items for the specified 
            vocabularies and culture.
            </summary>
        <returns>
            The specified vocabularies and their items, or empty strings.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
            The <paramref name="vocabularyKeys" /> list is empty.
            </exception>
        <exception cref="T:System.ArgumentNullException">
            The <paramref name="vocabularyKeys" /> list is <b>null</b> 
            or contains a <b>null</b> entry.
            </exception>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            There is an error in the server request.
            <br></br>
            -Or- 
            <br></br>
            One of the requested vocabularies is not found on the server.
            <br></br>
            -Or- 
            <br></br>
            One of the requested vocabularies does not contain representations 
            for its items for the specified culture when 
            <paramref name="cultureIsFixed" /> is <b>true</b>.
            <br></br>
            -Or- 
            <br></br>
            There is an error loading the vocabulary.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVocabularyKeys">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;Microsoft.Health.VocabularyKey&gt; GetVocabularyKeys ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class Microsoft.Health.VocabularyKey&gt; GetVocabularyKeys() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ApplicationConnection.GetVocabularyKeys" />
      <MemberSignature Language="VB.NET" Value="Public Function GetVocabularyKeys () As ReadOnlyCollection(Of VocabularyKey)" />
      <MemberSignature Language="F#" Value="member this.GetVocabularyKeys : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;Microsoft.Health.VocabularyKey&gt;" Usage="applicationConnection.GetVocabularyKeys " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;Microsoft.Health.VocabularyKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Retrieves a collection of key information for identifying and 
            describing the vocabularies in the system.
            </summary>
        <returns>
            A collection of keys identifying the vocabularies in the system.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewSignupCode">
      <MemberSignature Language="C#" Value="public string NewSignupCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string NewSignupCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ApplicationConnection.NewSignupCode" />
      <MemberSignature Language="VB.NET" Value="Public Function NewSignupCode () As String" />
      <MemberSignature Language="F#" Value="member this.NewSignupCode : unit -&gt; string" Usage="applicationConnection.NewSignupCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Generates a new signup code that should be passed to HealthVault Shell in order
            to create a new user account.
            </summary>
        <returns>
            A signup code that can be used to create an account.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SearchVocabulary">
      <MemberSignature Language="C#" Value="public Microsoft.Health.VocabularyItemCollection SearchVocabulary (Microsoft.Health.VocabularyKey vocabularyKey, string searchString, Microsoft.Health.VocabularySearchType searchType, Nullable&lt;int&gt; maxResults);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Health.VocabularyItemCollection SearchVocabulary(class Microsoft.Health.VocabularyKey vocabularyKey, string searchString, valuetype Microsoft.Health.VocabularySearchType searchType, valuetype System.Nullable`1&lt;int32&gt; maxResults) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ApplicationConnection.SearchVocabulary(Microsoft.Health.VocabularyKey,System.String,Microsoft.Health.VocabularySearchType,System.Nullable{System.Int32})" />
      <MemberSignature Language="F#" Value="member this.SearchVocabulary : Microsoft.Health.VocabularyKey * string * Microsoft.Health.VocabularySearchType * Nullable&lt;int&gt; -&gt; Microsoft.Health.VocabularyItemCollection" Usage="applicationConnection.SearchVocabulary (vocabularyKey, searchString, searchType, maxResults)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.VocabularyItemCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vocabularyKey" Type="Microsoft.Health.VocabularyKey" />
        <Parameter Name="searchString" Type="System.String" />
        <Parameter Name="searchType" Type="Microsoft.Health.VocabularySearchType" />
        <Parameter Name="maxResults" Type="System.Nullable&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="vocabularyKey">
            The <see cref="T:Microsoft.Health.VocabularyKey" /> defining the vocabulary to search. If the 
            family is not specified, the default HealthVault vocabulary family is used. 
            If the version is not specified, the most current version of the vocabulary 
            is used.
            </param>
        <param name="searchString">
            The search string to use.
            </param>
        <param name="searchType">
            The type of search to perform.
            </param>
        <param name="maxResults">
            The maximum number of results to return. If null, all matching results 
            are returned, up to a maximum number defined by the service config 
            value with key maxResultsPerVocabularyRetrieval.
            </param>
        <summary>
            Searches a specific vocabulary and retrieves the matching vocabulary items.
            </summary>
        <returns>
            A <see cref="T:Microsoft.Health.VocabularyItemCollection" /> populated with entries matching 
            the search criteria.
            </returns>
        <remarks>
            This method does text search matching of display text and abbreviation text
            for the culture defined by the <see cref="P:Microsoft.Health.HealthServiceConnection.Culture" />. 
            The <paramref name="searchString" /> is a string of characters in the specified 
            culture. 
            </remarks>
        <exception cref="T:System.ArgumentException">
            If <paramref name="vocabularyKey" /> is <b>null</b>.
            <br></br>
            -Or-
            <br></br>
            If <paramref name="searchString" /> is <b>null</b> or empty or greater 
            than <b>255</b> characters.
            <br></br>
            -Or-
            <br></br>
            if <paramref name="searchType" /> is not a known 
            <see cref="T:Microsoft.Health.VocabularySearchType" /> value.        
            <br></br>
            -Or-
            <br></br>
            when <paramref name="maxResults" /> is defined but has a value less than 1.        
            </exception>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            There is an error in the server request.         
            <br></br>
            -Or-        
            <br></br>
            The requested vocabulary is not found on the server.
            <br></br>
            -Or- 
            The requested search culture is not supported. 
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SearchVocabularyKeys">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;Microsoft.Health.VocabularyKey&gt; SearchVocabularyKeys (string searchString, Microsoft.Health.VocabularySearchType searchType, Nullable&lt;int&gt; maxResults);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class Microsoft.Health.VocabularyKey&gt; SearchVocabularyKeys(string searchString, valuetype Microsoft.Health.VocabularySearchType searchType, valuetype System.Nullable`1&lt;int32&gt; maxResults) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ApplicationConnection.SearchVocabularyKeys(System.String,Microsoft.Health.VocabularySearchType,System.Nullable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Function SearchVocabularyKeys (searchString As String, searchType As VocabularySearchType, maxResults As Nullable(Of Integer)) As ReadOnlyCollection(Of VocabularyKey)" />
      <MemberSignature Language="F#" Value="member this.SearchVocabularyKeys : string * Microsoft.Health.VocabularySearchType * Nullable&lt;int&gt; -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;Microsoft.Health.VocabularyKey&gt;" Usage="applicationConnection.SearchVocabularyKeys (searchString, searchType, maxResults)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;Microsoft.Health.VocabularyKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchString" Type="System.String" />
        <Parameter Name="searchType" Type="Microsoft.Health.VocabularySearchType" />
        <Parameter Name="maxResults" Type="System.Nullable&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="searchString">
             The search string to use.
             </param>
        <param name="searchType">
             The type of search to perform.
             </param>
        <param name="maxResults">
             The maximum number of results to return. If null, all matching results 
             are returned, up to a maximum number defined by the service config 
             value with key maxResultsPerVocabularyRetrieval.
             </param>
        <summary>
             Searches the keys of vocabularies defined by the HealthVault service.
             </summary>
        <returns>
             A <b>ReadOnlyCollection</b> of <see cref="T:Microsoft.Health.VocabularyKey" /> with entries
             matching the search criteria.
             </returns>
        <remarks>
             This method does a text search of vocabulary names and descriptions.
             </remarks>
        <exception cref="T:System.ArgumentException">
             If <paramref name="searchString" /> is <b>null</b> or empty or greater 
             than <b>255</b> characters.
             <br></br>
             -Or-
             <br></br>
             if <paramref name="searchType" /> is not a known 
             <see cref="T:Microsoft.Health.VocabularySearchType" /> value.        
             <br></br>
             -Or-
             <br></br>
             when <paramref name="maxResults" /> is defined but has a value less than 1.        
             </exception>
        <exception cref="T:Microsoft.Health.HealthServiceException">
             There is an error in the server request.        
             </exception>
      </Docs>
    </Member>
    <Member MemberName="SelectInstance">
      <MemberSignature Language="C#" Value="public Microsoft.Health.HealthServiceInstance SelectInstance (Microsoft.Health.Location preferredLocation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Health.HealthServiceInstance SelectInstance(class Microsoft.Health.Location preferredLocation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ApplicationConnection.SelectInstance(Microsoft.Health.Location)" />
      <MemberSignature Language="VB.NET" Value="Public Function SelectInstance (preferredLocation As Location) As HealthServiceInstance" />
      <MemberSignature Language="F#" Value="member this.SelectInstance : Microsoft.Health.Location -&gt; Microsoft.Health.HealthServiceInstance" Usage="applicationConnection.SelectInstance preferredLocation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.HealthServiceInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="preferredLocation" Type="Microsoft.Health.Location" />
      </Parameters>
      <Docs>
        <param name="preferredLocation">
            A user's preferred geographical location, used to select the best instance
            in which to create a new HealthVault account. If there is a location associated
            with the credential that will be used to log into the account, that location
            should be used.
            </param>
        <summary>
            Gets the instance where a HealthVault account should be created
            for the specified account location.
            </summary>
        <returns>
            A <see cref="T:Microsoft.Health.HealthServiceInstance" /> object represents the selected instance,
            or null if no suitable instance exists.
            </returns>
        <remarks>
            If no suitable instance can be found, a null value is returned. This can happen,
            for example, if the account location is not supported by HealthVault.
            
            Currently the returned instance IDs all parse to integers, but that is not
            guaranteed and should not be relied upon.
            </remarks>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            The HealthVault service returned an error.
            </exception>
        <exception cref="T:System.ArgumentException">
            If <paramref name="preferredLocation" /> is <b>null</b>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SendInsecureMessageFromApplication">
      <MemberSignature Language="C#" Value="public void SendInsecureMessageFromApplication (System.Collections.Generic.IList&lt;Microsoft.Health.MailRecipient&gt; mailRecipient, string senderMailboxName, string senderDisplayName, string subject, string textBody, string htmlBody);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendInsecureMessageFromApplication(class System.Collections.Generic.IList`1&lt;class Microsoft.Health.MailRecipient&gt; mailRecipient, string senderMailboxName, string senderDisplayName, string subject, string textBody, string htmlBody) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ApplicationConnection.SendInsecureMessageFromApplication(System.Collections.Generic.IList{Microsoft.Health.MailRecipient},System.String,System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendInsecureMessageFromApplication (mailRecipient As IList(Of MailRecipient), senderMailboxName As String, senderDisplayName As String, subject As String, textBody As String, htmlBody As String)" />
      <MemberSignature Language="F#" Value="member this.SendInsecureMessageFromApplication : System.Collections.Generic.IList&lt;Microsoft.Health.MailRecipient&gt; * string * string * string * string * string -&gt; unit" Usage="applicationConnection.SendInsecureMessageFromApplication (mailRecipient, senderMailboxName, senderDisplayName, subject, textBody, htmlBody)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mailRecipient" Type="System.Collections.Generic.IList&lt;Microsoft.Health.MailRecipient&gt;" />
        <Parameter Name="senderMailboxName" Type="System.String" />
        <Parameter Name="senderDisplayName" Type="System.String" />
        <Parameter Name="subject" Type="System.String" />
        <Parameter Name="textBody" Type="System.String" />
        <Parameter Name="htmlBody" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="mailRecipient">
            The addresses and display names of the people to send the 
            message to.
            </param>
        <param name="senderMailboxName">
            An application specified mailbox name that's sending the message.
            The mailbox name is appended to the application's domain name to 
            form the From email address of the message. This parameter should
            only contain the characters before the @ symbol of the email 
            address.
            </param>
        <param name="senderDisplayName">
            The message sender's display name.
            </param>
        <param name="subject">
            The subject of the message.
            </param>
        <param name="textBody">
            The text body of the message.
            </param>
        <param name="htmlBody">
            The HTML body of the message.
            </param>
        <summary>
            Sends an insecure message originating from the application to 
            the specified message recipients. 
            </summary>
        <remarks>
            If both the <paramref name="textBody" /> and 
            <paramref name="htmlBody" /> of the message is specified then a
            multi-part message will be sent so that the html body will be used
            and fallback to text if not supported by the client.
            
            If the domain name of the application has not been previously 
            set (usually through app registration), this method will throw 
            a <see cref="T:Microsoft.Health.HealthServiceException" />.        
            </remarks>
        <exception cref="T:System.ArgumentException">
            If <paramref name="mailRecipient" /> is null or empty,
            -or-
            if <paramref name="senderMailboxName" /> is null or empty,
            -or-
            if <paramref name="senderDisplayName" /> is null or empty,
            -or-
            if <paramref name="subject" /> is null or empty,
            -or-
            if <paramref name="textBody" /> and <paramref name="htmlBody" />
            are both null or empty.
            </exception>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            If the server returned a failure when making the request.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SendInsecureMessageFromApplication">
      <MemberSignature Language="C#" Value="public void SendInsecureMessageFromApplication (System.Collections.Generic.IList&lt;Guid&gt; recipientPersonIds, bool addressMustBeValidated, string senderMailboxName, string senderDisplayName, string subject, string textBody, string htmlBody);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendInsecureMessageFromApplication(class System.Collections.Generic.IList`1&lt;valuetype System.Guid&gt; recipientPersonIds, bool addressMustBeValidated, string senderMailboxName, string senderDisplayName, string subject, string textBody, string htmlBody) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ApplicationConnection.SendInsecureMessageFromApplication(System.Collections.Generic.IList{System.Guid},System.Boolean,System.String,System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendInsecureMessageFromApplication (recipientPersonIds As IList(Of Guid), addressMustBeValidated As Boolean, senderMailboxName As String, senderDisplayName As String, subject As String, textBody As String, htmlBody As String)" />
      <MemberSignature Language="F#" Value="member this.SendInsecureMessageFromApplication : System.Collections.Generic.IList&lt;Guid&gt; * bool * string * string * string * string * string -&gt; unit" Usage="applicationConnection.SendInsecureMessageFromApplication (recipientPersonIds, addressMustBeValidated, senderMailboxName, senderDisplayName, subject, textBody, htmlBody)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recipientPersonIds" Type="System.Collections.Generic.IList&lt;System.Guid&gt;" />
        <Parameter Name="addressMustBeValidated" Type="System.Boolean" />
        <Parameter Name="senderMailboxName" Type="System.String" />
        <Parameter Name="senderDisplayName" Type="System.String" />
        <Parameter Name="subject" Type="System.String" />
        <Parameter Name="textBody" Type="System.String" />
        <Parameter Name="htmlBody" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="recipientPersonIds">
            The unique identifiers of the people to which the message should be
            sent.
            </param>
        <param name="addressMustBeValidated">
            If true, HealthVault will ensure that the person has validated 
            their message address before sending the mail. If false, the 
            message will be sent even if the person's address has not been 
            validated.
            </param>
        <param name="senderMailboxName">
            An application specified mailbox name that's sending the message.
            The mailbox name is appended to the application's domain name to 
            form the From email address of the message. This parameter should
            only contain the characters before the @ symbol of the email 
            address.
            </param>
        <param name="senderDisplayName">
            The message sender's display name.
            </param>
        <param name="subject">
            The subject of the message.
            </param>
        <param name="textBody">
            The text body of the message.
            </param>
        <param name="htmlBody">
            The HTML body of the message.
            </param>
        <summary>
            Sends an insecure message originating from the application
            to the specified message recipients.
            </summary>
        <remarks>
            If both the <paramref name="textBody" /> and 
            <paramref name="htmlBody" /> of the message is specified then a
            multi-part message will be sent so that the html body will be used
            and fallback to text if not supported by the client.
            
            If the domain name of the application has not been previously 
            set (usually through app registration), this method will throw
            a <see cref="T:Microsoft.Health.HealthServiceException" />.        
            </remarks>
        <exception cref="T:System.ArgumentException">
            If <paramref name="recipientPersonIds" /> is null or empty,
            -or-
            if <paramref name="senderMailboxName" /> is null or empty,
            -or-
            if <paramref name="senderDisplayName" /> is null or empty,
            -or-
            if <paramref name="subject" /> is null or empty,
            -or-
            if <paramref name="textBody" /> and <paramref name="htmlBody" />
            are both null or empty.
            </exception>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            If the server returned a failure when making the request.        
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SendInsecureMessageToCustodiansFromApplication">
      <MemberSignature Language="C#" Value="public void SendInsecureMessageToCustodiansFromApplication (Guid recordId, bool addressMustBeValidated, string senderMailboxName, string senderDisplayName, string subject, string textBody, string htmlBody);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendInsecureMessageToCustodiansFromApplication(valuetype System.Guid recordId, bool addressMustBeValidated, string senderMailboxName, string senderDisplayName, string subject, string textBody, string htmlBody) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.ApplicationConnection.SendInsecureMessageToCustodiansFromApplication(System.Guid,System.Boolean,System.String,System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendInsecureMessageToCustodiansFromApplication (recordId As Guid, addressMustBeValidated As Boolean, senderMailboxName As String, senderDisplayName As String, subject As String, textBody As String, htmlBody As String)" />
      <MemberSignature Language="F#" Value="member this.SendInsecureMessageToCustodiansFromApplication : Guid * bool * string * string * string * string * string -&gt; unit" Usage="applicationConnection.SendInsecureMessageToCustodiansFromApplication (recordId, addressMustBeValidated, senderMailboxName, senderDisplayName, subject, textBody, htmlBody)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recordId" Type="System.Guid" />
        <Parameter Name="addressMustBeValidated" Type="System.Boolean" />
        <Parameter Name="senderMailboxName" Type="System.String" />
        <Parameter Name="senderDisplayName" Type="System.String" />
        <Parameter Name="subject" Type="System.String" />
        <Parameter Name="textBody" Type="System.String" />
        <Parameter Name="htmlBody" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="recordId">
            The unique identifier of the health record for which the 
            custodians should be sent the message.
            </param>
        <param name="addressMustBeValidated">
            If true, HealthVault will only send the message to custodians with 
            validated e-mail addresses. If false, the message will
            be sent even if the custodians' addresses have not been validated.
            </param>
        <param name="senderMailboxName">
            An application specified mailbox name that's sending the message.
            The mailbox name is appended to the application's domain name to 
            form the From email address of the message. This parameter should
            only contain the characters before the @ symbol of the email 
            address.
            </param>
        <param name="senderDisplayName">
            The message sender's display name.
            </param>
        <param name="subject">
            The subject of the message.
            </param>
        <param name="textBody">
            The text body of the message.
            </param>
        <param name="htmlBody">
            The HTML body of the message.
            </param>
        <summary>
            Sends an insecure message originating from the application 
            to custodians of the specified health record.
            </summary>
        <remarks>
            If both the <paramref name="textBody" /> and 
            <paramref name="htmlBody" /> of the message is specified then a
            multi-part message will be sent so that the html body will be used
            and fallback to text if not supported by the client.
            
            If the domain name of the application has not been previously 
            set (usually through app registration), this method will throw 
            a <see cref="T:Microsoft.Health.HealthServiceException" />.
                    
            The calling application and the person through which authorization to the 
            specified record was obtained must be authorized for the record. 
            The person must be either authenticated, or if the person is offline,
            their person Id specified as the offline person Id.
            See <see cref="T:Microsoft.Health.Web.OfflineWebApplicationConnection" /> 
            for more information.
            </remarks>
        <exception cref="T:System.ArgumentException"> 
            If <paramref name="recordId" /> is <see cref="F:System.Guid.Empty" />
            -or-
            if <paramref name="senderMailboxName" /> is null or empty,
            -or-
            if <paramref name="senderDisplayName" /> is null or empty,
            -or-
            if <paramref name="subject" /> is null or empty,
            -or-
            if <paramref name="textBody" /> and <paramref name="htmlBody" />
            are both null or empty.
            </exception>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            If the server returned a failure when making the request.
            </exception>
      </Docs>
    </Member>
  </Members>
</Type>