<Type Name="HealthClientApplication" FullName="Microsoft.Health.HealthClientApplication">
  <TypeSignature Language="C#" Value="public class HealthClientApplication : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HealthClientApplication extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Health.HealthClientApplication" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Health</AssemblyName>
    <AssemblyVersion>2.64.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Represents a HealthVault client application.
            </summary>
    <remarks>
            Use this class for creating a Windows client application
            for connecting to HealthVault. 
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="ApplicationConnection">
      <MemberSignature Language="C#" Value="public Microsoft.Health.ApplicationConnection ApplicationConnection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Health.ApplicationConnection ApplicationConnection" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.HealthClientApplication.ApplicationConnection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.ApplicationConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets an <see cref="P:Microsoft.Health.HealthClientApplication.ApplicationConnection" /> that represents the connection to HealthVault.
            </summary>
        <value>To be added.</value>
        <remarks>
            This method could cause a request to the network to retrieve the 
            cryptographic object identifier of the certificate used by the 
            application. For example in case the hosting machine is joined to 
            a domain, resolving or retrieving the cryptographic object 
            identifier could result in an LDAP query.
            </remarks>
        <exception cref="T:Microsoft.Health.InvalidConfigurationException">
            The application Id or the certificate, or the healthServiceUrl
            are incorrect.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="ApplicationId">
      <MemberSignature Language="C#" Value="public Guid ApplicationId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid ApplicationId" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.HealthClientApplication.ApplicationId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the ID of the local client application.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Microsoft.Health.HealthClientApplication Create (Guid applicationId, Guid masterApplicationId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Health.HealthClientApplication Create(valuetype System.Guid applicationId, valuetype System.Guid masterApplicationId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.HealthClientApplication.Create(System.Guid,System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.HealthClientApplication</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationId" Type="System.Guid" />
        <Parameter Name="masterApplicationId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="applicationId">
            Unique identifier of the new local client application.
            </param>
        <param name="masterApplicationId">
            Unique identifier of an existing HealthVault master application.
            The client application will be created as a child application using
            the specified application as a parent.
            </param>
        <summary>
            Create the application using values stored in the app.config file.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            App.config entries are as follows:
            ShellUrl - The url of the HealthVault shell
            HealthServiceUrl - the url of the HealthVault platform
            </remarks>
        <remarks>
            This method will lookup the certificate in the
            user certificate store by applicationId. If the
            certificate does not exist, then a new certificate will
            be created.
            </remarks>
        <exception cref="T:Microsoft.Health.InvalidConfigurationException">
            The configuration file does not 
            contain an entry for either ShellUrl or HealthServiceUrl.
            </exception>
        <exception cref="T:System.ArgumentException">
            Either the <paramref name="applicationId " /> or
            <paramref name="masterApplicationId" /> parameter is <see cref="F:System.Guid.Empty" />. 
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Microsoft.Health.HealthClientApplication Create (Guid applicationId, Guid masterApplicationId, Microsoft.Health.HealthServiceInstance serviceInstance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Health.HealthClientApplication Create(valuetype System.Guid applicationId, valuetype System.Guid masterApplicationId, class Microsoft.Health.HealthServiceInstance serviceInstance) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.HealthClientApplication.Create(System.Guid,System.Guid,Microsoft.Health.HealthServiceInstance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.HealthClientApplication</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationId" Type="System.Guid" />
        <Parameter Name="masterApplicationId" Type="System.Guid" />
        <Parameter Name="serviceInstance" Type="Microsoft.Health.HealthServiceInstance" />
      </Parameters>
      <Docs>
        <param name="applicationId">
            Unique identifier of the new local client application.
            </param>
        <param name="masterApplicationId">
            Unique identifier of an existing HealthVault master application.
            The client application will be created as a child application using
            the specified application as a parent.
            </param>
        <param name="serviceInstance">
            The HealthVault web-service instance.
            </param>
        <summary>
            Create an application based on the passed-in values.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            This method looks up the certificate in the
            user certificate store using applicationId. If the
            certificate does not exist, then it will create
            a new certificate.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceInstance" /> is <b>null</b>.
            </exception>
        <exception cref="T:System.ArgumentException">
          <see cref="P:Microsoft.Health.HealthServiceInstance.HealthServiceUrl" /> or
            <see cref="P:Microsoft.Health.HealthServiceInstance.ShellUrl" /> for the specified
            <paramref name="serviceInstance" /> is null;
            or the value of <paramref name="applicationId" /> or 
            <paramref name="masterApplicationId" /> is <see cref="F:System.Guid.Empty" />.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Microsoft.Health.HealthClientApplication Create (Guid applicationId, Guid masterApplicationId, Uri shellUrl, Uri healthServiceUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Health.HealthClientApplication Create(valuetype System.Guid applicationId, valuetype System.Guid masterApplicationId, class System.Uri shellUrl, class System.Uri healthServiceUrl) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.HealthClientApplication.Create(System.Guid,System.Guid,System.Uri,System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.HealthClientApplication</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationId" Type="System.Guid" />
        <Parameter Name="masterApplicationId" Type="System.Guid" />
        <Parameter Name="shellUrl" Type="System.Uri" />
        <Parameter Name="healthServiceUrl" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="applicationId">
            Unique identifier of the new local client application.
            </param>
        <param name="masterApplicationId">
            Unique identifier of an existing HealthVault master application.
            The client application will be created as a child application using
            the specified application as a parent.
            </param>
        <param name="shellUrl">
            The URL of the HealthVault shell service.
            </param>
        <param name="healthServiceUrl">
            The URL of the HealthVault platform service.
            </param>
        <summary>
            Create an application based on the passed-in values.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            This method looks up the certificate in the
            user certificate store using applicationId. If the
            certificate does not exist, then it will create
            a new certificate.
            </remarks>
        <exception cref="T:System.ArgumentException">
            The value of <paramref name="shellUrl" /> or 
            <paramref name="healthServiceUrl" /> is 
            <b>null</b>, or the value of <paramref name="applicationId" /> or 
            <paramref name="masterApplicationId" /> is <see cref="F:System.Guid.Empty" />.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateAuthorizedConnection">
      <MemberSignature Language="C#" Value="public Microsoft.Health.HealthClientAuthorizedConnection CreateAuthorizedConnection (Guid personId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Health.HealthClientAuthorizedConnection CreateAuthorizedConnection(valuetype System.Guid personId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.HealthClientApplication.CreateAuthorizedConnection(System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.HealthClientAuthorizedConnection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="personId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="personId">
            ID of the person for the connection.
            </param>
        <summary>
            Creates an authorized client connection to the application.
            </summary>
        <returns>
            A <see cref="T:Microsoft.Health.HealthClientAuthorizedConnection" /> instance.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
            The <paramref name="personId" /> parameter is empty.
            </exception>
        <exception cref="T:Microsoft.Health.InvalidConfigurationException">
            The required application-specific certificate is not found,
            the value of <see cref="P:Microsoft.Health.HealthClientApplication.HealthServiceUrl" /> is 
            <b>null</b>, or the value of <see cref="P:Microsoft.Health.HealthClientApplication.ApplicationId" />
            is <see cref="F:System.Guid.Empty" />.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteCertificate">
      <MemberSignature Language="C#" Value="public void DeleteCertificate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteCertificate() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.HealthClientApplication.DeleteCertificate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Deletes the certificate created as part of application creation
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Health.InvalidConfigurationException">
            The required application-specific certificate is not found,
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.HealthClientApplication.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Disposes the request.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.HealthClientApplication.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
        </param>
        <summary>
            Cleans up the cancel request trigger.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetApplicationCreationUrl">
      <MemberSignature Language="C#" Value="public Uri GetApplicationCreationUrl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Uri GetApplicationCreationUrl() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.HealthClientApplication.GetApplicationCreationUrl" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets the URL of a web page that will direct the user to create the application.
            </summary>
        <returns>
            The URL of the application creation web page.
            </returns>
        <remarks>
            Open this URL in a browser window to allow the user to create the application.
            By default, the client name will be set to the local machine name. 
            </remarks>
        <exception cref="T:Microsoft.Health.InvalidConfigurationException">
            The value of <see cref="P:Microsoft.Health.HealthClientApplication.ShellUrl" /> or 
            <see cref="P:Microsoft.Health.HealthClientApplication.HealthServiceUrl" /> is 
            <b>null</b>, or the value of <see cref="P:Microsoft.Health.HealthClientApplication.ApplicationId" /> or 
            <see cref="P:Microsoft.Health.HealthClientApplication.MasterApplicationId" /> is <see cref="F:System.Guid.Empty" /> or
            the required application-specific certificate is not found.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetApplicationCreationUrl">
      <MemberSignature Language="C#" Value="public Uri GetApplicationCreationUrl (string clientName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Uri GetApplicationCreationUrl(string clientName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.HealthClientApplication.GetApplicationCreationUrl(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clientName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="clientName">The client name to use.</param>
        <summary>
            Gets the URL of a web page that will direct the user to create the application.
            </summary>
        <returns>
            The URL of the application creation web page.
            </returns>
        <remarks>
            Open this URL in a browser window to allow the user to create the application.
            </remarks>
        <exception cref="T:Microsoft.Health.InvalidConfigurationException">
            The value of <see cref="P:Microsoft.Health.HealthClientApplication.ShellUrl" /> or 
            <see cref="P:Microsoft.Health.HealthClientApplication.HealthServiceUrl" /> is 
            <b>null</b>, or the value of <see cref="P:Microsoft.Health.HealthClientApplication.ApplicationId" /> or 
            <see cref="P:Microsoft.Health.HealthClientApplication.MasterApplicationId" /> is <see cref="F:System.Guid.Empty" /> or
            the required application-specific certificate is not found.
            </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="clientName" /> is empty or <b>null</b>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetApplicationCreationUrl">
      <MemberSignature Language="C#" Value="public Uri GetApplicationCreationUrl (string clientName, string optionalQueryParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Uri GetApplicationCreationUrl(string clientName, string optionalQueryParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.HealthClientApplication.GetApplicationCreationUrl(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clientName" Type="System.String" />
        <Parameter Name="optionalQueryParameters" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="clientName">The client name to use.</param>
        <param name="optionalQueryParameters">
            Optional parameters to be added to the creation URL:
            
            <ul><li>ismra - the application can use multiple records for the same user at one time.</li><li>extrecordid - record identifier.</li><li>forceappauth - force redirect to APPAUTH target once user is authenticated.</li><li>onopt# - A sequence of online optional authorization rule names
                            identifying which rules to present.  The sequence begins with 1.</li><li>offopt# - A sequence of offline optional authorization rule names  
                            identifying which rules to present.  The sequence begins with 1.</li></ul></param>
        <summary>
            Gets the URL of a web page that will direct the user to create the application.
            </summary>
        <returns>
            The URL of the application creation web page.
            </returns>
        <remarks>
            Open this URL in a browser window to allow the user to create the application.
            </remarks>
        <exception cref="T:Microsoft.Health.InvalidConfigurationException">
            The value of <see cref="P:Microsoft.Health.HealthClientApplication.ShellUrl" /> or 
            <see cref="P:Microsoft.Health.HealthClientApplication.HealthServiceUrl" /> is 
            <b>null</b>, or the value of <see cref="P:Microsoft.Health.HealthClientApplication.ApplicationId" /> or 
            <see cref="P:Microsoft.Health.HealthClientApplication.MasterApplicationId" /> is <see cref="F:System.Guid.Empty" /> or
            the required application-specific certificate is not found.
            </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="clientName" /> is empty or <b>null</b>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetApplicationInfo">
      <MemberSignature Language="C#" Value="public Microsoft.Health.ApplicationInfo GetApplicationInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Health.ApplicationInfo GetApplicationInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.HealthClientApplication.GetApplicationInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.ApplicationInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets an <see cref="T:Microsoft.Health.ApplicationInfo" /> from the HealthVault server that
            describes the client application.
            </summary>
        <returns>
            An <see cref="T:Microsoft.Health.ApplicationInfo" /> that describes the application,
            or <b>null</b> if the application does not exist on the server.
            </returns>
        <remarks>
          <para>This method makes a call to HealthVault to get the ApplicationInfo.
            If the application exists, then the ApplicationInfo is created and returned.</para>
          <para>If application does not exist, the method returns <b>null</b>.
            To create the application on the server, 
            call <see cref="M:Microsoft.Health.HealthClientApplication.StartApplicationCreationProcess" />.</para>
        </remarks>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            The HealthVault service returned an error. This exception does not indicate
            that the application does not exist on the server: the method returns <b>null</b>
            in that case and no exception is thrown.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetUserAuthorizationUrl">
      <MemberSignature Language="C#" Value="public Uri GetUserAuthorizationUrl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Uri GetUserAuthorizationUrl() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.HealthClientApplication.GetUserAuthorizationUrl" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets the URL of a web page that will direct the user to authorize the application.
            </summary>
        <returns>
            The URL of the application authorization web page.
            </returns>
        <remarks>
            Open this URL in a browser window to allow the user to authorize the application.
            </remarks>
        <exception cref="T:Microsoft.Health.InvalidConfigurationException">
            The value of <see cref="P:Microsoft.Health.HealthClientApplication.ShellUrl" /> is <b>null</b>, 
            or the value of <see cref="P:Microsoft.Health.HealthClientApplication.ApplicationId" /> is 
            <see cref="F:System.Guid.Empty" />.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetUserAuthorizationUrl">
      <MemberSignature Language="C#" Value="public Uri GetUserAuthorizationUrl (string optionalQueryParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Uri GetUserAuthorizationUrl(string optionalQueryParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.HealthClientApplication.GetUserAuthorizationUrl(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="optionalQueryParameters" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="optionalQueryParameters">
            Optional parameters to be added to the authorization URL:
            
            <ul><li>ismra - the application can use multiple records for the same user at one time.</li><li>extrecordid - record identifier.</li><li>forceappauth - force redirect to APPAUTH target once user is authenticated.</li><li>onopt# - A sequence of online optional authorization rule names
                            identifying which rules to present.  The sequence begins with 1.</li><li>offopt# - A sequence of offline optional authorization rule names  
                            identifying which rules to present.  The sequence begins with 1.</li></ul></param>
        <summary>
            Gets the URL of a web page that will direct the user to authorize the application, 
            including optional APPAUTH parameters.
            </summary>
        <returns>
            The URL of the application authorization web page.
            </returns>
        <remarks>
            Open this URL in a browser window to allow the user to authorize the application.
            </remarks>
        <exception cref="T:Microsoft.Health.InvalidConfigurationException">
            The value of <see cref="P:Microsoft.Health.HealthClientApplication.ShellUrl" /> is <b>null</b>, 
            or the value of <see cref="P:Microsoft.Health.HealthClientApplication.ApplicationId" /> is 
            <see cref="F:System.Guid.Empty" />.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="HealthServiceUrl">
      <MemberSignature Language="C#" Value="public Uri HealthServiceUrl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri HealthServiceUrl" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.HealthClientApplication.HealthServiceUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the URL of the HealthVault platform service.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MasterApplicationId">
      <MemberSignature Language="C#" Value="public Guid MasterApplicationId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid MasterApplicationId" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.HealthClientApplication.MasterApplicationId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the ID of the master application.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceInstance">
      <MemberSignature Language="C#" Value="public Microsoft.Health.HealthServiceInstance ServiceInstance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Health.HealthServiceInstance ServiceInstance" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.HealthClientApplication.ServiceInstance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.HealthServiceInstance</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the HealthVault web-service instance that this
            client application instance connects to, if it is specified
            during construction.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShellUrl">
      <MemberSignature Language="C#" Value="public Uri ShellUrl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri ShellUrl" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.HealthClientApplication.ShellUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the URL of the HealthVault shell service.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartApplicationCreationProcess">
      <MemberSignature Language="C#" Value="public void StartApplicationCreationProcess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartApplicationCreationProcess() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.HealthClientApplication.StartApplicationCreationProcess" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Start the application creation process with a default application name.
            </summary>
        <remarks>
            Starts the application creation process by opening a URL in the 
            user's default browser.
            After this call, the application is responsible for waiting 
            until the authorization process is completed before continuing.  A typical 
            implementation will create a UI element that allows the user to indicate that
            application creation is complete.
            The name of the child application is set to the local machine name.
            </remarks>
        <exception cref="T:Microsoft.Health.InvalidConfigurationException">
            The value of <see cref="P:Microsoft.Health.HealthClientApplication.ShellUrl" /> or 
            <see cref="P:Microsoft.Health.HealthClientApplication.HealthServiceUrl" /> is 
            <b>null</b>, or the value of <see cref="P:Microsoft.Health.HealthClientApplication.ApplicationId" /> or 
            <see cref="P:Microsoft.Health.HealthClientApplication.MasterApplicationId" /> is <see cref="F:System.Guid.Empty" />.
            </exception>
        <exception cref="T:System.ComponentModel.Win32Exception">
            There was an error opening the URL.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="StartApplicationCreationProcess">
      <MemberSignature Language="C#" Value="public void StartApplicationCreationProcess (string clientName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartApplicationCreationProcess(string clientName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.HealthClientApplication.StartApplicationCreationProcess(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clientName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="clientName">
            The unique client name to use. The client name specifies the instance name
            of the application.
            </param>
        <summary>
            Start the application creation process with a specified application name.
            </summary>
        <remarks>
            Starts the application creation process by opening a URL in the 
            user's default browser.
            After this call, the application is responsible for waiting 
            until the authorization process is completed before continuing.  A typical 
            implementation will create a UI element that allows the user to indicate that
            application creation is complete.
            </remarks>
        <exception cref="T:Microsoft.Health.InvalidConfigurationException">
            The value of <see cref="P:Microsoft.Health.HealthClientApplication.ShellUrl" /> or 
            <see cref="P:Microsoft.Health.HealthClientApplication.HealthServiceUrl" /> is 
            <b>null</b>, or the value of <see cref="P:Microsoft.Health.HealthClientApplication.ApplicationId" /> or 
            <see cref="P:Microsoft.Health.HealthClientApplication.MasterApplicationId" /> is <see cref="F:System.Guid.Empty" />.
            </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="clientName" /> is empty or <b>null</b>.
            </exception>
        <exception cref="T:System.ComponentModel.Win32Exception">
            There was an error opening the URL.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="StartUserAuthorizationProcess">
      <MemberSignature Language="C#" Value="public void StartUserAuthorizationProcess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartUserAuthorizationProcess() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.HealthClientApplication.StartUserAuthorizationProcess" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Start the authorization process.
            </summary>
        <remarks>
            Starts the authorization process by opening an authorization page in the 
            user's default browser.
            After this call, the application is responsible for waiting 
            until the authorization process is completed before continuing.  A typical 
            implementation will create a UI element that allows the user to indicate that
            authorization is complete.
            </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">
            There was an error opening the authorization URL.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="StartUserAuthorizationProcess">
      <MemberSignature Language="C#" Value="public void StartUserAuthorizationProcess (string optionalQueryParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartUserAuthorizationProcess(string optionalQueryParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.HealthClientApplication.StartUserAuthorizationProcess(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="optionalQueryParameters" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="optionalQueryParameters">
            Optional parameters to be added to the authorization URL:
            
            <ul><li>ismra - the application can use multiple records for the same user at one time.</li><li>extrecordid - record identifier.</li><li>forceappauth - force redirect to APPAUTH target once user is authenticated.</li><li>onopt# - A sequence of online optional authorization rule names
                            identifying which rules to present.  The sequence begins with 1.</li><li>offopt# - A sequence of offline optional authorization rule names  
                            identifying which rules to present.  The sequence begins with 1.</li></ul></param>
        <summary>
            Start the authorization process with optional APPAUTH parameters.
            </summary>
        <remarks>
            Starts the authorization process by opening an authorization page in the 
            user's default browser with optional APPAUTH parameters.
            After this call, the application is responsible for waiting 
            until the authorization process is completed before continuing.  A typical 
            implementation will create a UI element that allows the user to indicate that
            authorization is complete.
            </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">
            There was an error opening the uri.
            </exception>
      </Docs>
    </Member>
  </Members>
</Type>
