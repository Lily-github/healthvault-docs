<Type Name="BlobStore" FullName="Microsoft.Health.BlobStore">
  <TypeSignature Language="C#" Value="public class BlobStore : System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;string,Microsoft.Health.Blob&gt;&gt;, System.Collections.Generic.IDictionary&lt;string,Microsoft.Health.Blob&gt;, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,Microsoft.Health.Blob&gt;&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BlobStore extends System.Object implements class System.Collections.Generic.ICollection`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class Microsoft.Health.Blob&gt;&gt;, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.Health.Blob&gt;, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class Microsoft.Health.Blob&gt;&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Health.BlobStore" />
  <TypeSignature Language="VB.NET" Value="Public Class BlobStore&#xA;Implements ICollection(Of KeyValuePair(Of String, Blob)), IDictionary(Of String, Blob), IEnumerable(Of KeyValuePair(Of String, Blob))" />
  <TypeSignature Language="F#" Value="type BlobStore = class&#xA;    interface IDictionary&lt;string, Blob&gt;&#xA;    interface ICollection&lt;KeyValuePair&lt;string, Blob&gt;&gt;&#xA;    interface seq&lt;KeyValuePair&lt;string, Blob&gt;&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Health</AssemblyName>
    <AssemblyVersion>2.64.0.0</AssemblyVersion>
    <AssemblyVersion>2.68.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Microsoft.Health.Blob&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IDictionary&lt;System.String,Microsoft.Health.Blob&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Microsoft.Health.Blob&gt;&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            A collection of the BLOBs associated with a health record item.
            </summary>
    <remarks>
            The <see cref="T:Microsoft.Health.BlobStore" /> is a dictionary that is read-only but allows removal of 
            <see cref="T:Microsoft.Health.Blob" /> instances. 
            To add <see cref="T:Microsoft.Health.Blob" /> instances to the dictionary use the 
            <see cref="M:Microsoft.Health.BlobStore.NewBlob(System.String,System.String)" /> method.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (Microsoft.Health.Blob blob);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class Microsoft.Health.Blob blob) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.BlobStore.Add(Microsoft.Health.Blob)" />
      <MemberSignature Language="F#" Value="member this.Add : Microsoft.Health.Blob -&gt; unit" Usage="blobStore.Add blob" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blob" Type="Microsoft.Health.Blob" />
      </Parameters>
      <Docs>
        <param name="blob">To be added.</param>
        <summary>
            Not supported.
            </summary>
        <remarks>
            Use the <see cref="M:Microsoft.Health.BlobStore.NewBlob(System.String,System.String)" /> method instead.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string key, Microsoft.Health.Blob blob);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(string key, class Microsoft.Health.Blob blob) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.BlobStore.Add(System.String,Microsoft.Health.Blob)" />
      <MemberSignature Language="F#" Value="abstract member Add : string * Microsoft.Health.Blob -&gt; unit&#xA;override this.Add : string * Microsoft.Health.Blob -&gt; unit" Usage="blobStore.Add (key, blob)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IDictionary`2.Add(`0,`1)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="blob" Type="Microsoft.Health.Blob" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="blob">To be added.</param>
        <summary>
            Not supported.
            </summary>
        <remarks>
            Use the <see cref="M:Microsoft.Health.BlobStore.NewBlob(System.String,System.String)" /> method instead.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.BlobStore.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="blobStore.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Clears all Blob instances from the BlobStore.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (Microsoft.Health.Blob blob);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class Microsoft.Health.Blob blob) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.BlobStore.Contains(Microsoft.Health.Blob)" />
      <MemberSignature Language="F#" Value="member this.Contains : Microsoft.Health.Blob -&gt; bool" Usage="blobStore.Contains blob" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blob" Type="Microsoft.Health.Blob" />
      </Parameters>
      <Docs>
        <param name="blob">
            The Blob instance to locate in the BlobStore.
            </param>
        <summary>
            Determines whether the BlobStore contains the specified Blob instance.
            </summary>
        <returns>
            True if the Blob instance is in the store or false otherwise.
            </returns>
        <remarks>
            This implementation is a reference comparison and does not equate Blob instances
            with the same name.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public bool ContainsKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.BlobStore.ContainsKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContainsKey (key As String) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member ContainsKey : string -&gt; bool&#xA;override this.ContainsKey : string -&gt; bool" Usage="blobStore.ContainsKey key" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">
            The key to locate in the BlobStore.
            </param>
        <summary>
            Determines whether the BlobStore contains a Blob with the specified key.
            </summary>
        <returns>
            True if the BlobStore contains a Blob with the key; otherwise, false.
            </returns>
        <remarks>
            This is a case-sensitive comparison.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.BlobStore.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="Microsoft.Health.BlobStore.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the count of BLOBs associated with the health record item.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public Microsoft.Health.Blob this[string name] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Health.Blob Item(string)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.BlobStore.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(name As String) As Blob" />
      <MemberSignature Language="F#" Value="member this.Item(string) : Microsoft.Health.Blob with get, set" Usage="Microsoft.Health.BlobStore.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IDictionary`2.Item(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.Blob</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
            The name of the BLOB to retrieve for the item. A null key indicates the "default" BLOB.
            </param>
        <summary>
            Gets the BLOB with the specified name.
            </summary>
        <value>
            The BLOB with the specified name or <b>null</b> if no BLOB with the specified name 
            exists.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;string&gt; Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;string&gt; Keys" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.BlobStore.Keys" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Keys As ICollection(Of String)" />
      <MemberSignature Language="F#" Value="member this.Keys : System.Collections.Generic.ICollection&lt;string&gt;" Usage="Microsoft.Health.BlobStore.Keys" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IDictionary`2.Keys</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets an ICollection&lt;string&gt; containing the Blob names in the BlobStore.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewBlob">
      <MemberSignature Language="C#" Value="public Microsoft.Health.Blob NewBlob (string blobName, string contentType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Health.Blob NewBlob(string blobName, string contentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.BlobStore.NewBlob(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function NewBlob (blobName As String, contentType As String) As Blob" />
      <MemberSignature Language="F#" Value="member this.NewBlob : string * string -&gt; Microsoft.Health.Blob" Usage="blobStore.NewBlob (blobName, contentType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.Blob</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobName" Type="System.String" />
        <Parameter Name="contentType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="blobName">
            The name of the BLOB. It can be <see cref="F:System.String.Empty" /> but cannot be <b>null</b>.
            </param>
        <param name="contentType">
            The content type of the BLOB.
            </param>
        <summary>
            Creates a BLOB in the store with the specified name, content type, and encoding.
            </summary>
        <returns>
            The <see cref="T:Microsoft.Health.Blob" /> instance that was created in the store.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            If <paramref name="blobName" /> or <paramref name="contentType" /> is <b>null</b>.
            </exception>
        <exception cref="T:System.ArgumentException">
            If a Blob with the same name already exists in the store. To update an existing Blob,
            remove the existing Blob and create a new one.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="NewBlob">
      <MemberSignature Language="C#" Value="public Microsoft.Health.Blob NewBlob (string blobName, string contentType, Microsoft.Health.BlobHashInfo hashInfo, Uri blobUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Health.Blob NewBlob(string blobName, string contentType, class Microsoft.Health.BlobHashInfo hashInfo, class System.Uri blobUrl) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.BlobStore.NewBlob(System.String,System.String,Microsoft.Health.BlobHashInfo,System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function NewBlob (blobName As String, contentType As String, hashInfo As BlobHashInfo, blobUrl As Uri) As Blob" />
      <MemberSignature Language="F#" Value="member this.NewBlob : string * string * Microsoft.Health.BlobHashInfo * Uri -&gt; Microsoft.Health.Blob" Usage="blobStore.NewBlob (blobName, contentType, hashInfo, blobUrl)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.Blob</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobName" Type="System.String" />
        <Parameter Name="contentType" Type="System.String" />
        <Parameter Name="hashInfo" Type="Microsoft.Health.BlobHashInfo" />
        <Parameter Name="blobUrl" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="blobName">
            The name of the BLOB. It can be <see cref="F:System.String.Empty" /> but cannot be <b>null</b>.
            </param>
        <param name="contentType">
            The content type of the BLOB.
            </param>
        <param name="hashInfo">
            The hash information for the BLOB.
            </param>
        <param name="blobUrl">
            The HealthVault URL of the BLOB.
            </param>
        <summary>
            Recreates a BLOB in the store to allow for restarting multiple BLOB uploads on a
            <see cref="T:Microsoft.Health.HealthRecordItem" />.
            </summary>
        <returns>
            The <see cref="T:Microsoft.Health.Blob" /> instance that was recreated in the store.
            </returns>
        <remarks>
            This overload is intended to allow the caller to recover from issues that may arise 
            while uploading large BLOBs or many BLOBs for a <see cref="T:Microsoft.Health.HealthRecordItem" />.
            If you have a large amount of data to upload, you can periodically save the state of
            the Blob instance (and BlobStream if necessary) and then use this method to recreate
            that same Blob instance in the store.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
            If <paramref name="blobName" /> or <paramref name="contentType" /> is <b>null</b>.
            </exception>
        <exception cref="T:System.ArgumentException">
            If a Blob with the same name already exists in the store. To update an existing Blob,
            remove the existing Blob and create a new one.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.BlobStore.Remove(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (key As String) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member Remove : string -&gt; bool&#xA;override this.Remove : string -&gt; bool" Usage="blobStore.Remove key" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IDictionary`2.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">
            The name of the Blob to remove.
            </param>
        <summary>
            Removes the Blob with the specified name from the BlobStore.
            </summary>
        <returns>
            True if the Blob is successfully removed; otherwise, false.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Microsoft.Health.Blob&gt;&gt;.Add">
      <MemberSignature Language="C#" Value="void ICollection&lt;KeyValuePair&lt;string,Blob&gt;&gt;.Add (System.Collections.Generic.KeyValuePair&lt;string,Microsoft.Health.Blob&gt; item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Microsoft.Health.Blob&gt;&gt;.Add(valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class Microsoft.Health.Blob&gt; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.BlobStore.System#Collections#Generic#ICollection&lt;System#Collections#Generic#KeyValuePair&lt;System#String,Microsoft#Health#Blob&gt;&gt;#Add(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob})" />
      <MemberSignature Language="VB.NET" Value="Sub Add (item As KeyValuePair(Of String, Blob)) Implements ICollection(Of KeyValuePair(Of String, Blob)).Add" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Collections.Generic.KeyValuePair&lt;System.String,Microsoft.Health.Blob&gt;" />
      </Parameters>
      <Docs>
        <param name="item"></param>
        <summary>
            Not supported.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Microsoft.Health.Blob&gt;&gt;.Contains">
      <MemberSignature Language="C#" Value="bool ICollection&lt;KeyValuePair&lt;string,Blob&gt;&gt;.Contains (System.Collections.Generic.KeyValuePair&lt;string,Microsoft.Health.Blob&gt; item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Microsoft.Health.Blob&gt;&gt;.Contains(valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class Microsoft.Health.Blob&gt; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.BlobStore.System#Collections#Generic#ICollection&lt;System#Collections#Generic#KeyValuePair&lt;System#String,Microsoft#Health#Blob&gt;&gt;#Contains(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob})" />
      <MemberSignature Language="VB.NET" Value="Function Contains (item As KeyValuePair(Of String, Blob)) As Boolean Implements ICollection(Of KeyValuePair(Of String, Blob)).Contains" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Collections.Generic.KeyValuePair&lt;System.String,Microsoft.Health.Blob&gt;" />
      </Parameters>
      <Docs>
        <param name="item">
            The Blob to locate in the BlobStore.
            </param>
        <summary>
            Determines whether the BlobStore contains the specified item.
            </summary>
        <returns>
            True if <paramref name="item" /> is found in the BlobStore; otherwise, false.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Microsoft.Health.Blob&gt;&gt;.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection&lt;KeyValuePair&lt;string,Blob&gt;&gt;.CopyTo (System.Collections.Generic.KeyValuePair&lt;string,Microsoft.Health.Blob&gt;[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Microsoft.Health.Blob&gt;&gt;.CopyTo(valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class Microsoft.Health.Blob&gt;[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.BlobStore.System#Collections#Generic#ICollection&lt;System#Collections#Generic#KeyValuePair&lt;System#String,Microsoft#Health#Blob&gt;&gt;#CopyTo(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub CopyTo (array As KeyValuePair(Of String, Blob)(), arrayIndex As Integer) Implements ICollection(Of KeyValuePair(Of String, Blob)).CopyTo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Collections.Generic.KeyValuePair&lt;System.String,Microsoft.Health.Blob&gt;[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
            The one-dimensional <see cref="T:System.Array" /> that is the destination of the Blobs copied from
            the BlobStore. The <see cref="T:System.Array" /> must have zero-based indexing.
            </param>
        <param name="arrayIndex">
            The zero-based index in <paramref name="array" /> at which copying begins.
            </param>
        <summary>
            Copies the elements of the BlobStore to an <see cref="T:System.Array" />, starting at a 
            particular <see cref="T:System.Array" /> index.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Microsoft.Health.Blob&gt;&gt;.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Microsoft.Health.Blob&gt;&gt;.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Microsoft.Health.Blob&gt;&gt;.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.BlobStore.System#Collections#Generic#ICollection&lt;System#Collections#Generic#KeyValuePair&lt;System#String,Microsoft#Health#Blob&gt;&gt;#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements ICollection(Of KeyValuePair(Of String, Blob)).IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value indicating whether the BlobStore is read-only.
            </summary>
        <value>To be added.</value>
        <remarks>
            The BlobStore cannot be added to through the Add methods. Instead the
            <see cref="M:Microsoft.Health.BlobStore.NewBlob(System.String,System.String)" /> method must be used. However, the <see cref="M:Microsoft.Health.BlobStore.Clear" /> and 
            <see cref="M:Microsoft.Health.BlobStore.Remove(System.String)" /> methods are available.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Microsoft.Health.Blob&gt;&gt;.Remove">
      <MemberSignature Language="C#" Value="bool ICollection&lt;KeyValuePair&lt;string,Blob&gt;&gt;.Remove (System.Collections.Generic.KeyValuePair&lt;string,Microsoft.Health.Blob&gt; item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Microsoft.Health.Blob&gt;&gt;.Remove(valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class Microsoft.Health.Blob&gt; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.BlobStore.System#Collections#Generic#ICollection&lt;System#Collections#Generic#KeyValuePair&lt;System#String,Microsoft#Health#Blob&gt;&gt;#Remove(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob})" />
      <MemberSignature Language="VB.NET" Value="Function Remove (item As KeyValuePair(Of String, Blob)) As Boolean Implements ICollection(Of KeyValuePair(Of String, Blob)).Remove" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Collections.Generic.KeyValuePair&lt;System.String,Microsoft.Health.Blob&gt;" />
      </Parameters>
      <Docs>
        <param name="item">
            The Blob instance to remove.
            </param>
        <summary>
            Removes the first occurrence of a specific Blob from the BlobStore.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Microsoft.Health.Blob&gt;&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;string,Microsoft.Health.Blob&gt;&gt; IEnumerable&lt;KeyValuePair&lt;string,Blob&gt;&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class Microsoft.Health.Blob&gt;&gt; System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Microsoft.Health.Blob&gt;&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.BlobStore.System#Collections#Generic#IEnumerable&lt;System#Collections#Generic#KeyValuePair&lt;System#String,Microsoft#Health#Blob&gt;&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of KeyValuePair(Of String, Blob)) Implements IEnumerable(Of KeyValuePair(Of String, Blob)).GetEnumerator" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Microsoft.Health.Blob&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.BlobStore.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
        <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (string key, out Microsoft.Health.Blob value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetValue(string key, [out] class Microsoft.Health.Blob&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.BlobStore.TryGetValue(System.String,Microsoft.Health.Blob@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (key As String, ByRef value As Blob) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryGetValue : string *  -&gt; bool&#xA;override this.TryGetValue : string *  -&gt; bool" Usage="blobStore.TryGetValue (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="Microsoft.Health.Blob&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">
            The key whose value to get.
            </param>
        <param name="value">
            When this method returns, the value associated with the specified key, if the key is found;
            otherwise, the default value for the type of the value parameter. This parameter is passed
            uninitialized.
            </param>
        <summary>
            Gets the value associated with the specified key.
            </summary>
        <returns>
            True if a Blob with the specified name exists in the BlobStore; otherwise, false.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Values">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;Microsoft.Health.Blob&gt; Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;class Microsoft.Health.Blob&gt; Values" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.BlobStore.Values" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Values As ICollection(Of Blob)" />
      <MemberSignature Language="F#" Value="member this.Values : System.Collections.Generic.ICollection&lt;Microsoft.Health.Blob&gt;" Usage="Microsoft.Health.BlobStore.Values" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IDictionary`2.Values</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;Microsoft.Health.Blob&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets an ICollection&lt;Blob&gt; containing the values in the BlobStore.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (string blobName, string contentType, System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Write(string blobName, string contentType, class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.BlobStore.Write(System.String,System.String,System.IO.Stream)" />
      <MemberSignature Language="F#" Value="member this.Write : string * string * System.IO.Stream -&gt; unit" Usage="blobStore.Write (blobName, contentType, stream)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobName" Type="System.String" />
        <Parameter Name="contentType" Type="System.String" />
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="blobName">
            The name of the BLOB. It can be <see cref="F:System.String.Empty" /> but cannot be <b>null</b>.
            </param>
        <param name="contentType">
            The content type of the BLOB.
            </param>
        <param name="stream">
            The stream to get the bytes from to write to the blob.
            </param>
        <summary>
            Writes the bytes from the specified stream.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
            If <paramref name="contentType" /> is <b>null</b> or empty.
            </exception>
        <exception cref="ArgumentNullException">
            If <paramref name="stream" /> or <paramref name="blobName" /> 
            is <b>null</b>.
            </exception>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            If there is an error writing the data to HealthVault.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="WriteInline">
      <MemberSignature Language="C#" Value="public void WriteInline (string blobName, string contentType, byte[] bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteInline(string blobName, string contentType, unsigned int8[] bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.BlobStore.WriteInline(System.String,System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteInline (blobName As String, contentType As String, bytes As Byte())" />
      <MemberSignature Language="F#" Value="member this.WriteInline : string * string * byte[] -&gt; unit" Usage="blobStore.WriteInline (blobName, contentType, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobName" Type="System.String" />
        <Parameter Name="contentType" Type="System.String" />
        <Parameter Name="bytes" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="blobName">
            The name of the BLOB. It can be <see cref="F:System.String.Empty" /> but cannot be <b>null</b>.
            </param>
        <param name="contentType">
            The content type of the BLOB.
            </param>
        <param name="bytes">
            The bytes to write to the blob.
            </param>
        <summary>
            Writes the specified bytes to the blob.
            </summary>
        <remarks>
            This is limited to about 3.5MB of data. Use <see cref="M:Microsoft.Health.Blob.GetWriterStream" /> to write
            more data.
            </remarks>
        <exception cref="ArgumentNullException">
            If <paramref name="bytes" /> or <paramref name="blobName" />is <b>null</b>.
            </exception>
        <exception cref="T:System.ArgumentException">
            If <paramref name="contentType" /> is <b>null</b> or empty.
            </exception>
      </Docs>
    </Member>
  </Members>
</Type>