<Type Name="HealthVaultPlatformPatientConnect" FullName="Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect">
  <TypeSignature Language="C#" Value="public class HealthVaultPlatformPatientConnect" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HealthVaultPlatformPatientConnect extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect" />
  <TypeSignature Language="VB.NET" Value="Public Class HealthVaultPlatformPatientConnect" />
  <TypeSignature Language="F#" Value="type HealthVaultPlatformPatientConnect = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Health</AssemblyName>
    <AssemblyVersion>2.64.0.0</AssemblyVersion>
    <AssemblyVersion>2.68.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Provides low-level access to the HealthVault patient connect operations.
            </summary>
    <remarks>
      <see cref="T:Microsoft.Health.HealthVaultPlatform" /> uses this class to perform operations. Set 
            HealthVaultPlatformPatientConnect.Current to a derived class to intercept all message calls.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HealthVaultPlatformPatientConnect ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllocateConnectPackageId">
      <MemberSignature Language="C#" Value="public virtual string AllocateConnectPackageId (Microsoft.Health.Web.OfflineWebApplicationConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string AllocateConnectPackageId(class Microsoft.Health.Web.OfflineWebApplicationConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.AllocateConnectPackageId(Microsoft.Health.Web.OfflineWebApplicationConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AllocateConnectPackageId (connection As OfflineWebApplicationConnection) As String" />
      <MemberSignature Language="F#" Value="abstract member AllocateConnectPackageId : Microsoft.Health.Web.OfflineWebApplicationConnection -&gt; string&#xA;override this.AllocateConnectPackageId : Microsoft.Health.Web.OfflineWebApplicationConnection -&gt; string" Usage="healthVaultPlatformPatientConnect.AllocateConnectPackageId connection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="Microsoft.Health.Web.OfflineWebApplicationConnection" />
      </Parameters>
      <Docs>
        <param name="connection">
            The HealthVault connection to use for the operation.
            </param>
        <summary>
            Allocates a package ID within HealthVault and returns it.
            </summary>
        <returns>
            A token that the application must give to the patient to use when validating the
            connection request.
            </returns>
        <remarks>
          <para>The package ID is allocated as a place holder for information that 
            is identifiable but not yet available through the HealthVault service.
            The returned package ID token should be stored or given to a patient, 
            then used in a call to CreateConnectPackage()
            to send the package data to the HealthVault service.</para>
          <para>The package ID is not a GUID.  It uses a shorter format that is more
            convenient for offline delivery and manual data entry.  The HealthVault 
            service guarantees that each package ID is unique for the lifetime of the 
            package.  Once the package has been accepted by the patient using the 
            HealthVault Shell, or explicitly deleted using the API, the package ID is 
            deallocated and may be reused.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection" /> is <b>null</b>.
            </exception>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            If an error occurs when contacting HealthVault.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateConnectPackage">
      <MemberSignature Language="C#" Value="public virtual string CreateConnectPackage (Microsoft.Health.Package.ConnectPackageCreationParameters creationParameters, Microsoft.Health.ItemTypes.PasswordProtectedPackage connectPackage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string CreateConnectPackage(class Microsoft.Health.Package.ConnectPackageCreationParameters creationParameters, class Microsoft.Health.ItemTypes.PasswordProtectedPackage connectPackage) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.CreateConnectPackage(Microsoft.Health.Package.ConnectPackageCreationParameters,Microsoft.Health.ItemTypes.PasswordProtectedPackage)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateConnectPackage (creationParameters As ConnectPackageCreationParameters, connectPackage As PasswordProtectedPackage) As String" />
      <MemberSignature Language="F#" Value="abstract member CreateConnectPackage : Microsoft.Health.Package.ConnectPackageCreationParameters * Microsoft.Health.ItemTypes.PasswordProtectedPackage -&gt; string&#xA;override this.CreateConnectPackage : Microsoft.Health.Package.ConnectPackageCreationParameters * Microsoft.Health.ItemTypes.PasswordProtectedPackage -&gt; string" Usage="healthVaultPlatformPatientConnect.CreateConnectPackage (creationParameters, connectPackage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="creationParameters" Type="Microsoft.Health.Package.ConnectPackageCreationParameters" />
        <Parameter Name="connectPackage" Type="Microsoft.Health.ItemTypes.PasswordProtectedPackage" />
      </Parameters>
      <Docs>
        <param name="creationParameters">
            The parameters to use when creating the package. 
            </param>
        <param name="connectPackage">
            The pending connect package that the user will add to his/her record. 
            This package's
            <see cref="T:Microsoft.Health.HealthRecordItem" />'s <see cref="T:Microsoft.Health.BlobStore" /> must be an encrypted 
            blob of xml that represents a list of HealthRecordItems. This xml blob
            must be a sequence of <thing /> elements, each wrapping the XML representation of a 
            single HealthRecordItem. Each <thing /> element may be generated by calling 
            <see cref="M:Microsoft.Health.HealthRecordItem.GetItemXml" />.
            </param>
        <summary>
            Asks HealthVault to create a pending package for the application specified
            by the connection with the specified user specific parameters and the pre-allocated
            identity code.
            </summary>
        <returns>
            A token that the application must give to the patient to use when validating the
            connection request.
            </returns>
        <remarks>
            The password protected package supports 2 encryption algorithms, AES256 (recommended)
            and TripleDES. 
            <br /><br />
            For AES256, the supported key size is 256 bits, the blocksize is 256 bits, the IV 
            length is 32 bytes.
            <br /><br />
            For TripleDES, the supported key size is 192 bits, the blocksize is 64 bits, the IV 
            length is 8 bytes.
            <br /><br />
            The encryption key should be derived using the answer, the salt, and the number of hash 
            iterations. The decryption will generate this key via the 
            <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class, hence, encryption should use a similar or 
            identical process. To ensure case-insensitivity, the answer should be converted to its
            lower cased form using <see cref="M:System.String.ToLowerInvariant" /> (culturally-agnostic) 
            prior to generating the derived key.
            <br /><br />
            The algorithm used has the following parameters:
            <ul><li>Mode = CipherMode.CBC</li><li>Padding = PaddingMode.ISO10126</li></ul><br /><br />
            The salt supplied is used as the salt to the derived key as well as the key to the 
            supplied HMAC. The salt should be at least 8 bytes long.
            <br /><br />
            It is recommended that the number of hash iterations be at least 10000.
            </remarks>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            If an error occurs when contacting HealthVault.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateConnectPackage">
      <MemberSignature Language="C#" Value="public virtual string CreateConnectPackage (Microsoft.Health.Package.ConnectPackageCreationParameters creationParameters, Microsoft.Health.ItemTypes.PasswordProtectedPackage connectPackage, System.Collections.Generic.IEnumerable&lt;Uri&gt; packageContentsBlobUrls);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string CreateConnectPackage(class Microsoft.Health.Package.ConnectPackageCreationParameters creationParameters, class Microsoft.Health.ItemTypes.PasswordProtectedPackage connectPackage, class System.Collections.Generic.IEnumerable`1&lt;class System.Uri&gt; packageContentsBlobUrls) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.CreateConnectPackage(Microsoft.Health.Package.ConnectPackageCreationParameters,Microsoft.Health.ItemTypes.PasswordProtectedPackage,System.Collections.Generic.IEnumerable{System.Uri})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateConnectPackage (creationParameters As ConnectPackageCreationParameters, connectPackage As PasswordProtectedPackage, packageContentsBlobUrls As IEnumerable(Of Uri)) As String" />
      <MemberSignature Language="F#" Value="abstract member CreateConnectPackage : Microsoft.Health.Package.ConnectPackageCreationParameters * Microsoft.Health.ItemTypes.PasswordProtectedPackage * seq&lt;Uri&gt; -&gt; string&#xA;override this.CreateConnectPackage : Microsoft.Health.Package.ConnectPackageCreationParameters * Microsoft.Health.ItemTypes.PasswordProtectedPackage * seq&lt;Uri&gt; -&gt; string" Usage="healthVaultPlatformPatientConnect.CreateConnectPackage (creationParameters, connectPackage, packageContentsBlobUrls)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="creationParameters" Type="Microsoft.Health.Package.ConnectPackageCreationParameters" />
        <Parameter Name="connectPackage" Type="Microsoft.Health.ItemTypes.PasswordProtectedPackage" />
        <Parameter Name="packageContentsBlobUrls" Type="System.Collections.Generic.IEnumerable&lt;System.Uri&gt;" />
      </Parameters>
      <Docs>
        <param name="creationParameters">
            The parameters to use when creating the package. 
            </param>
        <param name="connectPackage">
            The pending connect package that the user will add to his/her record. 
            This package's
            <see cref="T:Microsoft.Health.HealthRecordItem" />'s <see cref="T:Microsoft.Health.BlobStore" /> must be an encrypted 
            blob of xml that represents a list of HealthRecordItems. This xml blob
            must be a sequence of <thing /> elements, each wrapping the XML representation of a 
            single HealthRecordItem. Each <thing /> element may be generated by calling 
            <see cref="M:Microsoft.Health.HealthRecordItem.GetItemXml" />.
            </param>
        <param name="packageContentsBlobUrls">
            URLs of the streamed blobs of the package contents.
            </param>
        <summary>
            Asks HealthVault to create a pending package for the application specified
            by the connection with the specified user specific parameters and the pre-allocated
            identity code.
            </summary>
        <returns>
            A token that the application must give to the patient to use when validating the
            connection request.
            </returns>
        <remarks>
            The password protected package supports 2 encryption algorithms, AES256 (recommended)
            and TripleDES. 
            <br /><br />
            For AES256, the supported key size is 256 bits, the blocksize is 256 bits, the IV 
            length is 32 bytes.
            <br /><br />
            For TripleDES, the supported key size is 192 bits, the blocksize is 64 bits, the IV 
            length is 8 bytes.
            <br /><br />
            The encryption key should be derived using the answer, the salt, and the number of hash 
            iterations. The decryption will generate this key via the 
            <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class, hence, encryption should use a similar or 
            identical process. To ensure case-insensitivity, the answer should be converted to its
            lower cased form using <see cref="M:System.String.ToLowerInvariant" /> (culturally-agnostic) 
            prior to generating the derived key.
            <br /><br />
            The algorithm used has the following parameters:
            <ul><li>Mode = CipherMode.CBC</li><li>Padding = PaddingMode.ISO10126</li></ul><br /><br />
            The salt supplied is used as the salt to the derived key as well as the key to the 
            supplied HMAC. The salt should be at least 8 bytes long.
            <br /><br />
            It is recommended that the number of hash iterations be at least 10000.
            </remarks>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            If an error occurs when contacting HealthVault.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CreatePatientConnection">
      <MemberSignature Language="C#" Value="public virtual string CreatePatientConnection (Microsoft.Health.Web.OfflineWebApplicationConnection connection, string friendlyName, string securityQuestion, string securityAnswer, Uri callbackUrl, string applicationPatientId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string CreatePatientConnection(class Microsoft.Health.Web.OfflineWebApplicationConnection connection, string friendlyName, string securityQuestion, string securityAnswer, class System.Uri callbackUrl, string applicationPatientId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.CreatePatientConnection(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreatePatientConnection (connection As OfflineWebApplicationConnection, friendlyName As String, securityQuestion As String, securityAnswer As String, callbackUrl As Uri, applicationPatientId As String) As String" />
      <MemberSignature Language="F#" Value="abstract member CreatePatientConnection : Microsoft.Health.Web.OfflineWebApplicationConnection * string * string * string * Uri * string -&gt; string&#xA;override this.CreatePatientConnection : Microsoft.Health.Web.OfflineWebApplicationConnection * string * string * string * Uri * string -&gt; string" Usage="healthVaultPlatformPatientConnect.CreatePatientConnection (connection, friendlyName, securityQuestion, securityAnswer, callbackUrl, applicationPatientId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="Microsoft.Health.Web.OfflineWebApplicationConnection" />
        <Parameter Name="friendlyName" Type="System.String" />
        <Parameter Name="securityQuestion" Type="System.String" />
        <Parameter Name="securityAnswer" Type="System.String" />
        <Parameter Name="callbackUrl" Type="System.Uri" />
        <Parameter Name="applicationPatientId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connection">
            The connection to HealthVault. The application ID in the connection is used
            when making the patient connection.
            </param>
        <param name="friendlyName">
            A friendly name for the patient connection which will be shown to the user when they
            go to HealthVault Shell to validate the connection.
            </param>
        <param name="securityQuestion">
            A question (usually provided by the patient) to which the patient must provide the 
            answer when they go to validate the connection in the HealthVault Shell.
            </param>
        <param name="securityAnswer">
            The answer to the <paramref name="securityQuestion" /> which the patient must use
            when validating the connection in HealthVault Shell. The answer is case-insensitive but
            otherwise must match exactly. In most cases it is recommended that this is a single 
            word to prevent entry problems when validating the connection.
            </param>
        <param name="callbackUrl">
            Not yet implemented. May be null.
            </param>
        <param name="applicationPatientId">
            The application specific identifier for the user. This identifier is used to uniquely
            identify the user in the application data storage whereas the HealthVault person ID is
            used to identify the person in HealthVault.
            </param>
        <summary>
            Asks HealthVault to create a pending patient connection for the application specified
            by the connection with the specified user specific parameters.
            </summary>
        <returns>
            A token that the application must give to the patient to use when validating the
            connection request.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection" /> is <b>null</b>.
            </exception>
        <exception cref="T:System.ArgumentException">
            If <paramref name="friendlyName" />, <paramref name="securityQuestion" />,
            <paramref name="securityAnswer" />, or <paramref name="applicationPatientId" /> is
            <b>null</b> or empty.
            </exception>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            If an error occurs when contacting HealthVault.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="DeletePendingConnectionPackageForIdentityCode">
      <MemberSignature Language="C#" Value="public virtual void DeletePendingConnectionPackageForIdentityCode (Microsoft.Health.Web.OfflineWebApplicationConnection connection, string identityCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeletePendingConnectionPackageForIdentityCode(class Microsoft.Health.Web.OfflineWebApplicationConnection connection, string identityCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.DeletePendingConnectionPackageForIdentityCode(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DeletePendingConnectionPackageForIdentityCode (connection As OfflineWebApplicationConnection, identityCode As String)" />
      <MemberSignature Language="F#" Value="abstract member DeletePendingConnectionPackageForIdentityCode : Microsoft.Health.Web.OfflineWebApplicationConnection * string -&gt; unit&#xA;override this.DeletePendingConnectionPackageForIdentityCode : Microsoft.Health.Web.OfflineWebApplicationConnection * string -&gt; unit" Usage="healthVaultPlatformPatientConnect.DeletePendingConnectionPackageForIdentityCode (connection, identityCode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="Microsoft.Health.Web.OfflineWebApplicationConnection" />
        <Parameter Name="identityCode" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connection">
            The connection to HealthVault to use for this operation. 
            </param>
        <param name="identityCode">
            The unique token that identifies the package.
            </param>
        <summary>
            Deletes a single package that has been created by the calling application but has not been 
            accepted by the user.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection" /> is <b>null</b>.
            </exception>
        <exception cref="T:System.ArgumentException">
            If <paramref name="identityCode" /> is <b>null</b> or empty.
            </exception>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            If an error occurs when contacting HealthVault.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="DeletePendingConnectPackages">
      <MemberSignature Language="C#" Value="public virtual void DeletePendingConnectPackages (Microsoft.Health.Web.OfflineWebApplicationConnection connection, string applicationPatientId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeletePendingConnectPackages(class Microsoft.Health.Web.OfflineWebApplicationConnection connection, string applicationPatientId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.DeletePendingConnectPackages(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DeletePendingConnectPackages (connection As OfflineWebApplicationConnection, applicationPatientId As String)" />
      <MemberSignature Language="F#" Value="abstract member DeletePendingConnectPackages : Microsoft.Health.Web.OfflineWebApplicationConnection * string -&gt; unit&#xA;override this.DeletePendingConnectPackages : Microsoft.Health.Web.OfflineWebApplicationConnection * string -&gt; unit" Usage="healthVaultPlatformPatientConnect.DeletePendingConnectPackages (connection, applicationPatientId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="Microsoft.Health.Web.OfflineWebApplicationConnection" />
        <Parameter Name="applicationPatientId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connection">
            The connection to HealthVault to use for this operation. 
            </param>
        <param name="applicationPatientId">
            The application specific user ID that was used to create the connection 
            request.
            </param>
        <summary>
            Deletes all packages that have been created by the calling application 
            for the applicationPatientId and have not been accepted by the user.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection" /> is <b>null</b>.
            </exception>
        <exception cref="T:System.ArgumentException">
            If <paramref name="applicationPatientId" /> is <b>null</b> or empty.
            </exception>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            If an error occurs when contacting HealthVault.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="DeletePendingPatientConnection">
      <MemberSignature Language="C#" Value="public virtual void DeletePendingPatientConnection (Microsoft.Health.Web.OfflineWebApplicationConnection connection, string applicationPatientId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeletePendingPatientConnection(class Microsoft.Health.Web.OfflineWebApplicationConnection connection, string applicationPatientId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.DeletePendingPatientConnection(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DeletePendingPatientConnection (connection As OfflineWebApplicationConnection, applicationPatientId As String)" />
      <MemberSignature Language="F#" Value="abstract member DeletePendingPatientConnection : Microsoft.Health.Web.OfflineWebApplicationConnection * string -&gt; unit&#xA;override this.DeletePendingPatientConnection : Microsoft.Health.Web.OfflineWebApplicationConnection * string -&gt; unit" Usage="healthVaultPlatformPatientConnect.DeletePendingPatientConnection (connection, applicationPatientId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="Microsoft.Health.Web.OfflineWebApplicationConnection" />
        <Parameter Name="applicationPatientId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connection">
            The connection to HealthVault to use for this operation. 
            </param>
        <param name="applicationPatientId">
            The application's identifier for the user which was used to create the connection 
            request.
            </param>
        <summary>
            Deletes a request for a connection that has been made by the calling application but
            has not been validated by the user.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection" /> is <b>null</b>.
            </exception>
        <exception cref="T:System.ArgumentException">
            If <paramref name="applicationPatientId" /> is <b>null</b> or empty.
            </exception>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            If an error occurs when contacting HealthVault.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="DisableMock">
      <MemberSignature Language="C#" Value="public static void DisableMock ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DisableMock() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.DisableMock" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DisableMock ()" />
      <MemberSignature Language="F#" Value="static member DisableMock : unit -&gt; unit" Usage="Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.DisableMock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Removes mocking of calls to this class.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
            There is no mock registered for this class.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="EnableMock">
      <MemberSignature Language="C#" Value="public static void EnableMock (Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect mock);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EnableMock(class Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect mock) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.EnableMock(Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EnableMock (mock As HealthVaultPlatformPatientConnect)" />
      <MemberSignature Language="F#" Value="static member EnableMock : Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect -&gt; unit" Usage="Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.EnableMock mock" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mock" Type="Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect" />
      </Parameters>
      <Docs>
        <param name="mock">The mocking class.</param>
        <summary>
            Enables mocking of calls to this class.
            </summary>
        <remarks>
            The calling class should pass in a class that derives from this
            class and overrides the calls to be mocked. 
            </remarks>
        <exception cref="T:System.InvalidOperationException">
            There is already a mock registered for this class.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetValidatedPatientConnections">
      <MemberSignature Language="C#" Value="public virtual System.Collections.ObjectModel.Collection&lt;Microsoft.Health.PatientConnect.ValidatedPatientConnection&gt; GetValidatedPatientConnections (Microsoft.Health.Web.OfflineWebApplicationConnection connection, DateTime validatedSince);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.ObjectModel.Collection`1&lt;class Microsoft.Health.PatientConnect.ValidatedPatientConnection&gt; GetValidatedPatientConnections(class Microsoft.Health.Web.OfflineWebApplicationConnection connection, valuetype System.DateTime validatedSince) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.GetValidatedPatientConnections(Microsoft.Health.Web.OfflineWebApplicationConnection,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetValidatedPatientConnections (connection As OfflineWebApplicationConnection, validatedSince As DateTime) As Collection(Of ValidatedPatientConnection)" />
      <MemberSignature Language="F#" Value="abstract member GetValidatedPatientConnections : Microsoft.Health.Web.OfflineWebApplicationConnection * DateTime -&gt; System.Collections.ObjectModel.Collection&lt;Microsoft.Health.PatientConnect.ValidatedPatientConnection&gt;&#xA;override this.GetValidatedPatientConnections : Microsoft.Health.Web.OfflineWebApplicationConnection * DateTime -&gt; System.Collections.ObjectModel.Collection&lt;Microsoft.Health.PatientConnect.ValidatedPatientConnection&gt;" Usage="healthVaultPlatformPatientConnect.GetValidatedPatientConnections (connection, validatedSince)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;Microsoft.Health.PatientConnect.ValidatedPatientConnection&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="Microsoft.Health.Web.OfflineWebApplicationConnection" />
        <Parameter Name="validatedSince" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="connection">
            The application's connection to HealthVault.
            </param>
        <param name="validatedSince">
            Connections that have been validated since this date will be returned. The date passed
            should be in UTC time.
            </param>
        <summary>
            Gets the connections for the application that people have accepted since the specified
            date.
            </summary>
        <returns>
            A collection of the connections that people have accepted.
            </returns>
        <remarks>
            Validated connect requests are removed by HealthVault after 90 days. It is advised 
            that applications call <see cref="M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.GetValidatedPatientConnections(Microsoft.Health.Web.OfflineWebApplicationConnection,System.DateTime)" /> 
            daily or weekly to ensure that all validated connect requests are retrieved.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection" /> is <b>null</b>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateConnectPackageApplicationPatientId">
      <MemberSignature Language="C#" Value="public virtual void UpdateConnectPackageApplicationPatientId (Microsoft.Health.Web.OfflineWebApplicationConnection connection, string oldApplicationPatientId, string newApplicationPatientId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateConnectPackageApplicationPatientId(class Microsoft.Health.Web.OfflineWebApplicationConnection connection, string oldApplicationPatientId, string newApplicationPatientId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.UpdateConnectPackageApplicationPatientId(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub UpdateConnectPackageApplicationPatientId (connection As OfflineWebApplicationConnection, oldApplicationPatientId As String, newApplicationPatientId As String)" />
      <MemberSignature Language="F#" Value="abstract member UpdateConnectPackageApplicationPatientId : Microsoft.Health.Web.OfflineWebApplicationConnection * string * string -&gt; unit&#xA;override this.UpdateConnectPackageApplicationPatientId : Microsoft.Health.Web.OfflineWebApplicationConnection * string * string -&gt; unit" Usage="healthVaultPlatformPatientConnect.UpdateConnectPackageApplicationPatientId (connection, oldApplicationPatientId, newApplicationPatientId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="Microsoft.Health.Web.OfflineWebApplicationConnection" />
        <Parameter Name="oldApplicationPatientId" Type="System.String" />
        <Parameter Name="newApplicationPatientId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connection">
            The HealthVault connection to use for the operation.
            </param>
        <param name="oldApplicationPatientId">
            The application patient identifier that was used to create the initial package.
            </param>
        <param name="newApplicationPatientId">
            The new application patient identifier.
            </param>
        <summary>
            Updates existing pending packages with a new application patient identifier.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection" /> is <b>null</b>.
            </exception>
        <exception cref="T:System.ArgumentException">
            If <paramref name="oldApplicationPatientId" /> or <paramref name="newApplicationPatientId" />
            is <b>null</b> or empty.
            </exception>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            If an error occurs when contacting HealthVault.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateConnectPackageApplicationPatientIdForIdentityCode">
      <MemberSignature Language="C#" Value="public virtual void UpdateConnectPackageApplicationPatientIdForIdentityCode (Microsoft.Health.Web.OfflineWebApplicationConnection connection, string identityCode, string newApplicationPatientId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateConnectPackageApplicationPatientIdForIdentityCode(class Microsoft.Health.Web.OfflineWebApplicationConnection connection, string identityCode, string newApplicationPatientId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.UpdateConnectPackageApplicationPatientIdForIdentityCode(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub UpdateConnectPackageApplicationPatientIdForIdentityCode (connection As OfflineWebApplicationConnection, identityCode As String, newApplicationPatientId As String)" />
      <MemberSignature Language="F#" Value="abstract member UpdateConnectPackageApplicationPatientIdForIdentityCode : Microsoft.Health.Web.OfflineWebApplicationConnection * string * string -&gt; unit&#xA;override this.UpdateConnectPackageApplicationPatientIdForIdentityCode : Microsoft.Health.Web.OfflineWebApplicationConnection * string * string -&gt; unit" Usage="healthVaultPlatformPatientConnect.UpdateConnectPackageApplicationPatientIdForIdentityCode (connection, identityCode, newApplicationPatientId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="Microsoft.Health.Web.OfflineWebApplicationConnection" />
        <Parameter Name="identityCode" Type="System.String" />
        <Parameter Name="newApplicationPatientId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connection">
            The HealthVault connection to use for the operation.
            </param>
        <param name="identityCode">
            The unique token that identifies the package.
            </param>
        <param name="newApplicationPatientId">
            The new application patient identifier.
            </param>
        <summary>
            Updates an existing pending package with a new application patient identifier.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection" /> is <b>null</b>.
            </exception>
        <exception cref="T:System.ArgumentException">
            If <paramref name="newApplicationPatientId" />
            is <b>null</b> or empty.
            </exception>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            If an error occurs when contacting HealthVault.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdatePatientConnectionApplicationPatientId">
      <MemberSignature Language="C#" Value="public virtual void UpdatePatientConnectionApplicationPatientId (Microsoft.Health.Web.OfflineWebApplicationConnection connection, string oldApplicationPatientId, string newApplicationPatientId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdatePatientConnectionApplicationPatientId(class Microsoft.Health.Web.OfflineWebApplicationConnection connection, string oldApplicationPatientId, string newApplicationPatientId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.UpdatePatientConnectionApplicationPatientId(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub UpdatePatientConnectionApplicationPatientId (connection As OfflineWebApplicationConnection, oldApplicationPatientId As String, newApplicationPatientId As String)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePatientConnectionApplicationPatientId : Microsoft.Health.Web.OfflineWebApplicationConnection * string * string -&gt; unit&#xA;override this.UpdatePatientConnectionApplicationPatientId : Microsoft.Health.Web.OfflineWebApplicationConnection * string * string -&gt; unit" Usage="healthVaultPlatformPatientConnect.UpdatePatientConnectionApplicationPatientId (connection, oldApplicationPatientId, newApplicationPatientId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="Microsoft.Health.Web.OfflineWebApplicationConnection" />
        <Parameter Name="oldApplicationPatientId" Type="System.String" />
        <Parameter Name="newApplicationPatientId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connection">
            The HealthVault connection to use for the operation.
            </param>
        <param name="oldApplicationPatientId">
            The application patient identifier that was used to make the initial connection request.
            </param>
        <param name="newApplicationPatientId">
            The new application patient identifier.
            </param>
        <summary>
            Updates an existing pending patient connection with a new application patient identifier.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection" /> is <b>null</b>.
            </exception>
        <exception cref="T:System.ArgumentException">
            If <paramref name="oldApplicationPatientId" /> or <paramref name="newApplicationPatientId" />
            is <b>null</b> or empty.
            </exception>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            If an error occurs when contacting HealthVault.
            </exception>
      </Docs>
    </Member>
  </Members>
</Type>