<Type Name="HealthVaultPlatformProvisioning" FullName="Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning">
  <TypeSignature Language="C#" Value="public class HealthVaultPlatformProvisioning" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HealthVaultPlatformProvisioning extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Health</AssemblyName>
    <AssemblyVersion>2.64.0.0</AssemblyVersion>
    <AssemblyVersion>2.68.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Provides low-level access to the HealthVault provisioning operations.
            </summary>
    <remarks>
      <see cref="T:Microsoft.Health.HealthVaultPlatform" /> uses this class to perform operations. Set 
            HealthVaultPlatformProvisioning.Current to a derived class to intercept all provisioning calls.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HealthVaultPlatformProvisioning ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddChildApplication">
      <MemberSignature Language="C#" Value="public virtual Guid AddChildApplication (Microsoft.Health.Web.OfflineWebApplicationConnection connection, Microsoft.Health.ApplicationInfo applicationConfigurationInformation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Guid AddChildApplication(class Microsoft.Health.Web.OfflineWebApplicationConnection connection, class Microsoft.Health.ApplicationInfo applicationConfigurationInformation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.AddChildApplication(Microsoft.Health.Web.OfflineWebApplicationConnection,Microsoft.Health.ApplicationInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="Microsoft.Health.Web.OfflineWebApplicationConnection" />
        <Parameter Name="applicationConfigurationInformation" Type="Microsoft.Health.ApplicationInfo" />
      </Parameters>
      <Docs>
        <param name="connection">
             The connection to use to add the application.
             </param>
        <param name="applicationConfigurationInformation">
             Configuration information about the application being provisioned.
             </param>
        <summary>
             Adds a HealthVault application instance for a "child" application of the calling
             application.
             </summary>
        <returns>
             The new application identifier for the new application provided by HealthVault.
             </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
             If <paramref name="connection" /> or <paramref name="applicationConfigurationInformation" />
             is <b>null</b>.
             </exception>
        <exception cref="T:System.ArgumentException">
             If <see cref="P:Microsoft.Health.ApplicationInfo.Name" />, <see cref="P:Microsoft.Health.ApplicationInfo.PublicKeys" />,
             <see cref="P:Microsoft.Health.ApplicationInfo.OfflineBaseAuthorizations" />, <see cref="P:Microsoft.Health.ApplicationInfo.Description" />,
             <see cref="P:Microsoft.Health.ApplicationInfo.AuthorizationReason" />, or <see cref="P:Microsoft.Health.ApplicationInfo.LargeLogo" /> 
             is not specified.
             </exception>
        <exception cref="T:Microsoft.Health.HealthServiceException">
             If there is an error when the HealthVault service is called.
             </exception>
      </Docs>
    </Member>
    <Member MemberName="DisableMock">
      <MemberSignature Language="C#" Value="public static void DisableMock ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DisableMock() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.DisableMock" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Removes mocking of calls to this class.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
            There is no mock registered for this class.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="EnableMock">
      <MemberSignature Language="C#" Value="public static void EnableMock (Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning mock);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EnableMock(class Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning mock) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.EnableMock(Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mock" Type="Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning" />
      </Parameters>
      <Docs>
        <param name="mock">The mocking class.</param>
        <summary>
            Enables mocking of calls to this class.
            </summary>
        <remarks>
            The calling class should pass in a class that derives from this
            class and overrides the calls to be mocked. 
            </remarks>
        <exception cref="T:System.InvalidOperationException">
            There is already a mock registered for this class.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetChildApplication">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Health.ApplicationInfo GetChildApplication (Microsoft.Health.Web.OfflineWebApplicationConnection connection, Guid childApplicationId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Health.ApplicationInfo GetChildApplication(class Microsoft.Health.Web.OfflineWebApplicationConnection connection, valuetype System.Guid childApplicationId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.GetChildApplication(Microsoft.Health.Web.OfflineWebApplicationConnection,System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.ApplicationInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="Microsoft.Health.Web.OfflineWebApplicationConnection" />
        <Parameter Name="childApplicationId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="connection">
            The connection to use to get the application information.
            </param>
        <param name="childApplicationId">
            The unique application identifier for the child application to get the configuration
            information for.
            </param>
        <summary>
            Gets the configuration information for the specified child application ID.
            </summary>
        <returns>
            Configuration information for the specified child application.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection" /> is <b>null</b>.
            </exception>
        <exception cref="T:System.ArgumentException">
            If <paramref name="childApplicationId" /> is <see cref="F:System.Guid.Empty" />.
            </exception>
        <exception cref="T:Microsoft.Health.HealthServiceAccessDeniedException">
            If the application specified in the <paramref name="connection" /> is not a master
            application, or if <paramref name="childApplicationId" /> does not identify a child
            application of the calling application.
            </exception>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            If there is an error when the HealthVault service is called.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateChildApplication">
      <MemberSignature Language="C#" Value="public virtual void UpdateChildApplication (Microsoft.Health.ApplicationConnection connection, Microsoft.Health.ApplicationInfo applicationInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateChildApplication(class Microsoft.Health.ApplicationConnection connection, class Microsoft.Health.ApplicationInfo applicationInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.UpdateChildApplication(Microsoft.Health.ApplicationConnection,Microsoft.Health.ApplicationInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="Microsoft.Health.ApplicationConnection" />
        <Parameter Name="applicationInfo" Type="Microsoft.Health.ApplicationInfo" />
      </Parameters>
      <Docs>
        <param name="connection">
            The connection to use to make the update.
            </param>
        <param name="applicationInfo">
            The <see cref="T:Microsoft.Health.ApplicationInfo" /> to update.
            </param>
        <summary>
            Updates the application's configuration in HealthVault.
            </summary>
        <remarks>
            This method makes a remote call to the HealthVault service.
            The calling application in the <paramref name="connection" /> must be the same as
            the application specified by this ApplicationInfo instance or its master application.
            Note, this update will replace all configuration elements for the application. It is 
            advised that <see cref="M:Microsoft.Health.ApplicationProvisioning.Provisioner.GetApplication(Microsoft.Health.Web.OfflineWebApplicationConnection,System.Guid)" /> is 
            called to retrieve the existing application configuration before changing values and 
            calling Update.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection" /> is <b>null</b>.
            </exception>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            The HealthVault service returned an error.
            </exception>
      </Docs>
    </Member>
  </Members>
</Type>