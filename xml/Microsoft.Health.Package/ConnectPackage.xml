<Type Name="ConnectPackage" FullName="Microsoft.Health.Package.ConnectPackage">
  <TypeSignature Language="C#" Value="public static class ConnectPackage" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ConnectPackage extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Health.Package.ConnectPackage" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Health</AssemblyName>
    <AssemblyVersion>2.64.0.0</AssemblyVersion>
    <AssemblyVersion>2.68.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Methods for accessing the package APIs of HealthVault.
            </summary>
    <remarks>
            The ConnectPackage class allows applications to send user data to the user's
            HealthVault account, outside of the context of an ongoing interaction with the user.
            The application can do this by sending a data package to the HealthVault service
            along with the application's identifier and user specific information.
            The user can then go to HealthVault Shell and add the package's contents to their 
            appropriate health record.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="AllocatePackageId">
      <MemberSignature Language="C#" Value="public static string AllocatePackageId (Microsoft.Health.Web.OfflineWebApplicationConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string AllocatePackageId(class Microsoft.Health.Web.OfflineWebApplicationConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.Package.ConnectPackage.AllocatePackageId(Microsoft.Health.Web.OfflineWebApplicationConnection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="Microsoft.Health.Web.OfflineWebApplicationConnection" />
      </Parameters>
      <Docs>
        <param name="connection">
            The HealthVault connection to use for the operation.
            </param>
        <summary>
            Allocates a package ID within HealthVault and returns it.
            </summary>
        <returns>
            A token that the application must give to the patient to use when validating the
            connection request.
            </returns>
        <remarks>
          <para>The package ID is allocated as a place holder for information that 
            is identifiable but not yet available through the HealthVault service.
            The returned package ID token should be stored or given to a patient, 
            then used in a call to <see cref="M:Microsoft.Health.Package.ConnectPackage.Create(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,Microsoft.Health.ItemTypes.PasswordProtectedPackage)" />
            to send the package data to the HealthVault service.</para>
          <para>The package ID is not a GUID.  It uses a shorter format that is more
            convenient for offline delivery and manual data entry.  The HealthVault 
            service guarantees that each package ID is unique for the lifetime of the 
            package.  Once the package has been accepted by the patient using the 
            HealthVault Shell, or explicitly deleted using the API, the package ID is 
            deallocated and may be reused.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection" /> is <b>null</b>.
            </exception>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            If an error occurs when contacting HealthVault.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static string Create (Microsoft.Health.Package.ConnectPackageCreationParameters creationParameters, System.Collections.Generic.IList&lt;Microsoft.Health.HealthRecordItem&gt; packageContents);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Create(class Microsoft.Health.Package.ConnectPackageCreationParameters creationParameters, class System.Collections.Generic.IList`1&lt;class Microsoft.Health.HealthRecordItem&gt; packageContents) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.Package.ConnectPackage.Create(Microsoft.Health.Package.ConnectPackageCreationParameters,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="creationParameters" Type="Microsoft.Health.Package.ConnectPackageCreationParameters" />
        <Parameter Name="packageContents" Type="System.Collections.Generic.IList&lt;Microsoft.Health.HealthRecordItem&gt;" />
      </Parameters>
      <Docs>
        <param name="creationParameters">
             The <see cref="T:Microsoft.Health.Package.ConnectPackageCreationParameters" /> to be used while creating the 
             connect package.
            </param>
        <param name="packageContents">
             The list of HealthRecordItems that will be encrypted and added to the package that the 
             user will claim via HealthVault Shell.
             </param>
        <summary>
             Represents a package of user data that is created by HealthVault in order
             to be retrieved by a user using the HealthVault Shell.
             </summary>
        <returns>
             A token that the application must give to the patient to use when validating the
             connection request.
             </returns>
        <remarks>
             Package encryption is delegated to the .NET Crypto classes. The encryption algorithm 
             supported by default is AES256. If TripleDES is required, the caller should create 
             the custom Password Protected Package and call <see cref="M:Microsoft.Health.Package.ConnectPackage.Create(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,Microsoft.Health.ItemTypes.PasswordProtectedPackage)" />.
             <br /><br />
             The answer key provided is not the actual key to the decryption. A key is derived using 
             the answer, the salt, and the number of hash iterations (via the 
             <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class). To ensure case-insensitivity, the answer 
             is lower cased using <see cref="M:System.String.ToLowerInvariant" /> (culturally-agnostic) 
             prior to generating the derived key.
             <br /><br />
             The algorithm used has the following parameters:
             <ul><li>Mode = CipherMode.CBC</li><li>Padding = PaddingMode.ISO10126</li></ul><br /><br />
             The salt supplied is used as the salt to the derived key as well as the key to the 
             supplied HMAC. The data must be appended to the hash, then encrypted and then Base64 
             encoded.
             </remarks>
        <exception cref="T:System.NotSupportedException">
             One of the items in <paramref name="packageContents" /> is signed and contains
             streamed blobs. This is not supported.
             </exception>
        <exception cref="T:Microsoft.Health.HealthServiceException">
             If an error occurs when contacting HealthVault.
             </exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static string Create (Microsoft.Health.Web.OfflineWebApplicationConnection connection, string friendlyName, string securityQuestion, string applicationPatientId, Microsoft.Health.ItemTypes.PasswordProtectedPackage connectPackage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Create(class Microsoft.Health.Web.OfflineWebApplicationConnection connection, string friendlyName, string securityQuestion, string applicationPatientId, class Microsoft.Health.ItemTypes.PasswordProtectedPackage connectPackage) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.Package.ConnectPackage.Create(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,Microsoft.Health.ItemTypes.PasswordProtectedPackage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="Microsoft.Health.Web.OfflineWebApplicationConnection" />
        <Parameter Name="friendlyName" Type="System.String" />
        <Parameter Name="securityQuestion" Type="System.String" />
        <Parameter Name="applicationPatientId" Type="System.String" />
        <Parameter Name="connectPackage" Type="Microsoft.Health.ItemTypes.PasswordProtectedPackage" />
      </Parameters>
      <Docs>
        <param name="connection">
            The application connection to HealthVault. The application ID in the connection is used
            when making the patient connection.
            </param>
        <param name="friendlyName">
            A friendly name for the patient connection which will be shown to the user when they
            go to HealthVault Shell to validate the connection.
            </param>
        <param name="securityQuestion">
            A question (usually provided by the patient) to which the patient must provide the 
            answer when they go to validate the connection in the 
            HealthVault Shell.
            </param>
        <param name="applicationPatientId">
            The application specific identifier for the user. This identifier is used to uniquely
            identify the user in the application data storage whereas the HealthVault person ID is
            used to identify the person in HealthVault.
            </param>
        <param name="connectPackage">
            The pending connect package that the user will add to his/her record. This package's
            <see cref="T:Microsoft.Health.Blob" /> must be an encrypted and Base64 
            encoded blob of xml that represents a list of HealthRecordItems. This xml blob
            must be a sequence of <thing /> elements, each wrapping the XML representation of a 
            single HealthRecordItem. Each <thing /> element may be generated by calling 
            <see cref="M:Microsoft.Health.HealthRecordItem.GetItemXml" />.
            </param>
        <summary>
            Asks HealthVault to create a pending package for the application specified
            by the connection with the specified user specific parameters.
            </summary>
        <returns>
            A token that the application must give to the patient to use when validating the
            connection request.
            </returns>
        <remarks>
            The password protected package supports 2 encryption algorithms, AES256 (recommended)
            and TripleDES. 
            <br /><br />
            For AES256, the supported key size is 256 bits, the blocksize is 256 bits, the IV 
            length is 32 bytes.
            <br /><br />
            For TripleDES, the supported key size is 192 bits, the blocksize is 64 bits, the IV 
            length is 8 bytes.
            <br /><br />
            The encryption key should be derived using the answer, the salt, and the number of hash 
            iterations. The decryption will generate this key via the 
            <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class, hence, encryption should use a similar or 
            identical process. To ensure case-insensitivity, the answer should be converted to its
            lower cased form using <see cref="M:System.String.ToLowerInvariant" /> (culturally-agnostic) 
            prior to generating the derived key.
            <br /><br />
            The algorithm used has the following parameters:
            <ul><li>Mode = CipherMode.CBC</li><li>Padding = PaddingMode.ISO10126</li></ul><br /><br />
            The salt supplied is used as the salt to the derived key as well as the key to the 
            supplied HMAC. The salt should be at least 8 bytes long.
            <br /><br />
            It is recommended that the number of hash iterations be at least 10000.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection" /> is <b>null</b>.
            </exception>
        <exception cref="T:System.ArgumentException">
            If <paramref name="friendlyName" />, <paramref name="securityQuestion" />,
            <paramref name="applicationPatientId" />, or <paramref name="connectPackage" /> is
            <b>null</b> or empty.
            </exception>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            If an error occurs when contacting HealthVault.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static string Create (Microsoft.Health.Web.OfflineWebApplicationConnection connection, string identityCode, string friendlyName, string securityQuestion, string applicationPatientId, Microsoft.Health.ItemTypes.PasswordProtectedPackage connectPackage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Create(class Microsoft.Health.Web.OfflineWebApplicationConnection connection, string identityCode, string friendlyName, string securityQuestion, string applicationPatientId, class Microsoft.Health.ItemTypes.PasswordProtectedPackage connectPackage) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.Package.ConnectPackage.Create(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,System.String,Microsoft.Health.ItemTypes.PasswordProtectedPackage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="Microsoft.Health.Web.OfflineWebApplicationConnection" />
        <Parameter Name="identityCode" Type="System.String" />
        <Parameter Name="friendlyName" Type="System.String" />
        <Parameter Name="securityQuestion" Type="System.String" />
        <Parameter Name="applicationPatientId" Type="System.String" />
        <Parameter Name="connectPackage" Type="Microsoft.Health.ItemTypes.PasswordProtectedPackage" />
      </Parameters>
      <Docs>
        <param name="connection">
             The application connection to HealthVault. The application ID in the connection is used
             when making the patient connection.
             </param>
        <param name="identityCode">
             A package identity token previously obtained from <see cref="M:Microsoft.Health.Package.ConnectPackage.AllocatePackageId(Microsoft.Health.Web.OfflineWebApplicationConnection)" />.  
             </param>
        <param name="friendlyName">
             A friendly name for the patient connection which will be shown to the user when they
             go to HealthVault Shell to validate the connection.
             </param>
        <param name="securityQuestion">
             A question (usually provided by the patient) to which the patient must provide the 
             answer when they go to validate the connection in the 
             HealthVault Shell.
             </param>
        <param name="applicationPatientId">
             The application specific identifier for the user. This identifier is used to uniquely
             identify the user in the application data storage whereas the HealthVault person ID is
             used to identify the person in HealthVault.
             </param>
        <param name="connectPackage">
             The pending connect package that the user will add to his/her record. 
             This package's
             <see cref="T:Microsoft.Health.HealthRecordItem" />'s <see cref="T:Microsoft.Health.BlobStore" /> must be an encrypted 
             blob of xml that represents a list of HealthRecordItems. This xml blob
             must be a sequence of <thing /> elements, each wrapping the XML representation of a 
             single HealthRecordItem. Each <thing /> element may be generated by calling 
             <see cref="M:Microsoft.Health.HealthRecordItem.GetItemXml" />.
             </param>
        <summary>
             Asks HealthVault to create a pending package for the application specified
             by the connection with the specified user specific parameters and the pre-allocated
             identity code.
             </summary>
        <returns>
             A token that the application must give to the patient to use when validating the
             connection request.
             </returns>
        <remarks>
             The password protected package supports 2 encryption algorithms, AES256 (recommended)
             and TripleDES. 
             <br /><br />
             For AES256, the supported key size is 256 bits, the blocksize is 256 bits, the IV 
             length is 32 bytes.
             <br /><br />
             For TripleDES, the supported key size is 192 bits, the blocksize is 64 bits, the IV 
             length is 8 bytes.
             <br /><br />
             The encryption key should be derived using the answer, the salt, and the number of hash 
             iterations. The decryption will generate this key via the 
             <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class, hence, encryption should use a similar or 
             identical process. To ensure case-insensitivity, the answer should be converted to its
             lower cased form using <see cref="M:System.String.ToLowerInvariant" /> (culturally-agnostic) 
             prior to generating the derived key.
             <br /><br />
             The algorithm used has the following parameters:
             <ul><li>Mode = CipherMode.CBC</li><li>Padding = PaddingMode.ISO10126</li></ul><br /><br />
             The salt supplied is used as the salt to the derived key as well as the key to the 
             supplied HMAC. The salt should be at least 8 bytes long.
             <br /><br />
             It is recommended that the number of hash iterations be at least 10000.
             </remarks>
        <exception cref="T:System.ArgumentNullException">
             If <paramref name="connection" /> is <b>null</b>.
             </exception>
        <exception cref="T:System.ArgumentException">
             If <paramref name="identityCode" />, <paramref name="friendlyName" />, 
             <paramref name="securityQuestion" />,
             <paramref name="applicationPatientId" />, or <paramref name="connectPackage" /> is
             <b>null</b> or empty.
             </exception>
        <exception cref="T:Microsoft.Health.HealthServiceException">
             If an error occurs when contacting HealthVault.
             </exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static string Create (Microsoft.Health.Web.OfflineWebApplicationConnection connection, string friendlyName, string securityQuestion, string securityAnswer, string applicationPatientId, System.Collections.Generic.IList&lt;Microsoft.Health.HealthRecordItem&gt; packageContents);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Create(class Microsoft.Health.Web.OfflineWebApplicationConnection connection, string friendlyName, string securityQuestion, string securityAnswer, string applicationPatientId, class System.Collections.Generic.IList`1&lt;class Microsoft.Health.HealthRecordItem&gt; packageContents) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.Package.ConnectPackage.Create(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,System.String,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="Microsoft.Health.Web.OfflineWebApplicationConnection" />
        <Parameter Name="friendlyName" Type="System.String" />
        <Parameter Name="securityQuestion" Type="System.String" />
        <Parameter Name="securityAnswer" Type="System.String" />
        <Parameter Name="applicationPatientId" Type="System.String" />
        <Parameter Name="packageContents" Type="System.Collections.Generic.IList&lt;Microsoft.Health.HealthRecordItem&gt;" />
      </Parameters>
      <Docs>
        <param name="connection">
            The application connection to HealthVault. The application ID in the connection is used
            when making the patient connection.
            </param>
        <param name="friendlyName">
            A friendly name for the patient connection which will be shown to the user when they
            go to HealthVault Shell to validate the connection.
            </param>
        <param name="securityQuestion">
            A question (usually provided by the patient) to which the patient must provide the 
            <paramref name="securityAnswer" /> when they go to validate the connection in 
            the HealthVault Shell.
            </param>
        <param name="securityAnswer">
            The answer to the <paramref name="securityQuestion" /> which the patient must use
            when adding the package to their record via HealthVault Shell. The answer is 
            case-insensitive but otherwise must match exactly. Additionally, it must be at least 
            6 characters long.
            </param>
        <param name="applicationPatientId">
            The application specific identifier for the user. This identifier is used to uniquely
            identify the user in the application data storage, whereas the HealthVault person ID is
            used to identify the person in HealthVault.
            </param>
        <param name="packageContents">
            The list of HealthRecordItems that will be encrypted and added to the package that the 
            user will claim via HealthVault Shell.
            </param>
        <summary>
            Represents a package of user data that is created by HealthVault in order
            to be retrieved by a user using the HealthVault Shell.
            </summary>
        <returns>
            A token that the application must give to the patient to use when validating the
            connection request.
            </returns>
        <remarks>
            Package encryption is delegated to the .NET Crypto classes. The encryption algorithm 
            supported by default is AES256. If TripleDES is required, the caller should create 
            the custom Password Protected Package and call <see cref="M:Microsoft.Health.Package.ConnectPackage.Create(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,Microsoft.Health.ItemTypes.PasswordProtectedPackage)" />.
            <br /><br />
            The answer key provided is not the actual key to the decryption. A key is derived using 
            the answer, the salt, and the number of hash iterations (via the 
            <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class). To ensure case-insensitivity, the answer 
            is lower cased using <see cref="M:System.String.ToLowerInvariant" /> (culturally-agnostic) 
            prior to generating the derived key.
            <br /><br />
            The algorithm used has the following parameters:
            <ul><li>Mode = CipherMode.CBC</li><li>Padding = PaddingMode.ISO10126</li></ul><br /><br />
            The salt supplied is used as the salt to the derived key as well as the key to the 
            supplied HMAC. The data must be appended to the hash, then encrypted and then Base64 
            encoded.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection" /> is <b>null</b>.
            </exception>
        <exception cref="T:System.ArgumentException">
            If <paramref name="friendlyName" />, <paramref name="securityQuestion" />,
            <paramref name="securityAnswer" />, <paramref name="applicationPatientId" /> or
            any element in <paramref name="packageContents" /> are
            <b>null</b> or empty.        
            </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="securityAnswer" /> is less than 6 characters.
            </exception>
        <exception cref="T:System.NotSupportedException">
            One of the items in <paramref name="packageContents" /> is signed and contains
            streamed blobs. This is not supported.        
            </exception>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            If an error occurs when contacting HealthVault.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CreatePackage">
      <MemberSignature Language="C#" Value="public static string CreatePackage (Microsoft.Health.Web.OfflineWebApplicationConnection connection, string identityCode, string friendlyName, string securityQuestion, string securityAnswer, string applicationPatientId, System.Collections.Generic.IList&lt;Microsoft.Health.HealthRecordItem&gt; packageContents);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string CreatePackage(class Microsoft.Health.Web.OfflineWebApplicationConnection connection, string identityCode, string friendlyName, string securityQuestion, string securityAnswer, string applicationPatientId, class System.Collections.Generic.IList`1&lt;class Microsoft.Health.HealthRecordItem&gt; packageContents) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.Package.ConnectPackage.CreatePackage(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="Microsoft.Health.Web.OfflineWebApplicationConnection" />
        <Parameter Name="identityCode" Type="System.String" />
        <Parameter Name="friendlyName" Type="System.String" />
        <Parameter Name="securityQuestion" Type="System.String" />
        <Parameter Name="securityAnswer" Type="System.String" />
        <Parameter Name="applicationPatientId" Type="System.String" />
        <Parameter Name="packageContents" Type="System.Collections.Generic.IList&lt;Microsoft.Health.HealthRecordItem&gt;" />
      </Parameters>
      <Docs>
        <param name="connection">
            The application connection to HealthVault. The application ID in the connection is used
            when making the patient connection.
            </param>
        <param name="identityCode">
            The application unique identifier of the package.
            </param>
        <param name="friendlyName">
            A friendly name for the patient connection which will be shown to the user when they
            go to HealthVault Shell to validate the connection.
            </param>
        <param name="securityQuestion">
            A question (usually provided by the patient) to which the patient must provide the 
            <paramref name="securityAnswer" /> when they go to validate the connection in 
            the HealthVault Shell.
            </param>
        <param name="securityAnswer">
            The answer to the <paramref name="securityQuestion" /> which the patient must use
            when adding the package to their record via HealthVault Shell. The answer is 
            case-insensitive but otherwise must match exactly. Additionally, it must be at least 
            6 characters long.
            </param>
        <param name="applicationPatientId">
            The application specific identifier for the user. This identifier is used to uniquely
            identify the user in the application data storage, whereas the HealthVault person ID is
            used to identify the person in HealthVault.
            </param>
        <param name="packageContents">
            The list of HealthRecordItems that will be encrypted and added to the package that the 
            user will claim via HealthVault Shell.
            </param>
        <summary>
            Asks HealthVault to create a pending package for the application specified
            by the connection with the specified user specific parameters.
            </summary>
        <returns>
            A token that the application must give to the patient to use when validating the
            connection request.
            </returns>
        <remarks>
            The encryption is delegated to the .NET Crypto classes. The encryption algorithm 
            supported by default is AES256. If TripleDES is required, the caller should create 
            the custom Password Protected Package and call <see cref="M:Microsoft.Health.Package.ConnectPackage.Create(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,Microsoft.Health.ItemTypes.PasswordProtectedPackage)" />.
            <br /><br />
            The answer key provided is not the actual key to the decryption. A key is derived using 
            the answer, the salt, and the number of hash iterations (via the 
            <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class). To ensure case-insensitivity, the answer 
            is lower cased using <see cref="M:System.String.ToLowerInvariant" /> (culturally-agnostic) 
            prior to generating the derived key.
            <br /><br />
            The algorithm used has the following parameters:
            <ul><li>Mode = CipherMode.CBC</li><li>Padding = PaddingMode.ISO10126</li></ul><br /><br />
            The salt supplied is used as the salt to the derived key as well as the key to the 
            supplied HMAC. The data must be appended to the hash, then encrypted and then Base64 
            encoded.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection" /> is <b>null</b>.
            </exception>
        <exception cref="T:System.ArgumentException">
            If <paramref name="identityCode" />, <paramref name="friendlyName" />, <paramref name="securityQuestion" />,
            <paramref name="securityAnswer" />, <paramref name="applicationPatientId" /> or
            any element in <paramref name="packageContents" /> are
            <b>null</b> or empty.
            </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="securityAnswer" /> is less than 6 characters.
            </exception>
        <exception cref="T:System.NotSupportedException">
            One of the items in <paramref name="packageContents" /> is signed and contains
            streamed blobs. This is not supported.
            </exception>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            If an error occurs when contacting HealthVault.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="DeletePending">
      <MemberSignature Language="C#" Value="public static void DeletePending (Microsoft.Health.Web.OfflineWebApplicationConnection connection, string applicationPatientId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeletePending(class Microsoft.Health.Web.OfflineWebApplicationConnection connection, string applicationPatientId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.Package.ConnectPackage.DeletePending(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="Microsoft.Health.Web.OfflineWebApplicationConnection" />
        <Parameter Name="applicationPatientId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connection">
            The connection to HealthVault to use for this operation. 
            </param>
        <param name="applicationPatientId">
            The application specific user ID that was used to create the connection 
            request.
            </param>
        <summary>
            Deletes all packages that have been created by the calling application 
            for the applicationPatientId and have not been accepted by the user.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection" /> is <b>null</b>.
            </exception>
        <exception cref="T:System.ArgumentException">
            If <paramref name="applicationPatientId" /> is <b>null</b> or empty.
            </exception>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            If an error occurs when contacting HealthVault.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="DeletePendingForIdentityCode">
      <MemberSignature Language="C#" Value="public static void DeletePendingForIdentityCode (Microsoft.Health.Web.OfflineWebApplicationConnection connection, string identityCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeletePendingForIdentityCode(class Microsoft.Health.Web.OfflineWebApplicationConnection connection, string identityCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.Package.ConnectPackage.DeletePendingForIdentityCode(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="Microsoft.Health.Web.OfflineWebApplicationConnection" />
        <Parameter Name="identityCode" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connection">
            The connection to HealthVault to use for this operation. 
            </param>
        <param name="identityCode">
            The unique token that identifies the package.
            </param>
        <summary>
            Deletes a single package that has been created by the calling application but has not been 
            accepted by the user.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection" /> is <b>null</b>.
            </exception>
        <exception cref="T:System.ArgumentException">
            If <paramref name="identityCode" /> is <b>null</b> or empty.
            </exception>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            If an error occurs when contacting HealthVault.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateApplicationPatientId">
      <MemberSignature Language="C#" Value="public static void UpdateApplicationPatientId (Microsoft.Health.Web.OfflineWebApplicationConnection connection, string oldApplicationPatientId, string newApplicationPatientId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UpdateApplicationPatientId(class Microsoft.Health.Web.OfflineWebApplicationConnection connection, string oldApplicationPatientId, string newApplicationPatientId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.Package.ConnectPackage.UpdateApplicationPatientId(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="Microsoft.Health.Web.OfflineWebApplicationConnection" />
        <Parameter Name="oldApplicationPatientId" Type="System.String" />
        <Parameter Name="newApplicationPatientId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connection">
            The HealthVault connection to use for the operation.
            </param>
        <param name="oldApplicationPatientId">
            The application patient identifier that was used to create the initial package.
            </param>
        <param name="newApplicationPatientId">
            The new application patient identifier.
            </param>
        <summary>
            Updates existing pending packages with a new application patient identifier.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection" /> is <b>null</b>.
            </exception>
        <exception cref="T:System.ArgumentException">
            If <paramref name="oldApplicationPatientId" /> or <paramref name="newApplicationPatientId" />
            is <b>null</b> or empty.
            </exception>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            If an error occurs when contacting HealthVault.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateApplicationPatientIdForIdentityCode">
      <MemberSignature Language="C#" Value="public static void UpdateApplicationPatientIdForIdentityCode (Microsoft.Health.Web.OfflineWebApplicationConnection connection, string identityCode, string newApplicationPatientId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UpdateApplicationPatientIdForIdentityCode(class Microsoft.Health.Web.OfflineWebApplicationConnection connection, string identityCode, string newApplicationPatientId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.Package.ConnectPackage.UpdateApplicationPatientIdForIdentityCode(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="Microsoft.Health.Web.OfflineWebApplicationConnection" />
        <Parameter Name="identityCode" Type="System.String" />
        <Parameter Name="newApplicationPatientId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connection">
            The HealthVault connection to use for the operation.
            </param>
        <param name="identityCode">
            The unique token that identifies the package.
            </param>
        <param name="newApplicationPatientId">
            The new application patient identifier.
            </param>
        <summary>
            Updates an existing pending package with a new application patient identifier.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection" /> is <b>null</b>.
            </exception>
        <exception cref="T:System.ArgumentException">
            If <paramref name="newApplicationPatientId" />
            is <b>null</b> or empty.
            </exception>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            If an error occurs when contacting HealthVault.
            </exception>
      </Docs>
    </Member>
  </Members>
</Type>