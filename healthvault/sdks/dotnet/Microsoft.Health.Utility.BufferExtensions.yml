### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.Utility.BufferExtensions
  commentId: T:Microsoft.Health.Utility.BufferExtensions
  id: BufferExtensions
  parent: Microsoft.Health.Utility
  children:
  - Microsoft.Health.Utility.BufferExtensions.Read(System.Byte[],System.Int32@,System.Byte[],System.Int32,System.Int32)
  - Microsoft.Health.Utility.BufferExtensions.Read(System.Byte[],System.Int32@,System.Char[],System.Int32,System.Int32,System.Text.Encoding)
  - Microsoft.Health.Utility.BufferExtensions.Read7BitEncodedInt(System.Byte[],System.Int32@)
  - Microsoft.Health.Utility.BufferExtensions.ReadBoolean(System.Byte[],System.Int32@)
  - Microsoft.Health.Utility.BufferExtensions.ReadBufferSegment(System.Byte[],System.Int32@,System.Int32)
  - Microsoft.Health.Utility.BufferExtensions.ReadByte(System.Byte[],System.Int32@)
  - Microsoft.Health.Utility.BufferExtensions.ReadBytes(System.Byte[],System.Int32@,System.Int32)
  - Microsoft.Health.Utility.BufferExtensions.ReadChars(System.Byte[],System.Int32@,System.Int32,System.Text.Encoding)
  - Microsoft.Health.Utility.BufferExtensions.ReadDecimal(System.Byte[],System.Int32@)
  - Microsoft.Health.Utility.BufferExtensions.ReadDouble(System.Byte[],System.Int32@)
  - Microsoft.Health.Utility.BufferExtensions.ReadGuid(System.Byte[],System.Int32@)
  - Microsoft.Health.Utility.BufferExtensions.ReadInt16(System.Byte[],System.Int32@)
  - Microsoft.Health.Utility.BufferExtensions.ReadInt32(System.Byte[],System.Int32@)
  - Microsoft.Health.Utility.BufferExtensions.ReadInt64(System.Byte[],System.Int32@)
  - Microsoft.Health.Utility.BufferExtensions.ReadSByte(System.Byte[],System.Int32@)
  - Microsoft.Health.Utility.BufferExtensions.ReadSingle(System.Byte[],System.Int32@)
  - Microsoft.Health.Utility.BufferExtensions.ReadString(System.Byte[],System.Int32@,System.Text.Encoding)
  - Microsoft.Health.Utility.BufferExtensions.ReadUInt16(System.Byte[],System.Int32@)
  - Microsoft.Health.Utility.BufferExtensions.ReadUInt32(System.Byte[],System.Int32@)
  - Microsoft.Health.Utility.BufferExtensions.ReadUInt64(System.Byte[],System.Int32@)
  - Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,Microsoft.Health.Utility.BufferSegment)
  - Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.Boolean)
  - Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.Byte)
  - Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.Byte[])
  - Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.Byte[],System.Int32,System.Int32)
  - Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.Char[],System.Int32,System.Int32,System.Text.Encoding)
  - Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.Char[],System.Text.Encoding)
  - Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.Decimal)
  - Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.Double)
  - Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.Guid)
  - Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.Int16)
  - Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.Int32)
  - Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.Int64)
  - Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.SByte)
  - Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.Single)
  - Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.String,System.Text.Encoding)
  - Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.UInt16)
  - Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.UInt32)
  - Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.UInt64)
  - Microsoft.Health.Utility.BufferExtensions.Write7BitEncodedInt(System.Byte[],System.Int32@,System.Int32)
  langs:
  - csharp
  - vb
  name: BufferExtensions
  nameWithType: BufferExtensions
  fullName: Microsoft.Health.Utility.BufferExtensions
  type: Class
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BufferExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: BufferExtensions
    path: ../Microsoft.Health.Utility/utilities/BufferExtensions.cs
    startLine: 15
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nExtension methods providing BinaryReader/BinaryWriter compatible methods over byte array.\n"
  example: []
  syntax:
    content: public static class BufferExtensions
    content.vb: Public Module BufferExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Health.Utility.BufferExtensions.ReadBoolean(System.Byte[],System.Int32@)
  commentId: M:Microsoft.Health.Utility.BufferExtensions.ReadBoolean(System.Byte[],System.Int32@)
  id: ReadBoolean(System.Byte[],System.Int32@)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BufferExtensions
  langs:
  - csharp
  - vb
  name: ReadBoolean(Byte[], ref Int32)
  nameWithType: BufferExtensions.ReadBoolean(Byte[], ref Int32)
  fullName: Microsoft.Health.Utility.BufferExtensions.ReadBoolean(System.Byte[], ref System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BufferExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ReadBoolean
    path: ../Microsoft.Health.Utility/utilities/BufferExtensions.cs
    startLine: 25
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nReads a Boolean value and advances the current position by one byte.\n"
  example: []
  syntax:
    content: public static bool ReadBoolean(this byte[] source, ref int offset)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ReadBoolean(source As Byte(), ByRef offset As Integer) As Boolean
    parameters:
    - id: source
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    return:
      type: System.Boolean
      description: True if the byte is nonzero; otherwise, false.
  overload: Microsoft.Health.Utility.BufferExtensions.ReadBoolean*
  nameWithType.vb: BufferExtensions.ReadBoolean(Byte(), ByRef Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BufferExtensions.ReadBoolean(System.Byte(), ByRef System.Int32)
  name.vb: ReadBoolean(Byte(), ByRef Int32)
- uid: Microsoft.Health.Utility.BufferExtensions.ReadByte(System.Byte[],System.Int32@)
  commentId: M:Microsoft.Health.Utility.BufferExtensions.ReadByte(System.Byte[],System.Int32@)
  id: ReadByte(System.Byte[],System.Int32@)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BufferExtensions
  langs:
  - csharp
  - vb
  name: ReadByte(Byte[], ref Int32)
  nameWithType: BufferExtensions.ReadByte(Byte[], ref Int32)
  fullName: Microsoft.Health.Utility.BufferExtensions.ReadByte(System.Byte[], ref System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BufferExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ReadByte
    path: ../Microsoft.Health.Utility/utilities/BufferExtensions.cs
    startLine: 37
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nReads the next byte and advances the current position by one byte.\n"
  example: []
  syntax:
    content: public static byte ReadByte(this byte[] source, ref int offset)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ReadByte(source As Byte(), ByRef offset As Integer) As Byte
    parameters:
    - id: source
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    return:
      type: System.Byte
      description: The next byte read.
  overload: Microsoft.Health.Utility.BufferExtensions.ReadByte*
  nameWithType.vb: BufferExtensions.ReadByte(Byte(), ByRef Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BufferExtensions.ReadByte(System.Byte(), ByRef System.Int32)
  name.vb: ReadByte(Byte(), ByRef Int32)
- uid: Microsoft.Health.Utility.BufferExtensions.ReadSByte(System.Byte[],System.Int32@)
  commentId: M:Microsoft.Health.Utility.BufferExtensions.ReadSByte(System.Byte[],System.Int32@)
  id: ReadSByte(System.Byte[],System.Int32@)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BufferExtensions
  langs:
  - csharp
  - vb
  name: ReadSByte(Byte[], ref Int32)
  nameWithType: BufferExtensions.ReadSByte(Byte[], ref Int32)
  fullName: Microsoft.Health.Utility.BufferExtensions.ReadSByte(System.Byte[], ref System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BufferExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ReadSByte
    path: ../Microsoft.Health.Utility/utilities/BufferExtensions.cs
    startLine: 49
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nReads a signed byte value and advances the current position by one bytes.\n"
  example: []
  syntax:
    content: public static sbyte ReadSByte(this byte[] source, ref int offset)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ReadSByte(source As Byte(), ByRef offset As Integer) As SByte
    parameters:
    - id: source
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    return:
      type: System.SByte
      description: A signed byte read.
  overload: Microsoft.Health.Utility.BufferExtensions.ReadSByte*
  nameWithType.vb: BufferExtensions.ReadSByte(Byte(), ByRef Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BufferExtensions.ReadSByte(System.Byte(), ByRef System.Int32)
  name.vb: ReadSByte(Byte(), ByRef Int32)
- uid: Microsoft.Health.Utility.BufferExtensions.ReadInt16(System.Byte[],System.Int32@)
  commentId: M:Microsoft.Health.Utility.BufferExtensions.ReadInt16(System.Byte[],System.Int32@)
  id: ReadInt16(System.Byte[],System.Int32@)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BufferExtensions
  langs:
  - csharp
  - vb
  name: ReadInt16(Byte[], ref Int32)
  nameWithType: BufferExtensions.ReadInt16(Byte[], ref Int32)
  fullName: Microsoft.Health.Utility.BufferExtensions.ReadInt16(System.Byte[], ref System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BufferExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ReadInt16
    path: ../Microsoft.Health.Utility/utilities/BufferExtensions.cs
    startLine: 61
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nReads a 2-byte signed integer value and advances the current position by two bytes.\n"
  example: []
  syntax:
    content: public static short ReadInt16(this byte[] source, ref int offset)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ReadInt16(source As Byte(), ByRef offset As Integer) As Short
    parameters:
    - id: source
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    return:
      type: System.Int16
      description: A 2-byte signed integer read.
  overload: Microsoft.Health.Utility.BufferExtensions.ReadInt16*
  nameWithType.vb: BufferExtensions.ReadInt16(Byte(), ByRef Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BufferExtensions.ReadInt16(System.Byte(), ByRef System.Int32)
  name.vb: ReadInt16(Byte(), ByRef Int32)
- uid: Microsoft.Health.Utility.BufferExtensions.ReadUInt16(System.Byte[],System.Int32@)
  commentId: M:Microsoft.Health.Utility.BufferExtensions.ReadUInt16(System.Byte[],System.Int32@)
  id: ReadUInt16(System.Byte[],System.Int32@)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BufferExtensions
  langs:
  - csharp
  - vb
  name: ReadUInt16(Byte[], ref Int32)
  nameWithType: BufferExtensions.ReadUInt16(Byte[], ref Int32)
  fullName: Microsoft.Health.Utility.BufferExtensions.ReadUInt16(System.Byte[], ref System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BufferExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ReadUInt16
    path: ../Microsoft.Health.Utility/utilities/BufferExtensions.cs
    startLine: 73
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nReads a 2-byte unsigned integer value and advances the current position by two bytes.\n"
  example: []
  syntax:
    content: public static ushort ReadUInt16(this byte[] source, ref int offset)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ReadUInt16(source As Byte(), ByRef offset As Integer) As UShort
    parameters:
    - id: source
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    return:
      type: System.UInt16
      description: A 2-byte unsigned integer read.
  overload: Microsoft.Health.Utility.BufferExtensions.ReadUInt16*
  nameWithType.vb: BufferExtensions.ReadUInt16(Byte(), ByRef Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BufferExtensions.ReadUInt16(System.Byte(), ByRef System.Int32)
  name.vb: ReadUInt16(Byte(), ByRef Int32)
- uid: Microsoft.Health.Utility.BufferExtensions.ReadInt32(System.Byte[],System.Int32@)
  commentId: M:Microsoft.Health.Utility.BufferExtensions.ReadInt32(System.Byte[],System.Int32@)
  id: ReadInt32(System.Byte[],System.Int32@)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BufferExtensions
  langs:
  - csharp
  - vb
  name: ReadInt32(Byte[], ref Int32)
  nameWithType: BufferExtensions.ReadInt32(Byte[], ref Int32)
  fullName: Microsoft.Health.Utility.BufferExtensions.ReadInt32(System.Byte[], ref System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BufferExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ReadInt32
    path: ../Microsoft.Health.Utility/utilities/BufferExtensions.cs
    startLine: 85
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nReads a 4-byte signed integer value and advances the current position by four bytes.\n"
  example: []
  syntax:
    content: public static int ReadInt32(this byte[] source, ref int offset)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ReadInt32(source As Byte(), ByRef offset As Integer) As Integer
    parameters:
    - id: source
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    return:
      type: System.Int32
      description: A 4-byte signed integer read.
  overload: Microsoft.Health.Utility.BufferExtensions.ReadInt32*
  nameWithType.vb: BufferExtensions.ReadInt32(Byte(), ByRef Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BufferExtensions.ReadInt32(System.Byte(), ByRef System.Int32)
  name.vb: ReadInt32(Byte(), ByRef Int32)
- uid: Microsoft.Health.Utility.BufferExtensions.ReadUInt32(System.Byte[],System.Int32@)
  commentId: M:Microsoft.Health.Utility.BufferExtensions.ReadUInt32(System.Byte[],System.Int32@)
  id: ReadUInt32(System.Byte[],System.Int32@)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BufferExtensions
  langs:
  - csharp
  - vb
  name: ReadUInt32(Byte[], ref Int32)
  nameWithType: BufferExtensions.ReadUInt32(Byte[], ref Int32)
  fullName: Microsoft.Health.Utility.BufferExtensions.ReadUInt32(System.Byte[], ref System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BufferExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ReadUInt32
    path: ../Microsoft.Health.Utility/utilities/BufferExtensions.cs
    startLine: 97
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nReads a 4-byte unsigned integer value and advances the current position by two bytes.\n"
  example: []
  syntax:
    content: public static uint ReadUInt32(this byte[] source, ref int offset)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ReadUInt32(source As Byte(), ByRef offset As Integer) As UInteger
    parameters:
    - id: source
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    return:
      type: System.UInt32
      description: A 4-byte unsigned integer read.
  overload: Microsoft.Health.Utility.BufferExtensions.ReadUInt32*
  nameWithType.vb: BufferExtensions.ReadUInt32(Byte(), ByRef Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BufferExtensions.ReadUInt32(System.Byte(), ByRef System.Int32)
  name.vb: ReadUInt32(Byte(), ByRef Int32)
- uid: Microsoft.Health.Utility.BufferExtensions.ReadInt64(System.Byte[],System.Int32@)
  commentId: M:Microsoft.Health.Utility.BufferExtensions.ReadInt64(System.Byte[],System.Int32@)
  id: ReadInt64(System.Byte[],System.Int32@)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BufferExtensions
  langs:
  - csharp
  - vb
  name: ReadInt64(Byte[], ref Int32)
  nameWithType: BufferExtensions.ReadInt64(Byte[], ref Int32)
  fullName: Microsoft.Health.Utility.BufferExtensions.ReadInt64(System.Byte[], ref System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BufferExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ReadInt64
    path: ../Microsoft.Health.Utility/utilities/BufferExtensions.cs
    startLine: 109
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nReads an 8-byte signed integer value and advances the current position by eight bytes.\n"
  example: []
  syntax:
    content: public static long ReadInt64(this byte[] source, ref int offset)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ReadInt64(source As Byte(), ByRef offset As Integer) As Long
    parameters:
    - id: source
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    return:
      type: System.Int64
      description: An 8-byte signed integer read.
  overload: Microsoft.Health.Utility.BufferExtensions.ReadInt64*
  nameWithType.vb: BufferExtensions.ReadInt64(Byte(), ByRef Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BufferExtensions.ReadInt64(System.Byte(), ByRef System.Int32)
  name.vb: ReadInt64(Byte(), ByRef Int32)
- uid: Microsoft.Health.Utility.BufferExtensions.ReadUInt64(System.Byte[],System.Int32@)
  commentId: M:Microsoft.Health.Utility.BufferExtensions.ReadUInt64(System.Byte[],System.Int32@)
  id: ReadUInt64(System.Byte[],System.Int32@)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BufferExtensions
  langs:
  - csharp
  - vb
  name: ReadUInt64(Byte[], ref Int32)
  nameWithType: BufferExtensions.ReadUInt64(Byte[], ref Int32)
  fullName: Microsoft.Health.Utility.BufferExtensions.ReadUInt64(System.Byte[], ref System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BufferExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ReadUInt64
    path: ../Microsoft.Health.Utility/utilities/BufferExtensions.cs
    startLine: 123
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nReads a 4-byte unsigned integer value and advances the current position by two bytes.\n"
  example: []
  syntax:
    content: public static ulong ReadUInt64(this byte[] source, ref int offset)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ReadUInt64(source As Byte(), ByRef offset As Integer) As ULong
    parameters:
    - id: source
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    return:
      type: System.UInt64
      description: A 4-byte unsigned integer read.
  overload: Microsoft.Health.Utility.BufferExtensions.ReadUInt64*
  nameWithType.vb: BufferExtensions.ReadUInt64(Byte(), ByRef Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BufferExtensions.ReadUInt64(System.Byte(), ByRef System.Int32)
  name.vb: ReadUInt64(Byte(), ByRef Int32)
- uid: Microsoft.Health.Utility.BufferExtensions.ReadSingle(System.Byte[],System.Int32@)
  commentId: M:Microsoft.Health.Utility.BufferExtensions.ReadSingle(System.Byte[],System.Int32@)
  id: ReadSingle(System.Byte[],System.Int32@)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BufferExtensions
  langs:
  - csharp
  - vb
  name: ReadSingle(Byte[], ref Int32)
  nameWithType: BufferExtensions.ReadSingle(Byte[], ref Int32)
  fullName: Microsoft.Health.Utility.BufferExtensions.ReadSingle(System.Byte[], ref System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BufferExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ReadSingle
    path: ../Microsoft.Health.Utility/utilities/BufferExtensions.cs
    startLine: 137
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nReads a 4-byte floating point value and advances the current position by four bytes.\n"
  example: []
  syntax:
    content: public static float ReadSingle(this byte[] source, ref int offset)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ReadSingle(source As Byte(), ByRef offset As Integer) As Single
    parameters:
    - id: source
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    return:
      type: System.Single
      description: A 4-byte floating point read.
  overload: Microsoft.Health.Utility.BufferExtensions.ReadSingle*
  nameWithType.vb: BufferExtensions.ReadSingle(Byte(), ByRef Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BufferExtensions.ReadSingle(System.Byte(), ByRef System.Int32)
  name.vb: ReadSingle(Byte(), ByRef Int32)
- uid: Microsoft.Health.Utility.BufferExtensions.ReadDouble(System.Byte[],System.Int32@)
  commentId: M:Microsoft.Health.Utility.BufferExtensions.ReadDouble(System.Byte[],System.Int32@)
  id: ReadDouble(System.Byte[],System.Int32@)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BufferExtensions
  langs:
  - csharp
  - vb
  name: ReadDouble(Byte[], ref Int32)
  nameWithType: BufferExtensions.ReadDouble(Byte[], ref Int32)
  fullName: Microsoft.Health.Utility.BufferExtensions.ReadDouble(System.Byte[], ref System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BufferExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ReadDouble
    path: ../Microsoft.Health.Utility/utilities/BufferExtensions.cs
    startLine: 151
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nReads an 8-byte floating value and advances the current position by eight bytes.\n"
  example: []
  syntax:
    content: public static double ReadDouble(this byte[] source, ref int offset)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ReadDouble(source As Byte(), ByRef offset As Integer) As Double
    parameters:
    - id: source
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    return:
      type: System.Double
      description: An 8-byte floating point value read.
  overload: Microsoft.Health.Utility.BufferExtensions.ReadDouble*
  nameWithType.vb: BufferExtensions.ReadDouble(Byte(), ByRef Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BufferExtensions.ReadDouble(System.Byte(), ByRef System.Int32)
  name.vb: ReadDouble(Byte(), ByRef Int32)
- uid: Microsoft.Health.Utility.BufferExtensions.ReadDecimal(System.Byte[],System.Int32@)
  commentId: M:Microsoft.Health.Utility.BufferExtensions.ReadDecimal(System.Byte[],System.Int32@)
  id: ReadDecimal(System.Byte[],System.Int32@)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BufferExtensions
  langs:
  - csharp
  - vb
  name: ReadDecimal(Byte[], ref Int32)
  nameWithType: BufferExtensions.ReadDecimal(Byte[], ref Int32)
  fullName: Microsoft.Health.Utility.BufferExtensions.ReadDecimal(System.Byte[], ref System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BufferExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ReadDecimal
    path: ../Microsoft.Health.Utility/utilities/BufferExtensions.cs
    startLine: 165
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nReads a decimal value and advances the current position by sixteen bytes.\n"
  example: []
  syntax:
    content: public static decimal ReadDecimal(this byte[] source, ref int offset)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ReadDecimal(source As Byte(), ByRef offset As Integer) As Decimal
    parameters:
    - id: source
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    return:
      type: System.Decimal
      description: A decimal value read.
  overload: Microsoft.Health.Utility.BufferExtensions.ReadDecimal*
  nameWithType.vb: BufferExtensions.ReadDecimal(Byte(), ByRef Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BufferExtensions.ReadDecimal(System.Byte(), ByRef System.Int32)
  name.vb: ReadDecimal(Byte(), ByRef Int32)
- uid: Microsoft.Health.Utility.BufferExtensions.ReadGuid(System.Byte[],System.Int32@)
  commentId: M:Microsoft.Health.Utility.BufferExtensions.ReadGuid(System.Byte[],System.Int32@)
  id: ReadGuid(System.Byte[],System.Int32@)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BufferExtensions
  langs:
  - csharp
  - vb
  name: ReadGuid(Byte[], ref Int32)
  nameWithType: BufferExtensions.ReadGuid(Byte[], ref Int32)
  fullName: Microsoft.Health.Utility.BufferExtensions.ReadGuid(System.Byte[], ref System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BufferExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ReadGuid
    path: ../Microsoft.Health.Utility/utilities/BufferExtensions.cs
    startLine: 181
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nReads a 16-byte Guid value and advances the current position by sixteen bytes.\n"
  example: []
  syntax:
    content: public static Guid ReadGuid(this byte[] source, ref int offset)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ReadGuid(source As Byte(), ByRef offset As Integer) As Guid
    parameters:
    - id: source
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    return:
      type: System.Guid
      description: A 16-byte Guid read.
  overload: Microsoft.Health.Utility.BufferExtensions.ReadGuid*
  nameWithType.vb: BufferExtensions.ReadGuid(Byte(), ByRef Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BufferExtensions.ReadGuid(System.Byte(), ByRef System.Int32)
  name.vb: ReadGuid(Byte(), ByRef Int32)
- uid: Microsoft.Health.Utility.BufferExtensions.Read7BitEncodedInt(System.Byte[],System.Int32@)
  commentId: M:Microsoft.Health.Utility.BufferExtensions.Read7BitEncodedInt(System.Byte[],System.Int32@)
  id: Read7BitEncodedInt(System.Byte[],System.Int32@)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BufferExtensions
  langs:
  - csharp
  - vb
  name: Read7BitEncodedInt(Byte[], ref Int32)
  nameWithType: BufferExtensions.Read7BitEncodedInt(Byte[], ref Int32)
  fullName: Microsoft.Health.Utility.BufferExtensions.Read7BitEncodedInt(System.Byte[], ref System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BufferExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Read7BitEncodedInt
    path: ../Microsoft.Health.Utility/utilities/BufferExtensions.cs
    startLine: 195
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nReads in a 32-bit integer in compressed format.\n"
  example: []
  syntax:
    content: public static int Read7BitEncodedInt(this byte[] source, ref int offset)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Read7BitEncodedInt(source As Byte(), ByRef offset As Integer) As Integer
    parameters:
    - id: source
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    return:
      type: System.Int32
      description: ''
  overload: Microsoft.Health.Utility.BufferExtensions.Read7BitEncodedInt*
  nameWithType.vb: BufferExtensions.Read7BitEncodedInt(Byte(), ByRef Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BufferExtensions.Read7BitEncodedInt(System.Byte(), ByRef System.Int32)
  name.vb: Read7BitEncodedInt(Byte(), ByRef Int32)
- uid: Microsoft.Health.Utility.BufferExtensions.ReadString(System.Byte[],System.Int32@,System.Text.Encoding)
  commentId: M:Microsoft.Health.Utility.BufferExtensions.ReadString(System.Byte[],System.Int32@,System.Text.Encoding)
  id: ReadString(System.Byte[],System.Int32@,System.Text.Encoding)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BufferExtensions
  langs:
  - csharp
  - vb
  name: ReadString(Byte[], ref Int32, Encoding)
  nameWithType: BufferExtensions.ReadString(Byte[], ref Int32, Encoding)
  fullName: Microsoft.Health.Utility.BufferExtensions.ReadString(System.Byte[], ref System.Int32, System.Text.Encoding)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BufferExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ReadString
    path: ../Microsoft.Health.Utility/utilities/BufferExtensions.cs
    startLine: 223
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nReads a string. The string is prefixed with the length, encoded as an integer seven bits at a time.\n"
  example: []
  syntax:
    content: public static string ReadString(this byte[] source, ref int offset, Encoding encoding = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ReadString(source As Byte(), ByRef offset As Integer, encoding As Encoding = Nothing) As String
    parameters:
    - id: source
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    - id: encoding
      type: System.Text.Encoding
      description: ''
    return:
      type: System.String
      description: The string being read.
  overload: Microsoft.Health.Utility.BufferExtensions.ReadString*
  nameWithType.vb: BufferExtensions.ReadString(Byte(), ByRef Int32, Encoding)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BufferExtensions.ReadString(System.Byte(), ByRef System.Int32, System.Text.Encoding)
  name.vb: ReadString(Byte(), ByRef Int32, Encoding)
- uid: Microsoft.Health.Utility.BufferExtensions.ReadBufferSegment(System.Byte[],System.Int32@,System.Int32)
  commentId: M:Microsoft.Health.Utility.BufferExtensions.ReadBufferSegment(System.Byte[],System.Int32@,System.Int32)
  id: ReadBufferSegment(System.Byte[],System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BufferExtensions
  langs:
  - csharp
  - vb
  name: ReadBufferSegment(Byte[], ref Int32, Int32)
  nameWithType: BufferExtensions.ReadBufferSegment(Byte[], ref Int32, Int32)
  fullName: Microsoft.Health.Utility.BufferExtensions.ReadBufferSegment(System.Byte[], ref System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BufferExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ReadBufferSegment
    path: ../Microsoft.Health.Utility/utilities/BufferExtensions.cs
    startLine: 254
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nReads the specified number of bytes into a BufferSegment and advances the current position by that number of bytes.\n"
  example: []
  syntax:
    content: public static BufferSegment ReadBufferSegment(this byte[] source, ref int offset, int count)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ReadBufferSegment(source As Byte(), ByRef offset As Integer, count As Integer) As BufferSegment
    parameters:
    - id: source
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    - id: count
      type: System.Int32
      description: The number of bytes to read.
    return:
      type: Microsoft.Health.Utility.BufferSegment
      description: A BufferSegment containing data read.
  overload: Microsoft.Health.Utility.BufferExtensions.ReadBufferSegment*
  nameWithType.vb: BufferExtensions.ReadBufferSegment(Byte(), ByRef Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BufferExtensions.ReadBufferSegment(System.Byte(), ByRef System.Int32, System.Int32)
  name.vb: ReadBufferSegment(Byte(), ByRef Int32, Int32)
- uid: Microsoft.Health.Utility.BufferExtensions.Read(System.Byte[],System.Int32@,System.Byte[],System.Int32,System.Int32)
  commentId: M:Microsoft.Health.Utility.BufferExtensions.Read(System.Byte[],System.Int32@,System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32@,System.Byte[],System.Int32,System.Int32)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BufferExtensions
  langs:
  - csharp
  - vb
  name: Read(Byte[], ref Int32, Byte[], Int32, Int32)
  nameWithType: BufferExtensions.Read(Byte[], ref Int32, Byte[], Int32, Int32)
  fullName: Microsoft.Health.Utility.BufferExtensions.Read(System.Byte[], ref System.Int32, System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BufferExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Read
    path: ../Microsoft.Health.Utility/utilities/BufferExtensions.cs
    startLine: 270
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nReads the specified number of bytes, into a specified point in the byte array.\n"
  example: []
  syntax:
    content: public static void Read(this byte[] source, ref int offset, byte[] buffer, int index, int count)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Read(source As Byte(), ByRef offset As Integer, buffer As Byte(), index As Integer, count As Integer)
    parameters:
    - id: source
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    - id: buffer
      type: System.Byte[]
      description: The buffer to read data into.
    - id: index
      type: System.Int32
      description: The starting point in the buffer at which to begin reading into the buffer.
    - id: count
      type: System.Int32
      description: The number of bytes to read.
  overload: Microsoft.Health.Utility.BufferExtensions.Read*
  nameWithType.vb: BufferExtensions.Read(Byte(), ByRef Int32, Byte(), Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BufferExtensions.Read(System.Byte(), ByRef System.Int32, System.Byte(), System.Int32, System.Int32)
  name.vb: Read(Byte(), ByRef Int32, Byte(), Int32, Int32)
- uid: Microsoft.Health.Utility.BufferExtensions.ReadBytes(System.Byte[],System.Int32@,System.Int32)
  commentId: M:Microsoft.Health.Utility.BufferExtensions.ReadBytes(System.Byte[],System.Int32@,System.Int32)
  id: ReadBytes(System.Byte[],System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BufferExtensions
  langs:
  - csharp
  - vb
  name: ReadBytes(Byte[], ref Int32, Int32)
  nameWithType: BufferExtensions.ReadBytes(Byte[], ref Int32, Int32)
  fullName: Microsoft.Health.Utility.BufferExtensions.ReadBytes(System.Byte[], ref System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BufferExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ReadBytes
    path: ../Microsoft.Health.Utility/utilities/BufferExtensions.cs
    startLine: 284
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nReads the specified number of bytes into a byte array and advances the current position by that number of bytes.\n"
  example: []
  syntax:
    content: public static byte[] ReadBytes(this byte[] source, ref int offset, int count)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ReadBytes(source As Byte(), ByRef offset As Integer, count As Integer) As Byte()
    parameters:
    - id: source
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    - id: count
      type: System.Int32
      description: The number of bytes to read.
    return:
      type: System.Byte[]
      description: A byte array containing data read.
  overload: Microsoft.Health.Utility.BufferExtensions.ReadBytes*
  nameWithType.vb: BufferExtensions.ReadBytes(Byte(), ByRef Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BufferExtensions.ReadBytes(System.Byte(), ByRef System.Int32, System.Int32)
  name.vb: ReadBytes(Byte(), ByRef Int32, Int32)
- uid: Microsoft.Health.Utility.BufferExtensions.Read(System.Byte[],System.Int32@,System.Char[],System.Int32,System.Int32,System.Text.Encoding)
  commentId: M:Microsoft.Health.Utility.BufferExtensions.Read(System.Byte[],System.Int32@,System.Char[],System.Int32,System.Int32,System.Text.Encoding)
  id: Read(System.Byte[],System.Int32@,System.Char[],System.Int32,System.Int32,System.Text.Encoding)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BufferExtensions
  langs:
  - csharp
  - vb
  name: Read(Byte[], ref Int32, Char[], Int32, Int32, Encoding)
  nameWithType: BufferExtensions.Read(Byte[], ref Int32, Char[], Int32, Int32, Encoding)
  fullName: Microsoft.Health.Utility.BufferExtensions.Read(System.Byte[], ref System.Int32, System.Char[], System.Int32, System.Int32, System.Text.Encoding)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BufferExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Read
    path: ../Microsoft.Health.Utility/utilities/BufferExtensions.cs
    startLine: 300
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nReads the specified number of characters, into a specified point in the character array.\n"
  example: []
  syntax:
    content: public static void Read(this byte[] source, ref int offset, char[] buffer, int index, int count, Encoding encoding = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Read(source As Byte(), ByRef offset As Integer, buffer As Char(), index As Integer, count As Integer, encoding As Encoding = Nothing)
    parameters:
    - id: source
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    - id: buffer
      type: System.Char[]
      description: The buffer to read data into.
    - id: index
      type: System.Int32
      description: The starting point in the buffer at which to begin reading into the buffer.
    - id: count
      type: System.Int32
      description: The number of bytes to read.
    - id: encoding
      type: System.Text.Encoding
  overload: Microsoft.Health.Utility.BufferExtensions.Read*
  nameWithType.vb: BufferExtensions.Read(Byte(), ByRef Int32, Char(), Int32, Int32, Encoding)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BufferExtensions.Read(System.Byte(), ByRef System.Int32, System.Char(), System.Int32, System.Int32, System.Text.Encoding)
  name.vb: Read(Byte(), ByRef Int32, Char(), Int32, Int32, Encoding)
- uid: Microsoft.Health.Utility.BufferExtensions.ReadChars(System.Byte[],System.Int32@,System.Int32,System.Text.Encoding)
  commentId: M:Microsoft.Health.Utility.BufferExtensions.ReadChars(System.Byte[],System.Int32@,System.Int32,System.Text.Encoding)
  id: ReadChars(System.Byte[],System.Int32@,System.Int32,System.Text.Encoding)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BufferExtensions
  langs:
  - csharp
  - vb
  name: ReadChars(Byte[], ref Int32, Int32, Encoding)
  nameWithType: BufferExtensions.ReadChars(Byte[], ref Int32, Int32, Encoding)
  fullName: Microsoft.Health.Utility.BufferExtensions.ReadChars(System.Byte[], ref System.Int32, System.Int32, System.Text.Encoding)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BufferExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ReadChars
    path: ../Microsoft.Health.Utility/utilities/BufferExtensions.cs
    startLine: 321
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nReads the specified number of characters, returns the data in a character array,\nand advances the current position by specified number of bytes.\n"
  example: []
  syntax:
    content: public static char[] ReadChars(this byte[] source, ref int offset, int count, Encoding encoding = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ReadChars(source As Byte(), ByRef offset As Integer, count As Integer, encoding As Encoding = Nothing) As Char()
    parameters:
    - id: source
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    - id: count
      type: System.Int32
      description: ''
    - id: encoding
      type: System.Text.Encoding
      description: The number of bytes to read.
    return:
      type: System.Char[]
      description: A character array containing data read.
  overload: Microsoft.Health.Utility.BufferExtensions.ReadChars*
  nameWithType.vb: BufferExtensions.ReadChars(Byte(), ByRef Int32, Int32, Encoding)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BufferExtensions.ReadChars(System.Byte(), ByRef System.Int32, System.Int32, System.Text.Encoding)
  name.vb: ReadChars(Byte(), ByRef Int32, Int32, Encoding)
- uid: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.Boolean)
  commentId: M:Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.Boolean)
  id: Write(System.Byte[],System.Int32@,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BufferExtensions
  langs:
  - csharp
  - vb
  name: Write(Byte[], ref Int32, Boolean)
  nameWithType: BufferExtensions.Write(Byte[], ref Int32, Boolean)
  fullName: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[], ref System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BufferExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Write
    path: ../Microsoft.Health.Utility/utilities/BufferExtensions.cs
    startLine: 344
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nWrites a one-byte Boolean value, with 0 representing false and 1 representing true.\n"
  example: []
  syntax:
    content: public static void Write(this byte[] destination, ref int offset, bool value)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Write(destination As Byte(), ByRef offset As Integer, value As Boolean)
    parameters:
    - id: destination
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    - id: value
      type: System.Boolean
      description: The Boolean value to write (0 or 1).
  overload: Microsoft.Health.Utility.BufferExtensions.Write*
  nameWithType.vb: BufferExtensions.Write(Byte(), ByRef Int32, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte(), ByRef System.Int32, System.Boolean)
  name.vb: Write(Byte(), ByRef Int32, Boolean)
- uid: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.Byte)
  commentId: M:Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.Byte)
  id: Write(System.Byte[],System.Int32@,System.Byte)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BufferExtensions
  langs:
  - csharp
  - vb
  name: Write(Byte[], ref Int32, Byte)
  nameWithType: BufferExtensions.Write(Byte[], ref Int32, Byte)
  fullName: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[], ref System.Int32, System.Byte)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BufferExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Write
    path: ../Microsoft.Health.Utility/utilities/BufferExtensions.cs
    startLine: 357
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nWrites an unsigned byte and advances the current position by one byte.\n"
  example: []
  syntax:
    content: public static void Write(this byte[] destination, ref int offset, byte value)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Write(destination As Byte(), ByRef offset As Integer, value As Byte)
    parameters:
    - id: destination
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    - id: value
      type: System.Byte
      description: The unsigned byte to write.
  overload: Microsoft.Health.Utility.BufferExtensions.Write*
  nameWithType.vb: BufferExtensions.Write(Byte(), ByRef Int32, Byte)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte(), ByRef System.Int32, System.Byte)
  name.vb: Write(Byte(), ByRef Int32, Byte)
- uid: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.SByte)
  commentId: M:Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.SByte)
  id: Write(System.Byte[],System.Int32@,System.SByte)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BufferExtensions
  langs:
  - csharp
  - vb
  name: Write(Byte[], ref Int32, SByte)
  nameWithType: BufferExtensions.Write(Byte[], ref Int32, SByte)
  fullName: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[], ref System.Int32, System.SByte)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BufferExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Write
    path: ../Microsoft.Health.Utility/utilities/BufferExtensions.cs
    startLine: 369
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nWrites a signed byte and advances the current position by one byte.\n"
  example: []
  syntax:
    content: public static void Write(this byte[] destination, ref int offset, sbyte value)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Write(destination As Byte(), ByRef offset As Integer, value As SByte)
    parameters:
    - id: destination
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    - id: value
      type: System.SByte
      description: The signed byte to write.
  overload: Microsoft.Health.Utility.BufferExtensions.Write*
  nameWithType.vb: BufferExtensions.Write(Byte(), ByRef Int32, SByte)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte(), ByRef System.Int32, System.SByte)
  name.vb: Write(Byte(), ByRef Int32, SByte)
- uid: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.Int16)
  commentId: M:Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.Int16)
  id: Write(System.Byte[],System.Int32@,System.Int16)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BufferExtensions
  langs:
  - csharp
  - vb
  name: Write(Byte[], ref Int32, Int16)
  nameWithType: BufferExtensions.Write(Byte[], ref Int32, Int16)
  fullName: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[], ref System.Int32, System.Int16)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BufferExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Write
    path: ../Microsoft.Health.Utility/utilities/BufferExtensions.cs
    startLine: 381
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nWrites a 2-byte signed integer and advances the current position by two bytes.\n"
  example: []
  syntax:
    content: public static void Write(this byte[] destination, ref int offset, short value)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Write(destination As Byte(), ByRef offset As Integer, value As Short)
    parameters:
    - id: destination
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    - id: value
      type: System.Int16
      description: The 2-byte unsigned integer to write.
  overload: Microsoft.Health.Utility.BufferExtensions.Write*
  nameWithType.vb: BufferExtensions.Write(Byte(), ByRef Int32, Int16)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte(), ByRef System.Int32, System.Int16)
  name.vb: Write(Byte(), ByRef Int32, Int16)
- uid: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.UInt16)
  commentId: M:Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.UInt16)
  id: Write(System.Byte[],System.Int32@,System.UInt16)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BufferExtensions
  langs:
  - csharp
  - vb
  name: Write(Byte[], ref Int32, UInt16)
  nameWithType: BufferExtensions.Write(Byte[], ref Int32, UInt16)
  fullName: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[], ref System.Int32, System.UInt16)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BufferExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Write
    path: ../Microsoft.Health.Utility/utilities/BufferExtensions.cs
    startLine: 394
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nWrites a 2-byte unsigned integer and advances the current position by two bytes.\n"
  example: []
  syntax:
    content: public static void Write(this byte[] destination, ref int offset, ushort value)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Write(destination As Byte(), ByRef offset As Integer, value As UShort)
    parameters:
    - id: destination
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    - id: value
      type: System.UInt16
      description: The 2-byte unsigned integer to write.
  overload: Microsoft.Health.Utility.BufferExtensions.Write*
  nameWithType.vb: BufferExtensions.Write(Byte(), ByRef Int32, UInt16)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte(), ByRef System.Int32, System.UInt16)
  name.vb: Write(Byte(), ByRef Int32, UInt16)
- uid: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.Int32)
  commentId: M:Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.Int32)
  id: Write(System.Byte[],System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BufferExtensions
  langs:
  - csharp
  - vb
  name: Write(Byte[], ref Int32, Int32)
  nameWithType: BufferExtensions.Write(Byte[], ref Int32, Int32)
  fullName: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[], ref System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BufferExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Write
    path: ../Microsoft.Health.Utility/utilities/BufferExtensions.cs
    startLine: 407
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nWrites a 4-byte signed integer and advances the current position by four bytes.\n"
  example: []
  syntax:
    content: public static void Write(this byte[] destination, ref int offset, int value)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Write(destination As Byte(), ByRef offset As Integer, value As Integer)
    parameters:
    - id: destination
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    - id: value
      type: System.Int32
      description: The 4-byte unsigned integer to write.
  overload: Microsoft.Health.Utility.BufferExtensions.Write*
  nameWithType.vb: BufferExtensions.Write(Byte(), ByRef Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte(), ByRef System.Int32, System.Int32)
  name.vb: Write(Byte(), ByRef Int32, Int32)
- uid: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.UInt32)
  commentId: M:Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.UInt32)
  id: Write(System.Byte[],System.Int32@,System.UInt32)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BufferExtensions
  langs:
  - csharp
  - vb
  name: Write(Byte[], ref Int32, UInt32)
  nameWithType: BufferExtensions.Write(Byte[], ref Int32, UInt32)
  fullName: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[], ref System.Int32, System.UInt32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BufferExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Write
    path: ../Microsoft.Health.Utility/utilities/BufferExtensions.cs
    startLine: 422
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nWrites a 4-byte unsigned integer and advances the current position by two bytes.\n"
  example: []
  syntax:
    content: public static void Write(this byte[] destination, ref int offset, uint value)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Write(destination As Byte(), ByRef offset As Integer, value As UInteger)
    parameters:
    - id: destination
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    - id: value
      type: System.UInt32
      description: The 4-byte unsigned integer to write.
  overload: Microsoft.Health.Utility.BufferExtensions.Write*
  nameWithType.vb: BufferExtensions.Write(Byte(), ByRef Int32, UInt32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte(), ByRef System.Int32, System.UInt32)
  name.vb: Write(Byte(), ByRef Int32, UInt32)
- uid: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.Int64)
  commentId: M:Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.Int64)
  id: Write(System.Byte[],System.Int32@,System.Int64)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BufferExtensions
  langs:
  - csharp
  - vb
  name: Write(Byte[], ref Int32, Int64)
  nameWithType: BufferExtensions.Write(Byte[], ref Int32, Int64)
  fullName: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[], ref System.Int32, System.Int64)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BufferExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Write
    path: ../Microsoft.Health.Utility/utilities/BufferExtensions.cs
    startLine: 437
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nWrites a 8-byte signed integer and advances the current position by eight bytes.\n"
  example: []
  syntax:
    content: public static void Write(this byte[] destination, ref int offset, long value)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Write(destination As Byte(), ByRef offset As Integer, value As Long)
    parameters:
    - id: destination
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    - id: value
      type: System.Int64
      description: The 8-byte unsigned integer to write.
  overload: Microsoft.Health.Utility.BufferExtensions.Write*
  nameWithType.vb: BufferExtensions.Write(Byte(), ByRef Int32, Int64)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte(), ByRef System.Int32, System.Int64)
  name.vb: Write(Byte(), ByRef Int32, Int64)
- uid: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.UInt64)
  commentId: M:Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.UInt64)
  id: Write(System.Byte[],System.Int32@,System.UInt64)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BufferExtensions
  langs:
  - csharp
  - vb
  name: Write(Byte[], ref Int32, UInt64)
  nameWithType: BufferExtensions.Write(Byte[], ref Int32, UInt64)
  fullName: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[], ref System.Int32, System.UInt64)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BufferExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Write
    path: ../Microsoft.Health.Utility/utilities/BufferExtensions.cs
    startLine: 456
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nWrites a 8-byte unsigned integer and advances the current position by two bytes.\n"
  example: []
  syntax:
    content: public static void Write(this byte[] destination, ref int offset, ulong value)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Write(destination As Byte(), ByRef offset As Integer, value As ULong)
    parameters:
    - id: destination
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    - id: value
      type: System.UInt64
      description: The 8-byte unsigned integer to write.
  overload: Microsoft.Health.Utility.BufferExtensions.Write*
  nameWithType.vb: BufferExtensions.Write(Byte(), ByRef Int32, UInt64)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte(), ByRef System.Int32, System.UInt64)
  name.vb: Write(Byte(), ByRef Int32, UInt64)
- uid: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.Single)
  commentId: M:Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.Single)
  id: Write(System.Byte[],System.Int32@,System.Single)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BufferExtensions
  langs:
  - csharp
  - vb
  name: Write(Byte[], ref Int32, Single)
  nameWithType: BufferExtensions.Write(Byte[], ref Int32, Single)
  fullName: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[], ref System.Int32, System.Single)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BufferExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Write
    path: ../Microsoft.Health.Utility/utilities/BufferExtensions.cs
    startLine: 475
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nWrites a 4-byte floating-point value and advances the current position by four bytes.\n"
  example: []
  syntax:
    content: public static void Write(this byte[] destination, ref int offset, float value)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Write(destination As Byte(), ByRef offset As Integer, value As Single)
    parameters:
    - id: destination
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    - id: value
      type: System.Single
      description: The 4-byte unsigned integer to write.
  overload: Microsoft.Health.Utility.BufferExtensions.Write*
  nameWithType.vb: BufferExtensions.Write(Byte(), ByRef Int32, Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte(), ByRef System.Int32, System.Single)
  name.vb: Write(Byte(), ByRef Int32, Single)
- uid: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.Double)
  commentId: M:Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.Double)
  id: Write(System.Byte[],System.Int32@,System.Double)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BufferExtensions
  langs:
  - csharp
  - vb
  name: Write(Byte[], ref Int32, Double)
  nameWithType: BufferExtensions.Write(Byte[], ref Int32, Double)
  fullName: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[], ref System.Int32, System.Double)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BufferExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Write
    path: ../Microsoft.Health.Utility/utilities/BufferExtensions.cs
    startLine: 490
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nWrites a 8-byte floating-point value and advances the current position by eight bytes.\n"
  example: []
  syntax:
    content: public static void Write(this byte[] destination, ref int offset, double value)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Write(destination As Byte(), ByRef offset As Integer, value As Double)
    parameters:
    - id: destination
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    - id: value
      type: System.Double
      description: The 8-byte unsigned integer to write.
  overload: Microsoft.Health.Utility.BufferExtensions.Write*
  nameWithType.vb: BufferExtensions.Write(Byte(), ByRef Int32, Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte(), ByRef System.Int32, System.Double)
  name.vb: Write(Byte(), ByRef Int32, Double)
- uid: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.Decimal)
  commentId: M:Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.Decimal)
  id: Write(System.Byte[],System.Int32@,System.Decimal)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BufferExtensions
  langs:
  - csharp
  - vb
  name: Write(Byte[], ref Int32, Decimal)
  nameWithType: BufferExtensions.Write(Byte[], ref Int32, Decimal)
  fullName: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[], ref System.Int32, System.Decimal)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BufferExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Write
    path: ../Microsoft.Health.Utility/utilities/BufferExtensions.cs
    startLine: 505
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nWrites a decimal value and advances the current position by sixteen bytes.\n"
  example: []
  syntax:
    content: public static void Write(this byte[] destination, ref int offset, decimal value)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Write(destination As Byte(), ByRef offset As Integer, value As Decimal)
    parameters:
    - id: destination
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    - id: value
      type: System.Decimal
      description: The decimal value to write.
  overload: Microsoft.Health.Utility.BufferExtensions.Write*
  nameWithType.vb: BufferExtensions.Write(Byte(), ByRef Int32, Decimal)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte(), ByRef System.Int32, System.Decimal)
  name.vb: Write(Byte(), ByRef Int32, Decimal)
- uid: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.Guid)
  commentId: M:Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.Guid)
  id: Write(System.Byte[],System.Int32@,System.Guid)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BufferExtensions
  langs:
  - csharp
  - vb
  name: Write(Byte[], ref Int32, Guid)
  nameWithType: BufferExtensions.Write(Byte[], ref Int32, Guid)
  fullName: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[], ref System.Int32, System.Guid)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BufferExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Write
    path: ../Microsoft.Health.Utility/utilities/BufferExtensions.cs
    startLine: 520
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nWrites a 16-byte Guid value and advances the current position by sixteen bytes.\n"
  example: []
  syntax:
    content: public static void Write(this byte[] destination, ref int offset, Guid value)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Write(destination As Byte(), ByRef offset As Integer, value As Guid)
    parameters:
    - id: destination
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    - id: value
      type: System.Guid
      description: The 16-byte Guid to write.
  overload: Microsoft.Health.Utility.BufferExtensions.Write*
  nameWithType.vb: BufferExtensions.Write(Byte(), ByRef Int32, Guid)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte(), ByRef System.Int32, System.Guid)
  name.vb: Write(Byte(), ByRef Int32, Guid)
- uid: Microsoft.Health.Utility.BufferExtensions.Write7BitEncodedInt(System.Byte[],System.Int32@,System.Int32)
  commentId: M:Microsoft.Health.Utility.BufferExtensions.Write7BitEncodedInt(System.Byte[],System.Int32@,System.Int32)
  id: Write7BitEncodedInt(System.Byte[],System.Int32@,System.Int32)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BufferExtensions
  langs:
  - csharp
  - vb
  name: Write7BitEncodedInt(Byte[], ref Int32, Int32)
  nameWithType: BufferExtensions.Write7BitEncodedInt(Byte[], ref Int32, Int32)
  fullName: Microsoft.Health.Utility.BufferExtensions.Write7BitEncodedInt(System.Byte[], ref System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BufferExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Write7BitEncodedInt
    path: ../Microsoft.Health.Utility/utilities/BufferExtensions.cs
    startLine: 535
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nWrites a 32-bit integer in a compressed format.\n"
  example: []
  syntax:
    content: public static void Write7BitEncodedInt(this byte[] source, ref int offset, int value)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Write7BitEncodedInt(source As Byte(), ByRef offset As Integer, value As Integer)
    parameters:
    - id: source
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    - id: value
      type: System.Int32
      description: The 32-bit integer to be written.
  overload: Microsoft.Health.Utility.BufferExtensions.Write7BitEncodedInt*
  nameWithType.vb: BufferExtensions.Write7BitEncodedInt(Byte(), ByRef Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BufferExtensions.Write7BitEncodedInt(System.Byte(), ByRef System.Int32, System.Int32)
  name.vb: Write7BitEncodedInt(Byte(), ByRef Int32, Int32)
- uid: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.String,System.Text.Encoding)
  commentId: M:Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.String,System.Text.Encoding)
  id: Write(System.Byte[],System.Int32@,System.String,System.Text.Encoding)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BufferExtensions
  langs:
  - csharp
  - vb
  name: Write(Byte[], ref Int32, String, Encoding)
  nameWithType: BufferExtensions.Write(Byte[], ref Int32, String, Encoding)
  fullName: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[], ref System.Int32, System.String, System.Text.Encoding)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BufferExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Write
    path: ../Microsoft.Health.Utility/utilities/BufferExtensions.cs
    startLine: 558
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nWrites a length-prefixed string in the specified encoding, and advances the current position\nin accordance with the encoding used and the specific characters being written.\n"
  example: []
  syntax:
    content: public static void Write(this byte[] destination, ref int offset, string value, Encoding encoding = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Write(destination As Byte(), ByRef offset As Integer, value As String, encoding As Encoding = Nothing)
    parameters:
    - id: destination
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    - id: value
      type: System.String
      description: The value to write.
    - id: encoding
      type: System.Text.Encoding
      description: ''
  overload: Microsoft.Health.Utility.BufferExtensions.Write*
  nameWithType.vb: BufferExtensions.Write(Byte(), ByRef Int32, String, Encoding)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte(), ByRef System.Int32, System.String, System.Text.Encoding)
  name.vb: Write(Byte(), ByRef Int32, String, Encoding)
- uid: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,Microsoft.Health.Utility.BufferSegment)
  commentId: M:Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,Microsoft.Health.Utility.BufferSegment)
  id: Write(System.Byte[],System.Int32@,Microsoft.Health.Utility.BufferSegment)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BufferExtensions
  langs:
  - csharp
  - vb
  name: Write(Byte[], ref Int32, BufferSegment)
  nameWithType: BufferExtensions.Write(Byte[], ref Int32, BufferSegment)
  fullName: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[], ref System.Int32, Microsoft.Health.Utility.BufferSegment)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BufferExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Write
    path: ../Microsoft.Health.Utility/utilities/BufferExtensions.cs
    startLine: 583
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nWrites a byte array and advances the current position by its size.\n"
  example: []
  syntax:
    content: public static void Write(this byte[] destination, ref int offset, BufferSegment buffer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Write(destination As Byte(), ByRef offset As Integer, buffer As BufferSegment)
    parameters:
    - id: destination
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    - id: buffer
      type: Microsoft.Health.Utility.BufferSegment
      description: A BufferSegment containing the data to write.
  overload: Microsoft.Health.Utility.BufferExtensions.Write*
  nameWithType.vb: BufferExtensions.Write(Byte(), ByRef Int32, BufferSegment)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte(), ByRef System.Int32, Microsoft.Health.Utility.BufferSegment)
  name.vb: Write(Byte(), ByRef Int32, BufferSegment)
- uid: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.Byte[])
  commentId: M:Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.Byte[])
  id: Write(System.Byte[],System.Int32@,System.Byte[])
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BufferExtensions
  langs:
  - csharp
  - vb
  name: Write(Byte[], ref Int32, Byte[])
  nameWithType: BufferExtensions.Write(Byte[], ref Int32, Byte[])
  fullName: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[], ref System.Int32, System.Byte[])
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BufferExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Write
    path: ../Microsoft.Health.Utility/utilities/BufferExtensions.cs
    startLine: 597
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nWrites a byte array and advances the current position by its size.\n"
  example: []
  syntax:
    content: public static void Write(this byte[] destination, ref int offset, byte[] buffer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Write(destination As Byte(), ByRef offset As Integer, buffer As Byte())
    parameters:
    - id: destination
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    - id: buffer
      type: System.Byte[]
      description: A byte array containing the data to write.
  overload: Microsoft.Health.Utility.BufferExtensions.Write*
  nameWithType.vb: BufferExtensions.Write(Byte(), ByRef Int32, Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte(), ByRef System.Int32, System.Byte())
  name.vb: Write(Byte(), ByRef Int32, Byte())
- uid: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.Byte[],System.Int32,System.Int32)
  commentId: M:Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32@,System.Byte[],System.Int32,System.Int32)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BufferExtensions
  langs:
  - csharp
  - vb
  name: Write(Byte[], ref Int32, Byte[], Int32, Int32)
  nameWithType: BufferExtensions.Write(Byte[], ref Int32, Byte[], Int32, Int32)
  fullName: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[], ref System.Int32, System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BufferExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Write
    path: ../Microsoft.Health.Utility/utilities/BufferExtensions.cs
    startLine: 613
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nWrites a region of a byte array.\n"
  example: []
  syntax:
    content: public static void Write(this byte[] destination, ref int offset, byte[] buffer, int index, int count)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Write(destination As Byte(), ByRef offset As Integer, buffer As Byte(), index As Integer, count As Integer)
    parameters:
    - id: destination
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    - id: buffer
      type: System.Byte[]
      description: A byte array containing the data to write.
    - id: index
      type: System.Int32
      description: The starting point in buffer at which to begin writing.
    - id: count
      type: System.Int32
      description: The number of bytes to write.
  overload: Microsoft.Health.Utility.BufferExtensions.Write*
  nameWithType.vb: BufferExtensions.Write(Byte(), ByRef Int32, Byte(), Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte(), ByRef System.Int32, System.Byte(), System.Int32, System.Int32)
  name.vb: Write(Byte(), ByRef Int32, Byte(), Int32, Int32)
- uid: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.Char[],System.Text.Encoding)
  commentId: M:Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.Char[],System.Text.Encoding)
  id: Write(System.Byte[],System.Int32@,System.Char[],System.Text.Encoding)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BufferExtensions
  langs:
  - csharp
  - vb
  name: Write(Byte[], ref Int32, Char[], Encoding)
  nameWithType: BufferExtensions.Write(Byte[], ref Int32, Char[], Encoding)
  fullName: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[], ref System.Int32, System.Char[], System.Text.Encoding)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BufferExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Write
    path: ../Microsoft.Health.Utility/utilities/BufferExtensions.cs
    startLine: 627
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nWrites a character array and advances the current position in accordance\nwith the Encoding used and the specific characters being written.\n"
  example: []
  syntax:
    content: public static void Write(this byte[] destination, ref int offset, char[] buffer, Encoding encoding = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Write(destination As Byte(), ByRef offset As Integer, buffer As Char(), encoding As Encoding = Nothing)
    parameters:
    - id: destination
      type: System.Byte[]
      description: ''
    - id: offset
      type: System.Int32
      description: ''
    - id: buffer
      type: System.Char[]
      description: A character array containing the data to write.
    - id: encoding
      type: System.Text.Encoding
  overload: Microsoft.Health.Utility.BufferExtensions.Write*
  nameWithType.vb: BufferExtensions.Write(Byte(), ByRef Int32, Char(), Encoding)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte(), ByRef System.Int32, System.Char(), System.Text.Encoding)
  name.vb: Write(Byte(), ByRef Int32, Char(), Encoding)
- uid: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.Char[],System.Int32,System.Int32,System.Text.Encoding)
  commentId: M:Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[],System.Int32@,System.Char[],System.Int32,System.Int32,System.Text.Encoding)
  id: Write(System.Byte[],System.Int32@,System.Char[],System.Int32,System.Int32,System.Text.Encoding)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BufferExtensions
  langs:
  - csharp
  - vb
  name: Write(Byte[], ref Int32, Char[], Int32, Int32, Encoding)
  nameWithType: BufferExtensions.Write(Byte[], ref Int32, Char[], Int32, Int32, Encoding)
  fullName: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte[], ref System.Int32, System.Char[], System.Int32, System.Int32, System.Text.Encoding)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BufferExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Write
    path: ../Microsoft.Health.Utility/utilities/BufferExtensions.cs
    startLine: 643
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  syntax:
    content: public static void Write(this byte[] destination, ref int offset, char[] buffer, int index, int count, Encoding encoding = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Write(destination As Byte(), ByRef offset As Integer, buffer As Char(), index As Integer, count As Integer, encoding As Encoding = Nothing)
    parameters:
    - id: destination
      type: System.Byte[]
    - id: offset
      type: System.Int32
    - id: buffer
      type: System.Char[]
    - id: index
      type: System.Int32
    - id: count
      type: System.Int32
    - id: encoding
      type: System.Text.Encoding
  overload: Microsoft.Health.Utility.BufferExtensions.Write*
  nameWithType.vb: BufferExtensions.Write(Byte(), ByRef Int32, Char(), Int32, Int32, Encoding)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BufferExtensions.Write(System.Byte(), ByRef System.Int32, System.Char(), System.Int32, System.Int32, System.Text.Encoding)
  name.vb: Write(Byte(), ByRef Int32, Char(), Int32, Int32, Encoding)
references:
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Utility.BufferExtensions.ReadBoolean*
  commentId: Overload:Microsoft.Health.Utility.BufferExtensions.ReadBoolean
  isExternal: false
  name: ReadBoolean
  nameWithType: BufferExtensions.ReadBoolean
  fullName: Microsoft.Health.Utility.BufferExtensions.ReadBoolean
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Health.Utility.BufferExtensions.ReadByte*
  commentId: Overload:Microsoft.Health.Utility.BufferExtensions.ReadByte
  isExternal: false
  name: ReadByte
  nameWithType: BufferExtensions.ReadByte
  fullName: Microsoft.Health.Utility.BufferExtensions.ReadByte
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: Microsoft.Health.Utility.BufferExtensions.ReadSByte*
  commentId: Overload:Microsoft.Health.Utility.BufferExtensions.ReadSByte
  isExternal: false
  name: ReadSByte
  nameWithType: BufferExtensions.ReadSByte
  fullName: Microsoft.Health.Utility.BufferExtensions.ReadSByte
- uid: System.SByte
  commentId: T:System.SByte
  parent: System
  isExternal: true
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: Microsoft.Health.Utility.BufferExtensions.ReadInt16*
  commentId: Overload:Microsoft.Health.Utility.BufferExtensions.ReadInt16
  isExternal: false
  name: ReadInt16
  nameWithType: BufferExtensions.ReadInt16
  fullName: Microsoft.Health.Utility.BufferExtensions.ReadInt16
- uid: System.Int16
  commentId: T:System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: Microsoft.Health.Utility.BufferExtensions.ReadUInt16*
  commentId: Overload:Microsoft.Health.Utility.BufferExtensions.ReadUInt16
  isExternal: false
  name: ReadUInt16
  nameWithType: BufferExtensions.ReadUInt16
  fullName: Microsoft.Health.Utility.BufferExtensions.ReadUInt16
- uid: System.UInt16
  commentId: T:System.UInt16
  parent: System
  isExternal: true
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: Microsoft.Health.Utility.BufferExtensions.ReadInt32*
  commentId: Overload:Microsoft.Health.Utility.BufferExtensions.ReadInt32
  isExternal: false
  name: ReadInt32
  nameWithType: BufferExtensions.ReadInt32
  fullName: Microsoft.Health.Utility.BufferExtensions.ReadInt32
- uid: Microsoft.Health.Utility.BufferExtensions.ReadUInt32*
  commentId: Overload:Microsoft.Health.Utility.BufferExtensions.ReadUInt32
  isExternal: false
  name: ReadUInt32
  nameWithType: BufferExtensions.ReadUInt32
  fullName: Microsoft.Health.Utility.BufferExtensions.ReadUInt32
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: Microsoft.Health.Utility.BufferExtensions.ReadInt64*
  commentId: Overload:Microsoft.Health.Utility.BufferExtensions.ReadInt64
  isExternal: false
  name: ReadInt64
  nameWithType: BufferExtensions.ReadInt64
  fullName: Microsoft.Health.Utility.BufferExtensions.ReadInt64
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.Health.Utility.BufferExtensions.ReadUInt64*
  commentId: Overload:Microsoft.Health.Utility.BufferExtensions.ReadUInt64
  isExternal: false
  name: ReadUInt64
  nameWithType: BufferExtensions.ReadUInt64
  fullName: Microsoft.Health.Utility.BufferExtensions.ReadUInt64
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Microsoft.Health.Utility.BufferExtensions.ReadSingle*
  commentId: Overload:Microsoft.Health.Utility.BufferExtensions.ReadSingle
  isExternal: false
  name: ReadSingle
  nameWithType: BufferExtensions.ReadSingle
  fullName: Microsoft.Health.Utility.BufferExtensions.ReadSingle
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Microsoft.Health.Utility.BufferExtensions.ReadDouble*
  commentId: Overload:Microsoft.Health.Utility.BufferExtensions.ReadDouble
  isExternal: false
  name: ReadDouble
  nameWithType: BufferExtensions.ReadDouble
  fullName: Microsoft.Health.Utility.BufferExtensions.ReadDouble
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Microsoft.Health.Utility.BufferExtensions.ReadDecimal*
  commentId: Overload:Microsoft.Health.Utility.BufferExtensions.ReadDecimal
  isExternal: false
  name: ReadDecimal
  nameWithType: BufferExtensions.ReadDecimal
  fullName: Microsoft.Health.Utility.BufferExtensions.ReadDecimal
- uid: System.Decimal
  commentId: T:System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: Microsoft.Health.Utility.BufferExtensions.ReadGuid*
  commentId: Overload:Microsoft.Health.Utility.BufferExtensions.ReadGuid
  isExternal: false
  name: ReadGuid
  nameWithType: BufferExtensions.ReadGuid
  fullName: Microsoft.Health.Utility.BufferExtensions.ReadGuid
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: Microsoft.Health.Utility.BufferExtensions.Read7BitEncodedInt*
  commentId: Overload:Microsoft.Health.Utility.BufferExtensions.Read7BitEncodedInt
  isExternal: false
  name: Read7BitEncodedInt
  nameWithType: BufferExtensions.Read7BitEncodedInt
  fullName: Microsoft.Health.Utility.BufferExtensions.Read7BitEncodedInt
- uid: Microsoft.Health.Utility.BufferExtensions.ReadString*
  commentId: Overload:Microsoft.Health.Utility.BufferExtensions.ReadString
  isExternal: false
  name: ReadString
  nameWithType: BufferExtensions.ReadString
  fullName: Microsoft.Health.Utility.BufferExtensions.ReadString
- uid: System.Text.Encoding
  commentId: T:System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Text
  commentId: N:System.Text
  isExternal: false
  name: System.Text
  nameWithType: System.Text
  fullName: System.Text
- uid: Microsoft.Health.Utility.BufferExtensions.ReadBufferSegment*
  commentId: Overload:Microsoft.Health.Utility.BufferExtensions.ReadBufferSegment
  isExternal: false
  name: ReadBufferSegment
  nameWithType: BufferExtensions.ReadBufferSegment
  fullName: Microsoft.Health.Utility.BufferExtensions.ReadBufferSegment
- uid: Microsoft.Health.Utility.BufferSegment
  commentId: T:Microsoft.Health.Utility.BufferSegment
  parent: Microsoft.Health.Utility
  isExternal: false
  name: BufferSegment
  nameWithType: BufferSegment
  fullName: Microsoft.Health.Utility.BufferSegment
- uid: Microsoft.Health.Utility.BufferExtensions.Read*
  commentId: Overload:Microsoft.Health.Utility.BufferExtensions.Read
  isExternal: false
  name: Read
  nameWithType: BufferExtensions.Read
  fullName: Microsoft.Health.Utility.BufferExtensions.Read
- uid: Microsoft.Health.Utility.BufferExtensions.ReadBytes*
  commentId: Overload:Microsoft.Health.Utility.BufferExtensions.ReadBytes
  isExternal: false
  name: ReadBytes
  nameWithType: BufferExtensions.ReadBytes
  fullName: Microsoft.Health.Utility.BufferExtensions.ReadBytes
- uid: System.Char[]
  name: Char[]
  nameWithType: Char[]
  fullName: System.Char[]
  nameWithType.vb: Char()
  fullName.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.Health.Utility.BufferExtensions.ReadChars*
  commentId: Overload:Microsoft.Health.Utility.BufferExtensions.ReadChars
  isExternal: false
  name: ReadChars
  nameWithType: BufferExtensions.ReadChars
  fullName: Microsoft.Health.Utility.BufferExtensions.ReadChars
- uid: Microsoft.Health.Utility.BufferExtensions.Write*
  commentId: Overload:Microsoft.Health.Utility.BufferExtensions.Write
  isExternal: false
  name: Write
  nameWithType: BufferExtensions.Write
  fullName: Microsoft.Health.Utility.BufferExtensions.Write
- uid: Microsoft.Health.Utility.BufferExtensions.Write7BitEncodedInt*
  commentId: Overload:Microsoft.Health.Utility.BufferExtensions.Write7BitEncodedInt
  isExternal: false
  name: Write7BitEncodedInt
  nameWithType: BufferExtensions.Write7BitEncodedInt
  fullName: Microsoft.Health.Utility.BufferExtensions.Write7BitEncodedInt
