### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.Authentication.CryptoHash
  commentId: T:Microsoft.Health.Authentication.CryptoHash
  id: CryptoHash
  parent: Microsoft.Health.Authentication
  children:
  - Microsoft.Health.Authentication.CryptoHash.#ctor
  - Microsoft.Health.Authentication.CryptoHash.#ctor(System.String)
  - Microsoft.Health.Authentication.CryptoHash.AlgorithmName
  - Microsoft.Health.Authentication.CryptoHash.DigestAlgorithmName
  - Microsoft.Health.Authentication.CryptoHash.Finalize
  - Microsoft.Health.Authentication.CryptoHash.HashAlgorithm
  - Microsoft.Health.Authentication.CryptoHash.IsFinalized
  - Microsoft.Health.Authentication.CryptoHash.StartElementName
  - Microsoft.Health.Authentication.CryptoHash.WriteInfoXml(System.Xml.XmlWriter)
  langs:
  - csharp
  - vb
  name: CryptoHash
  nameWithType: CryptoHash
  fullName: Microsoft.Health.Authentication.CryptoHash
  type: Class
  source:
    remote:
      path: Microsoft.Health/Authentication/CryptoHash.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CryptoHash
    path: ../Microsoft.Health/Authentication/CryptoHash.cs
    startLine: 21
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Authentication
  summary: "\nEncapsulates a cryptographic hash primitive and provides additional \nfunctionality to communicate the hash state via XML.\n"
  remarks: "\nCryptoHash is for internal use only and is subject to change.\n"
  example: []
  syntax:
    content: public class CryptoHash
    content.vb: Public Class CryptoHash
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - Microsoft.Health.Authentication.CryptoHash.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  - System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.Authentication.CryptoHash.AlgorithmName
  commentId: P:Microsoft.Health.Authentication.CryptoHash.AlgorithmName
  id: AlgorithmName
  parent: Microsoft.Health.Authentication.CryptoHash
  langs:
  - csharp
  - vb
  name: AlgorithmName
  nameWithType: CryptoHash.AlgorithmName
  fullName: Microsoft.Health.Authentication.CryptoHash.AlgorithmName
  type: Property
  source:
    remote:
      path: Microsoft.Health/Authentication/CryptoHash.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: AlgorithmName
    path: ../Microsoft.Health/Authentication/CryptoHash.cs
    startLine: 33
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Authentication
  summary: "\nGets or sets the hash algorithm that instantiates the hash primitive.\n"
  example: []
  syntax:
    content: protected string AlgorithmName { get; set; }
    content.vb: Protected Property AlgorithmName As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Health.Authentication.CryptoHash.AlgorithmName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<xref href=\"Microsoft.Health.Authentication.CryptoHash.AlgorithmName\" data-throw-if-not-resolved=\"false\"></xref> is set to <strong>null</strong> or empty.\n"
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
- uid: Microsoft.Health.Authentication.CryptoHash.HashAlgorithm
  commentId: P:Microsoft.Health.Authentication.CryptoHash.HashAlgorithm
  id: HashAlgorithm
  parent: Microsoft.Health.Authentication.CryptoHash
  langs:
  - csharp
  - vb
  name: HashAlgorithm
  nameWithType: CryptoHash.HashAlgorithm
  fullName: Microsoft.Health.Authentication.CryptoHash.HashAlgorithm
  type: Property
  source:
    remote:
      path: Microsoft.Health/Authentication/CryptoHash.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: HashAlgorithm
    path: ../Microsoft.Health/Authentication/CryptoHash.cs
    startLine: 55
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Authentication
  summary: "\nGets or sets an instance of the specified hash algorithm.\n"
  example: []
  syntax:
    content: protected HashAlgorithm HashAlgorithm { get; set; }
    content.vb: Protected Property HashAlgorithm As HashAlgorithm
    parameters: []
    return:
      type: System.Security.Cryptography.HashAlgorithm
  overload: Microsoft.Health.Authentication.CryptoHash.HashAlgorithm*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<xref href=\"Microsoft.Health.Authentication.CryptoHash.HashAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> is set to <strong>null</strong>.\n"
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
- uid: Microsoft.Health.Authentication.CryptoHash.IsFinalized
  commentId: P:Microsoft.Health.Authentication.CryptoHash.IsFinalized
  id: IsFinalized
  parent: Microsoft.Health.Authentication.CryptoHash
  langs:
  - csharp
  - vb
  name: IsFinalized
  nameWithType: CryptoHash.IsFinalized
  fullName: Microsoft.Health.Authentication.CryptoHash.IsFinalized
  type: Property
  source:
    remote:
      path: Microsoft.Health/Authentication/CryptoHash.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IsFinalized
    path: ../Microsoft.Health/Authentication/CryptoHash.cs
    startLine: 81
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Authentication
  summary: "\nGets or sets a flag indicating whether the hash is already finalized.\n"
  remarks: "\nTo reuse the <xref href=\"Microsoft.Health.Authentication.CryptoHash\" data-throw-if-not-resolved=\"false\"></xref> instance, call Reset().\n"
  example: []
  syntax:
    content: protected bool IsFinalized { get; set; }
    content.vb: Protected Property IsFinalized As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<strong>true</strong> if the hash is already finalized; otherwise, <strong>false</strong>.\n"
  overload: Microsoft.Health.Authentication.CryptoHash.IsFinalized*
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
- uid: Microsoft.Health.Authentication.CryptoHash.#ctor
  commentId: M:Microsoft.Health.Authentication.CryptoHash.#ctor
  id: '#ctor'
  parent: Microsoft.Health.Authentication.CryptoHash
  langs:
  - csharp
  - vb
  name: CryptoHash()
  nameWithType: CryptoHash.CryptoHash()
  fullName: Microsoft.Health.Authentication.CryptoHash.CryptoHash()
  type: Constructor
  source:
    remote:
      path: Microsoft.Health/Authentication/CryptoHash.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health/Authentication/CryptoHash.cs
    startLine: 102
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Authentication
  summary: "\nCreates a new instance of the <xref href=\"Microsoft.Health.Authentication.CryptoHash\" data-throw-if-not-resolved=\"false\"></xref> class with \ndefault values.\n"
  remarks: "\nThe default hash algorithm specified by <xref href=\"Microsoft.Health.Authentication.CryptoConfiguration\" data-throw-if-not-resolved=\"false\"></xref> \ndetermines which hash primitive to use.\n"
  example: []
  syntax:
    content: public CryptoHash()
    content.vb: Public Sub New
  overload: Microsoft.Health.Authentication.CryptoHash.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Authentication.CryptoHash.#ctor(System.String)
  commentId: M:Microsoft.Health.Authentication.CryptoHash.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.Health.Authentication.CryptoHash
  langs:
  - csharp
  - vb
  name: CryptoHash(String)
  nameWithType: CryptoHash.CryptoHash(String)
  fullName: Microsoft.Health.Authentication.CryptoHash.CryptoHash(System.String)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health/Authentication/CryptoHash.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health/Authentication/CryptoHash.cs
    startLine: 126
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Authentication
  summary: "\nCreates a new instance of the <xref href=\"Microsoft.Health.Authentication.CryptoHash\" data-throw-if-not-resolved=\"false\"></xref> class with \nthe specified hash algorithm name.\n"
  remarks: "\nThe caller must use <xref href=\"Microsoft.Health.Authentication.CryptoHash.WriteInfoXml(System.Xml.XmlWriter)\" data-throw-if-not-resolved=\"false\"></xref> to generate XML \nrepresenting the final digest and <xref href=\"Microsoft.Health.Authentication.CryptoHash.AlgorithmName\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public CryptoHash(string algorithmName)
    content.vb: Public Sub New(algorithmName As String)
    parameters:
    - id: algorithmName
      type: System.String
      description: "\nThe well-known algorithm name for the hash primitive.\n"
  overload: Microsoft.Health.Authentication.CryptoHash.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">algorithmName</span> parameter is not supported.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Authentication.CryptoHash.Finalize
  commentId: M:Microsoft.Health.Authentication.CryptoHash.Finalize
  id: Finalize
  parent: Microsoft.Health.Authentication.CryptoHash
  langs:
  - csharp
  - vb
  name: Finalize()
  nameWithType: CryptoHash.Finalize()
  fullName: Microsoft.Health.Authentication.CryptoHash.Finalize()
  type: Method
  source:
    remote:
      path: Microsoft.Health/Authentication/CryptoHash.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Finalize
    path: ../Microsoft.Health/Authentication/CryptoHash.cs
    startLine: 235
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Authentication
  summary: "\nConstructs the representation of the finalized hash state.\n"
  example: []
  syntax:
    content: public virtual CryptoHashFinalized Finalize()
    content.vb: Public Overridable Function Finalize As CryptoHashFinalized
    return:
      type: Microsoft.Health.Authentication.CryptoHashFinalized
      description: "\nA <xref href=\"Microsoft.Health.Authentication.CryptoHashFinalized\" data-throw-if-not-resolved=\"false\"></xref> object representing the \nfinalized state of the hash object is returned.\n"
  overload: Microsoft.Health.Authentication.CryptoHash.Finalize*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<xref href=\"Microsoft.Health.Authentication.CryptoHash.IsFinalized\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong>.\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.Health.Authentication.CryptoHash.DigestAlgorithmName
  commentId: P:Microsoft.Health.Authentication.CryptoHash.DigestAlgorithmName
  id: DigestAlgorithmName
  parent: Microsoft.Health.Authentication.CryptoHash
  langs:
  - csharp
  - vb
  name: DigestAlgorithmName
  nameWithType: CryptoHash.DigestAlgorithmName
  fullName: Microsoft.Health.Authentication.CryptoHash.DigestAlgorithmName
  type: Property
  source:
    remote:
      path: Microsoft.Health/Authentication/CryptoHash.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DigestAlgorithmName
    path: ../Microsoft.Health/Authentication/CryptoHash.cs
    startLine: 257
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Authentication
  summary: "\nGets the digest algorithm name.\n"
  remarks: "\nChild classes must specify the name of the digest\nalgorithm they implement.\nThis method is only called internally and is subject to change.\n"
  example: []
  syntax:
    content: protected virtual string DigestAlgorithmName { get; }
    content.vb: Protected Overridable ReadOnly Property DigestAlgorithmName As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Health.Authentication.CryptoHash.DigestAlgorithmName*
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: Microsoft.Health.Authentication.CryptoHash.StartElementName
  commentId: P:Microsoft.Health.Authentication.CryptoHash.StartElementName
  id: StartElementName
  parent: Microsoft.Health.Authentication.CryptoHash
  langs:
  - csharp
  - vb
  name: StartElementName
  nameWithType: CryptoHash.StartElementName
  fullName: Microsoft.Health.Authentication.CryptoHash.StartElementName
  type: Property
  source:
    remote:
      path: Microsoft.Health/Authentication/CryptoHash.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: StartElementName
    path: ../Microsoft.Health/Authentication/CryptoHash.cs
    startLine: 272
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Authentication
  summary: "\nGets the name of the start element for the serialized info XML.\n"
  example: []
  syntax:
    content: protected string StartElementName { get; }
    content.vb: Protected ReadOnly Property StartElementName As String
    parameters: []
    return:
      type: System.String
      description: "\nA string representing the XML element name of the\nsection that contains the content written with \n<xref href=\"Microsoft.Health.Authentication.CryptoHash.WriteInfoXml(System.Xml.XmlWriter)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  overload: Microsoft.Health.Authentication.CryptoHash.StartElementName*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Microsoft.Health.Authentication.CryptoHash.WriteInfoXml(System.Xml.XmlWriter)
  commentId: M:Microsoft.Health.Authentication.CryptoHash.WriteInfoXml(System.Xml.XmlWriter)
  id: WriteInfoXml(System.Xml.XmlWriter)
  parent: Microsoft.Health.Authentication.CryptoHash
  langs:
  - csharp
  - vb
  name: WriteInfoXml(XmlWriter)
  nameWithType: CryptoHash.WriteInfoXml(XmlWriter)
  fullName: Microsoft.Health.Authentication.CryptoHash.WriteInfoXml(System.Xml.XmlWriter)
  type: Method
  source:
    remote:
      path: Microsoft.Health/Authentication/CryptoHash.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: WriteInfoXml
    path: ../Microsoft.Health/Authentication/CryptoHash.cs
    startLine: 294
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Authentication
  summary: "\nWrites the XML to use when authenticating with the HealthVault \nservice.\n"
  remarks: "\nThis method is only called internally and is subject to change.\n"
  example: []
  syntax:
    content: public virtual void WriteInfoXml(XmlWriter writer)
    content.vb: Public Overridable Sub WriteInfoXml(writer As XmlWriter)
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "\nThe XML writer receiving the data.\n"
  overload: Microsoft.Health.Authentication.CryptoHash.WriteInfoXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <span class=\"paramref\">writer</span> parameter is <strong>null</strong>. \n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: Microsoft.Health.Authentication
  commentId: N:Microsoft.Health.Authentication
  isExternal: false
  name: Microsoft.Health.Authentication
  nameWithType: Microsoft.Health.Authentication
  fullName: Microsoft.Health.Authentication
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  name: SetProperty(String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object())
  name.vb: SetProperty(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  name: InvokeMethod(String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object())
  name.vb: InvokeMethod(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  parent: Microsoft.Health.Utility.InvariantString
  definition: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  name: ToStringInvariant()
  nameWithType: InvariantString.ToStringInvariant()
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant()
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Authentication.CryptoHash.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  parent: Microsoft.Health.Utility.TypeHelper
  definition: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  name: ValueOrDbNull<CryptoHash>()
  nameWithType: TypeHelper.ValueOrDbNull<CryptoHash>()
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.Authentication.CryptoHash>()
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of CryptoHash)()
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.Authentication.CryptoHash)()
  name.vb: ValueOrDbNull(Of CryptoHash)()
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull<CryptoHash>
    nameWithType: TypeHelper.ValueOrDbNull<CryptoHash>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.Authentication.CryptoHash>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull(Of CryptoHash)
    nameWithType: TypeHelper.ValueOrDbNull(Of CryptoHash)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.Authentication.CryptoHash)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  parent: Microsoft.Health.Utility.WCXmlHelper
  definition: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  name: ToXml()
  nameWithType: WCXmlHelper.ToXml()
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml()
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  isExternal: true
  name: SetProperty(Object, String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object())
  name.vb: SetProperty(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions
  commentId: T:Microsoft.Health.Utility.IDispatchExtensions
  parent: Microsoft.Health.Utility
  isExternal: false
  name: IDispatchExtensions
  nameWithType: IDispatchExtensions
  fullName: Microsoft.Health.Utility.IDispatchExtensions
- uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  isExternal: true
  name: InvokeMethod(Object, String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object())
  name.vb: InvokeMethod(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  isExternal: true
  name: ToStringInvariant(Object)
  nameWithType: InvariantString.ToStringInvariant(Object)
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString
  commentId: T:Microsoft.Health.Utility.InvariantString
  parent: Microsoft.Health.Utility
  isExternal: false
  name: InvariantString
  nameWithType: InvariantString
  fullName: Microsoft.Health.Utility.InvariantString
- uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  isExternal: false
  name: ValueOrDbNull<T>(T)
  nameWithType: TypeHelper.ValueOrDbNull<T>(T)
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>(T)
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of T)(T)
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)(T)
  name.vb: ValueOrDbNull(Of T)(T)
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull<T>
    nameWithType: TypeHelper.ValueOrDbNull<T>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull(Of T)
    nameWithType: TypeHelper.ValueOrDbNull(Of T)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.TypeHelper
  commentId: T:Microsoft.Health.Utility.TypeHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: TypeHelper
  nameWithType: TypeHelper
  fullName: Microsoft.Health.Utility.TypeHelper
- uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  isExternal: true
  name: ToXml(Object)
  nameWithType: WCXmlHelper.ToXml(Object)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.WCXmlHelper
  commentId: T:Microsoft.Health.Utility.WCXmlHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: WCXmlHelper
  nameWithType: WCXmlHelper
  fullName: Microsoft.Health.Utility.WCXmlHelper
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: Microsoft.Health.Authentication.CryptoHash.AlgorithmName
  commentId: P:Microsoft.Health.Authentication.CryptoHash.AlgorithmName
- uid: Microsoft.Health.Authentication.CryptoHash.AlgorithmName*
  commentId: Overload:Microsoft.Health.Authentication.CryptoHash.AlgorithmName
  isExternal: false
  name: AlgorithmName
  nameWithType: CryptoHash.AlgorithmName
  fullName: Microsoft.Health.Authentication.CryptoHash.AlgorithmName
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Health.Authentication.CryptoHash.HashAlgorithm
  commentId: P:Microsoft.Health.Authentication.CryptoHash.HashAlgorithm
- uid: Microsoft.Health.Authentication.CryptoHash.HashAlgorithm*
  commentId: Overload:Microsoft.Health.Authentication.CryptoHash.HashAlgorithm
  isExternal: false
  name: HashAlgorithm
  nameWithType: CryptoHash.HashAlgorithm
  fullName: Microsoft.Health.Authentication.CryptoHash.HashAlgorithm
- uid: System.Security.Cryptography.HashAlgorithm
  commentId: T:System.Security.Cryptography.HashAlgorithm
  parent: System.Security.Cryptography
  isExternal: true
  name: HashAlgorithm
  nameWithType: HashAlgorithm
  fullName: System.Security.Cryptography.HashAlgorithm
- uid: System.Security.Cryptography
  commentId: N:System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  nameWithType: System.Security.Cryptography
  fullName: System.Security.Cryptography
- uid: Microsoft.Health.Authentication.CryptoHash
  commentId: T:Microsoft.Health.Authentication.CryptoHash
  parent: Microsoft.Health.Authentication
  isExternal: false
  name: CryptoHash
  nameWithType: CryptoHash
  fullName: Microsoft.Health.Authentication.CryptoHash
- uid: Microsoft.Health.Authentication.CryptoHash.IsFinalized*
  commentId: Overload:Microsoft.Health.Authentication.CryptoHash.IsFinalized
  isExternal: false
  name: IsFinalized
  nameWithType: CryptoHash.IsFinalized
  fullName: Microsoft.Health.Authentication.CryptoHash.IsFinalized
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Health.Authentication.CryptoConfiguration
  commentId: T:Microsoft.Health.Authentication.CryptoConfiguration
  isExternal: false
  name: CryptoConfiguration
  nameWithType: CryptoConfiguration
  fullName: Microsoft.Health.Authentication.CryptoConfiguration
- uid: Microsoft.Health.Authentication.CryptoHash.#ctor*
  commentId: Overload:Microsoft.Health.Authentication.CryptoHash.#ctor
  isExternal: false
  name: CryptoHash
  nameWithType: CryptoHash.CryptoHash
  fullName: Microsoft.Health.Authentication.CryptoHash.CryptoHash
- uid: Microsoft.Health.Authentication.CryptoHash.WriteInfoXml(System.Xml.XmlWriter)
  commentId: M:Microsoft.Health.Authentication.CryptoHash.WriteInfoXml(System.Xml.XmlWriter)
- uid: Microsoft.Health.Authentication.CryptoHashFinalized
  commentId: T:Microsoft.Health.Authentication.CryptoHashFinalized
  parent: Microsoft.Health.Authentication
  isExternal: false
  name: CryptoHashFinalized
  nameWithType: CryptoHashFinalized
  fullName: Microsoft.Health.Authentication.CryptoHashFinalized
- uid: Microsoft.Health.Authentication.CryptoHash.IsFinalized
  commentId: P:Microsoft.Health.Authentication.CryptoHash.IsFinalized
- uid: Microsoft.Health.Authentication.CryptoHash.Finalize*
  commentId: Overload:Microsoft.Health.Authentication.CryptoHash.Finalize
  isExternal: false
  name: Finalize
  nameWithType: CryptoHash.Finalize
  fullName: Microsoft.Health.Authentication.CryptoHash.Finalize
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
- uid: Microsoft.Health.Authentication.CryptoHash.DigestAlgorithmName*
  commentId: Overload:Microsoft.Health.Authentication.CryptoHash.DigestAlgorithmName
  isExternal: false
  name: DigestAlgorithmName
  nameWithType: CryptoHash.DigestAlgorithmName
  fullName: Microsoft.Health.Authentication.CryptoHash.DigestAlgorithmName
- uid: Microsoft.Health.Authentication.CryptoHash.StartElementName*
  commentId: Overload:Microsoft.Health.Authentication.CryptoHash.StartElementName
  isExternal: false
  name: StartElementName
  nameWithType: CryptoHash.StartElementName
  fullName: Microsoft.Health.Authentication.CryptoHash.StartElementName
- uid: Microsoft.Health.Authentication.CryptoHash.WriteInfoXml*
  commentId: Overload:Microsoft.Health.Authentication.CryptoHash.WriteInfoXml
  isExternal: false
  name: WriteInfoXml
  nameWithType: CryptoHash.WriteInfoXml
  fullName: Microsoft.Health.Authentication.CryptoHash.WriteInfoXml
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.Xml.XmlWriter
  commentId: T:System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: false
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
