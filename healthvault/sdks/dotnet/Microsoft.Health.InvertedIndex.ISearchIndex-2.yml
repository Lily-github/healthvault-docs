### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.InvertedIndex.ISearchIndex`2
  commentId: T:Microsoft.Health.InvertedIndex.ISearchIndex`2
  id: ISearchIndex`2
  parent: Microsoft.Health.InvertedIndex
  children:
  - Microsoft.Health.InvertedIndex.ISearchIndex`2.Item(`0)
  - Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(`0)
  - Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IEnumerable{`0})
  - Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0})
  - Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  - Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
  - Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  langs:
  - csharp
  - vb
  name: ISearchIndex<T, TRecordIDList>
  nameWithType: ISearchIndex<T, TRecordIDList>
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>
  type: Interface
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/ISearchIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ISearchIndex
    path: ../Microsoft.Health.Utility/search/InvertedIndex/ISearchIndex.cs
    startLine: 16
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: >-
      public interface ISearchIndex<T, TRecordIDList>
          where TRecordIDList : IRecordIDList
    content.vb: Public Interface ISearchIndex(Of T, TRecordIDList As IRecordIDList)
    typeParameters:
    - id: T
      description: ''
    - id: TRecordIDList
      description: ''
  extensionMethods:
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - Microsoft.Health.InvertedIndex.ISearchIndex`2.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  - System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  nameWithType.vb: ISearchIndex(Of T, TRecordIDList)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList)
  name.vb: ISearchIndex(Of T, TRecordIDList)
- uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Item(`0)
  commentId: P:Microsoft.Health.InvertedIndex.ISearchIndex`2.Item(`0)
  id: Item(`0)
  parent: Microsoft.Health.InvertedIndex.ISearchIndex`2
  langs:
  - csharp
  - vb
  name: Item[T]
  nameWithType: ISearchIndex<T, TRecordIDList>.Item[T]
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Item[T]
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/ISearchIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: this[]
    path: ../Microsoft.Health.Utility/search/InvertedIndex/ISearchIndex.cs
    startLine: 24
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: TRecordIDList this[T term] { get; }
    content.vb: ReadOnly Property Item(term As T) As TRecordIDList
    parameters:
    - id: term
      type: '{T}'
      description: ''
    return:
      type: '{TRecordIDList}'
      description: ''
  overload: Microsoft.Health.InvertedIndex.ISearchIndex`2.Item*
  nameWithType.vb: ISearchIndex(Of T, TRecordIDList).Item(T)
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Item(T)
  name.vb: Item(T)
- uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(`0)
  commentId: M:Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(`0)
  id: Resolve(`0)
  parent: Microsoft.Health.InvertedIndex.ISearchIndex`2
  langs:
  - csharp
  - vb
  name: Resolve(T)
  nameWithType: ISearchIndex<T, TRecordIDList>.Resolve(T)
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve(T)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/ISearchIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Resolve
    path: ../Microsoft.Health.Utility/search/InvertedIndex/ISearchIndex.cs
    startLine: 31
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: RecordIDEnumerator Resolve(T term)
    content.vb: Function Resolve(term As T) As RecordIDEnumerator
    parameters:
    - id: term
      type: '{T}'
      description: ''
    return:
      type: Microsoft.Health.InvertedIndex.RecordIDEnumerator
      description: ''
  overload: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve*
  nameWithType.vb: ISearchIndex(Of T, TRecordIDList).Resolve(T)
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve(T)
- uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0})
  commentId: M:Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0})
  id: Resolve(System.Collections.Generic.IList{`0})
  parent: Microsoft.Health.InvertedIndex.ISearchIndex`2
  langs:
  - csharp
  - vb
  name: Resolve(IList<T>)
  nameWithType: ISearchIndex<T, TRecordIDList>.Resolve(IList<T>)
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve(System.Collections.Generic.IList<T>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/ISearchIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Resolve
    path: ../Microsoft.Health.Utility/search/InvertedIndex/ISearchIndex.cs
    startLine: 37
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: RecordIDEnumerator[] Resolve(IList<T> terms)
    content.vb: Function Resolve(terms As IList(Of T)) As RecordIDEnumerator()
    parameters:
    - id: terms
      type: System.Collections.Generic.IList{{T}}
      description: ''
    return:
      type: Microsoft.Health.InvertedIndex.RecordIDEnumerator[]
      description: ''
  overload: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve*
  nameWithType.vb: ISearchIndex(Of T, TRecordIDList).Resolve(IList(Of T))
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve(System.Collections.Generic.IList(Of T))
  name.vb: Resolve(IList(Of T))
- uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
  commentId: M:Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
  id: Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
  parent: Microsoft.Health.InvertedIndex.ISearchIndex`2
  langs:
  - csharp
  - vb
  name: Resolve(IList<T>, Int32, Int32)
  nameWithType: ISearchIndex<T, TRecordIDList>.Resolve(IList<T>, Int32, Int32)
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve(System.Collections.Generic.IList<T>, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/ISearchIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Resolve
    path: ../Microsoft.Health.Utility/search/InvertedIndex/ISearchIndex.cs
    startLine: 45
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: RecordIDEnumerator[] Resolve(IList<T> terms, int startAt, int count)
    content.vb: Function Resolve(terms As IList(Of T), startAt As Integer, count As Integer) As RecordIDEnumerator()
    parameters:
    - id: terms
      type: System.Collections.Generic.IList{{T}}
      description: ''
    - id: startAt
      type: System.Int32
      description: ''
    - id: count
      type: System.Int32
      description: ''
    return:
      type: Microsoft.Health.InvertedIndex.RecordIDEnumerator[]
      description: ''
  overload: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve*
  nameWithType.vb: ISearchIndex(Of T, TRecordIDList).Resolve(IList(Of T), Int32, Int32)
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve(System.Collections.Generic.IList(Of T), System.Int32, System.Int32)
  name.vb: Resolve(IList(Of T), Int32, Int32)
- uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IEnumerable{`0})
  id: Resolve(System.Collections.Generic.IEnumerable{`0})
  parent: Microsoft.Health.InvertedIndex.ISearchIndex`2
  langs:
  - csharp
  - vb
  name: Resolve(IEnumerable<T>)
  nameWithType: ISearchIndex<T, TRecordIDList>.Resolve(IEnumerable<T>)
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/ISearchIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Resolve
    path: ../Microsoft.Health.Utility/search/InvertedIndex/ISearchIndex.cs
    startLine: 51
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: RecordIDEnumerator[] Resolve(IEnumerable<T> terms)
    content.vb: Function Resolve(terms As IEnumerable(Of T)) As RecordIDEnumerator()
    parameters:
    - id: terms
      type: System.Collections.Generic.IEnumerable{{T}}
      description: ''
    return:
      type: Microsoft.Health.InvertedIndex.RecordIDEnumerator[]
      description: ''
  overload: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve*
  nameWithType.vb: ISearchIndex(Of T, TRecordIDList).Resolve(IEnumerable(Of T))
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Resolve(IEnumerable(Of T))
- uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  commentId: M:Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  id: Resolve(System.Collections.Generic.IList{`0},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  parent: Microsoft.Health.InvertedIndex.ISearchIndex`2
  langs:
  - csharp
  - vb
  name: Resolve(IList<T>, ref StructList<RecordIDEnumerator>)
  nameWithType: ISearchIndex<T, TRecordIDList>.Resolve(IList<T>, ref StructList<RecordIDEnumerator>)
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve(System.Collections.Generic.IList<T>, ref Microsoft.Health.StructList<Microsoft.Health.InvertedIndex.RecordIDEnumerator>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/ISearchIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Resolve
    path: ../Microsoft.Health.Utility/search/InvertedIndex/ISearchIndex.cs
    startLine: 58
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: void Resolve(IList<T> terms, ref StructList<RecordIDEnumerator> postingsList)
    content.vb: Sub Resolve(terms As IList(Of T), ByRef postingsList As StructList(Of RecordIDEnumerator))
    parameters:
    - id: terms
      type: System.Collections.Generic.IList{{T}}
      description: ''
    - id: postingsList
      type: Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}
      description: ''
  overload: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve*
  nameWithType.vb: ISearchIndex(Of T, TRecordIDList).Resolve(IList(Of T), ByRef StructList(Of RecordIDEnumerator))
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve(System.Collections.Generic.IList(Of T), ByRef Microsoft.Health.StructList(Of Microsoft.Health.InvertedIndex.RecordIDEnumerator))
  name.vb: Resolve(IList(Of T), ByRef StructList(Of RecordIDEnumerator))
- uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  commentId: M:Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  id: Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  parent: Microsoft.Health.InvertedIndex.ISearchIndex`2
  langs:
  - csharp
  - vb
  name: Resolve(IList<T>, Int32, Int32, ref StructList<RecordIDEnumerator>)
  nameWithType: ISearchIndex<T, TRecordIDList>.Resolve(IList<T>, Int32, Int32, ref StructList<RecordIDEnumerator>)
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve(System.Collections.Generic.IList<T>, System.Int32, System.Int32, ref Microsoft.Health.StructList<Microsoft.Health.InvertedIndex.RecordIDEnumerator>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/ISearchIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Resolve
    path: ../Microsoft.Health.Utility/search/InvertedIndex/ISearchIndex.cs
    startLine: 66
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: void Resolve(IList<T> terms, int startAt, int count, ref StructList<RecordIDEnumerator> postingsList)
    content.vb: Sub Resolve(terms As IList(Of T), startAt As Integer, count As Integer, ByRef postingsList As StructList(Of RecordIDEnumerator))
    parameters:
    - id: terms
      type: System.Collections.Generic.IList{{T}}
      description: ''
    - id: startAt
      type: System.Int32
      description: ''
    - id: count
      type: System.Int32
      description: ''
    - id: postingsList
      type: Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}
      description: ''
  overload: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve*
  nameWithType.vb: ISearchIndex(Of T, TRecordIDList).Resolve(IList(Of T), Int32, Int32, ByRef StructList(Of RecordIDEnumerator))
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve(System.Collections.Generic.IList(Of T), System.Int32, System.Int32, ByRef Microsoft.Health.StructList(Of Microsoft.Health.InvertedIndex.RecordIDEnumerator))
  name.vb: Resolve(IList(Of T), Int32, Int32, ByRef StructList(Of RecordIDEnumerator))
references:
- uid: Microsoft.Health.InvertedIndex
  commentId: N:Microsoft.Health.InvertedIndex
  isExternal: false
  name: Microsoft.Health.InvertedIndex
  nameWithType: Microsoft.Health.InvertedIndex
  fullName: Microsoft.Health.InvertedIndex
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  name: SetProperty(String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object())
  name.vb: SetProperty(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  name: InvokeMethod(String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object())
  name.vb: InvokeMethod(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  parent: Microsoft.Health.Utility.InvariantString
  definition: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  name: ToStringInvariant()
  nameWithType: InvariantString.ToStringInvariant()
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant()
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  parent: Microsoft.Health.Utility.TypeHelper
  definition: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  name: ValueOrDbNull<ISearchIndex<T, TRecordIDList>>()
  nameWithType: TypeHelper.ValueOrDbNull<ISearchIndex<T, TRecordIDList>>()
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>>()
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of ISearchIndex(Of T, TRecordIDList))()
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList))()
  name.vb: ValueOrDbNull(Of ISearchIndex(Of T, TRecordIDList))()
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull<ISearchIndex<T, TRecordIDList>>
    nameWithType: TypeHelper.ValueOrDbNull<ISearchIndex<T, TRecordIDList>>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull(Of ISearchIndex(Of T, TRecordIDList))
    nameWithType: TypeHelper.ValueOrDbNull(Of ISearchIndex(Of T, TRecordIDList))
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  parent: Microsoft.Health.Utility.WCXmlHelper
  definition: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  name: ToXml()
  nameWithType: WCXmlHelper.ToXml()
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml()
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  isExternal: true
  name: SetProperty(Object, String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object())
  name.vb: SetProperty(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions
  commentId: T:Microsoft.Health.Utility.IDispatchExtensions
  parent: Microsoft.Health.Utility
  isExternal: false
  name: IDispatchExtensions
  nameWithType: IDispatchExtensions
  fullName: Microsoft.Health.Utility.IDispatchExtensions
- uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  isExternal: true
  name: InvokeMethod(Object, String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object())
  name.vb: InvokeMethod(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  isExternal: true
  name: ToStringInvariant(Object)
  nameWithType: InvariantString.ToStringInvariant(Object)
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString
  commentId: T:Microsoft.Health.Utility.InvariantString
  parent: Microsoft.Health.Utility
  isExternal: false
  name: InvariantString
  nameWithType: InvariantString
  fullName: Microsoft.Health.Utility.InvariantString
- uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  isExternal: false
  name: ValueOrDbNull<T>(T)
  nameWithType: TypeHelper.ValueOrDbNull<T>(T)
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>(T)
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of T)(T)
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)(T)
  name.vb: ValueOrDbNull(Of T)(T)
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull<T>
    nameWithType: TypeHelper.ValueOrDbNull<T>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull(Of T)
    nameWithType: TypeHelper.ValueOrDbNull(Of T)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.TypeHelper
  commentId: T:Microsoft.Health.Utility.TypeHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: TypeHelper
  nameWithType: TypeHelper
  fullName: Microsoft.Health.Utility.TypeHelper
- uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  isExternal: true
  name: ToXml(Object)
  nameWithType: WCXmlHelper.ToXml(Object)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.WCXmlHelper
  commentId: T:Microsoft.Health.Utility.WCXmlHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: WCXmlHelper
  nameWithType: WCXmlHelper
  fullName: Microsoft.Health.Utility.WCXmlHelper
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Item*
  commentId: Overload:Microsoft.Health.InvertedIndex.ISearchIndex`2.Item
  isExternal: false
  name: Item
  nameWithType: ISearchIndex<T, TRecordIDList>.Item
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Item
  nameWithType.vb: ISearchIndex(Of T, TRecordIDList).Item
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Item
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: '{TRecordIDList}'
  commentId: '!:TRecordIDList'
  definition: TRecordIDList
  name: TRecordIDList
  nameWithType: TRecordIDList
  fullName: TRecordIDList
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: TRecordIDList
  isExternal: false
  name: TRecordIDList
  nameWithType: TRecordIDList
  fullName: TRecordIDList
- uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve*
  commentId: Overload:Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve
  isExternal: false
  name: Resolve
  nameWithType: ISearchIndex<T, TRecordIDList>.Resolve
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve
  nameWithType.vb: ISearchIndex(Of T, TRecordIDList).Resolve
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  commentId: T:Microsoft.Health.InvertedIndex.RecordIDEnumerator
  parent: Microsoft.Health.InvertedIndex
  isExternal: false
  name: RecordIDEnumerator
  nameWithType: RecordIDEnumerator
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
- uid: System.Collections.Generic.IList{{T}}
  commentId: T:System.Collections.Generic.IList{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator[]
  name: RecordIDEnumerator[]
  nameWithType: RecordIDEnumerator[]
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator[]
  nameWithType.vb: RecordIDEnumerator()
  fullName.vb: Microsoft.Health.InvertedIndex.RecordIDEnumerator()
  name.vb: RecordIDEnumerator()
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}
  commentId: T:Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}
  parent: Microsoft.Health
  definition: Microsoft.Health.StructList`1
  name: StructList<RecordIDEnumerator>
  nameWithType: StructList<RecordIDEnumerator>
  fullName: Microsoft.Health.StructList<Microsoft.Health.InvertedIndex.RecordIDEnumerator>
  nameWithType.vb: StructList(Of RecordIDEnumerator)
  fullName.vb: Microsoft.Health.StructList(Of Microsoft.Health.InvertedIndex.RecordIDEnumerator)
  name.vb: StructList(Of RecordIDEnumerator)
  spec.csharp:
  - uid: Microsoft.Health.StructList`1
    name: StructList
    nameWithType: StructList
    fullName: Microsoft.Health.StructList
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.StructList`1
    name: StructList
    nameWithType: StructList
    fullName: Microsoft.Health.StructList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.StructList`1
  commentId: T:Microsoft.Health.StructList`1
  isExternal: false
  name: StructList<T>
  nameWithType: StructList<T>
  fullName: Microsoft.Health.StructList<T>
  nameWithType.vb: StructList(Of T)
  fullName.vb: Microsoft.Health.StructList(Of T)
  name.vb: StructList(Of T)
  spec.csharp:
  - uid: Microsoft.Health.StructList`1
    name: StructList
    nameWithType: StructList
    fullName: Microsoft.Health.StructList
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.StructList`1
    name: StructList
    nameWithType: StructList
    fullName: Microsoft.Health.StructList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
