### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.HealthApplicationConfiguration
  commentId: T:Microsoft.Health.HealthApplicationConfiguration
  id: HealthApplicationConfiguration
  parent: Microsoft.Health
  children:
  - Microsoft.Health.HealthApplicationConfiguration.ApplicationCertificate
  - Microsoft.Health.HealthApplicationConfiguration.ApplicationId
  - Microsoft.Health.HealthApplicationConfiguration.BlobStreamUrl
  - Microsoft.Health.HealthApplicationConfiguration.ConnectionLeaseTimeout
  - Microsoft.Health.HealthApplicationConfiguration.ConnectionMaxIdleTime
  - Microsoft.Health.HealthApplicationConfiguration.ConnectionUseHttpKeepAlive
  - Microsoft.Health.HealthApplicationConfiguration.Current
  - Microsoft.Health.HealthApplicationConfiguration.DefaultDefaultRequestTimeout
  - Microsoft.Health.HealthApplicationConfiguration.DefaultDefaultRequestTimeToLive
  - Microsoft.Health.HealthApplicationConfiguration.DefaultHashAlgorithmName
  - Microsoft.Health.HealthApplicationConfiguration.DefaultHmacAlgorithmName
  - Microsoft.Health.HealthApplicationConfiguration.DefaultRequestCompressionThreshold
  - Microsoft.Health.HealthApplicationConfiguration.DefaultRequestTimeout
  - Microsoft.Health.HealthApplicationConfiguration.DefaultRequestTimeToLive
  - Microsoft.Health.HealthApplicationConfiguration.DefaultRetryOnInternal500Count
  - Microsoft.Health.HealthApplicationConfiguration.DefaultRetryOnInternal500SleepSeconds
  - Microsoft.Health.HealthApplicationConfiguration.DefaultSignatureAlgorithmName
  - Microsoft.Health.HealthApplicationConfiguration.DefaultSignatureHashAlgorithmName
  - Microsoft.Health.HealthApplicationConfiguration.DefaultSymmetricAlgorithmName
  - Microsoft.Health.HealthApplicationConfiguration.GetConfigurationString(System.String)
  - Microsoft.Health.HealthApplicationConfiguration.HashAlgorithmName
  - Microsoft.Health.HealthApplicationConfiguration.HealthClientServiceUrl
  - Microsoft.Health.HealthApplicationConfiguration.HealthVaultMethodUrl
  - Microsoft.Health.HealthApplicationConfiguration.HealthVaultShellUrl
  - Microsoft.Health.HealthApplicationConfiguration.HealthVaultTypeSchemaUrl
  - Microsoft.Health.HealthApplicationConfiguration.HealthVaultUrl
  - Microsoft.Health.HealthApplicationConfiguration.HmacAlgorithmName
  - Microsoft.Health.HealthApplicationConfiguration.InlineBlobHashBlockSize
  - Microsoft.Health.HealthApplicationConfiguration.MultiInstanceAware
  - Microsoft.Health.HealthApplicationConfiguration.RequestCompressionMethod
  - Microsoft.Health.HealthApplicationConfiguration.RequestCompressionThreshold
  - Microsoft.Health.HealthApplicationConfiguration.ResponseCompressionMethods
  - Microsoft.Health.HealthApplicationConfiguration.RestHealthVaultUrl
  - Microsoft.Health.HealthApplicationConfiguration.RetryOnInternal500Count
  - Microsoft.Health.HealthApplicationConfiguration.RetryOnInternal500SleepSeconds
  - Microsoft.Health.HealthApplicationConfiguration.ServiceInfoDefaultCacheTtl
  - Microsoft.Health.HealthApplicationConfiguration.SignatureAlgorithmName
  - Microsoft.Health.HealthApplicationConfiguration.SignatureHashAlgorithmName
  - Microsoft.Health.HealthApplicationConfiguration.SupportedTypeVersions
  - Microsoft.Health.HealthApplicationConfiguration.SymmetricAlgorithmName
  - Microsoft.Health.HealthApplicationConfiguration.UseLegacyTypeVersionSupport
  langs:
  - csharp
  - vb
  name: HealthApplicationConfiguration
  nameWithType: HealthApplicationConfiguration
  fullName: Microsoft.Health.HealthApplicationConfiguration
  type: Class
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: HealthApplicationConfiguration
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 22
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGives access to the configuration file for the application and\nexposes some of the settings directly.\n"
  example: []
  syntax:
    content: public class HealthApplicationConfiguration
    content.vb: Public Class HealthApplicationConfiguration
  inheritance:
  - System.Object
  derivedClasses:
  - Microsoft.Health.Web.HealthWebApplicationConfiguration
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - Microsoft.Health.HealthApplicationConfiguration.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  - System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.HealthApplicationConfiguration.Current
  commentId: P:Microsoft.Health.HealthApplicationConfiguration.Current
  id: Current
  parent: Microsoft.Health.HealthApplicationConfiguration
  langs:
  - csharp
  - vb
  name: Current
  nameWithType: HealthApplicationConfiguration.Current
  fullName: Microsoft.Health.HealthApplicationConfiguration.Current
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Current
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 68
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets or sets the current configuration object for the app-domain.\n"
  example: []
  syntax:
    content: public static HealthApplicationConfiguration Current { get; set; }
    content.vb: Public Shared Property Current As HealthApplicationConfiguration
    parameters: []
    return:
      type: Microsoft.Health.HealthApplicationConfiguration
  overload: Microsoft.Health.HealthApplicationConfiguration.Current*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthApplicationConfiguration.HealthVaultUrl
  commentId: P:Microsoft.Health.HealthApplicationConfiguration.HealthVaultUrl
  id: HealthVaultUrl
  parent: Microsoft.Health.HealthApplicationConfiguration
  langs:
  - csharp
  - vb
  name: HealthVaultUrl
  nameWithType: HealthApplicationConfiguration.HealthVaultUrl
  fullName: Microsoft.Health.HealthApplicationConfiguration.HealthVaultUrl
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: HealthVaultUrl
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 86
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the root URL for a default instance of the\nHealthVault web-service.\n"
  remarks: "\nThis property corresponds to the \"HealthServiceUrl\" configuration\nvalue with \"wildcat.ashx\" removed.\n"
  example: []
  syntax:
    content: public virtual Uri HealthVaultUrl { get; }
    content.vb: Public Overridable ReadOnly Property HealthVaultUrl As Uri
    parameters: []
    return:
      type: System.Uri
  overload: Microsoft.Health.HealthApplicationConfiguration.HealthVaultUrl*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.Health.HealthApplicationConfiguration.HealthVaultMethodUrl
  commentId: P:Microsoft.Health.HealthApplicationConfiguration.HealthVaultMethodUrl
  id: HealthVaultMethodUrl
  parent: Microsoft.Health.HealthApplicationConfiguration
  langs:
  - csharp
  - vb
  name: HealthVaultMethodUrl
  nameWithType: HealthApplicationConfiguration.HealthVaultMethodUrl
  fullName: Microsoft.Health.HealthApplicationConfiguration.HealthVaultMethodUrl
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: HealthVaultMethodUrl
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 110
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the HealthVault method request URL for\nthe configured default instance of the HealthVault web-service.\n"
  remarks: "\nThis property corresponds to the \"HealthServiceUrl\" configuration\nvalue.\n"
  example: []
  syntax:
    content: public Uri HealthVaultMethodUrl { get; }
    content.vb: Public ReadOnly Property HealthVaultMethodUrl As Uri
    parameters: []
    return:
      type: System.Uri
  overload: Microsoft.Health.HealthApplicationConfiguration.HealthVaultMethodUrl*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthApplicationConfiguration.HealthVaultTypeSchemaUrl
  commentId: P:Microsoft.Health.HealthApplicationConfiguration.HealthVaultTypeSchemaUrl
  id: HealthVaultTypeSchemaUrl
  parent: Microsoft.Health.HealthApplicationConfiguration
  langs:
  - csharp
  - vb
  name: HealthVaultTypeSchemaUrl
  nameWithType: HealthApplicationConfiguration.HealthVaultTypeSchemaUrl
  fullName: Microsoft.Health.HealthApplicationConfiguration.HealthVaultTypeSchemaUrl
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: HealthVaultTypeSchemaUrl
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 138
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the HealthVault type schema root URL for\nthe configured default instance of the HealthVault web-service.\n"
  remarks: "\nThis property corresponds to the \"HealthServiceUrl\" configuration\nvalue.\n"
  example: []
  syntax:
    content: public Uri HealthVaultTypeSchemaUrl { get; }
    content.vb: Public ReadOnly Property HealthVaultTypeSchemaUrl As Uri
    parameters: []
    return:
      type: System.Uri
  overload: Microsoft.Health.HealthApplicationConfiguration.HealthVaultTypeSchemaUrl*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthApplicationConfiguration.HealthVaultShellUrl
  commentId: P:Microsoft.Health.HealthApplicationConfiguration.HealthVaultShellUrl
  id: HealthVaultShellUrl
  parent: Microsoft.Health.HealthApplicationConfiguration
  langs:
  - csharp
  - vb
  name: HealthVaultShellUrl
  nameWithType: HealthApplicationConfiguration.HealthVaultShellUrl
  fullName: Microsoft.Health.HealthApplicationConfiguration.HealthVaultShellUrl
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: HealthVaultShellUrl
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 156
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the HealthVault Shell URL for\nthe configured default instance of the HealthVault web-service.\n"
  remarks: "\nThis property corresponds to the \"ShellUrl\" configuration\nvalue.\n"
  example: []
  syntax:
    content: public virtual Uri HealthVaultShellUrl { get; }
    content.vb: Public Overridable ReadOnly Property HealthVaultShellUrl As Uri
    parameters: []
    return:
      type: System.Uri
  overload: Microsoft.Health.HealthApplicationConfiguration.HealthVaultShellUrl*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.Health.HealthApplicationConfiguration.BlobStreamUrl
  commentId: P:Microsoft.Health.HealthApplicationConfiguration.BlobStreamUrl
  id: BlobStreamUrl
  parent: Microsoft.Health.HealthApplicationConfiguration
  langs:
  - csharp
  - vb
  name: BlobStreamUrl
  nameWithType: HealthApplicationConfiguration.BlobStreamUrl
  fullName: Microsoft.Health.HealthApplicationConfiguration.BlobStreamUrl
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: BlobStreamUrl
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 180
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the URL to/from which BLOBs get streamed, for\nthe configured default instance of the HealthVault web-service.\n"
  remarks: "\nThis property corresponds to the \"HealthVaultUrl\" configuration\nvalue with the path modified to the appropriate handler.\n"
  example: []
  syntax:
    content: public virtual Uri BlobStreamUrl { get; }
    content.vb: Public Overridable ReadOnly Property BlobStreamUrl As Uri
    parameters: []
    return:
      type: System.Uri
  overload: Microsoft.Health.HealthApplicationConfiguration.BlobStreamUrl*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.Health.HealthApplicationConfiguration.HealthClientServiceUrl
  commentId: P:Microsoft.Health.HealthApplicationConfiguration.HealthClientServiceUrl
  id: HealthClientServiceUrl
  parent: Microsoft.Health.HealthApplicationConfiguration
  langs:
  - csharp
  - vb
  name: HealthClientServiceUrl
  nameWithType: HealthApplicationConfiguration.HealthClientServiceUrl
  fullName: Microsoft.Health.HealthApplicationConfiguration.HealthClientServiceUrl
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: HealthClientServiceUrl
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 205
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the HealthVault client service URL for\nthe configured default instance of the HealthVault web-service,\nfrom the application or web configuration file.\n"
  remarks: "\nThis property corresponds to the \"HealthVaultUrl\" configuration\nvalue with the path modified to the appropriate handler.\n"
  example: []
  syntax:
    content: public virtual Uri HealthClientServiceUrl { get; }
    content.vb: Public Overridable ReadOnly Property HealthClientServiceUrl As Uri
    parameters: []
    return:
      type: System.Uri
  overload: Microsoft.Health.HealthApplicationConfiguration.HealthClientServiceUrl*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.Health.HealthApplicationConfiguration.ApplicationCertificate
  commentId: P:Microsoft.Health.HealthApplicationConfiguration.ApplicationCertificate
  id: ApplicationCertificate
  parent: Microsoft.Health.HealthApplicationConfiguration
  langs:
  - csharp
  - vb
  name: ApplicationCertificate
  nameWithType: HealthApplicationConfiguration.ApplicationCertificate
  fullName: Microsoft.Health.HealthApplicationConfiguration.ApplicationCertificate
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ApplicationCertificate
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 228
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets a certificate containing the application's private key.\n"
  remarks: "\nThis property corresponds to the \"SignatureCertStoreLocation\", \"AppCertSubject\",\n\"ApplicationCertificateFilename\", and \"ApplicationCertificatePassword\" configuration\nvalues.\n"
  example: []
  syntax:
    content: public virtual X509Certificate2 ApplicationCertificate { get; }
    content.vb: Public Overridable ReadOnly Property ApplicationCertificate As X509Certificate2
    parameters: []
    return:
      type: System.Security.Cryptography.X509Certificates.X509Certificate2
  overload: Microsoft.Health.HealthApplicationConfiguration.ApplicationCertificate*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.Health.HealthApplicationConfiguration.ApplicationId
  commentId: P:Microsoft.Health.HealthApplicationConfiguration.ApplicationId
  id: ApplicationId
  parent: Microsoft.Health.HealthApplicationConfiguration
  langs:
  - csharp
  - vb
  name: ApplicationId
  nameWithType: HealthApplicationConfiguration.ApplicationId
  fullName: Microsoft.Health.HealthApplicationConfiguration.ApplicationId
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ApplicationId
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 488
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the application's unique identifier.\n"
  remarks: "\nThis property corresponds to the \"ApplicationId\" configuration\nvalue.\n"
  example: []
  syntax:
    content: public virtual Guid ApplicationId { get; }
    content.vb: Public Overridable ReadOnly Property ApplicationId As Guid
    parameters: []
    return:
      type: System.Guid
  overload: Microsoft.Health.HealthApplicationConfiguration.ApplicationId*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.Health.HealthApplicationConfiguration.HmacAlgorithmName
  commentId: P:Microsoft.Health.HealthApplicationConfiguration.HmacAlgorithmName
  id: HmacAlgorithmName
  parent: Microsoft.Health.HealthApplicationConfiguration
  langs:
  - csharp
  - vb
  name: HmacAlgorithmName
  nameWithType: HealthApplicationConfiguration.HmacAlgorithmName
  fullName: Microsoft.Health.HealthApplicationConfiguration.HmacAlgorithmName
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: HmacAlgorithmName
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 512
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the name of the algorithm used to ensure communication with HealthVault\nisn't tampered with.\n"
  remarks: "\nThis property corresponds to the \"HmacAlgorithmName\" configuration\nvalue. The value defaults to \"HMACSHA256\".\n"
  example: []
  syntax:
    content: public virtual string HmacAlgorithmName { get; }
    content.vb: Public Overridable ReadOnly Property HmacAlgorithmName As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Health.HealthApplicationConfiguration.HmacAlgorithmName*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.Health.HealthApplicationConfiguration.DefaultHmacAlgorithmName
  commentId: F:Microsoft.Health.HealthApplicationConfiguration.DefaultHmacAlgorithmName
  id: DefaultHmacAlgorithmName
  parent: Microsoft.Health.HealthApplicationConfiguration
  langs:
  - csharp
  - vb
  name: DefaultHmacAlgorithmName
  nameWithType: HealthApplicationConfiguration.DefaultHmacAlgorithmName
  fullName: Microsoft.Health.HealthApplicationConfiguration.DefaultHmacAlgorithmName
  type: Field
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DefaultHmacAlgorithmName
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 528
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nThe default HMAC algorithm name.\n"
  example: []
  syntax:
    content: protected const string DefaultHmacAlgorithmName = "HMACSHA256"
    content.vb: Protected Const DefaultHmacAlgorithmName As String = "HMACSHA256"
    return:
      type: System.String
  modifiers.csharp:
  - protected
  - const
  modifiers.vb:
  - Protected
  - Const
- uid: Microsoft.Health.HealthApplicationConfiguration.HashAlgorithmName
  commentId: P:Microsoft.Health.HealthApplicationConfiguration.HashAlgorithmName
  id: HashAlgorithmName
  parent: Microsoft.Health.HealthApplicationConfiguration
  langs:
  - csharp
  - vb
  name: HashAlgorithmName
  nameWithType: HealthApplicationConfiguration.HashAlgorithmName
  fullName: Microsoft.Health.HealthApplicationConfiguration.HashAlgorithmName
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: HashAlgorithmName
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 548
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the name of the hashing algorithm to use when communicating with HealthVault.\n"
  remarks: "\nThis property corresponds to the \"HashAlgorithmName\" configuration\nvalue. The value defaults to \"SHA256\".\n"
  example: []
  syntax:
    content: public virtual string HashAlgorithmName { get; }
    content.vb: Public Overridable ReadOnly Property HashAlgorithmName As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Health.HealthApplicationConfiguration.HashAlgorithmName*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.Health.HealthApplicationConfiguration.DefaultHashAlgorithmName
  commentId: F:Microsoft.Health.HealthApplicationConfiguration.DefaultHashAlgorithmName
  id: DefaultHashAlgorithmName
  parent: Microsoft.Health.HealthApplicationConfiguration
  langs:
  - csharp
  - vb
  name: DefaultHashAlgorithmName
  nameWithType: HealthApplicationConfiguration.DefaultHashAlgorithmName
  fullName: Microsoft.Health.HealthApplicationConfiguration.DefaultHashAlgorithmName
  type: Field
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DefaultHashAlgorithmName
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 564
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nThe default hash algorithm name.\n"
  example: []
  syntax:
    content: protected const string DefaultHashAlgorithmName = "SHA256"
    content.vb: Protected Const DefaultHashAlgorithmName As String = "SHA256"
    return:
      type: System.String
  modifiers.csharp:
  - protected
  - const
  modifiers.vb:
  - Protected
  - Const
- uid: Microsoft.Health.HealthApplicationConfiguration.SignatureHashAlgorithmName
  commentId: P:Microsoft.Health.HealthApplicationConfiguration.SignatureHashAlgorithmName
  id: SignatureHashAlgorithmName
  parent: Microsoft.Health.HealthApplicationConfiguration
  langs:
  - csharp
  - vb
  name: SignatureHashAlgorithmName
  nameWithType: HealthApplicationConfiguration.SignatureHashAlgorithmName
  fullName: Microsoft.Health.HealthApplicationConfiguration.SignatureHashAlgorithmName
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SignatureHashAlgorithmName
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 575
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the name of the signature hash algorithm.\n"
  remarks: "\nThis property corresponds to the \"SignatureHashAlgorithmName\" configuration\nvalue. The value defaults to \"SHA1\".\n"
  example: []
  syntax:
    content: public virtual string SignatureHashAlgorithmName { get; }
    content.vb: Public Overridable ReadOnly Property SignatureHashAlgorithmName As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Health.HealthApplicationConfiguration.SignatureHashAlgorithmName*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.Health.HealthApplicationConfiguration.DefaultSignatureHashAlgorithmName
  commentId: F:Microsoft.Health.HealthApplicationConfiguration.DefaultSignatureHashAlgorithmName
  id: DefaultSignatureHashAlgorithmName
  parent: Microsoft.Health.HealthApplicationConfiguration
  langs:
  - csharp
  - vb
  name: DefaultSignatureHashAlgorithmName
  nameWithType: HealthApplicationConfiguration.DefaultSignatureHashAlgorithmName
  fullName: Microsoft.Health.HealthApplicationConfiguration.DefaultSignatureHashAlgorithmName
  type: Field
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DefaultSignatureHashAlgorithmName
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 591
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nThe default signature hash algorithm name.\n"
  example: []
  syntax:
    content: protected const string DefaultSignatureHashAlgorithmName = "SHA1"
    content.vb: Protected Const DefaultSignatureHashAlgorithmName As String = "SHA1"
    return:
      type: System.String
  modifiers.csharp:
  - protected
  - const
  modifiers.vb:
  - Protected
  - Const
- uid: Microsoft.Health.HealthApplicationConfiguration.SignatureAlgorithmName
  commentId: P:Microsoft.Health.HealthApplicationConfiguration.SignatureAlgorithmName
  id: SignatureAlgorithmName
  parent: Microsoft.Health.HealthApplicationConfiguration
  langs:
  - csharp
  - vb
  name: SignatureAlgorithmName
  nameWithType: HealthApplicationConfiguration.SignatureAlgorithmName
  fullName: Microsoft.Health.HealthApplicationConfiguration.SignatureAlgorithmName
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SignatureAlgorithmName
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 602
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the name of the signature algorithm.\n"
  remarks: "\nThis property corresponds to the \"SignatureAlgorithmName\" configuration\nvalue. The value defaults to \"RSA-SHA1\".\n"
  example: []
  syntax:
    content: public virtual string SignatureAlgorithmName { get; }
    content.vb: Public Overridable ReadOnly Property SignatureAlgorithmName As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Health.HealthApplicationConfiguration.SignatureAlgorithmName*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.Health.HealthApplicationConfiguration.DefaultSignatureAlgorithmName
  commentId: F:Microsoft.Health.HealthApplicationConfiguration.DefaultSignatureAlgorithmName
  id: DefaultSignatureAlgorithmName
  parent: Microsoft.Health.HealthApplicationConfiguration
  langs:
  - csharp
  - vb
  name: DefaultSignatureAlgorithmName
  nameWithType: HealthApplicationConfiguration.DefaultSignatureAlgorithmName
  fullName: Microsoft.Health.HealthApplicationConfiguration.DefaultSignatureAlgorithmName
  type: Field
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DefaultSignatureAlgorithmName
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 618
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nThe default signature algorithm name.\n"
  example: []
  syntax:
    content: protected const string DefaultSignatureAlgorithmName = "RSA-SHA1"
    content.vb: Protected Const DefaultSignatureAlgorithmName As String = "RSA-SHA1"
    return:
      type: System.String
  modifiers.csharp:
  - protected
  - const
  modifiers.vb:
  - Protected
  - Const
- uid: Microsoft.Health.HealthApplicationConfiguration.SymmetricAlgorithmName
  commentId: P:Microsoft.Health.HealthApplicationConfiguration.SymmetricAlgorithmName
  id: SymmetricAlgorithmName
  parent: Microsoft.Health.HealthApplicationConfiguration
  langs:
  - csharp
  - vb
  name: SymmetricAlgorithmName
  nameWithType: HealthApplicationConfiguration.SymmetricAlgorithmName
  fullName: Microsoft.Health.HealthApplicationConfiguration.SymmetricAlgorithmName
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SymmetricAlgorithmName
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 629
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the name of the symmetric algorithm.\n"
  remarks: "\nThis property corresponds to the \"SymmetricAlgorithmName\" configuration\nvalue. The value defaults to \"AES256\".\n"
  example: []
  syntax:
    content: public virtual string SymmetricAlgorithmName { get; }
    content.vb: Public Overridable ReadOnly Property SymmetricAlgorithmName As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Health.HealthApplicationConfiguration.SymmetricAlgorithmName*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.Health.HealthApplicationConfiguration.DefaultSymmetricAlgorithmName
  commentId: F:Microsoft.Health.HealthApplicationConfiguration.DefaultSymmetricAlgorithmName
  id: DefaultSymmetricAlgorithmName
  parent: Microsoft.Health.HealthApplicationConfiguration
  langs:
  - csharp
  - vb
  name: DefaultSymmetricAlgorithmName
  nameWithType: HealthApplicationConfiguration.DefaultSymmetricAlgorithmName
  fullName: Microsoft.Health.HealthApplicationConfiguration.DefaultSymmetricAlgorithmName
  type: Field
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DefaultSymmetricAlgorithmName
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 645
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nThe default symmetric algorithm name.\n"
  example: []
  syntax:
    content: protected const string DefaultSymmetricAlgorithmName = "AES256"
    content.vb: Protected Const DefaultSymmetricAlgorithmName As String = "AES256"
    return:
      type: System.String
  modifiers.csharp:
  - protected
  - const
  modifiers.vb:
  - Protected
  - Const
- uid: Microsoft.Health.HealthApplicationConfiguration.DefaultRequestTimeout
  commentId: P:Microsoft.Health.HealthApplicationConfiguration.DefaultRequestTimeout
  id: DefaultRequestTimeout
  parent: Microsoft.Health.HealthApplicationConfiguration
  langs:
  - csharp
  - vb
  name: DefaultRequestTimeout
  nameWithType: HealthApplicationConfiguration.DefaultRequestTimeout
  fullName: Microsoft.Health.HealthApplicationConfiguration.DefaultRequestTimeout
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DefaultRequestTimeout
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 664
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the request timeout in seconds.\n"
  remarks: "\nThis value is used to set the <xref href=\"System.Net.HttpWebRequest.Timeout\" data-throw-if-not-resolved=\"false\"></xref> property \nwhen making the request to HealthVault. The timeout is the number of seconds that a \nrequest will wait for a response from HealtVault. If the method response is not\nreturned within the time-out period the request will throw a <xref href=\"System.Net.WebException\" data-throw-if-not-resolved=\"false\"></xref>\nwith the <xref href=\"System.Net.WebException.Status\" data-throw-if-not-resolved=\"false\"></xref> property set to\n<xref href=\"System.Net.WebExceptionStatus.Timeout\" data-throw-if-not-resolved=\"false\"></xref>.\nThis property corresponds to the \"defaultRequestTimeout\" configuration\nvalue. The value defaults to 30 seconds.\n"
  example: []
  syntax:
    content: public virtual int DefaultRequestTimeout { get; }
    content.vb: Public Overridable ReadOnly Property DefaultRequestTimeout As Integer
    parameters: []
    return:
      type: System.Int32
  overload: Microsoft.Health.HealthApplicationConfiguration.DefaultRequestTimeout*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.Health.HealthApplicationConfiguration.DefaultDefaultRequestTimeout
  commentId: F:Microsoft.Health.HealthApplicationConfiguration.DefaultDefaultRequestTimeout
  id: DefaultDefaultRequestTimeout
  parent: Microsoft.Health.HealthApplicationConfiguration
  langs:
  - csharp
  - vb
  name: DefaultDefaultRequestTimeout
  nameWithType: HealthApplicationConfiguration.DefaultDefaultRequestTimeout
  fullName: Microsoft.Health.HealthApplicationConfiguration.DefaultDefaultRequestTimeout
  type: Field
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DefaultDefaultRequestTimeout
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 690
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nThe default request time out value.\n"
  example: []
  syntax:
    content: protected const int DefaultDefaultRequestTimeout = 30
    content.vb: Protected Const DefaultDefaultRequestTimeout As Integer = 30
    return:
      type: System.Int32
  modifiers.csharp:
  - protected
  - const
  modifiers.vb:
  - Protected
  - Const
- uid: Microsoft.Health.HealthApplicationConfiguration.DefaultRequestTimeToLive
  commentId: P:Microsoft.Health.HealthApplicationConfiguration.DefaultRequestTimeToLive
  id: DefaultRequestTimeToLive
  parent: Microsoft.Health.HealthApplicationConfiguration
  langs:
  - csharp
  - vb
  name: DefaultRequestTimeToLive
  nameWithType: HealthApplicationConfiguration.DefaultRequestTimeToLive
  fullName: Microsoft.Health.HealthApplicationConfiguration.DefaultRequestTimeToLive
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DefaultRequestTimeToLive
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 703
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the request time to live in seconds.\n"
  remarks: "\nThis property defines the \"msg-ttl\" in the HealthVault request header XML. It determines\nhow long the same XML can be used before HealthVault determines the request invalid.\nThis property corresponds to the \"defaultRequestTimeToLive\" configuration\nvalue. The value defaults to 1800 seconds.\n"
  example: []
  syntax:
    content: public virtual int DefaultRequestTimeToLive { get; }
    content.vb: Public Overridable ReadOnly Property DefaultRequestTimeToLive As Integer
    parameters: []
    return:
      type: System.Int32
  overload: Microsoft.Health.HealthApplicationConfiguration.DefaultRequestTimeToLive*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.Health.HealthApplicationConfiguration.DefaultDefaultRequestTimeToLive
  commentId: F:Microsoft.Health.HealthApplicationConfiguration.DefaultDefaultRequestTimeToLive
  id: DefaultDefaultRequestTimeToLive
  parent: Microsoft.Health.HealthApplicationConfiguration
  langs:
  - csharp
  - vb
  name: DefaultDefaultRequestTimeToLive
  nameWithType: HealthApplicationConfiguration.DefaultDefaultRequestTimeToLive
  fullName: Microsoft.Health.HealthApplicationConfiguration.DefaultDefaultRequestTimeToLive
  type: Field
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DefaultDefaultRequestTimeToLive
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 728
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nThe default request time to live value.\n"
  example: []
  syntax:
    content: protected const int DefaultDefaultRequestTimeToLive = 1800
    content.vb: Protected Const DefaultDefaultRequestTimeToLive As Integer = 1800
    return:
      type: System.Int32
  modifiers.csharp:
  - protected
  - const
  modifiers.vb:
  - Protected
  - Const
- uid: Microsoft.Health.HealthApplicationConfiguration.RetryOnInternal500Count
  commentId: P:Microsoft.Health.HealthApplicationConfiguration.RetryOnInternal500Count
  id: RetryOnInternal500Count
  parent: Microsoft.Health.HealthApplicationConfiguration
  langs:
  - csharp
  - vb
  name: RetryOnInternal500Count
  nameWithType: HealthApplicationConfiguration.RetryOnInternal500Count
  fullName: Microsoft.Health.HealthApplicationConfiguration.RetryOnInternal500Count
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: RetryOnInternal500Count
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 740
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the number of retries the .NET APIs will make when getting an internal\nerror response (error 500) from HealthVault.\n"
  remarks: "\nThis property corresponds to the \"RequestRetryOnInternal500\" configuration\nvalue. The value defaults to 2.\n"
  example: []
  syntax:
    content: public virtual int RetryOnInternal500Count { get; }
    content.vb: Public Overridable ReadOnly Property RetryOnInternal500Count As Integer
    parameters: []
    return:
      type: System.Int32
  overload: Microsoft.Health.HealthApplicationConfiguration.RetryOnInternal500Count*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.Health.HealthApplicationConfiguration.DefaultRetryOnInternal500Count
  commentId: F:Microsoft.Health.HealthApplicationConfiguration.DefaultRetryOnInternal500Count
  id: DefaultRetryOnInternal500Count
  parent: Microsoft.Health.HealthApplicationConfiguration
  langs:
  - csharp
  - vb
  name: DefaultRetryOnInternal500Count
  nameWithType: HealthApplicationConfiguration.DefaultRetryOnInternal500Count
  fullName: Microsoft.Health.HealthApplicationConfiguration.DefaultRetryOnInternal500Count
  type: Field
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DefaultRetryOnInternal500Count
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 758
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nThe default number of internal retries.\n"
  example: []
  syntax:
    content: protected const int DefaultRetryOnInternal500Count = 2
    content.vb: Protected Const DefaultRetryOnInternal500Count As Integer = 2
    return:
      type: System.Int32
  modifiers.csharp:
  - protected
  - const
  modifiers.vb:
  - Protected
  - Const
- uid: Microsoft.Health.HealthApplicationConfiguration.RetryOnInternal500SleepSeconds
  commentId: P:Microsoft.Health.HealthApplicationConfiguration.RetryOnInternal500SleepSeconds
  id: RetryOnInternal500SleepSeconds
  parent: Microsoft.Health.HealthApplicationConfiguration
  langs:
  - csharp
  - vb
  name: RetryOnInternal500SleepSeconds
  nameWithType: HealthApplicationConfiguration.RetryOnInternal500SleepSeconds
  fullName: Microsoft.Health.HealthApplicationConfiguration.RetryOnInternal500SleepSeconds
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: RetryOnInternal500SleepSeconds
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 770
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the sleep duration in seconds between retries due to HealthVault returning\nan internal error (error 500).\n"
  remarks: "\nThis property corresponds to the \"RequestRetryOnInternal500SleepSeconds\" configuration\nvalue. The value defaults to 1 second.\n"
  example: []
  syntax:
    content: public virtual int RetryOnInternal500SleepSeconds { get; }
    content.vb: Public Overridable ReadOnly Property RetryOnInternal500SleepSeconds As Integer
    parameters: []
    return:
      type: System.Int32
  overload: Microsoft.Health.HealthApplicationConfiguration.RetryOnInternal500SleepSeconds*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.Health.HealthApplicationConfiguration.DefaultRetryOnInternal500SleepSeconds
  commentId: F:Microsoft.Health.HealthApplicationConfiguration.DefaultRetryOnInternal500SleepSeconds
  id: DefaultRetryOnInternal500SleepSeconds
  parent: Microsoft.Health.HealthApplicationConfiguration
  langs:
  - csharp
  - vb
  name: DefaultRetryOnInternal500SleepSeconds
  nameWithType: HealthApplicationConfiguration.DefaultRetryOnInternal500SleepSeconds
  fullName: Microsoft.Health.HealthApplicationConfiguration.DefaultRetryOnInternal500SleepSeconds
  type: Field
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DefaultRetryOnInternal500SleepSeconds
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 789
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nDefault sleep duration in seconds.\n"
  example: []
  syntax:
    content: protected const int DefaultRetryOnInternal500SleepSeconds = 1
    content.vb: Protected Const DefaultRetryOnInternal500SleepSeconds As Integer = 1
    return:
      type: System.Int32
  modifiers.csharp:
  - protected
  - const
  modifiers.vb:
  - Protected
  - Const
- uid: Microsoft.Health.HealthApplicationConfiguration.RequestCompressionThreshold
  commentId: P:Microsoft.Health.HealthApplicationConfiguration.RequestCompressionThreshold
  id: RequestCompressionThreshold
  parent: Microsoft.Health.HealthApplicationConfiguration
  langs:
  - csharp
  - vb
  name: RequestCompressionThreshold
  nameWithType: HealthApplicationConfiguration.RequestCompressionThreshold
  fullName: Microsoft.Health.HealthApplicationConfiguration.RequestCompressionThreshold
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: RequestCompressionThreshold
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 800
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the size in kilobytes above which requests will be compressed.\n"
  remarks: "\nThis property corresponds to the \"requestCompressionThreshold\" configuration\nvalue. The value defaults to 1KB.\n"
  example: []
  syntax:
    content: public virtual int RequestCompressionThreshold { get; }
    content.vb: Public Overridable ReadOnly Property RequestCompressionThreshold As Integer
    parameters: []
    return:
      type: System.Int32
  overload: Microsoft.Health.HealthApplicationConfiguration.RequestCompressionThreshold*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.Health.HealthApplicationConfiguration.DefaultRequestCompressionThreshold
  commentId: F:Microsoft.Health.HealthApplicationConfiguration.DefaultRequestCompressionThreshold
  id: DefaultRequestCompressionThreshold
  parent: Microsoft.Health.HealthApplicationConfiguration
  langs:
  - csharp
  - vb
  name: DefaultRequestCompressionThreshold
  nameWithType: HealthApplicationConfiguration.DefaultRequestCompressionThreshold
  fullName: Microsoft.Health.HealthApplicationConfiguration.DefaultRequestCompressionThreshold
  type: Field
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DefaultRequestCompressionThreshold
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 818
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nDefault size for compression threshold\n"
  example: []
  syntax:
    content: protected const int DefaultRequestCompressionThreshold = 1
    content.vb: Protected Const DefaultRequestCompressionThreshold As Integer = 1
    return:
      type: System.Int32
  modifiers.csharp:
  - protected
  - const
  modifiers.vb:
  - Protected
  - Const
- uid: Microsoft.Health.HealthApplicationConfiguration.RequestCompressionMethod
  commentId: P:Microsoft.Health.HealthApplicationConfiguration.RequestCompressionMethod
  id: RequestCompressionMethod
  parent: Microsoft.Health.HealthApplicationConfiguration
  langs:
  - csharp
  - vb
  name: RequestCompressionMethod
  nameWithType: HealthApplicationConfiguration.RequestCompressionMethod
  fullName: Microsoft.Health.HealthApplicationConfiguration.RequestCompressionMethod
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: RequestCompressionMethod
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 829
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the method used to compress requests.\n"
  remarks: "\nThis property corresponds to the \"requestCompressionMethod\" configuration\nvalue. The value defaults is to not compress requests.\n"
  example: []
  syntax:
    content: public virtual string RequestCompressionMethod { get; }
    content.vb: Public Overridable ReadOnly Property RequestCompressionMethod As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Health.HealthApplicationConfiguration.RequestCompressionMethod*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.Health.HealthApplicationConfiguration.ResponseCompressionMethods
  commentId: P:Microsoft.Health.HealthApplicationConfiguration.ResponseCompressionMethods
  id: ResponseCompressionMethods
  parent: Microsoft.Health.HealthApplicationConfiguration
  langs:
  - csharp
  - vb
  name: ResponseCompressionMethods
  nameWithType: HealthApplicationConfiguration.ResponseCompressionMethods
  fullName: Microsoft.Health.HealthApplicationConfiguration.ResponseCompressionMethods
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ResponseCompressionMethods
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 870
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the application's supported compression methods that can be sent back \nfrom HealtVault during a method response.\n"
  remarks: "\nThis property corresponds to the \"responseCompressionMethods\" configuration\nvalue. The value defaults to not compress responses.\n"
  example: []
  syntax:
    content: public virtual string ResponseCompressionMethods { get; }
    content.vb: Public Overridable ReadOnly Property ResponseCompressionMethods As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Health.HealthApplicationConfiguration.ResponseCompressionMethods*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.Health.HealthApplicationConfiguration.InlineBlobHashBlockSize
  commentId: P:Microsoft.Health.HealthApplicationConfiguration.InlineBlobHashBlockSize
  id: InlineBlobHashBlockSize
  parent: Microsoft.Health.HealthApplicationConfiguration
  langs:
  - csharp
  - vb
  name: InlineBlobHashBlockSize
  nameWithType: HealthApplicationConfiguration.InlineBlobHashBlockSize
  fullName: Microsoft.Health.HealthApplicationConfiguration.InlineBlobHashBlockSize
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: InlineBlobHashBlockSize
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 925
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the size in bytes of the block used to hash inlined BLOB data.\n"
  remarks: "\nThis property corresponds to the \"defaultInlineBlobHashBlockSize\" configuration\nvalue. The value defaults to 2MB.\n"
  example: []
  syntax:
    content: public virtual int InlineBlobHashBlockSize { get; }
    content.vb: Public Overridable ReadOnly Property InlineBlobHashBlockSize As Integer
    parameters: []
    return:
      type: System.Int32
  overload: Microsoft.Health.HealthApplicationConfiguration.InlineBlobHashBlockSize*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.Health.HealthApplicationConfiguration.SupportedTypeVersions
  commentId: P:Microsoft.Health.HealthApplicationConfiguration.SupportedTypeVersions
  id: SupportedTypeVersions
  parent: Microsoft.Health.HealthApplicationConfiguration
  langs:
  - csharp
  - vb
  name: SupportedTypeVersions
  nameWithType: HealthApplicationConfiguration.SupportedTypeVersions
  fullName: Microsoft.Health.HealthApplicationConfiguration.SupportedTypeVersions
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SupportedTypeVersions
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 977
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the type version identifiers of types supported by this application.\n"
  remarks: "\nAlthough most applications don't need this configuration setting, if an application\ncalls <xref href=\"Microsoft.Health.HealthRecordAccessor.GetItem(System.Guid)\" data-throw-if-not-resolved=\"false\"></xref> or makes any query to HealthVault\nthat doesn't specify the type identifier in the filter, this configuration setting\nwill tell HealthVault the format of the type to reply with. For example, if a web \napplication has two servers and makes a call to GetItem for EncounterV1 and the \napplication authorization is set to the EncounterV1 format then the application will\nget EncounterV1 instances back even if the record contains Encounter v2 instances. Now\nthe application wants to upgrade to Encounter v2 without having application down-time.\nIn order to do this, one of the application servers must be updated to Encounter v2 while\nthe other still works with EncounterV1. If we were to rely solely on application\nauthorization one of the servers would be broken during the upgrade. However, by using\nthis configuration value to specify what type version the server supports (rather than\nthe application), then both servers can continue to work while the application is\nupgraded.\n"
  example: []
  syntax:
    content: public virtual IList<Guid> SupportedTypeVersions { get; }
    content.vb: Public Overridable ReadOnly Property SupportedTypeVersions As IList(Of Guid)
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.Guid}
  overload: Microsoft.Health.HealthApplicationConfiguration.SupportedTypeVersions*
  exceptions:
  - type: Microsoft.Health.InvalidConfigurationException
    commentId: T:Microsoft.Health.InvalidConfigurationException
    description: "\nIf the configuration contains the name of a type that is not registered as a type handler\nin <xref href=\"Microsoft.Health.ItemTypeManager\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.Health.HealthApplicationConfiguration.UseLegacyTypeVersionSupport
  commentId: P:Microsoft.Health.HealthApplicationConfiguration.UseLegacyTypeVersionSupport
  id: UseLegacyTypeVersionSupport
  parent: Microsoft.Health.HealthApplicationConfiguration
  langs:
  - csharp
  - vb
  name: UseLegacyTypeVersionSupport
  nameWithType: HealthApplicationConfiguration.UseLegacyTypeVersionSupport
  fullName: Microsoft.Health.HealthApplicationConfiguration.UseLegacyTypeVersionSupport
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: UseLegacyTypeVersionSupport
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 1031
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets a value indicating whether or not legacy type versioning support should be used.\n"
  remarks: "\nType versions support was initially determined by an applications base authorizations\nand/or the <xref href=\"Microsoft.Health.HealthRecordView.TypeVersionFormat\" data-throw-if-not-resolved=\"false\"></xref>. Some of these behaviors\nwere unexpected which led to changes to automatically put the <xref href=\"Microsoft.Health.HealthRecordFilter.TypeIds\" data-throw-if-not-resolved=\"false\"></xref>\nand <xref href=\"Microsoft.Health.HealthApplicationConfiguration.SupportedTypeVersions\" data-throw-if-not-resolved=\"false\"></xref> into the\n<xref href=\"Microsoft.Health.HealthRecordView.TypeVersionFormat\" data-throw-if-not-resolved=\"false\"></xref> automatically for developers. This \nexhibits the expected behavior for most applications. However, in some rare cases \napplications may need to revert back to the original behavior. When this property\nreturns true the original behavior will be observed. If false, the new behavior will\nbe observed. This property defaults to false and can be changed in the web.config file\n\"UseLegacyTypeVersionSupport\" setting.\n"
  example: []
  syntax:
    content: public virtual bool UseLegacyTypeVersionSupport { get; }
    content.vb: Public Overridable ReadOnly Property UseLegacyTypeVersionSupport As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.Health.HealthApplicationConfiguration.UseLegacyTypeVersionSupport*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.Health.HealthApplicationConfiguration.MultiInstanceAware
  commentId: P:Microsoft.Health.HealthApplicationConfiguration.MultiInstanceAware
  id: MultiInstanceAware
  parent: Microsoft.Health.HealthApplicationConfiguration
  langs:
  - csharp
  - vb
  name: MultiInstanceAware
  nameWithType: HealthApplicationConfiguration.MultiInstanceAware
  fullName: Microsoft.Health.HealthApplicationConfiguration.MultiInstanceAware
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: MultiInstanceAware
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 1067
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the value which indicates whether the application is able to handle connecting to multiple\ninstances of the HealthVault web-service. \n"
  remarks: "\nThis setting defaults to <strong>true</strong> and can be set in an application\nconfiguration file, using the \"MultiInstanceAware\" setting key.\n<p>\nApplications in HealthVault can be configured to support more than one instance of the HealthVault web-service.\nIn such a case, and when the MultiInstanceAware configuration is set to <strong>true</strong>, all redirects generated\nthrough the HealthVault .NET API will have a flag set indicating that the application is able to deal with\nHealthVault accounts that may reside in other HealthVault instances.  In such a case, HealthVault Shell can\nredirect back with an account associated with any one of the instances of the HealthVault web-service which\nthe application has chosen to support.  The application may then need to be able to handle connecting to the\nappropriate instance of the HealthVault web-service for each account.\n</p>\n<p>\nFor more information see the <a href=\"http://go.microsoft.com/?linkid=9830913\">Global HealthVault Architecture</a> article.\n</p>\n"
  example: []
  syntax:
    content: public virtual bool MultiInstanceAware { get; }
    content.vb: Public Overridable ReadOnly Property MultiInstanceAware As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.Health.HealthApplicationConfiguration.MultiInstanceAware*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.Health.HealthApplicationConfiguration.ConnectionMaxIdleTime
  commentId: P:Microsoft.Health.HealthApplicationConfiguration.ConnectionMaxIdleTime
  id: ConnectionMaxIdleTime
  parent: Microsoft.Health.HealthApplicationConfiguration
  langs:
  - csharp
  - vb
  name: ConnectionMaxIdleTime
  nameWithType: HealthApplicationConfiguration.ConnectionMaxIdleTime
  fullName: Microsoft.Health.HealthApplicationConfiguration.ConnectionMaxIdleTime
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ConnectionMaxIdleTime
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 1103
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the amount of time, in milliseconds, that the application's connection can \nremain idle before the HealthVault framework closes the connection.\n"
  remarks: "\nThis default value is 110 seconds of inactivity.\n<p>\nThis setting only applies when using HTTP Persistent Connections\n<xref href=\"Microsoft.Health.HealthApplicationConfiguration.ConnectionUseHttpKeepAlive\" data-throw-if-not-resolved=\"false\"></xref>.  \n</p>\n<p>\nSetting this property to -1 indicates the connection should never\ntime out.\n</p>\n<p>\nThis property corresponds to the \"ConnectionMaxIdleTime\" configuration value.\n</p>\n"
  example: []
  syntax:
    content: public virtual int ConnectionMaxIdleTime { get; }
    content.vb: Public Overridable ReadOnly Property ConnectionMaxIdleTime As Integer
    parameters: []
    return:
      type: System.Int32
  overload: Microsoft.Health.HealthApplicationConfiguration.ConnectionMaxIdleTime*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.Health.HealthApplicationConfiguration.ConnectionLeaseTimeout
  commentId: P:Microsoft.Health.HealthApplicationConfiguration.ConnectionLeaseTimeout
  id: ConnectionLeaseTimeout
  parent: Microsoft.Health.HealthApplicationConfiguration
  langs:
  - csharp
  - vb
  name: ConnectionLeaseTimeout
  nameWithType: HealthApplicationConfiguration.ConnectionLeaseTimeout
  fullName: Microsoft.Health.HealthApplicationConfiguration.ConnectionLeaseTimeout
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ConnectionLeaseTimeout
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 1150
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the amount of time, in milliseconds, that the application's connection can \nremain open before the HealthVault framework closes the connection.\n"
  remarks: "\nThe default value is 5 minutes.\n<p>\nThis setting only applies when using HTTP Persistent Connections\n<xref href=\"Microsoft.Health.HealthApplicationConfiguration.ConnectionUseHttpKeepAlive\" data-throw-if-not-resolved=\"false\"></xref>.  \n</p>\n<p>\nUsing this property ensures that active connections do not remain open\nindefinitely, even if actively used. This property is intended\nwhen connections should be dropped and reestablished periodically, such\nas load balancing scenarios.\n</p>\n<p>\nSetting the property to -1 indicates connections should stay open idefinitely.\n</p>\n<p>\nThis property corresponds to the \"ConnectionLeaseTimeout\" configuration value.\n</p>\n"
  example: []
  syntax:
    content: public virtual int ConnectionLeaseTimeout { get; }
    content.vb: Public Overridable ReadOnly Property ConnectionLeaseTimeout As Integer
    parameters: []
    return:
      type: System.Int32
  overload: Microsoft.Health.HealthApplicationConfiguration.ConnectionLeaseTimeout*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.Health.HealthApplicationConfiguration.ConnectionUseHttpKeepAlive
  commentId: P:Microsoft.Health.HealthApplicationConfiguration.ConnectionUseHttpKeepAlive
  id: ConnectionUseHttpKeepAlive
  parent: Microsoft.Health.HealthApplicationConfiguration
  langs:
  - csharp
  - vb
  name: ConnectionUseHttpKeepAlive
  nameWithType: HealthApplicationConfiguration.ConnectionUseHttpKeepAlive
  fullName: Microsoft.Health.HealthApplicationConfiguration.ConnectionUseHttpKeepAlive
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ConnectionUseHttpKeepAlive
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 1184
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets a value that indicates whether the application uses Http 1.1 persistent\nconnections to HealthVault.\n"
  remarks: "\nTrue to use persistent connections; otherwise false. The default is true.\n<p>\nThis property corresponds to the \"ConnectionUseHttpKeepAlive\" configuration value.\n</p>\n"
  example: []
  syntax:
    content: public virtual bool ConnectionUseHttpKeepAlive { get; }
    content.vb: Public Overridable ReadOnly Property ConnectionUseHttpKeepAlive As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.Health.HealthApplicationConfiguration.ConnectionUseHttpKeepAlive*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.Health.HealthApplicationConfiguration.ServiceInfoDefaultCacheTtl
  commentId: P:Microsoft.Health.HealthApplicationConfiguration.ServiceInfoDefaultCacheTtl
  id: ServiceInfoDefaultCacheTtl
  parent: Microsoft.Health.HealthApplicationConfiguration
  langs:
  - csharp
  - vb
  name: ServiceInfoDefaultCacheTtl
  nameWithType: HealthApplicationConfiguration.ServiceInfoDefaultCacheTtl
  fullName: Microsoft.Health.HealthApplicationConfiguration.ServiceInfoDefaultCacheTtl
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ServiceInfoDefaultCacheTtl
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 1220
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the value which specifies the period of time before the <xref href=\"ServiceInfo.Current\" data-throw-if-not-resolved=\"false\"></xref> built-in cache is considered expired.\n"
  remarks: "\n<p>\nDefault value is <strong>24 hours</strong>.  This property corresponds to the \"ServiceInfoDefaultCacheTtlMilliseconds\" configuration value.\n</p>\n<p>\nThe next request for the object after the cache is expired will result in a call to the HealthVault web-service\nto obtain an up-to-date copy of the service information.\n</p>\n<p>\nAn application can override the entire caching and service info retrieval behavior\nby passing its own implementation of <xref href=\"Microsoft.Health.IServiceInfoProvider\" data-throw-if-not-resolved=\"false\"></xref> to\n<xref href=\"Microsoft.Health.ServiceInfo.SetSingletonProvider(Microsoft.Health.IServiceInfoProvider)\" data-throw-if-not-resolved=\"false\"></xref>.  In such\na case this configuration is no longer applicable.\n</p>\n"
  example: []
  syntax:
    content: public TimeSpan ServiceInfoDefaultCacheTtl { get; }
    content.vb: Public ReadOnly Property ServiceInfoDefaultCacheTtl As TimeSpan
    parameters: []
    return:
      type: System.TimeSpan
  overload: Microsoft.Health.HealthApplicationConfiguration.ServiceInfoDefaultCacheTtl*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthApplicationConfiguration.RestHealthVaultUrl
  commentId: P:Microsoft.Health.HealthApplicationConfiguration.RestHealthVaultUrl
  id: RestHealthVaultUrl
  parent: Microsoft.Health.HealthApplicationConfiguration
  langs:
  - csharp
  - vb
  name: RestHealthVaultUrl
  nameWithType: HealthApplicationConfiguration.RestHealthVaultUrl
  fullName: Microsoft.Health.HealthApplicationConfiguration.RestHealthVaultUrl
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: RestHealthVaultUrl
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 1259
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the root URL for a default instance of the\nRest HealthVault service\n"
  remarks: "\nThis property corresponds to the \"RestHealthServiceUrl\" configuration.\n"
  example: []
  syntax:
    content: public virtual Uri RestHealthVaultUrl { get; }
    content.vb: Public Overridable ReadOnly Property RestHealthVaultUrl As Uri
    parameters: []
    return:
      type: System.Uri
  overload: Microsoft.Health.HealthApplicationConfiguration.RestHealthVaultUrl*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.Health.HealthApplicationConfiguration.GetConfigurationString(System.String)
  commentId: M:Microsoft.Health.HealthApplicationConfiguration.GetConfigurationString(System.String)
  id: GetConfigurationString(System.String)
  parent: Microsoft.Health.HealthApplicationConfiguration
  langs:
  - csharp
  - vb
  name: GetConfigurationString(String)
  nameWithType: HealthApplicationConfiguration.GetConfigurationString(String)
  fullName: Microsoft.Health.HealthApplicationConfiguration.GetConfigurationString(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthApplicationConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetConfigurationString
    path: ../Microsoft.Health/HealthApplicationConfiguration.cs
    startLine: 1282
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the string configuration value given the key\n"
  example: []
  syntax:
    content: protected virtual string GetConfigurationString(string configurationKey)
    content.vb: Protected Overridable Function GetConfigurationString(configurationKey As String) As String
    parameters:
    - id: configurationKey
      type: System.String
      description: Key to look up the configuration item.
    return:
      type: System.String
      description: String value of the configuration item, should return null if key not found.
  overload: Microsoft.Health.HealthApplicationConfiguration.GetConfigurationString*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  name: SetProperty(String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object())
  name.vb: SetProperty(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  name: InvokeMethod(String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object())
  name.vb: InvokeMethod(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  parent: Microsoft.Health.Utility.InvariantString
  definition: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  name: ToStringInvariant()
  nameWithType: InvariantString.ToStringInvariant()
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant()
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthApplicationConfiguration.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  parent: Microsoft.Health.Utility.TypeHelper
  definition: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  name: ValueOrDbNull<HealthApplicationConfiguration>()
  nameWithType: TypeHelper.ValueOrDbNull<HealthApplicationConfiguration>()
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.HealthApplicationConfiguration>()
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of HealthApplicationConfiguration)()
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.HealthApplicationConfiguration)()
  name.vb: ValueOrDbNull(Of HealthApplicationConfiguration)()
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull<HealthApplicationConfiguration>
    nameWithType: TypeHelper.ValueOrDbNull<HealthApplicationConfiguration>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.HealthApplicationConfiguration>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull(Of HealthApplicationConfiguration)
    nameWithType: TypeHelper.ValueOrDbNull(Of HealthApplicationConfiguration)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.HealthApplicationConfiguration)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  parent: Microsoft.Health.Utility.WCXmlHelper
  definition: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  name: ToXml()
  nameWithType: WCXmlHelper.ToXml()
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml()
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  isExternal: true
  name: SetProperty(Object, String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object())
  name.vb: SetProperty(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions
  commentId: T:Microsoft.Health.Utility.IDispatchExtensions
  parent: Microsoft.Health.Utility
  isExternal: false
  name: IDispatchExtensions
  nameWithType: IDispatchExtensions
  fullName: Microsoft.Health.Utility.IDispatchExtensions
- uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  isExternal: true
  name: InvokeMethod(Object, String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object())
  name.vb: InvokeMethod(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  isExternal: true
  name: ToStringInvariant(Object)
  nameWithType: InvariantString.ToStringInvariant(Object)
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString
  commentId: T:Microsoft.Health.Utility.InvariantString
  parent: Microsoft.Health.Utility
  isExternal: false
  name: InvariantString
  nameWithType: InvariantString
  fullName: Microsoft.Health.Utility.InvariantString
- uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  isExternal: false
  name: ValueOrDbNull<T>(T)
  nameWithType: TypeHelper.ValueOrDbNull<T>(T)
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>(T)
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of T)(T)
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)(T)
  name.vb: ValueOrDbNull(Of T)(T)
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull<T>
    nameWithType: TypeHelper.ValueOrDbNull<T>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull(Of T)
    nameWithType: TypeHelper.ValueOrDbNull(Of T)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.TypeHelper
  commentId: T:Microsoft.Health.Utility.TypeHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: TypeHelper
  nameWithType: TypeHelper
  fullName: Microsoft.Health.Utility.TypeHelper
- uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  isExternal: true
  name: ToXml(Object)
  nameWithType: WCXmlHelper.ToXml(Object)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.WCXmlHelper
  commentId: T:Microsoft.Health.Utility.WCXmlHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: WCXmlHelper
  nameWithType: WCXmlHelper
  fullName: Microsoft.Health.Utility.WCXmlHelper
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: Microsoft.Health.HealthApplicationConfiguration.Current*
  commentId: Overload:Microsoft.Health.HealthApplicationConfiguration.Current
  isExternal: false
  name: Current
  nameWithType: HealthApplicationConfiguration.Current
  fullName: Microsoft.Health.HealthApplicationConfiguration.Current
- uid: Microsoft.Health.HealthApplicationConfiguration
  commentId: T:Microsoft.Health.HealthApplicationConfiguration
  parent: Microsoft.Health
  isExternal: false
  name: HealthApplicationConfiguration
  nameWithType: HealthApplicationConfiguration
  fullName: Microsoft.Health.HealthApplicationConfiguration
- uid: Microsoft.Health.HealthApplicationConfiguration.HealthVaultUrl*
  commentId: Overload:Microsoft.Health.HealthApplicationConfiguration.HealthVaultUrl
  isExternal: false
  name: HealthVaultUrl
  nameWithType: HealthApplicationConfiguration.HealthVaultUrl
  fullName: Microsoft.Health.HealthApplicationConfiguration.HealthVaultUrl
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: Microsoft.Health.HealthApplicationConfiguration.HealthVaultMethodUrl*
  commentId: Overload:Microsoft.Health.HealthApplicationConfiguration.HealthVaultMethodUrl
  isExternal: false
  name: HealthVaultMethodUrl
  nameWithType: HealthApplicationConfiguration.HealthVaultMethodUrl
  fullName: Microsoft.Health.HealthApplicationConfiguration.HealthVaultMethodUrl
- uid: Microsoft.Health.HealthApplicationConfiguration.HealthVaultTypeSchemaUrl*
  commentId: Overload:Microsoft.Health.HealthApplicationConfiguration.HealthVaultTypeSchemaUrl
  isExternal: false
  name: HealthVaultTypeSchemaUrl
  nameWithType: HealthApplicationConfiguration.HealthVaultTypeSchemaUrl
  fullName: Microsoft.Health.HealthApplicationConfiguration.HealthVaultTypeSchemaUrl
- uid: Microsoft.Health.HealthApplicationConfiguration.HealthVaultShellUrl*
  commentId: Overload:Microsoft.Health.HealthApplicationConfiguration.HealthVaultShellUrl
  isExternal: false
  name: HealthVaultShellUrl
  nameWithType: HealthApplicationConfiguration.HealthVaultShellUrl
  fullName: Microsoft.Health.HealthApplicationConfiguration.HealthVaultShellUrl
- uid: Microsoft.Health.HealthApplicationConfiguration.BlobStreamUrl*
  commentId: Overload:Microsoft.Health.HealthApplicationConfiguration.BlobStreamUrl
  isExternal: false
  name: BlobStreamUrl
  nameWithType: HealthApplicationConfiguration.BlobStreamUrl
  fullName: Microsoft.Health.HealthApplicationConfiguration.BlobStreamUrl
- uid: Microsoft.Health.HealthApplicationConfiguration.HealthClientServiceUrl*
  commentId: Overload:Microsoft.Health.HealthApplicationConfiguration.HealthClientServiceUrl
  isExternal: false
  name: HealthClientServiceUrl
  nameWithType: HealthApplicationConfiguration.HealthClientServiceUrl
  fullName: Microsoft.Health.HealthApplicationConfiguration.HealthClientServiceUrl
- uid: Microsoft.Health.HealthApplicationConfiguration.ApplicationCertificate*
  commentId: Overload:Microsoft.Health.HealthApplicationConfiguration.ApplicationCertificate
  isExternal: false
  name: ApplicationCertificate
  nameWithType: HealthApplicationConfiguration.ApplicationCertificate
  fullName: Microsoft.Health.HealthApplicationConfiguration.ApplicationCertificate
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2
  commentId: T:System.Security.Cryptography.X509Certificates.X509Certificate2
  parent: System.Security.Cryptography.X509Certificates
  isExternal: true
  name: X509Certificate2
  nameWithType: X509Certificate2
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2
- uid: System.Security.Cryptography.X509Certificates
  commentId: N:System.Security.Cryptography.X509Certificates
  isExternal: false
  name: System.Security.Cryptography.X509Certificates
  nameWithType: System.Security.Cryptography.X509Certificates
  fullName: System.Security.Cryptography.X509Certificates
- uid: Microsoft.Health.HealthApplicationConfiguration.ApplicationId*
  commentId: Overload:Microsoft.Health.HealthApplicationConfiguration.ApplicationId
  isExternal: false
  name: ApplicationId
  nameWithType: HealthApplicationConfiguration.ApplicationId
  fullName: Microsoft.Health.HealthApplicationConfiguration.ApplicationId
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: Microsoft.Health.HealthApplicationConfiguration.HmacAlgorithmName*
  commentId: Overload:Microsoft.Health.HealthApplicationConfiguration.HmacAlgorithmName
  isExternal: false
  name: HmacAlgorithmName
  nameWithType: HealthApplicationConfiguration.HmacAlgorithmName
  fullName: Microsoft.Health.HealthApplicationConfiguration.HmacAlgorithmName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Health.HealthApplicationConfiguration.HashAlgorithmName*
  commentId: Overload:Microsoft.Health.HealthApplicationConfiguration.HashAlgorithmName
  isExternal: false
  name: HashAlgorithmName
  nameWithType: HealthApplicationConfiguration.HashAlgorithmName
  fullName: Microsoft.Health.HealthApplicationConfiguration.HashAlgorithmName
- uid: Microsoft.Health.HealthApplicationConfiguration.SignatureHashAlgorithmName*
  commentId: Overload:Microsoft.Health.HealthApplicationConfiguration.SignatureHashAlgorithmName
  isExternal: false
  name: SignatureHashAlgorithmName
  nameWithType: HealthApplicationConfiguration.SignatureHashAlgorithmName
  fullName: Microsoft.Health.HealthApplicationConfiguration.SignatureHashAlgorithmName
- uid: Microsoft.Health.HealthApplicationConfiguration.SignatureAlgorithmName*
  commentId: Overload:Microsoft.Health.HealthApplicationConfiguration.SignatureAlgorithmName
  isExternal: false
  name: SignatureAlgorithmName
  nameWithType: HealthApplicationConfiguration.SignatureAlgorithmName
  fullName: Microsoft.Health.HealthApplicationConfiguration.SignatureAlgorithmName
- uid: Microsoft.Health.HealthApplicationConfiguration.SymmetricAlgorithmName*
  commentId: Overload:Microsoft.Health.HealthApplicationConfiguration.SymmetricAlgorithmName
  isExternal: false
  name: SymmetricAlgorithmName
  nameWithType: HealthApplicationConfiguration.SymmetricAlgorithmName
  fullName: Microsoft.Health.HealthApplicationConfiguration.SymmetricAlgorithmName
- uid: System.Net.HttpWebRequest.Timeout
  commentId: P:System.Net.HttpWebRequest.Timeout
- uid: System.Net.WebException
  commentId: T:System.Net.WebException
- uid: System.Net.WebException.Status
  commentId: P:System.Net.WebException.Status
- uid: System.Net.WebExceptionStatus.Timeout
  commentId: F:System.Net.WebExceptionStatus.Timeout
- uid: Microsoft.Health.HealthApplicationConfiguration.DefaultRequestTimeout*
  commentId: Overload:Microsoft.Health.HealthApplicationConfiguration.DefaultRequestTimeout
  isExternal: false
  name: DefaultRequestTimeout
  nameWithType: HealthApplicationConfiguration.DefaultRequestTimeout
  fullName: Microsoft.Health.HealthApplicationConfiguration.DefaultRequestTimeout
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Health.HealthApplicationConfiguration.DefaultRequestTimeToLive*
  commentId: Overload:Microsoft.Health.HealthApplicationConfiguration.DefaultRequestTimeToLive
  isExternal: false
  name: DefaultRequestTimeToLive
  nameWithType: HealthApplicationConfiguration.DefaultRequestTimeToLive
  fullName: Microsoft.Health.HealthApplicationConfiguration.DefaultRequestTimeToLive
- uid: Microsoft.Health.HealthApplicationConfiguration.RetryOnInternal500Count*
  commentId: Overload:Microsoft.Health.HealthApplicationConfiguration.RetryOnInternal500Count
  isExternal: false
  name: RetryOnInternal500Count
  nameWithType: HealthApplicationConfiguration.RetryOnInternal500Count
  fullName: Microsoft.Health.HealthApplicationConfiguration.RetryOnInternal500Count
- uid: Microsoft.Health.HealthApplicationConfiguration.RetryOnInternal500SleepSeconds*
  commentId: Overload:Microsoft.Health.HealthApplicationConfiguration.RetryOnInternal500SleepSeconds
  isExternal: false
  name: RetryOnInternal500SleepSeconds
  nameWithType: HealthApplicationConfiguration.RetryOnInternal500SleepSeconds
  fullName: Microsoft.Health.HealthApplicationConfiguration.RetryOnInternal500SleepSeconds
- uid: Microsoft.Health.HealthApplicationConfiguration.RequestCompressionThreshold*
  commentId: Overload:Microsoft.Health.HealthApplicationConfiguration.RequestCompressionThreshold
  isExternal: false
  name: RequestCompressionThreshold
  nameWithType: HealthApplicationConfiguration.RequestCompressionThreshold
  fullName: Microsoft.Health.HealthApplicationConfiguration.RequestCompressionThreshold
- uid: Microsoft.Health.HealthApplicationConfiguration.RequestCompressionMethod*
  commentId: Overload:Microsoft.Health.HealthApplicationConfiguration.RequestCompressionMethod
  isExternal: false
  name: RequestCompressionMethod
  nameWithType: HealthApplicationConfiguration.RequestCompressionMethod
  fullName: Microsoft.Health.HealthApplicationConfiguration.RequestCompressionMethod
- uid: Microsoft.Health.HealthApplicationConfiguration.ResponseCompressionMethods*
  commentId: Overload:Microsoft.Health.HealthApplicationConfiguration.ResponseCompressionMethods
  isExternal: false
  name: ResponseCompressionMethods
  nameWithType: HealthApplicationConfiguration.ResponseCompressionMethods
  fullName: Microsoft.Health.HealthApplicationConfiguration.ResponseCompressionMethods
- uid: Microsoft.Health.HealthApplicationConfiguration.InlineBlobHashBlockSize*
  commentId: Overload:Microsoft.Health.HealthApplicationConfiguration.InlineBlobHashBlockSize
  isExternal: false
  name: InlineBlobHashBlockSize
  nameWithType: HealthApplicationConfiguration.InlineBlobHashBlockSize
  fullName: Microsoft.Health.HealthApplicationConfiguration.InlineBlobHashBlockSize
- uid: Microsoft.Health.HealthRecordAccessor.GetItem(System.Guid)
  commentId: M:Microsoft.Health.HealthRecordAccessor.GetItem(System.Guid)
  parent: Microsoft.Health.HealthRecordAccessor
  isExternal: true
  name: GetItem(Guid)
  nameWithType: HealthRecordAccessor.GetItem(Guid)
  fullName: Microsoft.Health.HealthRecordAccessor.GetItem(System.Guid)
  spec.csharp:
  - uid: Microsoft.Health.HealthRecordAccessor.GetItem(System.Guid)
    name: GetItem
    nameWithType: HealthRecordAccessor.GetItem
    fullName: Microsoft.Health.HealthRecordAccessor.GetItem
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.HealthRecordAccessor.GetItem(System.Guid)
    name: GetItem
    nameWithType: HealthRecordAccessor.GetItem
    fullName: Microsoft.Health.HealthRecordAccessor.GetItem
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ItemTypeManager
  commentId: T:Microsoft.Health.ItemTypeManager
  isExternal: false
  name: ItemTypeManager
  nameWithType: ItemTypeManager
  fullName: Microsoft.Health.ItemTypeManager
- uid: Microsoft.Health.HealthApplicationConfiguration.SupportedTypeVersions*
  commentId: Overload:Microsoft.Health.HealthApplicationConfiguration.SupportedTypeVersions
  isExternal: false
  name: SupportedTypeVersions
  nameWithType: HealthApplicationConfiguration.SupportedTypeVersions
  fullName: Microsoft.Health.HealthApplicationConfiguration.SupportedTypeVersions
- uid: Microsoft.Health.InvalidConfigurationException
  commentId: T:Microsoft.Health.InvalidConfigurationException
  isExternal: false
  name: InvalidConfigurationException
  nameWithType: InvalidConfigurationException
  fullName: Microsoft.Health.InvalidConfigurationException
- uid: System.Collections.Generic.IList{System.Guid}
  commentId: T:System.Collections.Generic.IList{System.Guid}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Guid>
  nameWithType: IList<Guid>
  fullName: System.Collections.Generic.IList<System.Guid>
  nameWithType.vb: IList(Of Guid)
  fullName.vb: System.Collections.Generic.IList(Of System.Guid)
  name.vb: IList(Of Guid)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthRecordAccessor
  commentId: T:Microsoft.Health.HealthRecordAccessor
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordAccessor
  nameWithType: HealthRecordAccessor
  fullName: Microsoft.Health.HealthRecordAccessor
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Health.HealthRecordView.TypeVersionFormat
  commentId: P:Microsoft.Health.HealthRecordView.TypeVersionFormat
- uid: Microsoft.Health.HealthRecordFilter.TypeIds
  commentId: P:Microsoft.Health.HealthRecordFilter.TypeIds
- uid: Microsoft.Health.HealthApplicationConfiguration.SupportedTypeVersions
  commentId: P:Microsoft.Health.HealthApplicationConfiguration.SupportedTypeVersions
  parent: Microsoft.Health.HealthApplicationConfiguration
  isExternal: false
  name: SupportedTypeVersions
  nameWithType: HealthApplicationConfiguration.SupportedTypeVersions
  fullName: Microsoft.Health.HealthApplicationConfiguration.SupportedTypeVersions
- uid: Microsoft.Health.HealthApplicationConfiguration.UseLegacyTypeVersionSupport*
  commentId: Overload:Microsoft.Health.HealthApplicationConfiguration.UseLegacyTypeVersionSupport
  isExternal: false
  name: UseLegacyTypeVersionSupport
  nameWithType: HealthApplicationConfiguration.UseLegacyTypeVersionSupport
  fullName: Microsoft.Health.HealthApplicationConfiguration.UseLegacyTypeVersionSupport
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Health.HealthApplicationConfiguration.MultiInstanceAware*
  commentId: Overload:Microsoft.Health.HealthApplicationConfiguration.MultiInstanceAware
  isExternal: false
  name: MultiInstanceAware
  nameWithType: HealthApplicationConfiguration.MultiInstanceAware
  fullName: Microsoft.Health.HealthApplicationConfiguration.MultiInstanceAware
- uid: Microsoft.Health.HealthApplicationConfiguration.ConnectionUseHttpKeepAlive
  commentId: P:Microsoft.Health.HealthApplicationConfiguration.ConnectionUseHttpKeepAlive
  parent: Microsoft.Health.HealthApplicationConfiguration
  isExternal: false
  name: ConnectionUseHttpKeepAlive
  nameWithType: HealthApplicationConfiguration.ConnectionUseHttpKeepAlive
  fullName: Microsoft.Health.HealthApplicationConfiguration.ConnectionUseHttpKeepAlive
- uid: Microsoft.Health.HealthApplicationConfiguration.ConnectionMaxIdleTime*
  commentId: Overload:Microsoft.Health.HealthApplicationConfiguration.ConnectionMaxIdleTime
  isExternal: false
  name: ConnectionMaxIdleTime
  nameWithType: HealthApplicationConfiguration.ConnectionMaxIdleTime
  fullName: Microsoft.Health.HealthApplicationConfiguration.ConnectionMaxIdleTime
- uid: Microsoft.Health.HealthApplicationConfiguration.ConnectionLeaseTimeout*
  commentId: Overload:Microsoft.Health.HealthApplicationConfiguration.ConnectionLeaseTimeout
  isExternal: false
  name: ConnectionLeaseTimeout
  nameWithType: HealthApplicationConfiguration.ConnectionLeaseTimeout
  fullName: Microsoft.Health.HealthApplicationConfiguration.ConnectionLeaseTimeout
- uid: Microsoft.Health.HealthApplicationConfiguration.ConnectionUseHttpKeepAlive*
  commentId: Overload:Microsoft.Health.HealthApplicationConfiguration.ConnectionUseHttpKeepAlive
  isExternal: false
  name: ConnectionUseHttpKeepAlive
  nameWithType: HealthApplicationConfiguration.ConnectionUseHttpKeepAlive
  fullName: Microsoft.Health.HealthApplicationConfiguration.ConnectionUseHttpKeepAlive
- uid: ServiceInfo.Current
  commentId: P:ServiceInfo.Current
- uid: Microsoft.Health.IServiceInfoProvider
  commentId: T:Microsoft.Health.IServiceInfoProvider
  parent: Microsoft.Health
  isExternal: false
  name: IServiceInfoProvider
  nameWithType: IServiceInfoProvider
  fullName: Microsoft.Health.IServiceInfoProvider
- uid: Microsoft.Health.ServiceInfo.SetSingletonProvider(Microsoft.Health.IServiceInfoProvider)
  commentId: M:Microsoft.Health.ServiceInfo.SetSingletonProvider(Microsoft.Health.IServiceInfoProvider)
- uid: Microsoft.Health.HealthApplicationConfiguration.ServiceInfoDefaultCacheTtl*
  commentId: Overload:Microsoft.Health.HealthApplicationConfiguration.ServiceInfoDefaultCacheTtl
  isExternal: false
  name: ServiceInfoDefaultCacheTtl
  nameWithType: HealthApplicationConfiguration.ServiceInfoDefaultCacheTtl
  fullName: Microsoft.Health.HealthApplicationConfiguration.ServiceInfoDefaultCacheTtl
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: Microsoft.Health.HealthApplicationConfiguration.RestHealthVaultUrl*
  commentId: Overload:Microsoft.Health.HealthApplicationConfiguration.RestHealthVaultUrl
  isExternal: false
  name: RestHealthVaultUrl
  nameWithType: HealthApplicationConfiguration.RestHealthVaultUrl
  fullName: Microsoft.Health.HealthApplicationConfiguration.RestHealthVaultUrl
- uid: Microsoft.Health.HealthApplicationConfiguration.GetConfigurationString*
  commentId: Overload:Microsoft.Health.HealthApplicationConfiguration.GetConfigurationString
  isExternal: false
  name: GetConfigurationString
  nameWithType: HealthApplicationConfiguration.GetConfigurationString
  fullName: Microsoft.Health.HealthApplicationConfiguration.GetConfigurationString
