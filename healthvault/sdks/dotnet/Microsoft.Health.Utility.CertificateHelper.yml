### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.Utility.CertificateHelper
  commentId: T:Microsoft.Health.Utility.CertificateHelper
  id: CertificateHelper
  parent: Microsoft.Health.Utility
  children:
  - Microsoft.Health.Utility.CertificateHelper.FindCertificateBySubjectName(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.String)
  - Microsoft.Health.Utility.CertificateHelper.FindCertificateBySubjectName(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.String,Microsoft.Health.Utility.Diagnostics.TraceLog,System.UInt16)
  - Microsoft.Health.Utility.CertificateHelper.FindCertificateByThumbprint(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.String,System.Boolean)
  - Microsoft.Health.Utility.CertificateHelper.FindCertificateByThumbprint(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.String,System.Boolean,Microsoft.Health.Utility.Diagnostics.TraceLog,System.UInt16)
  - Microsoft.Health.Utility.CertificateHelper.GetCachedPrivateKey(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.String,System.Boolean,Microsoft.Health.Utility.Diagnostics.TraceLog,System.UInt16)
  - Microsoft.Health.Utility.CertificateHelper.GetCachedPublicKey(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.String,System.Boolean,Microsoft.Health.Utility.Diagnostics.TraceLog,System.UInt16)
  langs:
  - csharp
  - vb
  name: CertificateHelper
  nameWithType: CertificateHelper
  fullName: Microsoft.Health.Utility.CertificateHelper
  type: Class
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/CertificateHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CertificateHelper
    path: ../Microsoft.Health.Utility/utilities/CertificateHelper.cs
    startLine: 17
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  syntax:
    content: public static class CertificateHelper
    content.vb: Public Module CertificateHelper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Health.Utility.CertificateHelper.GetCachedPrivateKey(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.String,System.Boolean,Microsoft.Health.Utility.Diagnostics.TraceLog,System.UInt16)
  commentId: M:Microsoft.Health.Utility.CertificateHelper.GetCachedPrivateKey(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.String,System.Boolean,Microsoft.Health.Utility.Diagnostics.TraceLog,System.UInt16)
  id: GetCachedPrivateKey(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.String,System.Boolean,Microsoft.Health.Utility.Diagnostics.TraceLog,System.UInt16)
  parent: Microsoft.Health.Utility.CertificateHelper
  langs:
  - csharp
  - vb
  name: GetCachedPrivateKey(StoreName, StoreLocation, String, Boolean, TraceLog, UInt16)
  nameWithType: CertificateHelper.GetCachedPrivateKey(StoreName, StoreLocation, String, Boolean, TraceLog, UInt16)
  fullName: Microsoft.Health.Utility.CertificateHelper.GetCachedPrivateKey(System.Security.Cryptography.X509Certificates.StoreName, System.Security.Cryptography.X509Certificates.StoreLocation, System.String, System.Boolean, Microsoft.Health.Utility.Diagnostics.TraceLog, System.UInt16)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/CertificateHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetCachedPrivateKey
    path: ../Microsoft.Health.Utility/utilities/CertificateHelper.cs
    startLine: 22
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  syntax:
    content: public static AsymmetricAlgorithm GetCachedPrivateKey(StoreName storeName, StoreLocation storeLocation, string thumbprint, bool validOnly, TraceLog log, ushort eventId)
    content.vb: Public Shared Function GetCachedPrivateKey(storeName As StoreName, storeLocation As StoreLocation, thumbprint As String, validOnly As Boolean, log As TraceLog, eventId As UShort) As AsymmetricAlgorithm
    parameters:
    - id: storeName
      type: System.Security.Cryptography.X509Certificates.StoreName
    - id: storeLocation
      type: System.Security.Cryptography.X509Certificates.StoreLocation
    - id: thumbprint
      type: System.String
    - id: validOnly
      type: System.Boolean
    - id: log
      type: Microsoft.Health.Utility.Diagnostics.TraceLog
    - id: eventId
      type: System.UInt16
    return:
      type: System.Security.Cryptography.AsymmetricAlgorithm
  overload: Microsoft.Health.Utility.CertificateHelper.GetCachedPrivateKey*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.CertificateHelper.GetCachedPublicKey(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.String,System.Boolean,Microsoft.Health.Utility.Diagnostics.TraceLog,System.UInt16)
  commentId: M:Microsoft.Health.Utility.CertificateHelper.GetCachedPublicKey(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.String,System.Boolean,Microsoft.Health.Utility.Diagnostics.TraceLog,System.UInt16)
  id: GetCachedPublicKey(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.String,System.Boolean,Microsoft.Health.Utility.Diagnostics.TraceLog,System.UInt16)
  parent: Microsoft.Health.Utility.CertificateHelper
  langs:
  - csharp
  - vb
  name: GetCachedPublicKey(StoreName, StoreLocation, String, Boolean, TraceLog, UInt16)
  nameWithType: CertificateHelper.GetCachedPublicKey(StoreName, StoreLocation, String, Boolean, TraceLog, UInt16)
  fullName: Microsoft.Health.Utility.CertificateHelper.GetCachedPublicKey(System.Security.Cryptography.X509Certificates.StoreName, System.Security.Cryptography.X509Certificates.StoreLocation, System.String, System.Boolean, Microsoft.Health.Utility.Diagnostics.TraceLog, System.UInt16)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/CertificateHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetCachedPublicKey
    path: ../Microsoft.Health.Utility/utilities/CertificateHelper.cs
    startLine: 34
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  syntax:
    content: public static AsymmetricAlgorithm GetCachedPublicKey(StoreName storeName, StoreLocation storeLocation, string thumbprint, bool validOnly, TraceLog log, ushort eventId)
    content.vb: Public Shared Function GetCachedPublicKey(storeName As StoreName, storeLocation As StoreLocation, thumbprint As String, validOnly As Boolean, log As TraceLog, eventId As UShort) As AsymmetricAlgorithm
    parameters:
    - id: storeName
      type: System.Security.Cryptography.X509Certificates.StoreName
    - id: storeLocation
      type: System.Security.Cryptography.X509Certificates.StoreLocation
    - id: thumbprint
      type: System.String
    - id: validOnly
      type: System.Boolean
    - id: log
      type: Microsoft.Health.Utility.Diagnostics.TraceLog
    - id: eventId
      type: System.UInt16
    return:
      type: System.Security.Cryptography.AsymmetricAlgorithm
  overload: Microsoft.Health.Utility.CertificateHelper.GetCachedPublicKey*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.CertificateHelper.FindCertificateBySubjectName(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.String)
  commentId: M:Microsoft.Health.Utility.CertificateHelper.FindCertificateBySubjectName(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.String)
  id: FindCertificateBySubjectName(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.String)
  parent: Microsoft.Health.Utility.CertificateHelper
  langs:
  - csharp
  - vb
  name: FindCertificateBySubjectName(StoreName, StoreLocation, String)
  nameWithType: CertificateHelper.FindCertificateBySubjectName(StoreName, StoreLocation, String)
  fullName: Microsoft.Health.Utility.CertificateHelper.FindCertificateBySubjectName(System.Security.Cryptography.X509Certificates.StoreName, System.Security.Cryptography.X509Certificates.StoreLocation, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/CertificateHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: FindCertificateBySubjectName
    path: ../Microsoft.Health.Utility/utilities/CertificateHelper.cs
    startLine: 70
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  syntax:
    content: public static DisposableX509Certificate FindCertificateBySubjectName(StoreName storeName, StoreLocation storeLocation, string subjectName)
    content.vb: Public Shared Function FindCertificateBySubjectName(storeName As StoreName, storeLocation As StoreLocation, subjectName As String) As DisposableX509Certificate
    parameters:
    - id: storeName
      type: System.Security.Cryptography.X509Certificates.StoreName
    - id: storeLocation
      type: System.Security.Cryptography.X509Certificates.StoreLocation
    - id: subjectName
      type: System.String
    return:
      type: Microsoft.Health.Utility.DisposableX509Certificate
  overload: Microsoft.Health.Utility.CertificateHelper.FindCertificateBySubjectName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.CertificateHelper.FindCertificateBySubjectName(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.String,Microsoft.Health.Utility.Diagnostics.TraceLog,System.UInt16)
  commentId: M:Microsoft.Health.Utility.CertificateHelper.FindCertificateBySubjectName(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.String,Microsoft.Health.Utility.Diagnostics.TraceLog,System.UInt16)
  id: FindCertificateBySubjectName(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.String,Microsoft.Health.Utility.Diagnostics.TraceLog,System.UInt16)
  parent: Microsoft.Health.Utility.CertificateHelper
  langs:
  - csharp
  - vb
  name: FindCertificateBySubjectName(StoreName, StoreLocation, String, TraceLog, UInt16)
  nameWithType: CertificateHelper.FindCertificateBySubjectName(StoreName, StoreLocation, String, TraceLog, UInt16)
  fullName: Microsoft.Health.Utility.CertificateHelper.FindCertificateBySubjectName(System.Security.Cryptography.X509Certificates.StoreName, System.Security.Cryptography.X509Certificates.StoreLocation, System.String, Microsoft.Health.Utility.Diagnostics.TraceLog, System.UInt16)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/CertificateHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: FindCertificateBySubjectName
    path: ../Microsoft.Health.Utility/utilities/CertificateHelper.cs
    startLine: 78
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  syntax:
    content: public static DisposableX509Certificate FindCertificateBySubjectName(StoreName storeName, StoreLocation storeLocation, string subjectName, TraceLog log, ushort eventId)
    content.vb: Public Shared Function FindCertificateBySubjectName(storeName As StoreName, storeLocation As StoreLocation, subjectName As String, log As TraceLog, eventId As UShort) As DisposableX509Certificate
    parameters:
    - id: storeName
      type: System.Security.Cryptography.X509Certificates.StoreName
    - id: storeLocation
      type: System.Security.Cryptography.X509Certificates.StoreLocation
    - id: subjectName
      type: System.String
    - id: log
      type: Microsoft.Health.Utility.Diagnostics.TraceLog
    - id: eventId
      type: System.UInt16
    return:
      type: Microsoft.Health.Utility.DisposableX509Certificate
  overload: Microsoft.Health.Utility.CertificateHelper.FindCertificateBySubjectName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.CertificateHelper.FindCertificateByThumbprint(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.String,System.Boolean)
  commentId: M:Microsoft.Health.Utility.CertificateHelper.FindCertificateByThumbprint(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.String,System.Boolean)
  id: FindCertificateByThumbprint(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.String,System.Boolean)
  parent: Microsoft.Health.Utility.CertificateHelper
  langs:
  - csharp
  - vb
  name: FindCertificateByThumbprint(StoreName, StoreLocation, String, Boolean)
  nameWithType: CertificateHelper.FindCertificateByThumbprint(StoreName, StoreLocation, String, Boolean)
  fullName: Microsoft.Health.Utility.CertificateHelper.FindCertificateByThumbprint(System.Security.Cryptography.X509Certificates.StoreName, System.Security.Cryptography.X509Certificates.StoreLocation, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/CertificateHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: FindCertificateByThumbprint
    path: ../Microsoft.Health.Utility/utilities/CertificateHelper.cs
    startLine: 99
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  syntax:
    content: public static DisposableX509Certificate FindCertificateByThumbprint(StoreName storeName, StoreLocation storeLocation, string thumbprint, bool validOnly = true)
    content.vb: Public Shared Function FindCertificateByThumbprint(storeName As StoreName, storeLocation As StoreLocation, thumbprint As String, validOnly As Boolean = True) As DisposableX509Certificate
    parameters:
    - id: storeName
      type: System.Security.Cryptography.X509Certificates.StoreName
    - id: storeLocation
      type: System.Security.Cryptography.X509Certificates.StoreLocation
    - id: thumbprint
      type: System.String
    - id: validOnly
      type: System.Boolean
    return:
      type: Microsoft.Health.Utility.DisposableX509Certificate
  overload: Microsoft.Health.Utility.CertificateHelper.FindCertificateByThumbprint*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.CertificateHelper.FindCertificateByThumbprint(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.String,System.Boolean,Microsoft.Health.Utility.Diagnostics.TraceLog,System.UInt16)
  commentId: M:Microsoft.Health.Utility.CertificateHelper.FindCertificateByThumbprint(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.String,System.Boolean,Microsoft.Health.Utility.Diagnostics.TraceLog,System.UInt16)
  id: FindCertificateByThumbprint(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.String,System.Boolean,Microsoft.Health.Utility.Diagnostics.TraceLog,System.UInt16)
  parent: Microsoft.Health.Utility.CertificateHelper
  langs:
  - csharp
  - vb
  name: FindCertificateByThumbprint(StoreName, StoreLocation, String, Boolean, TraceLog, UInt16)
  nameWithType: CertificateHelper.FindCertificateByThumbprint(StoreName, StoreLocation, String, Boolean, TraceLog, UInt16)
  fullName: Microsoft.Health.Utility.CertificateHelper.FindCertificateByThumbprint(System.Security.Cryptography.X509Certificates.StoreName, System.Security.Cryptography.X509Certificates.StoreLocation, System.String, System.Boolean, Microsoft.Health.Utility.Diagnostics.TraceLog, System.UInt16)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/CertificateHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: FindCertificateByThumbprint
    path: ../Microsoft.Health.Utility/utilities/CertificateHelper.cs
    startLine: 108
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  syntax:
    content: public static DisposableX509Certificate FindCertificateByThumbprint(StoreName storeName, StoreLocation storeLocation, string thumbprint, bool validOnly, TraceLog log, ushort eventId)
    content.vb: Public Shared Function FindCertificateByThumbprint(storeName As StoreName, storeLocation As StoreLocation, thumbprint As String, validOnly As Boolean, log As TraceLog, eventId As UShort) As DisposableX509Certificate
    parameters:
    - id: storeName
      type: System.Security.Cryptography.X509Certificates.StoreName
    - id: storeLocation
      type: System.Security.Cryptography.X509Certificates.StoreLocation
    - id: thumbprint
      type: System.String
    - id: validOnly
      type: System.Boolean
    - id: log
      type: Microsoft.Health.Utility.Diagnostics.TraceLog
    - id: eventId
      type: System.UInt16
    return:
      type: Microsoft.Health.Utility.DisposableX509Certificate
  overload: Microsoft.Health.Utility.CertificateHelper.FindCertificateByThumbprint*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Utility.CertificateHelper.GetCachedPrivateKey*
  commentId: Overload:Microsoft.Health.Utility.CertificateHelper.GetCachedPrivateKey
  isExternal: false
  name: GetCachedPrivateKey
  nameWithType: CertificateHelper.GetCachedPrivateKey
  fullName: Microsoft.Health.Utility.CertificateHelper.GetCachedPrivateKey
- uid: System.Security.Cryptography.X509Certificates.StoreName
  commentId: T:System.Security.Cryptography.X509Certificates.StoreName
  parent: System.Security.Cryptography.X509Certificates
  isExternal: true
  name: StoreName
  nameWithType: StoreName
  fullName: System.Security.Cryptography.X509Certificates.StoreName
- uid: System.Security.Cryptography.X509Certificates.StoreLocation
  commentId: T:System.Security.Cryptography.X509Certificates.StoreLocation
  parent: System.Security.Cryptography.X509Certificates
  isExternal: true
  name: StoreLocation
  nameWithType: StoreLocation
  fullName: System.Security.Cryptography.X509Certificates.StoreLocation
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Health.Utility.Diagnostics.TraceLog
  commentId: T:Microsoft.Health.Utility.Diagnostics.TraceLog
  parent: Microsoft.Health.Utility.Diagnostics
  isExternal: false
  name: TraceLog
  nameWithType: TraceLog
  fullName: Microsoft.Health.Utility.Diagnostics.TraceLog
- uid: System.UInt16
  commentId: T:System.UInt16
  parent: System
  isExternal: true
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  commentId: T:System.Security.Cryptography.AsymmetricAlgorithm
  parent: System.Security.Cryptography
  isExternal: true
  name: AsymmetricAlgorithm
  nameWithType: AsymmetricAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm
- uid: System.Security.Cryptography.X509Certificates
  commentId: N:System.Security.Cryptography.X509Certificates
  isExternal: false
  name: System.Security.Cryptography.X509Certificates
  nameWithType: System.Security.Cryptography.X509Certificates
  fullName: System.Security.Cryptography.X509Certificates
- uid: Microsoft.Health.Utility.Diagnostics
  commentId: N:Microsoft.Health.Utility.Diagnostics
  isExternal: false
  name: Microsoft.Health.Utility.Diagnostics
  nameWithType: Microsoft.Health.Utility.Diagnostics
  fullName: Microsoft.Health.Utility.Diagnostics
- uid: System.Security.Cryptography
  commentId: N:System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  nameWithType: System.Security.Cryptography
  fullName: System.Security.Cryptography
- uid: Microsoft.Health.Utility.CertificateHelper.GetCachedPublicKey*
  commentId: Overload:Microsoft.Health.Utility.CertificateHelper.GetCachedPublicKey
  isExternal: false
  name: GetCachedPublicKey
  nameWithType: CertificateHelper.GetCachedPublicKey
  fullName: Microsoft.Health.Utility.CertificateHelper.GetCachedPublicKey
- uid: Microsoft.Health.Utility.CertificateHelper.FindCertificateBySubjectName*
  commentId: Overload:Microsoft.Health.Utility.CertificateHelper.FindCertificateBySubjectName
  isExternal: false
  name: FindCertificateBySubjectName
  nameWithType: CertificateHelper.FindCertificateBySubjectName
  fullName: Microsoft.Health.Utility.CertificateHelper.FindCertificateBySubjectName
- uid: Microsoft.Health.Utility.DisposableX509Certificate
  commentId: T:Microsoft.Health.Utility.DisposableX509Certificate
  parent: Microsoft.Health.Utility
  isExternal: false
  name: DisposableX509Certificate
  nameWithType: DisposableX509Certificate
  fullName: Microsoft.Health.Utility.DisposableX509Certificate
- uid: Microsoft.Health.Utility.CertificateHelper.FindCertificateByThumbprint*
  commentId: Overload:Microsoft.Health.Utility.CertificateHelper.FindCertificateByThumbprint
  isExternal: false
  name: FindCertificateByThumbprint
  nameWithType: CertificateHelper.FindCertificateByThumbprint
  fullName: Microsoft.Health.Utility.CertificateHelper.FindCertificateByThumbprint
