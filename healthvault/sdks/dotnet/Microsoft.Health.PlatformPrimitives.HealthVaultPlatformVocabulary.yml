### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary
  commentId: T:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary
  id: HealthVaultPlatformVocabulary
  parent: Microsoft.Health.PlatformPrimitives
  children:
  - Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.DisableMock
  - Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.EnableMock(Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary)
  - Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.GetVocabulary(Microsoft.Health.HealthServiceConnection,System.Collections.Generic.IList{Microsoft.Health.VocabularyKey},System.Boolean)
  - Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.GetVocabularyKeys(Microsoft.Health.HealthServiceConnection)
  - Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.SearchVocabulary(Microsoft.Health.HealthServiceConnection,Microsoft.Health.VocabularyKey,System.String,Microsoft.Health.VocabularySearchType,System.Nullable{System.Int32},Microsoft.Health.VocabularyItemCollection@,System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Health.VocabularyKey}@)
  langs:
  - csharp
  - vb
  name: HealthVaultPlatformVocabulary
  nameWithType: HealthVaultPlatformVocabulary
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary
  type: Class
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformVocabulary.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: HealthVaultPlatformVocabulary
    path: ../Microsoft.Health/HealthVaultPlatformVocabulary.cs
    startLine: 22
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nProvides low-level access to the HealthVault vocabulary operations.\n"
  remarks: "\n<xref href=\"Microsoft.Health.HealthVaultPlatform\" data-throw-if-not-resolved=\"false\"></xref> uses this class to perform operations. Set \nHealthVaultPlatformVocabulary.Current to a derived class to intercept all message calls.\n"
  example: []
  syntax:
    content: public class HealthVaultPlatformVocabulary
    content.vb: Public Class HealthVaultPlatformVocabulary
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  - System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.EnableMock(Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary)
  commentId: M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.EnableMock(Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary)
  id: EnableMock(Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary)
  parent: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary
  langs:
  - csharp
  - vb
  name: EnableMock(HealthVaultPlatformVocabulary)
  nameWithType: HealthVaultPlatformVocabulary.EnableMock(HealthVaultPlatformVocabulary)
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.EnableMock(Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformVocabulary.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: EnableMock
    path: ../Microsoft.Health/HealthVaultPlatformVocabulary.cs
    startLine: 39
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nEnables mocking of calls to this class.\n"
  remarks: "\nThe calling class should pass in a class that derives from this\nclass and overrides the calls to be mocked. \n"
  example: []
  syntax:
    content: public static void EnableMock(HealthVaultPlatformVocabulary mock)
    content.vb: Public Shared Sub EnableMock(mock As HealthVaultPlatformVocabulary)
    parameters:
    - id: mock
      type: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary
      description: The mocking class.
  overload: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.EnableMock*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThere is already a mock registered for this class.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.DisableMock
  commentId: M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.DisableMock
  id: DisableMock
  parent: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary
  langs:
  - csharp
  - vb
  name: DisableMock()
  nameWithType: HealthVaultPlatformVocabulary.DisableMock()
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.DisableMock()
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformVocabulary.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DisableMock
    path: ../Microsoft.Health/HealthVaultPlatformVocabulary.cs
    startLine: 55
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nRemoves mocking of calls to this class.\n"
  example: []
  syntax:
    content: public static void DisableMock()
    content.vb: Public Shared Sub DisableMock
  overload: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.DisableMock*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThere is no mock registered for this class.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.GetVocabulary(Microsoft.Health.HealthServiceConnection,System.Collections.Generic.IList{Microsoft.Health.VocabularyKey},System.Boolean)
  commentId: M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.GetVocabulary(Microsoft.Health.HealthServiceConnection,System.Collections.Generic.IList{Microsoft.Health.VocabularyKey},System.Boolean)
  id: GetVocabulary(Microsoft.Health.HealthServiceConnection,System.Collections.Generic.IList{Microsoft.Health.VocabularyKey},System.Boolean)
  parent: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary
  langs:
  - csharp
  - vb
  name: GetVocabulary(HealthServiceConnection, IList<VocabularyKey>, Boolean)
  nameWithType: HealthVaultPlatformVocabulary.GetVocabulary(HealthServiceConnection, IList<VocabularyKey>, Boolean)
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.GetVocabulary(Microsoft.Health.HealthServiceConnection, System.Collections.Generic.IList<Microsoft.Health.VocabularyKey>, System.Boolean)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformVocabulary.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetVocabulary
    path: ../Microsoft.Health/HealthVaultPlatformVocabulary.cs
    startLine: 125
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nRetrieves lists of vocabulary items for the specified \nvocabularies and culture.\n"
  example: []
  syntax:
    content: public virtual ReadOnlyCollection<Vocabulary> GetVocabulary(HealthServiceConnection connection, IList<VocabularyKey> vocabularyKeys, bool cultureIsFixed)
    content.vb: Public Overridable Function GetVocabulary(connection As HealthServiceConnection, vocabularyKeys As IList(Of VocabularyKey), cultureIsFixed As Boolean) As ReadOnlyCollection(Of Vocabulary)
    parameters:
    - id: connection
      type: Microsoft.Health.HealthServiceConnection
      description: "\nThe connection to use for this operation. The connection\nmust have application capability. \n"
    - id: vocabularyKeys
      type: System.Collections.Generic.IList{Microsoft.Health.VocabularyKey}
      description: "\nA list of keys identifying the requested vocabularies.\n"
    - id: cultureIsFixed
      type: System.Boolean
      description: "\nHealthVault looks for the vocabulary items for the culture info\nspecified using <xref href=\"Microsoft.Health.HealthServiceConnection.Culture\" data-throw-if-not-resolved=\"false\"></xref>.\nIf <span class=\"paramref\">cultureIsFixed</span> is set to <strong>false</strong> and if \nitems are not found for the specified culture, items for the \ndefault fallback culture are returned. If \n<span class=\"paramref\">cultureIsFixed</span> is set to <strong>true</strong>, \nfallback will not occur, and if items are not found for the \nspecified culture, empty strings are returned.\n"
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Health.Vocabulary}
      description: "\nThe specified vocabularies and their items, or empty strings.\n"
  overload: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.GetVocabulary*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">vocabularyKeys</span> list is empty.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <span class=\"paramref\">vocabularyKeys</span> list is <strong>null</strong> \nor contains a <strong>null</strong> entry.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThere is an error in the server request.\n<br />\n-Or- \n<br />\nOne of the requested vocabularies is not found on the server.\n<br />\n-Or- \n<br />\nOne of the requested vocabularies does not contain representations \nfor its items for the specified culture when \n<span class=\"paramref\">cultureIsFixed</span> is <strong>true</strong>.\n<br />\n-Or- \n<br />\nThere is an error loading the vocabulary.\n"
  nameWithType.vb: HealthVaultPlatformVocabulary.GetVocabulary(HealthServiceConnection, IList(Of VocabularyKey), Boolean)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.GetVocabulary(Microsoft.Health.HealthServiceConnection, System.Collections.Generic.IList(Of Microsoft.Health.VocabularyKey), System.Boolean)
  name.vb: GetVocabulary(HealthServiceConnection, IList(Of VocabularyKey), Boolean)
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.GetVocabularyKeys(Microsoft.Health.HealthServiceConnection)
  commentId: M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.GetVocabularyKeys(Microsoft.Health.HealthServiceConnection)
  id: GetVocabularyKeys(Microsoft.Health.HealthServiceConnection)
  parent: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary
  langs:
  - csharp
  - vb
  name: GetVocabularyKeys(HealthServiceConnection)
  nameWithType: HealthVaultPlatformVocabulary.GetVocabularyKeys(HealthServiceConnection)
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.GetVocabularyKeys(Microsoft.Health.HealthServiceConnection)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformVocabulary.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetVocabularyKeys
    path: ../Microsoft.Health/HealthVaultPlatformVocabulary.cs
    startLine: 210
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nRetrieves a collection of key information for identifying and \ndescribing the vocabularies in the system.\n"
  example: []
  syntax:
    content: public virtual ReadOnlyCollection<VocabularyKey> GetVocabularyKeys(HealthServiceConnection connection)
    content.vb: Public Overridable Function GetVocabularyKeys(connection As HealthServiceConnection) As ReadOnlyCollection(Of VocabularyKey)
    parameters:
    - id: connection
      type: Microsoft.Health.HealthServiceConnection
      description: "\nThe connection to use for this operation. The connection\nmust have application capability. \n"
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Health.VocabularyKey}
      description: "\nA collection of keys identifying the vocabularies in the system.\n"
  overload: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.GetVocabularyKeys*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.SearchVocabulary(Microsoft.Health.HealthServiceConnection,Microsoft.Health.VocabularyKey,System.String,Microsoft.Health.VocabularySearchType,System.Nullable{System.Int32},Microsoft.Health.VocabularyItemCollection@,System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Health.VocabularyKey}@)
  commentId: M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.SearchVocabulary(Microsoft.Health.HealthServiceConnection,Microsoft.Health.VocabularyKey,System.String,Microsoft.Health.VocabularySearchType,System.Nullable{System.Int32},Microsoft.Health.VocabularyItemCollection@,System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Health.VocabularyKey}@)
  id: SearchVocabulary(Microsoft.Health.HealthServiceConnection,Microsoft.Health.VocabularyKey,System.String,Microsoft.Health.VocabularySearchType,System.Nullable{System.Int32},Microsoft.Health.VocabularyItemCollection@,System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Health.VocabularyKey}@)
  parent: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary
  langs:
  - csharp
  - vb
  name: SearchVocabulary(HealthServiceConnection, VocabularyKey, String, VocabularySearchType, Nullable<Int32>, out VocabularyItemCollection, out ReadOnlyCollection<VocabularyKey>)
  nameWithType: HealthVaultPlatformVocabulary.SearchVocabulary(HealthServiceConnection, VocabularyKey, String, VocabularySearchType, Nullable<Int32>, out VocabularyItemCollection, out ReadOnlyCollection<VocabularyKey>)
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.SearchVocabulary(Microsoft.Health.HealthServiceConnection, Microsoft.Health.VocabularyKey, System.String, Microsoft.Health.VocabularySearchType, System.Nullable<System.Int32>, out Microsoft.Health.VocabularyItemCollection, out System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Health.VocabularyKey>)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformVocabulary.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SearchVocabulary
    path: ../Microsoft.Health/HealthVaultPlatformVocabulary.cs
    startLine: 320
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nSearches a specific vocabulary and retrieves the matching vocabulary items.\n"
  remarks: "\nThis method does text search matching of display text and abbreviation text\nfor the culture defined by the <xref href=\"Microsoft.Health.HealthServiceConnection.Culture\" data-throw-if-not-resolved=\"false\"></xref>. \nThe <span class=\"paramref\">searchValue</span> is a string of characters in the specified \nculture. \n"
  example: []
  syntax:
    content: public virtual void SearchVocabulary(HealthServiceConnection connection, VocabularyKey vocabularyKey, string searchValue, VocabularySearchType searchType, int ? maxResults, out VocabularyItemCollection matchingVocabulary, out ReadOnlyCollection<VocabularyKey> matchingKeys)
    content.vb: Public Overridable Sub SearchVocabulary(connection As HealthServiceConnection, vocabularyKey As VocabularyKey, searchValue As String, searchType As VocabularySearchType, maxResults As Integer?, ByRef matchingVocabulary As VocabularyItemCollection, ByRef matchingKeys As ReadOnlyCollection(Of VocabularyKey))
    parameters:
    - id: connection
      type: Microsoft.Health.HealthServiceConnection
      description: "\nThe connection to use for this operation. The connection\nmust have application capability. \n"
    - id: vocabularyKey
      type: Microsoft.Health.VocabularyKey
      description: "\nThe <xref href=\"Microsoft.Health.VocabularyKey\" data-throw-if-not-resolved=\"false\"></xref> defining the vocabulary to search. If the \nfamily is not specified, the default HealthVault vocabulary family is used. \nIf the version is not specified, the most current version of the vocabulary \nis used.\n"
    - id: searchValue
      type: System.String
      description: "\nThe search string to use.\n"
    - id: searchType
      type: Microsoft.Health.VocabularySearchType
      description: "\nThe type of search to perform.\n"
    - id: maxResults
      type: System.Nullable{System.Int32}
      description: "\nThe maximum number of results to return. If null, all matching results \nare returned, up to a maximum number defined by the service config \nvalue with key maxResultsPerVocabularyRetrieval.\n"
    - id: matchingVocabulary
      type: Microsoft.Health.VocabularyItemCollection
      description: "\nA <xref href=\"Microsoft.Health.VocabularyItemCollection\" data-throw-if-not-resolved=\"false\"></xref> populated with entries matching \nthe search criteria.\n"
    - id: matchingKeys
      type: System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Health.VocabularyKey}
      description: "\nA <strong>ReadOnlyCollection</strong> of <xref href=\"Microsoft.Health.VocabularyKey\" data-throw-if-not-resolved=\"false\"></xref> with entries\nmatching the search criteria.\n"
  overload: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.SearchVocabulary*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">vocabularyKey</span> is <strong>null</strong>.\n<br />\n-Or-\n<br />\nIf <span class=\"paramref\">searchValue</span> is <strong>null</strong> or empty or greater \nthan <strong>255</strong> characters.\n<br />\n-Or-\n<br />\nif <span class=\"paramref\">searchType</span> is not a known \n<xref href=\"Microsoft.Health.VocabularySearchType\" data-throw-if-not-resolved=\"false\"></xref> value.        \n<br />\n-Or-\n<br />\nwhen <span class=\"paramref\">maxResults</span> is defined but has a value less than 1.        \n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThere is an error in the server request.         \n<br />\n-Or-        \n<br />\nThe requested vocabulary is not found on the server.\n<br />\n-Or- \nThe requested search culture is not supported. \n"
  nameWithType.vb: HealthVaultPlatformVocabulary.SearchVocabulary(HealthServiceConnection, VocabularyKey, String, VocabularySearchType, Nullable(Of Int32), ByRef VocabularyItemCollection, ByRef ReadOnlyCollection(Of VocabularyKey))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.SearchVocabulary(Microsoft.Health.HealthServiceConnection, Microsoft.Health.VocabularyKey, System.String, Microsoft.Health.VocabularySearchType, System.Nullable(Of System.Int32), ByRef Microsoft.Health.VocabularyItemCollection, ByRef System.Collections.ObjectModel.ReadOnlyCollection(Of Microsoft.Health.VocabularyKey))
  name.vb: SearchVocabulary(HealthServiceConnection, VocabularyKey, String, VocabularySearchType, Nullable(Of Int32), ByRef VocabularyItemCollection, ByRef ReadOnlyCollection(Of VocabularyKey))
references:
- uid: Microsoft.Health.HealthVaultPlatform
  commentId: T:Microsoft.Health.HealthVaultPlatform
  isExternal: false
  name: HealthVaultPlatform
  nameWithType: HealthVaultPlatform
  fullName: Microsoft.Health.HealthVaultPlatform
- uid: Microsoft.Health.PlatformPrimitives
  commentId: N:Microsoft.Health.PlatformPrimitives
  isExternal: false
  name: Microsoft.Health.PlatformPrimitives
  nameWithType: Microsoft.Health.PlatformPrimitives
  fullName: Microsoft.Health.PlatformPrimitives
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  name: SetProperty(String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object())
  name.vb: SetProperty(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  name: InvokeMethod(String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object())
  name.vb: InvokeMethod(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  parent: Microsoft.Health.Utility.InvariantString
  definition: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  name: ToStringInvariant()
  nameWithType: InvariantString.ToStringInvariant()
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant()
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  parent: Microsoft.Health.Utility.TypeHelper
  definition: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  name: ValueOrDbNull<HealthVaultPlatformVocabulary>()
  nameWithType: TypeHelper.ValueOrDbNull<HealthVaultPlatformVocabulary>()
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary>()
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of HealthVaultPlatformVocabulary)()
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary)()
  name.vb: ValueOrDbNull(Of HealthVaultPlatformVocabulary)()
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull<HealthVaultPlatformVocabulary>
    nameWithType: TypeHelper.ValueOrDbNull<HealthVaultPlatformVocabulary>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull(Of HealthVaultPlatformVocabulary)
    nameWithType: TypeHelper.ValueOrDbNull(Of HealthVaultPlatformVocabulary)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  parent: Microsoft.Health.Utility.WCXmlHelper
  definition: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  name: ToXml()
  nameWithType: WCXmlHelper.ToXml()
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml()
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  isExternal: true
  name: SetProperty(Object, String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object())
  name.vb: SetProperty(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions
  commentId: T:Microsoft.Health.Utility.IDispatchExtensions
  parent: Microsoft.Health.Utility
  isExternal: false
  name: IDispatchExtensions
  nameWithType: IDispatchExtensions
  fullName: Microsoft.Health.Utility.IDispatchExtensions
- uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  isExternal: true
  name: InvokeMethod(Object, String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object())
  name.vb: InvokeMethod(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  isExternal: true
  name: ToStringInvariant(Object)
  nameWithType: InvariantString.ToStringInvariant(Object)
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString
  commentId: T:Microsoft.Health.Utility.InvariantString
  parent: Microsoft.Health.Utility
  isExternal: false
  name: InvariantString
  nameWithType: InvariantString
  fullName: Microsoft.Health.Utility.InvariantString
- uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  isExternal: false
  name: ValueOrDbNull<T>(T)
  nameWithType: TypeHelper.ValueOrDbNull<T>(T)
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>(T)
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of T)(T)
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)(T)
  name.vb: ValueOrDbNull(Of T)(T)
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull<T>
    nameWithType: TypeHelper.ValueOrDbNull<T>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull(Of T)
    nameWithType: TypeHelper.ValueOrDbNull(Of T)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.TypeHelper
  commentId: T:Microsoft.Health.Utility.TypeHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: TypeHelper
  nameWithType: TypeHelper
  fullName: Microsoft.Health.Utility.TypeHelper
- uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  isExternal: true
  name: ToXml(Object)
  nameWithType: WCXmlHelper.ToXml(Object)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.WCXmlHelper
  commentId: T:Microsoft.Health.Utility.WCXmlHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: WCXmlHelper
  nameWithType: WCXmlHelper
  fullName: Microsoft.Health.Utility.WCXmlHelper
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.EnableMock*
  commentId: Overload:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.EnableMock
  isExternal: false
  name: EnableMock
  nameWithType: HealthVaultPlatformVocabulary.EnableMock
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.EnableMock
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary
  commentId: T:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary
  parent: Microsoft.Health.PlatformPrimitives
  isExternal: false
  name: HealthVaultPlatformVocabulary
  nameWithType: HealthVaultPlatformVocabulary
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.DisableMock*
  commentId: Overload:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.DisableMock
  isExternal: false
  name: DisableMock
  nameWithType: HealthVaultPlatformVocabulary.DisableMock
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.DisableMock
- uid: Microsoft.Health.HealthServiceConnection.Culture
  commentId: P:Microsoft.Health.HealthServiceConnection.Culture
  parent: Microsoft.Health.HealthServiceConnection
  isExternal: false
  name: Culture
  nameWithType: HealthServiceConnection.Culture
  fullName: Microsoft.Health.HealthServiceConnection.Culture
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.GetVocabulary*
  commentId: Overload:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.GetVocabulary
  isExternal: false
  name: GetVocabulary
  nameWithType: HealthVaultPlatformVocabulary.GetVocabulary
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.GetVocabulary
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: Microsoft.Health.HealthServiceException
  commentId: T:Microsoft.Health.HealthServiceException
  parent: Microsoft.Health
  isExternal: false
  name: HealthServiceException
  nameWithType: HealthServiceException
  fullName: Microsoft.Health.HealthServiceException
- uid: Microsoft.Health.HealthServiceConnection
  commentId: T:Microsoft.Health.HealthServiceConnection
  parent: Microsoft.Health
  isExternal: false
  name: HealthServiceConnection
  nameWithType: HealthServiceConnection
  fullName: Microsoft.Health.HealthServiceConnection
- uid: System.Collections.Generic.IList{Microsoft.Health.VocabularyKey}
  commentId: T:System.Collections.Generic.IList{Microsoft.Health.VocabularyKey}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<VocabularyKey>
  nameWithType: IList<VocabularyKey>
  fullName: System.Collections.Generic.IList<Microsoft.Health.VocabularyKey>
  nameWithType.vb: IList(Of VocabularyKey)
  fullName.vb: System.Collections.Generic.IList(Of Microsoft.Health.VocabularyKey)
  name.vb: IList(Of VocabularyKey)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.VocabularyKey
    name: VocabularyKey
    nameWithType: VocabularyKey
    fullName: Microsoft.Health.VocabularyKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.VocabularyKey
    name: VocabularyKey
    nameWithType: VocabularyKey
    fullName: Microsoft.Health.VocabularyKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Health.Vocabulary}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Health.Vocabulary}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<Vocabulary>
  nameWithType: ReadOnlyCollection<Vocabulary>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Health.Vocabulary>
  nameWithType.vb: ReadOnlyCollection(Of Vocabulary)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of Microsoft.Health.Vocabulary)
  name.vb: ReadOnlyCollection(Of Vocabulary)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.Vocabulary
    name: Vocabulary
    nameWithType: Vocabulary
    fullName: Microsoft.Health.Vocabulary
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.Vocabulary
    name: Vocabulary
    nameWithType: Vocabulary
    fullName: Microsoft.Health.Vocabulary
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: true
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  nameWithType.vb: ReadOnlyCollection(Of T)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.GetVocabularyKeys*
  commentId: Overload:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.GetVocabularyKeys
  isExternal: false
  name: GetVocabularyKeys
  nameWithType: HealthVaultPlatformVocabulary.GetVocabularyKeys
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.GetVocabularyKeys
- uid: System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Health.VocabularyKey}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Health.VocabularyKey}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<VocabularyKey>
  nameWithType: ReadOnlyCollection<VocabularyKey>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Health.VocabularyKey>
  nameWithType.vb: ReadOnlyCollection(Of VocabularyKey)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of Microsoft.Health.VocabularyKey)
  name.vb: ReadOnlyCollection(Of VocabularyKey)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.VocabularyKey
    name: VocabularyKey
    nameWithType: VocabularyKey
    fullName: Microsoft.Health.VocabularyKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.VocabularyKey
    name: VocabularyKey
    nameWithType: VocabularyKey
    fullName: Microsoft.Health.VocabularyKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.VocabularyKey
  commentId: T:Microsoft.Health.VocabularyKey
  parent: Microsoft.Health
  isExternal: false
  name: VocabularyKey
  nameWithType: VocabularyKey
  fullName: Microsoft.Health.VocabularyKey
- uid: Microsoft.Health.VocabularyItemCollection
  commentId: T:Microsoft.Health.VocabularyItemCollection
  parent: Microsoft.Health
  isExternal: false
  name: VocabularyItemCollection
  nameWithType: VocabularyItemCollection
  fullName: Microsoft.Health.VocabularyItemCollection
- uid: Microsoft.Health.VocabularySearchType
  commentId: T:Microsoft.Health.VocabularySearchType
  parent: Microsoft.Health
  isExternal: false
  name: VocabularySearchType
  nameWithType: VocabularySearchType
  fullName: Microsoft.Health.VocabularySearchType
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.SearchVocabulary*
  commentId: Overload:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.SearchVocabulary
  isExternal: false
  name: SearchVocabulary
  nameWithType: HealthVaultPlatformVocabulary.SearchVocabulary
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformVocabulary.SearchVocabulary
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
