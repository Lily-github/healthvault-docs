### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.DictionaryFile`2
  commentId: T:Microsoft.Health.DictionaryFile`2
  id: DictionaryFile`2
  parent: Microsoft.Health
  children:
  - Microsoft.Health.DictionaryFile`2.#ctor(System.String)
  - Microsoft.Health.DictionaryFile`2.#ctor(System.String,System.Boolean)
  - Microsoft.Health.DictionaryFile`2.ContainsKey(`0)
  - Microsoft.Health.DictionaryFile`2.CreateTime
  - Microsoft.Health.DictionaryFile`2.Dispose
  - Microsoft.Health.DictionaryFile`2.Get(`0,`1@)
  - Microsoft.Health.DictionaryFile`2.Get(Microsoft.Health.ValueLocation)
  - Microsoft.Health.DictionaryFile`2.Get(Microsoft.Health.ValueReference{`1})
  - Microsoft.Health.DictionaryFile`2.GetEnumerator
  - Microsoft.Health.DictionaryFile`2.GetMultiReader(Microsoft.Health.ValueLocation)
  - Microsoft.Health.DictionaryFile`2.GetReader
  - Microsoft.Health.DictionaryFile`2.GetSingleReader(Microsoft.Health.ValueLocation)
  - Microsoft.Health.DictionaryFile`2.KeyLocations
  - Microsoft.Health.DictionaryFile`2.Keys
  - Microsoft.Health.DictionaryFile`2.LastModified
  - Microsoft.Health.DictionaryFile`2.MultiReader
  - Microsoft.Health.DictionaryFile`2.System#Collections#IEnumerable#GetEnumerator
  - Microsoft.Health.DictionaryFile`2.Values
  langs:
  - csharp
  - vb
  name: DictionaryFile<K, V>
  nameWithType: DictionaryFile<K, V>
  fullName: Microsoft.Health.DictionaryFile<K, V>
  type: Class
  source:
    remote:
      path: Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFile.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DictionaryFile
    path: ../Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFile.cs
    startLine: 21
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: 'public sealed class DictionaryFile<K, V> : IEnumerable<KeyValuePair<K, V>>, IEnumerable, IIndex<K, V>, IDisposable'
    content.vb: >-
      Public NotInheritable Class DictionaryFile(Of K, V)
          Implements IEnumerable(Of KeyValuePair(Of K, V)), IEnumerable, IIndex(Of K, V), IDisposable
    typeParameters:
    - id: K
      description: ''
    - id: V
      description: ''
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{K},{V}}}
  - System.Collections.IEnumerable
  - Microsoft.Health.IIndex{{K},{V}}
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - Microsoft.Health.DictionaryFile`2.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  - System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  nameWithType.vb: DictionaryFile(Of K, V)
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  fullName.vb: Microsoft.Health.DictionaryFile(Of K, V)
  name.vb: DictionaryFile(Of K, V)
- uid: Microsoft.Health.DictionaryFile`2.#ctor(System.String)
  commentId: M:Microsoft.Health.DictionaryFile`2.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.Health.DictionaryFile`2
  langs:
  - csharp
  - vb
  name: DictionaryFile(String)
  nameWithType: DictionaryFile<K, V>.DictionaryFile(String)
  fullName: Microsoft.Health.DictionaryFile<K, V>.DictionaryFile(System.String)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFile.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFile.cs
    startLine: 34
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public DictionaryFile(string path)
    content.vb: Public Sub New(path As String)
    parameters:
    - id: path
      type: System.String
      description: ''
  overload: Microsoft.Health.DictionaryFile`2.#ctor*
  nameWithType.vb: DictionaryFile(Of K, V).DictionaryFile(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.DictionaryFile(Of K, V).DictionaryFile(System.String)
- uid: Microsoft.Health.DictionaryFile`2.#ctor(System.String,System.Boolean)
  commentId: M:Microsoft.Health.DictionaryFile`2.#ctor(System.String,System.Boolean)
  id: '#ctor(System.String,System.Boolean)'
  parent: Microsoft.Health.DictionaryFile`2
  langs:
  - csharp
  - vb
  name: DictionaryFile(String, Boolean)
  nameWithType: DictionaryFile<K, V>.DictionaryFile(String, Boolean)
  fullName: Microsoft.Health.DictionaryFile<K, V>.DictionaryFile(System.String, System.Boolean)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFile.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFile.cs
    startLine: 44
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public DictionaryFile(string path, bool useMultiReader)
    content.vb: Public Sub New(path As String, useMultiReader As Boolean)
    parameters:
    - id: path
      type: System.String
      description: ''
    - id: useMultiReader
      type: System.Boolean
      description: ''
  overload: Microsoft.Health.DictionaryFile`2.#ctor*
  nameWithType.vb: DictionaryFile(Of K, V).DictionaryFile(String, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.DictionaryFile(Of K, V).DictionaryFile(System.String, System.Boolean)
- uid: Microsoft.Health.DictionaryFile`2.CreateTime
  commentId: P:Microsoft.Health.DictionaryFile`2.CreateTime
  id: CreateTime
  parent: Microsoft.Health.DictionaryFile`2
  langs:
  - csharp
  - vb
  name: CreateTime
  nameWithType: DictionaryFile<K, V>.CreateTime
  fullName: Microsoft.Health.DictionaryFile<K, V>.CreateTime
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFile.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CreateTime
    path: ../Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFile.cs
    startLine: 64
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public DateTime CreateTime { get; }
    content.vb: Public ReadOnly Property CreateTime As Date
    parameters: []
    return:
      type: System.DateTime
  overload: Microsoft.Health.DictionaryFile`2.CreateTime*
  nameWithType.vb: DictionaryFile(Of K, V).CreateTime
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.Health.DictionaryFile(Of K, V).CreateTime
- uid: Microsoft.Health.DictionaryFile`2.LastModified
  commentId: P:Microsoft.Health.DictionaryFile`2.LastModified
  id: LastModified
  parent: Microsoft.Health.DictionaryFile`2
  langs:
  - csharp
  - vb
  name: LastModified
  nameWithType: DictionaryFile<K, V>.LastModified
  fullName: Microsoft.Health.DictionaryFile<K, V>.LastModified
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFile.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: LastModified
    path: ../Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFile.cs
    startLine: 75
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public DateTime LastModified { get; }
    content.vb: Public ReadOnly Property LastModified As Date
    parameters: []
    return:
      type: System.DateTime
  overload: Microsoft.Health.DictionaryFile`2.LastModified*
  nameWithType.vb: DictionaryFile(Of K, V).LastModified
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.Health.DictionaryFile(Of K, V).LastModified
- uid: Microsoft.Health.DictionaryFile`2.MultiReader
  commentId: F:Microsoft.Health.DictionaryFile`2.MultiReader
  id: MultiReader
  parent: Microsoft.Health.DictionaryFile`2
  langs:
  - csharp
  - vb
  name: MultiReader
  nameWithType: DictionaryFile<K, V>.MultiReader
  fullName: Microsoft.Health.DictionaryFile<K, V>.MultiReader
  type: Field
  source:
    remote:
      path: Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFile.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: MultiReader
    path: ../Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFile.cs
    startLine: 86
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public bool MultiReader
    content.vb: Public MultiReader As Boolean
    return:
      type: System.Boolean
  nameWithType.vb: DictionaryFile(Of K, V).MultiReader
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.DictionaryFile(Of K, V).MultiReader
- uid: Microsoft.Health.DictionaryFile`2.KeyLocations
  commentId: P:Microsoft.Health.DictionaryFile`2.KeyLocations
  id: KeyLocations
  parent: Microsoft.Health.DictionaryFile`2
  langs:
  - csharp
  - vb
  name: KeyLocations
  nameWithType: DictionaryFile<K, V>.KeyLocations
  fullName: Microsoft.Health.DictionaryFile<K, V>.KeyLocations
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFile.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: KeyLocations
    path: ../Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFile.cs
    startLine: 91
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public IEnumerable<KeyLocation<K>> KeyLocations { get; }
    content.vb: Public ReadOnly Property KeyLocations As IEnumerable(Of KeyLocation(Of K))
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Health.KeyLocation{{K}}}
  overload: Microsoft.Health.DictionaryFile`2.KeyLocations*
  nameWithType.vb: DictionaryFile(Of K, V).KeyLocations
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.Health.DictionaryFile(Of K, V).KeyLocations
- uid: Microsoft.Health.DictionaryFile`2.Keys
  commentId: P:Microsoft.Health.DictionaryFile`2.Keys
  id: Keys
  parent: Microsoft.Health.DictionaryFile`2
  langs:
  - csharp
  - vb
  name: Keys
  nameWithType: DictionaryFile<K, V>.Keys
  fullName: Microsoft.Health.DictionaryFile<K, V>.Keys
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFile.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Keys
    path: ../Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFile.cs
    startLine: 108
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public IEnumerable<K> Keys { get; }
    content.vb: Public ReadOnly Property Keys As IEnumerable(Of K)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{{K}}
  overload: Microsoft.Health.DictionaryFile`2.Keys*
  implements:
  - Microsoft.Health.IIndex{{K},{V}}.Keys
  nameWithType.vb: DictionaryFile(Of K, V).Keys
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.Health.DictionaryFile(Of K, V).Keys
- uid: Microsoft.Health.DictionaryFile`2.Values
  commentId: P:Microsoft.Health.DictionaryFile`2.Values
  id: Values
  parent: Microsoft.Health.DictionaryFile`2
  langs:
  - csharp
  - vb
  name: Values
  nameWithType: DictionaryFile<K, V>.Values
  fullName: Microsoft.Health.DictionaryFile<K, V>.Values
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFile.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Values
    path: ../Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFile.cs
    startLine: 122
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public IEnumerable<V> Values { get; }
    content.vb: Public ReadOnly Property Values As IEnumerable(Of V)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{{V}}
  overload: Microsoft.Health.DictionaryFile`2.Values*
  nameWithType.vb: DictionaryFile(Of K, V).Values
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.Health.DictionaryFile(Of K, V).Values
- uid: Microsoft.Health.DictionaryFile`2.GetEnumerator
  commentId: M:Microsoft.Health.DictionaryFile`2.GetEnumerator
  id: GetEnumerator
  parent: Microsoft.Health.DictionaryFile`2
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: DictionaryFile<K, V>.GetEnumerator()
  fullName: Microsoft.Health.DictionaryFile<K, V>.GetEnumerator()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFile.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetEnumerator
    path: ../Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFile.cs
    startLine: 137
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\nEnumerate the contents of the dictionary file.\n"
  example: []
  syntax:
    content: public IEnumerator<KeyValuePair<K, V>> GetEnumerator()
    content.vb: Public Function GetEnumerator As IEnumerator(Of KeyValuePair(Of K, V))
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{K},{V}}}
      description: ''
  overload: Microsoft.Health.DictionaryFile`2.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{K},{V}}}.GetEnumerator
  nameWithType.vb: DictionaryFile(Of K, V).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.DictionaryFile(Of K, V).GetEnumerator()
- uid: Microsoft.Health.DictionaryFile`2.Get(`0,`1@)
  commentId: M:Microsoft.Health.DictionaryFile`2.Get(`0,`1@)
  id: Get(`0,`1@)
  parent: Microsoft.Health.DictionaryFile`2
  langs:
  - csharp
  - vb
  name: Get(K, out V)
  nameWithType: DictionaryFile<K, V>.Get(K, out V)
  fullName: Microsoft.Health.DictionaryFile<K, V>.Get(K, out V)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFile.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Get
    path: ../Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFile.cs
    startLine: 155
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public bool Get(K key, out V value)
    content.vb: Public Function Get(key As K, ByRef value As V) As Boolean
    parameters:
    - id: key
      type: '{K}'
      description: ''
    - id: value
      type: '{V}'
      description: ''
    return:
      type: System.Boolean
      description: ''
  overload: Microsoft.Health.DictionaryFile`2.Get*
  implements:
  - Microsoft.Health.IIndex{{K},{V}}.Get({K},{V}@)
  nameWithType.vb: DictionaryFile(Of K, V).Get(K, ByRef V)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.DictionaryFile(Of K, V).Get(K, ByRef V)
  name.vb: Get(K, ByRef V)
- uid: Microsoft.Health.DictionaryFile`2.Get(Microsoft.Health.ValueLocation)
  commentId: M:Microsoft.Health.DictionaryFile`2.Get(Microsoft.Health.ValueLocation)
  id: Get(Microsoft.Health.ValueLocation)
  parent: Microsoft.Health.DictionaryFile`2
  langs:
  - csharp
  - vb
  name: Get(ValueLocation)
  nameWithType: DictionaryFile<K, V>.Get(ValueLocation)
  fullName: Microsoft.Health.DictionaryFile<K, V>.Get(Microsoft.Health.ValueLocation)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFile.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Get
    path: ../Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFile.cs
    startLine: 176
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public V Get(ValueLocation location)
    content.vb: Public Function Get(location As ValueLocation) As V
    parameters:
    - id: location
      type: Microsoft.Health.ValueLocation
      description: ''
    return:
      type: '{V}'
      description: ''
  overload: Microsoft.Health.DictionaryFile`2.Get*
  nameWithType.vb: DictionaryFile(Of K, V).Get(ValueLocation)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.DictionaryFile(Of K, V).Get(Microsoft.Health.ValueLocation)
- uid: Microsoft.Health.DictionaryFile`2.Get(Microsoft.Health.ValueReference{`1})
  commentId: M:Microsoft.Health.DictionaryFile`2.Get(Microsoft.Health.ValueReference{`1})
  id: Get(Microsoft.Health.ValueReference{`1})
  parent: Microsoft.Health.DictionaryFile`2
  langs:
  - csharp
  - vb
  name: Get(ValueReference<V>)
  nameWithType: DictionaryFile<K, V>.Get(ValueReference<V>)
  fullName: Microsoft.Health.DictionaryFile<K, V>.Get(Microsoft.Health.ValueReference<V>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFile.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Get
    path: ../Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFile.cs
    startLine: 199
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public V Get(ValueReference<V> valueRef)
    content.vb: Public Function Get(valueRef As ValueReference(Of V)) As V
    parameters:
    - id: valueRef
      type: Microsoft.Health.ValueReference{{V}}
      description: ''
    return:
      type: '{V}'
      description: ''
  overload: Microsoft.Health.DictionaryFile`2.Get*
  nameWithType.vb: DictionaryFile(Of K, V).Get(ValueReference(Of V))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.DictionaryFile(Of K, V).Get(Microsoft.Health.ValueReference(Of V))
  name.vb: Get(ValueReference(Of V))
- uid: Microsoft.Health.DictionaryFile`2.GetSingleReader(Microsoft.Health.ValueLocation)
  commentId: M:Microsoft.Health.DictionaryFile`2.GetSingleReader(Microsoft.Health.ValueLocation)
  id: GetSingleReader(Microsoft.Health.ValueLocation)
  parent: Microsoft.Health.DictionaryFile`2
  langs:
  - csharp
  - vb
  name: GetSingleReader(ValueLocation)
  nameWithType: DictionaryFile<K, V>.GetSingleReader(ValueLocation)
  fullName: Microsoft.Health.DictionaryFile<K, V>.GetSingleReader(Microsoft.Health.ValueLocation)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFile.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetSingleReader
    path: ../Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFile.cs
    startLine: 231
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public V GetSingleReader(ValueLocation location)
    content.vb: Public Function GetSingleReader(location As ValueLocation) As V
    parameters:
    - id: location
      type: Microsoft.Health.ValueLocation
      description: ''
    return:
      type: '{V}'
      description: ''
  overload: Microsoft.Health.DictionaryFile`2.GetSingleReader*
  nameWithType.vb: DictionaryFile(Of K, V).GetSingleReader(ValueLocation)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.DictionaryFile(Of K, V).GetSingleReader(Microsoft.Health.ValueLocation)
- uid: Microsoft.Health.DictionaryFile`2.GetMultiReader(Microsoft.Health.ValueLocation)
  commentId: M:Microsoft.Health.DictionaryFile`2.GetMultiReader(Microsoft.Health.ValueLocation)
  id: GetMultiReader(Microsoft.Health.ValueLocation)
  parent: Microsoft.Health.DictionaryFile`2
  langs:
  - csharp
  - vb
  name: GetMultiReader(ValueLocation)
  nameWithType: DictionaryFile<K, V>.GetMultiReader(ValueLocation)
  fullName: Microsoft.Health.DictionaryFile<K, V>.GetMultiReader(Microsoft.Health.ValueLocation)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFile.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetMultiReader
    path: ../Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFile.cs
    startLine: 241
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public V GetMultiReader(ValueLocation location)
    content.vb: Public Function GetMultiReader(location As ValueLocation) As V
    parameters:
    - id: location
      type: Microsoft.Health.ValueLocation
      description: ''
    return:
      type: '{V}'
      description: ''
  overload: Microsoft.Health.DictionaryFile`2.GetMultiReader*
  nameWithType.vb: DictionaryFile(Of K, V).GetMultiReader(ValueLocation)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.DictionaryFile(Of K, V).GetMultiReader(Microsoft.Health.ValueLocation)
- uid: Microsoft.Health.DictionaryFile`2.ContainsKey(`0)
  commentId: M:Microsoft.Health.DictionaryFile`2.ContainsKey(`0)
  id: ContainsKey(`0)
  parent: Microsoft.Health.DictionaryFile`2
  langs:
  - csharp
  - vb
  name: ContainsKey(K)
  nameWithType: DictionaryFile<K, V>.ContainsKey(K)
  fullName: Microsoft.Health.DictionaryFile<K, V>.ContainsKey(K)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFile.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ContainsKey
    path: ../Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFile.cs
    startLine: 262
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public bool ContainsKey(K key)
    content.vb: Public Function ContainsKey(key As K) As Boolean
    parameters:
    - id: key
      type: '{K}'
      description: ''
    return:
      type: System.Boolean
      description: ''
  overload: Microsoft.Health.DictionaryFile`2.ContainsKey*
  implements:
  - Microsoft.Health.IIndex{{K},{V}}.ContainsKey({K})
  nameWithType.vb: DictionaryFile(Of K, V).ContainsKey(K)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.DictionaryFile(Of K, V).ContainsKey(K)
- uid: Microsoft.Health.DictionaryFile`2.GetReader
  commentId: M:Microsoft.Health.DictionaryFile`2.GetReader
  id: GetReader
  parent: Microsoft.Health.DictionaryFile`2
  langs:
  - csharp
  - vb
  name: GetReader()
  nameWithType: DictionaryFile<K, V>.GetReader()
  fullName: Microsoft.Health.DictionaryFile<K, V>.GetReader()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFile.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetReader
    path: ../Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFile.cs
    startLine: 314
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public IEnumerable<KeyValuePair<K, V>> GetReader()
    content.vb: Public Function GetReader As IEnumerable(Of KeyValuePair(Of K, V))
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{K},{V}}}
      description: ''
  overload: Microsoft.Health.DictionaryFile`2.GetReader*
  nameWithType.vb: DictionaryFile(Of K, V).GetReader()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.DictionaryFile(Of K, V).GetReader()
- uid: Microsoft.Health.DictionaryFile`2.System#Collections#IEnumerable#GetEnumerator
  commentId: M:Microsoft.Health.DictionaryFile`2.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: Microsoft.Health.DictionaryFile`2
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: DictionaryFile<K, V>.IEnumerable.GetEnumerator()
  fullName: Microsoft.Health.DictionaryFile<K, V>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFile.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: System.Collections.IEnumerable.GetEnumerator
    path: ../Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFile.cs
    startLine: 319
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
  overload: Microsoft.Health.DictionaryFile`2.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: DictionaryFile(Of K, V).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: Microsoft.Health.DictionaryFile(Of K, V).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: Microsoft.Health.DictionaryFile`2.Dispose
  commentId: M:Microsoft.Health.DictionaryFile`2.Dispose
  id: Dispose
  parent: Microsoft.Health.DictionaryFile`2
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: DictionaryFile<K, V>.Dispose()
  fullName: Microsoft.Health.DictionaryFile<K, V>.Dispose()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFile.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Dispose
    path: ../Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFile.cs
    startLine: 326
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Microsoft.Health.DictionaryFile`2.Dispose*
  implements:
  - System.IDisposable.Dispose
  nameWithType.vb: DictionaryFile(Of K, V).Dispose()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.DictionaryFile(Of K, V).Dispose()
references:
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{K},{V}}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<K, V>>
  nameWithType: IEnumerable<KeyValuePair<K, V>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<K, V>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of K, V))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of K, V))
  name.vb: IEnumerable(Of KeyValuePair(Of K, V))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: Microsoft.Health.IIndex{{K},{V}}
  commentId: T:Microsoft.Health.IIndex{`0,`1}
  parent: Microsoft.Health
  definition: Microsoft.Health.IIndex`2
  name: IIndex<K, V>
  nameWithType: IIndex<K, V>
  fullName: Microsoft.Health.IIndex<K, V>
  nameWithType.vb: IIndex(Of K, V)
  fullName.vb: Microsoft.Health.IIndex(Of K, V)
  name.vb: IIndex(Of K, V)
  spec.csharp:
  - uid: Microsoft.Health.IIndex`2
    name: IIndex
    nameWithType: IIndex
    fullName: Microsoft.Health.IIndex
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.IIndex`2
    name: IIndex
    nameWithType: IIndex
    fullName: Microsoft.Health.IIndex
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  name: SetProperty(String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object())
  name.vb: SetProperty(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  name: InvokeMethod(String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object())
  name.vb: InvokeMethod(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  parent: Microsoft.Health.Utility.InvariantString
  definition: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  name: ToStringInvariant()
  nameWithType: InvariantString.ToStringInvariant()
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant()
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.DictionaryFile`2.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  parent: Microsoft.Health.Utility.TypeHelper
  definition: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  name: ValueOrDbNull<DictionaryFile<K, V>>()
  nameWithType: TypeHelper.ValueOrDbNull<DictionaryFile<K, V>>()
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.DictionaryFile<K, V>>()
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of DictionaryFile(Of K, V))()
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.DictionaryFile(Of K, V))()
  name.vb: ValueOrDbNull(Of DictionaryFile(Of K, V))()
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull<DictionaryFile<K, V>>
    nameWithType: TypeHelper.ValueOrDbNull<DictionaryFile<K, V>>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.DictionaryFile<K, V>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull(Of DictionaryFile(Of K, V))
    nameWithType: TypeHelper.ValueOrDbNull(Of DictionaryFile(Of K, V))
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.DictionaryFile(Of K, V))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  parent: Microsoft.Health.Utility.WCXmlHelper
  definition: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  name: ToXml()
  nameWithType: WCXmlHelper.ToXml()
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml()
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: Microsoft.Health.IIndex`2
  commentId: T:Microsoft.Health.IIndex`2
  isExternal: false
  name: IIndex<K, V>
  nameWithType: IIndex<K, V>
  fullName: Microsoft.Health.IIndex<K, V>
  nameWithType.vb: IIndex(Of K, V)
  fullName.vb: Microsoft.Health.IIndex(Of K, V)
  name.vb: IIndex(Of K, V)
  spec.csharp:
  - uid: Microsoft.Health.IIndex`2
    name: IIndex
    nameWithType: IIndex
    fullName: Microsoft.Health.IIndex
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.IIndex`2
    name: IIndex
    nameWithType: IIndex
    fullName: Microsoft.Health.IIndex
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  isExternal: true
  name: SetProperty(Object, String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object())
  name.vb: SetProperty(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions
  commentId: T:Microsoft.Health.Utility.IDispatchExtensions
  parent: Microsoft.Health.Utility
  isExternal: false
  name: IDispatchExtensions
  nameWithType: IDispatchExtensions
  fullName: Microsoft.Health.Utility.IDispatchExtensions
- uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  isExternal: true
  name: InvokeMethod(Object, String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object())
  name.vb: InvokeMethod(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  isExternal: true
  name: ToStringInvariant(Object)
  nameWithType: InvariantString.ToStringInvariant(Object)
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString
  commentId: T:Microsoft.Health.Utility.InvariantString
  parent: Microsoft.Health.Utility
  isExternal: false
  name: InvariantString
  nameWithType: InvariantString
  fullName: Microsoft.Health.Utility.InvariantString
- uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  isExternal: false
  name: ValueOrDbNull<T>(T)
  nameWithType: TypeHelper.ValueOrDbNull<T>(T)
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>(T)
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of T)(T)
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)(T)
  name.vb: ValueOrDbNull(Of T)(T)
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull<T>
    nameWithType: TypeHelper.ValueOrDbNull<T>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull(Of T)
    nameWithType: TypeHelper.ValueOrDbNull(Of T)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.TypeHelper
  commentId: T:Microsoft.Health.Utility.TypeHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: TypeHelper
  nameWithType: TypeHelper
  fullName: Microsoft.Health.Utility.TypeHelper
- uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  isExternal: true
  name: ToXml(Object)
  nameWithType: WCXmlHelper.ToXml(Object)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.WCXmlHelper
  commentId: T:Microsoft.Health.Utility.WCXmlHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: WCXmlHelper
  nameWithType: WCXmlHelper
  fullName: Microsoft.Health.Utility.WCXmlHelper
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: Microsoft.Health.DictionaryFile`2.#ctor*
  commentId: Overload:Microsoft.Health.DictionaryFile`2.#ctor
  isExternal: false
  name: DictionaryFile
  nameWithType: DictionaryFile<K, V>.DictionaryFile
  fullName: Microsoft.Health.DictionaryFile<K, V>.DictionaryFile
  nameWithType.vb: DictionaryFile(Of K, V).DictionaryFile
  fullName.vb: Microsoft.Health.DictionaryFile(Of K, V).DictionaryFile
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Health.DictionaryFile`2.CreateTime*
  commentId: Overload:Microsoft.Health.DictionaryFile`2.CreateTime
  isExternal: false
  name: CreateTime
  nameWithType: DictionaryFile<K, V>.CreateTime
  fullName: Microsoft.Health.DictionaryFile<K, V>.CreateTime
  nameWithType.vb: DictionaryFile(Of K, V).CreateTime
  fullName.vb: Microsoft.Health.DictionaryFile(Of K, V).CreateTime
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: Microsoft.Health.DictionaryFile`2.LastModified*
  commentId: Overload:Microsoft.Health.DictionaryFile`2.LastModified
  isExternal: false
  name: LastModified
  nameWithType: DictionaryFile<K, V>.LastModified
  fullName: Microsoft.Health.DictionaryFile<K, V>.LastModified
  nameWithType.vb: DictionaryFile(Of K, V).LastModified
  fullName.vb: Microsoft.Health.DictionaryFile(Of K, V).LastModified
- uid: Microsoft.Health.DictionaryFile`2.KeyLocations*
  commentId: Overload:Microsoft.Health.DictionaryFile`2.KeyLocations
  isExternal: false
  name: KeyLocations
  nameWithType: DictionaryFile<K, V>.KeyLocations
  fullName: Microsoft.Health.DictionaryFile<K, V>.KeyLocations
  nameWithType.vb: DictionaryFile(Of K, V).KeyLocations
  fullName.vb: Microsoft.Health.DictionaryFile(Of K, V).KeyLocations
- uid: System.Collections.Generic.IEnumerable{Microsoft.Health.KeyLocation{{K}}}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Health.KeyLocation{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyLocation<K>>
  nameWithType: IEnumerable<KeyLocation<K>>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Health.KeyLocation<K>>
  nameWithType.vb: IEnumerable(Of KeyLocation(Of K))
  fullName.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Health.KeyLocation(Of K))
  name.vb: IEnumerable(Of KeyLocation(Of K))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.KeyLocation`1
    name: KeyLocation
    nameWithType: KeyLocation
    fullName: Microsoft.Health.KeyLocation
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.KeyLocation`1
    name: KeyLocation
    nameWithType: KeyLocation
    fullName: Microsoft.Health.KeyLocation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.DictionaryFile`2.Keys*
  commentId: Overload:Microsoft.Health.DictionaryFile`2.Keys
  isExternal: false
  name: Keys
  nameWithType: DictionaryFile<K, V>.Keys
  fullName: Microsoft.Health.DictionaryFile<K, V>.Keys
  nameWithType.vb: DictionaryFile(Of K, V).Keys
  fullName.vb: Microsoft.Health.DictionaryFile(Of K, V).Keys
- uid: Microsoft.Health.IIndex{{K},{V}}.Keys
  commentId: P:Microsoft.Health.IIndex{`0,`1}.Keys
  parent: Microsoft.Health.IIndex{{K},{V}}
  definition: Microsoft.Health.IIndex`2.Keys
  name: Keys
  nameWithType: IIndex<K, V>.Keys
  fullName: Microsoft.Health.IIndex<K, V>.Keys
  nameWithType.vb: IIndex(Of K, V).Keys
  fullName.vb: Microsoft.Health.IIndex(Of K, V).Keys
- uid: System.Collections.Generic.IEnumerable{{K}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<K>
  nameWithType: IEnumerable<K>
  fullName: System.Collections.Generic.IEnumerable<K>
  nameWithType.vb: IEnumerable(Of K)
  fullName.vb: System.Collections.Generic.IEnumerable(Of K)
  name.vb: IEnumerable(Of K)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.IIndex`2.Keys
  commentId: P:Microsoft.Health.IIndex`2.Keys
  isExternal: false
  name: Keys
  nameWithType: IIndex<K, V>.Keys
  fullName: Microsoft.Health.IIndex<K, V>.Keys
  nameWithType.vb: IIndex(Of K, V).Keys
  fullName.vb: Microsoft.Health.IIndex(Of K, V).Keys
- uid: Microsoft.Health.DictionaryFile`2.Values*
  commentId: Overload:Microsoft.Health.DictionaryFile`2.Values
  isExternal: false
  name: Values
  nameWithType: DictionaryFile<K, V>.Values
  fullName: Microsoft.Health.DictionaryFile<K, V>.Values
  nameWithType.vb: DictionaryFile(Of K, V).Values
  fullName.vb: Microsoft.Health.DictionaryFile(Of K, V).Values
- uid: System.Collections.Generic.IEnumerable{{V}}
  commentId: T:System.Collections.Generic.IEnumerable{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<V>
  nameWithType: IEnumerable<V>
  fullName: System.Collections.Generic.IEnumerable<V>
  nameWithType.vb: IEnumerable(Of V)
  fullName.vb: System.Collections.Generic.IEnumerable(Of V)
  name.vb: IEnumerable(Of V)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.DictionaryFile`2.GetEnumerator*
  commentId: Overload:Microsoft.Health.DictionaryFile`2.GetEnumerator
  isExternal: false
  name: GetEnumerator
  nameWithType: DictionaryFile<K, V>.GetEnumerator
  fullName: Microsoft.Health.DictionaryFile<K, V>.GetEnumerator
  nameWithType.vb: DictionaryFile(Of K, V).GetEnumerator
  fullName.vb: Microsoft.Health.DictionaryFile(Of K, V).GetEnumerator
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{K},{V}}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{K},{V}}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<KeyValuePair<K, V>>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<K, V>>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of K, V)).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of K, V)).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<KeyValuePair<K, V>>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<K, V>>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of KeyValuePair(Of K, V)).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of K, V)).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{K},{V}}}
  commentId: T:System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{`0,`1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<KeyValuePair<K, V>>
  nameWithType: IEnumerator<KeyValuePair<K, V>>
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<K, V>>
  nameWithType.vb: IEnumerator(Of KeyValuePair(Of K, V))
  fullName.vb: System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of K, V))
  name.vb: IEnumerator(Of KeyValuePair(Of K, V))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.DictionaryFile`2.Get*
  commentId: Overload:Microsoft.Health.DictionaryFile`2.Get
  isExternal: false
  name: Get
  nameWithType: DictionaryFile<K, V>.Get
  fullName: Microsoft.Health.DictionaryFile<K, V>.Get
  nameWithType.vb: DictionaryFile(Of K, V).Get
  fullName.vb: Microsoft.Health.DictionaryFile(Of K, V).Get
- uid: Microsoft.Health.IIndex{{K},{V}}.Get({K},{V}@)
  commentId: M:Microsoft.Health.IIndex{`0,`1}.Get(`0,`1@)
  parent: Microsoft.Health.IIndex{{K},{V}}
  definition: Microsoft.Health.IIndex`2.Get(`0,`1@)
  name: Get(K, V)
  nameWithType: IIndex<K, V>.Get(K, V)
  fullName: Microsoft.Health.IIndex<K, V>.Get(K, V)
  nameWithType.vb: IIndex(Of K, V).Get(K, V)
  fullName.vb: Microsoft.Health.IIndex(Of K, V).Get(K, V)
  spec.csharp:
  - uid: Microsoft.Health.IIndex`2.Get(`0,`1@)
    name: Get
    nameWithType: IIndex<K, V>.Get
    fullName: Microsoft.Health.IIndex<K, V>.Get
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.IIndex`2.Get(`0,`1@)
    name: Get
    nameWithType: IIndex(Of K, V).Get
    fullName: Microsoft.Health.IIndex(Of K, V).Get
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: '{K}'
  commentId: '!:K'
  definition: K
  name: K
  nameWithType: K
  fullName: K
- uid: '{V}'
  commentId: '!:V'
  definition: V
  name: V
  nameWithType: V
  fullName: V
- uid: Microsoft.Health.IIndex`2.Get(`0,`1@)
  commentId: M:Microsoft.Health.IIndex`2.Get(`0,`1@)
  isExternal: false
  name: Get(K, V)
  nameWithType: IIndex<K, V>.Get(K, V)
  fullName: Microsoft.Health.IIndex<K, V>.Get(K, V)
  nameWithType.vb: IIndex(Of K, V).Get(K, V)
  fullName.vb: Microsoft.Health.IIndex(Of K, V).Get(K, V)
  spec.csharp:
  - uid: Microsoft.Health.IIndex`2.Get(`0,`1@)
    name: Get
    nameWithType: IIndex<K, V>.Get
    fullName: Microsoft.Health.IIndex<K, V>.Get
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.IIndex`2.Get(`0,`1@)
    name: Get
    nameWithType: IIndex(Of K, V).Get
    fullName: Microsoft.Health.IIndex(Of K, V).Get
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: K
  isExternal: false
  name: K
  nameWithType: K
  fullName: K
- uid: V
  isExternal: false
  name: V
  nameWithType: V
  fullName: V
- uid: Microsoft.Health.ValueLocation
  commentId: T:Microsoft.Health.ValueLocation
  parent: Microsoft.Health
  isExternal: false
  name: ValueLocation
  nameWithType: ValueLocation
  fullName: Microsoft.Health.ValueLocation
- uid: Microsoft.Health.ValueReference{{V}}
  commentId: T:Microsoft.Health.ValueReference{`1}
  parent: Microsoft.Health
  definition: Microsoft.Health.ValueReference`1
  name: ValueReference<V>
  nameWithType: ValueReference<V>
  fullName: Microsoft.Health.ValueReference<V>
  nameWithType.vb: ValueReference(Of V)
  fullName.vb: Microsoft.Health.ValueReference(Of V)
  name.vb: ValueReference(Of V)
  spec.csharp:
  - uid: Microsoft.Health.ValueReference`1
    name: ValueReference
    nameWithType: ValueReference
    fullName: Microsoft.Health.ValueReference
  - name: <
    nameWithType: <
    fullName: <
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.ValueReference`1
    name: ValueReference
    nameWithType: ValueReference
    fullName: Microsoft.Health.ValueReference
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ValueReference`1
  commentId: T:Microsoft.Health.ValueReference`1
  isExternal: false
  name: ValueReference<V>
  nameWithType: ValueReference<V>
  fullName: Microsoft.Health.ValueReference<V>
  nameWithType.vb: ValueReference(Of V)
  fullName.vb: Microsoft.Health.ValueReference(Of V)
  name.vb: ValueReference(Of V)
  spec.csharp:
  - uid: Microsoft.Health.ValueReference`1
    name: ValueReference
    nameWithType: ValueReference
    fullName: Microsoft.Health.ValueReference
  - name: <
    nameWithType: <
    fullName: <
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.ValueReference`1
    name: ValueReference
    nameWithType: ValueReference
    fullName: Microsoft.Health.ValueReference
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.DictionaryFile`2.GetSingleReader*
  commentId: Overload:Microsoft.Health.DictionaryFile`2.GetSingleReader
  isExternal: false
  name: GetSingleReader
  nameWithType: DictionaryFile<K, V>.GetSingleReader
  fullName: Microsoft.Health.DictionaryFile<K, V>.GetSingleReader
  nameWithType.vb: DictionaryFile(Of K, V).GetSingleReader
  fullName.vb: Microsoft.Health.DictionaryFile(Of K, V).GetSingleReader
- uid: Microsoft.Health.DictionaryFile`2.GetMultiReader*
  commentId: Overload:Microsoft.Health.DictionaryFile`2.GetMultiReader
  isExternal: false
  name: GetMultiReader
  nameWithType: DictionaryFile<K, V>.GetMultiReader
  fullName: Microsoft.Health.DictionaryFile<K, V>.GetMultiReader
  nameWithType.vb: DictionaryFile(Of K, V).GetMultiReader
  fullName.vb: Microsoft.Health.DictionaryFile(Of K, V).GetMultiReader
- uid: Microsoft.Health.DictionaryFile`2.ContainsKey*
  commentId: Overload:Microsoft.Health.DictionaryFile`2.ContainsKey
  isExternal: false
  name: ContainsKey
  nameWithType: DictionaryFile<K, V>.ContainsKey
  fullName: Microsoft.Health.DictionaryFile<K, V>.ContainsKey
  nameWithType.vb: DictionaryFile(Of K, V).ContainsKey
  fullName.vb: Microsoft.Health.DictionaryFile(Of K, V).ContainsKey
- uid: Microsoft.Health.IIndex{{K},{V}}.ContainsKey({K})
  commentId: M:Microsoft.Health.IIndex{`0,`1}.ContainsKey(`0)
  parent: Microsoft.Health.IIndex{{K},{V}}
  definition: Microsoft.Health.IIndex`2.ContainsKey(`0)
  name: ContainsKey(K)
  nameWithType: IIndex<K, V>.ContainsKey(K)
  fullName: Microsoft.Health.IIndex<K, V>.ContainsKey(K)
  nameWithType.vb: IIndex(Of K, V).ContainsKey(K)
  fullName.vb: Microsoft.Health.IIndex(Of K, V).ContainsKey(K)
  spec.csharp:
  - uid: Microsoft.Health.IIndex`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IIndex<K, V>.ContainsKey
    fullName: Microsoft.Health.IIndex<K, V>.ContainsKey
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.IIndex`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IIndex(Of K, V).ContainsKey
    fullName: Microsoft.Health.IIndex(Of K, V).ContainsKey
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.IIndex`2.ContainsKey(`0)
  commentId: M:Microsoft.Health.IIndex`2.ContainsKey(`0)
  isExternal: false
  name: ContainsKey(K)
  nameWithType: IIndex<K, V>.ContainsKey(K)
  fullName: Microsoft.Health.IIndex<K, V>.ContainsKey(K)
  nameWithType.vb: IIndex(Of K, V).ContainsKey(K)
  fullName.vb: Microsoft.Health.IIndex(Of K, V).ContainsKey(K)
  spec.csharp:
  - uid: Microsoft.Health.IIndex`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IIndex<K, V>.ContainsKey
    fullName: Microsoft.Health.IIndex<K, V>.ContainsKey
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.IIndex`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IIndex(Of K, V).ContainsKey
    fullName: Microsoft.Health.IIndex(Of K, V).ContainsKey
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.DictionaryFile`2.GetReader*
  commentId: Overload:Microsoft.Health.DictionaryFile`2.GetReader
  isExternal: false
  name: GetReader
  nameWithType: DictionaryFile<K, V>.GetReader
  fullName: Microsoft.Health.DictionaryFile<K, V>.GetReader
  nameWithType.vb: DictionaryFile(Of K, V).GetReader
  fullName.vb: Microsoft.Health.DictionaryFile(Of K, V).GetReader
- uid: Microsoft.Health.DictionaryFile`2.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:Microsoft.Health.DictionaryFile`2.System#Collections#IEnumerable#GetEnumerator
  isExternal: false
  name: IEnumerable.GetEnumerator
  nameWithType: DictionaryFile<K, V>.IEnumerable.GetEnumerator
  fullName: Microsoft.Health.DictionaryFile<K, V>.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: DictionaryFile(Of K, V).System.Collections.IEnumerable.GetEnumerator
  fullName.vb: Microsoft.Health.DictionaryFile(Of K, V).System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: Microsoft.Health.DictionaryFile`2.Dispose*
  commentId: Overload:Microsoft.Health.DictionaryFile`2.Dispose
  isExternal: false
  name: Dispose
  nameWithType: DictionaryFile<K, V>.Dispose
  fullName: Microsoft.Health.DictionaryFile<K, V>.Dispose
  nameWithType.vb: DictionaryFile(Of K, V).Dispose
  fullName.vb: Microsoft.Health.DictionaryFile(Of K, V).Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
