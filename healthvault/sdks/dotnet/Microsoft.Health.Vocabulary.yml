### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.Vocabulary
  commentId: T:Microsoft.Health.Vocabulary
  id: Vocabulary
  parent: Microsoft.Health
  children:
  - Microsoft.Health.Vocabulary.#ctor(System.String)
  - Microsoft.Health.Vocabulary.#ctor(System.String,System.String,System.String)
  - Microsoft.Health.Vocabulary.Add(Microsoft.Health.VocabularyItem)
  - Microsoft.Health.Vocabulary.Culture
  - Microsoft.Health.Vocabulary.Family
  - Microsoft.Health.Vocabulary.GetSchema
  - Microsoft.Health.Vocabulary.IsNotEmpty
  - Microsoft.Health.Vocabulary.IsTruncated
  - Microsoft.Health.Vocabulary.IsTruncted
  - Microsoft.Health.Vocabulary.Name
  - Microsoft.Health.Vocabulary.ReadXml(System.Xml.XmlReader)
  - Microsoft.Health.Vocabulary.Version
  - Microsoft.Health.Vocabulary.WriteXml(System.Xml.XmlWriter)
  langs:
  - csharp
  - vb
  name: Vocabulary
  nameWithType: Vocabulary
  fullName: Microsoft.Health.Vocabulary
  type: Class
  source:
    remote:
      path: Microsoft.Health/Vocabulary.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Vocabulary
    path: ../Microsoft.Health/Vocabulary.cs
    startLine: 18
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nVocabulary list\n"
  example: []
  syntax:
    content: 'public class Vocabulary : Dictionary<string, VocabularyItem>, IDictionary<string, VocabularyItem>, ICollection<KeyValuePair<string, VocabularyItem>>, IDictionary, ICollection, IReadOnlyDictionary<string, VocabularyItem>, IReadOnlyCollection<KeyValuePair<string, VocabularyItem>>, IEnumerable<KeyValuePair<string, VocabularyItem>>, IEnumerable, ISerializable, IDeserializationCallback, IXmlSerializable'
    content.vb: >-
      Public Class Vocabulary
          Inherits Dictionary(Of String, VocabularyItem)
          Implements IDictionary(Of String, VocabularyItem), ICollection(Of KeyValuePair(Of String, VocabularyItem)), IDictionary, ICollection, IReadOnlyDictionary(Of String, VocabularyItem), IReadOnlyCollection(Of KeyValuePair(Of String, VocabularyItem)), IEnumerable(Of KeyValuePair(Of String, VocabularyItem)), IEnumerable, ISerializable, IDeserializationCallback, IXmlSerializable
  inheritance:
  - System.Object
  - System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  derivedClasses:
  - Microsoft.Health.VocabularyItemCollection
  implements:
  - System.Collections.Generic.IDictionary{System.String,Microsoft.Health.VocabularyItem}
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.VocabularyItem}}
  - System.Collections.IDictionary
  - System.Collections.ICollection
  - System.Collections.Generic.IReadOnlyDictionary{System.String,Microsoft.Health.VocabularyItem}
  - System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.VocabularyItem}}
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.VocabularyItem}}
  - System.Collections.IEnumerable
  - System.Runtime.Serialization.ISerializable
  - System.Runtime.Serialization.IDeserializationCallback
  - System.Xml.Serialization.IXmlSerializable
  inheritedMembers:
  - System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.Add(System.String,Microsoft.Health.VocabularyItem)
  - System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.VocabularyItem})
  - System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.VocabularyItem})
  - System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.VocabularyItem})
  - System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.Clear
  - System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.ContainsKey(System.String)
  - System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.ContainsValue(Microsoft.Health.VocabularyItem)
  - System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.GetEnumerator
  - System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
  - System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.OnDeserialization(System.Object)
  - System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.Remove(System.String)
  - System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.TryGetValue(System.String,Microsoft.Health.VocabularyItem@)
  - System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.VocabularyItem}[],System.Int32)
  - System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#IDictionary#get_Item(System.Object)
  - System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#IDictionary#set_Item(System.Object,System.Object)
  - System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#IDictionary#Add(System.Object,System.Object)
  - System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#IDictionary#Contains(System.Object)
  - System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#IDictionary#GetEnumerator
  - System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#IDictionary#Remove(System.Object)
  - System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.Comparer
  - System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.Count
  - System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.Keys
  - System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#Generic#IDictionary{TKey,TValue}#Keys
  - System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
  - System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.Values
  - System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#Generic#IDictionary{TKey,TValue}#Values
  - System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
  - System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.Item(System.String)
  - System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  - System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#ICollection#IsSynchronized
  - System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#ICollection#SyncRoot
  - System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#IDictionary#IsFixedSize
  - System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#IDictionary#IsReadOnly
  - System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#IDictionary#Keys
  - System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#IDictionary#Values
  - System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#IDictionary#Item(System.Object)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - Microsoft.Health.Vocabulary.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  - System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.Vocabulary.#ctor(System.String)
  commentId: M:Microsoft.Health.Vocabulary.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.Health.Vocabulary
  langs:
  - csharp
  - vb
  name: Vocabulary(String)
  nameWithType: Vocabulary.Vocabulary(String)
  fullName: Microsoft.Health.Vocabulary.Vocabulary(System.String)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health/Vocabulary.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health/Vocabulary.cs
    startLine: 30
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nCreate a new instance of the <xref href=\"Microsoft.Health.Vocabulary\" data-throw-if-not-resolved=\"false\"></xref> class\nwith the specified name\n"
  example: []
  syntax:
    content: public Vocabulary(string name)
    content.vb: Public Sub New(name As String)
    parameters:
    - id: name
      type: System.String
      description: The name of the vocabulary
  overload: Microsoft.Health.Vocabulary.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Vocabulary.#ctor(System.String,System.String,System.String)
  commentId: M:Microsoft.Health.Vocabulary.#ctor(System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String)'
  parent: Microsoft.Health.Vocabulary
  langs:
  - csharp
  - vb
  name: Vocabulary(String, String, String)
  nameWithType: Vocabulary.Vocabulary(String, String, String)
  fullName: Microsoft.Health.Vocabulary.Vocabulary(System.String, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health/Vocabulary.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health/Vocabulary.cs
    startLine: 43
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nCreate a new instance of the <xref href=\"Microsoft.Health.Vocabulary\" data-throw-if-not-resolved=\"false\"></xref> class\nwith the specified name, family, and version\n"
  example: []
  syntax:
    content: public Vocabulary(string name, string family, string version)
    content.vb: Public Sub New(name As String, family As String, version As String)
    parameters:
    - id: name
      type: System.String
      description: The name of the vocabulary
    - id: family
      type: System.String
      description: The family of the vocabulary
    - id: version
      type: System.String
      description: The version of the vocabulary
  overload: Microsoft.Health.Vocabulary.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Vocabulary.Culture
  commentId: P:Microsoft.Health.Vocabulary.Culture
  id: Culture
  parent: Microsoft.Health.Vocabulary
  langs:
  - csharp
  - vb
  name: Culture
  nameWithType: Vocabulary.Culture
  fullName: Microsoft.Health.Vocabulary.Culture
  type: Property
  source:
    remote:
      path: Microsoft.Health/Vocabulary.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Culture
    path: ../Microsoft.Health/Vocabulary.cs
    startLine: 56
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets or sets culture information containing the language in which the\nvocabulary items are represented.\n"
  example: []
  syntax:
    content: public CultureInfo Culture { get; set; }
    content.vb: Public Property Culture As CultureInfo
    parameters: []
    return:
      type: System.Globalization.CultureInfo
  overload: Microsoft.Health.Vocabulary.Culture*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Vocabulary.Name
  commentId: P:Microsoft.Health.Vocabulary.Name
  id: Name
  parent: Microsoft.Health.Vocabulary
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Vocabulary.Name
  fullName: Microsoft.Health.Vocabulary.Name
  type: Property
  source:
    remote:
      path: Microsoft.Health/Vocabulary.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Name
    path: ../Microsoft.Health/Vocabulary.cs
    startLine: 71
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the name of the <xref href=\"Microsoft.Health.Vocabulary\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public string Name { get; }
    content.vb: Public ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\nA string representing the <xref href=\"Microsoft.Health.Vocabulary\" data-throw-if-not-resolved=\"false\"></xref> name.\n"
  overload: Microsoft.Health.Vocabulary.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.Vocabulary.Family
  commentId: P:Microsoft.Health.Vocabulary.Family
  id: Family
  parent: Microsoft.Health.Vocabulary
  langs:
  - csharp
  - vb
  name: Family
  nameWithType: Vocabulary.Family
  fullName: Microsoft.Health.Vocabulary.Family
  type: Property
  source:
    remote:
      path: Microsoft.Health/Vocabulary.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Family
    path: ../Microsoft.Health/Vocabulary.cs
    startLine: 92
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the family of the vocabulary.\n"
  remarks: "\nThe family indicates the source of the \ninformation in the vocabulary, including \nexternal standards such as ISO or \ninternal standards such as HealthVault Vocabulary. \n"
  example: []
  syntax:
    content: public string Family { get; }
    content.vb: Public ReadOnly Property Family As String
    parameters: []
    return:
      type: System.String
      description: "\nA string representing the <xref href=\"Microsoft.Health.Vocabulary\" data-throw-if-not-resolved=\"false\"></xref> family.\n"
  overload: Microsoft.Health.Vocabulary.Family*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.Vocabulary.Version
  commentId: P:Microsoft.Health.Vocabulary.Version
  id: Version
  parent: Microsoft.Health.Vocabulary
  langs:
  - csharp
  - vb
  name: Version
  nameWithType: Vocabulary.Version
  fullName: Microsoft.Health.Vocabulary.Version
  type: Property
  source:
    remote:
      path: Microsoft.Health/Vocabulary.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Version
    path: ../Microsoft.Health/Vocabulary.cs
    startLine: 106
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the version of the <xref href=\"Microsoft.Health.Vocabulary\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public string Version { get; }
    content.vb: Public ReadOnly Property Version As String
    parameters: []
    return:
      type: System.String
      description: "\nA string representing the <xref href=\"Microsoft.Health.Vocabulary\" data-throw-if-not-resolved=\"false\"></xref> version.\n"
  overload: Microsoft.Health.Vocabulary.Version*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.Vocabulary.IsNotEmpty
  commentId: P:Microsoft.Health.Vocabulary.IsNotEmpty
  id: IsNotEmpty
  parent: Microsoft.Health.Vocabulary
  langs:
  - csharp
  - vb
  name: IsNotEmpty
  nameWithType: Vocabulary.IsNotEmpty
  fullName: Microsoft.Health.Vocabulary.IsNotEmpty
  type: Property
  source:
    remote:
      path: Microsoft.Health/Vocabulary.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IsNotEmpty
    path: ../Microsoft.Health/Vocabulary.cs
    startLine: 115
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets if the vocabulary contains none empty member.  \n"
  example: []
  syntax:
    content: public bool IsNotEmpty { get; }
    content.vb: Public ReadOnly Property IsNotEmpty As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.Health.Vocabulary.IsNotEmpty*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.Vocabulary.IsTruncted
  commentId: P:Microsoft.Health.Vocabulary.IsTruncted
  id: IsTruncted
  parent: Microsoft.Health.Vocabulary
  langs:
  - csharp
  - vb
  name: IsTruncted
  nameWithType: Vocabulary.IsTruncted
  fullName: Microsoft.Health.Vocabulary.IsTruncted
  type: Property
  source:
    remote:
      path: Microsoft.Health/Vocabulary.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IsTruncted
    path: ../Microsoft.Health/Vocabulary.cs
    startLine: 138
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets if the set vocabulary items in the <xref href=\"Microsoft.Health.Vocabulary\" data-throw-if-not-resolved=\"false\"></xref> has been truncated i.e. \nthere could be more <xref href=\"Microsoft.Health.VocabularyItem\" data-throw-if-not-resolved=\"false\"></xref>s in the <xref href=\"Microsoft.Health.Vocabulary\" data-throw-if-not-resolved=\"false\"></xref>. \n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use Vocabulary.IsTruncated instead.")]

      public bool IsTruncted { get; }
    content.vb: >-
      <Obsolete("Use Vocabulary.IsTruncated instead.")>

      Public ReadOnly Property IsTruncted As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.Health.Vocabulary.IsTruncted*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use Vocabulary.IsTruncated instead.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.Vocabulary.IsTruncated
  commentId: P:Microsoft.Health.Vocabulary.IsTruncated
  id: IsTruncated
  parent: Microsoft.Health.Vocabulary
  langs:
  - csharp
  - vb
  name: IsTruncated
  nameWithType: Vocabulary.IsTruncated
  fullName: Microsoft.Health.Vocabulary.IsTruncated
  type: Property
  source:
    remote:
      path: Microsoft.Health/Vocabulary.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IsTruncated
    path: ../Microsoft.Health/Vocabulary.cs
    startLine: 149
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets if the set vocabulary items in the <xref href=\"Microsoft.Health.Vocabulary\" data-throw-if-not-resolved=\"false\"></xref> has been truncated i.e. \nthere could be more <xref href=\"Microsoft.Health.VocabularyItem\" data-throw-if-not-resolved=\"false\"></xref>s in the <xref href=\"Microsoft.Health.Vocabulary\" data-throw-if-not-resolved=\"false\"></xref>. \n"
  example: []
  syntax:
    content: public bool IsTruncated { get; set; }
    content.vb: Public Property IsTruncated As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.Health.Vocabulary.IsTruncated*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Vocabulary.Add(Microsoft.Health.VocabularyItem)
  commentId: M:Microsoft.Health.Vocabulary.Add(Microsoft.Health.VocabularyItem)
  id: Add(Microsoft.Health.VocabularyItem)
  parent: Microsoft.Health.Vocabulary
  langs:
  - csharp
  - vb
  name: Add(VocabularyItem)
  nameWithType: Vocabulary.Add(VocabularyItem)
  fullName: Microsoft.Health.Vocabulary.Add(Microsoft.Health.VocabularyItem)
  type: Method
  source:
    remote:
      path: Microsoft.Health/Vocabulary.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Add
    path: ../Microsoft.Health/Vocabulary.cs
    startLine: 160
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nAdds a vocabulary item to the vocabulary.\n"
  example: []
  syntax:
    content: public void Add(VocabularyItem item)
    content.vb: Public Sub Add(item As VocabularyItem)
    parameters:
    - id: item
      type: Microsoft.Health.VocabularyItem
      description: The <xref href="Microsoft.Health.VocabularyItem" data-throw-if-not-resolved="false"></xref> instance to add.
  overload: Microsoft.Health.Vocabulary.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Vocabulary.GetSchema
  commentId: M:Microsoft.Health.Vocabulary.GetSchema
  id: GetSchema
  parent: Microsoft.Health.Vocabulary
  langs:
  - csharp
  - vb
  name: GetSchema()
  nameWithType: Vocabulary.GetSchema()
  fullName: Microsoft.Health.Vocabulary.GetSchema()
  type: Method
  source:
    remote:
      path: Microsoft.Health/Vocabulary.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetSchema
    path: ../Microsoft.Health/Vocabulary.cs
    startLine: 229
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGetSchema method for serialization\n"
  example: []
  syntax:
    content: public XmlSchema GetSchema()
    content.vb: Public Function GetSchema As XmlSchema
    return:
      type: System.Xml.Schema.XmlSchema
      description: Schema
  overload: Microsoft.Health.Vocabulary.GetSchema*
  implements:
  - System.Xml.Serialization.IXmlSerializable.GetSchema
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Vocabulary.ReadXml(System.Xml.XmlReader)
  commentId: M:Microsoft.Health.Vocabulary.ReadXml(System.Xml.XmlReader)
  id: ReadXml(System.Xml.XmlReader)
  parent: Microsoft.Health.Vocabulary
  langs:
  - csharp
  - vb
  name: ReadXml(XmlReader)
  nameWithType: Vocabulary.ReadXml(XmlReader)
  fullName: Microsoft.Health.Vocabulary.ReadXml(System.Xml.XmlReader)
  type: Method
  source:
    remote:
      path: Microsoft.Health/Vocabulary.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ReadXml
    path: ../Microsoft.Health/Vocabulary.cs
    startLine: 238
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nSerialization method to read the Xml from the reader and deserialize the instance.\n"
  example: []
  syntax:
    content: public void ReadXml(XmlReader reader)
    content.vb: Public Sub ReadXml(reader As XmlReader)
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: The reader
  overload: Microsoft.Health.Vocabulary.ReadXml*
  implements:
  - System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Vocabulary.WriteXml(System.Xml.XmlWriter)
  commentId: M:Microsoft.Health.Vocabulary.WriteXml(System.Xml.XmlWriter)
  id: WriteXml(System.Xml.XmlWriter)
  parent: Microsoft.Health.Vocabulary
  langs:
  - csharp
  - vb
  name: WriteXml(XmlWriter)
  nameWithType: Vocabulary.WriteXml(XmlWriter)
  fullName: Microsoft.Health.Vocabulary.WriteXml(System.Xml.XmlWriter)
  type: Method
  source:
    remote:
      path: Microsoft.Health/Vocabulary.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: WriteXml
    path: ../Microsoft.Health/Vocabulary.cs
    startLine: 266
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nWrite the serialized version of the data to the specified writer.\n"
  example: []
  syntax:
    content: public void WriteXml(XmlWriter writer)
    content.vb: Public Sub WriteXml(writer As XmlWriter)
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: The writer
  overload: Microsoft.Health.Vocabulary.WriteXml*
  implements:
  - System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  commentId: T:System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, VocabularyItem>
  nameWithType: Dictionary<String, VocabularyItem>
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>
  nameWithType.vb: Dictionary(Of String, VocabularyItem)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem)
  name.vb: Dictionary(Of String, VocabularyItem)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.VocabularyItem
    name: VocabularyItem
    nameWithType: VocabularyItem
    fullName: Microsoft.Health.VocabularyItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.VocabularyItem
    name: VocabularyItem
    nameWithType: VocabularyItem
    fullName: Microsoft.Health.VocabularyItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.String,Microsoft.Health.VocabularyItem}
  commentId: T:System.Collections.Generic.IDictionary{System.String,Microsoft.Health.VocabularyItem}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, VocabularyItem>
  nameWithType: IDictionary<String, VocabularyItem>
  fullName: System.Collections.Generic.IDictionary<System.String, Microsoft.Health.VocabularyItem>
  nameWithType.vb: IDictionary(Of String, VocabularyItem)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, Microsoft.Health.VocabularyItem)
  name.vb: IDictionary(Of String, VocabularyItem)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.VocabularyItem
    name: VocabularyItem
    nameWithType: VocabularyItem
    fullName: Microsoft.Health.VocabularyItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.VocabularyItem
    name: VocabularyItem
    nameWithType: VocabularyItem
    fullName: Microsoft.Health.VocabularyItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.VocabularyItem}}
  commentId: T:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.VocabularyItem}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<KeyValuePair<String, VocabularyItem>>
  nameWithType: ICollection<KeyValuePair<String, VocabularyItem>>
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.VocabularyItem>>
  nameWithType.vb: ICollection(Of KeyValuePair(Of String, VocabularyItem))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.VocabularyItem))
  name.vb: ICollection(Of KeyValuePair(Of String, VocabularyItem))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.VocabularyItem
    name: VocabularyItem
    nameWithType: VocabularyItem
    fullName: Microsoft.Health.VocabularyItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.VocabularyItem
    name: VocabularyItem
    nameWithType: VocabularyItem
    fullName: Microsoft.Health.VocabularyItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IDictionary
  commentId: T:System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.Generic.IReadOnlyDictionary{System.String,Microsoft.Health.VocabularyItem}
  commentId: T:System.Collections.Generic.IReadOnlyDictionary{System.String,Microsoft.Health.VocabularyItem}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyDictionary`2
  name: IReadOnlyDictionary<String, VocabularyItem>
  nameWithType: IReadOnlyDictionary<String, VocabularyItem>
  fullName: System.Collections.Generic.IReadOnlyDictionary<System.String, Microsoft.Health.VocabularyItem>
  nameWithType.vb: IReadOnlyDictionary(Of String, VocabularyItem)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of System.String, Microsoft.Health.VocabularyItem)
  name.vb: IReadOnlyDictionary(Of String, VocabularyItem)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.VocabularyItem
    name: VocabularyItem
    nameWithType: VocabularyItem
    fullName: Microsoft.Health.VocabularyItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.VocabularyItem
    name: VocabularyItem
    nameWithType: VocabularyItem
    fullName: Microsoft.Health.VocabularyItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.VocabularyItem}}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.VocabularyItem}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<KeyValuePair<String, VocabularyItem>>
  nameWithType: IReadOnlyCollection<KeyValuePair<String, VocabularyItem>>
  fullName: System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.VocabularyItem>>
  nameWithType.vb: IReadOnlyCollection(Of KeyValuePair(Of String, VocabularyItem))
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.VocabularyItem))
  name.vb: IReadOnlyCollection(Of KeyValuePair(Of String, VocabularyItem))
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.VocabularyItem
    name: VocabularyItem
    nameWithType: VocabularyItem
    fullName: Microsoft.Health.VocabularyItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.VocabularyItem
    name: VocabularyItem
    nameWithType: VocabularyItem
    fullName: Microsoft.Health.VocabularyItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.VocabularyItem}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.VocabularyItem}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<String, VocabularyItem>>
  nameWithType: IEnumerable<KeyValuePair<String, VocabularyItem>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.VocabularyItem>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of String, VocabularyItem))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.VocabularyItem))
  name.vb: IEnumerable(Of KeyValuePair(Of String, VocabularyItem))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.VocabularyItem
    name: VocabularyItem
    nameWithType: VocabularyItem
    fullName: Microsoft.Health.VocabularyItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.VocabularyItem
    name: VocabularyItem
    nameWithType: VocabularyItem
    fullName: Microsoft.Health.VocabularyItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Runtime.Serialization.ISerializable
  commentId: T:System.Runtime.Serialization.ISerializable
  parent: System.Runtime.Serialization
  isExternal: true
  name: ISerializable
  nameWithType: ISerializable
  fullName: System.Runtime.Serialization.ISerializable
- uid: System.Runtime.Serialization.IDeserializationCallback
  commentId: T:System.Runtime.Serialization.IDeserializationCallback
  parent: System.Runtime.Serialization
  isExternal: true
  name: IDeserializationCallback
  nameWithType: IDeserializationCallback
  fullName: System.Runtime.Serialization.IDeserializationCallback
- uid: System.Xml.Serialization.IXmlSerializable
  commentId: T:System.Xml.Serialization.IXmlSerializable
  parent: System.Xml.Serialization
  isExternal: true
  name: IXmlSerializable
  nameWithType: IXmlSerializable
  fullName: System.Xml.Serialization.IXmlSerializable
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.Add(System.String,Microsoft.Health.VocabularyItem)
  commentId: M:System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.Add(System.String,Microsoft.Health.VocabularyItem)
  parent: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  definition: System.Collections.Generic.Dictionary`2.Add(`0,`1)
  name: Add(String, VocabularyItem)
  nameWithType: Dictionary<String, VocabularyItem>.Add(String, VocabularyItem)
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.Add(System.String, Microsoft.Health.VocabularyItem)
  nameWithType.vb: Dictionary(Of String, VocabularyItem).Add(String, VocabularyItem)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).Add(System.String, Microsoft.Health.VocabularyItem)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.Add(`0,`1)
    name: Add
    nameWithType: Dictionary<String, VocabularyItem>.Add
    fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.VocabularyItem
    name: VocabularyItem
    nameWithType: VocabularyItem
    fullName: Microsoft.Health.VocabularyItem
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.Add(`0,`1)
    name: Add
    nameWithType: Dictionary(Of String, VocabularyItem).Add
    fullName: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.VocabularyItem
    name: VocabularyItem
    nameWithType: VocabularyItem
    fullName: Microsoft.Health.VocabularyItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.VocabularyItem})
  commentId: M:System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.VocabularyItem})
  parent: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
  name: ICollection<KeyValuePair<String, VocabularyItem>>.Add(KeyValuePair<String, VocabularyItem>)
  nameWithType: Dictionary<String, VocabularyItem>.ICollection<KeyValuePair<String, VocabularyItem>>.Add(KeyValuePair<String, VocabularyItem>)
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.VocabularyItem>>.Add(System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.VocabularyItem>)
  nameWithType.vb: Dictionary(Of String, VocabularyItem).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair(Of String, VocabularyItem))
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.VocabularyItem))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair(Of String, VocabularyItem))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
    name: ICollection<KeyValuePair<String, VocabularyItem>>.Add
    nameWithType: Dictionary<String, VocabularyItem>.ICollection<KeyValuePair<String, VocabularyItem>>.Add
    fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.VocabularyItem>>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.VocabularyItem
    name: VocabularyItem
    nameWithType: VocabularyItem
    fullName: Microsoft.Health.VocabularyItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
    name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
    nameWithType: Dictionary(Of String, VocabularyItem).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
    fullName: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.VocabularyItem
    name: VocabularyItem
    nameWithType: VocabularyItem
    fullName: Microsoft.Health.VocabularyItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.VocabularyItem})
  commentId: M:System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.VocabularyItem})
  parent: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  name: ICollection<KeyValuePair<String, VocabularyItem>>.Contains(KeyValuePair<String, VocabularyItem>)
  nameWithType: Dictionary<String, VocabularyItem>.ICollection<KeyValuePair<String, VocabularyItem>>.Contains(KeyValuePair<String, VocabularyItem>)
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.VocabularyItem>>.Contains(System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.VocabularyItem>)
  nameWithType.vb: Dictionary(Of String, VocabularyItem).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair(Of String, VocabularyItem))
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.VocabularyItem))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair(Of String, VocabularyItem))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
    name: ICollection<KeyValuePair<String, VocabularyItem>>.Contains
    nameWithType: Dictionary<String, VocabularyItem>.ICollection<KeyValuePair<String, VocabularyItem>>.Contains
    fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.VocabularyItem>>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.VocabularyItem
    name: VocabularyItem
    nameWithType: VocabularyItem
    fullName: Microsoft.Health.VocabularyItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
    name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
    nameWithType: Dictionary(Of String, VocabularyItem).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
    fullName: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.VocabularyItem
    name: VocabularyItem
    nameWithType: VocabularyItem
    fullName: Microsoft.Health.VocabularyItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.VocabularyItem})
  commentId: M:System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.VocabularyItem})
  parent: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  name: ICollection<KeyValuePair<String, VocabularyItem>>.Remove(KeyValuePair<String, VocabularyItem>)
  nameWithType: Dictionary<String, VocabularyItem>.ICollection<KeyValuePair<String, VocabularyItem>>.Remove(KeyValuePair<String, VocabularyItem>)
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.VocabularyItem>>.Remove(System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.VocabularyItem>)
  nameWithType.vb: Dictionary(Of String, VocabularyItem).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair(Of String, VocabularyItem))
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.VocabularyItem))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair(Of String, VocabularyItem))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
    name: ICollection<KeyValuePair<String, VocabularyItem>>.Remove
    nameWithType: Dictionary<String, VocabularyItem>.ICollection<KeyValuePair<String, VocabularyItem>>.Remove
    fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.VocabularyItem>>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.VocabularyItem
    name: VocabularyItem
    nameWithType: VocabularyItem
    fullName: Microsoft.Health.VocabularyItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
    name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
    nameWithType: Dictionary(Of String, VocabularyItem).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
    fullName: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.VocabularyItem
    name: VocabularyItem
    nameWithType: VocabularyItem
    fullName: Microsoft.Health.VocabularyItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.Clear
  commentId: M:System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.Clear
  parent: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  definition: System.Collections.Generic.Dictionary`2.Clear
  name: Clear()
  nameWithType: Dictionary<String, VocabularyItem>.Clear()
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.Clear()
  nameWithType.vb: Dictionary(Of String, VocabularyItem).Clear()
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.Clear
    name: Clear
    nameWithType: Dictionary<String, VocabularyItem>.Clear
    fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.Clear
    name: Clear
    nameWithType: Dictionary(Of String, VocabularyItem).Clear
    fullName: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.ContainsKey(System.String)
  commentId: M:System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.ContainsKey(System.String)
  parent: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  definition: System.Collections.Generic.Dictionary`2.ContainsKey(`0)
  name: ContainsKey(String)
  nameWithType: Dictionary<String, VocabularyItem>.ContainsKey(String)
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.ContainsKey(System.String)
  nameWithType.vb: Dictionary(Of String, VocabularyItem).ContainsKey(String)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).ContainsKey(System.String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: Dictionary<String, VocabularyItem>.ContainsKey
    fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: Dictionary(Of String, VocabularyItem).ContainsKey
    fullName: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.ContainsValue(Microsoft.Health.VocabularyItem)
  commentId: M:System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.ContainsValue(Microsoft.Health.VocabularyItem)
  parent: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  definition: System.Collections.Generic.Dictionary`2.ContainsValue(`1)
  name: ContainsValue(VocabularyItem)
  nameWithType: Dictionary<String, VocabularyItem>.ContainsValue(VocabularyItem)
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.ContainsValue(Microsoft.Health.VocabularyItem)
  nameWithType.vb: Dictionary(Of String, VocabularyItem).ContainsValue(VocabularyItem)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).ContainsValue(Microsoft.Health.VocabularyItem)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.ContainsValue(`1)
    name: ContainsValue
    nameWithType: Dictionary<String, VocabularyItem>.ContainsValue
    fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.ContainsValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.VocabularyItem
    name: VocabularyItem
    nameWithType: VocabularyItem
    fullName: Microsoft.Health.VocabularyItem
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.ContainsValue(`1)
    name: ContainsValue
    nameWithType: Dictionary(Of String, VocabularyItem).ContainsValue
    fullName: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).ContainsValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.VocabularyItem
    name: VocabularyItem
    nameWithType: VocabularyItem
    fullName: Microsoft.Health.VocabularyItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.GetEnumerator
  commentId: M:System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.GetEnumerator
  parent: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  definition: System.Collections.Generic.Dictionary`2.GetEnumerator
  name: GetEnumerator()
  nameWithType: Dictionary<String, VocabularyItem>.GetEnumerator()
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.GetEnumerator()
  nameWithType.vb: Dictionary(Of String, VocabularyItem).GetEnumerator()
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.GetEnumerator
    name: GetEnumerator
    nameWithType: Dictionary<String, VocabularyItem>.GetEnumerator
    fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.GetEnumerator
    name: GetEnumerator
    nameWithType: Dictionary(Of String, VocabularyItem).GetEnumerator
    fullName: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
  commentId: M:System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
  parent: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
  name: IEnumerable<KeyValuePair<String, VocabularyItem>>.GetEnumerator()
  nameWithType: Dictionary<String, VocabularyItem>.IEnumerable<KeyValuePair<String, VocabularyItem>>.GetEnumerator()
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.VocabularyItem>>.GetEnumerator()
  nameWithType.vb: Dictionary(Of String, VocabularyItem).System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator()
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
    name: IEnumerable<KeyValuePair<String, VocabularyItem>>.GetEnumerator
    nameWithType: Dictionary<String, VocabularyItem>.IEnumerable<KeyValuePair<String, VocabularyItem>>.GetEnumerator
    fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.VocabularyItem>>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
    name: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator
    nameWithType: Dictionary(Of String, VocabularyItem).System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator
    fullName: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  definition: System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  name: GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: Dictionary<String, VocabularyItem>.GetObjectData(SerializationInfo, StreamingContext)
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  nameWithType.vb: Dictionary(Of String, VocabularyItem).GetObjectData(SerializationInfo, StreamingContext)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: Dictionary<String, VocabularyItem>.GetObjectData
    fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: Dictionary(Of String, VocabularyItem).GetObjectData
    fullName: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.OnDeserialization(System.Object)
  commentId: M:System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.OnDeserialization(System.Object)
  parent: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  definition: System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)
  name: OnDeserialization(Object)
  nameWithType: Dictionary<String, VocabularyItem>.OnDeserialization(Object)
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.OnDeserialization(System.Object)
  nameWithType.vb: Dictionary(Of String, VocabularyItem).OnDeserialization(Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).OnDeserialization(System.Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)
    name: OnDeserialization
    nameWithType: Dictionary<String, VocabularyItem>.OnDeserialization
    fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.OnDeserialization
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)
    name: OnDeserialization
    nameWithType: Dictionary(Of String, VocabularyItem).OnDeserialization
    fullName: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).OnDeserialization
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.Remove(System.String)
  commentId: M:System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.Remove(System.String)
  parent: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  definition: System.Collections.Generic.Dictionary`2.Remove(`0)
  name: Remove(String)
  nameWithType: Dictionary<String, VocabularyItem>.Remove(String)
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.Remove(System.String)
  nameWithType.vb: Dictionary(Of String, VocabularyItem).Remove(String)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).Remove(System.String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.Remove(`0)
    name: Remove
    nameWithType: Dictionary<String, VocabularyItem>.Remove
    fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.Remove(`0)
    name: Remove
    nameWithType: Dictionary(Of String, VocabularyItem).Remove
    fullName: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.TryGetValue(System.String,Microsoft.Health.VocabularyItem@)
  commentId: M:System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.TryGetValue(System.String,Microsoft.Health.VocabularyItem@)
  parent: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  definition: System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)
  name: TryGetValue(String, VocabularyItem)
  nameWithType: Dictionary<String, VocabularyItem>.TryGetValue(String, VocabularyItem)
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.TryGetValue(System.String, Microsoft.Health.VocabularyItem)
  nameWithType.vb: Dictionary(Of String, VocabularyItem).TryGetValue(String, VocabularyItem)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).TryGetValue(System.String, Microsoft.Health.VocabularyItem)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: Dictionary<String, VocabularyItem>.TryGetValue
    fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.VocabularyItem
    name: VocabularyItem
    nameWithType: VocabularyItem
    fullName: Microsoft.Health.VocabularyItem
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: Dictionary(Of String, VocabularyItem).TryGetValue
    fullName: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.VocabularyItem
    name: VocabularyItem
    nameWithType: VocabularyItem
    fullName: Microsoft.Health.VocabularyItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.VocabularyItem}[],System.Int32)
  commentId: M:System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.VocabularyItem}[],System.Int32)
  parent: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  name: ICollection<KeyValuePair<String, VocabularyItem>>.CopyTo(KeyValuePair<String, VocabularyItem>[], Int32)
  nameWithType: Dictionary<String, VocabularyItem>.ICollection<KeyValuePair<String, VocabularyItem>>.CopyTo(KeyValuePair<String, VocabularyItem>[], Int32)
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.VocabularyItem>>.CopyTo(System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.VocabularyItem>[], System.Int32)
  nameWithType.vb: Dictionary(Of String, VocabularyItem).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair(Of String, VocabularyItem)(), Int32)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.VocabularyItem)(), System.Int32)
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair(Of String, VocabularyItem)(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
    name: ICollection<KeyValuePair<String, VocabularyItem>>.CopyTo
    nameWithType: Dictionary<String, VocabularyItem>.ICollection<KeyValuePair<String, VocabularyItem>>.CopyTo
    fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.VocabularyItem>>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.VocabularyItem
    name: VocabularyItem
    nameWithType: VocabularyItem
    fullName: Microsoft.Health.VocabularyItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
    name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
    nameWithType: Dictionary(Of String, VocabularyItem).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
    fullName: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.VocabularyItem
    name: VocabularyItem
    nameWithType: VocabularyItem
    fullName: Microsoft.Health.VocabularyItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: Dictionary<String, VocabularyItem>.ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  nameWithType.vb: Dictionary(Of String, VocabularyItem).System.Collections.ICollection.CopyTo(Array, Int32)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: ICollection.CopyTo
    nameWithType: Dictionary<String, VocabularyItem>.ICollection.CopyTo
    fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: System.Collections.ICollection.CopyTo
    nameWithType: Dictionary(Of String, VocabularyItem).System.Collections.ICollection.CopyTo
    fullName: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator()
  nameWithType: Dictionary<String, VocabularyItem>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: Dictionary(Of String, VocabularyItem).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: Dictionary<String, VocabularyItem>.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: Dictionary(Of String, VocabularyItem).System.Collections.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#IDictionary#get_Item(System.Object)
  commentId: M:System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#IDictionary#get_Item(System.Object)
  parent: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#get_Item(System.Object)
  name: IDictionary.get_Item(Object)
  nameWithType: Dictionary<String, VocabularyItem>.IDictionary.get_Item(Object)
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.System.Collections.IDictionary.get_Item(System.Object)
  nameWithType.vb: Dictionary(Of String, VocabularyItem).System.Collections.IDictionary.get_Item(Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).System.Collections.IDictionary.get_Item(System.Object)
  name.vb: System.Collections.IDictionary.get_Item(Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#get_Item(System.Object)
    name: IDictionary.get_Item
    nameWithType: Dictionary<String, VocabularyItem>.IDictionary.get_Item
    fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.System.Collections.IDictionary.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#get_Item(System.Object)
    name: System.Collections.IDictionary.get_Item
    nameWithType: Dictionary(Of String, VocabularyItem).System.Collections.IDictionary.get_Item
    fullName: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).System.Collections.IDictionary.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#IDictionary#set_Item(System.Object,System.Object)
  commentId: M:System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#IDictionary#set_Item(System.Object,System.Object)
  parent: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#set_Item(System.Object,System.Object)
  name: IDictionary.set_Item(Object, Object)
  nameWithType: Dictionary<String, VocabularyItem>.IDictionary.set_Item(Object, Object)
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.System.Collections.IDictionary.set_Item(System.Object, System.Object)
  nameWithType.vb: Dictionary(Of String, VocabularyItem).System.Collections.IDictionary.set_Item(Object, Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).System.Collections.IDictionary.set_Item(System.Object, System.Object)
  name.vb: System.Collections.IDictionary.set_Item(Object, Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#set_Item(System.Object,System.Object)
    name: IDictionary.set_Item
    nameWithType: Dictionary<String, VocabularyItem>.IDictionary.set_Item
    fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.System.Collections.IDictionary.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#set_Item(System.Object,System.Object)
    name: System.Collections.IDictionary.set_Item
    nameWithType: Dictionary(Of String, VocabularyItem).System.Collections.IDictionary.set_Item
    fullName: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).System.Collections.IDictionary.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#IDictionary#Add(System.Object,System.Object)
  commentId: M:System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#IDictionary#Add(System.Object,System.Object)
  parent: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)
  name: IDictionary.Add(Object, Object)
  nameWithType: Dictionary<String, VocabularyItem>.IDictionary.Add(Object, Object)
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.System.Collections.IDictionary.Add(System.Object, System.Object)
  nameWithType.vb: Dictionary(Of String, VocabularyItem).System.Collections.IDictionary.Add(Object, Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).System.Collections.IDictionary.Add(System.Object, System.Object)
  name.vb: System.Collections.IDictionary.Add(Object, Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)
    name: IDictionary.Add
    nameWithType: Dictionary<String, VocabularyItem>.IDictionary.Add
    fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.System.Collections.IDictionary.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)
    name: System.Collections.IDictionary.Add
    nameWithType: Dictionary(Of String, VocabularyItem).System.Collections.IDictionary.Add
    fullName: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).System.Collections.IDictionary.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#IDictionary#Contains(System.Object)
  commentId: M:System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#IDictionary#Contains(System.Object)
  parent: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)
  name: IDictionary.Contains(Object)
  nameWithType: Dictionary<String, VocabularyItem>.IDictionary.Contains(Object)
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.System.Collections.IDictionary.Contains(System.Object)
  nameWithType.vb: Dictionary(Of String, VocabularyItem).System.Collections.IDictionary.Contains(Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).System.Collections.IDictionary.Contains(System.Object)
  name.vb: System.Collections.IDictionary.Contains(Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)
    name: IDictionary.Contains
    nameWithType: Dictionary<String, VocabularyItem>.IDictionary.Contains
    fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.System.Collections.IDictionary.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)
    name: System.Collections.IDictionary.Contains
    nameWithType: Dictionary(Of String, VocabularyItem).System.Collections.IDictionary.Contains
    fullName: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).System.Collections.IDictionary.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#IDictionary#GetEnumerator
  commentId: M:System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#IDictionary#GetEnumerator
  parent: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator
  name: IDictionary.GetEnumerator()
  nameWithType: Dictionary<String, VocabularyItem>.IDictionary.GetEnumerator()
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.System.Collections.IDictionary.GetEnumerator()
  nameWithType.vb: Dictionary(Of String, VocabularyItem).System.Collections.IDictionary.GetEnumerator()
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).System.Collections.IDictionary.GetEnumerator()
  name.vb: System.Collections.IDictionary.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator
    name: IDictionary.GetEnumerator
    nameWithType: Dictionary<String, VocabularyItem>.IDictionary.GetEnumerator
    fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.System.Collections.IDictionary.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator
    name: System.Collections.IDictionary.GetEnumerator
    nameWithType: Dictionary(Of String, VocabularyItem).System.Collections.IDictionary.GetEnumerator
    fullName: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).System.Collections.IDictionary.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#IDictionary#Remove(System.Object)
  commentId: M:System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#IDictionary#Remove(System.Object)
  parent: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)
  name: IDictionary.Remove(Object)
  nameWithType: Dictionary<String, VocabularyItem>.IDictionary.Remove(Object)
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.System.Collections.IDictionary.Remove(System.Object)
  nameWithType.vb: Dictionary(Of String, VocabularyItem).System.Collections.IDictionary.Remove(Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).System.Collections.IDictionary.Remove(System.Object)
  name.vb: System.Collections.IDictionary.Remove(Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)
    name: IDictionary.Remove
    nameWithType: Dictionary<String, VocabularyItem>.IDictionary.Remove
    fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.System.Collections.IDictionary.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)
    name: System.Collections.IDictionary.Remove
    nameWithType: Dictionary(Of String, VocabularyItem).System.Collections.IDictionary.Remove
    fullName: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).System.Collections.IDictionary.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.Comparer
  commentId: P:System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.Comparer
  parent: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  definition: System.Collections.Generic.Dictionary`2.Comparer
  name: Comparer
  nameWithType: Dictionary<String, VocabularyItem>.Comparer
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.Comparer
  nameWithType.vb: Dictionary(Of String, VocabularyItem).Comparer
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).Comparer
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.Count
  commentId: P:System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.Count
  parent: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  definition: System.Collections.Generic.Dictionary`2.Count
  name: Count
  nameWithType: Dictionary<String, VocabularyItem>.Count
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.Count
  nameWithType.vb: Dictionary(Of String, VocabularyItem).Count
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).Count
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.Keys
  commentId: P:System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.Keys
  parent: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  definition: System.Collections.Generic.Dictionary`2.Keys
  name: Keys
  nameWithType: Dictionary<String, VocabularyItem>.Keys
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.Keys
  nameWithType.vb: Dictionary(Of String, VocabularyItem).Keys
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).Keys
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#Generic#IDictionary{TKey,TValue}#Keys
  commentId: P:System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#Generic#IDictionary{TKey,TValue}#Keys
  parent: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Keys
  name: IDictionary<String, VocabularyItem>.Keys
  nameWithType: Dictionary<String, VocabularyItem>.IDictionary<String, VocabularyItem>.Keys
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.System.Collections.Generic.IDictionary<System.String, Microsoft.Health.VocabularyItem>.Keys
  nameWithType.vb: Dictionary(Of String, VocabularyItem).System.Collections.Generic.IDictionary<TKey,TValue>.Keys
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).System.Collections.Generic.IDictionary<TKey,TValue>.Keys
  name.vb: System.Collections.Generic.IDictionary<TKey,TValue>.Keys
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
  commentId: P:System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
  parent: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
  name: IReadOnlyDictionary<String, VocabularyItem>.Keys
  nameWithType: Dictionary<String, VocabularyItem>.IReadOnlyDictionary<String, VocabularyItem>.Keys
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.System.Collections.Generic.IReadOnlyDictionary<System.String, Microsoft.Health.VocabularyItem>.Keys
  nameWithType.vb: Dictionary(Of String, VocabularyItem).System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys
  name.vb: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.Values
  commentId: P:System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.Values
  parent: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  definition: System.Collections.Generic.Dictionary`2.Values
  name: Values
  nameWithType: Dictionary<String, VocabularyItem>.Values
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.Values
  nameWithType.vb: Dictionary(Of String, VocabularyItem).Values
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).Values
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#Generic#IDictionary{TKey,TValue}#Values
  commentId: P:System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#Generic#IDictionary{TKey,TValue}#Values
  parent: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Values
  name: IDictionary<String, VocabularyItem>.Values
  nameWithType: Dictionary<String, VocabularyItem>.IDictionary<String, VocabularyItem>.Values
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.System.Collections.Generic.IDictionary<System.String, Microsoft.Health.VocabularyItem>.Values
  nameWithType.vb: Dictionary(Of String, VocabularyItem).System.Collections.Generic.IDictionary<TKey,TValue>.Values
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).System.Collections.Generic.IDictionary<TKey,TValue>.Values
  name.vb: System.Collections.Generic.IDictionary<TKey,TValue>.Values
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
  commentId: P:System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
  parent: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
  name: IReadOnlyDictionary<String, VocabularyItem>.Values
  nameWithType: Dictionary<String, VocabularyItem>.IReadOnlyDictionary<String, VocabularyItem>.Values
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.System.Collections.Generic.IReadOnlyDictionary<System.String, Microsoft.Health.VocabularyItem>.Values
  nameWithType.vb: Dictionary(Of String, VocabularyItem).System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values
  name.vb: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.Item(System.String)
  commentId: P:System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.Item(System.String)
  parent: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  definition: System.Collections.Generic.Dictionary`2.Item(`0)
  name: Item[String]
  nameWithType: Dictionary<String, VocabularyItem>.Item[String]
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.Item[System.String]
  nameWithType.vb: Dictionary(Of String, VocabularyItem).Item(String)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).Item(System.String)
  name.vb: Item(String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.Item(`0)
    name: Item
    nameWithType: Dictionary<String, VocabularyItem>.Item
    fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.Item(`0)
    name: Item
    nameWithType: Dictionary(Of String, VocabularyItem).Item
    fullName: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  commentId: P:System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  parent: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  name: ICollection<KeyValuePair<String, VocabularyItem>>.IsReadOnly
  nameWithType: Dictionary<String, VocabularyItem>.ICollection<KeyValuePair<String, VocabularyItem>>.IsReadOnly
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.VocabularyItem>>.IsReadOnly
  nameWithType.vb: Dictionary(Of String, VocabularyItem).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized
  name: ICollection.IsSynchronized
  nameWithType: Dictionary<String, VocabularyItem>.ICollection.IsSynchronized
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.System.Collections.ICollection.IsSynchronized
  nameWithType.vb: Dictionary(Of String, VocabularyItem).System.Collections.ICollection.IsSynchronized
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#ICollection#SyncRoot
  commentId: P:System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#ICollection#SyncRoot
  parent: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot
  name: ICollection.SyncRoot
  nameWithType: Dictionary<String, VocabularyItem>.ICollection.SyncRoot
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.System.Collections.ICollection.SyncRoot
  nameWithType.vb: Dictionary(Of String, VocabularyItem).System.Collections.ICollection.SyncRoot
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#IDictionary#IsFixedSize
  commentId: P:System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#IDictionary#IsFixedSize
  parent: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize
  name: IDictionary.IsFixedSize
  nameWithType: Dictionary<String, VocabularyItem>.IDictionary.IsFixedSize
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.System.Collections.IDictionary.IsFixedSize
  nameWithType.vb: Dictionary(Of String, VocabularyItem).System.Collections.IDictionary.IsFixedSize
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).System.Collections.IDictionary.IsFixedSize
  name.vb: System.Collections.IDictionary.IsFixedSize
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#IDictionary#IsReadOnly
  commentId: P:System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#IDictionary#IsReadOnly
  parent: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly
  name: IDictionary.IsReadOnly
  nameWithType: Dictionary<String, VocabularyItem>.IDictionary.IsReadOnly
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.System.Collections.IDictionary.IsReadOnly
  nameWithType.vb: Dictionary(Of String, VocabularyItem).System.Collections.IDictionary.IsReadOnly
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).System.Collections.IDictionary.IsReadOnly
  name.vb: System.Collections.IDictionary.IsReadOnly
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#IDictionary#Keys
  commentId: P:System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#IDictionary#Keys
  parent: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys
  name: IDictionary.Keys
  nameWithType: Dictionary<String, VocabularyItem>.IDictionary.Keys
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.System.Collections.IDictionary.Keys
  nameWithType.vb: Dictionary(Of String, VocabularyItem).System.Collections.IDictionary.Keys
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).System.Collections.IDictionary.Keys
  name.vb: System.Collections.IDictionary.Keys
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#IDictionary#Values
  commentId: P:System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#IDictionary#Values
  parent: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values
  name: IDictionary.Values
  nameWithType: Dictionary<String, VocabularyItem>.IDictionary.Values
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.System.Collections.IDictionary.Values
  nameWithType.vb: Dictionary(Of String, VocabularyItem).System.Collections.IDictionary.Values
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).System.Collections.IDictionary.Values
  name.vb: System.Collections.IDictionary.Values
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#IDictionary#Item(System.Object)
  commentId: P:System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}.System#Collections#IDictionary#Item(System.Object)
  parent: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.VocabularyItem}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)
  name: IDictionary.Item[Object]
  nameWithType: Dictionary<String, VocabularyItem>.IDictionary.Item[Object]
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.System.Collections.IDictionary.Item[System.Object]
  nameWithType.vb: Dictionary(Of String, VocabularyItem).System.Collections.IDictionary.Item(Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).System.Collections.IDictionary.Item(System.Object)
  name.vb: System.Collections.IDictionary.Item(Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)
    name: IDictionary.Item
    nameWithType: Dictionary<String, VocabularyItem>.IDictionary.Item
    fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.VocabularyItem>.System.Collections.IDictionary.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)
    name: System.Collections.IDictionary.Item
    nameWithType: Dictionary(Of String, VocabularyItem).System.Collections.IDictionary.Item
    fullName: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.VocabularyItem).System.Collections.IDictionary.Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  name: SetProperty(String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object())
  name.vb: SetProperty(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  name: InvokeMethod(String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object())
  name.vb: InvokeMethod(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  parent: Microsoft.Health.Utility.InvariantString
  definition: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  name: ToStringInvariant()
  nameWithType: InvariantString.ToStringInvariant()
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant()
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Vocabulary.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  parent: Microsoft.Health.Utility.TypeHelper
  definition: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  name: ValueOrDbNull<Vocabulary>()
  nameWithType: TypeHelper.ValueOrDbNull<Vocabulary>()
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.Vocabulary>()
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of Vocabulary)()
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.Vocabulary)()
  name.vb: ValueOrDbNull(Of Vocabulary)()
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull<Vocabulary>
    nameWithType: TypeHelper.ValueOrDbNull<Vocabulary>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.Vocabulary>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull(Of Vocabulary)
    nameWithType: TypeHelper.ValueOrDbNull(Of Vocabulary)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.Vocabulary)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  parent: Microsoft.Health.Utility.WCXmlHelper
  definition: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  name: ToXml()
  nameWithType: WCXmlHelper.ToXml()
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml()
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.IReadOnlyDictionary`2
  commentId: T:System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: true
  name: IReadOnlyDictionary<TKey, TValue>
  nameWithType: IReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: IReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  name.vb: IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.Serialization
  commentId: N:System.Runtime.Serialization
  isExternal: false
  name: System.Runtime.Serialization
  nameWithType: System.Runtime.Serialization
  fullName: System.Runtime.Serialization
- uid: System.Xml.Serialization
  commentId: N:System.Xml.Serialization
  isExternal: false
  name: System.Xml.Serialization
  nameWithType: System.Xml.Serialization
  fullName: System.Xml.Serialization
- uid: System.Collections.Generic.Dictionary`2.Add(`0,`1)
  commentId: M:System.Collections.Generic.Dictionary`2.Add(`0,`1)
  isExternal: true
  name: Add(TKey, TValue)
  nameWithType: Dictionary<TKey, TValue>.Add(TKey, TValue)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)
  nameWithType.vb: Dictionary(Of TKey, TValue).Add(TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).Add(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.Add(`0,`1)
    name: Add
    nameWithType: Dictionary<TKey, TValue>.Add
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.Add(`0,`1)
    name: Add
    nameWithType: Dictionary(Of TKey, TValue).Add
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
  commentId: M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
  isExternal: true
  name: ICollection<KeyValuePair<TKey, TValue>>.Add(KeyValuePair<TKey, TValue>)
  nameWithType: Dictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.Add(KeyValuePair<TKey, TValue>)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Add(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair(Of TKey, TValue))
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
    name: ICollection<KeyValuePair<TKey, TValue>>.Add
    nameWithType: Dictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.Add
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
    name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
    nameWithType: Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  commentId: M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  isExternal: true
  name: ICollection<KeyValuePair<TKey, TValue>>.Contains(KeyValuePair<TKey, TValue>)
  nameWithType: Dictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.Contains(KeyValuePair<TKey, TValue>)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair(Of TKey, TValue))
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
    name: ICollection<KeyValuePair<TKey, TValue>>.Contains
    nameWithType: Dictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.Contains
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
    name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
    nameWithType: Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  commentId: M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  isExternal: true
  name: ICollection<KeyValuePair<TKey, TValue>>.Remove(KeyValuePair<TKey, TValue>)
  nameWithType: Dictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.Remove(KeyValuePair<TKey, TValue>)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair(Of TKey, TValue))
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
    name: ICollection<KeyValuePair<TKey, TValue>>.Remove
    nameWithType: Dictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.Remove
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
    name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
    nameWithType: Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.Clear
  commentId: M:System.Collections.Generic.Dictionary`2.Clear
  isExternal: true
  name: Clear()
  nameWithType: Dictionary<TKey, TValue>.Clear()
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Clear()
  nameWithType.vb: Dictionary(Of TKey, TValue).Clear()
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.Clear
    name: Clear
    nameWithType: Dictionary<TKey, TValue>.Clear
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.Clear
    name: Clear
    nameWithType: Dictionary(Of TKey, TValue).Clear
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.ContainsKey(`0)
  commentId: M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)
  isExternal: true
  name: ContainsKey(TKey)
  nameWithType: Dictionary<TKey, TValue>.ContainsKey(TKey)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)
  nameWithType.vb: Dictionary(Of TKey, TValue).ContainsKey(TKey)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).ContainsKey(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: Dictionary<TKey, TValue>.ContainsKey
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: Dictionary(Of TKey, TValue).ContainsKey
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.ContainsValue(`1)
  commentId: M:System.Collections.Generic.Dictionary`2.ContainsValue(`1)
  isExternal: true
  name: ContainsValue(TValue)
  nameWithType: Dictionary<TKey, TValue>.ContainsValue(TValue)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.ContainsValue(TValue)
  nameWithType.vb: Dictionary(Of TKey, TValue).ContainsValue(TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).ContainsValue(TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.ContainsValue(`1)
    name: ContainsValue
    nameWithType: Dictionary<TKey, TValue>.ContainsValue
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.ContainsValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.ContainsValue(`1)
    name: ContainsValue
    nameWithType: Dictionary(Of TKey, TValue).ContainsValue
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).ContainsValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.GetEnumerator
  commentId: M:System.Collections.Generic.Dictionary`2.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: Dictionary<TKey, TValue>.GetEnumerator()
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.GetEnumerator()
  nameWithType.vb: Dictionary(Of TKey, TValue).GetEnumerator()
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.GetEnumerator
    name: GetEnumerator
    nameWithType: Dictionary<TKey, TValue>.GetEnumerator
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.GetEnumerator
    name: GetEnumerator
    nameWithType: Dictionary(Of TKey, TValue).GetEnumerator
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
  commentId: M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
  isExternal: true
  name: IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator()
  nameWithType: Dictionary<TKey, TValue>.IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator()
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>.GetEnumerator()
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator()
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
    name: IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator
    nameWithType: Dictionary<TKey, TValue>.IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
    name: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator
    nameWithType: Dictionary(Of TKey, TValue).System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  isExternal: true
  name: GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: Dictionary<TKey, TValue>.GetObjectData(SerializationInfo, StreamingContext)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  nameWithType.vb: Dictionary(Of TKey, TValue).GetObjectData(SerializationInfo, StreamingContext)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: Dictionary<TKey, TValue>.GetObjectData
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: Dictionary(Of TKey, TValue).GetObjectData
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)
  commentId: M:System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)
  isExternal: true
  name: OnDeserialization(Object)
  nameWithType: Dictionary<TKey, TValue>.OnDeserialization(Object)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.OnDeserialization(System.Object)
  nameWithType.vb: Dictionary(Of TKey, TValue).OnDeserialization(Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).OnDeserialization(System.Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)
    name: OnDeserialization
    nameWithType: Dictionary<TKey, TValue>.OnDeserialization
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.OnDeserialization
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)
    name: OnDeserialization
    nameWithType: Dictionary(Of TKey, TValue).OnDeserialization
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).OnDeserialization
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.Remove(`0)
  commentId: M:System.Collections.Generic.Dictionary`2.Remove(`0)
  isExternal: true
  name: Remove(TKey)
  nameWithType: Dictionary<TKey, TValue>.Remove(TKey)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Remove(TKey)
  nameWithType.vb: Dictionary(Of TKey, TValue).Remove(TKey)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).Remove(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.Remove(`0)
    name: Remove
    nameWithType: Dictionary<TKey, TValue>.Remove
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.Remove(`0)
    name: Remove
    nameWithType: Dictionary(Of TKey, TValue).Remove
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)
  commentId: M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)
  isExternal: true
  name: TryGetValue(TKey, TValue)
  nameWithType: Dictionary<TKey, TValue>.TryGetValue(TKey, TValue)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.TryGetValue(TKey, TValue)
  nameWithType.vb: Dictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: Dictionary<TKey, TValue>.TryGetValue
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: Dictionary(Of TKey, TValue).TryGetValue
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  commentId: M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  isExternal: true
  name: ICollection<KeyValuePair<TKey, TValue>>.CopyTo(KeyValuePair<TKey, TValue>[], Int32)
  nameWithType: Dictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.CopyTo(KeyValuePair<TKey, TValue>[], Int32)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue>[], System.Int32)
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair(Of TKey, TValue)(), Int32)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(System.Collections.Generic.KeyValuePair(Of TKey, TValue)(), System.Int32)
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair(Of TKey, TValue)(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
    name: ICollection<KeyValuePair<TKey, TValue>>.CopyTo
    nameWithType: Dictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.CopyTo
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
    name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
    nameWithType: Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isExternal: true
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: Dictionary<TKey, TValue>.ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.ICollection.CopyTo(Array, Int32)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: ICollection.CopyTo
    nameWithType: Dictionary<TKey, TValue>.ICollection.CopyTo
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: System.Collections.ICollection.CopyTo
    nameWithType: Dictionary(Of TKey, TValue).System.Collections.ICollection.CopyTo
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator
  isExternal: true
  name: IEnumerable.GetEnumerator()
  nameWithType: Dictionary<TKey, TValue>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: Dictionary<TKey, TValue>.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: Dictionary(Of TKey, TValue).System.Collections.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#get_Item(System.Object)
  commentId: M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#get_Item(System.Object)
  isExternal: true
  name: IDictionary.get_Item(Object)
  nameWithType: Dictionary<TKey, TValue>.IDictionary.get_Item(Object)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.get_Item(System.Object)
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.IDictionary.get_Item(Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.get_Item(System.Object)
  name.vb: System.Collections.IDictionary.get_Item(Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#get_Item(System.Object)
    name: IDictionary.get_Item
    nameWithType: Dictionary<TKey, TValue>.IDictionary.get_Item
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#get_Item(System.Object)
    name: System.Collections.IDictionary.get_Item
    nameWithType: Dictionary(Of TKey, TValue).System.Collections.IDictionary.get_Item
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#set_Item(System.Object,System.Object)
  commentId: M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#set_Item(System.Object,System.Object)
  isExternal: true
  name: IDictionary.set_Item(Object, Object)
  nameWithType: Dictionary<TKey, TValue>.IDictionary.set_Item(Object, Object)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.set_Item(System.Object, System.Object)
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.IDictionary.set_Item(Object, Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.set_Item(System.Object, System.Object)
  name.vb: System.Collections.IDictionary.set_Item(Object, Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#set_Item(System.Object,System.Object)
    name: IDictionary.set_Item
    nameWithType: Dictionary<TKey, TValue>.IDictionary.set_Item
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#set_Item(System.Object,System.Object)
    name: System.Collections.IDictionary.set_Item
    nameWithType: Dictionary(Of TKey, TValue).System.Collections.IDictionary.set_Item
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)
  commentId: M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)
  isExternal: true
  name: IDictionary.Add(Object, Object)
  nameWithType: Dictionary<TKey, TValue>.IDictionary.Add(Object, Object)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.Add(System.Object, System.Object)
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.IDictionary.Add(Object, Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.Add(System.Object, System.Object)
  name.vb: System.Collections.IDictionary.Add(Object, Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)
    name: IDictionary.Add
    nameWithType: Dictionary<TKey, TValue>.IDictionary.Add
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)
    name: System.Collections.IDictionary.Add
    nameWithType: Dictionary(Of TKey, TValue).System.Collections.IDictionary.Add
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)
  commentId: M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)
  isExternal: true
  name: IDictionary.Contains(Object)
  nameWithType: Dictionary<TKey, TValue>.IDictionary.Contains(Object)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.Contains(System.Object)
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.IDictionary.Contains(Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.Contains(System.Object)
  name.vb: System.Collections.IDictionary.Contains(Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)
    name: IDictionary.Contains
    nameWithType: Dictionary<TKey, TValue>.IDictionary.Contains
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)
    name: System.Collections.IDictionary.Contains
    nameWithType: Dictionary(Of TKey, TValue).System.Collections.IDictionary.Contains
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator
  commentId: M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator
  isExternal: true
  name: IDictionary.GetEnumerator()
  nameWithType: Dictionary<TKey, TValue>.IDictionary.GetEnumerator()
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.GetEnumerator()
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.IDictionary.GetEnumerator()
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.GetEnumerator()
  name.vb: System.Collections.IDictionary.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator
    name: IDictionary.GetEnumerator
    nameWithType: Dictionary<TKey, TValue>.IDictionary.GetEnumerator
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator
    name: System.Collections.IDictionary.GetEnumerator
    nameWithType: Dictionary(Of TKey, TValue).System.Collections.IDictionary.GetEnumerator
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)
  commentId: M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)
  isExternal: true
  name: IDictionary.Remove(Object)
  nameWithType: Dictionary<TKey, TValue>.IDictionary.Remove(Object)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.Remove(System.Object)
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.IDictionary.Remove(Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.Remove(System.Object)
  name.vb: System.Collections.IDictionary.Remove(Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)
    name: IDictionary.Remove
    nameWithType: Dictionary<TKey, TValue>.IDictionary.Remove
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)
    name: System.Collections.IDictionary.Remove
    nameWithType: Dictionary(Of TKey, TValue).System.Collections.IDictionary.Remove
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.Comparer
  commentId: P:System.Collections.Generic.Dictionary`2.Comparer
  isExternal: true
  name: Comparer
  nameWithType: Dictionary<TKey, TValue>.Comparer
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Comparer
  nameWithType.vb: Dictionary(Of TKey, TValue).Comparer
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).Comparer
- uid: System.Collections.Generic.Dictionary`2.Count
  commentId: P:System.Collections.Generic.Dictionary`2.Count
  isExternal: true
  name: Count
  nameWithType: Dictionary<TKey, TValue>.Count
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Count
  nameWithType.vb: Dictionary(Of TKey, TValue).Count
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).Count
- uid: System.Collections.Generic.Dictionary`2.Keys
  commentId: P:System.Collections.Generic.Dictionary`2.Keys
  isExternal: true
  name: Keys
  nameWithType: Dictionary<TKey, TValue>.Keys
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Keys
  nameWithType.vb: Dictionary(Of TKey, TValue).Keys
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).Keys
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Keys
  commentId: P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Keys
  isExternal: true
  name: IDictionary<TKey, TValue>.Keys
  nameWithType: Dictionary<TKey, TValue>.IDictionary<TKey, TValue>.Keys
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.IDictionary<TKey, TValue>.Keys
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.Generic.IDictionary<TKey,TValue>.Keys
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.Generic.IDictionary<TKey,TValue>.Keys
  name.vb: System.Collections.Generic.IDictionary<TKey,TValue>.Keys
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
  commentId: P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
  isExternal: true
  name: IReadOnlyDictionary<TKey, TValue>.Keys
  nameWithType: Dictionary<TKey, TValue>.IReadOnlyDictionary<TKey, TValue>.Keys
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Keys
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys
  name.vb: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys
- uid: System.Collections.Generic.Dictionary`2.Values
  commentId: P:System.Collections.Generic.Dictionary`2.Values
  isExternal: true
  name: Values
  nameWithType: Dictionary<TKey, TValue>.Values
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Values
  nameWithType.vb: Dictionary(Of TKey, TValue).Values
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).Values
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Values
  commentId: P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Values
  isExternal: true
  name: IDictionary<TKey, TValue>.Values
  nameWithType: Dictionary<TKey, TValue>.IDictionary<TKey, TValue>.Values
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.IDictionary<TKey, TValue>.Values
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.Generic.IDictionary<TKey,TValue>.Values
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.Generic.IDictionary<TKey,TValue>.Values
  name.vb: System.Collections.Generic.IDictionary<TKey,TValue>.Values
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
  commentId: P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
  isExternal: true
  name: IReadOnlyDictionary<TKey, TValue>.Values
  nameWithType: Dictionary<TKey, TValue>.IReadOnlyDictionary<TKey, TValue>.Values
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Values
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values
  name.vb: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values
- uid: System.Collections.Generic.Dictionary`2.Item(`0)
  commentId: P:System.Collections.Generic.Dictionary`2.Item(`0)
  isExternal: true
  name: Item[TKey]
  nameWithType: Dictionary<TKey, TValue>.Item[TKey]
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Item[TKey]
  nameWithType.vb: Dictionary(Of TKey, TValue).Item(TKey)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).Item(TKey)
  name.vb: Item(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.Item(`0)
    name: Item
    nameWithType: Dictionary<TKey, TValue>.Item
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.Item(`0)
    name: Item
    nameWithType: Dictionary(Of TKey, TValue).Item
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  commentId: P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  isExternal: true
  name: ICollection<KeyValuePair<TKey, TValue>>.IsReadOnly
  nameWithType: Dictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.IsReadOnly
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.IsReadOnly
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
- uid: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized
  isExternal: true
  name: ICollection.IsSynchronized
  nameWithType: Dictionary<TKey, TValue>.ICollection.IsSynchronized
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.ICollection.IsSynchronized
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.ICollection.IsSynchronized
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot
  commentId: P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot
  isExternal: true
  name: ICollection.SyncRoot
  nameWithType: Dictionary<TKey, TValue>.ICollection.SyncRoot
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.ICollection.SyncRoot
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.ICollection.SyncRoot
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize
  commentId: P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize
  isExternal: true
  name: IDictionary.IsFixedSize
  nameWithType: Dictionary<TKey, TValue>.IDictionary.IsFixedSize
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.IsFixedSize
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.IDictionary.IsFixedSize
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.IsFixedSize
  name.vb: System.Collections.IDictionary.IsFixedSize
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly
  commentId: P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly
  isExternal: true
  name: IDictionary.IsReadOnly
  nameWithType: Dictionary<TKey, TValue>.IDictionary.IsReadOnly
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.IsReadOnly
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.IDictionary.IsReadOnly
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.IsReadOnly
  name.vb: System.Collections.IDictionary.IsReadOnly
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys
  commentId: P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys
  isExternal: true
  name: IDictionary.Keys
  nameWithType: Dictionary<TKey, TValue>.IDictionary.Keys
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.Keys
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.IDictionary.Keys
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.Keys
  name.vb: System.Collections.IDictionary.Keys
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values
  commentId: P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values
  isExternal: true
  name: IDictionary.Values
  nameWithType: Dictionary<TKey, TValue>.IDictionary.Values
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.Values
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.IDictionary.Values
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.Values
  name.vb: System.Collections.IDictionary.Values
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)
  commentId: P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)
  isExternal: true
  name: IDictionary.Item[Object]
  nameWithType: Dictionary<TKey, TValue>.IDictionary.Item[Object]
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.Item[System.Object]
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.IDictionary.Item(Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.Item(System.Object)
  name.vb: System.Collections.IDictionary.Item(Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)
    name: IDictionary.Item
    nameWithType: Dictionary<TKey, TValue>.IDictionary.Item
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)
    name: System.Collections.IDictionary.Item
    nameWithType: Dictionary(Of TKey, TValue).System.Collections.IDictionary.Item
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  isExternal: true
  name: SetProperty(Object, String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object())
  name.vb: SetProperty(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions
  commentId: T:Microsoft.Health.Utility.IDispatchExtensions
  parent: Microsoft.Health.Utility
  isExternal: false
  name: IDispatchExtensions
  nameWithType: IDispatchExtensions
  fullName: Microsoft.Health.Utility.IDispatchExtensions
- uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  isExternal: true
  name: InvokeMethod(Object, String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object())
  name.vb: InvokeMethod(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  isExternal: true
  name: ToStringInvariant(Object)
  nameWithType: InvariantString.ToStringInvariant(Object)
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString
  commentId: T:Microsoft.Health.Utility.InvariantString
  parent: Microsoft.Health.Utility
  isExternal: false
  name: InvariantString
  nameWithType: InvariantString
  fullName: Microsoft.Health.Utility.InvariantString
- uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  isExternal: false
  name: ValueOrDbNull<T>(T)
  nameWithType: TypeHelper.ValueOrDbNull<T>(T)
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>(T)
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of T)(T)
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)(T)
  name.vb: ValueOrDbNull(Of T)(T)
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull<T>
    nameWithType: TypeHelper.ValueOrDbNull<T>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull(Of T)
    nameWithType: TypeHelper.ValueOrDbNull(Of T)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.TypeHelper
  commentId: T:Microsoft.Health.Utility.TypeHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: TypeHelper
  nameWithType: TypeHelper
  fullName: Microsoft.Health.Utility.TypeHelper
- uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  isExternal: true
  name: ToXml(Object)
  nameWithType: WCXmlHelper.ToXml(Object)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.WCXmlHelper
  commentId: T:Microsoft.Health.Utility.WCXmlHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: WCXmlHelper
  nameWithType: WCXmlHelper
  fullName: Microsoft.Health.Utility.WCXmlHelper
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: Microsoft.Health.Vocabulary
  commentId: T:Microsoft.Health.Vocabulary
  parent: Microsoft.Health
  isExternal: false
  name: Vocabulary
  nameWithType: Vocabulary
  fullName: Microsoft.Health.Vocabulary
- uid: Microsoft.Health.Vocabulary.#ctor*
  commentId: Overload:Microsoft.Health.Vocabulary.#ctor
  isExternal: false
  name: Vocabulary
  nameWithType: Vocabulary.Vocabulary
  fullName: Microsoft.Health.Vocabulary.Vocabulary
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Health.Vocabulary.Culture*
  commentId: Overload:Microsoft.Health.Vocabulary.Culture
  isExternal: false
  name: Culture
  nameWithType: Vocabulary.Culture
  fullName: Microsoft.Health.Vocabulary.Culture
- uid: System.Globalization.CultureInfo
  commentId: T:System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Globalization
  commentId: N:System.Globalization
  isExternal: false
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
- uid: Microsoft.Health.Vocabulary.Name*
  commentId: Overload:Microsoft.Health.Vocabulary.Name
  isExternal: false
  name: Name
  nameWithType: Vocabulary.Name
  fullName: Microsoft.Health.Vocabulary.Name
- uid: Microsoft.Health.Vocabulary.Family*
  commentId: Overload:Microsoft.Health.Vocabulary.Family
  isExternal: false
  name: Family
  nameWithType: Vocabulary.Family
  fullName: Microsoft.Health.Vocabulary.Family
- uid: Microsoft.Health.Vocabulary.Version*
  commentId: Overload:Microsoft.Health.Vocabulary.Version
  isExternal: false
  name: Version
  nameWithType: Vocabulary.Version
  fullName: Microsoft.Health.Vocabulary.Version
- uid: Microsoft.Health.Vocabulary.IsNotEmpty*
  commentId: Overload:Microsoft.Health.Vocabulary.IsNotEmpty
  isExternal: false
  name: IsNotEmpty
  nameWithType: Vocabulary.IsNotEmpty
  fullName: Microsoft.Health.Vocabulary.IsNotEmpty
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Health.VocabularyItem
  commentId: T:Microsoft.Health.VocabularyItem
  parent: Microsoft.Health
  isExternal: false
  name: VocabularyItem
  nameWithType: VocabularyItem
  fullName: Microsoft.Health.VocabularyItem
- uid: Microsoft.Health.Vocabulary.IsTruncted*
  commentId: Overload:Microsoft.Health.Vocabulary.IsTruncted
  isExternal: false
  name: IsTruncted
  nameWithType: Vocabulary.IsTruncted
  fullName: Microsoft.Health.Vocabulary.IsTruncted
- uid: Microsoft.Health.Vocabulary.IsTruncated*
  commentId: Overload:Microsoft.Health.Vocabulary.IsTruncated
  isExternal: false
  name: IsTruncated
  nameWithType: Vocabulary.IsTruncated
  fullName: Microsoft.Health.Vocabulary.IsTruncated
- uid: Microsoft.Health.Vocabulary.Add*
  commentId: Overload:Microsoft.Health.Vocabulary.Add
  isExternal: false
  name: Add
  nameWithType: Vocabulary.Add
  fullName: Microsoft.Health.Vocabulary.Add
- uid: Microsoft.Health.Vocabulary.GetSchema*
  commentId: Overload:Microsoft.Health.Vocabulary.GetSchema
  isExternal: false
  name: GetSchema
  nameWithType: Vocabulary.GetSchema
  fullName: Microsoft.Health.Vocabulary.GetSchema
- uid: System.Xml.Serialization.IXmlSerializable.GetSchema
  commentId: M:System.Xml.Serialization.IXmlSerializable.GetSchema
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: GetSchema()
  nameWithType: IXmlSerializable.GetSchema()
  fullName: System.Xml.Serialization.IXmlSerializable.GetSchema()
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.GetSchema
    name: GetSchema
    nameWithType: IXmlSerializable.GetSchema
    fullName: System.Xml.Serialization.IXmlSerializable.GetSchema
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.GetSchema
    name: GetSchema
    nameWithType: IXmlSerializable.GetSchema
    fullName: System.Xml.Serialization.IXmlSerializable.GetSchema
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.Schema.XmlSchema
  commentId: T:System.Xml.Schema.XmlSchema
  parent: System.Xml.Schema
  isExternal: true
  name: XmlSchema
  nameWithType: XmlSchema
  fullName: System.Xml.Schema.XmlSchema
- uid: System.Xml.Schema
  commentId: N:System.Xml.Schema
  isExternal: false
  name: System.Xml.Schema
  nameWithType: System.Xml.Schema
  fullName: System.Xml.Schema
- uid: Microsoft.Health.Vocabulary.ReadXml*
  commentId: Overload:Microsoft.Health.Vocabulary.ReadXml
  isExternal: false
  name: ReadXml
  nameWithType: Vocabulary.ReadXml
  fullName: Microsoft.Health.Vocabulary.ReadXml
- uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  commentId: M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: ReadXml(XmlReader)
  nameWithType: IXmlSerializable.ReadXml(XmlReader)
  fullName: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
    name: ReadXml
    nameWithType: IXmlSerializable.ReadXml
    fullName: System.Xml.Serialization.IXmlSerializable.ReadXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
    name: ReadXml
    nameWithType: IXmlSerializable.ReadXml
    fullName: System.Xml.Serialization.IXmlSerializable.ReadXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.XmlReader
  commentId: T:System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: false
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: Microsoft.Health.Vocabulary.WriteXml*
  commentId: Overload:Microsoft.Health.Vocabulary.WriteXml
  isExternal: false
  name: WriteXml
  nameWithType: Vocabulary.WriteXml
  fullName: Microsoft.Health.Vocabulary.WriteXml
- uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  commentId: M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: WriteXml(XmlWriter)
  nameWithType: IXmlSerializable.WriteXml(XmlWriter)
  fullName: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: IXmlSerializable.WriteXml
    fullName: System.Xml.Serialization.IXmlSerializable.WriteXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: IXmlSerializable.WriteXml
    fullName: System.Xml.Serialization.IXmlSerializable.WriteXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.XmlWriter
  commentId: T:System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
