### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.MultiValueDictionary`3
  commentId: T:Microsoft.Health.MultiValueDictionary`3
  id: MultiValueDictionary`3
  parent: Microsoft.Health
  children:
  - Microsoft.Health.MultiValueDictionary`3.#ctor
  - Microsoft.Health.MultiValueDictionary`3.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  - Microsoft.Health.MultiValueDictionary`3.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  - Microsoft.Health.MultiValueDictionary`3.Add(`0,`1)
  - Microsoft.Health.MultiValueDictionary`3.Add(System.Collections.Generic.IEnumerable{`1},System.Func{`1,`0})
  - Microsoft.Health.MultiValueDictionary`3.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  - Microsoft.Health.MultiValueDictionary`3.Add(System.Collections.Generic.KeyValuePair{`0,`1})
  - Microsoft.Health.MultiValueDictionary`3.All
  - Microsoft.Health.MultiValueDictionary`3.Get(`0)
  - Microsoft.Health.MultiValueDictionary`3.GetEnumerator
  - Microsoft.Health.MultiValueDictionary`3.NewList
  - Microsoft.Health.MultiValueDictionary`3.Remove(`0,`1)
  langs:
  - csharp
  - vb
  name: MultiValueDictionary<K, V, LV>
  nameWithType: MultiValueDictionary<K, V, LV>
  fullName: Microsoft.Health.MultiValueDictionary<K, V, LV>
  type: Class
  source:
    remote:
      path: Microsoft.Health.Utility/search/ValueListDictionary.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: MultiValueDictionary
    path: ../Microsoft.Health.Utility/search/ValueListDictionary.cs
    startLine: 21
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\nA dictionary that permits DUPLICATES. Detects duplicates and automatically\nmaintains a list of the given type to hold them. Gives you control on what the list type is\n"
  example: []
  syntax:
    content: >-
      [Serializable]

      public class MultiValueDictionary<K, V, LV> : Dictionary<K, LV>, IDictionary<K, LV>, ICollection<KeyValuePair<K, LV>>, IDictionary, ICollection, IReadOnlyDictionary<K, LV>, IReadOnlyCollection<KeyValuePair<K, LV>>, IEnumerable<KeyValuePair<K, LV>>, ISerializable, IDeserializationCallback, IEnumerable<V>, IEnumerable where LV : class, IList<V>, new ()
    content.vb: >-
      <Serializable>

      Public Class MultiValueDictionary(Of K, V, LV As {Class, IList(Of V), New})
          Inherits Dictionary(Of K, LV)
          Implements IDictionary(Of K, LV), ICollection(Of KeyValuePair(Of K, LV)), IDictionary, ICollection, IReadOnlyDictionary(Of K, LV), IReadOnlyCollection(Of KeyValuePair(Of K, LV)), IEnumerable(Of KeyValuePair(Of K, LV)), ISerializable, IDeserializationCallback, IEnumerable(Of V), IEnumerable
    typeParameters:
    - id: K
    - id: V
    - id: LV
  inheritance:
  - System.Object
  - System.Collections.Generic.Dictionary{{K},{LV}}
  derivedClasses:
  - Microsoft.Health.InvertedIndex.IndexerDictionary`2
  - Microsoft.Health.PhraseAnalyzer.AnalyzerMatchGroup
  - Microsoft.Health.ValueListDictionary`2
  implements:
  - System.Collections.Generic.IDictionary{{K},{LV}}
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{K},{LV}}}
  - System.Collections.IDictionary
  - System.Collections.ICollection
  - System.Collections.Generic.IReadOnlyDictionary{{K},{LV}}
  - System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{{K},{LV}}}
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{K},{LV}}}
  - System.Runtime.Serialization.ISerializable
  - System.Runtime.Serialization.IDeserializationCallback
  - System.Collections.Generic.IEnumerable{{V}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Collections.Generic.Dictionary{{K},{LV}}.Add({K},{LV})
  - System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{{K},{LV}})
  - System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{{K},{LV}})
  - System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{{K},{LV}})
  - System.Collections.Generic.Dictionary{{K},{LV}}.Clear
  - System.Collections.Generic.Dictionary{{K},{LV}}.ContainsKey({K})
  - System.Collections.Generic.Dictionary{{K},{LV}}.ContainsValue({LV})
  - System.Collections.Generic.Dictionary{{K},{LV}}.GetEnumerator
  - System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
  - System.Collections.Generic.Dictionary{{K},{LV}}.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Collections.Generic.Dictionary{{K},{LV}}.OnDeserialization(System.Object)
  - System.Collections.Generic.Dictionary{{K},{LV}}.Remove({K})
  - System.Collections.Generic.Dictionary{{K},{LV}}.TryGetValue({K},{LV}@)
  - System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{{K},{LV}}[],System.Int32)
  - System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#IDictionary#get_Item(System.Object)
  - System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#IDictionary#set_Item(System.Object,System.Object)
  - System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#IDictionary#Add(System.Object,System.Object)
  - System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#IDictionary#Contains(System.Object)
  - System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#IDictionary#GetEnumerator
  - System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#IDictionary#Remove(System.Object)
  - System.Collections.Generic.Dictionary{{K},{LV}}.Comparer
  - System.Collections.Generic.Dictionary{{K},{LV}}.Count
  - System.Collections.Generic.Dictionary{{K},{LV}}.Keys
  - System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#Generic#IDictionary{TKey,TValue}#Keys
  - System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
  - System.Collections.Generic.Dictionary{{K},{LV}}.Values
  - System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#Generic#IDictionary{TKey,TValue}#Values
  - System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
  - System.Collections.Generic.Dictionary{{K},{LV}}.Item({K})
  - System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  - System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#ICollection#IsSynchronized
  - System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#ICollection#SyncRoot
  - System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#IDictionary#IsFixedSize
  - System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#IDictionary#IsReadOnly
  - System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#IDictionary#Keys
  - System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#IDictionary#Values
  - System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#IDictionary#Item(System.Object)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - Microsoft.Health.MultiValueDictionary`3.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  - System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  nameWithType.vb: MultiValueDictionary(Of K, V, LV)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.Health.MultiValueDictionary(Of K, V, LV)
  name.vb: MultiValueDictionary(Of K, V, LV)
- uid: Microsoft.Health.MultiValueDictionary`3.#ctor
  commentId: M:Microsoft.Health.MultiValueDictionary`3.#ctor
  id: '#ctor'
  parent: Microsoft.Health.MultiValueDictionary`3
  langs:
  - csharp
  - vb
  name: MultiValueDictionary()
  nameWithType: MultiValueDictionary<K, V, LV>.MultiValueDictionary()
  fullName: Microsoft.Health.MultiValueDictionary<K, V, LV>.MultiValueDictionary()
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/ValueListDictionary.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health.Utility/search/ValueListDictionary.cs
    startLine: 30
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public MultiValueDictionary()
    content.vb: Public Sub New
  overload: Microsoft.Health.MultiValueDictionary`3.#ctor*
  nameWithType.vb: MultiValueDictionary(Of K, V, LV).MultiValueDictionary()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.MultiValueDictionary(Of K, V, LV).MultiValueDictionary()
- uid: Microsoft.Health.MultiValueDictionary`3.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:Microsoft.Health.MultiValueDictionary`3.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Collections.Generic.IEqualityComparer{`0})'
  parent: Microsoft.Health.MultiValueDictionary`3
  langs:
  - csharp
  - vb
  name: MultiValueDictionary(IEqualityComparer<K>)
  nameWithType: MultiValueDictionary<K, V, LV>.MultiValueDictionary(IEqualityComparer<K>)
  fullName: Microsoft.Health.MultiValueDictionary<K, V, LV>.MultiValueDictionary(System.Collections.Generic.IEqualityComparer<K>)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/ValueListDictionary.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health.Utility/search/ValueListDictionary.cs
    startLine: 39
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public MultiValueDictionary(IEqualityComparer<K> comparer)
    content.vb: Public Sub New(comparer As IEqualityComparer(Of K))
    parameters:
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{K}}
      description: ''
  overload: Microsoft.Health.MultiValueDictionary`3.#ctor*
  nameWithType.vb: MultiValueDictionary(Of K, V, LV).MultiValueDictionary(IEqualityComparer(Of K))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.MultiValueDictionary(Of K, V, LV).MultiValueDictionary(System.Collections.Generic.IEqualityComparer(Of K))
  name.vb: MultiValueDictionary(IEqualityComparer(Of K))
- uid: Microsoft.Health.MultiValueDictionary`3.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:Microsoft.Health.MultiValueDictionary`3.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})'
  parent: Microsoft.Health.MultiValueDictionary`3
  langs:
  - csharp
  - vb
  name: MultiValueDictionary(Int32, IEqualityComparer<K>)
  nameWithType: MultiValueDictionary<K, V, LV>.MultiValueDictionary(Int32, IEqualityComparer<K>)
  fullName: Microsoft.Health.MultiValueDictionary<K, V, LV>.MultiValueDictionary(System.Int32, System.Collections.Generic.IEqualityComparer<K>)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/ValueListDictionary.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health.Utility/search/ValueListDictionary.cs
    startLine: 49
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public MultiValueDictionary(int capacity, IEqualityComparer<K> comparer)
    content.vb: Public Sub New(capacity As Integer, comparer As IEqualityComparer(Of K))
    parameters:
    - id: capacity
      type: System.Int32
      description: ''
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{K}}
      description: ''
  overload: Microsoft.Health.MultiValueDictionary`3.#ctor*
  nameWithType.vb: MultiValueDictionary(Of K, V, LV).MultiValueDictionary(Int32, IEqualityComparer(Of K))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.MultiValueDictionary(Of K, V, LV).MultiValueDictionary(System.Int32, System.Collections.Generic.IEqualityComparer(Of K))
  name.vb: MultiValueDictionary(Int32, IEqualityComparer(Of K))
- uid: Microsoft.Health.MultiValueDictionary`3.All
  commentId: P:Microsoft.Health.MultiValueDictionary`3.All
  id: All
  parent: Microsoft.Health.MultiValueDictionary`3
  langs:
  - csharp
  - vb
  name: All
  nameWithType: MultiValueDictionary<K, V, LV>.All
  fullName: Microsoft.Health.MultiValueDictionary<K, V, LV>.All
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/ValueListDictionary.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: All
    path: ../Microsoft.Health.Utility/search/ValueListDictionary.cs
    startLine: 57
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public IEnumerable<KeyValuePair<K, LV>> All { get; }
    content.vb: Public ReadOnly Property All As IEnumerable(Of KeyValuePair(Of K, LV))
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{K},{LV}}}
  overload: Microsoft.Health.MultiValueDictionary`3.All*
  nameWithType.vb: MultiValueDictionary(Of K, V, LV).All
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.Health.MultiValueDictionary(Of K, V, LV).All
- uid: Microsoft.Health.MultiValueDictionary`3.Get(`0)
  commentId: M:Microsoft.Health.MultiValueDictionary`3.Get(`0)
  id: Get(`0)
  parent: Microsoft.Health.MultiValueDictionary`3
  langs:
  - csharp
  - vb
  name: Get(K)
  nameWithType: MultiValueDictionary<K, V, LV>.Get(K)
  fullName: Microsoft.Health.MultiValueDictionary<K, V, LV>.Get(K)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/ValueListDictionary.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Get
    path: ../Microsoft.Health.Utility/search/ValueListDictionary.cs
    startLine: 70
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public LV Get(K key)
    content.vb: Public Function Get(key As K) As LV
    parameters:
    - id: key
      type: '{K}'
      description: ''
    return:
      type: '{LV}'
      description: ''
  overload: Microsoft.Health.MultiValueDictionary`3.Get*
  nameWithType.vb: MultiValueDictionary(Of K, V, LV).Get(K)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.MultiValueDictionary(Of K, V, LV).Get(K)
- uid: Microsoft.Health.MultiValueDictionary`3.Add(System.Collections.Generic.IEnumerable{`1},System.Func{`1,`0})
  commentId: M:Microsoft.Health.MultiValueDictionary`3.Add(System.Collections.Generic.IEnumerable{`1},System.Func{`1,`0})
  id: Add(System.Collections.Generic.IEnumerable{`1},System.Func{`1,`0})
  parent: Microsoft.Health.MultiValueDictionary`3
  langs:
  - csharp
  - vb
  name: Add(IEnumerable<V>, Func<V, K>)
  nameWithType: MultiValueDictionary<K, V, LV>.Add(IEnumerable<V>, Func<V, K>)
  fullName: Microsoft.Health.MultiValueDictionary<K, V, LV>.Add(System.Collections.Generic.IEnumerable<V>, System.Func<V, K>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/ValueListDictionary.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Add
    path: ../Microsoft.Health.Utility/search/ValueListDictionary.cs
    startLine: 88
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public void Add(IEnumerable<V> values, Func<V, K> getKey)
    content.vb: Public Sub Add(values As IEnumerable(Of V), getKey As Func(Of V, K))
    parameters:
    - id: values
      type: System.Collections.Generic.IEnumerable{{V}}
      description: ''
    - id: getKey
      type: System.Func{{V},{K}}
      description: ''
  overload: Microsoft.Health.MultiValueDictionary`3.Add*
  nameWithType.vb: MultiValueDictionary(Of K, V, LV).Add(IEnumerable(Of V), Func(Of V, K))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.MultiValueDictionary(Of K, V, LV).Add(System.Collections.Generic.IEnumerable(Of V), System.Func(Of V, K))
  name.vb: Add(IEnumerable(Of V), Func(Of V, K))
- uid: Microsoft.Health.MultiValueDictionary`3.Add(`0,`1)
  commentId: M:Microsoft.Health.MultiValueDictionary`3.Add(`0,`1)
  id: Add(`0,`1)
  parent: Microsoft.Health.MultiValueDictionary`3
  langs:
  - csharp
  - vb
  name: Add(K, V)
  nameWithType: MultiValueDictionary<K, V, LV>.Add(K, V)
  fullName: Microsoft.Health.MultiValueDictionary<K, V, LV>.Add(K, V)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/ValueListDictionary.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Add
    path: ../Microsoft.Health.Utility/search/ValueListDictionary.cs
    startLine: 106
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public void Add(K key, V value)
    content.vb: Public Sub Add(key As K, value As V)
    parameters:
    - id: key
      type: '{K}'
      description: ''
    - id: value
      type: '{V}'
      description: ''
  overload: Microsoft.Health.MultiValueDictionary`3.Add*
  nameWithType.vb: MultiValueDictionary(Of K, V, LV).Add(K, V)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.MultiValueDictionary(Of K, V, LV).Add(K, V)
- uid: Microsoft.Health.MultiValueDictionary`3.Add(System.Collections.Generic.KeyValuePair{`0,`1})
  commentId: M:Microsoft.Health.MultiValueDictionary`3.Add(System.Collections.Generic.KeyValuePair{`0,`1})
  id: Add(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: Microsoft.Health.MultiValueDictionary`3
  langs:
  - csharp
  - vb
  name: Add(KeyValuePair<K, V>)
  nameWithType: MultiValueDictionary<K, V, LV>.Add(KeyValuePair<K, V>)
  fullName: Microsoft.Health.MultiValueDictionary<K, V, LV>.Add(System.Collections.Generic.KeyValuePair<K, V>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/ValueListDictionary.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Add
    path: ../Microsoft.Health.Utility/search/ValueListDictionary.cs
    startLine: 116
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public void Add(KeyValuePair<K, V> kv)
    content.vb: Public Sub Add(kv As KeyValuePair(Of K, V))
    parameters:
    - id: kv
      type: System.Collections.Generic.KeyValuePair{{K},{V}}
      description: ''
  overload: Microsoft.Health.MultiValueDictionary`3.Add*
  nameWithType.vb: MultiValueDictionary(Of K, V, LV).Add(KeyValuePair(Of K, V))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.MultiValueDictionary(Of K, V, LV).Add(System.Collections.Generic.KeyValuePair(Of K, V))
  name.vb: Add(KeyValuePair(Of K, V))
- uid: Microsoft.Health.MultiValueDictionary`3.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  commentId: M:Microsoft.Health.MultiValueDictionary`3.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  id: Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  parent: Microsoft.Health.MultiValueDictionary`3
  langs:
  - csharp
  - vb
  name: Add(IEnumerable<KeyValuePair<K, V>>)
  nameWithType: MultiValueDictionary<K, V, LV>.Add(IEnumerable<KeyValuePair<K, V>>)
  fullName: Microsoft.Health.MultiValueDictionary<K, V, LV>.Add(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<K, V>>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/ValueListDictionary.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Add
    path: ../Microsoft.Health.Utility/search/ValueListDictionary.cs
    startLine: 125
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public void Add(IEnumerable<KeyValuePair<K, V>> keyValues)
    content.vb: Public Sub Add(keyValues As IEnumerable(Of KeyValuePair(Of K, V)))
    parameters:
    - id: keyValues
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{K},{V}}}
      description: ''
  overload: Microsoft.Health.MultiValueDictionary`3.Add*
  nameWithType.vb: MultiValueDictionary(Of K, V, LV).Add(IEnumerable(Of KeyValuePair(Of K, V)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.MultiValueDictionary(Of K, V, LV).Add(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of K, V)))
  name.vb: Add(IEnumerable(Of KeyValuePair(Of K, V)))
- uid: Microsoft.Health.MultiValueDictionary`3.Remove(`0,`1)
  commentId: M:Microsoft.Health.MultiValueDictionary`3.Remove(`0,`1)
  id: Remove(`0,`1)
  parent: Microsoft.Health.MultiValueDictionary`3
  langs:
  - csharp
  - vb
  name: Remove(K, V)
  nameWithType: MultiValueDictionary<K, V, LV>.Remove(K, V)
  fullName: Microsoft.Health.MultiValueDictionary<K, V, LV>.Remove(K, V)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/ValueListDictionary.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Remove
    path: ../Microsoft.Health.Utility/search/ValueListDictionary.cs
    startLine: 143
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public void Remove(K key, V value)
    content.vb: Public Sub Remove(key As K, value As V)
    parameters:
    - id: key
      type: '{K}'
      description: ''
    - id: value
      type: '{V}'
      description: ''
  overload: Microsoft.Health.MultiValueDictionary`3.Remove*
  nameWithType.vb: MultiValueDictionary(Of K, V, LV).Remove(K, V)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.MultiValueDictionary(Of K, V, LV).Remove(K, V)
- uid: Microsoft.Health.MultiValueDictionary`3.GetEnumerator
  commentId: M:Microsoft.Health.MultiValueDictionary`3.GetEnumerator
  id: GetEnumerator
  parent: Microsoft.Health.MultiValueDictionary`3
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: MultiValueDictionary<K, V, LV>.GetEnumerator()
  fullName: Microsoft.Health.MultiValueDictionary<K, V, LV>.GetEnumerator()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/ValueListDictionary.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetEnumerator
    path: ../Microsoft.Health.Utility/search/ValueListDictionary.cs
    startLine: 156
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public IEnumerator<V> GetEnumerator()
    content.vb: Public Function GetEnumerator As IEnumerator(Of V)
    return:
      type: System.Collections.Generic.IEnumerator{{V}}
      description: ''
  overload: Microsoft.Health.MultiValueDictionary`3.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{{V}}.GetEnumerator
  nameWithType.vb: MultiValueDictionary(Of K, V, LV).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.MultiValueDictionary(Of K, V, LV).GetEnumerator()
- uid: Microsoft.Health.MultiValueDictionary`3.NewList
  commentId: M:Microsoft.Health.MultiValueDictionary`3.NewList
  id: NewList
  parent: Microsoft.Health.MultiValueDictionary`3
  langs:
  - csharp
  - vb
  name: NewList()
  nameWithType: MultiValueDictionary<K, V, LV>.NewList()
  fullName: Microsoft.Health.MultiValueDictionary<K, V, LV>.NewList()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/ValueListDictionary.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: NewList
    path: ../Microsoft.Health.Utility/search/ValueListDictionary.cs
    startLine: 171
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: protected virtual LV NewList()
    content.vb: Protected Overridable Function NewList As LV
    return:
      type: '{LV}'
      description: ''
  overload: Microsoft.Health.MultiValueDictionary`3.NewList*
  nameWithType.vb: MultiValueDictionary(Of K, V, LV).NewList()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.Health.MultiValueDictionary(Of K, V, LV).NewList()
references:
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.Dictionary{{K},{LV}}
  commentId: T:System.Collections.Generic.Dictionary{`0,`2}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<K, LV>
  nameWithType: Dictionary<K, LV>
  fullName: System.Collections.Generic.Dictionary<K, LV>
  nameWithType.vb: Dictionary(Of K, LV)
  fullName.vb: System.Collections.Generic.Dictionary(Of K, LV)
  name.vb: Dictionary(Of K, LV)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: LV
    nameWithType: LV
    fullName: LV
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: LV
    nameWithType: LV
    fullName: LV
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{{K},{LV}}
  commentId: T:System.Collections.Generic.IDictionary{`0,`2}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<K, LV>
  nameWithType: IDictionary<K, LV>
  fullName: System.Collections.Generic.IDictionary<K, LV>
  nameWithType.vb: IDictionary(Of K, LV)
  fullName.vb: System.Collections.Generic.IDictionary(Of K, LV)
  name.vb: IDictionary(Of K, LV)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: LV
    nameWithType: LV
    fullName: LV
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: LV
    nameWithType: LV
    fullName: LV
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{K},{LV}}}
  commentId: T:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`2}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<KeyValuePair<K, LV>>
  nameWithType: ICollection<KeyValuePair<K, LV>>
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<K, LV>>
  nameWithType.vb: ICollection(Of KeyValuePair(Of K, LV))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of K, LV))
  name.vb: ICollection(Of KeyValuePair(Of K, LV))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: LV
    nameWithType: LV
    fullName: LV
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: LV
    nameWithType: LV
    fullName: LV
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IDictionary
  commentId: T:System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.Generic.IReadOnlyDictionary{{K},{LV}}
  commentId: T:System.Collections.Generic.IReadOnlyDictionary{`0,`2}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyDictionary`2
  name: IReadOnlyDictionary<K, LV>
  nameWithType: IReadOnlyDictionary<K, LV>
  fullName: System.Collections.Generic.IReadOnlyDictionary<K, LV>
  nameWithType.vb: IReadOnlyDictionary(Of K, LV)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of K, LV)
  name.vb: IReadOnlyDictionary(Of K, LV)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: LV
    nameWithType: LV
    fullName: LV
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: LV
    nameWithType: LV
    fullName: LV
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{{K},{LV}}}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{`0,`2}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<KeyValuePair<K, LV>>
  nameWithType: IReadOnlyCollection<KeyValuePair<K, LV>>
  fullName: System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<K, LV>>
  nameWithType.vb: IReadOnlyCollection(Of KeyValuePair(Of K, LV))
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of System.Collections.Generic.KeyValuePair(Of K, LV))
  name.vb: IReadOnlyCollection(Of KeyValuePair(Of K, LV))
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: LV
    nameWithType: LV
    fullName: LV
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: LV
    nameWithType: LV
    fullName: LV
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{K},{LV}}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`2}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<K, LV>>
  nameWithType: IEnumerable<KeyValuePair<K, LV>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<K, LV>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of K, LV))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of K, LV))
  name.vb: IEnumerable(Of KeyValuePair(Of K, LV))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: LV
    nameWithType: LV
    fullName: LV
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: LV
    nameWithType: LV
    fullName: LV
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.Serialization.ISerializable
  commentId: T:System.Runtime.Serialization.ISerializable
  parent: System.Runtime.Serialization
  isExternal: true
  name: ISerializable
  nameWithType: ISerializable
  fullName: System.Runtime.Serialization.ISerializable
- uid: System.Runtime.Serialization.IDeserializationCallback
  commentId: T:System.Runtime.Serialization.IDeserializationCallback
  parent: System.Runtime.Serialization
  isExternal: true
  name: IDeserializationCallback
  nameWithType: IDeserializationCallback
  fullName: System.Runtime.Serialization.IDeserializationCallback
- uid: System.Collections.Generic.IEnumerable{{V}}
  commentId: T:System.Collections.Generic.IEnumerable{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<V>
  nameWithType: IEnumerable<V>
  fullName: System.Collections.Generic.IEnumerable<V>
  nameWithType.vb: IEnumerable(Of V)
  fullName.vb: System.Collections.Generic.IEnumerable(Of V)
  name.vb: IEnumerable(Of V)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.Generic.Dictionary{{K},{LV}}.Add({K},{LV})
  commentId: M:System.Collections.Generic.Dictionary{`0,`2}.Add(`0,`2)
  parent: System.Collections.Generic.Dictionary{{K},{LV}}
  definition: System.Collections.Generic.Dictionary`2.Add(`0,`1)
  name: Add(K, LV)
  nameWithType: Dictionary<K, LV>.Add(K, LV)
  fullName: System.Collections.Generic.Dictionary<K, LV>.Add(K, LV)
  nameWithType.vb: Dictionary(Of K, LV).Add(K, LV)
  fullName.vb: System.Collections.Generic.Dictionary(Of K, LV).Add(K, LV)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.Add(`0,`1)
    name: Add
    nameWithType: Dictionary<K, LV>.Add
    fullName: System.Collections.Generic.Dictionary<K, LV>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: LV
    nameWithType: LV
    fullName: LV
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.Add(`0,`1)
    name: Add
    nameWithType: Dictionary(Of K, LV).Add
    fullName: System.Collections.Generic.Dictionary(Of K, LV).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: LV
    nameWithType: LV
    fullName: LV
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{{K},{LV}})
  commentId: M:System.Collections.Generic.Dictionary{`0,`2}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`2})
  parent: System.Collections.Generic.Dictionary{{K},{LV}}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
  name: ICollection<KeyValuePair<K, LV>>.Add(KeyValuePair<K, LV>)
  nameWithType: Dictionary<K, LV>.ICollection<KeyValuePair<K, LV>>.Add(KeyValuePair<K, LV>)
  fullName: System.Collections.Generic.Dictionary<K, LV>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<K, LV>>.Add(System.Collections.Generic.KeyValuePair<K, LV>)
  nameWithType.vb: Dictionary(Of K, LV).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair(Of K, LV))
  fullName.vb: System.Collections.Generic.Dictionary(Of K, LV).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(System.Collections.Generic.KeyValuePair(Of K, LV))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair(Of K, LV))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
    name: ICollection<KeyValuePair<K, LV>>.Add
    nameWithType: Dictionary<K, LV>.ICollection<KeyValuePair<K, LV>>.Add
    fullName: System.Collections.Generic.Dictionary<K, LV>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<K, LV>>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: LV
    nameWithType: LV
    fullName: LV
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
    name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
    nameWithType: Dictionary(Of K, LV).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
    fullName: System.Collections.Generic.Dictionary(Of K, LV).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: LV
    nameWithType: LV
    fullName: LV
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{{K},{LV}})
  commentId: M:System.Collections.Generic.Dictionary{`0,`2}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`2})
  parent: System.Collections.Generic.Dictionary{{K},{LV}}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  name: ICollection<KeyValuePair<K, LV>>.Contains(KeyValuePair<K, LV>)
  nameWithType: Dictionary<K, LV>.ICollection<KeyValuePair<K, LV>>.Contains(KeyValuePair<K, LV>)
  fullName: System.Collections.Generic.Dictionary<K, LV>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<K, LV>>.Contains(System.Collections.Generic.KeyValuePair<K, LV>)
  nameWithType.vb: Dictionary(Of K, LV).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair(Of K, LV))
  fullName.vb: System.Collections.Generic.Dictionary(Of K, LV).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(System.Collections.Generic.KeyValuePair(Of K, LV))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair(Of K, LV))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
    name: ICollection<KeyValuePair<K, LV>>.Contains
    nameWithType: Dictionary<K, LV>.ICollection<KeyValuePair<K, LV>>.Contains
    fullName: System.Collections.Generic.Dictionary<K, LV>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<K, LV>>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: LV
    nameWithType: LV
    fullName: LV
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
    name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
    nameWithType: Dictionary(Of K, LV).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
    fullName: System.Collections.Generic.Dictionary(Of K, LV).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: LV
    nameWithType: LV
    fullName: LV
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{{K},{LV}})
  commentId: M:System.Collections.Generic.Dictionary{`0,`2}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`2})
  parent: System.Collections.Generic.Dictionary{{K},{LV}}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  name: ICollection<KeyValuePair<K, LV>>.Remove(KeyValuePair<K, LV>)
  nameWithType: Dictionary<K, LV>.ICollection<KeyValuePair<K, LV>>.Remove(KeyValuePair<K, LV>)
  fullName: System.Collections.Generic.Dictionary<K, LV>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<K, LV>>.Remove(System.Collections.Generic.KeyValuePair<K, LV>)
  nameWithType.vb: Dictionary(Of K, LV).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair(Of K, LV))
  fullName.vb: System.Collections.Generic.Dictionary(Of K, LV).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(System.Collections.Generic.KeyValuePair(Of K, LV))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair(Of K, LV))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
    name: ICollection<KeyValuePair<K, LV>>.Remove
    nameWithType: Dictionary<K, LV>.ICollection<KeyValuePair<K, LV>>.Remove
    fullName: System.Collections.Generic.Dictionary<K, LV>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<K, LV>>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: LV
    nameWithType: LV
    fullName: LV
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
    name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
    nameWithType: Dictionary(Of K, LV).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
    fullName: System.Collections.Generic.Dictionary(Of K, LV).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: LV
    nameWithType: LV
    fullName: LV
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{{K},{LV}}.Clear
  commentId: M:System.Collections.Generic.Dictionary{`0,`2}.Clear
  parent: System.Collections.Generic.Dictionary{{K},{LV}}
  definition: System.Collections.Generic.Dictionary`2.Clear
  name: Clear()
  nameWithType: Dictionary<K, LV>.Clear()
  fullName: System.Collections.Generic.Dictionary<K, LV>.Clear()
  nameWithType.vb: Dictionary(Of K, LV).Clear()
  fullName.vb: System.Collections.Generic.Dictionary(Of K, LV).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.Clear
    name: Clear
    nameWithType: Dictionary<K, LV>.Clear
    fullName: System.Collections.Generic.Dictionary<K, LV>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.Clear
    name: Clear
    nameWithType: Dictionary(Of K, LV).Clear
    fullName: System.Collections.Generic.Dictionary(Of K, LV).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{{K},{LV}}.ContainsKey({K})
  commentId: M:System.Collections.Generic.Dictionary{`0,`2}.ContainsKey(`0)
  parent: System.Collections.Generic.Dictionary{{K},{LV}}
  definition: System.Collections.Generic.Dictionary`2.ContainsKey(`0)
  name: ContainsKey(K)
  nameWithType: Dictionary<K, LV>.ContainsKey(K)
  fullName: System.Collections.Generic.Dictionary<K, LV>.ContainsKey(K)
  nameWithType.vb: Dictionary(Of K, LV).ContainsKey(K)
  fullName.vb: System.Collections.Generic.Dictionary(Of K, LV).ContainsKey(K)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: Dictionary<K, LV>.ContainsKey
    fullName: System.Collections.Generic.Dictionary<K, LV>.ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: Dictionary(Of K, LV).ContainsKey
    fullName: System.Collections.Generic.Dictionary(Of K, LV).ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{{K},{LV}}.ContainsValue({LV})
  commentId: M:System.Collections.Generic.Dictionary{`0,`2}.ContainsValue(`2)
  parent: System.Collections.Generic.Dictionary{{K},{LV}}
  definition: System.Collections.Generic.Dictionary`2.ContainsValue(`1)
  name: ContainsValue(LV)
  nameWithType: Dictionary<K, LV>.ContainsValue(LV)
  fullName: System.Collections.Generic.Dictionary<K, LV>.ContainsValue(LV)
  nameWithType.vb: Dictionary(Of K, LV).ContainsValue(LV)
  fullName.vb: System.Collections.Generic.Dictionary(Of K, LV).ContainsValue(LV)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.ContainsValue(`1)
    name: ContainsValue
    nameWithType: Dictionary<K, LV>.ContainsValue
    fullName: System.Collections.Generic.Dictionary<K, LV>.ContainsValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: LV
    nameWithType: LV
    fullName: LV
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.ContainsValue(`1)
    name: ContainsValue
    nameWithType: Dictionary(Of K, LV).ContainsValue
    fullName: System.Collections.Generic.Dictionary(Of K, LV).ContainsValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: LV
    nameWithType: LV
    fullName: LV
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{{K},{LV}}.GetEnumerator
  commentId: M:System.Collections.Generic.Dictionary{`0,`2}.GetEnumerator
  parent: System.Collections.Generic.Dictionary{{K},{LV}}
  definition: System.Collections.Generic.Dictionary`2.GetEnumerator
  name: GetEnumerator()
  nameWithType: Dictionary<K, LV>.GetEnumerator()
  fullName: System.Collections.Generic.Dictionary<K, LV>.GetEnumerator()
  nameWithType.vb: Dictionary(Of K, LV).GetEnumerator()
  fullName.vb: System.Collections.Generic.Dictionary(Of K, LV).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.GetEnumerator
    name: GetEnumerator
    nameWithType: Dictionary<K, LV>.GetEnumerator
    fullName: System.Collections.Generic.Dictionary<K, LV>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.GetEnumerator
    name: GetEnumerator
    nameWithType: Dictionary(Of K, LV).GetEnumerator
    fullName: System.Collections.Generic.Dictionary(Of K, LV).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
  commentId: M:System.Collections.Generic.Dictionary{`0,`2}.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
  parent: System.Collections.Generic.Dictionary{{K},{LV}}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
  name: IEnumerable<KeyValuePair<K, LV>>.GetEnumerator()
  nameWithType: Dictionary<K, LV>.IEnumerable<KeyValuePair<K, LV>>.GetEnumerator()
  fullName: System.Collections.Generic.Dictionary<K, LV>.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<K, LV>>.GetEnumerator()
  nameWithType.vb: Dictionary(Of K, LV).System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator()
  fullName.vb: System.Collections.Generic.Dictionary(Of K, LV).System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
    name: IEnumerable<KeyValuePair<K, LV>>.GetEnumerator
    nameWithType: Dictionary<K, LV>.IEnumerable<KeyValuePair<K, LV>>.GetEnumerator
    fullName: System.Collections.Generic.Dictionary<K, LV>.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<K, LV>>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
    name: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator
    nameWithType: Dictionary(Of K, LV).System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator
    fullName: System.Collections.Generic.Dictionary(Of K, LV).System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{{K},{LV}}.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:System.Collections.Generic.Dictionary{`0,`2}.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Generic.Dictionary{{K},{LV}}
  definition: System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  name: GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: Dictionary<K, LV>.GetObjectData(SerializationInfo, StreamingContext)
  fullName: System.Collections.Generic.Dictionary<K, LV>.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  nameWithType.vb: Dictionary(Of K, LV).GetObjectData(SerializationInfo, StreamingContext)
  fullName.vb: System.Collections.Generic.Dictionary(Of K, LV).GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: Dictionary<K, LV>.GetObjectData
    fullName: System.Collections.Generic.Dictionary<K, LV>.GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: Dictionary(Of K, LV).GetObjectData
    fullName: System.Collections.Generic.Dictionary(Of K, LV).GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{{K},{LV}}.OnDeserialization(System.Object)
  commentId: M:System.Collections.Generic.Dictionary{`0,`2}.OnDeserialization(System.Object)
  parent: System.Collections.Generic.Dictionary{{K},{LV}}
  definition: System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)
  name: OnDeserialization(Object)
  nameWithType: Dictionary<K, LV>.OnDeserialization(Object)
  fullName: System.Collections.Generic.Dictionary<K, LV>.OnDeserialization(System.Object)
  nameWithType.vb: Dictionary(Of K, LV).OnDeserialization(Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of K, LV).OnDeserialization(System.Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)
    name: OnDeserialization
    nameWithType: Dictionary<K, LV>.OnDeserialization
    fullName: System.Collections.Generic.Dictionary<K, LV>.OnDeserialization
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)
    name: OnDeserialization
    nameWithType: Dictionary(Of K, LV).OnDeserialization
    fullName: System.Collections.Generic.Dictionary(Of K, LV).OnDeserialization
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{{K},{LV}}.Remove({K})
  commentId: M:System.Collections.Generic.Dictionary{`0,`2}.Remove(`0)
  parent: System.Collections.Generic.Dictionary{{K},{LV}}
  definition: System.Collections.Generic.Dictionary`2.Remove(`0)
  name: Remove(K)
  nameWithType: Dictionary<K, LV>.Remove(K)
  fullName: System.Collections.Generic.Dictionary<K, LV>.Remove(K)
  nameWithType.vb: Dictionary(Of K, LV).Remove(K)
  fullName.vb: System.Collections.Generic.Dictionary(Of K, LV).Remove(K)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.Remove(`0)
    name: Remove
    nameWithType: Dictionary<K, LV>.Remove
    fullName: System.Collections.Generic.Dictionary<K, LV>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.Remove(`0)
    name: Remove
    nameWithType: Dictionary(Of K, LV).Remove
    fullName: System.Collections.Generic.Dictionary(Of K, LV).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{{K},{LV}}.TryGetValue({K},{LV}@)
  commentId: M:System.Collections.Generic.Dictionary{`0,`2}.TryGetValue(`0,`2@)
  parent: System.Collections.Generic.Dictionary{{K},{LV}}
  definition: System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)
  name: TryGetValue(K, LV)
  nameWithType: Dictionary<K, LV>.TryGetValue(K, LV)
  fullName: System.Collections.Generic.Dictionary<K, LV>.TryGetValue(K, LV)
  nameWithType.vb: Dictionary(Of K, LV).TryGetValue(K, LV)
  fullName.vb: System.Collections.Generic.Dictionary(Of K, LV).TryGetValue(K, LV)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: Dictionary<K, LV>.TryGetValue
    fullName: System.Collections.Generic.Dictionary<K, LV>.TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: LV
    nameWithType: LV
    fullName: LV
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: Dictionary(Of K, LV).TryGetValue
    fullName: System.Collections.Generic.Dictionary(Of K, LV).TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: LV
    nameWithType: LV
    fullName: LV
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{{K},{LV}}[],System.Int32)
  commentId: M:System.Collections.Generic.Dictionary{`0,`2}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`2}[],System.Int32)
  parent: System.Collections.Generic.Dictionary{{K},{LV}}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  name: ICollection<KeyValuePair<K, LV>>.CopyTo(KeyValuePair<K, LV>[], Int32)
  nameWithType: Dictionary<K, LV>.ICollection<KeyValuePair<K, LV>>.CopyTo(KeyValuePair<K, LV>[], Int32)
  fullName: System.Collections.Generic.Dictionary<K, LV>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<K, LV>>.CopyTo(System.Collections.Generic.KeyValuePair<K, LV>[], System.Int32)
  nameWithType.vb: Dictionary(Of K, LV).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair(Of K, LV)(), Int32)
  fullName.vb: System.Collections.Generic.Dictionary(Of K, LV).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(System.Collections.Generic.KeyValuePair(Of K, LV)(), System.Int32)
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair(Of K, LV)(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
    name: ICollection<KeyValuePair<K, LV>>.CopyTo
    nameWithType: Dictionary<K, LV>.ICollection<KeyValuePair<K, LV>>.CopyTo
    fullName: System.Collections.Generic.Dictionary<K, LV>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<K, LV>>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: LV
    nameWithType: LV
    fullName: LV
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
    name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
    nameWithType: Dictionary(Of K, LV).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
    fullName: System.Collections.Generic.Dictionary(Of K, LV).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: LV
    nameWithType: LV
    fullName: LV
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.Generic.Dictionary{`0,`2}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Generic.Dictionary{{K},{LV}}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: Dictionary<K, LV>.ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.Generic.Dictionary<K, LV>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  nameWithType.vb: Dictionary(Of K, LV).System.Collections.ICollection.CopyTo(Array, Int32)
  fullName.vb: System.Collections.Generic.Dictionary(Of K, LV).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: ICollection.CopyTo
    nameWithType: Dictionary<K, LV>.ICollection.CopyTo
    fullName: System.Collections.Generic.Dictionary<K, LV>.System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: System.Collections.ICollection.CopyTo
    nameWithType: Dictionary(Of K, LV).System.Collections.ICollection.CopyTo
    fullName: System.Collections.Generic.Dictionary(Of K, LV).System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.Generic.Dictionary{`0,`2}.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Generic.Dictionary{{K},{LV}}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator()
  nameWithType: Dictionary<K, LV>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.Dictionary<K, LV>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: Dictionary(Of K, LV).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.Generic.Dictionary(Of K, LV).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: Dictionary<K, LV>.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.Dictionary<K, LV>.System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: Dictionary(Of K, LV).System.Collections.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.Dictionary(Of K, LV).System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#IDictionary#get_Item(System.Object)
  commentId: M:System.Collections.Generic.Dictionary{`0,`2}.System#Collections#IDictionary#get_Item(System.Object)
  parent: System.Collections.Generic.Dictionary{{K},{LV}}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#get_Item(System.Object)
  name: IDictionary.get_Item(Object)
  nameWithType: Dictionary<K, LV>.IDictionary.get_Item(Object)
  fullName: System.Collections.Generic.Dictionary<K, LV>.System.Collections.IDictionary.get_Item(System.Object)
  nameWithType.vb: Dictionary(Of K, LV).System.Collections.IDictionary.get_Item(Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of K, LV).System.Collections.IDictionary.get_Item(System.Object)
  name.vb: System.Collections.IDictionary.get_Item(Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#get_Item(System.Object)
    name: IDictionary.get_Item
    nameWithType: Dictionary<K, LV>.IDictionary.get_Item
    fullName: System.Collections.Generic.Dictionary<K, LV>.System.Collections.IDictionary.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#get_Item(System.Object)
    name: System.Collections.IDictionary.get_Item
    nameWithType: Dictionary(Of K, LV).System.Collections.IDictionary.get_Item
    fullName: System.Collections.Generic.Dictionary(Of K, LV).System.Collections.IDictionary.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#IDictionary#set_Item(System.Object,System.Object)
  commentId: M:System.Collections.Generic.Dictionary{`0,`2}.System#Collections#IDictionary#set_Item(System.Object,System.Object)
  parent: System.Collections.Generic.Dictionary{{K},{LV}}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#set_Item(System.Object,System.Object)
  name: IDictionary.set_Item(Object, Object)
  nameWithType: Dictionary<K, LV>.IDictionary.set_Item(Object, Object)
  fullName: System.Collections.Generic.Dictionary<K, LV>.System.Collections.IDictionary.set_Item(System.Object, System.Object)
  nameWithType.vb: Dictionary(Of K, LV).System.Collections.IDictionary.set_Item(Object, Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of K, LV).System.Collections.IDictionary.set_Item(System.Object, System.Object)
  name.vb: System.Collections.IDictionary.set_Item(Object, Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#set_Item(System.Object,System.Object)
    name: IDictionary.set_Item
    nameWithType: Dictionary<K, LV>.IDictionary.set_Item
    fullName: System.Collections.Generic.Dictionary<K, LV>.System.Collections.IDictionary.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#set_Item(System.Object,System.Object)
    name: System.Collections.IDictionary.set_Item
    nameWithType: Dictionary(Of K, LV).System.Collections.IDictionary.set_Item
    fullName: System.Collections.Generic.Dictionary(Of K, LV).System.Collections.IDictionary.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#IDictionary#Add(System.Object,System.Object)
  commentId: M:System.Collections.Generic.Dictionary{`0,`2}.System#Collections#IDictionary#Add(System.Object,System.Object)
  parent: System.Collections.Generic.Dictionary{{K},{LV}}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)
  name: IDictionary.Add(Object, Object)
  nameWithType: Dictionary<K, LV>.IDictionary.Add(Object, Object)
  fullName: System.Collections.Generic.Dictionary<K, LV>.System.Collections.IDictionary.Add(System.Object, System.Object)
  nameWithType.vb: Dictionary(Of K, LV).System.Collections.IDictionary.Add(Object, Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of K, LV).System.Collections.IDictionary.Add(System.Object, System.Object)
  name.vb: System.Collections.IDictionary.Add(Object, Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)
    name: IDictionary.Add
    nameWithType: Dictionary<K, LV>.IDictionary.Add
    fullName: System.Collections.Generic.Dictionary<K, LV>.System.Collections.IDictionary.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)
    name: System.Collections.IDictionary.Add
    nameWithType: Dictionary(Of K, LV).System.Collections.IDictionary.Add
    fullName: System.Collections.Generic.Dictionary(Of K, LV).System.Collections.IDictionary.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#IDictionary#Contains(System.Object)
  commentId: M:System.Collections.Generic.Dictionary{`0,`2}.System#Collections#IDictionary#Contains(System.Object)
  parent: System.Collections.Generic.Dictionary{{K},{LV}}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)
  name: IDictionary.Contains(Object)
  nameWithType: Dictionary<K, LV>.IDictionary.Contains(Object)
  fullName: System.Collections.Generic.Dictionary<K, LV>.System.Collections.IDictionary.Contains(System.Object)
  nameWithType.vb: Dictionary(Of K, LV).System.Collections.IDictionary.Contains(Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of K, LV).System.Collections.IDictionary.Contains(System.Object)
  name.vb: System.Collections.IDictionary.Contains(Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)
    name: IDictionary.Contains
    nameWithType: Dictionary<K, LV>.IDictionary.Contains
    fullName: System.Collections.Generic.Dictionary<K, LV>.System.Collections.IDictionary.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)
    name: System.Collections.IDictionary.Contains
    nameWithType: Dictionary(Of K, LV).System.Collections.IDictionary.Contains
    fullName: System.Collections.Generic.Dictionary(Of K, LV).System.Collections.IDictionary.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#IDictionary#GetEnumerator
  commentId: M:System.Collections.Generic.Dictionary{`0,`2}.System#Collections#IDictionary#GetEnumerator
  parent: System.Collections.Generic.Dictionary{{K},{LV}}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator
  name: IDictionary.GetEnumerator()
  nameWithType: Dictionary<K, LV>.IDictionary.GetEnumerator()
  fullName: System.Collections.Generic.Dictionary<K, LV>.System.Collections.IDictionary.GetEnumerator()
  nameWithType.vb: Dictionary(Of K, LV).System.Collections.IDictionary.GetEnumerator()
  fullName.vb: System.Collections.Generic.Dictionary(Of K, LV).System.Collections.IDictionary.GetEnumerator()
  name.vb: System.Collections.IDictionary.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator
    name: IDictionary.GetEnumerator
    nameWithType: Dictionary<K, LV>.IDictionary.GetEnumerator
    fullName: System.Collections.Generic.Dictionary<K, LV>.System.Collections.IDictionary.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator
    name: System.Collections.IDictionary.GetEnumerator
    nameWithType: Dictionary(Of K, LV).System.Collections.IDictionary.GetEnumerator
    fullName: System.Collections.Generic.Dictionary(Of K, LV).System.Collections.IDictionary.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#IDictionary#Remove(System.Object)
  commentId: M:System.Collections.Generic.Dictionary{`0,`2}.System#Collections#IDictionary#Remove(System.Object)
  parent: System.Collections.Generic.Dictionary{{K},{LV}}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)
  name: IDictionary.Remove(Object)
  nameWithType: Dictionary<K, LV>.IDictionary.Remove(Object)
  fullName: System.Collections.Generic.Dictionary<K, LV>.System.Collections.IDictionary.Remove(System.Object)
  nameWithType.vb: Dictionary(Of K, LV).System.Collections.IDictionary.Remove(Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of K, LV).System.Collections.IDictionary.Remove(System.Object)
  name.vb: System.Collections.IDictionary.Remove(Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)
    name: IDictionary.Remove
    nameWithType: Dictionary<K, LV>.IDictionary.Remove
    fullName: System.Collections.Generic.Dictionary<K, LV>.System.Collections.IDictionary.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)
    name: System.Collections.IDictionary.Remove
    nameWithType: Dictionary(Of K, LV).System.Collections.IDictionary.Remove
    fullName: System.Collections.Generic.Dictionary(Of K, LV).System.Collections.IDictionary.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{{K},{LV}}.Comparer
  commentId: P:System.Collections.Generic.Dictionary{`0,`2}.Comparer
  parent: System.Collections.Generic.Dictionary{{K},{LV}}
  definition: System.Collections.Generic.Dictionary`2.Comparer
  name: Comparer
  nameWithType: Dictionary<K, LV>.Comparer
  fullName: System.Collections.Generic.Dictionary<K, LV>.Comparer
  nameWithType.vb: Dictionary(Of K, LV).Comparer
  fullName.vb: System.Collections.Generic.Dictionary(Of K, LV).Comparer
- uid: System.Collections.Generic.Dictionary{{K},{LV}}.Count
  commentId: P:System.Collections.Generic.Dictionary{`0,`2}.Count
  parent: System.Collections.Generic.Dictionary{{K},{LV}}
  definition: System.Collections.Generic.Dictionary`2.Count
  name: Count
  nameWithType: Dictionary<K, LV>.Count
  fullName: System.Collections.Generic.Dictionary<K, LV>.Count
  nameWithType.vb: Dictionary(Of K, LV).Count
  fullName.vb: System.Collections.Generic.Dictionary(Of K, LV).Count
- uid: System.Collections.Generic.Dictionary{{K},{LV}}.Keys
  commentId: P:System.Collections.Generic.Dictionary{`0,`2}.Keys
  parent: System.Collections.Generic.Dictionary{{K},{LV}}
  definition: System.Collections.Generic.Dictionary`2.Keys
  name: Keys
  nameWithType: Dictionary<K, LV>.Keys
  fullName: System.Collections.Generic.Dictionary<K, LV>.Keys
  nameWithType.vb: Dictionary(Of K, LV).Keys
  fullName.vb: System.Collections.Generic.Dictionary(Of K, LV).Keys
- uid: System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#Generic#IDictionary{TKey,TValue}#Keys
  commentId: P:System.Collections.Generic.Dictionary{`0,`2}.System#Collections#Generic#IDictionary{TKey,TValue}#Keys
  parent: System.Collections.Generic.Dictionary{{K},{LV}}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Keys
  name: IDictionary<K, LV>.Keys
  nameWithType: Dictionary<K, LV>.IDictionary<K, LV>.Keys
  fullName: System.Collections.Generic.Dictionary<K, LV>.System.Collections.Generic.IDictionary<K, LV>.Keys
  nameWithType.vb: Dictionary(Of K, LV).System.Collections.Generic.IDictionary<TKey,TValue>.Keys
  fullName.vb: System.Collections.Generic.Dictionary(Of K, LV).System.Collections.Generic.IDictionary<TKey,TValue>.Keys
  name.vb: System.Collections.Generic.IDictionary<TKey,TValue>.Keys
- uid: System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
  commentId: P:System.Collections.Generic.Dictionary{`0,`2}.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
  parent: System.Collections.Generic.Dictionary{{K},{LV}}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
  name: IReadOnlyDictionary<K, LV>.Keys
  nameWithType: Dictionary<K, LV>.IReadOnlyDictionary<K, LV>.Keys
  fullName: System.Collections.Generic.Dictionary<K, LV>.System.Collections.Generic.IReadOnlyDictionary<K, LV>.Keys
  nameWithType.vb: Dictionary(Of K, LV).System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys
  fullName.vb: System.Collections.Generic.Dictionary(Of K, LV).System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys
  name.vb: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys
- uid: System.Collections.Generic.Dictionary{{K},{LV}}.Values
  commentId: P:System.Collections.Generic.Dictionary{`0,`2}.Values
  parent: System.Collections.Generic.Dictionary{{K},{LV}}
  definition: System.Collections.Generic.Dictionary`2.Values
  name: Values
  nameWithType: Dictionary<K, LV>.Values
  fullName: System.Collections.Generic.Dictionary<K, LV>.Values
  nameWithType.vb: Dictionary(Of K, LV).Values
  fullName.vb: System.Collections.Generic.Dictionary(Of K, LV).Values
- uid: System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#Generic#IDictionary{TKey,TValue}#Values
  commentId: P:System.Collections.Generic.Dictionary{`0,`2}.System#Collections#Generic#IDictionary{TKey,TValue}#Values
  parent: System.Collections.Generic.Dictionary{{K},{LV}}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Values
  name: IDictionary<K, LV>.Values
  nameWithType: Dictionary<K, LV>.IDictionary<K, LV>.Values
  fullName: System.Collections.Generic.Dictionary<K, LV>.System.Collections.Generic.IDictionary<K, LV>.Values
  nameWithType.vb: Dictionary(Of K, LV).System.Collections.Generic.IDictionary<TKey,TValue>.Values
  fullName.vb: System.Collections.Generic.Dictionary(Of K, LV).System.Collections.Generic.IDictionary<TKey,TValue>.Values
  name.vb: System.Collections.Generic.IDictionary<TKey,TValue>.Values
- uid: System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
  commentId: P:System.Collections.Generic.Dictionary{`0,`2}.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
  parent: System.Collections.Generic.Dictionary{{K},{LV}}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
  name: IReadOnlyDictionary<K, LV>.Values
  nameWithType: Dictionary<K, LV>.IReadOnlyDictionary<K, LV>.Values
  fullName: System.Collections.Generic.Dictionary<K, LV>.System.Collections.Generic.IReadOnlyDictionary<K, LV>.Values
  nameWithType.vb: Dictionary(Of K, LV).System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values
  fullName.vb: System.Collections.Generic.Dictionary(Of K, LV).System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values
  name.vb: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values
- uid: System.Collections.Generic.Dictionary{{K},{LV}}.Item({K})
  commentId: P:System.Collections.Generic.Dictionary{`0,`2}.Item(`0)
  parent: System.Collections.Generic.Dictionary{{K},{LV}}
  definition: System.Collections.Generic.Dictionary`2.Item(`0)
  name: Item[K]
  nameWithType: Dictionary<K, LV>.Item[K]
  fullName: System.Collections.Generic.Dictionary<K, LV>.Item[K]
  nameWithType.vb: Dictionary(Of K, LV).Item(K)
  fullName.vb: System.Collections.Generic.Dictionary(Of K, LV).Item(K)
  name.vb: Item(K)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.Item(`0)
    name: Item
    nameWithType: Dictionary<K, LV>.Item
    fullName: System.Collections.Generic.Dictionary<K, LV>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - name: K
    nameWithType: K
    fullName: K
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.Item(`0)
    name: Item
    nameWithType: Dictionary(Of K, LV).Item
    fullName: System.Collections.Generic.Dictionary(Of K, LV).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  commentId: P:System.Collections.Generic.Dictionary{`0,`2}.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  parent: System.Collections.Generic.Dictionary{{K},{LV}}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  name: ICollection<KeyValuePair<K, LV>>.IsReadOnly
  nameWithType: Dictionary<K, LV>.ICollection<KeyValuePair<K, LV>>.IsReadOnly
  fullName: System.Collections.Generic.Dictionary<K, LV>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<K, LV>>.IsReadOnly
  nameWithType.vb: Dictionary(Of K, LV).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
  fullName.vb: System.Collections.Generic.Dictionary(Of K, LV).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
- uid: System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Collections.Generic.Dictionary{`0,`2}.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Generic.Dictionary{{K},{LV}}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized
  name: ICollection.IsSynchronized
  nameWithType: Dictionary<K, LV>.ICollection.IsSynchronized
  fullName: System.Collections.Generic.Dictionary<K, LV>.System.Collections.ICollection.IsSynchronized
  nameWithType.vb: Dictionary(Of K, LV).System.Collections.ICollection.IsSynchronized
  fullName.vb: System.Collections.Generic.Dictionary(Of K, LV).System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#ICollection#SyncRoot
  commentId: P:System.Collections.Generic.Dictionary{`0,`2}.System#Collections#ICollection#SyncRoot
  parent: System.Collections.Generic.Dictionary{{K},{LV}}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot
  name: ICollection.SyncRoot
  nameWithType: Dictionary<K, LV>.ICollection.SyncRoot
  fullName: System.Collections.Generic.Dictionary<K, LV>.System.Collections.ICollection.SyncRoot
  nameWithType.vb: Dictionary(Of K, LV).System.Collections.ICollection.SyncRoot
  fullName.vb: System.Collections.Generic.Dictionary(Of K, LV).System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#IDictionary#IsFixedSize
  commentId: P:System.Collections.Generic.Dictionary{`0,`2}.System#Collections#IDictionary#IsFixedSize
  parent: System.Collections.Generic.Dictionary{{K},{LV}}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize
  name: IDictionary.IsFixedSize
  nameWithType: Dictionary<K, LV>.IDictionary.IsFixedSize
  fullName: System.Collections.Generic.Dictionary<K, LV>.System.Collections.IDictionary.IsFixedSize
  nameWithType.vb: Dictionary(Of K, LV).System.Collections.IDictionary.IsFixedSize
  fullName.vb: System.Collections.Generic.Dictionary(Of K, LV).System.Collections.IDictionary.IsFixedSize
  name.vb: System.Collections.IDictionary.IsFixedSize
- uid: System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#IDictionary#IsReadOnly
  commentId: P:System.Collections.Generic.Dictionary{`0,`2}.System#Collections#IDictionary#IsReadOnly
  parent: System.Collections.Generic.Dictionary{{K},{LV}}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly
  name: IDictionary.IsReadOnly
  nameWithType: Dictionary<K, LV>.IDictionary.IsReadOnly
  fullName: System.Collections.Generic.Dictionary<K, LV>.System.Collections.IDictionary.IsReadOnly
  nameWithType.vb: Dictionary(Of K, LV).System.Collections.IDictionary.IsReadOnly
  fullName.vb: System.Collections.Generic.Dictionary(Of K, LV).System.Collections.IDictionary.IsReadOnly
  name.vb: System.Collections.IDictionary.IsReadOnly
- uid: System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#IDictionary#Keys
  commentId: P:System.Collections.Generic.Dictionary{`0,`2}.System#Collections#IDictionary#Keys
  parent: System.Collections.Generic.Dictionary{{K},{LV}}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys
  name: IDictionary.Keys
  nameWithType: Dictionary<K, LV>.IDictionary.Keys
  fullName: System.Collections.Generic.Dictionary<K, LV>.System.Collections.IDictionary.Keys
  nameWithType.vb: Dictionary(Of K, LV).System.Collections.IDictionary.Keys
  fullName.vb: System.Collections.Generic.Dictionary(Of K, LV).System.Collections.IDictionary.Keys
  name.vb: System.Collections.IDictionary.Keys
- uid: System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#IDictionary#Values
  commentId: P:System.Collections.Generic.Dictionary{`0,`2}.System#Collections#IDictionary#Values
  parent: System.Collections.Generic.Dictionary{{K},{LV}}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values
  name: IDictionary.Values
  nameWithType: Dictionary<K, LV>.IDictionary.Values
  fullName: System.Collections.Generic.Dictionary<K, LV>.System.Collections.IDictionary.Values
  nameWithType.vb: Dictionary(Of K, LV).System.Collections.IDictionary.Values
  fullName.vb: System.Collections.Generic.Dictionary(Of K, LV).System.Collections.IDictionary.Values
  name.vb: System.Collections.IDictionary.Values
- uid: System.Collections.Generic.Dictionary{{K},{LV}}.System#Collections#IDictionary#Item(System.Object)
  commentId: P:System.Collections.Generic.Dictionary{`0,`2}.System#Collections#IDictionary#Item(System.Object)
  parent: System.Collections.Generic.Dictionary{{K},{LV}}
  definition: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)
  name: IDictionary.Item[Object]
  nameWithType: Dictionary<K, LV>.IDictionary.Item[Object]
  fullName: System.Collections.Generic.Dictionary<K, LV>.System.Collections.IDictionary.Item[System.Object]
  nameWithType.vb: Dictionary(Of K, LV).System.Collections.IDictionary.Item(Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of K, LV).System.Collections.IDictionary.Item(System.Object)
  name.vb: System.Collections.IDictionary.Item(Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)
    name: IDictionary.Item
    nameWithType: Dictionary<K, LV>.IDictionary.Item
    fullName: System.Collections.Generic.Dictionary<K, LV>.System.Collections.IDictionary.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)
    name: System.Collections.IDictionary.Item
    nameWithType: Dictionary(Of K, LV).System.Collections.IDictionary.Item
    fullName: System.Collections.Generic.Dictionary(Of K, LV).System.Collections.IDictionary.Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  name: SetProperty(String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object())
  name.vb: SetProperty(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  name: InvokeMethod(String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object())
  name.vb: InvokeMethod(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  parent: Microsoft.Health.Utility.InvariantString
  definition: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  name: ToStringInvariant()
  nameWithType: InvariantString.ToStringInvariant()
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant()
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.MultiValueDictionary`3.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  parent: Microsoft.Health.Utility.TypeHelper
  definition: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  name: ValueOrDbNull<MultiValueDictionary<K, V, LV>>()
  nameWithType: TypeHelper.ValueOrDbNull<MultiValueDictionary<K, V, LV>>()
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.MultiValueDictionary<K, V, LV>>()
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of MultiValueDictionary(Of K, V, LV))()
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.MultiValueDictionary(Of K, V, LV))()
  name.vb: ValueOrDbNull(Of MultiValueDictionary(Of K, V, LV))()
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull<MultiValueDictionary<K, V, LV>>
    nameWithType: TypeHelper.ValueOrDbNull<MultiValueDictionary<K, V, LV>>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.MultiValueDictionary<K, V, LV>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull(Of MultiValueDictionary(Of K, V, LV))
    nameWithType: TypeHelper.ValueOrDbNull(Of MultiValueDictionary(Of K, V, LV))
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.MultiValueDictionary(Of K, V, LV))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  parent: Microsoft.Health.Utility.WCXmlHelper
  definition: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  name: ToXml()
  nameWithType: WCXmlHelper.ToXml()
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml()
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.IReadOnlyDictionary`2
  commentId: T:System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: true
  name: IReadOnlyDictionary<TKey, TValue>
  nameWithType: IReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: IReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  name.vb: IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.Serialization
  commentId: N:System.Runtime.Serialization
  isExternal: false
  name: System.Runtime.Serialization
  nameWithType: System.Runtime.Serialization
  fullName: System.Runtime.Serialization
- uid: System.Collections.Generic.Dictionary`2.Add(`0,`1)
  commentId: M:System.Collections.Generic.Dictionary`2.Add(`0,`1)
  isExternal: true
  name: Add(TKey, TValue)
  nameWithType: Dictionary<TKey, TValue>.Add(TKey, TValue)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)
  nameWithType.vb: Dictionary(Of TKey, TValue).Add(TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).Add(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.Add(`0,`1)
    name: Add
    nameWithType: Dictionary<TKey, TValue>.Add
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.Add(`0,`1)
    name: Add
    nameWithType: Dictionary(Of TKey, TValue).Add
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
  commentId: M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
  isExternal: true
  name: ICollection<KeyValuePair<TKey, TValue>>.Add(KeyValuePair<TKey, TValue>)
  nameWithType: Dictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.Add(KeyValuePair<TKey, TValue>)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Add(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair(Of TKey, TValue))
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
    name: ICollection<KeyValuePair<TKey, TValue>>.Add
    nameWithType: Dictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.Add
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
    name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
    nameWithType: Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  commentId: M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  isExternal: true
  name: ICollection<KeyValuePair<TKey, TValue>>.Contains(KeyValuePair<TKey, TValue>)
  nameWithType: Dictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.Contains(KeyValuePair<TKey, TValue>)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair(Of TKey, TValue))
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
    name: ICollection<KeyValuePair<TKey, TValue>>.Contains
    nameWithType: Dictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.Contains
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
    name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
    nameWithType: Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  commentId: M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  isExternal: true
  name: ICollection<KeyValuePair<TKey, TValue>>.Remove(KeyValuePair<TKey, TValue>)
  nameWithType: Dictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.Remove(KeyValuePair<TKey, TValue>)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair(Of TKey, TValue))
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
    name: ICollection<KeyValuePair<TKey, TValue>>.Remove
    nameWithType: Dictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.Remove
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
    name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
    nameWithType: Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.Clear
  commentId: M:System.Collections.Generic.Dictionary`2.Clear
  isExternal: true
  name: Clear()
  nameWithType: Dictionary<TKey, TValue>.Clear()
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Clear()
  nameWithType.vb: Dictionary(Of TKey, TValue).Clear()
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.Clear
    name: Clear
    nameWithType: Dictionary<TKey, TValue>.Clear
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.Clear
    name: Clear
    nameWithType: Dictionary(Of TKey, TValue).Clear
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.ContainsKey(`0)
  commentId: M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)
  isExternal: true
  name: ContainsKey(TKey)
  nameWithType: Dictionary<TKey, TValue>.ContainsKey(TKey)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)
  nameWithType.vb: Dictionary(Of TKey, TValue).ContainsKey(TKey)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).ContainsKey(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: Dictionary<TKey, TValue>.ContainsKey
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: Dictionary(Of TKey, TValue).ContainsKey
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.ContainsValue(`1)
  commentId: M:System.Collections.Generic.Dictionary`2.ContainsValue(`1)
  isExternal: true
  name: ContainsValue(TValue)
  nameWithType: Dictionary<TKey, TValue>.ContainsValue(TValue)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.ContainsValue(TValue)
  nameWithType.vb: Dictionary(Of TKey, TValue).ContainsValue(TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).ContainsValue(TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.ContainsValue(`1)
    name: ContainsValue
    nameWithType: Dictionary<TKey, TValue>.ContainsValue
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.ContainsValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.ContainsValue(`1)
    name: ContainsValue
    nameWithType: Dictionary(Of TKey, TValue).ContainsValue
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).ContainsValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.GetEnumerator
  commentId: M:System.Collections.Generic.Dictionary`2.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: Dictionary<TKey, TValue>.GetEnumerator()
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.GetEnumerator()
  nameWithType.vb: Dictionary(Of TKey, TValue).GetEnumerator()
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.GetEnumerator
    name: GetEnumerator
    nameWithType: Dictionary<TKey, TValue>.GetEnumerator
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.GetEnumerator
    name: GetEnumerator
    nameWithType: Dictionary(Of TKey, TValue).GetEnumerator
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
  commentId: M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
  isExternal: true
  name: IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator()
  nameWithType: Dictionary<TKey, TValue>.IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator()
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>.GetEnumerator()
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator()
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
    name: IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator
    nameWithType: Dictionary<TKey, TValue>.IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
    name: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator
    nameWithType: Dictionary(Of TKey, TValue).System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  isExternal: true
  name: GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: Dictionary<TKey, TValue>.GetObjectData(SerializationInfo, StreamingContext)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  nameWithType.vb: Dictionary(Of TKey, TValue).GetObjectData(SerializationInfo, StreamingContext)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: Dictionary<TKey, TValue>.GetObjectData
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: Dictionary(Of TKey, TValue).GetObjectData
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)
  commentId: M:System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)
  isExternal: true
  name: OnDeserialization(Object)
  nameWithType: Dictionary<TKey, TValue>.OnDeserialization(Object)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.OnDeserialization(System.Object)
  nameWithType.vb: Dictionary(Of TKey, TValue).OnDeserialization(Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).OnDeserialization(System.Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)
    name: OnDeserialization
    nameWithType: Dictionary<TKey, TValue>.OnDeserialization
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.OnDeserialization
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)
    name: OnDeserialization
    nameWithType: Dictionary(Of TKey, TValue).OnDeserialization
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).OnDeserialization
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.Remove(`0)
  commentId: M:System.Collections.Generic.Dictionary`2.Remove(`0)
  isExternal: true
  name: Remove(TKey)
  nameWithType: Dictionary<TKey, TValue>.Remove(TKey)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Remove(TKey)
  nameWithType.vb: Dictionary(Of TKey, TValue).Remove(TKey)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).Remove(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.Remove(`0)
    name: Remove
    nameWithType: Dictionary<TKey, TValue>.Remove
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.Remove(`0)
    name: Remove
    nameWithType: Dictionary(Of TKey, TValue).Remove
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)
  commentId: M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)
  isExternal: true
  name: TryGetValue(TKey, TValue)
  nameWithType: Dictionary<TKey, TValue>.TryGetValue(TKey, TValue)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.TryGetValue(TKey, TValue)
  nameWithType.vb: Dictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: Dictionary<TKey, TValue>.TryGetValue
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: Dictionary(Of TKey, TValue).TryGetValue
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  commentId: M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  isExternal: true
  name: ICollection<KeyValuePair<TKey, TValue>>.CopyTo(KeyValuePair<TKey, TValue>[], Int32)
  nameWithType: Dictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.CopyTo(KeyValuePair<TKey, TValue>[], Int32)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue>[], System.Int32)
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair(Of TKey, TValue)(), Int32)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(System.Collections.Generic.KeyValuePair(Of TKey, TValue)(), System.Int32)
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair(Of TKey, TValue)(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
    name: ICollection<KeyValuePair<TKey, TValue>>.CopyTo
    nameWithType: Dictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.CopyTo
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
    name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
    nameWithType: Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isExternal: true
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: Dictionary<TKey, TValue>.ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.ICollection.CopyTo(Array, Int32)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: ICollection.CopyTo
    nameWithType: Dictionary<TKey, TValue>.ICollection.CopyTo
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: System.Collections.ICollection.CopyTo
    nameWithType: Dictionary(Of TKey, TValue).System.Collections.ICollection.CopyTo
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator
  isExternal: true
  name: IEnumerable.GetEnumerator()
  nameWithType: Dictionary<TKey, TValue>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: Dictionary<TKey, TValue>.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: Dictionary(Of TKey, TValue).System.Collections.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#get_Item(System.Object)
  commentId: M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#get_Item(System.Object)
  isExternal: true
  name: IDictionary.get_Item(Object)
  nameWithType: Dictionary<TKey, TValue>.IDictionary.get_Item(Object)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.get_Item(System.Object)
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.IDictionary.get_Item(Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.get_Item(System.Object)
  name.vb: System.Collections.IDictionary.get_Item(Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#get_Item(System.Object)
    name: IDictionary.get_Item
    nameWithType: Dictionary<TKey, TValue>.IDictionary.get_Item
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#get_Item(System.Object)
    name: System.Collections.IDictionary.get_Item
    nameWithType: Dictionary(Of TKey, TValue).System.Collections.IDictionary.get_Item
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#set_Item(System.Object,System.Object)
  commentId: M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#set_Item(System.Object,System.Object)
  isExternal: true
  name: IDictionary.set_Item(Object, Object)
  nameWithType: Dictionary<TKey, TValue>.IDictionary.set_Item(Object, Object)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.set_Item(System.Object, System.Object)
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.IDictionary.set_Item(Object, Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.set_Item(System.Object, System.Object)
  name.vb: System.Collections.IDictionary.set_Item(Object, Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#set_Item(System.Object,System.Object)
    name: IDictionary.set_Item
    nameWithType: Dictionary<TKey, TValue>.IDictionary.set_Item
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#set_Item(System.Object,System.Object)
    name: System.Collections.IDictionary.set_Item
    nameWithType: Dictionary(Of TKey, TValue).System.Collections.IDictionary.set_Item
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)
  commentId: M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)
  isExternal: true
  name: IDictionary.Add(Object, Object)
  nameWithType: Dictionary<TKey, TValue>.IDictionary.Add(Object, Object)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.Add(System.Object, System.Object)
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.IDictionary.Add(Object, Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.Add(System.Object, System.Object)
  name.vb: System.Collections.IDictionary.Add(Object, Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)
    name: IDictionary.Add
    nameWithType: Dictionary<TKey, TValue>.IDictionary.Add
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)
    name: System.Collections.IDictionary.Add
    nameWithType: Dictionary(Of TKey, TValue).System.Collections.IDictionary.Add
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)
  commentId: M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)
  isExternal: true
  name: IDictionary.Contains(Object)
  nameWithType: Dictionary<TKey, TValue>.IDictionary.Contains(Object)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.Contains(System.Object)
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.IDictionary.Contains(Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.Contains(System.Object)
  name.vb: System.Collections.IDictionary.Contains(Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)
    name: IDictionary.Contains
    nameWithType: Dictionary<TKey, TValue>.IDictionary.Contains
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)
    name: System.Collections.IDictionary.Contains
    nameWithType: Dictionary(Of TKey, TValue).System.Collections.IDictionary.Contains
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator
  commentId: M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator
  isExternal: true
  name: IDictionary.GetEnumerator()
  nameWithType: Dictionary<TKey, TValue>.IDictionary.GetEnumerator()
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.GetEnumerator()
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.IDictionary.GetEnumerator()
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.GetEnumerator()
  name.vb: System.Collections.IDictionary.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator
    name: IDictionary.GetEnumerator
    nameWithType: Dictionary<TKey, TValue>.IDictionary.GetEnumerator
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator
    name: System.Collections.IDictionary.GetEnumerator
    nameWithType: Dictionary(Of TKey, TValue).System.Collections.IDictionary.GetEnumerator
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)
  commentId: M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)
  isExternal: true
  name: IDictionary.Remove(Object)
  nameWithType: Dictionary<TKey, TValue>.IDictionary.Remove(Object)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.Remove(System.Object)
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.IDictionary.Remove(Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.Remove(System.Object)
  name.vb: System.Collections.IDictionary.Remove(Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)
    name: IDictionary.Remove
    nameWithType: Dictionary<TKey, TValue>.IDictionary.Remove
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)
    name: System.Collections.IDictionary.Remove
    nameWithType: Dictionary(Of TKey, TValue).System.Collections.IDictionary.Remove
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.Comparer
  commentId: P:System.Collections.Generic.Dictionary`2.Comparer
  isExternal: true
  name: Comparer
  nameWithType: Dictionary<TKey, TValue>.Comparer
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Comparer
  nameWithType.vb: Dictionary(Of TKey, TValue).Comparer
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).Comparer
- uid: System.Collections.Generic.Dictionary`2.Count
  commentId: P:System.Collections.Generic.Dictionary`2.Count
  isExternal: true
  name: Count
  nameWithType: Dictionary<TKey, TValue>.Count
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Count
  nameWithType.vb: Dictionary(Of TKey, TValue).Count
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).Count
- uid: System.Collections.Generic.Dictionary`2.Keys
  commentId: P:System.Collections.Generic.Dictionary`2.Keys
  isExternal: true
  name: Keys
  nameWithType: Dictionary<TKey, TValue>.Keys
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Keys
  nameWithType.vb: Dictionary(Of TKey, TValue).Keys
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).Keys
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Keys
  commentId: P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Keys
  isExternal: true
  name: IDictionary<TKey, TValue>.Keys
  nameWithType: Dictionary<TKey, TValue>.IDictionary<TKey, TValue>.Keys
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.IDictionary<TKey, TValue>.Keys
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.Generic.IDictionary<TKey,TValue>.Keys
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.Generic.IDictionary<TKey,TValue>.Keys
  name.vb: System.Collections.Generic.IDictionary<TKey,TValue>.Keys
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
  commentId: P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
  isExternal: true
  name: IReadOnlyDictionary<TKey, TValue>.Keys
  nameWithType: Dictionary<TKey, TValue>.IReadOnlyDictionary<TKey, TValue>.Keys
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Keys
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys
  name.vb: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys
- uid: System.Collections.Generic.Dictionary`2.Values
  commentId: P:System.Collections.Generic.Dictionary`2.Values
  isExternal: true
  name: Values
  nameWithType: Dictionary<TKey, TValue>.Values
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Values
  nameWithType.vb: Dictionary(Of TKey, TValue).Values
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).Values
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Values
  commentId: P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Values
  isExternal: true
  name: IDictionary<TKey, TValue>.Values
  nameWithType: Dictionary<TKey, TValue>.IDictionary<TKey, TValue>.Values
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.IDictionary<TKey, TValue>.Values
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.Generic.IDictionary<TKey,TValue>.Values
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.Generic.IDictionary<TKey,TValue>.Values
  name.vb: System.Collections.Generic.IDictionary<TKey,TValue>.Values
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
  commentId: P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
  isExternal: true
  name: IReadOnlyDictionary<TKey, TValue>.Values
  nameWithType: Dictionary<TKey, TValue>.IReadOnlyDictionary<TKey, TValue>.Values
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Values
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values
  name.vb: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values
- uid: System.Collections.Generic.Dictionary`2.Item(`0)
  commentId: P:System.Collections.Generic.Dictionary`2.Item(`0)
  isExternal: true
  name: Item[TKey]
  nameWithType: Dictionary<TKey, TValue>.Item[TKey]
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Item[TKey]
  nameWithType.vb: Dictionary(Of TKey, TValue).Item(TKey)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).Item(TKey)
  name.vb: Item(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.Item(`0)
    name: Item
    nameWithType: Dictionary<TKey, TValue>.Item
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.Item(`0)
    name: Item
    nameWithType: Dictionary(Of TKey, TValue).Item
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  commentId: P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  isExternal: true
  name: ICollection<KeyValuePair<TKey, TValue>>.IsReadOnly
  nameWithType: Dictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.IsReadOnly
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.IsReadOnly
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
- uid: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized
  isExternal: true
  name: ICollection.IsSynchronized
  nameWithType: Dictionary<TKey, TValue>.ICollection.IsSynchronized
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.ICollection.IsSynchronized
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.ICollection.IsSynchronized
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot
  commentId: P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot
  isExternal: true
  name: ICollection.SyncRoot
  nameWithType: Dictionary<TKey, TValue>.ICollection.SyncRoot
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.ICollection.SyncRoot
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.ICollection.SyncRoot
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize
  commentId: P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize
  isExternal: true
  name: IDictionary.IsFixedSize
  nameWithType: Dictionary<TKey, TValue>.IDictionary.IsFixedSize
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.IsFixedSize
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.IDictionary.IsFixedSize
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.IsFixedSize
  name.vb: System.Collections.IDictionary.IsFixedSize
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly
  commentId: P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly
  isExternal: true
  name: IDictionary.IsReadOnly
  nameWithType: Dictionary<TKey, TValue>.IDictionary.IsReadOnly
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.IsReadOnly
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.IDictionary.IsReadOnly
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.IsReadOnly
  name.vb: System.Collections.IDictionary.IsReadOnly
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys
  commentId: P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys
  isExternal: true
  name: IDictionary.Keys
  nameWithType: Dictionary<TKey, TValue>.IDictionary.Keys
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.Keys
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.IDictionary.Keys
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.Keys
  name.vb: System.Collections.IDictionary.Keys
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values
  commentId: P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values
  isExternal: true
  name: IDictionary.Values
  nameWithType: Dictionary<TKey, TValue>.IDictionary.Values
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.Values
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.IDictionary.Values
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.Values
  name.vb: System.Collections.IDictionary.Values
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)
  commentId: P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)
  isExternal: true
  name: IDictionary.Item[Object]
  nameWithType: Dictionary<TKey, TValue>.IDictionary.Item[Object]
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.Item[System.Object]
  nameWithType.vb: Dictionary(Of TKey, TValue).System.Collections.IDictionary.Item(Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.Item(System.Object)
  name.vb: System.Collections.IDictionary.Item(Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)
    name: IDictionary.Item
    nameWithType: Dictionary<TKey, TValue>.IDictionary.Item
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>.System.Collections.IDictionary.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)
    name: System.Collections.IDictionary.Item
    nameWithType: Dictionary(Of TKey, TValue).System.Collections.IDictionary.Item
    fullName: System.Collections.Generic.Dictionary(Of TKey, TValue).System.Collections.IDictionary.Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  isExternal: true
  name: SetProperty(Object, String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object())
  name.vb: SetProperty(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions
  commentId: T:Microsoft.Health.Utility.IDispatchExtensions
  parent: Microsoft.Health.Utility
  isExternal: false
  name: IDispatchExtensions
  nameWithType: IDispatchExtensions
  fullName: Microsoft.Health.Utility.IDispatchExtensions
- uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  isExternal: true
  name: InvokeMethod(Object, String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object())
  name.vb: InvokeMethod(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  isExternal: true
  name: ToStringInvariant(Object)
  nameWithType: InvariantString.ToStringInvariant(Object)
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString
  commentId: T:Microsoft.Health.Utility.InvariantString
  parent: Microsoft.Health.Utility
  isExternal: false
  name: InvariantString
  nameWithType: InvariantString
  fullName: Microsoft.Health.Utility.InvariantString
- uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  isExternal: false
  name: ValueOrDbNull<T>(T)
  nameWithType: TypeHelper.ValueOrDbNull<T>(T)
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>(T)
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of T)(T)
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)(T)
  name.vb: ValueOrDbNull(Of T)(T)
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull<T>
    nameWithType: TypeHelper.ValueOrDbNull<T>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull(Of T)
    nameWithType: TypeHelper.ValueOrDbNull(Of T)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.TypeHelper
  commentId: T:Microsoft.Health.Utility.TypeHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: TypeHelper
  nameWithType: TypeHelper
  fullName: Microsoft.Health.Utility.TypeHelper
- uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  isExternal: true
  name: ToXml(Object)
  nameWithType: WCXmlHelper.ToXml(Object)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.WCXmlHelper
  commentId: T:Microsoft.Health.Utility.WCXmlHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: WCXmlHelper
  nameWithType: WCXmlHelper
  fullName: Microsoft.Health.Utility.WCXmlHelper
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: Microsoft.Health.MultiValueDictionary`3.#ctor*
  commentId: Overload:Microsoft.Health.MultiValueDictionary`3.#ctor
  isExternal: false
  name: MultiValueDictionary
  nameWithType: MultiValueDictionary<K, V, LV>.MultiValueDictionary
  fullName: Microsoft.Health.MultiValueDictionary<K, V, LV>.MultiValueDictionary
  nameWithType.vb: MultiValueDictionary(Of K, V, LV).MultiValueDictionary
  fullName.vb: Microsoft.Health.MultiValueDictionary(Of K, V, LV).MultiValueDictionary
- uid: System.Collections.Generic.IEqualityComparer{{K}}
  commentId: T:System.Collections.Generic.IEqualityComparer{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<K>
  nameWithType: IEqualityComparer<K>
  fullName: System.Collections.Generic.IEqualityComparer<K>
  nameWithType.vb: IEqualityComparer(Of K)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of K)
  name.vb: IEqualityComparer(Of K)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1
  commentId: T:System.Collections.Generic.IEqualityComparer`1
  isExternal: true
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Health.MultiValueDictionary`3.All*
  commentId: Overload:Microsoft.Health.MultiValueDictionary`3.All
  isExternal: false
  name: All
  nameWithType: MultiValueDictionary<K, V, LV>.All
  fullName: Microsoft.Health.MultiValueDictionary<K, V, LV>.All
  nameWithType.vb: MultiValueDictionary(Of K, V, LV).All
  fullName.vb: Microsoft.Health.MultiValueDictionary(Of K, V, LV).All
- uid: Microsoft.Health.MultiValueDictionary`3.Get*
  commentId: Overload:Microsoft.Health.MultiValueDictionary`3.Get
  isExternal: false
  name: Get
  nameWithType: MultiValueDictionary<K, V, LV>.Get
  fullName: Microsoft.Health.MultiValueDictionary<K, V, LV>.Get
  nameWithType.vb: MultiValueDictionary(Of K, V, LV).Get
  fullName.vb: Microsoft.Health.MultiValueDictionary(Of K, V, LV).Get
- uid: '{K}'
  commentId: '!:K'
  definition: K
  name: K
  nameWithType: K
  fullName: K
- uid: '{LV}'
  commentId: '!:LV'
  definition: LV
  name: LV
  nameWithType: LV
  fullName: LV
- uid: K
  isExternal: false
  name: K
  nameWithType: K
  fullName: K
- uid: LV
  isExternal: false
  name: LV
  nameWithType: LV
  fullName: LV
- uid: Microsoft.Health.MultiValueDictionary`3.Add*
  commentId: Overload:Microsoft.Health.MultiValueDictionary`3.Add
  isExternal: false
  name: Add
  nameWithType: MultiValueDictionary<K, V, LV>.Add
  fullName: Microsoft.Health.MultiValueDictionary<K, V, LV>.Add
  nameWithType.vb: MultiValueDictionary(Of K, V, LV).Add
  fullName.vb: Microsoft.Health.MultiValueDictionary(Of K, V, LV).Add
- uid: System.Func{{V},{K}}
  commentId: T:System.Func{`1,`0}
  parent: System
  definition: System.Func`2
  name: Func<V, K>
  nameWithType: Func<V, K>
  fullName: System.Func<V, K>
  nameWithType.vb: Func(Of V, K)
  fullName.vb: System.Func(Of V, K)
  name.vb: Func(Of V, K)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: V
    nameWithType: V
    fullName: V
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: V
    nameWithType: V
    fullName: V
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: '{V}'
  commentId: '!:V'
  definition: V
  name: V
  nameWithType: V
  fullName: V
- uid: V
  isExternal: false
  name: V
  nameWithType: V
  fullName: V
- uid: System.Collections.Generic.KeyValuePair{{K},{V}}
  commentId: T:System.Collections.Generic.KeyValuePair{`0,`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.KeyValuePair`2
  name: KeyValuePair<K, V>
  nameWithType: KeyValuePair<K, V>
  fullName: System.Collections.Generic.KeyValuePair<K, V>
  nameWithType.vb: KeyValuePair(Of K, V)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of K, V)
  name.vb: KeyValuePair(Of K, V)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair`2
  commentId: T:System.Collections.Generic.KeyValuePair`2
  isExternal: true
  name: KeyValuePair<TKey, TValue>
  nameWithType: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  nameWithType.vb: KeyValuePair(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{K},{V}}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<K, V>>
  nameWithType: IEnumerable<KeyValuePair<K, V>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<K, V>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of K, V))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of K, V))
  name.vb: IEnumerable(Of KeyValuePair(Of K, V))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.MultiValueDictionary`3.Remove*
  commentId: Overload:Microsoft.Health.MultiValueDictionary`3.Remove
  isExternal: false
  name: Remove
  nameWithType: MultiValueDictionary<K, V, LV>.Remove
  fullName: Microsoft.Health.MultiValueDictionary<K, V, LV>.Remove
  nameWithType.vb: MultiValueDictionary(Of K, V, LV).Remove
  fullName.vb: Microsoft.Health.MultiValueDictionary(Of K, V, LV).Remove
- uid: Microsoft.Health.MultiValueDictionary`3.GetEnumerator*
  commentId: Overload:Microsoft.Health.MultiValueDictionary`3.GetEnumerator
  isExternal: false
  name: GetEnumerator
  nameWithType: MultiValueDictionary<K, V, LV>.GetEnumerator
  fullName: Microsoft.Health.MultiValueDictionary<K, V, LV>.GetEnumerator
  nameWithType.vb: MultiValueDictionary(Of K, V, LV).GetEnumerator
  fullName.vb: Microsoft.Health.MultiValueDictionary(Of K, V, LV).GetEnumerator
- uid: System.Collections.Generic.IEnumerable{{V}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{`1}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{V}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<V>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<V>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of V).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of V).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<V>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<V>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of V).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of V).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{V}}
  commentId: T:System.Collections.Generic.IEnumerator{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<V>
  nameWithType: IEnumerator<V>
  fullName: System.Collections.Generic.IEnumerator<V>
  nameWithType.vb: IEnumerator(Of V)
  fullName.vb: System.Collections.Generic.IEnumerator(Of V)
  name.vb: IEnumerator(Of V)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.MultiValueDictionary`3.NewList*
  commentId: Overload:Microsoft.Health.MultiValueDictionary`3.NewList
  isExternal: false
  name: NewList
  nameWithType: MultiValueDictionary<K, V, LV>.NewList
  fullName: Microsoft.Health.MultiValueDictionary<K, V, LV>.NewList
  nameWithType.vb: MultiValueDictionary(Of K, V, LV).NewList
  fullName.vb: Microsoft.Health.MultiValueDictionary(Of K, V, LV).NewList
