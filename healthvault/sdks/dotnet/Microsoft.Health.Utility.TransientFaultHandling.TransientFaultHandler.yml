### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler
  commentId: T:Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler
  id: TransientFaultHandler
  parent: Microsoft.Health.Utility.TransientFaultHandling
  children:
  - Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.#ctor(Microsoft.Health.Utility.TransientFaultHandling.ITransientExceptionDetectionPolicy,Microsoft.Health.Utility.TransientFaultHandling.IRetryStrategy)
  - Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.FailedAttempt
  - Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.Invoke(System.Action)
  - Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.Invoke``1(System.Func{``0})
  - Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.OnFailedAttempt(Microsoft.Health.Utility.TransientFaultHandling.FailedAttemptEventArgs)
  - Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.RetryStrategy
  - Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.TransientExceptionDetectionPolicy
  langs:
  - csharp
  - vb
  name: TransientFaultHandler
  nameWithType: TransientFaultHandler
  fullName: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler
  type: Class
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/TransientFaultHandling/TransientFaultHandler.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: TransientFaultHandler
    path: ../Microsoft.Health.Utility/utilities/TransientFaultHandling/TransientFaultHandler.cs
    startLine: 16
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.TransientFaultHandling
  summary: "\nUtility for execution and retrying of actions that are subject\nto transient errors.\n"
  example: []
  syntax:
    content: public class TransientFaultHandler
    content.vb: Public Class TransientFaultHandler
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  - System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.#ctor(Microsoft.Health.Utility.TransientFaultHandling.ITransientExceptionDetectionPolicy,Microsoft.Health.Utility.TransientFaultHandling.IRetryStrategy)
  commentId: M:Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.#ctor(Microsoft.Health.Utility.TransientFaultHandling.ITransientExceptionDetectionPolicy,Microsoft.Health.Utility.TransientFaultHandling.IRetryStrategy)
  id: '#ctor(Microsoft.Health.Utility.TransientFaultHandling.ITransientExceptionDetectionPolicy,Microsoft.Health.Utility.TransientFaultHandling.IRetryStrategy)'
  parent: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler
  langs:
  - csharp
  - vb
  name: TransientFaultHandler(ITransientExceptionDetectionPolicy, IRetryStrategy)
  nameWithType: TransientFaultHandler.TransientFaultHandler(ITransientExceptionDetectionPolicy, IRetryStrategy)
  fullName: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.TransientFaultHandler(Microsoft.Health.Utility.TransientFaultHandling.ITransientExceptionDetectionPolicy, Microsoft.Health.Utility.TransientFaultHandling.IRetryStrategy)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/TransientFaultHandling/TransientFaultHandler.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health.Utility/utilities/TransientFaultHandling/TransientFaultHandler.cs
    startLine: 18
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.TransientFaultHandling
  syntax:
    content: public TransientFaultHandler(ITransientExceptionDetectionPolicy transientExceptionDetectionPolicy, IRetryStrategy retryStrategy)
    content.vb: Public Sub New(transientExceptionDetectionPolicy As ITransientExceptionDetectionPolicy, retryStrategy As IRetryStrategy)
    parameters:
    - id: transientExceptionDetectionPolicy
      type: Microsoft.Health.Utility.TransientFaultHandling.ITransientExceptionDetectionPolicy
    - id: retryStrategy
      type: Microsoft.Health.Utility.TransientFaultHandling.IRetryStrategy
  overload: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.FailedAttempt
  commentId: E:Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.FailedAttempt
  id: FailedAttempt
  parent: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler
  langs:
  - csharp
  - vb
  name: FailedAttempt
  nameWithType: TransientFaultHandler.FailedAttempt
  fullName: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.FailedAttempt
  type: Event
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/TransientFaultHandling/TransientFaultHandler.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: FailedAttempt
    path: ../Microsoft.Health.Utility/utilities/TransientFaultHandling/TransientFaultHandler.cs
    startLine: 30
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.TransientFaultHandling
  summary: "\nRaised when an execution attempt has failed.\nIncludes both transient and non-transient failures.\n"
  example: []
  syntax:
    content: public event EventHandler<FailedAttemptEventArgs> FailedAttempt
    content.vb: Public Event FailedAttempt As EventHandler(Of FailedAttemptEventArgs)
    return:
      type: System.EventHandler{Microsoft.Health.Utility.TransientFaultHandling.FailedAttemptEventArgs}
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.TransientExceptionDetectionPolicy
  commentId: P:Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.TransientExceptionDetectionPolicy
  id: TransientExceptionDetectionPolicy
  parent: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler
  langs:
  - csharp
  - vb
  name: TransientExceptionDetectionPolicy
  nameWithType: TransientFaultHandler.TransientExceptionDetectionPolicy
  fullName: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.TransientExceptionDetectionPolicy
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/TransientFaultHandling/TransientFaultHandler.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: TransientExceptionDetectionPolicy
    path: ../Microsoft.Health.Utility/utilities/TransientFaultHandling/TransientFaultHandler.cs
    startLine: 32
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.TransientFaultHandling
  syntax:
    content: public ITransientExceptionDetectionPolicy TransientExceptionDetectionPolicy { get; }
    content.vb: Public ReadOnly Property TransientExceptionDetectionPolicy As ITransientExceptionDetectionPolicy
    parameters: []
    return:
      type: Microsoft.Health.Utility.TransientFaultHandling.ITransientExceptionDetectionPolicy
  overload: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.TransientExceptionDetectionPolicy*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.RetryStrategy
  commentId: P:Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.RetryStrategy
  id: RetryStrategy
  parent: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler
  langs:
  - csharp
  - vb
  name: RetryStrategy
  nameWithType: TransientFaultHandler.RetryStrategy
  fullName: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.RetryStrategy
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/TransientFaultHandling/TransientFaultHandler.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: RetryStrategy
    path: ../Microsoft.Health.Utility/utilities/TransientFaultHandling/TransientFaultHandler.cs
    startLine: 34
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.TransientFaultHandling
  syntax:
    content: public IRetryStrategy RetryStrategy { get; }
    content.vb: Public ReadOnly Property RetryStrategy As IRetryStrategy
    parameters: []
    return:
      type: Microsoft.Health.Utility.TransientFaultHandling.IRetryStrategy
  overload: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.RetryStrategy*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.Invoke``1(System.Func{``0})
  commentId: M:Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.Invoke``1(System.Func{``0})
  id: Invoke``1(System.Func{``0})
  parent: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler
  langs:
  - csharp
  - vb
  name: Invoke<T>(Func<T>)
  nameWithType: TransientFaultHandler.Invoke<T>(Func<T>)
  fullName: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.Invoke<T>(System.Func<T>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/TransientFaultHandling/TransientFaultHandler.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Invoke
    path: ../Microsoft.Health.Utility/utilities/TransientFaultHandling/TransientFaultHandler.cs
    startLine: 47
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.TransientFaultHandling
  summary: "\nInvokes the function.  When a transient failure has occured according to\nthe TransientExceptionDetectionPolicy property, a retry is attempted according to\nthe RetryStrategy property.\n"
  remarks: "\nIf the invocation is successful (possibly after retrying), its result is returned.\n\nIf all possible attempts of the invocation are not successful, the last exception\nthat occured is thrown.\n"
  example: []
  syntax:
    content: public T Invoke<T>(Func<T> func)
    content.vb: Public Function Invoke(Of T)(func As Func(Of T)) As T
    parameters:
    - id: func
      type: System.Func{{T}}
    typeParameters:
    - id: T
    return:
      type: '{T}'
  overload: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.Invoke*
  nameWithType.vb: TransientFaultHandler.Invoke(Of T)(Func(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.Invoke(Of T)(System.Func(Of T))
  name.vb: Invoke(Of T)(Func(Of T))
- uid: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.Invoke(System.Action)
  commentId: M:Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.Invoke(System.Action)
  id: Invoke(System.Action)
  parent: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler
  langs:
  - csharp
  - vb
  name: Invoke(Action)
  nameWithType: TransientFaultHandler.Invoke(Action)
  fullName: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.Invoke(System.Action)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/TransientFaultHandling/TransientFaultHandler.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Invoke
    path: ../Microsoft.Health.Utility/utilities/TransientFaultHandling/TransientFaultHandler.cs
    startLine: 124
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.TransientFaultHandling
  summary: "\nInvokes the action.  When a transient failure has occured according to\nthe TransientExceptionDetectionPolicy property, a retry is attempted according to\nthe RetryStrategy property.\n"
  remarks: "\nIf all possible attempts of the invocation are not successful, the last exception\nthat occured is thrown.\n"
  example: []
  syntax:
    content: public void Invoke(Action action)
    content.vb: Public Sub Invoke(action As Action)
    parameters:
    - id: action
      type: System.Action
  overload: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.Invoke*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.OnFailedAttempt(Microsoft.Health.Utility.TransientFaultHandling.FailedAttemptEventArgs)
  commentId: M:Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.OnFailedAttempt(Microsoft.Health.Utility.TransientFaultHandling.FailedAttemptEventArgs)
  id: OnFailedAttempt(Microsoft.Health.Utility.TransientFaultHandling.FailedAttemptEventArgs)
  parent: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler
  langs:
  - csharp
  - vb
  name: OnFailedAttempt(FailedAttemptEventArgs)
  nameWithType: TransientFaultHandler.OnFailedAttempt(FailedAttemptEventArgs)
  fullName: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.OnFailedAttempt(Microsoft.Health.Utility.TransientFaultHandling.FailedAttemptEventArgs)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/TransientFaultHandling/TransientFaultHandler.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: OnFailedAttempt
    path: ../Microsoft.Health.Utility/utilities/TransientFaultHandling/TransientFaultHandler.cs
    startLine: 138
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.TransientFaultHandling
  syntax:
    content: public void OnFailedAttempt(FailedAttemptEventArgs e)
    content.vb: Public Sub OnFailedAttempt(e As FailedAttemptEventArgs)
    parameters:
    - id: e
      type: Microsoft.Health.Utility.TransientFaultHandling.FailedAttemptEventArgs
  overload: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.OnFailedAttempt*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Health.Utility.TransientFaultHandling
  commentId: N:Microsoft.Health.Utility.TransientFaultHandling
  isExternal: false
  name: Microsoft.Health.Utility.TransientFaultHandling
  nameWithType: Microsoft.Health.Utility.TransientFaultHandling
  fullName: Microsoft.Health.Utility.TransientFaultHandling
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  name: SetProperty(String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object())
  name.vb: SetProperty(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  name: InvokeMethod(String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object())
  name.vb: InvokeMethod(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  parent: Microsoft.Health.Utility.InvariantString
  definition: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  name: ToStringInvariant()
  nameWithType: InvariantString.ToStringInvariant()
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant()
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  parent: Microsoft.Health.Utility.TypeHelper
  definition: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  name: ValueOrDbNull<TransientFaultHandler>()
  nameWithType: TypeHelper.ValueOrDbNull<TransientFaultHandler>()
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler>()
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of TransientFaultHandler)()
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler)()
  name.vb: ValueOrDbNull(Of TransientFaultHandler)()
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull<TransientFaultHandler>
    nameWithType: TypeHelper.ValueOrDbNull<TransientFaultHandler>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull(Of TransientFaultHandler)
    nameWithType: TypeHelper.ValueOrDbNull(Of TransientFaultHandler)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  parent: Microsoft.Health.Utility.WCXmlHelper
  definition: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  name: ToXml()
  nameWithType: WCXmlHelper.ToXml()
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml()
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  isExternal: true
  name: SetProperty(Object, String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object())
  name.vb: SetProperty(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions
  commentId: T:Microsoft.Health.Utility.IDispatchExtensions
  parent: Microsoft.Health.Utility
  isExternal: false
  name: IDispatchExtensions
  nameWithType: IDispatchExtensions
  fullName: Microsoft.Health.Utility.IDispatchExtensions
- uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  isExternal: true
  name: InvokeMethod(Object, String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object())
  name.vb: InvokeMethod(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  isExternal: true
  name: ToStringInvariant(Object)
  nameWithType: InvariantString.ToStringInvariant(Object)
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString
  commentId: T:Microsoft.Health.Utility.InvariantString
  parent: Microsoft.Health.Utility
  isExternal: false
  name: InvariantString
  nameWithType: InvariantString
  fullName: Microsoft.Health.Utility.InvariantString
- uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  isExternal: false
  name: ValueOrDbNull<T>(T)
  nameWithType: TypeHelper.ValueOrDbNull<T>(T)
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>(T)
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of T)(T)
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)(T)
  name.vb: ValueOrDbNull(Of T)(T)
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull<T>
    nameWithType: TypeHelper.ValueOrDbNull<T>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull(Of T)
    nameWithType: TypeHelper.ValueOrDbNull(Of T)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.TypeHelper
  commentId: T:Microsoft.Health.Utility.TypeHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: TypeHelper
  nameWithType: TypeHelper
  fullName: Microsoft.Health.Utility.TypeHelper
- uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  isExternal: true
  name: ToXml(Object)
  nameWithType: WCXmlHelper.ToXml(Object)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.WCXmlHelper
  commentId: T:Microsoft.Health.Utility.WCXmlHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: WCXmlHelper
  nameWithType: WCXmlHelper
  fullName: Microsoft.Health.Utility.WCXmlHelper
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.#ctor*
  commentId: Overload:Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.#ctor
  isExternal: false
  name: TransientFaultHandler
  nameWithType: TransientFaultHandler.TransientFaultHandler
  fullName: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.TransientFaultHandler
- uid: Microsoft.Health.Utility.TransientFaultHandling.ITransientExceptionDetectionPolicy
  commentId: T:Microsoft.Health.Utility.TransientFaultHandling.ITransientExceptionDetectionPolicy
  parent: Microsoft.Health.Utility.TransientFaultHandling
  isExternal: false
  name: ITransientExceptionDetectionPolicy
  nameWithType: ITransientExceptionDetectionPolicy
  fullName: Microsoft.Health.Utility.TransientFaultHandling.ITransientExceptionDetectionPolicy
- uid: Microsoft.Health.Utility.TransientFaultHandling.IRetryStrategy
  commentId: T:Microsoft.Health.Utility.TransientFaultHandling.IRetryStrategy
  parent: Microsoft.Health.Utility.TransientFaultHandling
  isExternal: false
  name: IRetryStrategy
  nameWithType: IRetryStrategy
  fullName: Microsoft.Health.Utility.TransientFaultHandling.IRetryStrategy
- uid: System.EventHandler{Microsoft.Health.Utility.TransientFaultHandling.FailedAttemptEventArgs}
  commentId: T:System.EventHandler{Microsoft.Health.Utility.TransientFaultHandling.FailedAttemptEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<FailedAttemptEventArgs>
  nameWithType: EventHandler<FailedAttemptEventArgs>
  fullName: System.EventHandler<Microsoft.Health.Utility.TransientFaultHandling.FailedAttemptEventArgs>
  nameWithType.vb: EventHandler(Of FailedAttemptEventArgs)
  fullName.vb: System.EventHandler(Of Microsoft.Health.Utility.TransientFaultHandling.FailedAttemptEventArgs)
  name.vb: EventHandler(Of FailedAttemptEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.Utility.TransientFaultHandling.FailedAttemptEventArgs
    name: FailedAttemptEventArgs
    nameWithType: FailedAttemptEventArgs
    fullName: Microsoft.Health.Utility.TransientFaultHandling.FailedAttemptEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.Utility.TransientFaultHandling.FailedAttemptEventArgs
    name: FailedAttemptEventArgs
    nameWithType: FailedAttemptEventArgs
    fullName: Microsoft.Health.Utility.TransientFaultHandling.FailedAttemptEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.TransientExceptionDetectionPolicy*
  commentId: Overload:Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.TransientExceptionDetectionPolicy
  isExternal: false
  name: TransientExceptionDetectionPolicy
  nameWithType: TransientFaultHandler.TransientExceptionDetectionPolicy
  fullName: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.TransientExceptionDetectionPolicy
- uid: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.RetryStrategy*
  commentId: Overload:Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.RetryStrategy
  isExternal: false
  name: RetryStrategy
  nameWithType: TransientFaultHandler.RetryStrategy
  fullName: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.RetryStrategy
- uid: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.Invoke*
  commentId: Overload:Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.Invoke
  isExternal: false
  name: Invoke
  nameWithType: TransientFaultHandler.Invoke
  fullName: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.Invoke
- uid: System.Func{{T}}
  commentId: T:System.Func{``0}
  parent: System
  definition: System.Func`1
  name: Func<T>
  nameWithType: Func<T>
  fullName: System.Func<T>
  nameWithType.vb: Func(Of T)
  fullName.vb: System.Func(Of T)
  name.vb: Func(Of T)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.OnFailedAttempt*
  commentId: Overload:Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.OnFailedAttempt
  isExternal: false
  name: OnFailedAttempt
  nameWithType: TransientFaultHandler.OnFailedAttempt
  fullName: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandler.OnFailedAttempt
- uid: Microsoft.Health.Utility.TransientFaultHandling.FailedAttemptEventArgs
  commentId: T:Microsoft.Health.Utility.TransientFaultHandling.FailedAttemptEventArgs
  parent: Microsoft.Health.Utility.TransientFaultHandling
  isExternal: false
  name: FailedAttemptEventArgs
  nameWithType: FailedAttemptEventArgs
  fullName: Microsoft.Health.Utility.TransientFaultHandling.FailedAttemptEventArgs
