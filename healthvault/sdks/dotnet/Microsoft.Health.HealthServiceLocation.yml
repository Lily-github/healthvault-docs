### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.HealthServiceLocation
  commentId: T:Microsoft.Health.HealthServiceLocation
  id: HealthServiceLocation
  parent: Microsoft.Health
  children:
  - Microsoft.Health.HealthServiceLocation.GetHealthServiceShellUrl(Microsoft.Health.ShellRedirectParameters)
  - Microsoft.Health.HealthServiceLocation.GetHealthServiceShellUrl(System.String)
  - Microsoft.Health.HealthServiceLocation.GetHealthServiceShellUrl(System.String,System.String)
  - Microsoft.Health.HealthServiceLocation.GetHealthServiceShellUrl(System.Uri,System.String)
  - Microsoft.Health.HealthServiceLocation.GetHealthServiceShellUrl(System.Uri,System.String,System.String)
  langs:
  - csharp
  - vb
  name: HealthServiceLocation
  nameWithType: HealthServiceLocation
  fullName: Microsoft.Health.HealthServiceLocation
  type: Class
  source:
    remote:
      path: Microsoft.Health/HealthServiceLocation.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: HealthServiceLocation
    path: ../Microsoft.Health/HealthServiceLocation.cs
    startLine: 14
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nProvides methods that retrieve URLs of important locations for the \nHealthVault service.\n"
  example: []
  syntax:
    content: public static class HealthServiceLocation
    content.vb: Public Module HealthServiceLocation
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Health.HealthServiceLocation.GetHealthServiceShellUrl(Microsoft.Health.ShellRedirectParameters)
  commentId: M:Microsoft.Health.HealthServiceLocation.GetHealthServiceShellUrl(Microsoft.Health.ShellRedirectParameters)
  id: GetHealthServiceShellUrl(Microsoft.Health.ShellRedirectParameters)
  parent: Microsoft.Health.HealthServiceLocation
  langs:
  - csharp
  - vb
  name: GetHealthServiceShellUrl(ShellRedirectParameters)
  nameWithType: HealthServiceLocation.GetHealthServiceShellUrl(ShellRedirectParameters)
  fullName: Microsoft.Health.HealthServiceLocation.GetHealthServiceShellUrl(Microsoft.Health.ShellRedirectParameters)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthServiceLocation.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetHealthServiceShellUrl
    path: ../Microsoft.Health/HealthServiceLocation.cs
    startLine: 31
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nConstructs a URL to be redirected to via the HealthVault service Shell\nURL redirector, given the specified redirect parameters.\n"
  example: []
  syntax:
    content: public static Uri GetHealthServiceShellUrl(ShellRedirectParameters redirectParameters)
    content.vb: Public Shared Function GetHealthServiceShellUrl(redirectParameters As ShellRedirectParameters) As Uri
    parameters:
    - id: redirectParameters
      type: Microsoft.Health.ShellRedirectParameters
      description: "\nParameters used to contruct the redirect URL.\n"
    return:
      type: System.Uri
      description: "\nThe constructed URL.\n"
  overload: Microsoft.Health.HealthServiceLocation.GetHealthServiceShellUrl*
  exceptions:
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "\nThe specified parameters construct an invalid URL.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthServiceLocation.GetHealthServiceShellUrl(System.String)
  commentId: M:Microsoft.Health.HealthServiceLocation.GetHealthServiceShellUrl(System.String)
  id: GetHealthServiceShellUrl(System.String)
  parent: Microsoft.Health.HealthServiceLocation
  langs:
  - csharp
  - vb
  name: GetHealthServiceShellUrl(String)
  nameWithType: HealthServiceLocation.GetHealthServiceShellUrl(String)
  fullName: Microsoft.Health.HealthServiceLocation.GetHealthServiceShellUrl(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthServiceLocation.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetHealthServiceShellUrl
    path: ../Microsoft.Health/HealthServiceLocation.cs
    startLine: 67
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nConstructs a URL to be redirected to via the HealthVault service Shell\nURL redirector, given the specified location.\n"
  remarks: "\nThe <span class=\"paramref\">targetLocation</span> is passed as the target \nparameter value to the redirector URL.\n"
  example: []
  syntax:
    content: public static Uri GetHealthServiceShellUrl(string targetLocation)
    content.vb: Public Shared Function GetHealthServiceShellUrl(targetLocation As String) As Uri
    parameters:
    - id: targetLocation
      type: System.String
      description: "\nA known constant indicating the internal HealthVault \nservice Shell location to redirect to.\nSee <a href=\"http://msdn.microsoft.com/en-us/library/ff803620.aspx\">Shell redirect interface</a>.\n"
    return:
      type: System.Uri
      description: "\nThe constructed URL.\n"
  overload: Microsoft.Health.HealthServiceLocation.GetHealthServiceShellUrl*
  exceptions:
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "\nThe specific target location constructs an improper URL.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthServiceLocation.GetHealthServiceShellUrl(System.Uri,System.String)
  commentId: M:Microsoft.Health.HealthServiceLocation.GetHealthServiceShellUrl(System.Uri,System.String)
  id: GetHealthServiceShellUrl(System.Uri,System.String)
  parent: Microsoft.Health.HealthServiceLocation
  langs:
  - csharp
  - vb
  name: GetHealthServiceShellUrl(Uri, String)
  nameWithType: HealthServiceLocation.GetHealthServiceShellUrl(Uri, String)
  fullName: Microsoft.Health.HealthServiceLocation.GetHealthServiceShellUrl(System.Uri, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthServiceLocation.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetHealthServiceShellUrl
    path: ../Microsoft.Health/HealthServiceLocation.cs
    startLine: 100
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nConstructs a URL to be redirected to via the HealthVault service Shell\nURL redirector, given the specified location.\n"
  remarks: "\nThe <span class=\"paramref\">targetLocation</span> is passed as the target \nparameter value to the redirector URL.\n"
  example: []
  syntax:
    content: public static Uri GetHealthServiceShellUrl(Uri shellUrl, string targetLocation)
    content.vb: Public Shared Function GetHealthServiceShellUrl(shellUrl As Uri, targetLocation As String) As Uri
    parameters:
    - id: shellUrl
      type: System.Uri
      description: "\nThe HealthVault Shell redirector URL.\n"
    - id: targetLocation
      type: System.String
      description: "\nA known constant indicating the internal HealthVault \nservice Shell location to redirect to.\nSee <a href=\"http://msdn.microsoft.com/en-us/library/ff803620.aspx\">Shell redirect interface</a>.\n"
    return:
      type: System.Uri
      description: "\nThe constructed URL.\n"
  overload: Microsoft.Health.HealthServiceLocation.GetHealthServiceShellUrl*
  exceptions:
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "\nThe specific target location constructs an improper URL.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthServiceLocation.GetHealthServiceShellUrl(System.String,System.String)
  commentId: M:Microsoft.Health.HealthServiceLocation.GetHealthServiceShellUrl(System.String,System.String)
  id: GetHealthServiceShellUrl(System.String,System.String)
  parent: Microsoft.Health.HealthServiceLocation
  langs:
  - csharp
  - vb
  name: GetHealthServiceShellUrl(String, String)
  nameWithType: HealthServiceLocation.GetHealthServiceShellUrl(String, String)
  fullName: Microsoft.Health.HealthServiceLocation.GetHealthServiceShellUrl(System.String, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthServiceLocation.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetHealthServiceShellUrl
    path: ../Microsoft.Health/HealthServiceLocation.cs
    startLine: 139
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nConstructs a URL to be redirected to via the HealthVault service\nShell URL redirector, given the specified location and query.\n"
  remarks: "\nThe <span class=\"paramref\">targetLocation</span> is passed as the target \nparameter value to the redirector URL.\nThe <span class=\"paramref\">targetQuery</span> is URL-encoded and \npassed to the redirector URL as the target query string parameter \nvalue.\n"
  example: []
  syntax:
    content: public static Uri GetHealthServiceShellUrl(string targetLocation, string targetQuery)
    content.vb: Public Shared Function GetHealthServiceShellUrl(targetLocation As String, targetQuery As String) As Uri
    parameters:
    - id: targetLocation
      type: System.String
      description: "\nA known constant indicating the internal HealthVault \nservice Shell location to redirect to.\nSee <a href=\"http://msdn.microsoft.com/en-us/library/ff803620.aspx\">Shell redirect interface</a>.\n"
    - id: targetQuery
      type: System.String
      description: "\nThe query string value to pass to the URL to which redirection is \ntaking place.\n"
    return:
      type: System.Uri
      description: "\nThe constructed URL.\n"
  overload: Microsoft.Health.HealthServiceLocation.GetHealthServiceShellUrl*
  exceptions:
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "\nThe specific target location constructs an improper URL.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthServiceLocation.GetHealthServiceShellUrl(System.Uri,System.String,System.String)
  commentId: M:Microsoft.Health.HealthServiceLocation.GetHealthServiceShellUrl(System.Uri,System.String,System.String)
  id: GetHealthServiceShellUrl(System.Uri,System.String,System.String)
  parent: Microsoft.Health.HealthServiceLocation
  langs:
  - csharp
  - vb
  name: GetHealthServiceShellUrl(Uri, String, String)
  nameWithType: HealthServiceLocation.GetHealthServiceShellUrl(Uri, String, String)
  fullName: Microsoft.Health.HealthServiceLocation.GetHealthServiceShellUrl(System.Uri, System.String, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthServiceLocation.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetHealthServiceShellUrl
    path: ../Microsoft.Health/HealthServiceLocation.cs
    startLine: 185
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nConstructs a URL to be redirected to via the HealthVault service\nShell URL redirector, given the specified location and query.\n"
  remarks: "\nThe <span class=\"paramref\">targetLocation</span> is passed as the target \nparameter value to the redirector URL.\nThe <span class=\"paramref\">targetQuery</span> is URL-encoded and \npassed to the redirector URL as the target query string parameter \nvalue.\n"
  example: []
  syntax:
    content: public static Uri GetHealthServiceShellUrl(Uri shellUrl, string targetLocation, string targetQuery)
    content.vb: Public Shared Function GetHealthServiceShellUrl(shellUrl As Uri, targetLocation As String, targetQuery As String) As Uri
    parameters:
    - id: shellUrl
      type: System.Uri
      description: "\nThe HealthVault Shell redirector URL.\n"
    - id: targetLocation
      type: System.String
      description: "\nA known constant indicating the internal HealthVault \nservice Shell location to redirect to.\nSee <a href=\"http://msdn.microsoft.com/en-us/library/ff803620.aspx\">Shell redirect interface</a>.\n"
    - id: targetQuery
      type: System.String
      description: "\nThe query string value to pass to the URL to which redirection is \ntaking place.\n"
    return:
      type: System.Uri
      description: "\nThe constructed URL.\n"
  overload: Microsoft.Health.HealthServiceLocation.GetHealthServiceShellUrl*
  exceptions:
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "\nThe specific target location constructs an improper URL.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.HealthServiceLocation.GetHealthServiceShellUrl*
  commentId: Overload:Microsoft.Health.HealthServiceLocation.GetHealthServiceShellUrl
  isExternal: false
  name: GetHealthServiceShellUrl
  nameWithType: HealthServiceLocation.GetHealthServiceShellUrl
  fullName: Microsoft.Health.HealthServiceLocation.GetHealthServiceShellUrl
- uid: System.UriFormatException
  commentId: T:System.UriFormatException
- uid: Microsoft.Health.ShellRedirectParameters
  commentId: T:Microsoft.Health.ShellRedirectParameters
  parent: Microsoft.Health
  isExternal: false
  name: ShellRedirectParameters
  nameWithType: ShellRedirectParameters
  fullName: Microsoft.Health.ShellRedirectParameters
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
