### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.DirectoryItem
  commentId: T:Microsoft.Health.DirectoryItem
  id: DirectoryItem
  parent: Microsoft.Health
  children:
  - Microsoft.Health.DirectoryItem.#ctor
  - Microsoft.Health.DirectoryItem.Categories
  - Microsoft.Health.DirectoryItem.CompanyLogoAlternativeText
  - Microsoft.Health.DirectoryItem.CompanyLogoContentType
  - Microsoft.Health.DirectoryItem.CompanyLogoImage
  - Microsoft.Health.DirectoryItem.CompanyName
  - Microsoft.Health.DirectoryItem.CompanyUrl
  - Microsoft.Health.DirectoryItem.CreatedDate
  - Microsoft.Health.DirectoryItem.DataProviderCategories
  - Microsoft.Health.DirectoryItem.Extensions
  - Microsoft.Health.DirectoryItem.FacebookLikeUrl
  - Microsoft.Health.DirectoryItem.Id
  - Microsoft.Health.DirectoryItem.InformationUrl
  - Microsoft.Health.DirectoryItem.LongDescription
  - Microsoft.Health.DirectoryItem.MobilePlatformAppUrls
  - Microsoft.Health.DirectoryItem.Name
  - Microsoft.Health.DirectoryItem.ShortDescription
  - Microsoft.Health.DirectoryItem.SupportedRecordLocations
  - Microsoft.Health.DirectoryItem.ThingTypeIds
  - Microsoft.Health.DirectoryItem.UpdatedDate
  langs:
  - csharp
  - vb
  name: DirectoryItem
  nameWithType: DirectoryItem
  fullName: Microsoft.Health.DirectoryItem
  type: Class
  source:
    remote:
      path: Microsoft.Health.Directory/directoryitem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DirectoryItem
    path: directoryitem.cs
    startLine: 23
  assemblies:
  - Microsoft.Health.Directory
  namespace: Microsoft.Health
  summary: "\nDefines the base information for a HealthVault directory item.\n"
  remarks: "\nUse inherited classes such as such <xref href=\"Microsoft.Health.ApplicationDirectoryItem\" data-throw-if-not-resolved=\"false\"></xref> \nor <xref href=\"Microsoft.Health.DeviceDirectoryItem\" data-throw-if-not-resolved=\"false\"></xref> .    \n"
  example: []
  syntax:
    content: public abstract class DirectoryItem
    content.vb: Public MustInherit Class DirectoryItem
  inheritance:
  - System.Object
  derivedClasses:
  - Microsoft.Health.ApplicationDirectoryItem
  - Microsoft.Health.DeviceDirectoryItem
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.Health.DirectoryItem.#ctor
  commentId: M:Microsoft.Health.DirectoryItem.#ctor
  id: '#ctor'
  parent: Microsoft.Health.DirectoryItem
  langs:
  - csharp
  - vb
  name: DirectoryItem()
  nameWithType: DirectoryItem.DirectoryItem()
  fullName: Microsoft.Health.DirectoryItem.DirectoryItem()
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Directory/directoryitem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: directoryitem.cs
    startLine: 32
  assemblies:
  - Microsoft.Health.Directory
  namespace: Microsoft.Health
  summary: "\nConstructs an <xref href=\"Microsoft.Health.DirectoryItem\" data-throw-if-not-resolved=\"false\"></xref> instance with default values.\n"
  example: []
  syntax:
    content: protected DirectoryItem()
    content.vb: Protected Sub New
  overload: Microsoft.Health.DirectoryItem.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.Health.DirectoryItem.Id
  commentId: P:Microsoft.Health.DirectoryItem.Id
  id: Id
  parent: Microsoft.Health.DirectoryItem
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: DirectoryItem.Id
  fullName: Microsoft.Health.DirectoryItem.Id
  type: Property
  source:
    remote:
      path: Microsoft.Health.Directory/directoryitem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Id
    path: directoryitem.cs
    startLine: 41
  assemblies:
  - Microsoft.Health.Directory
  namespace: Microsoft.Health
  summary: "\nGets or sets the unique directory item identifier.\n"
  example: []
  syntax:
    content: public Guid Id { get; set; }
    content.vb: Public Property Id As Guid
    parameters: []
    return:
      type: System.Guid
  overload: Microsoft.Health.DirectoryItem.Id*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.DirectoryItem.CreatedDate
  commentId: P:Microsoft.Health.DirectoryItem.CreatedDate
  id: CreatedDate
  parent: Microsoft.Health.DirectoryItem
  langs:
  - csharp
  - vb
  name: CreatedDate
  nameWithType: DirectoryItem.CreatedDate
  fullName: Microsoft.Health.DirectoryItem.CreatedDate
  type: Property
  source:
    remote:
      path: Microsoft.Health.Directory/directoryitem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CreatedDate
    path: directoryitem.cs
    startLine: 52
  assemblies:
  - Microsoft.Health.Directory
  namespace: Microsoft.Health
  summary: "\nGets or sets the created date of the directory item.\n"
  example: []
  syntax:
    content: public DateTime CreatedDate { get; set; }
    content.vb: Public Property CreatedDate As Date
    parameters: []
    return:
      type: System.DateTime
  overload: Microsoft.Health.DirectoryItem.CreatedDate*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.DirectoryItem.UpdatedDate
  commentId: P:Microsoft.Health.DirectoryItem.UpdatedDate
  id: UpdatedDate
  parent: Microsoft.Health.DirectoryItem
  langs:
  - csharp
  - vb
  name: UpdatedDate
  nameWithType: DirectoryItem.UpdatedDate
  fullName: Microsoft.Health.DirectoryItem.UpdatedDate
  type: Property
  source:
    remote:
      path: Microsoft.Health.Directory/directoryitem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: UpdatedDate
    path: directoryitem.cs
    startLine: 63
  assemblies:
  - Microsoft.Health.Directory
  namespace: Microsoft.Health
  summary: "\nGets or sets the updated date of the directory item.\n"
  example: []
  syntax:
    content: public DateTime UpdatedDate { get; set; }
    content.vb: Public Property UpdatedDate As Date
    parameters: []
    return:
      type: System.DateTime
  overload: Microsoft.Health.DirectoryItem.UpdatedDate*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.DirectoryItem.Name
  commentId: P:Microsoft.Health.DirectoryItem.Name
  id: Name
  parent: Microsoft.Health.DirectoryItem
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: DirectoryItem.Name
  fullName: Microsoft.Health.DirectoryItem.Name
  type: Property
  source:
    remote:
      path: Microsoft.Health.Directory/directoryitem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Name
    path: directoryitem.cs
    startLine: 77
  assemblies:
  - Microsoft.Health.Directory
  namespace: Microsoft.Health
  summary: "\nGets a dictionary of language specifiers and localized names of the directory item.\n"
  remarks: "\nThe key is the language-country string such as \"en-US\", and the value is the localized version of the string.\n"
  example: []
  syntax:
    content: public CultureSpecificStringDictionary Name { get; }
    content.vb: Public ReadOnly Property Name As CultureSpecificStringDictionary
    parameters: []
    return:
      type: Microsoft.Health.CultureSpecificStringDictionary
  overload: Microsoft.Health.DirectoryItem.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.DirectoryItem.CompanyLogoAlternativeText
  commentId: P:Microsoft.Health.DirectoryItem.CompanyLogoAlternativeText
  id: CompanyLogoAlternativeText
  parent: Microsoft.Health.DirectoryItem
  langs:
  - csharp
  - vb
  name: CompanyLogoAlternativeText
  nameWithType: DirectoryItem.CompanyLogoAlternativeText
  fullName: Microsoft.Health.DirectoryItem.CompanyLogoAlternativeText
  type: Property
  source:
    remote:
      path: Microsoft.Health.Directory/directoryitem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CompanyLogoAlternativeText
    path: directoryitem.cs
    startLine: 87
  assemblies:
  - Microsoft.Health.Directory
  namespace: Microsoft.Health
  summary: "\nGets or sets the company logo of the directory item.\n"
  example: []
  syntax:
    content: public CultureSpecificStringDictionary CompanyLogoAlternativeText { get; }
    content.vb: Public ReadOnly Property CompanyLogoAlternativeText As CultureSpecificStringDictionary
    parameters: []
    return:
      type: Microsoft.Health.CultureSpecificStringDictionary
  overload: Microsoft.Health.DirectoryItem.CompanyLogoAlternativeText*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.DirectoryItem.CompanyLogoImage
  commentId: P:Microsoft.Health.DirectoryItem.CompanyLogoImage
  id: CompanyLogoImage
  parent: Microsoft.Health.DirectoryItem
  langs:
  - csharp
  - vb
  name: CompanyLogoImage
  nameWithType: DirectoryItem.CompanyLogoImage
  fullName: Microsoft.Health.DirectoryItem.CompanyLogoImage
  type: Property
  source:
    remote:
      path: Microsoft.Health.Directory/directoryitem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CompanyLogoImage
    path: directoryitem.cs
    startLine: 98
  assemblies:
  - Microsoft.Health.Directory
  namespace: Microsoft.Health
  summary: "\nGets the image byte array of screenshot.\n"
  remarks: "\nThe key is the language-country string such as \"en-US\", and the value is the localized versions of the image.\n"
  example: []
  syntax:
    content: public CultureSpecificByteArrayDictionary CompanyLogoImage { get; }
    content.vb: Public ReadOnly Property CompanyLogoImage As CultureSpecificByteArrayDictionary
    parameters: []
    return:
      type: Microsoft.Health.CultureSpecificByteArrayDictionary
  overload: Microsoft.Health.DirectoryItem.CompanyLogoImage*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.DirectoryItem.CompanyLogoContentType
  commentId: P:Microsoft.Health.DirectoryItem.CompanyLogoContentType
  id: CompanyLogoContentType
  parent: Microsoft.Health.DirectoryItem
  langs:
  - csharp
  - vb
  name: CompanyLogoContentType
  nameWithType: DirectoryItem.CompanyLogoContentType
  fullName: Microsoft.Health.DirectoryItem.CompanyLogoContentType
  type: Property
  source:
    remote:
      path: Microsoft.Health.Directory/directoryitem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CompanyLogoContentType
    path: directoryitem.cs
    startLine: 107
  assemblies:
  - Microsoft.Health.Directory
  namespace: Microsoft.Health
  summary: "\nGets or sets the company logo image type of the directory item.\n"
  example: []
  syntax:
    content: public string CompanyLogoContentType { get; set; }
    content.vb: Public Property CompanyLogoContentType As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Health.DirectoryItem.CompanyLogoContentType*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.DirectoryItem.CompanyName
  commentId: P:Microsoft.Health.DirectoryItem.CompanyName
  id: CompanyName
  parent: Microsoft.Health.DirectoryItem
  langs:
  - csharp
  - vb
  name: CompanyName
  nameWithType: DirectoryItem.CompanyName
  fullName: Microsoft.Health.DirectoryItem.CompanyName
  type: Property
  source:
    remote:
      path: Microsoft.Health.Directory/directoryitem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CompanyName
    path: directoryitem.cs
    startLine: 121
  assemblies:
  - Microsoft.Health.Directory
  namespace: Microsoft.Health
  summary: "\nGets a dictionary of language specifiers and localized partner\nnames of the directory item.\n"
  remarks: "\nThe key is the language-country string such as \"en-US\", and the\nvalue is the localized versions of the string.\n"
  example: []
  syntax:
    content: public CultureSpecificStringDictionary CompanyName { get; }
    content.vb: Public ReadOnly Property CompanyName As CultureSpecificStringDictionary
    parameters: []
    return:
      type: Microsoft.Health.CultureSpecificStringDictionary
  overload: Microsoft.Health.DirectoryItem.CompanyName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.DirectoryItem.CompanyUrl
  commentId: P:Microsoft.Health.DirectoryItem.CompanyUrl
  id: CompanyUrl
  parent: Microsoft.Health.DirectoryItem
  langs:
  - csharp
  - vb
  name: CompanyUrl
  nameWithType: DirectoryItem.CompanyUrl
  fullName: Microsoft.Health.DirectoryItem.CompanyUrl
  type: Property
  source:
    remote:
      path: Microsoft.Health.Directory/directoryitem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CompanyUrl
    path: directoryitem.cs
    startLine: 137
  assemblies:
  - Microsoft.Health.Directory
  namespace: Microsoft.Health
  summary: "\nGets a dictionary of language specifiers and localized URL to retrieve \ncompany url of the directory item.\n"
  remarks: "\nThe key is the language-country string such as \"en-US\", and the value \nis the localized versions of the URL.\n"
  example: []
  syntax:
    content: public CultureSpecificUrlDictionary CompanyUrl { get; }
    content.vb: Public ReadOnly Property CompanyUrl As CultureSpecificUrlDictionary
    parameters: []
    return:
      type: Microsoft.Health.CultureSpecificUrlDictionary
  overload: Microsoft.Health.DirectoryItem.CompanyUrl*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.DirectoryItem.Categories
  commentId: P:Microsoft.Health.DirectoryItem.Categories
  id: Categories
  parent: Microsoft.Health.DirectoryItem
  langs:
  - csharp
  - vb
  name: Categories
  nameWithType: DirectoryItem.Categories
  fullName: Microsoft.Health.DirectoryItem.Categories
  type: Property
  source:
    remote:
      path: Microsoft.Health.Directory/directoryitem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Categories
    path: directoryitem.cs
    startLine: 148
  assemblies:
  - Microsoft.Health.Directory
  namespace: Microsoft.Health
  summary: "\nGets a list of categories the directory item falls under\n"
  example: []
  syntax:
    content: public Collection<CodedValue> Categories { get; }
    content.vb: Public ReadOnly Property Categories As Collection(Of CodedValue)
    parameters: []
    return:
      type: System.Collections.ObjectModel.Collection{Microsoft.Health.ItemTypes.CodedValue}
  overload: Microsoft.Health.DirectoryItem.Categories*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.DirectoryItem.DataProviderCategories
  commentId: P:Microsoft.Health.DirectoryItem.DataProviderCategories
  id: DataProviderCategories
  parent: Microsoft.Health.DirectoryItem
  langs:
  - csharp
  - vb
  name: DataProviderCategories
  nameWithType: DirectoryItem.DataProviderCategories
  fullName: Microsoft.Health.DirectoryItem.DataProviderCategories
  type: Property
  source:
    remote:
      path: Microsoft.Health.Directory/directoryitem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DataProviderCategories
    path: directoryitem.cs
    startLine: 158
  assemblies:
  - Microsoft.Health.Directory
  namespace: Microsoft.Health
  summary: "\nGets a list of data types the directory item is a data provider for.\n"
  example: []
  syntax:
    content: public Collection<CodedValue> DataProviderCategories { get; }
    content.vb: Public ReadOnly Property DataProviderCategories As Collection(Of CodedValue)
    parameters: []
    return:
      type: System.Collections.ObjectModel.Collection{Microsoft.Health.ItemTypes.CodedValue}
  overload: Microsoft.Health.DirectoryItem.DataProviderCategories*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.DirectoryItem.ShortDescription
  commentId: P:Microsoft.Health.DirectoryItem.ShortDescription
  id: ShortDescription
  parent: Microsoft.Health.DirectoryItem
  langs:
  - csharp
  - vb
  name: ShortDescription
  nameWithType: DirectoryItem.ShortDescription
  fullName: Microsoft.Health.DirectoryItem.ShortDescription
  type: Property
  source:
    remote:
      path: Microsoft.Health.Directory/directoryitem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ShortDescription
    path: directoryitem.cs
    startLine: 173
  assemblies:
  - Microsoft.Health.Directory
  namespace: Microsoft.Health
  summary: "\nGets a dictionary of language specifiers and localized short description\nfor the directory item.\n"
  remarks: "\nThe key is the language-country string such as \"en-US\", and the value \nis the localized versions of the string.\n"
  example: []
  syntax:
    content: public CultureSpecificStringDictionary ShortDescription { get; }
    content.vb: Public ReadOnly Property ShortDescription As CultureSpecificStringDictionary
    parameters: []
    return:
      type: Microsoft.Health.CultureSpecificStringDictionary
  overload: Microsoft.Health.DirectoryItem.ShortDescription*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.DirectoryItem.LongDescription
  commentId: P:Microsoft.Health.DirectoryItem.LongDescription
  id: LongDescription
  parent: Microsoft.Health.DirectoryItem
  langs:
  - csharp
  - vb
  name: LongDescription
  nameWithType: DirectoryItem.LongDescription
  fullName: Microsoft.Health.DirectoryItem.LongDescription
  type: Property
  source:
    remote:
      path: Microsoft.Health.Directory/directoryitem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: LongDescription
    path: directoryitem.cs
    startLine: 189
  assemblies:
  - Microsoft.Health.Directory
  namespace: Microsoft.Health
  summary: "\nGets a dictionary of language specifiers and localized long description \nfor the directory item.\n"
  remarks: "\nThe key is the language-country string such as \"en-US\", and the value \nis the localized versions of the string.\n"
  example: []
  syntax:
    content: public CultureSpecificStringDictionary LongDescription { get; }
    content.vb: Public ReadOnly Property LongDescription As CultureSpecificStringDictionary
    parameters: []
    return:
      type: Microsoft.Health.CultureSpecificStringDictionary
  overload: Microsoft.Health.DirectoryItem.LongDescription*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.DirectoryItem.ThingTypeIds
  commentId: P:Microsoft.Health.DirectoryItem.ThingTypeIds
  id: ThingTypeIds
  parent: Microsoft.Health.DirectoryItem
  langs:
  - csharp
  - vb
  name: ThingTypeIds
  nameWithType: DirectoryItem.ThingTypeIds
  fullName: Microsoft.Health.DirectoryItem.ThingTypeIds
  type: Property
  source:
    remote:
      path: Microsoft.Health.Directory/directoryitem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ThingTypeIds
    path: directoryitem.cs
    startLine: 200
  assemblies:
  - Microsoft.Health.Directory
  namespace: Microsoft.Health
  summary: "\nGets a list of thing type identifiers the directory item interacts with.\n"
  example: []
  syntax:
    content: public Collection<Guid> ThingTypeIds { get; }
    content.vb: Public ReadOnly Property ThingTypeIds As Collection(Of Guid)
    parameters: []
    return:
      type: System.Collections.ObjectModel.Collection{System.Guid}
  overload: Microsoft.Health.DirectoryItem.ThingTypeIds*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.DirectoryItem.InformationUrl
  commentId: P:Microsoft.Health.DirectoryItem.InformationUrl
  id: InformationUrl
  parent: Microsoft.Health.DirectoryItem
  langs:
  - csharp
  - vb
  name: InformationUrl
  nameWithType: DirectoryItem.InformationUrl
  fullName: Microsoft.Health.DirectoryItem.InformationUrl
  type: Property
  source:
    remote:
      path: Microsoft.Health.Directory/directoryitem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: InformationUrl
    path: directoryitem.cs
    startLine: 215
  assemblies:
  - Microsoft.Health.Directory
  namespace: Microsoft.Health
  summary: "\nGets a dictionary of language specifiers and localized URL to retrieve\nmore information on this item.\n"
  remarks: "\nThe key is the language-country string such as \"en-US\", and the value \nis the localized versions of the URL.\n"
  example: []
  syntax:
    content: public CultureSpecificUrlDictionary InformationUrl { get; }
    content.vb: Public ReadOnly Property InformationUrl As CultureSpecificUrlDictionary
    parameters: []
    return:
      type: Microsoft.Health.CultureSpecificUrlDictionary
  overload: Microsoft.Health.DirectoryItem.InformationUrl*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.DirectoryItem.FacebookLikeUrl
  commentId: P:Microsoft.Health.DirectoryItem.FacebookLikeUrl
  id: FacebookLikeUrl
  parent: Microsoft.Health.DirectoryItem
  langs:
  - csharp
  - vb
  name: FacebookLikeUrl
  nameWithType: DirectoryItem.FacebookLikeUrl
  fullName: Microsoft.Health.DirectoryItem.FacebookLikeUrl
  type: Property
  source:
    remote:
      path: Microsoft.Health.Directory/directoryitem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: FacebookLikeUrl
    path: directoryitem.cs
    startLine: 231
  assemblies:
  - Microsoft.Health.Directory
  namespace: Microsoft.Health
  summary: "\nGets a dictionary of language specifiers and facebookLike URL to retrieve more \ninformation on this item.\n"
  remarks: "\nThe key is the language-country string such as \"en-US\", and the value is the \nlocalized versions of the URL.\n"
  example: []
  syntax:
    content: public CultureSpecificUrlDictionary FacebookLikeUrl { get; }
    content.vb: Public ReadOnly Property FacebookLikeUrl As CultureSpecificUrlDictionary
    parameters: []
    return:
      type: Microsoft.Health.CultureSpecificUrlDictionary
  overload: Microsoft.Health.DirectoryItem.FacebookLikeUrl*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.DirectoryItem.MobilePlatformAppUrls
  commentId: P:Microsoft.Health.DirectoryItem.MobilePlatformAppUrls
  id: MobilePlatformAppUrls
  parent: Microsoft.Health.DirectoryItem
  langs:
  - csharp
  - vb
  name: MobilePlatformAppUrls
  nameWithType: DirectoryItem.MobilePlatformAppUrls
  fullName: Microsoft.Health.DirectoryItem.MobilePlatformAppUrls
  type: Property
  source:
    remote:
      path: Microsoft.Health.Directory/directoryitem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: MobilePlatformAppUrls
    path: directoryitem.cs
    startLine: 247
  assemblies:
  - Microsoft.Health.Directory
  namespace: Microsoft.Health
  summary: "\nGets a dictionary of mobile platforms and their corresponding App URLs.\n"
  remarks: "\nThe key is the mobile platform string such as \"wp7\", and the value \nis the URL to the mobile app.\n"
  example: []
  syntax:
    content: public Dictionary<string, Uri> MobilePlatformAppUrls { get; }
    content.vb: Public ReadOnly Property MobilePlatformAppUrls As Dictionary(Of String, Uri)
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Uri}
  overload: Microsoft.Health.DirectoryItem.MobilePlatformAppUrls*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.DirectoryItem.Extensions
  commentId: P:Microsoft.Health.DirectoryItem.Extensions
  id: Extensions
  parent: Microsoft.Health.DirectoryItem
  langs:
  - csharp
  - vb
  name: Extensions
  nameWithType: DirectoryItem.Extensions
  fullName: Microsoft.Health.DirectoryItem.Extensions
  type: Property
  source:
    remote:
      path: Microsoft.Health.Directory/directoryitem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Extensions
    path: directoryitem.cs
    startLine: 260
  assemblies:
  - Microsoft.Health.Directory
  namespace: Microsoft.Health
  summary: "\nGets the extensions stored with this item.\n"
  remarks: "\nKey-value pair where the value can be localized.\n"
  example: []
  syntax:
    content: public Dictionary<string, CultureSpecificStringDictionary> Extensions { get; }
    content.vb: Public ReadOnly Property Extensions As Dictionary(Of String, CultureSpecificStringDictionary)
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.CultureSpecificStringDictionary}
  overload: Microsoft.Health.DirectoryItem.Extensions*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.DirectoryItem.SupportedRecordLocations
  commentId: P:Microsoft.Health.DirectoryItem.SupportedRecordLocations
  id: SupportedRecordLocations
  parent: Microsoft.Health.DirectoryItem
  langs:
  - csharp
  - vb
  name: SupportedRecordLocations
  nameWithType: DirectoryItem.SupportedRecordLocations
  fullName: Microsoft.Health.DirectoryItem.SupportedRecordLocations
  type: Property
  source:
    remote:
      path: Microsoft.Health.Directory/directoryitem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SupportedRecordLocations
    path: directoryitem.cs
    startLine: 273
  assemblies:
  - Microsoft.Health.Directory
  namespace: Microsoft.Health
  summary: "\nCollection of record locations supported for an app or a device.\n"
  remarks: "\nLocation information supporting all locations or a specific country and state/province.\n"
  example: []
  syntax:
    content: public LocationCollection SupportedRecordLocations { get; }
    content.vb: Public ReadOnly Property SupportedRecordLocations As LocationCollection
    parameters: []
    return:
      type: Microsoft.Health.LocationCollection
  overload: Microsoft.Health.DirectoryItem.SupportedRecordLocations*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Microsoft.Health.ApplicationDirectoryItem
  commentId: T:Microsoft.Health.ApplicationDirectoryItem
  isExternal: false
  name: ApplicationDirectoryItem
  nameWithType: ApplicationDirectoryItem
  fullName: Microsoft.Health.ApplicationDirectoryItem
- uid: Microsoft.Health.DeviceDirectoryItem
  commentId: T:Microsoft.Health.DeviceDirectoryItem
  isExternal: false
  name: DeviceDirectoryItem
  nameWithType: DeviceDirectoryItem
  fullName: Microsoft.Health.DeviceDirectoryItem
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.DirectoryItem
  commentId: T:Microsoft.Health.DirectoryItem
  parent: Microsoft.Health
  isExternal: false
  name: DirectoryItem
  nameWithType: DirectoryItem
  fullName: Microsoft.Health.DirectoryItem
- uid: Microsoft.Health.DirectoryItem.#ctor*
  commentId: Overload:Microsoft.Health.DirectoryItem.#ctor
  isExternal: false
  name: DirectoryItem
  nameWithType: DirectoryItem.DirectoryItem
  fullName: Microsoft.Health.DirectoryItem.DirectoryItem
- uid: Microsoft.Health.DirectoryItem.Id*
  commentId: Overload:Microsoft.Health.DirectoryItem.Id
  isExternal: false
  name: Id
  nameWithType: DirectoryItem.Id
  fullName: Microsoft.Health.DirectoryItem.Id
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: Microsoft.Health.DirectoryItem.CreatedDate*
  commentId: Overload:Microsoft.Health.DirectoryItem.CreatedDate
  isExternal: false
  name: CreatedDate
  nameWithType: DirectoryItem.CreatedDate
  fullName: Microsoft.Health.DirectoryItem.CreatedDate
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: Microsoft.Health.DirectoryItem.UpdatedDate*
  commentId: Overload:Microsoft.Health.DirectoryItem.UpdatedDate
  isExternal: false
  name: UpdatedDate
  nameWithType: DirectoryItem.UpdatedDate
  fullName: Microsoft.Health.DirectoryItem.UpdatedDate
- uid: Microsoft.Health.DirectoryItem.Name*
  commentId: Overload:Microsoft.Health.DirectoryItem.Name
  isExternal: false
  name: Name
  nameWithType: DirectoryItem.Name
  fullName: Microsoft.Health.DirectoryItem.Name
- uid: Microsoft.Health.CultureSpecificStringDictionary
  commentId: T:Microsoft.Health.CultureSpecificStringDictionary
  parent: Microsoft.Health
  isExternal: false
  name: CultureSpecificStringDictionary
  nameWithType: CultureSpecificStringDictionary
  fullName: Microsoft.Health.CultureSpecificStringDictionary
- uid: Microsoft.Health.DirectoryItem.CompanyLogoAlternativeText*
  commentId: Overload:Microsoft.Health.DirectoryItem.CompanyLogoAlternativeText
  isExternal: false
  name: CompanyLogoAlternativeText
  nameWithType: DirectoryItem.CompanyLogoAlternativeText
  fullName: Microsoft.Health.DirectoryItem.CompanyLogoAlternativeText
- uid: Microsoft.Health.DirectoryItem.CompanyLogoImage*
  commentId: Overload:Microsoft.Health.DirectoryItem.CompanyLogoImage
  isExternal: false
  name: CompanyLogoImage
  nameWithType: DirectoryItem.CompanyLogoImage
  fullName: Microsoft.Health.DirectoryItem.CompanyLogoImage
- uid: Microsoft.Health.CultureSpecificByteArrayDictionary
  commentId: T:Microsoft.Health.CultureSpecificByteArrayDictionary
  parent: Microsoft.Health
  isExternal: false
  name: CultureSpecificByteArrayDictionary
  nameWithType: CultureSpecificByteArrayDictionary
  fullName: Microsoft.Health.CultureSpecificByteArrayDictionary
- uid: Microsoft.Health.DirectoryItem.CompanyLogoContentType*
  commentId: Overload:Microsoft.Health.DirectoryItem.CompanyLogoContentType
  isExternal: false
  name: CompanyLogoContentType
  nameWithType: DirectoryItem.CompanyLogoContentType
  fullName: Microsoft.Health.DirectoryItem.CompanyLogoContentType
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Health.DirectoryItem.CompanyName*
  commentId: Overload:Microsoft.Health.DirectoryItem.CompanyName
  isExternal: false
  name: CompanyName
  nameWithType: DirectoryItem.CompanyName
  fullName: Microsoft.Health.DirectoryItem.CompanyName
- uid: Microsoft.Health.DirectoryItem.CompanyUrl*
  commentId: Overload:Microsoft.Health.DirectoryItem.CompanyUrl
  isExternal: false
  name: CompanyUrl
  nameWithType: DirectoryItem.CompanyUrl
  fullName: Microsoft.Health.DirectoryItem.CompanyUrl
- uid: Microsoft.Health.CultureSpecificUrlDictionary
  commentId: T:Microsoft.Health.CultureSpecificUrlDictionary
  parent: Microsoft.Health
  isExternal: false
  name: CultureSpecificUrlDictionary
  nameWithType: CultureSpecificUrlDictionary
  fullName: Microsoft.Health.CultureSpecificUrlDictionary
- uid: Microsoft.Health.DirectoryItem.Categories*
  commentId: Overload:Microsoft.Health.DirectoryItem.Categories
  isExternal: false
  name: Categories
  nameWithType: DirectoryItem.Categories
  fullName: Microsoft.Health.DirectoryItem.Categories
- uid: System.Collections.ObjectModel.Collection{Microsoft.Health.ItemTypes.CodedValue}
  commentId: T:System.Collections.ObjectModel.Collection{Microsoft.Health.ItemTypes.CodedValue}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.Collection`1
  name: Collection<CodedValue>
  nameWithType: Collection<CodedValue>
  fullName: System.Collections.ObjectModel.Collection<Microsoft.Health.ItemTypes.CodedValue>
  nameWithType.vb: Collection(Of CodedValue)
  fullName.vb: System.Collections.ObjectModel.Collection(Of Microsoft.Health.ItemTypes.CodedValue)
  name.vb: Collection(Of CodedValue)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.ItemTypes.CodedValue
    name: CodedValue
    nameWithType: CodedValue
    fullName: Microsoft.Health.ItemTypes.CodedValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.ItemTypes.CodedValue
    name: CodedValue
    nameWithType: CodedValue
    fullName: Microsoft.Health.ItemTypes.CodedValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.Collection`1
  commentId: T:System.Collections.ObjectModel.Collection`1
  isExternal: true
  name: Collection<T>
  nameWithType: Collection<T>
  fullName: System.Collections.ObjectModel.Collection<T>
  nameWithType.vb: Collection(Of T)
  fullName.vb: System.Collections.ObjectModel.Collection(Of T)
  name.vb: Collection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: Microsoft.Health.DirectoryItem.DataProviderCategories*
  commentId: Overload:Microsoft.Health.DirectoryItem.DataProviderCategories
  isExternal: false
  name: DataProviderCategories
  nameWithType: DirectoryItem.DataProviderCategories
  fullName: Microsoft.Health.DirectoryItem.DataProviderCategories
- uid: Microsoft.Health.DirectoryItem.ShortDescription*
  commentId: Overload:Microsoft.Health.DirectoryItem.ShortDescription
  isExternal: false
  name: ShortDescription
  nameWithType: DirectoryItem.ShortDescription
  fullName: Microsoft.Health.DirectoryItem.ShortDescription
- uid: Microsoft.Health.DirectoryItem.LongDescription*
  commentId: Overload:Microsoft.Health.DirectoryItem.LongDescription
  isExternal: false
  name: LongDescription
  nameWithType: DirectoryItem.LongDescription
  fullName: Microsoft.Health.DirectoryItem.LongDescription
- uid: Microsoft.Health.DirectoryItem.ThingTypeIds*
  commentId: Overload:Microsoft.Health.DirectoryItem.ThingTypeIds
  isExternal: false
  name: ThingTypeIds
  nameWithType: DirectoryItem.ThingTypeIds
  fullName: Microsoft.Health.DirectoryItem.ThingTypeIds
- uid: System.Collections.ObjectModel.Collection{System.Guid}
  commentId: T:System.Collections.ObjectModel.Collection{System.Guid}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.Collection`1
  name: Collection<Guid>
  nameWithType: Collection<Guid>
  fullName: System.Collections.ObjectModel.Collection<System.Guid>
  nameWithType.vb: Collection(Of Guid)
  fullName.vb: System.Collections.ObjectModel.Collection(Of System.Guid)
  name.vb: Collection(Of Guid)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.DirectoryItem.InformationUrl*
  commentId: Overload:Microsoft.Health.DirectoryItem.InformationUrl
  isExternal: false
  name: InformationUrl
  nameWithType: DirectoryItem.InformationUrl
  fullName: Microsoft.Health.DirectoryItem.InformationUrl
- uid: Microsoft.Health.DirectoryItem.FacebookLikeUrl*
  commentId: Overload:Microsoft.Health.DirectoryItem.FacebookLikeUrl
  isExternal: false
  name: FacebookLikeUrl
  nameWithType: DirectoryItem.FacebookLikeUrl
  fullName: Microsoft.Health.DirectoryItem.FacebookLikeUrl
- uid: Microsoft.Health.DirectoryItem.MobilePlatformAppUrls*
  commentId: Overload:Microsoft.Health.DirectoryItem.MobilePlatformAppUrls
  isExternal: false
  name: MobilePlatformAppUrls
  nameWithType: DirectoryItem.MobilePlatformAppUrls
  fullName: Microsoft.Health.DirectoryItem.MobilePlatformAppUrls
- uid: System.Collections.Generic.Dictionary{System.String,System.Uri}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Uri}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, Uri>
  nameWithType: Dictionary<String, Uri>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Uri>
  nameWithType.vb: Dictionary(Of String, Uri)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Uri)
  name.vb: Dictionary(Of String, Uri)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Health.DirectoryItem.Extensions*
  commentId: Overload:Microsoft.Health.DirectoryItem.Extensions
  isExternal: false
  name: Extensions
  nameWithType: DirectoryItem.Extensions
  fullName: Microsoft.Health.DirectoryItem.Extensions
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Health.CultureSpecificStringDictionary}
  commentId: T:System.Collections.Generic.Dictionary{System.String,Microsoft.Health.CultureSpecificStringDictionary}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, CultureSpecificStringDictionary>
  nameWithType: Dictionary<String, CultureSpecificStringDictionary>
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Health.CultureSpecificStringDictionary>
  nameWithType.vb: Dictionary(Of String, CultureSpecificStringDictionary)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Health.CultureSpecificStringDictionary)
  name.vb: Dictionary(Of String, CultureSpecificStringDictionary)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.CultureSpecificStringDictionary
    name: CultureSpecificStringDictionary
    nameWithType: CultureSpecificStringDictionary
    fullName: Microsoft.Health.CultureSpecificStringDictionary
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.CultureSpecificStringDictionary
    name: CultureSpecificStringDictionary
    nameWithType: CultureSpecificStringDictionary
    fullName: Microsoft.Health.CultureSpecificStringDictionary
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.DirectoryItem.SupportedRecordLocations*
  commentId: Overload:Microsoft.Health.DirectoryItem.SupportedRecordLocations
  isExternal: false
  name: SupportedRecordLocations
  nameWithType: DirectoryItem.SupportedRecordLocations
  fullName: Microsoft.Health.DirectoryItem.SupportedRecordLocations
- uid: Microsoft.Health.LocationCollection
  commentId: T:Microsoft.Health.LocationCollection
  parent: Microsoft.Health
  isExternal: false
  name: LocationCollection
  nameWithType: LocationCollection
  fullName: Microsoft.Health.LocationCollection
