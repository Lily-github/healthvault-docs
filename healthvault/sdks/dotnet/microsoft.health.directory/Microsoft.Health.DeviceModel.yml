### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.DeviceModel
  commentId: T:Microsoft.Health.DeviceModel
  id: DeviceModel
  parent: Microsoft.Health
  children:
  - Microsoft.Health.DeviceModel.#ctor
  - Microsoft.Health.DeviceModel.DisplayName
  - Microsoft.Health.DeviceModel.GetSchema
  - Microsoft.Health.DeviceModel.Name
  - Microsoft.Health.DeviceModel.PurchaseUrl
  - Microsoft.Health.DeviceModel.ReadXml(System.Xml.XmlReader)
  - Microsoft.Health.DeviceModel.Screenshots
  - Microsoft.Health.DeviceModel.WindowsClientInformation
  - Microsoft.Health.DeviceModel.WriteXml(System.Xml.XmlWriter)
  langs:
  - csharp
  - vb
  name: DeviceModel
  nameWithType: DeviceModel
  fullName: Microsoft.Health.DeviceModel
  type: Class
  source:
    remote:
      path: Microsoft.Health.Directory/devicemodel.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DeviceModel
    path: devicemodel.cs
    startLine: 24
  assemblies:
  - Microsoft.Health.Directory
  namespace: Microsoft.Health
  summary: "\nDefines the information for a HealthVault DeviceModel.\nA device model contains information for a model of a device.\n"
  remarks: "\nDevice model information typically consists of name, and Windows Portable Device information.\nSupplementary information like purchase url, screenshots, driver packages, etc. are also available.\n"
  example: []
  syntax:
    content: 'public class DeviceModel : IXmlSerializable'
    content.vb: >-
      Public Class DeviceModel
          Implements IXmlSerializable
  inheritance:
  - System.Object
  implements:
  - System.Xml.Serialization.IXmlSerializable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.DeviceModel.#ctor
  commentId: M:Microsoft.Health.DeviceModel.#ctor
  id: '#ctor'
  parent: Microsoft.Health.DeviceModel
  langs:
  - csharp
  - vb
  name: DeviceModel()
  nameWithType: DeviceModel.DeviceModel()
  fullName: Microsoft.Health.DeviceModel.DeviceModel()
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Directory/devicemodel.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: devicemodel.cs
    startLine: 30
  assemblies:
  - Microsoft.Health.Directory
  namespace: Microsoft.Health
  summary: "\nCreates a new instance of the <xref href=\"Microsoft.Health.DeviceModel\" data-throw-if-not-resolved=\"false\"></xref> class with default parameters.\n"
  example: []
  syntax:
    content: public DeviceModel()
    content.vb: Public Sub New
  overload: Microsoft.Health.DeviceModel.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.DeviceModel.Screenshots
  commentId: P:Microsoft.Health.DeviceModel.Screenshots
  id: Screenshots
  parent: Microsoft.Health.DeviceModel
  langs:
  - csharp
  - vb
  name: Screenshots
  nameWithType: DeviceModel.Screenshots
  fullName: Microsoft.Health.DeviceModel.Screenshots
  type: Property
  source:
    remote:
      path: Microsoft.Health.Directory/devicemodel.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Screenshots
    path: devicemodel.cs
    startLine: 40
  assemblies:
  - Microsoft.Health.Directory
  namespace: Microsoft.Health
  summary: "\nGets a collection of screenshots for this device model.\n"
  example: []
  syntax:
    content: public Collection<Screenshot> Screenshots { get; }
    content.vb: Public ReadOnly Property Screenshots As Collection(Of Screenshot)
    parameters: []
    return:
      type: System.Collections.ObjectModel.Collection{Microsoft.Health.Screenshot}
  overload: Microsoft.Health.DeviceModel.Screenshots*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.DeviceModel.Name
  commentId: P:Microsoft.Health.DeviceModel.Name
  id: Name
  parent: Microsoft.Health.DeviceModel
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: DeviceModel.Name
  fullName: Microsoft.Health.DeviceModel.Name
  type: Property
  source:
    remote:
      path: Microsoft.Health.Directory/devicemodel.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Name
    path: devicemodel.cs
    startLine: 53
  assemblies:
  - Microsoft.Health.Directory
  namespace: Microsoft.Health
  summary: "\nGets or sets the name of the device model.\n"
  remarks: "\nMaximum length is 128 characters.\n"
  example: []
  syntax:
    content: public string Name { get; set; }
    content.vb: Public Property Name As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Health.DeviceModel.Name*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.DeviceModel.DisplayName
  commentId: P:Microsoft.Health.DeviceModel.DisplayName
  id: DisplayName
  parent: Microsoft.Health.DeviceModel
  langs:
  - csharp
  - vb
  name: DisplayName
  nameWithType: DeviceModel.DisplayName
  fullName: Microsoft.Health.DeviceModel.DisplayName
  type: Property
  source:
    remote:
      path: Microsoft.Health.Directory/devicemodel.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DisplayName
    path: devicemodel.cs
    startLine: 68
  assemblies:
  - Microsoft.Health.Directory
  namespace: Microsoft.Health
  summary: "\nGets a dictionary of language specifiers and localized friendly display name of the device model.\n"
  remarks: "\nMaximum length of each string is 255 characters.\nThe key is the language-country string such as \"en-US\", and the value is of type string.\n"
  example: []
  syntax:
    content: public CultureSpecificStringDictionary DisplayName { get; }
    content.vb: Public ReadOnly Property DisplayName As CultureSpecificStringDictionary
    parameters: []
    return:
      type: Microsoft.Health.CultureSpecificStringDictionary
  overload: Microsoft.Health.DeviceModel.DisplayName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.DeviceModel.PurchaseUrl
  commentId: P:Microsoft.Health.DeviceModel.PurchaseUrl
  id: PurchaseUrl
  parent: Microsoft.Health.DeviceModel
  langs:
  - csharp
  - vb
  name: PurchaseUrl
  nameWithType: DeviceModel.PurchaseUrl
  fullName: Microsoft.Health.DeviceModel.PurchaseUrl
  type: Property
  source:
    remote:
      path: Microsoft.Health.Directory/devicemodel.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: PurchaseUrl
    path: devicemodel.cs
    startLine: 81
  assemblies:
  - Microsoft.Health.Directory
  namespace: Microsoft.Health
  summary: "\nGets dictionary of language specifiers and localized URL to retrieve the purchase url on this device model.\n"
  remarks: "\nThe key is the language-country string such as \"en-US\", and the value is of type string.\n"
  example: []
  syntax:
    content: public CultureSpecificUrlDictionary PurchaseUrl { get; }
    content.vb: Public ReadOnly Property PurchaseUrl As CultureSpecificUrlDictionary
    parameters: []
    return:
      type: Microsoft.Health.CultureSpecificUrlDictionary
  overload: Microsoft.Health.DeviceModel.PurchaseUrl*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.DeviceModel.WindowsClientInformation
  commentId: P:Microsoft.Health.DeviceModel.WindowsClientInformation
  id: WindowsClientInformation
  parent: Microsoft.Health.DeviceModel
  langs:
  - csharp
  - vb
  name: WindowsClientInformation
  nameWithType: DeviceModel.WindowsClientInformation
  fullName: Microsoft.Health.DeviceModel.WindowsClientInformation
  type: Property
  source:
    remote:
      path: Microsoft.Health.Directory/devicemodel.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: WindowsClientInformation
    path: devicemodel.cs
    startLine: 91
  assemblies:
  - Microsoft.Health.Directory
  namespace: Microsoft.Health
  summary: "\nGets or sets information required for windows clients in order to detect the device and install the appropriate driver for it.\n"
  example: []
  syntax:
    content: public DeviceWindowsClientInformation WindowsClientInformation { get; set; }
    content.vb: Public Property WindowsClientInformation As DeviceWindowsClientInformation
    parameters: []
    return:
      type: Microsoft.Health.DeviceWindowsClientInformation
  overload: Microsoft.Health.DeviceModel.WindowsClientInformation*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.DeviceModel.GetSchema
  commentId: M:Microsoft.Health.DeviceModel.GetSchema
  id: GetSchema
  parent: Microsoft.Health.DeviceModel
  langs:
  - csharp
  - vb
  name: GetSchema()
  nameWithType: DeviceModel.GetSchema()
  fullName: Microsoft.Health.DeviceModel.GetSchema()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Directory/devicemodel.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetSchema
    path: devicemodel.cs
    startLine: 107
  assemblies:
  - Microsoft.Health.Directory
  namespace: Microsoft.Health
  summary: "\nGet the schema as per IXmlSerializable requirement.\nAlways returns null.\n"
  example: []
  syntax:
    content: public XmlSchema GetSchema()
    content.vb: Public Function GetSchema As XmlSchema
    return:
      type: System.Xml.Schema.XmlSchema
      description: "null"
  overload: Microsoft.Health.DeviceModel.GetSchema*
  implements:
  - System.Xml.Serialization.IXmlSerializable.GetSchema
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.DeviceModel.ReadXml(System.Xml.XmlReader)
  commentId: M:Microsoft.Health.DeviceModel.ReadXml(System.Xml.XmlReader)
  id: ReadXml(System.Xml.XmlReader)
  parent: Microsoft.Health.DeviceModel
  langs:
  - csharp
  - vb
  name: ReadXml(XmlReader)
  nameWithType: DeviceModel.ReadXml(XmlReader)
  fullName: Microsoft.Health.DeviceModel.ReadXml(System.Xml.XmlReader)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Directory/devicemodel.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ReadXml
    path: devicemodel.cs
    startLine: 127
  assemblies:
  - Microsoft.Health.Directory
  namespace: Microsoft.Health
  summary: "\nGenerates an object from its XML representation.\n"
  remarks: "\nThe ReadXml method must reconstitute your object using the information that was written by the WriteXml method\n"
  example: []
  syntax:
    content: public void ReadXml(XmlReader reader)
    content.vb: Public Sub ReadXml(reader As XmlReader)
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "\nThe XmlReader stream from which the object is deserialized.\n"
  overload: Microsoft.Health.DeviceModel.ReadXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf the argument <span class=\"paramref\">reader</span> was <strong>null</strong>.\n"
  implements:
  - System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.DeviceModel.WriteXml(System.Xml.XmlWriter)
  commentId: M:Microsoft.Health.DeviceModel.WriteXml(System.Xml.XmlWriter)
  id: WriteXml(System.Xml.XmlWriter)
  parent: Microsoft.Health.DeviceModel
  langs:
  - csharp
  - vb
  name: WriteXml(XmlWriter)
  nameWithType: DeviceModel.WriteXml(XmlWriter)
  fullName: Microsoft.Health.DeviceModel.WriteXml(System.Xml.XmlWriter)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Directory/devicemodel.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: WriteXml
    path: devicemodel.cs
    startLine: 161
  assemblies:
  - Microsoft.Health.Directory
  namespace: Microsoft.Health
  summary: "\nConverts an object into its XML representation.\n"
  remarks: "\nWrite sufficient information to the XmlWriter stream to allow the ReadXml method to reconstitute the object.\n"
  example: []
  syntax:
    content: public void WriteXml(XmlWriter writer)
    content.vb: Public Sub WriteXml(writer As XmlWriter)
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "The XmlWriter stream to which the object is serialized. \n"
  overload: Microsoft.Health.DeviceModel.WriteXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf the argument <span class=\"paramref\">writer</span> was <strong>null</strong>.\n"
  implements:
  - System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Xml.Serialization.IXmlSerializable
  commentId: T:System.Xml.Serialization.IXmlSerializable
  parent: System.Xml.Serialization
  isExternal: true
  name: IXmlSerializable
  nameWithType: IXmlSerializable
  fullName: System.Xml.Serialization.IXmlSerializable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Xml.Serialization
  commentId: N:System.Xml.Serialization
  isExternal: false
  name: System.Xml.Serialization
  nameWithType: System.Xml.Serialization
  fullName: System.Xml.Serialization
- uid: Microsoft.Health.DeviceModel
  commentId: T:Microsoft.Health.DeviceModel
  isExternal: false
  name: DeviceModel
  nameWithType: DeviceModel
  fullName: Microsoft.Health.DeviceModel
- uid: Microsoft.Health.DeviceModel.#ctor*
  commentId: Overload:Microsoft.Health.DeviceModel.#ctor
  isExternal: false
  name: DeviceModel
  nameWithType: DeviceModel.DeviceModel
  fullName: Microsoft.Health.DeviceModel.DeviceModel
- uid: Microsoft.Health.DeviceModel.Screenshots*
  commentId: Overload:Microsoft.Health.DeviceModel.Screenshots
  isExternal: false
  name: Screenshots
  nameWithType: DeviceModel.Screenshots
  fullName: Microsoft.Health.DeviceModel.Screenshots
- uid: System.Collections.ObjectModel.Collection{Microsoft.Health.Screenshot}
  commentId: T:System.Collections.ObjectModel.Collection{Microsoft.Health.Screenshot}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.Collection`1
  name: Collection<Screenshot>
  nameWithType: Collection<Screenshot>
  fullName: System.Collections.ObjectModel.Collection<Microsoft.Health.Screenshot>
  nameWithType.vb: Collection(Of Screenshot)
  fullName.vb: System.Collections.ObjectModel.Collection(Of Microsoft.Health.Screenshot)
  name.vb: Collection(Of Screenshot)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.Screenshot
    name: Screenshot
    nameWithType: Screenshot
    fullName: Microsoft.Health.Screenshot
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.Screenshot
    name: Screenshot
    nameWithType: Screenshot
    fullName: Microsoft.Health.Screenshot
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.Collection`1
  commentId: T:System.Collections.ObjectModel.Collection`1
  isExternal: true
  name: Collection<T>
  nameWithType: Collection<T>
  fullName: System.Collections.ObjectModel.Collection<T>
  nameWithType.vb: Collection(Of T)
  fullName.vb: System.Collections.ObjectModel.Collection(Of T)
  name.vb: Collection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: Microsoft.Health.DeviceModel.Name*
  commentId: Overload:Microsoft.Health.DeviceModel.Name
  isExternal: false
  name: Name
  nameWithType: DeviceModel.Name
  fullName: Microsoft.Health.DeviceModel.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Health.DeviceModel.DisplayName*
  commentId: Overload:Microsoft.Health.DeviceModel.DisplayName
  isExternal: false
  name: DisplayName
  nameWithType: DeviceModel.DisplayName
  fullName: Microsoft.Health.DeviceModel.DisplayName
- uid: Microsoft.Health.CultureSpecificStringDictionary
  commentId: T:Microsoft.Health.CultureSpecificStringDictionary
  parent: Microsoft.Health
  isExternal: false
  name: CultureSpecificStringDictionary
  nameWithType: CultureSpecificStringDictionary
  fullName: Microsoft.Health.CultureSpecificStringDictionary
- uid: Microsoft.Health.DeviceModel.PurchaseUrl*
  commentId: Overload:Microsoft.Health.DeviceModel.PurchaseUrl
  isExternal: false
  name: PurchaseUrl
  nameWithType: DeviceModel.PurchaseUrl
  fullName: Microsoft.Health.DeviceModel.PurchaseUrl
- uid: Microsoft.Health.CultureSpecificUrlDictionary
  commentId: T:Microsoft.Health.CultureSpecificUrlDictionary
  parent: Microsoft.Health
  isExternal: false
  name: CultureSpecificUrlDictionary
  nameWithType: CultureSpecificUrlDictionary
  fullName: Microsoft.Health.CultureSpecificUrlDictionary
- uid: Microsoft.Health.DeviceModel.WindowsClientInformation*
  commentId: Overload:Microsoft.Health.DeviceModel.WindowsClientInformation
  isExternal: false
  name: WindowsClientInformation
  nameWithType: DeviceModel.WindowsClientInformation
  fullName: Microsoft.Health.DeviceModel.WindowsClientInformation
- uid: Microsoft.Health.DeviceWindowsClientInformation
  commentId: T:Microsoft.Health.DeviceWindowsClientInformation
  parent: Microsoft.Health
  isExternal: false
  name: DeviceWindowsClientInformation
  nameWithType: DeviceWindowsClientInformation
  fullName: Microsoft.Health.DeviceWindowsClientInformation
- uid: Microsoft.Health.DeviceModel.GetSchema*
  commentId: Overload:Microsoft.Health.DeviceModel.GetSchema
  isExternal: false
  name: GetSchema
  nameWithType: DeviceModel.GetSchema
  fullName: Microsoft.Health.DeviceModel.GetSchema
- uid: System.Xml.Serialization.IXmlSerializable.GetSchema
  commentId: M:System.Xml.Serialization.IXmlSerializable.GetSchema
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: GetSchema()
  nameWithType: IXmlSerializable.GetSchema()
  fullName: System.Xml.Serialization.IXmlSerializable.GetSchema()
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.GetSchema
    name: GetSchema
    nameWithType: IXmlSerializable.GetSchema
    fullName: System.Xml.Serialization.IXmlSerializable.GetSchema
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.GetSchema
    name: GetSchema
    nameWithType: IXmlSerializable.GetSchema
    fullName: System.Xml.Serialization.IXmlSerializable.GetSchema
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.Schema.XmlSchema
  commentId: T:System.Xml.Schema.XmlSchema
  parent: System.Xml.Schema
  isExternal: true
  name: XmlSchema
  nameWithType: XmlSchema
  fullName: System.Xml.Schema.XmlSchema
- uid: System.Xml.Schema
  commentId: N:System.Xml.Schema
  isExternal: false
  name: System.Xml.Schema
  nameWithType: System.Xml.Schema
  fullName: System.Xml.Schema
- uid: Microsoft.Health.DeviceModel.ReadXml*
  commentId: Overload:Microsoft.Health.DeviceModel.ReadXml
  isExternal: false
  name: ReadXml
  nameWithType: DeviceModel.ReadXml
  fullName: Microsoft.Health.DeviceModel.ReadXml
- uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  commentId: M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: ReadXml(XmlReader)
  nameWithType: IXmlSerializable.ReadXml(XmlReader)
  fullName: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
    name: ReadXml
    nameWithType: IXmlSerializable.ReadXml
    fullName: System.Xml.Serialization.IXmlSerializable.ReadXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
    name: ReadXml
    nameWithType: IXmlSerializable.ReadXml
    fullName: System.Xml.Serialization.IXmlSerializable.ReadXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.Xml.XmlReader
  commentId: T:System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: false
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: Microsoft.Health.DeviceModel.WriteXml*
  commentId: Overload:Microsoft.Health.DeviceModel.WriteXml
  isExternal: false
  name: WriteXml
  nameWithType: DeviceModel.WriteXml
  fullName: Microsoft.Health.DeviceModel.WriteXml
- uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  commentId: M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: WriteXml(XmlWriter)
  nameWithType: IXmlSerializable.WriteXml(XmlWriter)
  fullName: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: IXmlSerializable.WriteXml
    fullName: System.Xml.Serialization.IXmlSerializable.WriteXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: IXmlSerializable.WriteXml
    fullName: System.Xml.Serialization.IXmlSerializable.WriteXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.XmlWriter
  commentId: T:System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
