### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.Utility.WCDebug
  commentId: T:Microsoft.Health.Utility.WCDebug
  id: WCDebug
  parent: Microsoft.Health.Utility
  children:
  - Microsoft.Health.Utility.WCDebug.Assert(System.Boolean,System.String,System.Object[])
  - Microsoft.Health.Utility.WCDebug.AssertsEnabled
  - Microsoft.Health.Utility.WCDebug.GetFields(System.Object,System.Boolean)
  langs:
  - csharp
  - vb
  name: WCDebug
  nameWithType: WCDebug
  fullName: Microsoft.Health.Utility.WCDebug
  type: Class
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/Debug.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: WCDebug
    path: ../Microsoft.Health.Utility/utilities/Debug.cs
    startLine: 16
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nDebugging helpers\n"
  example: []
  syntax:
    content: public static class WCDebug
    content.vb: Public Module WCDebug
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Health.Utility.WCDebug.GetFields(System.Object,System.Boolean)
  commentId: M:Microsoft.Health.Utility.WCDebug.GetFields(System.Object,System.Boolean)
  id: GetFields(System.Object,System.Boolean)
  parent: Microsoft.Health.Utility.WCDebug
  langs:
  - csharp
  - vb
  name: GetFields(Object, Boolean)
  nameWithType: WCDebug.GetFields(Object, Boolean)
  fullName: Microsoft.Health.Utility.WCDebug.GetFields(System.Object, System.Boolean)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/Debug.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetFields
    path: ../Microsoft.Health.Utility/utilities/Debug.cs
    startLine: 24
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nReflects over fields in an instance and spews them to a string\n"
  example: []
  syntax:
    content: public static string GetFields(object obj, bool publicOnly)
    content.vb: Public Shared Function GetFields(obj As Object, publicOnly As Boolean) As String
    parameters:
    - id: obj
      type: System.Object
      description: instance
    - id: publicOnly
      type: System.Boolean
      description: only show public fields
    return:
      type: System.String
      description: ''
  overload: Microsoft.Health.Utility.WCDebug.GetFields*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCDebug.Assert(System.Boolean,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.WCDebug.Assert(System.Boolean,System.String,System.Object[])
  id: Assert(System.Boolean,System.String,System.Object[])
  parent: Microsoft.Health.Utility.WCDebug
  langs:
  - csharp
  - vb
  name: Assert(Boolean, String, Object[])
  nameWithType: WCDebug.Assert(Boolean, String, Object[])
  fullName: Microsoft.Health.Utility.WCDebug.Assert(System.Boolean, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/Debug.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Assert
    path: ../Microsoft.Health.Utility/utilities/Debug.cs
    startLine: 71
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nAsserts if condition is false and the \"assertsEnabled\" key in\nthe web.config is true.\n"
  example: []
  syntax:
    content: public static void Assert(bool condition, string reasonMessage, params object[] messageParameters)
    content.vb: Public Shared Sub Assert(condition As Boolean, reasonMessage As String, ParamArray messageParameters As Object())
    parameters:
    - id: condition
      type: System.Boolean
      description: "\nIf condition is false then the assert will fire (based on config).\n"
    - id: reasonMessage
      type: System.String
      description: "\nThe message that will be shown when the assert fires.\n"
    - id: messageParameters
      type: System.Object[]
      description: "\nIf the <span class=\"paramref\">reasonMessage</span> contains formatting clauses\nthese are the parameters to format into them.\n"
  overload: Microsoft.Health.Utility.WCDebug.Assert*
  nameWithType.vb: WCDebug.Assert(Boolean, String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.WCDebug.Assert(System.Boolean, System.String, System.Object())
  name.vb: Assert(Boolean, String, Object())
- uid: Microsoft.Health.Utility.WCDebug.AssertsEnabled
  commentId: F:Microsoft.Health.Utility.WCDebug.AssertsEnabled
  id: AssertsEnabled
  parent: Microsoft.Health.Utility.WCDebug
  langs:
  - csharp
  - vb
  name: AssertsEnabled
  nameWithType: WCDebug.AssertsEnabled
  fullName: Microsoft.Health.Utility.WCDebug.AssertsEnabled
  type: Field
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/Debug.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: AssertsEnabled
    path: ../Microsoft.Health.Utility/utilities/Debug.cs
    startLine: 93
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nAre asserts enabled?\n"
  remarks: "\nthis value is set in Microsoft.Health.Platform.Caching.Config\nbased on the value from the db. Also, set from test code.\n"
  example: []
  syntax:
    content: public static bool AssertsEnabled
    content.vb: Public Shared AssertsEnabled As Boolean
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Utility.WCDebug.GetFields*
  commentId: Overload:Microsoft.Health.Utility.WCDebug.GetFields
  isExternal: false
  name: GetFields
  nameWithType: WCDebug.GetFields
  fullName: Microsoft.Health.Utility.WCDebug.GetFields
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Health.Utility.WCDebug.Assert*
  commentId: Overload:Microsoft.Health.Utility.WCDebug.Assert
  isExternal: false
  name: Assert
  nameWithType: WCDebug.Assert
  fullName: Microsoft.Health.Utility.WCDebug.Assert
- uid: System.Object[]
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
