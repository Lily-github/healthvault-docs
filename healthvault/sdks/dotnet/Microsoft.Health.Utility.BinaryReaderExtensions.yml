### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.Utility.BinaryReaderExtensions
  commentId: T:Microsoft.Health.Utility.BinaryReaderExtensions
  id: BinaryReaderExtensions
  parent: Microsoft.Health.Utility
  children:
  - Microsoft.Health.Utility.BinaryReaderExtensions.ReadAndValidateSequence(System.IO.BinaryReader,System.Byte[])
  - Microsoft.Health.Utility.BinaryReaderExtensions.TryReadDateTime(System.IO.BinaryReader,System.DateTime@)
  - Microsoft.Health.Utility.BinaryReaderExtensions.TryReadGuid(System.IO.BinaryReader,System.Guid@)
  langs:
  - csharp
  - vb
  name: BinaryReaderExtensions
  nameWithType: BinaryReaderExtensions
  fullName: Microsoft.Health.Utility.BinaryReaderExtensions
  type: Class
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BinaryReaderExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: BinaryReaderExtensions
    path: ../Microsoft.Health.Utility/utilities/BinaryReaderExtensions.cs
    startLine: 12
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  syntax:
    content: public static class BinaryReaderExtensions
    content.vb: Public Module BinaryReaderExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Health.Utility.BinaryReaderExtensions.ReadAndValidateSequence(System.IO.BinaryReader,System.Byte[])
  commentId: M:Microsoft.Health.Utility.BinaryReaderExtensions.ReadAndValidateSequence(System.IO.BinaryReader,System.Byte[])
  id: ReadAndValidateSequence(System.IO.BinaryReader,System.Byte[])
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BinaryReaderExtensions
  langs:
  - csharp
  - vb
  name: ReadAndValidateSequence(BinaryReader, Byte[])
  nameWithType: BinaryReaderExtensions.ReadAndValidateSequence(BinaryReader, Byte[])
  fullName: Microsoft.Health.Utility.BinaryReaderExtensions.ReadAndValidateSequence(System.IO.BinaryReader, System.Byte[])
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BinaryReaderExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ReadAndValidateSequence
    path: ../Microsoft.Health.Utility/utilities/BinaryReaderExtensions.cs
    startLine: 20
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nReads what is supposed to be a fixed sequence of bytes and\nreturns true if the sequence is read and matches the one\nspecified.  False otherwise.\n"
  example: []
  syntax:
    content: public static bool ReadAndValidateSequence(this BinaryReader reader, params byte[] fixedSequence)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ReadAndValidateSequence(reader As BinaryReader, ParamArray fixedSequence As Byte()) As Boolean
    parameters:
    - id: reader
      type: System.IO.BinaryReader
    - id: fixedSequence
      type: System.Byte[]
    return:
      type: System.Boolean
  overload: Microsoft.Health.Utility.BinaryReaderExtensions.ReadAndValidateSequence*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: An I/O occurs.
  nameWithType.vb: BinaryReaderExtensions.ReadAndValidateSequence(BinaryReader, Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BinaryReaderExtensions.ReadAndValidateSequence(System.IO.BinaryReader, System.Byte())
  name.vb: ReadAndValidateSequence(BinaryReader, Byte())
- uid: Microsoft.Health.Utility.BinaryReaderExtensions.TryReadGuid(System.IO.BinaryReader,System.Guid@)
  commentId: M:Microsoft.Health.Utility.BinaryReaderExtensions.TryReadGuid(System.IO.BinaryReader,System.Guid@)
  id: TryReadGuid(System.IO.BinaryReader,System.Guid@)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BinaryReaderExtensions
  langs:
  - csharp
  - vb
  name: TryReadGuid(BinaryReader, out Guid)
  nameWithType: BinaryReaderExtensions.TryReadGuid(BinaryReader, out Guid)
  fullName: Microsoft.Health.Utility.BinaryReaderExtensions.TryReadGuid(System.IO.BinaryReader, out System.Guid)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BinaryReaderExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: TryReadGuid
    path: ../Microsoft.Health.Utility/utilities/BinaryReaderExtensions.cs
    startLine: 33
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nReads a GUID, returning true and the GUID value if \nthere were enough bytes.  False otherwise.\n"
  example: []
  syntax:
    content: public static bool TryReadGuid(this BinaryReader reader, out Guid value)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TryReadGuid(reader As BinaryReader, ByRef value As Guid) As Boolean
    parameters:
    - id: reader
      type: System.IO.BinaryReader
    - id: value
      type: System.Guid
    return:
      type: System.Boolean
  overload: Microsoft.Health.Utility.BinaryReaderExtensions.TryReadGuid*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: An I/O error occurs.
  nameWithType.vb: BinaryReaderExtensions.TryReadGuid(BinaryReader, ByRef Guid)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BinaryReaderExtensions.TryReadGuid(System.IO.BinaryReader, ByRef System.Guid)
  name.vb: TryReadGuid(BinaryReader, ByRef Guid)
- uid: Microsoft.Health.Utility.BinaryReaderExtensions.TryReadDateTime(System.IO.BinaryReader,System.DateTime@)
  commentId: M:Microsoft.Health.Utility.BinaryReaderExtensions.TryReadDateTime(System.IO.BinaryReader,System.DateTime@)
  id: TryReadDateTime(System.IO.BinaryReader,System.DateTime@)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.BinaryReaderExtensions
  langs:
  - csharp
  - vb
  name: TryReadDateTime(BinaryReader, out DateTime)
  nameWithType: BinaryReaderExtensions.TryReadDateTime(BinaryReader, out DateTime)
  fullName: Microsoft.Health.Utility.BinaryReaderExtensions.TryReadDateTime(System.IO.BinaryReader, out System.DateTime)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BinaryReaderExtensions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: TryReadDateTime
    path: ../Microsoft.Health.Utility/utilities/BinaryReaderExtensions.cs
    startLine: 54
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nReads a DateTime, returning true and the DateTime value if \nthere were enough bytes.  False otherwise.\n"
  example: []
  syntax:
    content: public static bool TryReadDateTime(this BinaryReader reader, out DateTime value)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TryReadDateTime(reader As BinaryReader, ByRef value As Date) As Boolean
    parameters:
    - id: reader
      type: System.IO.BinaryReader
    - id: value
      type: System.DateTime
    return:
      type: System.Boolean
  overload: Microsoft.Health.Utility.BinaryReaderExtensions.TryReadDateTime*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: An I/O error occurs.
  nameWithType.vb: BinaryReaderExtensions.TryReadDateTime(BinaryReader, ByRef DateTime)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BinaryReaderExtensions.TryReadDateTime(System.IO.BinaryReader, ByRef System.DateTime)
  name.vb: TryReadDateTime(BinaryReader, ByRef DateTime)
references:
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Utility.BinaryReaderExtensions.ReadAndValidateSequence*
  commentId: Overload:Microsoft.Health.Utility.BinaryReaderExtensions.ReadAndValidateSequence
  isExternal: false
  name: ReadAndValidateSequence
  nameWithType: BinaryReaderExtensions.ReadAndValidateSequence
  fullName: Microsoft.Health.Utility.BinaryReaderExtensions.ReadAndValidateSequence
- uid: System.IO.IOException
  commentId: T:System.IO.IOException
- uid: System.IO.BinaryReader
  commentId: T:System.IO.BinaryReader
  parent: System.IO
  isExternal: true
  name: BinaryReader
  nameWithType: BinaryReader
  fullName: System.IO.BinaryReader
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO
  commentId: N:System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: Microsoft.Health.Utility.BinaryReaderExtensions.TryReadGuid*
  commentId: Overload:Microsoft.Health.Utility.BinaryReaderExtensions.TryReadGuid
  isExternal: false
  name: TryReadGuid
  nameWithType: BinaryReaderExtensions.TryReadGuid
  fullName: Microsoft.Health.Utility.BinaryReaderExtensions.TryReadGuid
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: Microsoft.Health.Utility.BinaryReaderExtensions.TryReadDateTime*
  commentId: Overload:Microsoft.Health.Utility.BinaryReaderExtensions.TryReadDateTime
  isExternal: false
  name: TryReadDateTime
  nameWithType: BinaryReaderExtensions.TryReadDateTime
  fullName: Microsoft.Health.Utility.BinaryReaderExtensions.TryReadDateTime
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
