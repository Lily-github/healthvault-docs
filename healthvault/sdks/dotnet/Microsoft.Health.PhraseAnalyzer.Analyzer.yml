### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.PhraseAnalyzer.Analyzer
  commentId: T:Microsoft.Health.PhraseAnalyzer.Analyzer
  id: Analyzer
  parent: Microsoft.Health.PhraseAnalyzer
  children:
  - Microsoft.Health.PhraseAnalyzer.Analyzer.#ctor(Microsoft.Health.PhraseAnalyzer.ClassExpression)
  - Microsoft.Health.PhraseAnalyzer.Analyzer.#ctor(Microsoft.Health.PhraseAnalyzer.ClassExpression,Microsoft.Health.PhraseAnalyzer.WordBreakLexer)
  - Microsoft.Health.PhraseAnalyzer.Analyzer.#ctor(System.IO.TextReader,Microsoft.Health.PhraseAnalyzer.WordBreakLexer,System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[])
  - Microsoft.Health.PhraseAnalyzer.Analyzer.#ctor(System.IO.TextReader,System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[])
  - Microsoft.Health.PhraseAnalyzer.Analyzer.#ctor(System.String,Microsoft.Health.PhraseAnalyzer.WordBreakLexer,System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[])
  - Microsoft.Health.PhraseAnalyzer.Analyzer.#ctor(System.String,System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[])
  - Microsoft.Health.PhraseAnalyzer.Analyzer.#ctor(System.String,System.String,Microsoft.Health.PhraseAnalyzer.WordBreakLexer,System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[])
  - Microsoft.Health.PhraseAnalyzer.Analyzer.#ctor(System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[])
  - Microsoft.Health.PhraseAnalyzer.Analyzer.#ctor(System.String,System.String,System.Func{System.String,System.IO.StreamReader},Microsoft.Health.PhraseAnalyzer.WordBreakLexer,System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[])
  - Microsoft.Health.PhraseAnalyzer.Analyzer.Analyze(System.Collections.Generic.IList{System.String})
  - Microsoft.Health.PhraseAnalyzer.Analyzer.Analyze(System.Collections.Generic.IList{System.String},System.Int32)
  - Microsoft.Health.PhraseAnalyzer.Analyzer.Analyze(System.Collections.Generic.IList{System.String},System.Int32,System.Boolean)
  - Microsoft.Health.PhraseAnalyzer.Analyzer.Analyze(System.String)
  - Microsoft.Health.PhraseAnalyzer.Analyzer.FileLoader
  - Microsoft.Health.PhraseAnalyzer.Analyzer.Lexer
  langs:
  - csharp
  - vb
  name: Analyzer
  nameWithType: Analyzer
  fullName: Microsoft.Health.PhraseAnalyzer.Analyzer
  type: Class
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Analyzer.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Analyzer
    path: ../Microsoft.Health.Utility/search/PhraseAnalyzer/Analyzer.cs
    startLine: 15
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public class Analyzer
    content.vb: Public Class Analyzer
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - Microsoft.Health.PhraseAnalyzer.Analyzer.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  - System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.PhraseAnalyzer.Analyzer.#ctor(Microsoft.Health.PhraseAnalyzer.ClassExpression)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Analyzer.#ctor(Microsoft.Health.PhraseAnalyzer.ClassExpression)
  id: '#ctor(Microsoft.Health.PhraseAnalyzer.ClassExpression)'
  parent: Microsoft.Health.PhraseAnalyzer.Analyzer
  langs:
  - csharp
  - vb
  name: Analyzer(ClassExpression)
  nameWithType: Analyzer.Analyzer(ClassExpression)
  fullName: Microsoft.Health.PhraseAnalyzer.Analyzer.Analyzer(Microsoft.Health.PhraseAnalyzer.ClassExpression)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Analyzer.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health.Utility/search/PhraseAnalyzer/Analyzer.cs
    startLine: 26
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public Analyzer(ClassExpression classExpr)
    content.vb: Public Sub New(classExpr As ClassExpression)
    parameters:
    - id: classExpr
      type: Microsoft.Health.PhraseAnalyzer.ClassExpression
      description: ''
  overload: Microsoft.Health.PhraseAnalyzer.Analyzer.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.PhraseAnalyzer.Analyzer.#ctor(Microsoft.Health.PhraseAnalyzer.ClassExpression,Microsoft.Health.PhraseAnalyzer.WordBreakLexer)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Analyzer.#ctor(Microsoft.Health.PhraseAnalyzer.ClassExpression,Microsoft.Health.PhraseAnalyzer.WordBreakLexer)
  id: '#ctor(Microsoft.Health.PhraseAnalyzer.ClassExpression,Microsoft.Health.PhraseAnalyzer.WordBreakLexer)'
  parent: Microsoft.Health.PhraseAnalyzer.Analyzer
  langs:
  - csharp
  - vb
  name: Analyzer(ClassExpression, WordBreakLexer)
  nameWithType: Analyzer.Analyzer(ClassExpression, WordBreakLexer)
  fullName: Microsoft.Health.PhraseAnalyzer.Analyzer.Analyzer(Microsoft.Health.PhraseAnalyzer.ClassExpression, Microsoft.Health.PhraseAnalyzer.WordBreakLexer)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Analyzer.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health.Utility/search/PhraseAnalyzer/Analyzer.cs
    startLine: 36
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public Analyzer(ClassExpression classExpr, WordBreakLexer lexer)
    content.vb: Public Sub New(classExpr As ClassExpression, lexer As WordBreakLexer)
    parameters:
    - id: classExpr
      type: Microsoft.Health.PhraseAnalyzer.ClassExpression
      description: ''
    - id: lexer
      type: Microsoft.Health.PhraseAnalyzer.WordBreakLexer
      description: ''
  overload: Microsoft.Health.PhraseAnalyzer.Analyzer.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.PhraseAnalyzer.Analyzer.#ctor(System.String,System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[])
  commentId: M:Microsoft.Health.PhraseAnalyzer.Analyzer.#ctor(System.String,System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[])
  id: '#ctor(System.String,System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[])'
  parent: Microsoft.Health.PhraseAnalyzer.Analyzer
  langs:
  - csharp
  - vb
  name: Analyzer(String, KeyValuePair<String, IMatcher>[])
  nameWithType: Analyzer.Analyzer(String, KeyValuePair<String, IMatcher>[])
  fullName: Microsoft.Health.PhraseAnalyzer.Analyzer.Analyzer(System.String, System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.PhraseAnalyzer.IMatcher>[])
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Analyzer.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health.Utility/search/PhraseAnalyzer/Analyzer.cs
    startLine: 56
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public Analyzer(string classFile, params KeyValuePair<string, IMatcher>[] matchers)
    content.vb: Public Sub New(classFile As String, ParamArray matchers As KeyValuePair(Of String, IMatcher)())
    parameters:
    - id: classFile
      type: System.String
      description: ''
    - id: matchers
      type: System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[]
      description: ''
  overload: Microsoft.Health.PhraseAnalyzer.Analyzer.#ctor*
  nameWithType.vb: Analyzer.Analyzer(String, KeyValuePair(Of String, IMatcher)())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Analyzer.Analyzer(System.String, System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.PhraseAnalyzer.IMatcher)())
  name.vb: Analyzer(String, KeyValuePair(Of String, IMatcher)())
- uid: Microsoft.Health.PhraseAnalyzer.Analyzer.#ctor(System.String,Microsoft.Health.PhraseAnalyzer.WordBreakLexer,System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[])
  commentId: M:Microsoft.Health.PhraseAnalyzer.Analyzer.#ctor(System.String,Microsoft.Health.PhraseAnalyzer.WordBreakLexer,System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[])
  id: '#ctor(System.String,Microsoft.Health.PhraseAnalyzer.WordBreakLexer,System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[])'
  parent: Microsoft.Health.PhraseAnalyzer.Analyzer
  langs:
  - csharp
  - vb
  name: Analyzer(String, WordBreakLexer, KeyValuePair<String, IMatcher>[])
  nameWithType: Analyzer.Analyzer(String, WordBreakLexer, KeyValuePair<String, IMatcher>[])
  fullName: Microsoft.Health.PhraseAnalyzer.Analyzer.Analyzer(System.String, Microsoft.Health.PhraseAnalyzer.WordBreakLexer, System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.PhraseAnalyzer.IMatcher>[])
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Analyzer.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health.Utility/search/PhraseAnalyzer/Analyzer.cs
    startLine: 67
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public Analyzer(string classFile, WordBreakLexer lexer, params KeyValuePair<string, IMatcher>[] matchers)
    content.vb: Public Sub New(classFile As String, lexer As WordBreakLexer, ParamArray matchers As KeyValuePair(Of String, IMatcher)())
    parameters:
    - id: classFile
      type: System.String
      description: ''
    - id: lexer
      type: Microsoft.Health.PhraseAnalyzer.WordBreakLexer
      description: ''
    - id: matchers
      type: System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[]
      description: ''
  overload: Microsoft.Health.PhraseAnalyzer.Analyzer.#ctor*
  nameWithType.vb: Analyzer.Analyzer(String, WordBreakLexer, KeyValuePair(Of String, IMatcher)())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Analyzer.Analyzer(System.String, Microsoft.Health.PhraseAnalyzer.WordBreakLexer, System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.PhraseAnalyzer.IMatcher)())
  name.vb: Analyzer(String, WordBreakLexer, KeyValuePair(Of String, IMatcher)())
- uid: Microsoft.Health.PhraseAnalyzer.Analyzer.#ctor(System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[])
  commentId: M:Microsoft.Health.PhraseAnalyzer.Analyzer.#ctor(System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[])
  id: '#ctor(System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[])'
  parent: Microsoft.Health.PhraseAnalyzer.Analyzer
  langs:
  - csharp
  - vb
  name: Analyzer(String, String, KeyValuePair<String, IMatcher>[])
  nameWithType: Analyzer.Analyzer(String, String, KeyValuePair<String, IMatcher>[])
  fullName: Microsoft.Health.PhraseAnalyzer.Analyzer.Analyzer(System.String, System.String, System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.PhraseAnalyzer.IMatcher>[])
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Analyzer.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health.Utility/search/PhraseAnalyzer/Analyzer.cs
    startLine: 78
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public Analyzer(string basePath, string classFileName, params KeyValuePair<string, IMatcher>[] matchers)
    content.vb: Public Sub New(basePath As String, classFileName As String, ParamArray matchers As KeyValuePair(Of String, IMatcher)())
    parameters:
    - id: basePath
      type: System.String
      description: ''
    - id: classFileName
      type: System.String
      description: ''
    - id: matchers
      type: System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[]
      description: ''
  overload: Microsoft.Health.PhraseAnalyzer.Analyzer.#ctor*
  nameWithType.vb: Analyzer.Analyzer(String, String, KeyValuePair(Of String, IMatcher)())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Analyzer.Analyzer(System.String, System.String, System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.PhraseAnalyzer.IMatcher)())
  name.vb: Analyzer(String, String, KeyValuePair(Of String, IMatcher)())
- uid: Microsoft.Health.PhraseAnalyzer.Analyzer.#ctor(System.String,System.String,Microsoft.Health.PhraseAnalyzer.WordBreakLexer,System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[])
  commentId: M:Microsoft.Health.PhraseAnalyzer.Analyzer.#ctor(System.String,System.String,Microsoft.Health.PhraseAnalyzer.WordBreakLexer,System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[])
  id: '#ctor(System.String,System.String,Microsoft.Health.PhraseAnalyzer.WordBreakLexer,System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[])'
  parent: Microsoft.Health.PhraseAnalyzer.Analyzer
  langs:
  - csharp
  - vb
  name: Analyzer(String, String, WordBreakLexer, KeyValuePair<String, IMatcher>[])
  nameWithType: Analyzer.Analyzer(String, String, WordBreakLexer, KeyValuePair<String, IMatcher>[])
  fullName: Microsoft.Health.PhraseAnalyzer.Analyzer.Analyzer(System.String, System.String, Microsoft.Health.PhraseAnalyzer.WordBreakLexer, System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.PhraseAnalyzer.IMatcher>[])
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Analyzer.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health.Utility/search/PhraseAnalyzer/Analyzer.cs
    startLine: 90
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public Analyzer(string basePath, string classFileName, WordBreakLexer lexer, params KeyValuePair<string, IMatcher>[] matchers)
    content.vb: Public Sub New(basePath As String, classFileName As String, lexer As WordBreakLexer, ParamArray matchers As KeyValuePair(Of String, IMatcher)())
    parameters:
    - id: basePath
      type: System.String
      description: ''
    - id: classFileName
      type: System.String
      description: ''
    - id: lexer
      type: Microsoft.Health.PhraseAnalyzer.WordBreakLexer
      description: ''
    - id: matchers
      type: System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[]
      description: ''
  overload: Microsoft.Health.PhraseAnalyzer.Analyzer.#ctor*
  nameWithType.vb: Analyzer.Analyzer(String, String, WordBreakLexer, KeyValuePair(Of String, IMatcher)())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Analyzer.Analyzer(System.String, System.String, Microsoft.Health.PhraseAnalyzer.WordBreakLexer, System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.PhraseAnalyzer.IMatcher)())
  name.vb: Analyzer(String, String, WordBreakLexer, KeyValuePair(Of String, IMatcher)())
- uid: Microsoft.Health.PhraseAnalyzer.Analyzer.#ctor(System.String,System.String,System.Func{System.String,System.IO.StreamReader},Microsoft.Health.PhraseAnalyzer.WordBreakLexer,System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[])
  commentId: M:Microsoft.Health.PhraseAnalyzer.Analyzer.#ctor(System.String,System.String,System.Func{System.String,System.IO.StreamReader},Microsoft.Health.PhraseAnalyzer.WordBreakLexer,System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[])
  id: '#ctor(System.String,System.String,System.Func{System.String,System.IO.StreamReader},Microsoft.Health.PhraseAnalyzer.WordBreakLexer,System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[])'
  parent: Microsoft.Health.PhraseAnalyzer.Analyzer
  langs:
  - csharp
  - vb
  name: Analyzer(String, String, Func<String, StreamReader>, WordBreakLexer, KeyValuePair<String, IMatcher>[])
  nameWithType: Analyzer.Analyzer(String, String, Func<String, StreamReader>, WordBreakLexer, KeyValuePair<String, IMatcher>[])
  fullName: Microsoft.Health.PhraseAnalyzer.Analyzer.Analyzer(System.String, System.String, System.Func<System.String, System.IO.StreamReader>, Microsoft.Health.PhraseAnalyzer.WordBreakLexer, System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.PhraseAnalyzer.IMatcher>[])
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Analyzer.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health.Utility/search/PhraseAnalyzer/Analyzer.cs
    startLine: 106
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public Analyzer(string basePath, string classFileName, Func<string, StreamReader> fileLoader, WordBreakLexer lexer, params KeyValuePair<string, IMatcher>[] matchers)
    content.vb: Public Sub New(basePath As String, classFileName As String, fileLoader As Func(Of String, StreamReader), lexer As WordBreakLexer, ParamArray matchers As KeyValuePair(Of String, IMatcher)())
    parameters:
    - id: basePath
      type: System.String
      description: ''
    - id: classFileName
      type: System.String
      description: ''
    - id: fileLoader
      type: System.Func{System.String,System.IO.StreamReader}
      description: ''
    - id: lexer
      type: Microsoft.Health.PhraseAnalyzer.WordBreakLexer
      description: ''
    - id: matchers
      type: System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[]
      description: ''
  overload: Microsoft.Health.PhraseAnalyzer.Analyzer.#ctor*
  nameWithType.vb: Analyzer.Analyzer(String, String, Func(Of String, StreamReader), WordBreakLexer, KeyValuePair(Of String, IMatcher)())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Analyzer.Analyzer(System.String, System.String, System.Func(Of System.String, System.IO.StreamReader), Microsoft.Health.PhraseAnalyzer.WordBreakLexer, System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.PhraseAnalyzer.IMatcher)())
  name.vb: Analyzer(String, String, Func(Of String, StreamReader), WordBreakLexer, KeyValuePair(Of String, IMatcher)())
- uid: Microsoft.Health.PhraseAnalyzer.Analyzer.#ctor(System.IO.TextReader,System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[])
  commentId: M:Microsoft.Health.PhraseAnalyzer.Analyzer.#ctor(System.IO.TextReader,System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[])
  id: '#ctor(System.IO.TextReader,System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[])'
  parent: Microsoft.Health.PhraseAnalyzer.Analyzer
  langs:
  - csharp
  - vb
  name: Analyzer(TextReader, KeyValuePair<String, IMatcher>[])
  nameWithType: Analyzer.Analyzer(TextReader, KeyValuePair<String, IMatcher>[])
  fullName: Microsoft.Health.PhraseAnalyzer.Analyzer.Analyzer(System.IO.TextReader, System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.PhraseAnalyzer.IMatcher>[])
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Analyzer.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health.Utility/search/PhraseAnalyzer/Analyzer.cs
    startLine: 131
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public Analyzer(TextReader classReader, params KeyValuePair<string, IMatcher>[] matchers)
    content.vb: Public Sub New(classReader As TextReader, ParamArray matchers As KeyValuePair(Of String, IMatcher)())
    parameters:
    - id: classReader
      type: System.IO.TextReader
      description: ''
    - id: matchers
      type: System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[]
      description: ''
  overload: Microsoft.Health.PhraseAnalyzer.Analyzer.#ctor*
  nameWithType.vb: Analyzer.Analyzer(TextReader, KeyValuePair(Of String, IMatcher)())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Analyzer.Analyzer(System.IO.TextReader, System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.PhraseAnalyzer.IMatcher)())
  name.vb: Analyzer(TextReader, KeyValuePair(Of String, IMatcher)())
- uid: Microsoft.Health.PhraseAnalyzer.Analyzer.#ctor(System.IO.TextReader,Microsoft.Health.PhraseAnalyzer.WordBreakLexer,System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[])
  commentId: M:Microsoft.Health.PhraseAnalyzer.Analyzer.#ctor(System.IO.TextReader,Microsoft.Health.PhraseAnalyzer.WordBreakLexer,System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[])
  id: '#ctor(System.IO.TextReader,Microsoft.Health.PhraseAnalyzer.WordBreakLexer,System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[])'
  parent: Microsoft.Health.PhraseAnalyzer.Analyzer
  langs:
  - csharp
  - vb
  name: Analyzer(TextReader, WordBreakLexer, KeyValuePair<String, IMatcher>[])
  nameWithType: Analyzer.Analyzer(TextReader, WordBreakLexer, KeyValuePair<String, IMatcher>[])
  fullName: Microsoft.Health.PhraseAnalyzer.Analyzer.Analyzer(System.IO.TextReader, Microsoft.Health.PhraseAnalyzer.WordBreakLexer, System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.PhraseAnalyzer.IMatcher>[])
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Analyzer.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health.Utility/search/PhraseAnalyzer/Analyzer.cs
    startLine: 142
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public Analyzer(TextReader classReader, WordBreakLexer lexer, params KeyValuePair<string, IMatcher>[] matchers)
    content.vb: Public Sub New(classReader As TextReader, lexer As WordBreakLexer, ParamArray matchers As KeyValuePair(Of String, IMatcher)())
    parameters:
    - id: classReader
      type: System.IO.TextReader
      description: ''
    - id: lexer
      type: Microsoft.Health.PhraseAnalyzer.WordBreakLexer
      description: ''
    - id: matchers
      type: System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[]
      description: ''
  overload: Microsoft.Health.PhraseAnalyzer.Analyzer.#ctor*
  nameWithType.vb: Analyzer.Analyzer(TextReader, WordBreakLexer, KeyValuePair(Of String, IMatcher)())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Analyzer.Analyzer(System.IO.TextReader, Microsoft.Health.PhraseAnalyzer.WordBreakLexer, System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.PhraseAnalyzer.IMatcher)())
  name.vb: Analyzer(TextReader, WordBreakLexer, KeyValuePair(Of String, IMatcher)())
- uid: Microsoft.Health.PhraseAnalyzer.Analyzer.Analyze(System.String)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Analyzer.Analyze(System.String)
  id: Analyze(System.String)
  parent: Microsoft.Health.PhraseAnalyzer.Analyzer
  langs:
  - csharp
  - vb
  name: Analyze(String)
  nameWithType: Analyzer.Analyze(String)
  fullName: Microsoft.Health.PhraseAnalyzer.Analyzer.Analyze(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Analyzer.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Analyze
    path: ../Microsoft.Health.Utility/search/PhraseAnalyzer/Analyzer.cs
    startLine: 152
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public AnalyzerResults Analyze(string phrase)
    content.vb: Public Function Analyze(phrase As String) As AnalyzerResults
    parameters:
    - id: phrase
      type: System.String
      description: ''
    return:
      type: Microsoft.Health.PhraseAnalyzer.AnalyzerResults
      description: ''
  overload: Microsoft.Health.PhraseAnalyzer.Analyzer.Analyze*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.PhraseAnalyzer.Analyzer.Lexer
  commentId: P:Microsoft.Health.PhraseAnalyzer.Analyzer.Lexer
  id: Lexer
  parent: Microsoft.Health.PhraseAnalyzer.Analyzer
  langs:
  - csharp
  - vb
  name: Lexer
  nameWithType: Analyzer.Lexer
  fullName: Microsoft.Health.PhraseAnalyzer.Analyzer.Lexer
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Analyzer.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Lexer
    path: ../Microsoft.Health.Utility/search/PhraseAnalyzer/Analyzer.cs
    startLine: 166
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public WordBreakLexer Lexer { get; }
    content.vb: Public ReadOnly Property Lexer As WordBreakLexer
    parameters: []
    return:
      type: Microsoft.Health.PhraseAnalyzer.WordBreakLexer
  overload: Microsoft.Health.PhraseAnalyzer.Analyzer.Lexer*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.PhraseAnalyzer.Analyzer.FileLoader
  commentId: P:Microsoft.Health.PhraseAnalyzer.Analyzer.FileLoader
  id: FileLoader
  parent: Microsoft.Health.PhraseAnalyzer.Analyzer
  langs:
  - csharp
  - vb
  name: FileLoader
  nameWithType: Analyzer.FileLoader
  fullName: Microsoft.Health.PhraseAnalyzer.Analyzer.FileLoader
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Analyzer.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: FileLoader
    path: ../Microsoft.Health.Utility/search/PhraseAnalyzer/Analyzer.cs
    startLine: 177
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public Func<string, StreamReader> FileLoader { get; set; }
    content.vb: Public Property FileLoader As Func(Of String, StreamReader)
    parameters: []
    return:
      type: System.Func{System.String,System.IO.StreamReader}
  overload: Microsoft.Health.PhraseAnalyzer.Analyzer.FileLoader*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.PhraseAnalyzer.Analyzer.Analyze(System.Collections.Generic.IList{System.String})
  commentId: M:Microsoft.Health.PhraseAnalyzer.Analyzer.Analyze(System.Collections.Generic.IList{System.String})
  id: Analyze(System.Collections.Generic.IList{System.String})
  parent: Microsoft.Health.PhraseAnalyzer.Analyzer
  langs:
  - csharp
  - vb
  name: Analyze(IList<String>)
  nameWithType: Analyzer.Analyze(IList<String>)
  fullName: Microsoft.Health.PhraseAnalyzer.Analyzer.Analyze(System.Collections.Generic.IList<System.String>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Analyzer.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Analyze
    path: ../Microsoft.Health.Utility/search/PhraseAnalyzer/Analyzer.cs
    startLine: 194
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public AnalyzerResults Analyze(IList<string> words)
    content.vb: Public Function Analyze(words As IList(Of String)) As AnalyzerResults
    parameters:
    - id: words
      type: System.Collections.Generic.IList{System.String}
      description: ''
    return:
      type: Microsoft.Health.PhraseAnalyzer.AnalyzerResults
      description: ''
  overload: Microsoft.Health.PhraseAnalyzer.Analyzer.Analyze*
  nameWithType.vb: Analyzer.Analyze(IList(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Analyzer.Analyze(System.Collections.Generic.IList(Of System.String))
  name.vb: Analyze(IList(Of String))
- uid: Microsoft.Health.PhraseAnalyzer.Analyzer.Analyze(System.Collections.Generic.IList{System.String},System.Int32)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Analyzer.Analyze(System.Collections.Generic.IList{System.String},System.Int32)
  id: Analyze(System.Collections.Generic.IList{System.String},System.Int32)
  parent: Microsoft.Health.PhraseAnalyzer.Analyzer
  langs:
  - csharp
  - vb
  name: Analyze(IList<String>, Int32)
  nameWithType: Analyzer.Analyze(IList<String>, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.Analyzer.Analyze(System.Collections.Generic.IList<System.String>, System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Analyzer.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Analyze
    path: ../Microsoft.Health.Utility/search/PhraseAnalyzer/Analyzer.cs
    startLine: 205
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public AnalyzerResults Analyze(IList<string> words, int startAt)
    content.vb: Public Function Analyze(words As IList(Of String), startAt As Integer) As AnalyzerResults
    parameters:
    - id: words
      type: System.Collections.Generic.IList{System.String}
      description: ''
    - id: startAt
      type: System.Int32
      description: ''
    return:
      type: Microsoft.Health.PhraseAnalyzer.AnalyzerResults
      description: ''
  overload: Microsoft.Health.PhraseAnalyzer.Analyzer.Analyze*
  nameWithType.vb: Analyzer.Analyze(IList(Of String), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Analyzer.Analyze(System.Collections.Generic.IList(Of System.String), System.Int32)
  name.vb: Analyze(IList(Of String), Int32)
- uid: Microsoft.Health.PhraseAnalyzer.Analyzer.Analyze(System.Collections.Generic.IList{System.String},System.Int32,System.Boolean)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Analyzer.Analyze(System.Collections.Generic.IList{System.String},System.Int32,System.Boolean)
  id: Analyze(System.Collections.Generic.IList{System.String},System.Int32,System.Boolean)
  parent: Microsoft.Health.PhraseAnalyzer.Analyzer
  langs:
  - csharp
  - vb
  name: Analyze(IList<String>, Int32, Boolean)
  nameWithType: Analyzer.Analyze(IList<String>, Int32, Boolean)
  fullName: Microsoft.Health.PhraseAnalyzer.Analyzer.Analyze(System.Collections.Generic.IList<System.String>, System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Analyzer.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Analyze
    path: ../Microsoft.Health.Utility/search/PhraseAnalyzer/Analyzer.cs
    startLine: 217
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public AnalyzerResults Analyze(IList<string> words, int startAt, bool collectSegments)
    content.vb: Public Function Analyze(words As IList(Of String), startAt As Integer, collectSegments As Boolean) As AnalyzerResults
    parameters:
    - id: words
      type: System.Collections.Generic.IList{System.String}
      description: ''
    - id: startAt
      type: System.Int32
      description: ''
    - id: collectSegments
      type: System.Boolean
      description: ''
    return:
      type: Microsoft.Health.PhraseAnalyzer.AnalyzerResults
      description: ''
  overload: Microsoft.Health.PhraseAnalyzer.Analyzer.Analyze*
  nameWithType.vb: Analyzer.Analyze(IList(Of String), Int32, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Analyzer.Analyze(System.Collections.Generic.IList(Of System.String), System.Int32, System.Boolean)
  name.vb: Analyze(IList(Of String), Int32, Boolean)
references:
- uid: Microsoft.Health.PhraseAnalyzer
  commentId: N:Microsoft.Health.PhraseAnalyzer
  isExternal: false
  name: Microsoft.Health.PhraseAnalyzer
  nameWithType: Microsoft.Health.PhraseAnalyzer
  fullName: Microsoft.Health.PhraseAnalyzer
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  name: SetProperty(String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object())
  name.vb: SetProperty(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  name: InvokeMethod(String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object())
  name.vb: InvokeMethod(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  parent: Microsoft.Health.Utility.InvariantString
  definition: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  name: ToStringInvariant()
  nameWithType: InvariantString.ToStringInvariant()
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant()
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Analyzer.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  parent: Microsoft.Health.Utility.TypeHelper
  definition: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  name: ValueOrDbNull<Analyzer>()
  nameWithType: TypeHelper.ValueOrDbNull<Analyzer>()
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.PhraseAnalyzer.Analyzer>()
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of Analyzer)()
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.PhraseAnalyzer.Analyzer)()
  name.vb: ValueOrDbNull(Of Analyzer)()
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull<Analyzer>
    nameWithType: TypeHelper.ValueOrDbNull<Analyzer>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.PhraseAnalyzer.Analyzer>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull(Of Analyzer)
    nameWithType: TypeHelper.ValueOrDbNull(Of Analyzer)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.PhraseAnalyzer.Analyzer)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  parent: Microsoft.Health.Utility.WCXmlHelper
  definition: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  name: ToXml()
  nameWithType: WCXmlHelper.ToXml()
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml()
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  isExternal: true
  name: SetProperty(Object, String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object())
  name.vb: SetProperty(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions
  commentId: T:Microsoft.Health.Utility.IDispatchExtensions
  parent: Microsoft.Health.Utility
  isExternal: false
  name: IDispatchExtensions
  nameWithType: IDispatchExtensions
  fullName: Microsoft.Health.Utility.IDispatchExtensions
- uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  isExternal: true
  name: InvokeMethod(Object, String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object())
  name.vb: InvokeMethod(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  isExternal: true
  name: ToStringInvariant(Object)
  nameWithType: InvariantString.ToStringInvariant(Object)
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString
  commentId: T:Microsoft.Health.Utility.InvariantString
  parent: Microsoft.Health.Utility
  isExternal: false
  name: InvariantString
  nameWithType: InvariantString
  fullName: Microsoft.Health.Utility.InvariantString
- uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  isExternal: false
  name: ValueOrDbNull<T>(T)
  nameWithType: TypeHelper.ValueOrDbNull<T>(T)
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>(T)
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of T)(T)
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)(T)
  name.vb: ValueOrDbNull(Of T)(T)
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull<T>
    nameWithType: TypeHelper.ValueOrDbNull<T>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull(Of T)
    nameWithType: TypeHelper.ValueOrDbNull(Of T)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.TypeHelper
  commentId: T:Microsoft.Health.Utility.TypeHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: TypeHelper
  nameWithType: TypeHelper
  fullName: Microsoft.Health.Utility.TypeHelper
- uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  isExternal: true
  name: ToXml(Object)
  nameWithType: WCXmlHelper.ToXml(Object)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.WCXmlHelper
  commentId: T:Microsoft.Health.Utility.WCXmlHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: WCXmlHelper
  nameWithType: WCXmlHelper
  fullName: Microsoft.Health.Utility.WCXmlHelper
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: Microsoft.Health.PhraseAnalyzer.Analyzer.#ctor*
  commentId: Overload:Microsoft.Health.PhraseAnalyzer.Analyzer.#ctor
  isExternal: false
  name: Analyzer
  nameWithType: Analyzer.Analyzer
  fullName: Microsoft.Health.PhraseAnalyzer.Analyzer.Analyzer
- uid: Microsoft.Health.PhraseAnalyzer.ClassExpression
  commentId: T:Microsoft.Health.PhraseAnalyzer.ClassExpression
  parent: Microsoft.Health.PhraseAnalyzer
  isExternal: false
  name: ClassExpression
  nameWithType: ClassExpression
  fullName: Microsoft.Health.PhraseAnalyzer.ClassExpression
- uid: Microsoft.Health.PhraseAnalyzer.WordBreakLexer
  commentId: T:Microsoft.Health.PhraseAnalyzer.WordBreakLexer
  parent: Microsoft.Health.PhraseAnalyzer
  isExternal: false
  name: WordBreakLexer
  nameWithType: WordBreakLexer
  fullName: Microsoft.Health.PhraseAnalyzer.WordBreakLexer
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[]
  name: KeyValuePair<String, IMatcher>[]
  nameWithType: KeyValuePair<String, IMatcher>[]
  fullName: System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.PhraseAnalyzer.IMatcher>[]
  nameWithType.vb: KeyValuePair(Of String, IMatcher)()
  fullName.vb: System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.PhraseAnalyzer.IMatcher)()
  name.vb: KeyValuePair(Of String, IMatcher)()
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.IMatcher
    name: IMatcher
    nameWithType: IMatcher
    fullName: Microsoft.Health.PhraseAnalyzer.IMatcher
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.IMatcher
    name: IMatcher
    nameWithType: IMatcher
    fullName: Microsoft.Health.PhraseAnalyzer.IMatcher
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Func{System.String,System.IO.StreamReader}
  commentId: T:System.Func{System.String,System.IO.StreamReader}
  parent: System
  definition: System.Func`2
  name: Func<String, StreamReader>
  nameWithType: Func<String, StreamReader>
  fullName: System.Func<System.String, System.IO.StreamReader>
  nameWithType.vb: Func(Of String, StreamReader)
  fullName.vb: System.Func(Of System.String, System.IO.StreamReader)
  name.vb: Func(Of String, StreamReader)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.StreamReader
    name: StreamReader
    nameWithType: StreamReader
    fullName: System.IO.StreamReader
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.StreamReader
    name: StreamReader
    nameWithType: StreamReader
    fullName: System.IO.StreamReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.TextReader
  commentId: T:System.IO.TextReader
  parent: System.IO
  isExternal: true
  name: TextReader
  nameWithType: TextReader
  fullName: System.IO.TextReader
- uid: System.IO
  commentId: N:System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: Microsoft.Health.PhraseAnalyzer.Analyzer.Analyze*
  commentId: Overload:Microsoft.Health.PhraseAnalyzer.Analyzer.Analyze
  isExternal: false
  name: Analyze
  nameWithType: Analyzer.Analyze
  fullName: Microsoft.Health.PhraseAnalyzer.Analyzer.Analyze
- uid: Microsoft.Health.PhraseAnalyzer.AnalyzerResults
  commentId: T:Microsoft.Health.PhraseAnalyzer.AnalyzerResults
  parent: Microsoft.Health.PhraseAnalyzer
  isExternal: false
  name: AnalyzerResults
  nameWithType: AnalyzerResults
  fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerResults
- uid: Microsoft.Health.PhraseAnalyzer.Analyzer.Lexer*
  commentId: Overload:Microsoft.Health.PhraseAnalyzer.Analyzer.Lexer
  isExternal: false
  name: Lexer
  nameWithType: Analyzer.Lexer
  fullName: Microsoft.Health.PhraseAnalyzer.Analyzer.Lexer
- uid: Microsoft.Health.PhraseAnalyzer.Analyzer.FileLoader*
  commentId: Overload:Microsoft.Health.PhraseAnalyzer.Analyzer.FileLoader
  isExternal: false
  name: FileLoader
  nameWithType: Analyzer.FileLoader
  fullName: Microsoft.Health.PhraseAnalyzer.Analyzer.FileLoader
- uid: System.Collections.Generic.IList{System.String}
  commentId: T:System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  nameWithType.vb: IList(Of String)
  fullName.vb: System.Collections.Generic.IList(Of System.String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
