### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.Utility.WCXmlHelper
  commentId: T:Microsoft.Health.Utility.WCXmlHelper
  id: WCXmlHelper
  parent: Microsoft.Health.Utility
  children:
  - Microsoft.Health.Utility.WCXmlHelper.CheckAndPrepReader(System.Xml.XmlReader,System.String)
  - Microsoft.Health.Utility.WCXmlHelper.Deserialize``1(System.Xml.XmlReader,System.Func{System.Xml.Serialization.XmlSerializer})
  - Microsoft.Health.Utility.WCXmlHelper.GetXmlDocument
  - Microsoft.Health.Utility.WCXmlHelper.GetXmlReader(System.IO.Stream,System.Xml.XmlReaderSettings)
  - Microsoft.Health.Utility.WCXmlHelper.GetXmlReader(System.IO.TextReader,System.Xml.XmlReaderSettings)
  - Microsoft.Health.Utility.WCXmlHelper.GetXmlReader(System.String,System.Xml.XmlReaderSettings)
  - Microsoft.Health.Utility.WCXmlHelper.GetXmlReader(System.Xml.XmlReader,System.Xml.XmlReaderSettings)
  - Microsoft.Health.Utility.WCXmlHelper.GetXmlReaderForXml(System.String,System.Xml.XmlReaderSettings)
  - Microsoft.Health.Utility.WCXmlHelper.GetXmlSerializer``1
  - Microsoft.Health.Utility.WCXmlHelper.GetXmlWriter(System.IO.Stream,System.Xml.XmlWriterSettings)
  - Microsoft.Health.Utility.WCXmlHelper.GetXmlWriter(System.IO.TextWriter,System.Xml.XmlWriterSettings)
  - Microsoft.Health.Utility.WCXmlHelper.GetXmlWriter(System.Text.StringBuilder,System.Xml.XmlWriterSettings)
  - Microsoft.Health.Utility.WCXmlHelper.MinimumSecureReaderSettings
  - Microsoft.Health.Utility.WCXmlHelper.NoTzDateTimeFromXml(System.Xml.XPath.XPathNavigator,System.DateTime)
  - Microsoft.Health.Utility.WCXmlHelper.NoTzDateTimeFromXsd(System.String,System.DateTime)
  - Microsoft.Health.Utility.WCXmlHelper.PrettyPrintXml(System.Xml.XmlDocument)
  - Microsoft.Health.Utility.WCXmlHelper.ReadElementBoolean(System.Xml.XmlReader,System.String)
  - Microsoft.Health.Utility.WCXmlHelper.ReadElementDate(System.Xml.XmlReader,System.String)
  - Microsoft.Health.Utility.WCXmlHelper.ReadElementGuid(System.Xml.XmlReader,System.String)
  - Microsoft.Health.Utility.WCXmlHelper.ReadElementGuidIf(System.Xml.XmlReader,System.String,System.Guid)
  - Microsoft.Health.Utility.WCXmlHelper.ReadElementInt(System.Xml.XmlReader,System.String)
  - Microsoft.Health.Utility.WCXmlHelper.ReadElementIntIf(System.Xml.XmlReader,System.String,System.Int32)
  - Microsoft.Health.Utility.WCXmlHelper.ReadElementString(System.Xml.XmlReader,System.String)
  - Microsoft.Health.Utility.WCXmlHelper.ReadElementStringIf(System.Xml.XmlReader,System.String,System.String)
  - Microsoft.Health.Utility.WCXmlHelper.ReaderSettings
  - Microsoft.Health.Utility.WCXmlHelper.ReadUntil(System.Xml.XmlReader,System.String)
  - Microsoft.Health.Utility.WCXmlHelper.SafeDeserialize(System.Xml.Serialization.XmlSerializer,System.IO.Stream)
  - Microsoft.Health.Utility.WCXmlHelper.SafeDeserialize(System.Xml.Serialization.XmlSerializer,System.IO.TextReader)
  - Microsoft.Health.Utility.WCXmlHelper.SafeLoad(System.Xml.XmlDocument,System.IO.Stream)
  - Microsoft.Health.Utility.WCXmlHelper.SafeLoadXml(System.Xml.XmlDocument,System.String)
  - Microsoft.Health.Utility.WCXmlHelper.Serialize``1(System.Xml.XmlWriter,``0,System.Xml.Serialization.XmlSerializer)
  - Microsoft.Health.Utility.WCXmlHelper.SkipToElement(System.Xml.XmlReader)
  - Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  - Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Xml.Serialization.XmlSerializer,System.Object)
  - Microsoft.Health.Utility.WCXmlHelper.TryGetUtcDateTimeFromXsd(System.String)
  - Microsoft.Health.Utility.WCXmlHelper.UnicodeWriterSettings
  - Microsoft.Health.Utility.WCXmlHelper.UtcDateTimeFromXsd(System.String,System.DateTime)
  - Microsoft.Health.Utility.WCXmlHelper.UtcXmlFromLocalDateTime(System.DateTime)
  - Microsoft.Health.Utility.WCXmlHelper.Utf8WriterSettings
  - Microsoft.Health.Utility.WCXmlHelper.WcXmlFromDateTime(System.String,System.DateTime)
  - Microsoft.Health.Utility.WCXmlHelper.WriteElementBoolean(System.Xml.XmlWriter,System.String,System.Boolean)
  - Microsoft.Health.Utility.WCXmlHelper.WriteElementStringIf(System.Xml.XmlWriter,System.String,System.String)
  - Microsoft.Health.Utility.WCXmlHelper.WriteRawElementStringIf(System.Xml.XmlWriter,System.String,System.String)
  - Microsoft.Health.Utility.WCXmlHelper.XmlFromNoTzDateTime(System.DateTime)
  - Microsoft.Health.Utility.WCXmlHelper.XmlFromNoTzNow
  - Microsoft.Health.Utility.WCXmlHelper.XmlFromUtcDateTime(System.DateTime)
  - Microsoft.Health.Utility.WCXmlHelper.XmlFromUtcNow
  langs:
  - csharp
  - vb
  name: WCXmlHelper
  nameWithType: WCXmlHelper
  fullName: Microsoft.Health.Utility.WCXmlHelper
  type: Class
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: WCXmlHelper
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 20
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nWildcat XML Helper Class\n"
  example: []
  syntax:
    content: public static class WCXmlHelper
    content.vb: Public Module WCXmlHelper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Health.Utility.WCXmlHelper.ReaderSettings
  commentId: P:Microsoft.Health.Utility.WCXmlHelper.ReaderSettings
  id: ReaderSettings
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: ReaderSettings
  nameWithType: WCXmlHelper.ReaderSettings
  fullName: Microsoft.Health.Utility.WCXmlHelper.ReaderSettings
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ReaderSettings
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 28
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\n"
  example: []
  syntax:
    content: public static XmlReaderSettings ReaderSettings { get; }
    content.vb: Public Shared ReadOnly Property ReaderSettings As XmlReaderSettings
    parameters: []
    return:
      type: System.Xml.XmlReaderSettings
  overload: Microsoft.Health.Utility.WCXmlHelper.ReaderSettings*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Health.Utility.WCXmlHelper.MinimumSecureReaderSettings
  commentId: P:Microsoft.Health.Utility.WCXmlHelper.MinimumSecureReaderSettings
  id: MinimumSecureReaderSettings
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: MinimumSecureReaderSettings
  nameWithType: WCXmlHelper.MinimumSecureReaderSettings
  fullName: Microsoft.Health.Utility.WCXmlHelper.MinimumSecureReaderSettings
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: MinimumSecureReaderSettings
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 51
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nTODO_KRYOU: after 1311, default settings for GetXmlReader methods below\nshould be ReaderSettings and not MinimumSecureReaderSettings. [TFS 150203]\n\nMinimum changes from default settings required for security compliance.\n"
  example: []
  syntax:
    content: public static XmlReaderSettings MinimumSecureReaderSettings { get; }
    content.vb: Public Shared ReadOnly Property MinimumSecureReaderSettings As XmlReaderSettings
    parameters: []
    return:
      type: System.Xml.XmlReaderSettings
  overload: Microsoft.Health.Utility.WCXmlHelper.MinimumSecureReaderSettings*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Health.Utility.WCXmlHelper.UnicodeWriterSettings
  commentId: P:Microsoft.Health.Utility.WCXmlHelper.UnicodeWriterSettings
  id: UnicodeWriterSettings
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: UnicodeWriterSettings
  nameWithType: WCXmlHelper.UnicodeWriterSettings
  fullName: Microsoft.Health.Utility.WCXmlHelper.UnicodeWriterSettings
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: UnicodeWriterSettings
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 64
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\n"
  example: []
  syntax:
    content: public static XmlWriterSettings UnicodeWriterSettings { get; }
    content.vb: Public Shared ReadOnly Property UnicodeWriterSettings As XmlWriterSettings
    parameters: []
    return:
      type: System.Xml.XmlWriterSettings
  overload: Microsoft.Health.Utility.WCXmlHelper.UnicodeWriterSettings*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Health.Utility.WCXmlHelper.Utf8WriterSettings
  commentId: P:Microsoft.Health.Utility.WCXmlHelper.Utf8WriterSettings
  id: Utf8WriterSettings
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: Utf8WriterSettings
  nameWithType: WCXmlHelper.Utf8WriterSettings
  fullName: Microsoft.Health.Utility.WCXmlHelper.Utf8WriterSettings
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Utf8WriterSettings
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 76
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\n"
  example: []
  syntax:
    content: public static XmlWriterSettings Utf8WriterSettings { get; }
    content.vb: Public Shared ReadOnly Property Utf8WriterSettings As XmlWriterSettings
    parameters: []
    return:
      type: System.Xml.XmlWriterSettings
  overload: Microsoft.Health.Utility.WCXmlHelper.Utf8WriterSettings*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Health.Utility.WCXmlHelper.GetXmlDocument
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.GetXmlDocument
  id: GetXmlDocument
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: GetXmlDocument()
  nameWithType: WCXmlHelper.GetXmlDocument()
  fullName: Microsoft.Health.Utility.WCXmlHelper.GetXmlDocument()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetXmlDocument
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 100
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  syntax:
    content: public static XmlDocument GetXmlDocument()
    content.vb: Public Shared Function GetXmlDocument As XmlDocument
    return:
      type: System.Xml.XmlDocument
  overload: Microsoft.Health.Utility.WCXmlHelper.GetXmlDocument*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCXmlHelper.SafeLoadXml(System.Xml.XmlDocument,System.String)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.SafeLoadXml(System.Xml.XmlDocument,System.String)
  id: SafeLoadXml(System.Xml.XmlDocument,System.String)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: SafeLoadXml(XmlDocument, String)
  nameWithType: WCXmlHelper.SafeLoadXml(XmlDocument, String)
  fullName: Microsoft.Health.Utility.WCXmlHelper.SafeLoadXml(System.Xml.XmlDocument, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SafeLoadXml
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 114
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nLoad an XmlDocument using a safe XmlResolver (prohibit DTD processing and no XML resolver).\n"
  example: []
  syntax:
    content: public static void SafeLoadXml(this XmlDocument document, string text)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SafeLoadXml(document As XmlDocument, text As String)
    parameters:
    - id: document
      type: System.Xml.XmlDocument
    - id: text
      type: System.String
  overload: Microsoft.Health.Utility.WCXmlHelper.SafeLoadXml*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCXmlHelper.SafeLoad(System.Xml.XmlDocument,System.IO.Stream)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.SafeLoad(System.Xml.XmlDocument,System.IO.Stream)
  id: SafeLoad(System.Xml.XmlDocument,System.IO.Stream)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: SafeLoad(XmlDocument, Stream)
  nameWithType: WCXmlHelper.SafeLoad(XmlDocument, Stream)
  fullName: Microsoft.Health.Utility.WCXmlHelper.SafeLoad(System.Xml.XmlDocument, System.IO.Stream)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SafeLoad
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 129
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nLoad an XmlDocument using a safe XmlResolver (prohibit DTD processing and no XML resolver).\n"
  example: []
  syntax:
    content: public static void SafeLoad(this XmlDocument document, Stream textStream)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SafeLoad(document As XmlDocument, textStream As Stream)
    parameters:
    - id: document
      type: System.Xml.XmlDocument
    - id: textStream
      type: System.IO.Stream
  overload: Microsoft.Health.Utility.WCXmlHelper.SafeLoad*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCXmlHelper.GetXmlReaderForXml(System.String,System.Xml.XmlReaderSettings)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.GetXmlReaderForXml(System.String,System.Xml.XmlReaderSettings)
  id: GetXmlReaderForXml(System.String,System.Xml.XmlReaderSettings)
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: GetXmlReaderForXml(String, XmlReaderSettings)
  nameWithType: WCXmlHelper.GetXmlReaderForXml(String, XmlReaderSettings)
  fullName: Microsoft.Health.Utility.WCXmlHelper.GetXmlReaderForXml(System.String, System.Xml.XmlReaderSettings)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetXmlReaderForXml
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 141
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  syntax:
    content: public static XmlReader GetXmlReaderForXml(string xml, XmlReaderSettings settings = null)
    content.vb: Public Shared Function GetXmlReaderForXml(xml As String, settings As XmlReaderSettings = Nothing) As XmlReader
    parameters:
    - id: xml
      type: System.String
    - id: settings
      type: System.Xml.XmlReaderSettings
    return:
      type: System.Xml.XmlReader
  overload: Microsoft.Health.Utility.WCXmlHelper.GetXmlReaderForXml*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCXmlHelper.GetXmlReader(System.IO.Stream,System.Xml.XmlReaderSettings)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.GetXmlReader(System.IO.Stream,System.Xml.XmlReaderSettings)
  id: GetXmlReader(System.IO.Stream,System.Xml.XmlReaderSettings)
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: GetXmlReader(Stream, XmlReaderSettings)
  nameWithType: WCXmlHelper.GetXmlReader(Stream, XmlReaderSettings)
  fullName: Microsoft.Health.Utility.WCXmlHelper.GetXmlReader(System.IO.Stream, System.Xml.XmlReaderSettings)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetXmlReader
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 163
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  syntax:
    content: public static XmlReader GetXmlReader(Stream input, XmlReaderSettings settings = null)
    content.vb: Public Shared Function GetXmlReader(input As Stream, settings As XmlReaderSettings = Nothing) As XmlReader
    parameters:
    - id: input
      type: System.IO.Stream
    - id: settings
      type: System.Xml.XmlReaderSettings
    return:
      type: System.Xml.XmlReader
  overload: Microsoft.Health.Utility.WCXmlHelper.GetXmlReader*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCXmlHelper.GetXmlReader(System.IO.TextReader,System.Xml.XmlReaderSettings)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.GetXmlReader(System.IO.TextReader,System.Xml.XmlReaderSettings)
  id: GetXmlReader(System.IO.TextReader,System.Xml.XmlReaderSettings)
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: GetXmlReader(TextReader, XmlReaderSettings)
  nameWithType: WCXmlHelper.GetXmlReader(TextReader, XmlReaderSettings)
  fullName: Microsoft.Health.Utility.WCXmlHelper.GetXmlReader(System.IO.TextReader, System.Xml.XmlReaderSettings)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetXmlReader
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 169
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  syntax:
    content: public static XmlReader GetXmlReader(TextReader input, XmlReaderSettings settings = null)
    content.vb: Public Shared Function GetXmlReader(input As TextReader, settings As XmlReaderSettings = Nothing) As XmlReader
    parameters:
    - id: input
      type: System.IO.TextReader
    - id: settings
      type: System.Xml.XmlReaderSettings
    return:
      type: System.Xml.XmlReader
  overload: Microsoft.Health.Utility.WCXmlHelper.GetXmlReader*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCXmlHelper.GetXmlReader(System.String,System.Xml.XmlReaderSettings)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.GetXmlReader(System.String,System.Xml.XmlReaderSettings)
  id: GetXmlReader(System.String,System.Xml.XmlReaderSettings)
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: GetXmlReader(String, XmlReaderSettings)
  nameWithType: WCXmlHelper.GetXmlReader(String, XmlReaderSettings)
  fullName: Microsoft.Health.Utility.WCXmlHelper.GetXmlReader(System.String, System.Xml.XmlReaderSettings)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetXmlReader
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 175
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  syntax:
    content: public static XmlReader GetXmlReader(string inputUri, XmlReaderSettings settings = null)
    content.vb: Public Shared Function GetXmlReader(inputUri As String, settings As XmlReaderSettings = Nothing) As XmlReader
    parameters:
    - id: inputUri
      type: System.String
    - id: settings
      type: System.Xml.XmlReaderSettings
    return:
      type: System.Xml.XmlReader
  overload: Microsoft.Health.Utility.WCXmlHelper.GetXmlReader*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCXmlHelper.GetXmlReader(System.Xml.XmlReader,System.Xml.XmlReaderSettings)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.GetXmlReader(System.Xml.XmlReader,System.Xml.XmlReaderSettings)
  id: GetXmlReader(System.Xml.XmlReader,System.Xml.XmlReaderSettings)
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: GetXmlReader(XmlReader, XmlReaderSettings)
  nameWithType: WCXmlHelper.GetXmlReader(XmlReader, XmlReaderSettings)
  fullName: Microsoft.Health.Utility.WCXmlHelper.GetXmlReader(System.Xml.XmlReader, System.Xml.XmlReaderSettings)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetXmlReader
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 181
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  syntax:
    content: public static XmlReader GetXmlReader(XmlReader input, XmlReaderSettings settings = null)
    content.vb: Public Shared Function GetXmlReader(input As XmlReader, settings As XmlReaderSettings = Nothing) As XmlReader
    parameters:
    - id: input
      type: System.Xml.XmlReader
    - id: settings
      type: System.Xml.XmlReaderSettings
    return:
      type: System.Xml.XmlReader
  overload: Microsoft.Health.Utility.WCXmlHelper.GetXmlReader*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCXmlHelper.GetXmlWriter(System.IO.Stream,System.Xml.XmlWriterSettings)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.GetXmlWriter(System.IO.Stream,System.Xml.XmlWriterSettings)
  id: GetXmlWriter(System.IO.Stream,System.Xml.XmlWriterSettings)
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: GetXmlWriter(Stream, XmlWriterSettings)
  nameWithType: WCXmlHelper.GetXmlWriter(Stream, XmlWriterSettings)
  fullName: Microsoft.Health.Utility.WCXmlHelper.GetXmlWriter(System.IO.Stream, System.Xml.XmlWriterSettings)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetXmlWriter
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 187
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  syntax:
    content: public static XmlWriter GetXmlWriter(Stream input, XmlWriterSettings settings = null)
    content.vb: Public Shared Function GetXmlWriter(input As Stream, settings As XmlWriterSettings = Nothing) As XmlWriter
    parameters:
    - id: input
      type: System.IO.Stream
    - id: settings
      type: System.Xml.XmlWriterSettings
    return:
      type: System.Xml.XmlWriter
  overload: Microsoft.Health.Utility.WCXmlHelper.GetXmlWriter*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCXmlHelper.GetXmlWriter(System.Text.StringBuilder,System.Xml.XmlWriterSettings)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.GetXmlWriter(System.Text.StringBuilder,System.Xml.XmlWriterSettings)
  id: GetXmlWriter(System.Text.StringBuilder,System.Xml.XmlWriterSettings)
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: GetXmlWriter(StringBuilder, XmlWriterSettings)
  nameWithType: WCXmlHelper.GetXmlWriter(StringBuilder, XmlWriterSettings)
  fullName: Microsoft.Health.Utility.WCXmlHelper.GetXmlWriter(System.Text.StringBuilder, System.Xml.XmlWriterSettings)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetXmlWriter
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 193
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  syntax:
    content: public static XmlWriter GetXmlWriter(StringBuilder input, XmlWriterSettings settings = null)
    content.vb: Public Shared Function GetXmlWriter(input As StringBuilder, settings As XmlWriterSettings = Nothing) As XmlWriter
    parameters:
    - id: input
      type: System.Text.StringBuilder
    - id: settings
      type: System.Xml.XmlWriterSettings
    return:
      type: System.Xml.XmlWriter
  overload: Microsoft.Health.Utility.WCXmlHelper.GetXmlWriter*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCXmlHelper.GetXmlWriter(System.IO.TextWriter,System.Xml.XmlWriterSettings)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.GetXmlWriter(System.IO.TextWriter,System.Xml.XmlWriterSettings)
  id: GetXmlWriter(System.IO.TextWriter,System.Xml.XmlWriterSettings)
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: GetXmlWriter(TextWriter, XmlWriterSettings)
  nameWithType: WCXmlHelper.GetXmlWriter(TextWriter, XmlWriterSettings)
  fullName: Microsoft.Health.Utility.WCXmlHelper.GetXmlWriter(System.IO.TextWriter, System.Xml.XmlWriterSettings)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetXmlWriter
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 199
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  syntax:
    content: public static XmlWriter GetXmlWriter(TextWriter input, XmlWriterSettings settings = null)
    content.vb: Public Shared Function GetXmlWriter(input As TextWriter, settings As XmlWriterSettings = Nothing) As XmlWriter
    parameters:
    - id: input
      type: System.IO.TextWriter
    - id: settings
      type: System.Xml.XmlWriterSettings
    return:
      type: System.Xml.XmlWriter
  overload: Microsoft.Health.Utility.WCXmlHelper.GetXmlWriter*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCXmlHelper.GetXmlSerializer``1
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.GetXmlSerializer``1
  id: GetXmlSerializer``1
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: GetXmlSerializer<T>()
  nameWithType: WCXmlHelper.GetXmlSerializer<T>()
  fullName: Microsoft.Health.Utility.WCXmlHelper.GetXmlSerializer<T>()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetXmlSerializer
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 207
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  syntax:
    content: public static XmlSerializer GetXmlSerializer<T>()
    content.vb: Public Shared Function GetXmlSerializer(Of T) As XmlSerializer
    typeParameters:
    - id: T
    return:
      type: System.Xml.Serialization.XmlSerializer
  overload: Microsoft.Health.Utility.WCXmlHelper.GetXmlSerializer*
  nameWithType.vb: WCXmlHelper.GetXmlSerializer(Of T)()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.WCXmlHelper.GetXmlSerializer(Of T)()
  name.vb: GetXmlSerializer(Of T)()
- uid: Microsoft.Health.Utility.WCXmlHelper.Serialize``1(System.Xml.XmlWriter,``0,System.Xml.Serialization.XmlSerializer)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.Serialize``1(System.Xml.XmlWriter,``0,System.Xml.Serialization.XmlSerializer)
  id: Serialize``1(System.Xml.XmlWriter,``0,System.Xml.Serialization.XmlSerializer)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: Serialize<T>(XmlWriter, T, XmlSerializer)
  nameWithType: WCXmlHelper.Serialize<T>(XmlWriter, T, XmlSerializer)
  fullName: Microsoft.Health.Utility.WCXmlHelper.Serialize<T>(System.Xml.XmlWriter, T, System.Xml.Serialization.XmlSerializer)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Serialize
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 212
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  syntax:
    content: public static void Serialize<T>(this XmlWriter writer, T item, XmlSerializer serializer = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Serialize(Of T)(writer As XmlWriter, item As T, serializer As XmlSerializer = Nothing)
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
    - id: item
      type: '{T}'
    - id: serializer
      type: System.Xml.Serialization.XmlSerializer
    typeParameters:
    - id: T
  overload: Microsoft.Health.Utility.WCXmlHelper.Serialize*
  nameWithType.vb: WCXmlHelper.Serialize(Of T)(XmlWriter, T, XmlSerializer)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.WCXmlHelper.Serialize(Of T)(System.Xml.XmlWriter, T, System.Xml.Serialization.XmlSerializer)
  name.vb: Serialize(Of T)(XmlWriter, T, XmlSerializer)
- uid: Microsoft.Health.Utility.WCXmlHelper.Deserialize``1(System.Xml.XmlReader,System.Func{System.Xml.Serialization.XmlSerializer})
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.Deserialize``1(System.Xml.XmlReader,System.Func{System.Xml.Serialization.XmlSerializer})
  id: Deserialize``1(System.Xml.XmlReader,System.Func{System.Xml.Serialization.XmlSerializer})
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: Deserialize<T>(XmlReader, Func<XmlSerializer>)
  nameWithType: WCXmlHelper.Deserialize<T>(XmlReader, Func<XmlSerializer>)
  fullName: Microsoft.Health.Utility.WCXmlHelper.Deserialize<T>(System.Xml.XmlReader, System.Func<System.Xml.Serialization.XmlSerializer>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Deserialize
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 218
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  syntax:
    content: public static T Deserialize<T>(this XmlReader reader, Func<XmlSerializer> func = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Deserialize(Of T)(reader As XmlReader, func As Func(Of XmlSerializer) = Nothing) As T
    parameters:
    - id: reader
      type: System.Xml.XmlReader
    - id: func
      type: System.Func{System.Xml.Serialization.XmlSerializer}
    typeParameters:
    - id: T
    return:
      type: '{T}'
  overload: Microsoft.Health.Utility.WCXmlHelper.Deserialize*
  nameWithType.vb: WCXmlHelper.Deserialize(Of T)(XmlReader, Func(Of XmlSerializer))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.WCXmlHelper.Deserialize(Of T)(System.Xml.XmlReader, System.Func(Of System.Xml.Serialization.XmlSerializer))
  name.vb: Deserialize(Of T)(XmlReader, Func(Of XmlSerializer))
- uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  id: ToXml(System.Object)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: ToXml(Object)
  nameWithType: WCXmlHelper.ToXml(Object)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ToXml
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 229
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nSerialize the given object to a string. The object must meet the rules of <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static string ToXml(this object value)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToXml(value As Object) As String
    parameters:
    - id: value
      type: System.Object
      description: object to serialize
    return:
      type: System.String
      description: Serialized xml text
  overload: Microsoft.Health.Utility.WCXmlHelper.ToXml*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Xml.Serialization.XmlSerializer,System.Object)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Xml.Serialization.XmlSerializer,System.Object)
  id: ToXml(System.Xml.Serialization.XmlSerializer,System.Object)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: ToXml(XmlSerializer, Object)
  nameWithType: WCXmlHelper.ToXml(XmlSerializer, Object)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Xml.Serialization.XmlSerializer, System.Object)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ToXml
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 241
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nSerialize the given object to a string\n"
  example: []
  syntax:
    content: public static string ToXml(this XmlSerializer serializer, object value)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToXml(serializer As XmlSerializer, value As Object) As String
    parameters:
    - id: serializer
      type: System.Xml.Serialization.XmlSerializer
      description: This serializer
    - id: value
      type: System.Object
      description: object to serialize
    return:
      type: System.String
      description: Serialized xml text
  overload: Microsoft.Health.Utility.WCXmlHelper.ToXml*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCXmlHelper.SafeDeserialize(System.Xml.Serialization.XmlSerializer,System.IO.Stream)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.SafeDeserialize(System.Xml.Serialization.XmlSerializer,System.IO.Stream)
  id: SafeDeserialize(System.Xml.Serialization.XmlSerializer,System.IO.Stream)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: SafeDeserialize(XmlSerializer, Stream)
  nameWithType: WCXmlHelper.SafeDeserialize(XmlSerializer, Stream)
  fullName: Microsoft.Health.Utility.WCXmlHelper.SafeDeserialize(System.Xml.Serialization.XmlSerializer, System.IO.Stream)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SafeDeserialize
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 263
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nDeserializes the XML document contained by the specified stream.\n"
  remarks: "\nEnsures that the XML is parsed safely (prohibit DTD processing and no XmlResolve)\n"
  example: []
  syntax:
    content: public static object SafeDeserialize(this XmlSerializer serializer, Stream stream)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SafeDeserialize(serializer As XmlSerializer, stream As Stream) As Object
    parameters:
    - id: serializer
      type: System.Xml.Serialization.XmlSerializer
    - id: stream
      type: System.IO.Stream
    return:
      type: System.Object
  overload: Microsoft.Health.Utility.WCXmlHelper.SafeDeserialize*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCXmlHelper.SafeDeserialize(System.Xml.Serialization.XmlSerializer,System.IO.TextReader)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.SafeDeserialize(System.Xml.Serialization.XmlSerializer,System.IO.TextReader)
  id: SafeDeserialize(System.Xml.Serialization.XmlSerializer,System.IO.TextReader)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: SafeDeserialize(XmlSerializer, TextReader)
  nameWithType: WCXmlHelper.SafeDeserialize(XmlSerializer, TextReader)
  fullName: Microsoft.Health.Utility.WCXmlHelper.SafeDeserialize(System.Xml.Serialization.XmlSerializer, System.IO.TextReader)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SafeDeserialize
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 278
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nDeserializes the XML document contained by the specified text reader.\n"
  remarks: "\nEnsures that the XML is parsed safely (prohibit DTD processing and no XmlResolve)\n"
  example: []
  syntax:
    content: public static object SafeDeserialize(this XmlSerializer serializer, TextReader textReader)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SafeDeserialize(serializer As XmlSerializer, textReader As TextReader) As Object
    parameters:
    - id: serializer
      type: System.Xml.Serialization.XmlSerializer
    - id: textReader
      type: System.IO.TextReader
    return:
      type: System.Object
  overload: Microsoft.Health.Utility.WCXmlHelper.SafeDeserialize*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCXmlHelper.PrettyPrintXml(System.Xml.XmlDocument)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.PrettyPrintXml(System.Xml.XmlDocument)
  id: PrettyPrintXml(System.Xml.XmlDocument)
  isExtensionMethod: true
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: PrettyPrintXml(XmlDocument)
  nameWithType: WCXmlHelper.PrettyPrintXml(XmlDocument)
  fullName: Microsoft.Health.Utility.WCXmlHelper.PrettyPrintXml(System.Xml.XmlDocument)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: PrettyPrintXml
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 293
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nBeautifies the xml\n"
  example: []
  syntax:
    content: public static string PrettyPrintXml(this XmlDocument doc)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function PrettyPrintXml(doc As XmlDocument) As String
    parameters:
    - id: doc
      type: System.Xml.XmlDocument
      description: ''
    return:
      type: System.String
      description: ''
  overload: Microsoft.Health.Utility.WCXmlHelper.PrettyPrintXml*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCXmlHelper.XmlFromNoTzNow
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.XmlFromNoTzNow
  id: XmlFromNoTzNow
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: XmlFromNoTzNow()
  nameWithType: WCXmlHelper.XmlFromNoTzNow()
  fullName: Microsoft.Health.Utility.WCXmlHelper.XmlFromNoTzNow()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: XmlFromNoTzNow
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 347
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nXML-formatted date time value\n"
  example: []
  syntax:
    content: public static string XmlFromNoTzNow()
    content.vb: Public Shared Function XmlFromNoTzNow As String
    return:
      type: System.String
      description: ''
  overload: Microsoft.Health.Utility.WCXmlHelper.XmlFromNoTzNow*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCXmlHelper.XmlFromNoTzDateTime(System.DateTime)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.XmlFromNoTzDateTime(System.DateTime)
  id: XmlFromNoTzDateTime(System.DateTime)
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: XmlFromNoTzDateTime(DateTime)
  nameWithType: WCXmlHelper.XmlFromNoTzDateTime(DateTime)
  fullName: Microsoft.Health.Utility.WCXmlHelper.XmlFromNoTzDateTime(System.DateTime)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: XmlFromNoTzDateTime
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 357
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nXML-formatted date time value\n"
  example: []
  syntax:
    content: public static string XmlFromNoTzDateTime(DateTime dateTime)
    content.vb: Public Shared Function XmlFromNoTzDateTime(dateTime As Date) As String
    parameters:
    - id: dateTime
      type: System.DateTime
      description: ''
    return:
      type: System.String
      description: ''
  overload: Microsoft.Health.Utility.WCXmlHelper.XmlFromNoTzDateTime*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCXmlHelper.XmlFromUtcNow
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.XmlFromUtcNow
  id: XmlFromUtcNow
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: XmlFromUtcNow()
  nameWithType: WCXmlHelper.XmlFromUtcNow()
  fullName: Microsoft.Health.Utility.WCXmlHelper.XmlFromUtcNow()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: XmlFromUtcNow
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 366
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nXML-formatted date time value\n"
  example: []
  syntax:
    content: public static string XmlFromUtcNow()
    content.vb: Public Shared Function XmlFromUtcNow As String
    return:
      type: System.String
      description: ''
  overload: Microsoft.Health.Utility.WCXmlHelper.XmlFromUtcNow*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCXmlHelper.WcXmlFromDateTime(System.String,System.DateTime)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.WcXmlFromDateTime(System.String,System.DateTime)
  id: WcXmlFromDateTime(System.String,System.DateTime)
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: WcXmlFromDateTime(String, DateTime)
  nameWithType: WCXmlHelper.WcXmlFromDateTime(String, DateTime)
  fullName: Microsoft.Health.Utility.WCXmlHelper.WcXmlFromDateTime(System.String, System.DateTime)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: WcXmlFromDateTime
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 377
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\ncreates a Wildcat \"date-time\" structure from a datetime\n"
  example: []
  syntax:
    content: public static string WcXmlFromDateTime(string elementName, DateTime dateTime)
    content.vb: Public Shared Function WcXmlFromDateTime(elementName As String, dateTime As Date) As String
    parameters:
    - id: elementName
      type: System.String
      description: 'name of outermost element '
    - id: dateTime
      type: System.DateTime
      description: 'dateTime to render '
    return:
      type: System.String
      description: 'string of xml text '
  overload: Microsoft.Health.Utility.WCXmlHelper.WcXmlFromDateTime*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCXmlHelper.XmlFromUtcDateTime(System.DateTime)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.XmlFromUtcDateTime(System.DateTime)
  id: XmlFromUtcDateTime(System.DateTime)
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: XmlFromUtcDateTime(DateTime)
  nameWithType: WCXmlHelper.XmlFromUtcDateTime(DateTime)
  fullName: Microsoft.Health.Utility.WCXmlHelper.XmlFromUtcDateTime(System.DateTime)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: XmlFromUtcDateTime
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 402
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nXML-formatted date time value\n"
  example: []
  syntax:
    content: public static string XmlFromUtcDateTime(DateTime dateTime)
    content.vb: Public Shared Function XmlFromUtcDateTime(dateTime As Date) As String
    parameters:
    - id: dateTime
      type: System.DateTime
      description: ''
    return:
      type: System.String
      description: ''
  overload: Microsoft.Health.Utility.WCXmlHelper.XmlFromUtcDateTime*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCXmlHelper.UtcXmlFromLocalDateTime(System.DateTime)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.UtcXmlFromLocalDateTime(System.DateTime)
  id: UtcXmlFromLocalDateTime(System.DateTime)
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: UtcXmlFromLocalDateTime(DateTime)
  nameWithType: WCXmlHelper.UtcXmlFromLocalDateTime(DateTime)
  fullName: Microsoft.Health.Utility.WCXmlHelper.UtcXmlFromLocalDateTime(System.DateTime)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: UtcXmlFromLocalDateTime
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 412
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nXML-formatted date time value\n"
  example: []
  syntax:
    content: public static string UtcXmlFromLocalDateTime(DateTime dateTime)
    content.vb: Public Shared Function UtcXmlFromLocalDateTime(dateTime As Date) As String
    parameters:
    - id: dateTime
      type: System.DateTime
      description: ''
    return:
      type: System.String
      description: ''
  overload: Microsoft.Health.Utility.WCXmlHelper.UtcXmlFromLocalDateTime*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCXmlHelper.NoTzDateTimeFromXsd(System.String,System.DateTime)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.NoTzDateTimeFromXsd(System.String,System.DateTime)
  id: NoTzDateTimeFromXsd(System.String,System.DateTime)
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: NoTzDateTimeFromXsd(String, DateTime)
  nameWithType: WCXmlHelper.NoTzDateTimeFromXsd(String, DateTime)
  fullName: Microsoft.Health.Utility.WCXmlHelper.NoTzDateTimeFromXsd(System.String, System.DateTime)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: NoTzDateTimeFromXsd
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 424
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nparse an xsd date time representation into a C# datetime,\nignoring timezone.\n"
  example: []
  syntax:
    content: public static DateTime NoTzDateTimeFromXsd(string xsdStr, DateTime dtDefault)
    content.vb: Public Shared Function NoTzDateTimeFromXsd(xsdStr As String, dtDefault As Date) As Date
    parameters:
    - id: xsdStr
      type: System.String
      description: 'xsd-formated date or datetime '
    - id: dtDefault
      type: System.DateTime
      description: 'default value if parse fails '
    return:
      type: System.DateTime
      description: 'parse value, or dtDefault '
  overload: Microsoft.Health.Utility.WCXmlHelper.NoTzDateTimeFromXsd*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCXmlHelper.UtcDateTimeFromXsd(System.String,System.DateTime)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.UtcDateTimeFromXsd(System.String,System.DateTime)
  id: UtcDateTimeFromXsd(System.String,System.DateTime)
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: UtcDateTimeFromXsd(String, DateTime)
  nameWithType: WCXmlHelper.UtcDateTimeFromXsd(String, DateTime)
  fullName: Microsoft.Health.Utility.WCXmlHelper.UtcDateTimeFromXsd(System.String, System.DateTime)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: UtcDateTimeFromXsd
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 488
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nparse an xsd date time representation into a Utc .Net datetime\n"
  example: []
  syntax:
    content: public static DateTime UtcDateTimeFromXsd(string xsdStr, DateTime dtDefault)
    content.vb: Public Shared Function UtcDateTimeFromXsd(xsdStr As String, dtDefault As Date) As Date
    parameters:
    - id: xsdStr
      type: System.String
      description: 'xsd-formated date or datetime '
    - id: dtDefault
      type: System.DateTime
      description: 'default value if parse fails '
    return:
      type: System.DateTime
      description: 'parse value, or dtDefault '
  overload: Microsoft.Health.Utility.WCXmlHelper.UtcDateTimeFromXsd*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCXmlHelper.TryGetUtcDateTimeFromXsd(System.String)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.TryGetUtcDateTimeFromXsd(System.String)
  id: TryGetUtcDateTimeFromXsd(System.String)
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: TryGetUtcDateTimeFromXsd(String)
  nameWithType: WCXmlHelper.TryGetUtcDateTimeFromXsd(String)
  fullName: Microsoft.Health.Utility.WCXmlHelper.TryGetUtcDateTimeFromXsd(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: TryGetUtcDateTimeFromXsd
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 504
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nparse an xsd date time representation into a Utc .Net datetime\n"
  example: []
  syntax:
    content: public static DateTime? TryGetUtcDateTimeFromXsd(string xsdStr)
    content.vb: Public Shared Function TryGetUtcDateTimeFromXsd(xsdStr As String) As Date?
    parameters:
    - id: xsdStr
      type: System.String
      description: 'xsd-formated date or datetime '
    return:
      type: System.Nullable{System.DateTime}
      description: 'parse value or null '
  overload: Microsoft.Health.Utility.WCXmlHelper.TryGetUtcDateTimeFromXsd*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCXmlHelper.NoTzDateTimeFromXml(System.Xml.XPath.XPathNavigator,System.DateTime)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.NoTzDateTimeFromXml(System.Xml.XPath.XPathNavigator,System.DateTime)
  id: NoTzDateTimeFromXml(System.Xml.XPath.XPathNavigator,System.DateTime)
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: NoTzDateTimeFromXml(XPathNavigator, DateTime)
  nameWithType: WCXmlHelper.NoTzDateTimeFromXml(XPathNavigator, DateTime)
  fullName: Microsoft.Health.Utility.WCXmlHelper.NoTzDateTimeFromXml(System.Xml.XPath.XPathNavigator, System.DateTime)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: NoTzDateTimeFromXml
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 528
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nparse an xml date time representation into a C# DateTime\nignoring timezone.\nreturn dtDefault if we're unable to grok what we get\n"
  remarks: "\nWill accept wildcat date-time or approx-date-time values,\nas well as XSD DateTime.\n"
  example: []
  syntax:
    content: public static DateTime NoTzDateTimeFromXml(XPathNavigator navED, DateTime dtDefault)
    content.vb: Public Shared Function NoTzDateTimeFromXml(navED As XPathNavigator, dtDefault As Date) As Date
    parameters:
    - id: navED
      type: System.Xml.XPath.XPathNavigator
      description: 'nav positioned on date xml '
    - id: dtDefault
      type: System.DateTime
      description: 'default value '
    return:
      type: System.DateTime
      description: 'parsed value, or defaultDT '
  overload: Microsoft.Health.Utility.WCXmlHelper.NoTzDateTimeFromXml*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCXmlHelper.ReadUntil(System.Xml.XmlReader,System.String)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ReadUntil(System.Xml.XmlReader,System.String)
  id: ReadUntil(System.Xml.XmlReader,System.String)
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: ReadUntil(XmlReader, String)
  nameWithType: WCXmlHelper.ReadUntil(XmlReader, String)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ReadUntil(System.Xml.XmlReader, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ReadUntil
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 620
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nRead until we find a node with the name\n"
  example: []
  syntax:
    content: public static bool ReadUntil(XmlReader xmlReader, string elementName)
    content.vb: Public Shared Function ReadUntil(xmlReader As XmlReader, elementName As String) As Boolean
    parameters:
    - id: xmlReader
      type: System.Xml.XmlReader
      description: ''
    - id: elementName
      type: System.String
      description: ''
    return:
      type: System.Boolean
  overload: Microsoft.Health.Utility.WCXmlHelper.ReadUntil*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCXmlHelper.SkipToElement(System.Xml.XmlReader)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.SkipToElement(System.Xml.XmlReader)
  id: SkipToElement(System.Xml.XmlReader)
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: SkipToElement(XmlReader)
  nameWithType: WCXmlHelper.SkipToElement(XmlReader)
  fullName: Microsoft.Health.Utility.WCXmlHelper.SkipToElement(System.Xml.XmlReader)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SkipToElement
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 643
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nRead until we get to the next element\n"
  example: []
  syntax:
    content: public static bool SkipToElement(XmlReader xmlReader)
    content.vb: Public Shared Function SkipToElement(xmlReader As XmlReader) As Boolean
    parameters:
    - id: xmlReader
      type: System.Xml.XmlReader
      description: ''
    return:
      type: System.Boolean
  overload: Microsoft.Health.Utility.WCXmlHelper.SkipToElement*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCXmlHelper.ReadElementStringIf(System.Xml.XmlReader,System.String,System.String)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ReadElementStringIf(System.Xml.XmlReader,System.String,System.String)
  id: ReadElementStringIf(System.Xml.XmlReader,System.String,System.String)
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: ReadElementStringIf(XmlReader, String, String)
  nameWithType: WCXmlHelper.ReadElementStringIf(XmlReader, String, String)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ReadElementStringIf(System.Xml.XmlReader, System.String, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ReadElementStringIf
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 663
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nMoves to an element node, reads an optional string. If not present,\nthen we set it to the default\n"
  example: []
  syntax:
    content: public static string ReadElementStringIf(XmlReader xmlReader, string optionalName, string def)
    content.vb: Public Shared Function ReadElementStringIf(xmlReader As XmlReader, optionalName As String, def As String) As String
    parameters:
    - id: xmlReader
      type: System.Xml.XmlReader
      description: ''
    - id: optionalName
      type: System.String
      description: ''
    - id: def
      type: System.String
      description: ''
    return:
      type: System.String
  overload: Microsoft.Health.Utility.WCXmlHelper.ReadElementStringIf*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCXmlHelper.ReadElementGuidIf(System.Xml.XmlReader,System.String,System.Guid)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ReadElementGuidIf(System.Xml.XmlReader,System.String,System.Guid)
  id: ReadElementGuidIf(System.Xml.XmlReader,System.String,System.Guid)
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: ReadElementGuidIf(XmlReader, String, Guid)
  nameWithType: WCXmlHelper.ReadElementGuidIf(XmlReader, String, Guid)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ReadElementGuidIf(System.Xml.XmlReader, System.String, System.Guid)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ReadElementGuidIf
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 686
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nMoves to an element node, reads an optional string. If not present,\nthen we set it to the default\n"
  example: []
  syntax:
    content: public static Guid ReadElementGuidIf(XmlReader xmlReader, string optionalName, Guid def)
    content.vb: Public Shared Function ReadElementGuidIf(xmlReader As XmlReader, optionalName As String, def As Guid) As Guid
    parameters:
    - id: xmlReader
      type: System.Xml.XmlReader
      description: ''
    - id: optionalName
      type: System.String
      description: ''
    - id: def
      type: System.Guid
      description: ''
    return:
      type: System.Guid
  overload: Microsoft.Health.Utility.WCXmlHelper.ReadElementGuidIf*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCXmlHelper.ReadElementIntIf(System.Xml.XmlReader,System.String,System.Int32)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ReadElementIntIf(System.Xml.XmlReader,System.String,System.Int32)
  id: ReadElementIntIf(System.Xml.XmlReader,System.String,System.Int32)
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: ReadElementIntIf(XmlReader, String, Int32)
  nameWithType: WCXmlHelper.ReadElementIntIf(XmlReader, String, Int32)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ReadElementIntIf(System.Xml.XmlReader, System.String, System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ReadElementIntIf
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 717
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nMoves to an element node, reads an optional int. If not present,\nthen we set it to the default\n"
  example: []
  syntax:
    content: public static int ReadElementIntIf(XmlReader xmlReader, string optionalName, int def)
    content.vb: Public Shared Function ReadElementIntIf(xmlReader As XmlReader, optionalName As String, def As Integer) As Integer
    parameters:
    - id: xmlReader
      type: System.Xml.XmlReader
      description: ''
    - id: optionalName
      type: System.String
      description: ''
    - id: def
      type: System.Int32
      description: ''
    return:
      type: System.Int32
  overload: Microsoft.Health.Utility.WCXmlHelper.ReadElementIntIf*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCXmlHelper.ReadElementString(System.Xml.XmlReader,System.String)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ReadElementString(System.Xml.XmlReader,System.String)
  id: ReadElementString(System.Xml.XmlReader,System.String)
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: ReadElementString(XmlReader, String)
  nameWithType: WCXmlHelper.ReadElementString(XmlReader, String)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ReadElementString(System.Xml.XmlReader, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ReadElementString
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 738
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nMoves to an element node and reads it as a string\n"
  example: []
  syntax:
    content: public static string ReadElementString(XmlReader xmlReader, string expectedName)
    content.vb: Public Shared Function ReadElementString(xmlReader As XmlReader, expectedName As String) As String
    parameters:
    - id: xmlReader
      type: System.Xml.XmlReader
      description: ''
    - id: expectedName
      type: System.String
      description: ''
    return:
      type: System.String
  overload: Microsoft.Health.Utility.WCXmlHelper.ReadElementString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCXmlHelper.ReadElementGuid(System.Xml.XmlReader,System.String)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ReadElementGuid(System.Xml.XmlReader,System.String)
  id: ReadElementGuid(System.Xml.XmlReader,System.String)
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: ReadElementGuid(XmlReader, String)
  nameWithType: WCXmlHelper.ReadElementGuid(XmlReader, String)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ReadElementGuid(System.Xml.XmlReader, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ReadElementGuid
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 759
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nMoves to an element node and reads it as a Guid.\n"
  example: []
  syntax:
    content: public static Guid ReadElementGuid(XmlReader xmlReader, string expectedName)
    content.vb: Public Shared Function ReadElementGuid(xmlReader As XmlReader, expectedName As String) As Guid
    parameters:
    - id: xmlReader
      type: System.Xml.XmlReader
      description: ''
    - id: expectedName
      type: System.String
      description: ''
    return:
      type: System.Guid
  overload: Microsoft.Health.Utility.WCXmlHelper.ReadElementGuid*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCXmlHelper.ReadElementInt(System.Xml.XmlReader,System.String)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ReadElementInt(System.Xml.XmlReader,System.String)
  id: ReadElementInt(System.Xml.XmlReader,System.String)
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: ReadElementInt(XmlReader, String)
  nameWithType: WCXmlHelper.ReadElementInt(XmlReader, String)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ReadElementInt(System.Xml.XmlReader, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ReadElementInt
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 780
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nMoves to an element node and reads it as an int.\n"
  example: []
  syntax:
    content: public static int ReadElementInt(XmlReader xmlReader, string expectedName)
    content.vb: Public Shared Function ReadElementInt(xmlReader As XmlReader, expectedName As String) As Integer
    parameters:
    - id: xmlReader
      type: System.Xml.XmlReader
      description: ''
    - id: expectedName
      type: System.String
      description: ''
    return:
      type: System.Int32
  overload: Microsoft.Health.Utility.WCXmlHelper.ReadElementInt*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCXmlHelper.ReadElementDate(System.Xml.XmlReader,System.String)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ReadElementDate(System.Xml.XmlReader,System.String)
  id: ReadElementDate(System.Xml.XmlReader,System.String)
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: ReadElementDate(XmlReader, String)
  nameWithType: WCXmlHelper.ReadElementDate(XmlReader, String)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ReadElementDate(System.Xml.XmlReader, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ReadElementDate
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 801
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nMoves to an element node and reads it as a date.\n"
  example: []
  syntax:
    content: public static DateTime ReadElementDate(XmlReader xmlReader, string expectedName)
    content.vb: Public Shared Function ReadElementDate(xmlReader As XmlReader, expectedName As String) As Date
    parameters:
    - id: xmlReader
      type: System.Xml.XmlReader
      description: ''
    - id: expectedName
      type: System.String
      description: ''
    return:
      type: System.DateTime
  overload: Microsoft.Health.Utility.WCXmlHelper.ReadElementDate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCXmlHelper.ReadElementBoolean(System.Xml.XmlReader,System.String)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ReadElementBoolean(System.Xml.XmlReader,System.String)
  id: ReadElementBoolean(System.Xml.XmlReader,System.String)
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: ReadElementBoolean(XmlReader, String)
  nameWithType: WCXmlHelper.ReadElementBoolean(XmlReader, String)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ReadElementBoolean(System.Xml.XmlReader, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ReadElementBoolean
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 822
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nMoves to an element node and reads it as a boolean.\n"
  example: []
  syntax:
    content: public static bool ReadElementBoolean(XmlReader xmlReader, string expectedName)
    content.vb: Public Shared Function ReadElementBoolean(xmlReader As XmlReader, expectedName As String) As Boolean
    parameters:
    - id: xmlReader
      type: System.Xml.XmlReader
      description: ''
    - id: expectedName
      type: System.String
      description: ''
    return:
      type: System.Boolean
  overload: Microsoft.Health.Utility.WCXmlHelper.ReadElementBoolean*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCXmlHelper.CheckAndPrepReader(System.Xml.XmlReader,System.String)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.CheckAndPrepReader(System.Xml.XmlReader,System.String)
  id: CheckAndPrepReader(System.Xml.XmlReader,System.String)
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: CheckAndPrepReader(XmlReader, String)
  nameWithType: WCXmlHelper.CheckAndPrepReader(XmlReader, String)
  fullName: Microsoft.Health.Utility.WCXmlHelper.CheckAndPrepReader(System.Xml.XmlReader, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CheckAndPrepReader
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 838
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  syntax:
    content: public static void CheckAndPrepReader(XmlReader reader, string nodeName)
    content.vb: Public Shared Sub CheckAndPrepReader(reader As XmlReader, nodeName As String)
    parameters:
    - id: reader
      type: System.Xml.XmlReader
    - id: nodeName
      type: System.String
  overload: Microsoft.Health.Utility.WCXmlHelper.CheckAndPrepReader*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCXmlHelper.WriteElementStringIf(System.Xml.XmlWriter,System.String,System.String)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.WriteElementStringIf(System.Xml.XmlWriter,System.String,System.String)
  id: WriteElementStringIf(System.Xml.XmlWriter,System.String,System.String)
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: WriteElementStringIf(XmlWriter, String, String)
  nameWithType: WCXmlHelper.WriteElementStringIf(XmlWriter, String, String)
  fullName: Microsoft.Health.Utility.WCXmlHelper.WriteElementStringIf(System.Xml.XmlWriter, System.String, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: WriteElementStringIf
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 855
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  syntax:
    content: public static void WriteElementStringIf(XmlWriter writer, string elementName, string value)
    content.vb: Public Shared Sub WriteElementStringIf(writer As XmlWriter, elementName As String, value As String)
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
    - id: elementName
      type: System.String
    - id: value
      type: System.String
  overload: Microsoft.Health.Utility.WCXmlHelper.WriteElementStringIf*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCXmlHelper.WriteRawElementStringIf(System.Xml.XmlWriter,System.String,System.String)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.WriteRawElementStringIf(System.Xml.XmlWriter,System.String,System.String)
  id: WriteRawElementStringIf(System.Xml.XmlWriter,System.String,System.String)
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: WriteRawElementStringIf(XmlWriter, String, String)
  nameWithType: WCXmlHelper.WriteRawElementStringIf(XmlWriter, String, String)
  fullName: Microsoft.Health.Utility.WCXmlHelper.WriteRawElementStringIf(System.Xml.XmlWriter, System.String, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: WriteRawElementStringIf
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 863
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  syntax:
    content: public static void WriteRawElementStringIf(XmlWriter writer, string elementName, string value)
    content.vb: Public Shared Sub WriteRawElementStringIf(writer As XmlWriter, elementName As String, value As String)
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
    - id: elementName
      type: System.String
    - id: value
      type: System.String
  overload: Microsoft.Health.Utility.WCXmlHelper.WriteRawElementStringIf*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCXmlHelper.WriteElementBoolean(System.Xml.XmlWriter,System.String,System.Boolean)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.WriteElementBoolean(System.Xml.XmlWriter,System.String,System.Boolean)
  id: WriteElementBoolean(System.Xml.XmlWriter,System.String,System.Boolean)
  parent: Microsoft.Health.Utility.WCXmlHelper
  langs:
  - csharp
  - vb
  name: WriteElementBoolean(XmlWriter, String, Boolean)
  nameWithType: WCXmlHelper.WriteElementBoolean(XmlWriter, String, Boolean)
  fullName: Microsoft.Health.Utility.WCXmlHelper.WriteElementBoolean(System.Xml.XmlWriter, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlHelpers.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: WriteElementBoolean
    path: ../Microsoft.Health.Utility/utilities/XmlHelpers.cs
    startLine: 873
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  syntax:
    content: public static void WriteElementBoolean(XmlWriter writer, string elementName, bool value)
    content.vb: Public Shared Sub WriteElementBoolean(writer As XmlWriter, elementName As String, value As Boolean)
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
    - id: elementName
      type: System.String
    - id: value
      type: System.Boolean
  overload: Microsoft.Health.Utility.WCXmlHelper.WriteElementBoolean*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Utility.WCXmlHelper.ReaderSettings*
  commentId: Overload:Microsoft.Health.Utility.WCXmlHelper.ReaderSettings
  isExternal: false
  name: ReaderSettings
  nameWithType: WCXmlHelper.ReaderSettings
  fullName: Microsoft.Health.Utility.WCXmlHelper.ReaderSettings
- uid: System.Xml.XmlReaderSettings
  commentId: T:System.Xml.XmlReaderSettings
  parent: System.Xml
  isExternal: true
  name: XmlReaderSettings
  nameWithType: XmlReaderSettings
  fullName: System.Xml.XmlReaderSettings
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: false
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: Microsoft.Health.Utility.WCXmlHelper.MinimumSecureReaderSettings*
  commentId: Overload:Microsoft.Health.Utility.WCXmlHelper.MinimumSecureReaderSettings
  isExternal: false
  name: MinimumSecureReaderSettings
  nameWithType: WCXmlHelper.MinimumSecureReaderSettings
  fullName: Microsoft.Health.Utility.WCXmlHelper.MinimumSecureReaderSettings
- uid: Microsoft.Health.Utility.WCXmlHelper.UnicodeWriterSettings*
  commentId: Overload:Microsoft.Health.Utility.WCXmlHelper.UnicodeWriterSettings
  isExternal: false
  name: UnicodeWriterSettings
  nameWithType: WCXmlHelper.UnicodeWriterSettings
  fullName: Microsoft.Health.Utility.WCXmlHelper.UnicodeWriterSettings
- uid: System.Xml.XmlWriterSettings
  commentId: T:System.Xml.XmlWriterSettings
  parent: System.Xml
  isExternal: true
  name: XmlWriterSettings
  nameWithType: XmlWriterSettings
  fullName: System.Xml.XmlWriterSettings
- uid: Microsoft.Health.Utility.WCXmlHelper.Utf8WriterSettings*
  commentId: Overload:Microsoft.Health.Utility.WCXmlHelper.Utf8WriterSettings
  isExternal: false
  name: Utf8WriterSettings
  nameWithType: WCXmlHelper.Utf8WriterSettings
  fullName: Microsoft.Health.Utility.WCXmlHelper.Utf8WriterSettings
- uid: Microsoft.Health.Utility.WCXmlHelper.GetXmlDocument*
  commentId: Overload:Microsoft.Health.Utility.WCXmlHelper.GetXmlDocument
  isExternal: false
  name: GetXmlDocument
  nameWithType: WCXmlHelper.GetXmlDocument
  fullName: Microsoft.Health.Utility.WCXmlHelper.GetXmlDocument
- uid: System.Xml.XmlDocument
  commentId: T:System.Xml.XmlDocument
  parent: System.Xml
  isExternal: true
  name: XmlDocument
  nameWithType: XmlDocument
  fullName: System.Xml.XmlDocument
- uid: Microsoft.Health.Utility.WCXmlHelper.SafeLoadXml*
  commentId: Overload:Microsoft.Health.Utility.WCXmlHelper.SafeLoadXml
  isExternal: false
  name: SafeLoadXml
  nameWithType: WCXmlHelper.SafeLoadXml
  fullName: Microsoft.Health.Utility.WCXmlHelper.SafeLoadXml
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Health.Utility.WCXmlHelper.SafeLoad*
  commentId: Overload:Microsoft.Health.Utility.WCXmlHelper.SafeLoad
  isExternal: false
  name: SafeLoad
  nameWithType: WCXmlHelper.SafeLoad
  fullName: Microsoft.Health.Utility.WCXmlHelper.SafeLoad
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO
  commentId: N:System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: Microsoft.Health.Utility.WCXmlHelper.GetXmlReaderForXml*
  commentId: Overload:Microsoft.Health.Utility.WCXmlHelper.GetXmlReaderForXml
  isExternal: false
  name: GetXmlReaderForXml
  nameWithType: WCXmlHelper.GetXmlReaderForXml
  fullName: Microsoft.Health.Utility.WCXmlHelper.GetXmlReaderForXml
- uid: System.Xml.XmlReader
  commentId: T:System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: Microsoft.Health.Utility.WCXmlHelper.GetXmlReader*
  commentId: Overload:Microsoft.Health.Utility.WCXmlHelper.GetXmlReader
  isExternal: false
  name: GetXmlReader
  nameWithType: WCXmlHelper.GetXmlReader
  fullName: Microsoft.Health.Utility.WCXmlHelper.GetXmlReader
- uid: System.IO.TextReader
  commentId: T:System.IO.TextReader
  parent: System.IO
  isExternal: true
  name: TextReader
  nameWithType: TextReader
  fullName: System.IO.TextReader
- uid: Microsoft.Health.Utility.WCXmlHelper.GetXmlWriter*
  commentId: Overload:Microsoft.Health.Utility.WCXmlHelper.GetXmlWriter
  isExternal: false
  name: GetXmlWriter
  nameWithType: WCXmlHelper.GetXmlWriter
  fullName: Microsoft.Health.Utility.WCXmlHelper.GetXmlWriter
- uid: System.Xml.XmlWriter
  commentId: T:System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Text.StringBuilder
  commentId: T:System.Text.StringBuilder
  parent: System.Text
  isExternal: true
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Text
  commentId: N:System.Text
  isExternal: false
  name: System.Text
  nameWithType: System.Text
  fullName: System.Text
- uid: System.IO.TextWriter
  commentId: T:System.IO.TextWriter
  parent: System.IO
  isExternal: true
  name: TextWriter
  nameWithType: TextWriter
  fullName: System.IO.TextWriter
- uid: Microsoft.Health.Utility.WCXmlHelper.GetXmlSerializer*
  commentId: Overload:Microsoft.Health.Utility.WCXmlHelper.GetXmlSerializer
  isExternal: false
  name: GetXmlSerializer
  nameWithType: WCXmlHelper.GetXmlSerializer
  fullName: Microsoft.Health.Utility.WCXmlHelper.GetXmlSerializer
- uid: System.Xml.Serialization.XmlSerializer
  commentId: T:System.Xml.Serialization.XmlSerializer
  parent: System.Xml.Serialization
  isExternal: true
  name: XmlSerializer
  nameWithType: XmlSerializer
  fullName: System.Xml.Serialization.XmlSerializer
- uid: System.Xml.Serialization
  commentId: N:System.Xml.Serialization
  isExternal: false
  name: System.Xml.Serialization
  nameWithType: System.Xml.Serialization
  fullName: System.Xml.Serialization
- uid: Microsoft.Health.Utility.WCXmlHelper.Serialize*
  commentId: Overload:Microsoft.Health.Utility.WCXmlHelper.Serialize
  isExternal: false
  name: Serialize
  nameWithType: WCXmlHelper.Serialize
  fullName: Microsoft.Health.Utility.WCXmlHelper.Serialize
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: Microsoft.Health.Utility.WCXmlHelper.Deserialize*
  commentId: Overload:Microsoft.Health.Utility.WCXmlHelper.Deserialize
  isExternal: false
  name: Deserialize
  nameWithType: WCXmlHelper.Deserialize
  fullName: Microsoft.Health.Utility.WCXmlHelper.Deserialize
- uid: System.Func{System.Xml.Serialization.XmlSerializer}
  commentId: T:System.Func{System.Xml.Serialization.XmlSerializer}
  parent: System
  definition: System.Func`1
  name: Func<XmlSerializer>
  nameWithType: Func<XmlSerializer>
  fullName: System.Func<System.Xml.Serialization.XmlSerializer>
  nameWithType.vb: Func(Of XmlSerializer)
  fullName.vb: System.Func(Of System.Xml.Serialization.XmlSerializer)
  name.vb: Func(Of XmlSerializer)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xml.Serialization.XmlSerializer
    name: XmlSerializer
    nameWithType: XmlSerializer
    fullName: System.Xml.Serialization.XmlSerializer
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Xml.Serialization.XmlSerializer
    name: XmlSerializer
    nameWithType: XmlSerializer
    fullName: System.Xml.Serialization.XmlSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.WCXmlHelper.ToXml*
  commentId: Overload:Microsoft.Health.Utility.WCXmlHelper.ToXml
  isExternal: false
  name: ToXml
  nameWithType: WCXmlHelper.ToXml
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
- uid: Microsoft.Health.Utility.WCXmlHelper.SafeDeserialize*
  commentId: Overload:Microsoft.Health.Utility.WCXmlHelper.SafeDeserialize
  isExternal: false
  name: SafeDeserialize
  nameWithType: WCXmlHelper.SafeDeserialize
  fullName: Microsoft.Health.Utility.WCXmlHelper.SafeDeserialize
- uid: Microsoft.Health.Utility.WCXmlHelper.PrettyPrintXml*
  commentId: Overload:Microsoft.Health.Utility.WCXmlHelper.PrettyPrintXml
  isExternal: false
  name: PrettyPrintXml
  nameWithType: WCXmlHelper.PrettyPrintXml
  fullName: Microsoft.Health.Utility.WCXmlHelper.PrettyPrintXml
- uid: Microsoft.Health.Utility.WCXmlHelper.XmlFromNoTzNow*
  commentId: Overload:Microsoft.Health.Utility.WCXmlHelper.XmlFromNoTzNow
  isExternal: false
  name: XmlFromNoTzNow
  nameWithType: WCXmlHelper.XmlFromNoTzNow
  fullName: Microsoft.Health.Utility.WCXmlHelper.XmlFromNoTzNow
- uid: Microsoft.Health.Utility.WCXmlHelper.XmlFromNoTzDateTime*
  commentId: Overload:Microsoft.Health.Utility.WCXmlHelper.XmlFromNoTzDateTime
  isExternal: false
  name: XmlFromNoTzDateTime
  nameWithType: WCXmlHelper.XmlFromNoTzDateTime
  fullName: Microsoft.Health.Utility.WCXmlHelper.XmlFromNoTzDateTime
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: Microsoft.Health.Utility.WCXmlHelper.XmlFromUtcNow*
  commentId: Overload:Microsoft.Health.Utility.WCXmlHelper.XmlFromUtcNow
  isExternal: false
  name: XmlFromUtcNow
  nameWithType: WCXmlHelper.XmlFromUtcNow
  fullName: Microsoft.Health.Utility.WCXmlHelper.XmlFromUtcNow
- uid: Microsoft.Health.Utility.WCXmlHelper.WcXmlFromDateTime*
  commentId: Overload:Microsoft.Health.Utility.WCXmlHelper.WcXmlFromDateTime
  isExternal: false
  name: WcXmlFromDateTime
  nameWithType: WCXmlHelper.WcXmlFromDateTime
  fullName: Microsoft.Health.Utility.WCXmlHelper.WcXmlFromDateTime
- uid: Microsoft.Health.Utility.WCXmlHelper.XmlFromUtcDateTime*
  commentId: Overload:Microsoft.Health.Utility.WCXmlHelper.XmlFromUtcDateTime
  isExternal: false
  name: XmlFromUtcDateTime
  nameWithType: WCXmlHelper.XmlFromUtcDateTime
  fullName: Microsoft.Health.Utility.WCXmlHelper.XmlFromUtcDateTime
- uid: Microsoft.Health.Utility.WCXmlHelper.UtcXmlFromLocalDateTime*
  commentId: Overload:Microsoft.Health.Utility.WCXmlHelper.UtcXmlFromLocalDateTime
  isExternal: false
  name: UtcXmlFromLocalDateTime
  nameWithType: WCXmlHelper.UtcXmlFromLocalDateTime
  fullName: Microsoft.Health.Utility.WCXmlHelper.UtcXmlFromLocalDateTime
- uid: Microsoft.Health.Utility.WCXmlHelper.NoTzDateTimeFromXsd*
  commentId: Overload:Microsoft.Health.Utility.WCXmlHelper.NoTzDateTimeFromXsd
  isExternal: false
  name: NoTzDateTimeFromXsd
  nameWithType: WCXmlHelper.NoTzDateTimeFromXsd
  fullName: Microsoft.Health.Utility.WCXmlHelper.NoTzDateTimeFromXsd
- uid: Microsoft.Health.Utility.WCXmlHelper.UtcDateTimeFromXsd*
  commentId: Overload:Microsoft.Health.Utility.WCXmlHelper.UtcDateTimeFromXsd
  isExternal: false
  name: UtcDateTimeFromXsd
  nameWithType: WCXmlHelper.UtcDateTimeFromXsd
  fullName: Microsoft.Health.Utility.WCXmlHelper.UtcDateTimeFromXsd
- uid: Microsoft.Health.Utility.WCXmlHelper.TryGetUtcDateTimeFromXsd*
  commentId: Overload:Microsoft.Health.Utility.WCXmlHelper.TryGetUtcDateTimeFromXsd
  isExternal: false
  name: TryGetUtcDateTimeFromXsd
  nameWithType: WCXmlHelper.TryGetUtcDateTimeFromXsd
  fullName: Microsoft.Health.Utility.WCXmlHelper.TryGetUtcDateTimeFromXsd
- uid: System.Nullable{System.DateTime}
  commentId: T:System.Nullable{System.DateTime}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTime>
  nameWithType: Nullable<DateTime>
  fullName: System.Nullable<System.DateTime>
  nameWithType.vb: Nullable(Of DateTime)
  fullName.vb: System.Nullable(Of System.DateTime)
  name.vb: Nullable(Of DateTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.WCXmlHelper.NoTzDateTimeFromXml*
  commentId: Overload:Microsoft.Health.Utility.WCXmlHelper.NoTzDateTimeFromXml
  isExternal: false
  name: NoTzDateTimeFromXml
  nameWithType: WCXmlHelper.NoTzDateTimeFromXml
  fullName: Microsoft.Health.Utility.WCXmlHelper.NoTzDateTimeFromXml
- uid: System.Xml.XPath.XPathNavigator
  commentId: T:System.Xml.XPath.XPathNavigator
  parent: System.Xml.XPath
  isExternal: true
  name: XPathNavigator
  nameWithType: XPathNavigator
  fullName: System.Xml.XPath.XPathNavigator
- uid: System.Xml.XPath
  commentId: N:System.Xml.XPath
  isExternal: false
  name: System.Xml.XPath
  nameWithType: System.Xml.XPath
  fullName: System.Xml.XPath
- uid: Microsoft.Health.Utility.WCXmlHelper.ReadUntil*
  commentId: Overload:Microsoft.Health.Utility.WCXmlHelper.ReadUntil
  isExternal: false
  name: ReadUntil
  nameWithType: WCXmlHelper.ReadUntil
  fullName: Microsoft.Health.Utility.WCXmlHelper.ReadUntil
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Health.Utility.WCXmlHelper.SkipToElement*
  commentId: Overload:Microsoft.Health.Utility.WCXmlHelper.SkipToElement
  isExternal: false
  name: SkipToElement
  nameWithType: WCXmlHelper.SkipToElement
  fullName: Microsoft.Health.Utility.WCXmlHelper.SkipToElement
- uid: Microsoft.Health.Utility.WCXmlHelper.ReadElementStringIf*
  commentId: Overload:Microsoft.Health.Utility.WCXmlHelper.ReadElementStringIf
  isExternal: false
  name: ReadElementStringIf
  nameWithType: WCXmlHelper.ReadElementStringIf
  fullName: Microsoft.Health.Utility.WCXmlHelper.ReadElementStringIf
- uid: Microsoft.Health.Utility.WCXmlHelper.ReadElementGuidIf*
  commentId: Overload:Microsoft.Health.Utility.WCXmlHelper.ReadElementGuidIf
  isExternal: false
  name: ReadElementGuidIf
  nameWithType: WCXmlHelper.ReadElementGuidIf
  fullName: Microsoft.Health.Utility.WCXmlHelper.ReadElementGuidIf
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: Microsoft.Health.Utility.WCXmlHelper.ReadElementIntIf*
  commentId: Overload:Microsoft.Health.Utility.WCXmlHelper.ReadElementIntIf
  isExternal: false
  name: ReadElementIntIf
  nameWithType: WCXmlHelper.ReadElementIntIf
  fullName: Microsoft.Health.Utility.WCXmlHelper.ReadElementIntIf
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Health.Utility.WCXmlHelper.ReadElementString*
  commentId: Overload:Microsoft.Health.Utility.WCXmlHelper.ReadElementString
  isExternal: false
  name: ReadElementString
  nameWithType: WCXmlHelper.ReadElementString
  fullName: Microsoft.Health.Utility.WCXmlHelper.ReadElementString
- uid: Microsoft.Health.Utility.WCXmlHelper.ReadElementGuid*
  commentId: Overload:Microsoft.Health.Utility.WCXmlHelper.ReadElementGuid
  isExternal: false
  name: ReadElementGuid
  nameWithType: WCXmlHelper.ReadElementGuid
  fullName: Microsoft.Health.Utility.WCXmlHelper.ReadElementGuid
- uid: Microsoft.Health.Utility.WCXmlHelper.ReadElementInt*
  commentId: Overload:Microsoft.Health.Utility.WCXmlHelper.ReadElementInt
  isExternal: false
  name: ReadElementInt
  nameWithType: WCXmlHelper.ReadElementInt
  fullName: Microsoft.Health.Utility.WCXmlHelper.ReadElementInt
- uid: Microsoft.Health.Utility.WCXmlHelper.ReadElementDate*
  commentId: Overload:Microsoft.Health.Utility.WCXmlHelper.ReadElementDate
  isExternal: false
  name: ReadElementDate
  nameWithType: WCXmlHelper.ReadElementDate
  fullName: Microsoft.Health.Utility.WCXmlHelper.ReadElementDate
- uid: Microsoft.Health.Utility.WCXmlHelper.ReadElementBoolean*
  commentId: Overload:Microsoft.Health.Utility.WCXmlHelper.ReadElementBoolean
  isExternal: false
  name: ReadElementBoolean
  nameWithType: WCXmlHelper.ReadElementBoolean
  fullName: Microsoft.Health.Utility.WCXmlHelper.ReadElementBoolean
- uid: Microsoft.Health.Utility.WCXmlHelper.CheckAndPrepReader*
  commentId: Overload:Microsoft.Health.Utility.WCXmlHelper.CheckAndPrepReader
  isExternal: false
  name: CheckAndPrepReader
  nameWithType: WCXmlHelper.CheckAndPrepReader
  fullName: Microsoft.Health.Utility.WCXmlHelper.CheckAndPrepReader
- uid: Microsoft.Health.Utility.WCXmlHelper.WriteElementStringIf*
  commentId: Overload:Microsoft.Health.Utility.WCXmlHelper.WriteElementStringIf
  isExternal: false
  name: WriteElementStringIf
  nameWithType: WCXmlHelper.WriteElementStringIf
  fullName: Microsoft.Health.Utility.WCXmlHelper.WriteElementStringIf
- uid: Microsoft.Health.Utility.WCXmlHelper.WriteRawElementStringIf*
  commentId: Overload:Microsoft.Health.Utility.WCXmlHelper.WriteRawElementStringIf
  isExternal: false
  name: WriteRawElementStringIf
  nameWithType: WCXmlHelper.WriteRawElementStringIf
  fullName: Microsoft.Health.Utility.WCXmlHelper.WriteRawElementStringIf
- uid: Microsoft.Health.Utility.WCXmlHelper.WriteElementBoolean*
  commentId: Overload:Microsoft.Health.Utility.WCXmlHelper.WriteElementBoolean
  isExternal: false
  name: WriteElementBoolean
  nameWithType: WCXmlHelper.WriteElementBoolean
  fullName: Microsoft.Health.Utility.WCXmlHelper.WriteElementBoolean
