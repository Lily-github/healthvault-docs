### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.Utility.BooleanExpressionSetXmlParser
  commentId: T:Microsoft.Health.Utility.BooleanExpressionSetXmlParser
  id: BooleanExpressionSetXmlParser
  parent: Microsoft.Health.Utility
  children:
  - Microsoft.Health.Utility.BooleanExpressionSetXmlParser.Parse``1(System.Xml.XmlReader,System.Func{System.String,System.Boolean})
  langs:
  - csharp
  - vb
  name: BooleanExpressionSetXmlParser
  nameWithType: BooleanExpressionSetXmlParser
  fullName: Microsoft.Health.Utility.BooleanExpressionSetXmlParser
  type: Class
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BooleanExpression.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: BooleanExpressionSetXmlParser
    path: ../Microsoft.Health.Utility/utilities/BooleanExpression.cs
    startLine: 505
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nBooleanExpressionSetXmlParser\nProvides a default parser for BooleanExpressionSet.\n"
  example: []
  syntax:
    content: public static class BooleanExpressionSetXmlParser
    content.vb: Public Module BooleanExpressionSetXmlParser
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Health.Utility.BooleanExpressionSetXmlParser.Parse``1(System.Xml.XmlReader,System.Func{System.String,System.Boolean})
  commentId: M:Microsoft.Health.Utility.BooleanExpressionSetXmlParser.Parse``1(System.Xml.XmlReader,System.Func{System.String,System.Boolean})
  id: Parse``1(System.Xml.XmlReader,System.Func{System.String,System.Boolean})
  parent: Microsoft.Health.Utility.BooleanExpressionSetXmlParser
  langs:
  - csharp
  - vb
  name: Parse<T>(XmlReader, Func<String, Boolean>)
  nameWithType: BooleanExpressionSetXmlParser.Parse<T>(XmlReader, Func<String, Boolean>)
  fullName: Microsoft.Health.Utility.BooleanExpressionSetXmlParser.Parse<T>(System.Xml.XmlReader, System.Func<System.String, System.Boolean>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/BooleanExpression.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Parse
    path: ../Microsoft.Health.Utility/utilities/BooleanExpression.cs
    startLine: 520
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nCreates a <xref href=\"Microsoft.Health.Utility.BooleanExpressionSet%601\" data-throw-if-not-resolved=\"false\"></xref> from the XmlReader.\n"
  example: []
  syntax:
    content: public static BooleanExpressionSet<T> Parse<T>(XmlReader xmlReader, Func<string, bool> isPropertyNameValidFunction)
    content.vb: Public Shared Function Parse(Of T)(xmlReader As XmlReader, isPropertyNameValidFunction As Func(Of String, Boolean)) As BooleanExpressionSet(Of T)
    parameters:
    - id: xmlReader
      type: System.Xml.XmlReader
      description: "\nXmlReader at the root of the XML representing the BooleanExpressionSet.\n"
    - id: isPropertyNameValidFunction
      type: System.Func{System.String,System.Boolean}
      description: "\nFunction that returns true if a given property name is valid, else false.\n"
    typeParameters:
    - id: T
      description: "\nThe type of object to which the expressions apply.\n"
    return:
      type: Microsoft.Health.Utility.BooleanExpressionSet{{T}}
      description: ''
  overload: Microsoft.Health.Utility.BooleanExpressionSetXmlParser.Parse*
  nameWithType.vb: BooleanExpressionSetXmlParser.Parse(Of T)(XmlReader, Func(Of String, Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.BooleanExpressionSetXmlParser.Parse(Of T)(System.Xml.XmlReader, System.Func(Of System.String, System.Boolean))
  name.vb: Parse(Of T)(XmlReader, Func(Of String, Boolean))
references:
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Utility.BooleanExpressionSet`1
  commentId: T:Microsoft.Health.Utility.BooleanExpressionSet`1
  isExternal: false
  name: BooleanExpressionSet<T>
  nameWithType: BooleanExpressionSet<T>
  fullName: Microsoft.Health.Utility.BooleanExpressionSet<T>
  nameWithType.vb: BooleanExpressionSet(Of T)
  fullName.vb: Microsoft.Health.Utility.BooleanExpressionSet(Of T)
  name.vb: BooleanExpressionSet(Of T)
  spec.csharp:
  - uid: Microsoft.Health.Utility.BooleanExpressionSet`1
    name: BooleanExpressionSet
    nameWithType: BooleanExpressionSet
    fullName: Microsoft.Health.Utility.BooleanExpressionSet
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.Utility.BooleanExpressionSet`1
    name: BooleanExpressionSet
    nameWithType: BooleanExpressionSet
    fullName: Microsoft.Health.Utility.BooleanExpressionSet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.BooleanExpressionSetXmlParser.Parse*
  commentId: Overload:Microsoft.Health.Utility.BooleanExpressionSetXmlParser.Parse
  isExternal: false
  name: Parse
  nameWithType: BooleanExpressionSetXmlParser.Parse
  fullName: Microsoft.Health.Utility.BooleanExpressionSetXmlParser.Parse
- uid: System.Xml.XmlReader
  commentId: T:System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Func{System.String,System.Boolean}
  commentId: T:System.Func{System.String,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<String, Boolean>
  nameWithType: Func<String, Boolean>
  fullName: System.Func<System.String, System.Boolean>
  nameWithType.vb: Func(Of String, Boolean)
  fullName.vb: System.Func(Of System.String, System.Boolean)
  name.vb: Func(Of String, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.BooleanExpressionSet{{T}}
  commentId: T:Microsoft.Health.Utility.BooleanExpressionSet{``0}
  parent: Microsoft.Health.Utility
  definition: Microsoft.Health.Utility.BooleanExpressionSet`1
  name: BooleanExpressionSet<T>
  nameWithType: BooleanExpressionSet<T>
  fullName: Microsoft.Health.Utility.BooleanExpressionSet<T>
  nameWithType.vb: BooleanExpressionSet(Of T)
  fullName.vb: Microsoft.Health.Utility.BooleanExpressionSet(Of T)
  name.vb: BooleanExpressionSet(Of T)
  spec.csharp:
  - uid: Microsoft.Health.Utility.BooleanExpressionSet`1
    name: BooleanExpressionSet
    nameWithType: BooleanExpressionSet
    fullName: Microsoft.Health.Utility.BooleanExpressionSet
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.Utility.BooleanExpressionSet`1
    name: BooleanExpressionSet
    nameWithType: BooleanExpressionSet
    fullName: Microsoft.Health.Utility.BooleanExpressionSet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: false
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
