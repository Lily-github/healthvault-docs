### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.InvertedIndex.NormalizingWordBreaker
  commentId: T:Microsoft.Health.InvertedIndex.NormalizingWordBreaker
  id: NormalizingWordBreaker
  parent: Microsoft.Health.InvertedIndex
  children:
  - Microsoft.Health.InvertedIndex.NormalizingWordBreaker.#ctor
  - Microsoft.Health.InvertedIndex.NormalizingWordBreaker.#ctor(Microsoft.Health.PhraseAnalyzer.Analyzer)
  - Microsoft.Health.InvertedIndex.NormalizingWordBreaker.#ctor(Microsoft.Health.PhraseAnalyzer.Analyzer,Microsoft.Health.PhraseAnalyzer.WordBreaker)
  - Microsoft.Health.InvertedIndex.NormalizingWordBreaker.AcceptSynonyms
  - Microsoft.Health.InvertedIndex.NormalizingWordBreaker.AddSegment(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  - Microsoft.Health.InvertedIndex.NormalizingWordBreaker.AddString(System.String)
  - Microsoft.Health.InvertedIndex.NormalizingWordBreaker.AddSynonyms(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String[])
  - Microsoft.Health.InvertedIndex.NormalizingWordBreaker.Clone(System.Boolean)
  - Microsoft.Health.InvertedIndex.NormalizingWordBreaker.GetWords(System.Collections.Generic.IEnumerable{System.String})
  - Microsoft.Health.InvertedIndex.NormalizingWordBreaker.GetWords(System.Collections.Generic.IEnumerable{System.String},System.Boolean)
  - Microsoft.Health.InvertedIndex.NormalizingWordBreaker.m_normalizedWordList
  - Microsoft.Health.InvertedIndex.NormalizingWordBreaker.NormalizedWords
  - Microsoft.Health.InvertedIndex.NormalizingWordBreaker.WordBreak(System.String)
  - Microsoft.Health.InvertedIndex.NormalizingWordBreaker.WordBreak(System.String,System.Collections.Generic.IList{System.String})
  - Microsoft.Health.InvertedIndex.NormalizingWordBreaker.WordBreaker
  langs:
  - csharp
  - vb
  name: NormalizingWordBreaker
  nameWithType: NormalizingWordBreaker
  fullName: Microsoft.Health.InvertedIndex.NormalizingWordBreaker
  type: Class
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/NormalizingWordBreaker.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: NormalizingWordBreaker
    path: ../Microsoft.Health.Utility/search/InvertedIndex/NormalizingWordBreaker.cs
    startLine: 21
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\nThe most basic normalizer takes a Word List and normalizes it... \ni.e, removes stop words, adds new segments..\n1. Synonyms are simply appended on\n2. By default - spelling and stemming corrections are ignored. \nThis is because they are suggestions. \nTo change this behavior, override AddSynonyms\n\n"
  example: []
  syntax:
    content: 'public class NormalizingWordBreaker : PhraseNormalizer, IWordBreaker'
    content.vb: >-
      Public Class NormalizingWordBreaker
          Inherits PhraseNormalizer
          Implements IWordBreaker
  inheritance:
  - System.Object
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  implements:
  - Microsoft.Health.PhraseAnalyzer.IWordBreaker
  inheritedMembers:
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.BlockType
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.RemoveType
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.ReplaceType
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.SynonymType
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.RelatedType
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.SpellType
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.StemmerType
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.PhoneticType
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.SubjectType
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.IndicatorType
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.ConceptType
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.Analyzer
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.Build(System.Collections.Generic.IList{System.String})
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.GetBuilder
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.BuildPhrase(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddWords(System.Collections.Generic.IList{System.String},System.Int32,System.Int32)
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddRelated(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String[])
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddStem(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String)
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSpelling(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String)
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSubject(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddIndicator(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddConcept(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - Microsoft.Health.InvertedIndex.NormalizingWordBreaker.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  - System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.m_normalizedWordList
  commentId: F:Microsoft.Health.InvertedIndex.NormalizingWordBreaker.m_normalizedWordList
  id: m_normalizedWordList
  parent: Microsoft.Health.InvertedIndex.NormalizingWordBreaker
  langs:
  - csharp
  - vb
  name: m_normalizedWordList
  nameWithType: NormalizingWordBreaker.m_normalizedWordList
  fullName: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.m_normalizedWordList
  type: Field
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/NormalizingWordBreaker.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: m_normalizedWordList
    path: ../Microsoft.Health.Utility/search/InvertedIndex/NormalizingWordBreaker.cs
    startLine: 26
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: protected IList<string> m_normalizedWordList
    content.vb: Protected m_normalizedWordList As IList(Of String)
    return:
      type: System.Collections.Generic.IList{System.String}
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.#ctor
  commentId: M:Microsoft.Health.InvertedIndex.NormalizingWordBreaker.#ctor
  id: '#ctor'
  parent: Microsoft.Health.InvertedIndex.NormalizingWordBreaker
  langs:
  - csharp
  - vb
  name: NormalizingWordBreaker()
  nameWithType: NormalizingWordBreaker.NormalizingWordBreaker()
  fullName: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.NormalizingWordBreaker()
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/NormalizingWordBreaker.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health.Utility/search/InvertedIndex/NormalizingWordBreaker.cs
    startLine: 32
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public NormalizingWordBreaker()
    content.vb: Public Sub New
  overload: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.#ctor(Microsoft.Health.PhraseAnalyzer.Analyzer)
  commentId: M:Microsoft.Health.InvertedIndex.NormalizingWordBreaker.#ctor(Microsoft.Health.PhraseAnalyzer.Analyzer)
  id: '#ctor(Microsoft.Health.PhraseAnalyzer.Analyzer)'
  parent: Microsoft.Health.InvertedIndex.NormalizingWordBreaker
  langs:
  - csharp
  - vb
  name: NormalizingWordBreaker(Analyzer)
  nameWithType: NormalizingWordBreaker.NormalizingWordBreaker(Analyzer)
  fullName: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.NormalizingWordBreaker(Microsoft.Health.PhraseAnalyzer.Analyzer)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/NormalizingWordBreaker.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health.Utility/search/InvertedIndex/NormalizingWordBreaker.cs
    startLine: 41
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public NormalizingWordBreaker(Analyzer analyzer)
    content.vb: Public Sub New(analyzer As Analyzer)
    parameters:
    - id: analyzer
      type: Microsoft.Health.PhraseAnalyzer.Analyzer
      description: ''
  overload: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.#ctor(Microsoft.Health.PhraseAnalyzer.Analyzer,Microsoft.Health.PhraseAnalyzer.WordBreaker)
  commentId: M:Microsoft.Health.InvertedIndex.NormalizingWordBreaker.#ctor(Microsoft.Health.PhraseAnalyzer.Analyzer,Microsoft.Health.PhraseAnalyzer.WordBreaker)
  id: '#ctor(Microsoft.Health.PhraseAnalyzer.Analyzer,Microsoft.Health.PhraseAnalyzer.WordBreaker)'
  parent: Microsoft.Health.InvertedIndex.NormalizingWordBreaker
  langs:
  - csharp
  - vb
  name: NormalizingWordBreaker(Analyzer, WordBreaker)
  nameWithType: NormalizingWordBreaker.NormalizingWordBreaker(Analyzer, WordBreaker)
  fullName: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.NormalizingWordBreaker(Microsoft.Health.PhraseAnalyzer.Analyzer, Microsoft.Health.PhraseAnalyzer.WordBreaker)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/NormalizingWordBreaker.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health.Utility/search/InvertedIndex/NormalizingWordBreaker.cs
    startLine: 51
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public NormalizingWordBreaker(Analyzer analyzer, WordBreaker wordBreaker)
    content.vb: Public Sub New(analyzer As Analyzer, wordBreaker As WordBreaker)
    parameters:
    - id: analyzer
      type: Microsoft.Health.PhraseAnalyzer.Analyzer
      description: ''
    - id: wordBreaker
      type: Microsoft.Health.PhraseAnalyzer.WordBreaker
      description: ''
  overload: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.WordBreaker
  commentId: P:Microsoft.Health.InvertedIndex.NormalizingWordBreaker.WordBreaker
  id: WordBreaker
  parent: Microsoft.Health.InvertedIndex.NormalizingWordBreaker
  langs:
  - csharp
  - vb
  name: WordBreaker
  nameWithType: NormalizingWordBreaker.WordBreaker
  fullName: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.WordBreaker
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/NormalizingWordBreaker.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: WordBreaker
    path: ../Microsoft.Health.Utility/search/InvertedIndex/NormalizingWordBreaker.cs
    startLine: 65
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public WordBreaker WordBreaker { get; }
    content.vb: Public ReadOnly Property WordBreaker As WordBreaker
    parameters: []
    return:
      type: Microsoft.Health.PhraseAnalyzer.WordBreaker
  overload: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.WordBreaker*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.AcceptSynonyms
  commentId: F:Microsoft.Health.InvertedIndex.NormalizingWordBreaker.AcceptSynonyms
  id: AcceptSynonyms
  parent: Microsoft.Health.InvertedIndex.NormalizingWordBreaker
  langs:
  - csharp
  - vb
  name: AcceptSynonyms
  nameWithType: NormalizingWordBreaker.AcceptSynonyms
  fullName: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.AcceptSynonyms
  type: Field
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/NormalizingWordBreaker.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: AcceptSynonyms
    path: ../Microsoft.Health.Utility/search/InvertedIndex/NormalizingWordBreaker.cs
    startLine: 76
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public bool AcceptSynonyms
    content.vb: Public AcceptSynonyms As Boolean
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.WordBreak(System.String)
  commentId: M:Microsoft.Health.InvertedIndex.NormalizingWordBreaker.WordBreak(System.String)
  id: WordBreak(System.String)
  parent: Microsoft.Health.InvertedIndex.NormalizingWordBreaker
  langs:
  - csharp
  - vb
  name: WordBreak(String)
  nameWithType: NormalizingWordBreaker.WordBreak(String)
  fullName: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.WordBreak(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/NormalizingWordBreaker.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: WordBreak
    path: ../Microsoft.Health.Utility/search/InvertedIndex/NormalizingWordBreaker.cs
    startLine: 83
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public IList<string> WordBreak(string phrase)
    content.vb: Public Function WordBreak(phrase As String) As IList(Of String)
    parameters:
    - id: phrase
      type: System.String
      description: ''
    return:
      type: System.Collections.Generic.IList{System.String}
      description: ''
  overload: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.WordBreak*
  implements:
  - Microsoft.Health.PhraseAnalyzer.IWordBreaker.WordBreak(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.WordBreak(System.String,System.Collections.Generic.IList{System.String})
  commentId: M:Microsoft.Health.InvertedIndex.NormalizingWordBreaker.WordBreak(System.String,System.Collections.Generic.IList{System.String})
  id: WordBreak(System.String,System.Collections.Generic.IList{System.String})
  parent: Microsoft.Health.InvertedIndex.NormalizingWordBreaker
  langs:
  - csharp
  - vb
  name: WordBreak(String, IList<String>)
  nameWithType: NormalizingWordBreaker.WordBreak(String, IList<String>)
  fullName: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.WordBreak(System.String, System.Collections.Generic.IList<System.String>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/NormalizingWordBreaker.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: WordBreak
    path: ../Microsoft.Health.Utility/search/InvertedIndex/NormalizingWordBreaker.cs
    startLine: 95
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public void WordBreak(string phrase, IList<string> words)
    content.vb: Public Sub WordBreak(phrase As String, words As IList(Of String))
    parameters:
    - id: phrase
      type: System.String
      description: ''
    - id: words
      type: System.Collections.Generic.IList{System.String}
      description: ''
  overload: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.WordBreak*
  implements:
  - Microsoft.Health.PhraseAnalyzer.IWordBreaker.WordBreak(System.String,System.Collections.Generic.IList{System.String})
  nameWithType.vb: NormalizingWordBreaker.WordBreak(String, IList(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.WordBreak(System.String, System.Collections.Generic.IList(Of System.String))
  name.vb: WordBreak(String, IList(Of String))
- uid: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.GetWords(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Microsoft.Health.InvertedIndex.NormalizingWordBreaker.GetWords(System.Collections.Generic.IEnumerable{System.String})
  id: GetWords(System.Collections.Generic.IEnumerable{System.String})
  parent: Microsoft.Health.InvertedIndex.NormalizingWordBreaker
  langs:
  - csharp
  - vb
  name: GetWords(IEnumerable<String>)
  nameWithType: NormalizingWordBreaker.GetWords(IEnumerable<String>)
  fullName: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.GetWords(System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/NormalizingWordBreaker.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetWords
    path: ../Microsoft.Health.Utility/search/InvertedIndex/NormalizingWordBreaker.cs
    startLine: 118
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\nTake an input stream of phrases, and return a stream of word lists\n"
  example: []
  syntax:
    content: public IEnumerable<IList<string>> GetWords(IEnumerable<string> phrases)
    content.vb: Public Function GetWords(phrases As IEnumerable(Of String)) As IEnumerable(Of IList(Of String))
    parameters:
    - id: phrases
      type: System.Collections.Generic.IEnumerable{System.String}
      description: ''
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.IList{System.String}}
      description: ''
  overload: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.GetWords*
  nameWithType.vb: NormalizingWordBreaker.GetWords(IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.GetWords(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: GetWords(IEnumerable(Of String))
- uid: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.GetWords(System.Collections.Generic.IEnumerable{System.String},System.Boolean)
  commentId: M:Microsoft.Health.InvertedIndex.NormalizingWordBreaker.GetWords(System.Collections.Generic.IEnumerable{System.String},System.Boolean)
  id: GetWords(System.Collections.Generic.IEnumerable{System.String},System.Boolean)
  parent: Microsoft.Health.InvertedIndex.NormalizingWordBreaker
  langs:
  - csharp
  - vb
  name: GetWords(IEnumerable<String>, Boolean)
  nameWithType: NormalizingWordBreaker.GetWords(IEnumerable<String>, Boolean)
  fullName: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.GetWords(System.Collections.Generic.IEnumerable<System.String>, System.Boolean)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/NormalizingWordBreaker.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetWords
    path: ../Microsoft.Health.Utility/search/InvertedIndex/NormalizingWordBreaker.cs
    startLine: 129
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public IEnumerable<IList<string>> GetWords(IEnumerable<string> phrases, bool reuseBuffers)
    content.vb: Public Function GetWords(phrases As IEnumerable(Of String), reuseBuffers As Boolean) As IEnumerable(Of IList(Of String))
    parameters:
    - id: phrases
      type: System.Collections.Generic.IEnumerable{System.String}
      description: ''
    - id: reuseBuffers
      type: System.Boolean
      description: ''
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.IList{System.String}}
      description: ''
  overload: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.GetWords*
  nameWithType.vb: NormalizingWordBreaker.GetWords(IEnumerable(Of String), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.GetWords(System.Collections.Generic.IEnumerable(Of System.String), System.Boolean)
  name.vb: GetWords(IEnumerable(Of String), Boolean)
- uid: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.Clone(System.Boolean)
  commentId: M:Microsoft.Health.InvertedIndex.NormalizingWordBreaker.Clone(System.Boolean)
  id: Clone(System.Boolean)
  parent: Microsoft.Health.InvertedIndex.NormalizingWordBreaker
  langs:
  - csharp
  - vb
  name: Clone(Boolean)
  nameWithType: NormalizingWordBreaker.Clone(Boolean)
  fullName: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.Clone(System.Boolean)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/NormalizingWordBreaker.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Clone
    path: ../Microsoft.Health.Utility/search/InvertedIndex/NormalizingWordBreaker.cs
    startLine: 162
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public NormalizingWordBreaker Clone(bool useAnalyzer)
    content.vb: Public Function Clone(useAnalyzer As Boolean) As NormalizingWordBreaker
    parameters:
    - id: useAnalyzer
      type: System.Boolean
      description: ''
    return:
      type: Microsoft.Health.InvertedIndex.NormalizingWordBreaker
      description: ''
  overload: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.Clone*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.NormalizedWords
  commentId: P:Microsoft.Health.InvertedIndex.NormalizingWordBreaker.NormalizedWords
  id: NormalizedWords
  parent: Microsoft.Health.InvertedIndex.NormalizingWordBreaker
  langs:
  - csharp
  - vb
  name: NormalizedWords
  nameWithType: NormalizingWordBreaker.NormalizedWords
  fullName: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.NormalizedWords
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/NormalizingWordBreaker.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: NormalizedWords
    path: ../Microsoft.Health.Utility/search/InvertedIndex/NormalizingWordBreaker.cs
    startLine: 171
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: protected IList<string> NormalizedWords { get; }
    content.vb: Protected ReadOnly Property NormalizedWords As IList(Of String)
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.String}
  overload: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.NormalizedWords*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.AddString(System.String)
  commentId: M:Microsoft.Health.InvertedIndex.NormalizingWordBreaker.AddString(System.String)
  id: AddString(System.String)
  parent: Microsoft.Health.InvertedIndex.NormalizingWordBreaker
  langs:
  - csharp
  - vb
  name: AddString(String)
  nameWithType: NormalizingWordBreaker.AddString(String)
  fullName: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.AddString(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/NormalizingWordBreaker.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: AddString
    path: ../Microsoft.Health.Utility/search/InvertedIndex/NormalizingWordBreaker.cs
    startLine: 183
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: protected override void AddString(string value)
    content.vb: Protected Overrides Sub AddString(value As String)
    parameters:
    - id: value
      type: System.String
      description: ''
  overridden: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddString(System.String)
  overload: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.AddString*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.AddSegment(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  commentId: M:Microsoft.Health.InvertedIndex.NormalizingWordBreaker.AddSegment(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  id: AddSegment(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  parent: Microsoft.Health.InvertedIndex.NormalizingWordBreaker
  langs:
  - csharp
  - vb
  name: AddSegment(IList<String>, AnalyzerMatch)
  nameWithType: NormalizingWordBreaker.AddSegment(IList<String>, AnalyzerMatch)
  fullName: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.AddSegment(System.Collections.Generic.IList<System.String>, Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/NormalizingWordBreaker.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: AddSegment
    path: ../Microsoft.Health.Utility/search/InvertedIndex/NormalizingWordBreaker.cs
    startLine: 193
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: protected override void AddSegment(IList<string> words, AnalyzerMatch segment)
    content.vb: Protected Overrides Sub AddSegment(words As IList(Of String), segment As AnalyzerMatch)
    parameters:
    - id: words
      type: System.Collections.Generic.IList{System.String}
      description: ''
    - id: segment
      type: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
      description: ''
  overridden: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSegment(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  overload: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.AddSegment*
  nameWithType.vb: NormalizingWordBreaker.AddSegment(IList(Of String), AnalyzerMatch)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.AddSegment(System.Collections.Generic.IList(Of System.String), Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  name.vb: AddSegment(IList(Of String), AnalyzerMatch)
- uid: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.AddSynonyms(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String[])
  commentId: M:Microsoft.Health.InvertedIndex.NormalizingWordBreaker.AddSynonyms(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String[])
  id: AddSynonyms(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String[])
  parent: Microsoft.Health.InvertedIndex.NormalizingWordBreaker
  langs:
  - csharp
  - vb
  name: AddSynonyms(IList<String>, AnalyzerMatch, String[])
  nameWithType: NormalizingWordBreaker.AddSynonyms(IList<String>, AnalyzerMatch, String[])
  fullName: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.AddSynonyms(System.Collections.Generic.IList<System.String>, Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.String[])
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/NormalizingWordBreaker.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: AddSynonyms
    path: ../Microsoft.Health.Utility/search/InvertedIndex/NormalizingWordBreaker.cs
    startLine: 207
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: protected override void AddSynonyms(IList<string> words, AnalyzerMatch segment, string[] synonymSet)
    content.vb: Protected Overrides Sub AddSynonyms(words As IList(Of String), segment As AnalyzerMatch, synonymSet As String())
    parameters:
    - id: words
      type: System.Collections.Generic.IList{System.String}
      description: ''
    - id: segment
      type: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
      description: ''
    - id: synonymSet
      type: System.String[]
      description: ''
  overridden: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSynonyms(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String[])
  overload: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.AddSynonyms*
  nameWithType.vb: NormalizingWordBreaker.AddSynonyms(IList(Of String), AnalyzerMatch, String())
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.AddSynonyms(System.Collections.Generic.IList(Of System.String), Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.String())
  name.vb: AddSynonyms(IList(Of String), AnalyzerMatch, String())
references:
- uid: Microsoft.Health.InvertedIndex
  commentId: N:Microsoft.Health.InvertedIndex
  isExternal: false
  name: Microsoft.Health.InvertedIndex
  nameWithType: Microsoft.Health.InvertedIndex
  fullName: Microsoft.Health.InvertedIndex
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  commentId: T:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  parent: Microsoft.Health.PhraseAnalyzer
  isExternal: false
  name: PhraseNormalizer
  nameWithType: PhraseNormalizer
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
- uid: Microsoft.Health.PhraseAnalyzer.IWordBreaker
  commentId: T:Microsoft.Health.PhraseAnalyzer.IWordBreaker
  parent: Microsoft.Health.PhraseAnalyzer
  isExternal: false
  name: IWordBreaker
  nameWithType: IWordBreaker
  fullName: Microsoft.Health.PhraseAnalyzer.IWordBreaker
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.BlockType
  commentId: F:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.BlockType
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: false
  name: BlockType
  nameWithType: PhraseNormalizer.BlockType
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.BlockType
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.RemoveType
  commentId: F:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.RemoveType
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: false
  name: RemoveType
  nameWithType: PhraseNormalizer.RemoveType
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.RemoveType
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.ReplaceType
  commentId: F:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.ReplaceType
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: false
  name: ReplaceType
  nameWithType: PhraseNormalizer.ReplaceType
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.ReplaceType
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.SynonymType
  commentId: F:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.SynonymType
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: false
  name: SynonymType
  nameWithType: PhraseNormalizer.SynonymType
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.SynonymType
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.RelatedType
  commentId: F:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.RelatedType
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: false
  name: RelatedType
  nameWithType: PhraseNormalizer.RelatedType
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.RelatedType
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.SpellType
  commentId: F:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.SpellType
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: false
  name: SpellType
  nameWithType: PhraseNormalizer.SpellType
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.SpellType
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.StemmerType
  commentId: F:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.StemmerType
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: false
  name: StemmerType
  nameWithType: PhraseNormalizer.StemmerType
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.StemmerType
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.PhoneticType
  commentId: F:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.PhoneticType
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: false
  name: PhoneticType
  nameWithType: PhraseNormalizer.PhoneticType
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.PhoneticType
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.SubjectType
  commentId: F:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.SubjectType
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: false
  name: SubjectType
  nameWithType: PhraseNormalizer.SubjectType
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.SubjectType
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.IndicatorType
  commentId: F:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.IndicatorType
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: false
  name: IndicatorType
  nameWithType: PhraseNormalizer.IndicatorType
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.IndicatorType
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.ConceptType
  commentId: F:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.ConceptType
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: false
  name: ConceptType
  nameWithType: PhraseNormalizer.ConceptType
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.ConceptType
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.Analyzer
  commentId: P:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.Analyzer
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: false
  name: Analyzer
  nameWithType: PhraseNormalizer.Analyzer
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.Analyzer
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.Build(System.Collections.Generic.IList{System.String})
  commentId: M:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.Build(System.Collections.Generic.IList{System.String})
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: true
  name: Build(IList<String>)
  nameWithType: PhraseNormalizer.Build(IList<String>)
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.Build(System.Collections.Generic.IList<System.String>)
  nameWithType.vb: PhraseNormalizer.Build(IList(Of String))
  fullName.vb: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.Build(System.Collections.Generic.IList(Of System.String))
  name.vb: Build(IList(Of String))
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.Build(System.Collections.Generic.IList{System.String})
    name: Build
    nameWithType: PhraseNormalizer.Build
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.Build
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.Build(System.Collections.Generic.IList{System.String})
    name: Build
    nameWithType: PhraseNormalizer.Build
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.Build
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.GetBuilder
  commentId: M:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.GetBuilder
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: false
  name: GetBuilder()
  nameWithType: PhraseNormalizer.GetBuilder()
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.GetBuilder()
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.GetBuilder
    name: GetBuilder
    nameWithType: PhraseNormalizer.GetBuilder
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.GetBuilder
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.GetBuilder
    name: GetBuilder
    nameWithType: PhraseNormalizer.GetBuilder
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.GetBuilder
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.BuildPhrase(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  commentId: M:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.BuildPhrase(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: true
  name: BuildPhrase(IList<String>, AnalyzerMatch)
  nameWithType: PhraseNormalizer.BuildPhrase(IList<String>, AnalyzerMatch)
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.BuildPhrase(System.Collections.Generic.IList<System.String>, Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  nameWithType.vb: PhraseNormalizer.BuildPhrase(IList(Of String), AnalyzerMatch)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.BuildPhrase(System.Collections.Generic.IList(Of System.String), Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  name.vb: BuildPhrase(IList(Of String), AnalyzerMatch)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.BuildPhrase(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
    name: BuildPhrase
    nameWithType: PhraseNormalizer.BuildPhrase
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.BuildPhrase
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.BuildPhrase(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
    name: BuildPhrase
    nameWithType: PhraseNormalizer.BuildPhrase
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.BuildPhrase
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddWords(System.Collections.Generic.IList{System.String},System.Int32,System.Int32)
  commentId: M:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddWords(System.Collections.Generic.IList{System.String},System.Int32,System.Int32)
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: true
  name: AddWords(IList<String>, Int32, Int32)
  nameWithType: PhraseNormalizer.AddWords(IList<String>, Int32, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddWords(System.Collections.Generic.IList<System.String>, System.Int32, System.Int32)
  nameWithType.vb: PhraseNormalizer.AddWords(IList(Of String), Int32, Int32)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddWords(System.Collections.Generic.IList(Of System.String), System.Int32, System.Int32)
  name.vb: AddWords(IList(Of String), Int32, Int32)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddWords(System.Collections.Generic.IList{System.String},System.Int32,System.Int32)
    name: AddWords
    nameWithType: PhraseNormalizer.AddWords
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddWords
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddWords(System.Collections.Generic.IList{System.String},System.Int32,System.Int32)
    name: AddWords
    nameWithType: PhraseNormalizer.AddWords
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddWords
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddRelated(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String[])
  commentId: M:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddRelated(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String[])
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: true
  name: AddRelated(IList<String>, AnalyzerMatch, String[])
  nameWithType: PhraseNormalizer.AddRelated(IList<String>, AnalyzerMatch, String[])
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddRelated(System.Collections.Generic.IList<System.String>, Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.String[])
  nameWithType.vb: PhraseNormalizer.AddRelated(IList(Of String), AnalyzerMatch, String())
  fullName.vb: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddRelated(System.Collections.Generic.IList(Of System.String), Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.String())
  name.vb: AddRelated(IList(Of String), AnalyzerMatch, String())
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddRelated(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String[])
    name: AddRelated
    nameWithType: PhraseNormalizer.AddRelated
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddRelated
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddRelated(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String[])
    name: AddRelated
    nameWithType: PhraseNormalizer.AddRelated
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddRelated
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddStem(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String)
  commentId: M:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddStem(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String)
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: true
  name: AddStem(IList<String>, AnalyzerMatch, String)
  nameWithType: PhraseNormalizer.AddStem(IList<String>, AnalyzerMatch, String)
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddStem(System.Collections.Generic.IList<System.String>, Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.String)
  nameWithType.vb: PhraseNormalizer.AddStem(IList(Of String), AnalyzerMatch, String)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddStem(System.Collections.Generic.IList(Of System.String), Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.String)
  name.vb: AddStem(IList(Of String), AnalyzerMatch, String)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddStem(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String)
    name: AddStem
    nameWithType: PhraseNormalizer.AddStem
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddStem
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddStem(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String)
    name: AddStem
    nameWithType: PhraseNormalizer.AddStem
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddStem
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSpelling(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String)
  commentId: M:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSpelling(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String)
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: true
  name: AddSpelling(IList<String>, AnalyzerMatch, String)
  nameWithType: PhraseNormalizer.AddSpelling(IList<String>, AnalyzerMatch, String)
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSpelling(System.Collections.Generic.IList<System.String>, Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.String)
  nameWithType.vb: PhraseNormalizer.AddSpelling(IList(Of String), AnalyzerMatch, String)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSpelling(System.Collections.Generic.IList(Of System.String), Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.String)
  name.vb: AddSpelling(IList(Of String), AnalyzerMatch, String)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSpelling(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String)
    name: AddSpelling
    nameWithType: PhraseNormalizer.AddSpelling
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSpelling
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSpelling(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String)
    name: AddSpelling
    nameWithType: PhraseNormalizer.AddSpelling
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSpelling
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSubject(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  commentId: M:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSubject(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: true
  name: AddSubject(IList<String>, AnalyzerMatch)
  nameWithType: PhraseNormalizer.AddSubject(IList<String>, AnalyzerMatch)
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSubject(System.Collections.Generic.IList<System.String>, Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  nameWithType.vb: PhraseNormalizer.AddSubject(IList(Of String), AnalyzerMatch)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSubject(System.Collections.Generic.IList(Of System.String), Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  name.vb: AddSubject(IList(Of String), AnalyzerMatch)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSubject(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
    name: AddSubject
    nameWithType: PhraseNormalizer.AddSubject
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSubject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSubject(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
    name: AddSubject
    nameWithType: PhraseNormalizer.AddSubject
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSubject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddIndicator(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  commentId: M:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddIndicator(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: true
  name: AddIndicator(IList<String>, AnalyzerMatch)
  nameWithType: PhraseNormalizer.AddIndicator(IList<String>, AnalyzerMatch)
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddIndicator(System.Collections.Generic.IList<System.String>, Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  nameWithType.vb: PhraseNormalizer.AddIndicator(IList(Of String), AnalyzerMatch)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddIndicator(System.Collections.Generic.IList(Of System.String), Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  name.vb: AddIndicator(IList(Of String), AnalyzerMatch)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddIndicator(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
    name: AddIndicator
    nameWithType: PhraseNormalizer.AddIndicator
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddIndicator
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddIndicator(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
    name: AddIndicator
    nameWithType: PhraseNormalizer.AddIndicator
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddIndicator
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddConcept(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String)
  commentId: M:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddConcept(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String)
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: true
  name: AddConcept(IList<String>, AnalyzerMatch, String)
  nameWithType: PhraseNormalizer.AddConcept(IList<String>, AnalyzerMatch, String)
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddConcept(System.Collections.Generic.IList<System.String>, Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.String)
  nameWithType.vb: PhraseNormalizer.AddConcept(IList(Of String), AnalyzerMatch, String)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddConcept(System.Collections.Generic.IList(Of System.String), Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.String)
  name.vb: AddConcept(IList(Of String), AnalyzerMatch, String)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddConcept(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String)
    name: AddConcept
    nameWithType: PhraseNormalizer.AddConcept
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddConcept
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddConcept(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String)
    name: AddConcept
    nameWithType: PhraseNormalizer.AddConcept
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddConcept
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  name: SetProperty(String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object())
  name.vb: SetProperty(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  name: InvokeMethod(String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object())
  name.vb: InvokeMethod(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  parent: Microsoft.Health.Utility.InvariantString
  definition: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  name: ToStringInvariant()
  nameWithType: InvariantString.ToStringInvariant()
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant()
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  parent: Microsoft.Health.Utility.TypeHelper
  definition: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  name: ValueOrDbNull<NormalizingWordBreaker>()
  nameWithType: TypeHelper.ValueOrDbNull<NormalizingWordBreaker>()
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.InvertedIndex.NormalizingWordBreaker>()
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of NormalizingWordBreaker)()
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.InvertedIndex.NormalizingWordBreaker)()
  name.vb: ValueOrDbNull(Of NormalizingWordBreaker)()
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull<NormalizingWordBreaker>
    nameWithType: TypeHelper.ValueOrDbNull<NormalizingWordBreaker>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.InvertedIndex.NormalizingWordBreaker>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull(Of NormalizingWordBreaker)
    nameWithType: TypeHelper.ValueOrDbNull(Of NormalizingWordBreaker)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.InvertedIndex.NormalizingWordBreaker)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  parent: Microsoft.Health.Utility.WCXmlHelper
  definition: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  name: ToXml()
  nameWithType: WCXmlHelper.ToXml()
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml()
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.PhraseAnalyzer
  commentId: N:Microsoft.Health.PhraseAnalyzer
  isExternal: false
  name: Microsoft.Health.PhraseAnalyzer
  nameWithType: Microsoft.Health.PhraseAnalyzer
  fullName: Microsoft.Health.PhraseAnalyzer
- uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  isExternal: true
  name: SetProperty(Object, String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object())
  name.vb: SetProperty(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions
  commentId: T:Microsoft.Health.Utility.IDispatchExtensions
  parent: Microsoft.Health.Utility
  isExternal: false
  name: IDispatchExtensions
  nameWithType: IDispatchExtensions
  fullName: Microsoft.Health.Utility.IDispatchExtensions
- uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  isExternal: true
  name: InvokeMethod(Object, String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object())
  name.vb: InvokeMethod(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  isExternal: true
  name: ToStringInvariant(Object)
  nameWithType: InvariantString.ToStringInvariant(Object)
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString
  commentId: T:Microsoft.Health.Utility.InvariantString
  parent: Microsoft.Health.Utility
  isExternal: false
  name: InvariantString
  nameWithType: InvariantString
  fullName: Microsoft.Health.Utility.InvariantString
- uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  isExternal: false
  name: ValueOrDbNull<T>(T)
  nameWithType: TypeHelper.ValueOrDbNull<T>(T)
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>(T)
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of T)(T)
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)(T)
  name.vb: ValueOrDbNull(Of T)(T)
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull<T>
    nameWithType: TypeHelper.ValueOrDbNull<T>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull(Of T)
    nameWithType: TypeHelper.ValueOrDbNull(Of T)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.TypeHelper
  commentId: T:Microsoft.Health.Utility.TypeHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: TypeHelper
  nameWithType: TypeHelper
  fullName: Microsoft.Health.Utility.TypeHelper
- uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  isExternal: true
  name: ToXml(Object)
  nameWithType: WCXmlHelper.ToXml(Object)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.WCXmlHelper
  commentId: T:Microsoft.Health.Utility.WCXmlHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: WCXmlHelper
  nameWithType: WCXmlHelper
  fullName: Microsoft.Health.Utility.WCXmlHelper
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: System.Collections.Generic.IList{System.String}
  commentId: T:System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  nameWithType.vb: IList(Of String)
  fullName.vb: System.Collections.Generic.IList(Of System.String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.#ctor*
  commentId: Overload:Microsoft.Health.InvertedIndex.NormalizingWordBreaker.#ctor
  isExternal: false
  name: NormalizingWordBreaker
  nameWithType: NormalizingWordBreaker.NormalizingWordBreaker
  fullName: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.NormalizingWordBreaker
- uid: Microsoft.Health.PhraseAnalyzer.Analyzer
  commentId: T:Microsoft.Health.PhraseAnalyzer.Analyzer
  parent: Microsoft.Health.PhraseAnalyzer
  isExternal: false
  name: Analyzer
  nameWithType: Analyzer
  fullName: Microsoft.Health.PhraseAnalyzer.Analyzer
- uid: Microsoft.Health.PhraseAnalyzer.WordBreaker
  commentId: T:Microsoft.Health.PhraseAnalyzer.WordBreaker
  parent: Microsoft.Health.PhraseAnalyzer
  isExternal: false
  name: WordBreaker
  nameWithType: WordBreaker
  fullName: Microsoft.Health.PhraseAnalyzer.WordBreaker
- uid: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.WordBreaker*
  commentId: Overload:Microsoft.Health.InvertedIndex.NormalizingWordBreaker.WordBreaker
  isExternal: false
  name: WordBreaker
  nameWithType: NormalizingWordBreaker.WordBreaker
  fullName: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.WordBreaker
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.WordBreak*
  commentId: Overload:Microsoft.Health.InvertedIndex.NormalizingWordBreaker.WordBreak
  isExternal: false
  name: WordBreak
  nameWithType: NormalizingWordBreaker.WordBreak
  fullName: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.WordBreak
- uid: Microsoft.Health.PhraseAnalyzer.IWordBreaker.WordBreak(System.String)
  commentId: M:Microsoft.Health.PhraseAnalyzer.IWordBreaker.WordBreak(System.String)
  parent: Microsoft.Health.PhraseAnalyzer.IWordBreaker
  isExternal: true
  name: WordBreak(String)
  nameWithType: IWordBreaker.WordBreak(String)
  fullName: Microsoft.Health.PhraseAnalyzer.IWordBreaker.WordBreak(System.String)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.IWordBreaker.WordBreak(System.String)
    name: WordBreak
    nameWithType: IWordBreaker.WordBreak
    fullName: Microsoft.Health.PhraseAnalyzer.IWordBreaker.WordBreak
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.IWordBreaker.WordBreak(System.String)
    name: WordBreak
    nameWithType: IWordBreaker.WordBreak
    fullName: Microsoft.Health.PhraseAnalyzer.IWordBreaker.WordBreak
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Health.PhraseAnalyzer.IWordBreaker.WordBreak(System.String,System.Collections.Generic.IList{System.String})
  commentId: M:Microsoft.Health.PhraseAnalyzer.IWordBreaker.WordBreak(System.String,System.Collections.Generic.IList{System.String})
  parent: Microsoft.Health.PhraseAnalyzer.IWordBreaker
  isExternal: true
  name: WordBreak(String, IList<String>)
  nameWithType: IWordBreaker.WordBreak(String, IList<String>)
  fullName: Microsoft.Health.PhraseAnalyzer.IWordBreaker.WordBreak(System.String, System.Collections.Generic.IList<System.String>)
  nameWithType.vb: IWordBreaker.WordBreak(String, IList(Of String))
  fullName.vb: Microsoft.Health.PhraseAnalyzer.IWordBreaker.WordBreak(System.String, System.Collections.Generic.IList(Of System.String))
  name.vb: WordBreak(String, IList(Of String))
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.IWordBreaker.WordBreak(System.String,System.Collections.Generic.IList{System.String})
    name: WordBreak
    nameWithType: IWordBreaker.WordBreak
    fullName: Microsoft.Health.PhraseAnalyzer.IWordBreaker.WordBreak
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.IWordBreaker.WordBreak(System.String,System.Collections.Generic.IList{System.String})
    name: WordBreak
    nameWithType: IWordBreaker.WordBreak
    fullName: Microsoft.Health.PhraseAnalyzer.IWordBreaker.WordBreak
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.GetWords*
  commentId: Overload:Microsoft.Health.InvertedIndex.NormalizingWordBreaker.GetWords
  isExternal: false
  name: GetWords
  nameWithType: NormalizingWordBreaker.GetWords
  fullName: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.GetWords
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.IList{System.String}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.IList{System.String}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IList<String>>
  nameWithType: IEnumerable<IList<String>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.IList<System.String>>
  nameWithType.vb: IEnumerable(Of IList(Of String))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IList(Of System.String))
  name.vb: IEnumerable(Of IList(Of String))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.Clone*
  commentId: Overload:Microsoft.Health.InvertedIndex.NormalizingWordBreaker.Clone
  isExternal: false
  name: Clone
  nameWithType: NormalizingWordBreaker.Clone
  fullName: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.Clone
- uid: Microsoft.Health.InvertedIndex.NormalizingWordBreaker
  commentId: T:Microsoft.Health.InvertedIndex.NormalizingWordBreaker
  parent: Microsoft.Health.InvertedIndex
  isExternal: false
  name: NormalizingWordBreaker
  nameWithType: NormalizingWordBreaker
  fullName: Microsoft.Health.InvertedIndex.NormalizingWordBreaker
- uid: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.NormalizedWords*
  commentId: Overload:Microsoft.Health.InvertedIndex.NormalizingWordBreaker.NormalizedWords
  isExternal: false
  name: NormalizedWords
  nameWithType: NormalizingWordBreaker.NormalizedWords
  fullName: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.NormalizedWords
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddString(System.String)
  commentId: M:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddString(System.String)
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: true
  name: AddString(String)
  nameWithType: PhraseNormalizer.AddString(String)
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddString(System.String)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddString(System.String)
    name: AddString
    nameWithType: PhraseNormalizer.AddString
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddString(System.String)
    name: AddString
    nameWithType: PhraseNormalizer.AddString
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.AddString*
  commentId: Overload:Microsoft.Health.InvertedIndex.NormalizingWordBreaker.AddString
  isExternal: false
  name: AddString
  nameWithType: NormalizingWordBreaker.AddString
  fullName: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.AddString
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSegment(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  commentId: M:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSegment(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: true
  name: AddSegment(IList<String>, AnalyzerMatch)
  nameWithType: PhraseNormalizer.AddSegment(IList<String>, AnalyzerMatch)
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSegment(System.Collections.Generic.IList<System.String>, Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  nameWithType.vb: PhraseNormalizer.AddSegment(IList(Of String), AnalyzerMatch)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSegment(System.Collections.Generic.IList(Of System.String), Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  name.vb: AddSegment(IList(Of String), AnalyzerMatch)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSegment(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
    name: AddSegment
    nameWithType: PhraseNormalizer.AddSegment
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSegment
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSegment(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
    name: AddSegment
    nameWithType: PhraseNormalizer.AddSegment
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSegment
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.AddSegment*
  commentId: Overload:Microsoft.Health.InvertedIndex.NormalizingWordBreaker.AddSegment
  isExternal: false
  name: AddSegment
  nameWithType: NormalizingWordBreaker.AddSegment
  fullName: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.AddSegment
- uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  commentId: T:Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  parent: Microsoft.Health.PhraseAnalyzer
  isExternal: false
  name: AnalyzerMatch
  nameWithType: AnalyzerMatch
  fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSynonyms(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String[])
  commentId: M:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSynonyms(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String[])
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: true
  name: AddSynonyms(IList<String>, AnalyzerMatch, String[])
  nameWithType: PhraseNormalizer.AddSynonyms(IList<String>, AnalyzerMatch, String[])
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSynonyms(System.Collections.Generic.IList<System.String>, Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.String[])
  nameWithType.vb: PhraseNormalizer.AddSynonyms(IList(Of String), AnalyzerMatch, String())
  fullName.vb: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSynonyms(System.Collections.Generic.IList(Of System.String), Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.String())
  name.vb: AddSynonyms(IList(Of String), AnalyzerMatch, String())
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSynonyms(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String[])
    name: AddSynonyms
    nameWithType: PhraseNormalizer.AddSynonyms
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSynonyms
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSynonyms(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String[])
    name: AddSynonyms
    nameWithType: PhraseNormalizer.AddSynonyms
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSynonyms
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.AddSynonyms*
  commentId: Overload:Microsoft.Health.InvertedIndex.NormalizingWordBreaker.AddSynonyms
  isExternal: false
  name: AddSynonyms
  nameWithType: NormalizingWordBreaker.AddSynonyms
  fullName: Microsoft.Health.InvertedIndex.NormalizingWordBreaker.AddSynonyms
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
