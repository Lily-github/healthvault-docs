### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning
  commentId: T:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning
  id: HealthVaultPlatformProvisioning
  parent: Microsoft.Health.PlatformPrimitives
  children:
  - Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.AddChildApplication(Microsoft.Health.Web.OfflineWebApplicationConnection,Microsoft.Health.ApplicationInfo)
  - Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.DisableMock
  - Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.EnableMock(Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning)
  - Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.GetChildApplication(Microsoft.Health.Web.OfflineWebApplicationConnection,System.Guid)
  - Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.UpdateChildApplication(Microsoft.Health.ApplicationConnection,Microsoft.Health.ApplicationInfo)
  langs:
  - csharp
  - vb
  name: HealthVaultPlatformProvisioning
  nameWithType: HealthVaultPlatformProvisioning
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning
  type: Class
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformProvisioning.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: HealthVaultPlatformProvisioning
    path: HealthVaultPlatformProvisioning.cs
    startLine: 21
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nProvides low-level access to the HealthVault provisioning operations.\n"
  remarks: "\n<xref href=\"Microsoft.Health.HealthVaultPlatform\" data-throw-if-not-resolved=\"false\"></xref> uses this class to perform operations. Set \nHealthVaultPlatformProvisioning.Current to a derived class to intercept all provisioning calls.\n"
  example: []
  syntax:
    content: public class HealthVaultPlatformProvisioning
    content.vb: Public Class HealthVaultPlatformProvisioning
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.EnableMock(Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning)
  commentId: M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.EnableMock(Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning)
  id: EnableMock(Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning)
  parent: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning
  langs:
  - csharp
  - vb
  name: EnableMock(HealthVaultPlatformProvisioning)
  nameWithType: HealthVaultPlatformProvisioning.EnableMock(HealthVaultPlatformProvisioning)
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.EnableMock(Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformProvisioning.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: EnableMock
    path: HealthVaultPlatformProvisioning.cs
    startLine: 38
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nEnables mocking of calls to this class.\n"
  remarks: "\nThe calling class should pass in a class that derives from this\nclass and overrides the calls to be mocked. \n"
  example: []
  syntax:
    content: public static void EnableMock(HealthVaultPlatformProvisioning mock)
    content.vb: Public Shared Sub EnableMock(mock As HealthVaultPlatformProvisioning)
    parameters:
    - id: mock
      type: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning
      description: The mocking class.
  overload: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.EnableMock*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThere is already a mock registered for this class.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.DisableMock
  commentId: M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.DisableMock
  id: DisableMock
  parent: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning
  langs:
  - csharp
  - vb
  name: DisableMock()
  nameWithType: HealthVaultPlatformProvisioning.DisableMock()
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.DisableMock()
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformProvisioning.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DisableMock
    path: HealthVaultPlatformProvisioning.cs
    startLine: 54
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nRemoves mocking of calls to this class.\n"
  example: []
  syntax:
    content: public static void DisableMock()
    content.vb: Public Shared Sub DisableMock
  overload: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.DisableMock*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThere is no mock registered for this class.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.UpdateChildApplication(Microsoft.Health.ApplicationConnection,Microsoft.Health.ApplicationInfo)
  commentId: M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.UpdateChildApplication(Microsoft.Health.ApplicationConnection,Microsoft.Health.ApplicationInfo)
  id: UpdateChildApplication(Microsoft.Health.ApplicationConnection,Microsoft.Health.ApplicationInfo)
  parent: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning
  langs:
  - csharp
  - vb
  name: UpdateChildApplication(ApplicationConnection, ApplicationInfo)
  nameWithType: HealthVaultPlatformProvisioning.UpdateChildApplication(ApplicationConnection, ApplicationInfo)
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.UpdateChildApplication(Microsoft.Health.ApplicationConnection, Microsoft.Health.ApplicationInfo)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformProvisioning.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: UpdateChildApplication
    path: HealthVaultPlatformProvisioning.cs
    startLine: 98
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nUpdates the application's configuration in HealthVault.\n"
  remarks: "\nThis method makes a remote call to the HealthVault service.\nThe calling application in the <span class=\"paramref\">connection</span> must be the same as\nthe application specified by this ApplicationInfo instance or its master application.\nNote, this update will replace all configuration elements for the application. It is \nadvised that <xref href=\"Microsoft.Health.ApplicationProvisioning.Provisioner.GetApplication(Microsoft.Health.Web.OfflineWebApplicationConnection%2cSystem.Guid)\" data-throw-if-not-resolved=\"false\"></xref> is \ncalled to retrieve the existing application configuration before changing values and \ncalling Update.\n"
  example: []
  syntax:
    content: public virtual void UpdateChildApplication(ApplicationConnection connection, ApplicationInfo applicationInfo)
    content.vb: Public Overridable Sub UpdateChildApplication(connection As ApplicationConnection, applicationInfo As ApplicationInfo)
    parameters:
    - id: connection
      type: Microsoft.Health.ApplicationConnection
      description: "\nThe connection to use to make the update.\n"
    - id: applicationInfo
      type: Microsoft.Health.ApplicationInfo
      description: "\nThe <xref href=\"Microsoft.Health.ApplicationInfo\" data-throw-if-not-resolved=\"false\"></xref> to update.\n"
  overload: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.UpdateChildApplication*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> is <strong>null</strong>.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe HealthVault service returned an error.\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.GetChildApplication(Microsoft.Health.Web.OfflineWebApplicationConnection,System.Guid)
  commentId: M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.GetChildApplication(Microsoft.Health.Web.OfflineWebApplicationConnection,System.Guid)
  id: GetChildApplication(Microsoft.Health.Web.OfflineWebApplicationConnection,System.Guid)
  parent: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning
  langs:
  - csharp
  - vb
  name: GetChildApplication(OfflineWebApplicationConnection, Guid)
  nameWithType: HealthVaultPlatformProvisioning.GetChildApplication(OfflineWebApplicationConnection, Guid)
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.GetChildApplication(Microsoft.Health.Web.OfflineWebApplicationConnection, System.Guid)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformProvisioning.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetChildApplication
    path: HealthVaultPlatformProvisioning.cs
    startLine: 147
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nGets the configuration information for the specified child application ID.\n"
  example: []
  syntax:
    content: public virtual ApplicationInfo GetChildApplication(OfflineWebApplicationConnection connection, Guid childApplicationId)
    content.vb: Public Overridable Function GetChildApplication(connection As OfflineWebApplicationConnection, childApplicationId As Guid) As ApplicationInfo
    parameters:
    - id: connection
      type: Microsoft.Health.Web.OfflineWebApplicationConnection
      description: "\nThe connection to use to get the application information.\n"
    - id: childApplicationId
      type: System.Guid
      description: "\nThe unique application identifier for the child application to get the configuration\ninformation for.\n"
    return:
      type: Microsoft.Health.ApplicationInfo
      description: "\nConfiguration information for the specified child application.\n"
  overload: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.GetChildApplication*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> is <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">childApplicationId</span> is <xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  - type: Microsoft.Health.HealthServiceAccessDeniedException
    commentId: T:Microsoft.Health.HealthServiceAccessDeniedException
    description: "\nIf the application specified in the <span class=\"paramref\">connection</span> is not a master\napplication, or if <span class=\"paramref\">childApplicationId</span> does not identify a child\napplication of the calling application.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf there is an error when the HealthVault service is called.\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.AddChildApplication(Microsoft.Health.Web.OfflineWebApplicationConnection,Microsoft.Health.ApplicationInfo)
  commentId: M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.AddChildApplication(Microsoft.Health.Web.OfflineWebApplicationConnection,Microsoft.Health.ApplicationInfo)
  id: AddChildApplication(Microsoft.Health.Web.OfflineWebApplicationConnection,Microsoft.Health.ApplicationInfo)
  parent: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning
  langs:
  - csharp
  - vb
  name: AddChildApplication(OfflineWebApplicationConnection, ApplicationInfo)
  nameWithType: HealthVaultPlatformProvisioning.AddChildApplication(OfflineWebApplicationConnection, ApplicationInfo)
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.AddChildApplication(Microsoft.Health.Web.OfflineWebApplicationConnection, Microsoft.Health.ApplicationInfo)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformProvisioning.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: AddChildApplication
    path: HealthVaultPlatformProvisioning.cs
    startLine: 221
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nAdds a HealthVault application instance for a \"child\" application of the calling\napplication.\n"
  example: []
  syntax:
    content: public virtual Guid AddChildApplication(OfflineWebApplicationConnection connection, ApplicationInfo applicationConfigurationInformation)
    content.vb: Public Overridable Function AddChildApplication(connection As OfflineWebApplicationConnection, applicationConfigurationInformation As ApplicationInfo) As Guid
    parameters:
    - id: connection
      type: Microsoft.Health.Web.OfflineWebApplicationConnection
      description: "\nThe connection to use to add the application.\n"
    - id: applicationConfigurationInformation
      type: Microsoft.Health.ApplicationInfo
      description: "\nConfiguration information about the application being provisioned.\n"
    return:
      type: System.Guid
      description: "\nThe new application identifier for the new application provided by HealthVault.\n"
  overload: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.AddChildApplication*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> or <span class=\"paramref\">applicationConfigurationInformation</span>\nis <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <xref href=\"Microsoft.Health.ApplicationInfo.Name\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"Microsoft.Health.ApplicationInfo.PublicKeys\" data-throw-if-not-resolved=\"false\"></xref>,\n<xref href=\"Microsoft.Health.ApplicationInfo.OfflineBaseAuthorizations\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"Microsoft.Health.ApplicationInfo.Description\" data-throw-if-not-resolved=\"false\"></xref>,\n<xref href=\"Microsoft.Health.ApplicationInfo.AuthorizationReason\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"Microsoft.Health.ApplicationInfo.LargeLogo\" data-throw-if-not-resolved=\"false\"></xref> \nis not specified.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf there is an error when the HealthVault service is called.\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: Microsoft.Health.HealthVaultPlatform
  commentId: T:Microsoft.Health.HealthVaultPlatform
  isExternal: false
  name: HealthVaultPlatform
  nameWithType: HealthVaultPlatform
  fullName: Microsoft.Health.HealthVaultPlatform
- uid: Microsoft.Health.PlatformPrimitives
  commentId: N:Microsoft.Health.PlatformPrimitives
  isExternal: false
  name: Microsoft.Health.PlatformPrimitives
  nameWithType: Microsoft.Health.PlatformPrimitives
  fullName: Microsoft.Health.PlatformPrimitives
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.EnableMock*
  commentId: Overload:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.EnableMock
  isExternal: false
  name: EnableMock
  nameWithType: HealthVaultPlatformProvisioning.EnableMock
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.EnableMock
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning
  commentId: T:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning
  parent: Microsoft.Health.PlatformPrimitives
  isExternal: false
  name: HealthVaultPlatformProvisioning
  nameWithType: HealthVaultPlatformProvisioning
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.DisableMock*
  commentId: Overload:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.DisableMock
  isExternal: false
  name: DisableMock
  nameWithType: HealthVaultPlatformProvisioning.DisableMock
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.DisableMock
- uid: Microsoft.Health.ApplicationInfo
  commentId: T:Microsoft.Health.ApplicationInfo
  parent: Microsoft.Health
  isExternal: false
  name: ApplicationInfo
  nameWithType: ApplicationInfo
  fullName: Microsoft.Health.ApplicationInfo
- uid: Microsoft.Health.ApplicationProvisioning.Provisioner.GetApplication(Microsoft.Health.Web.OfflineWebApplicationConnection,System.Guid)
  commentId: M:Microsoft.Health.ApplicationProvisioning.Provisioner.GetApplication(Microsoft.Health.Web.OfflineWebApplicationConnection,System.Guid)
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.UpdateChildApplication*
  commentId: Overload:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.UpdateChildApplication
  isExternal: false
  name: UpdateChildApplication
  nameWithType: HealthVaultPlatformProvisioning.UpdateChildApplication
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.UpdateChildApplication
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: Microsoft.Health.HealthServiceException
  commentId: T:Microsoft.Health.HealthServiceException
  parent: Microsoft.Health
  isExternal: false
  name: HealthServiceException
  nameWithType: HealthServiceException
  fullName: Microsoft.Health.HealthServiceException
- uid: Microsoft.Health.ApplicationConnection
  commentId: T:Microsoft.Health.ApplicationConnection
  parent: Microsoft.Health
  isExternal: false
  name: ApplicationConnection
  nameWithType: ApplicationConnection
  fullName: Microsoft.Health.ApplicationConnection
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: System.Guid.Empty
  commentId: F:System.Guid.Empty
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.GetChildApplication*
  commentId: Overload:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.GetChildApplication
  isExternal: false
  name: GetChildApplication
  nameWithType: HealthVaultPlatformProvisioning.GetChildApplication
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.GetChildApplication
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: Microsoft.Health.HealthServiceAccessDeniedException
  commentId: T:Microsoft.Health.HealthServiceAccessDeniedException
  isExternal: false
  name: HealthServiceAccessDeniedException
  nameWithType: HealthServiceAccessDeniedException
  fullName: Microsoft.Health.HealthServiceAccessDeniedException
- uid: Microsoft.Health.Web.OfflineWebApplicationConnection
  commentId: T:Microsoft.Health.Web.OfflineWebApplicationConnection
  parent: Microsoft.Health.Web
  isExternal: false
  name: OfflineWebApplicationConnection
  nameWithType: OfflineWebApplicationConnection
  fullName: Microsoft.Health.Web.OfflineWebApplicationConnection
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: Microsoft.Health.Web
  commentId: N:Microsoft.Health.Web
  isExternal: false
  name: Microsoft.Health.Web
  nameWithType: Microsoft.Health.Web
  fullName: Microsoft.Health.Web
- uid: Microsoft.Health.ApplicationInfo.Name
  commentId: P:Microsoft.Health.ApplicationInfo.Name
- uid: Microsoft.Health.ApplicationInfo.PublicKeys
  commentId: P:Microsoft.Health.ApplicationInfo.PublicKeys
- uid: Microsoft.Health.ApplicationInfo.OfflineBaseAuthorizations
  commentId: P:Microsoft.Health.ApplicationInfo.OfflineBaseAuthorizations
- uid: Microsoft.Health.ApplicationInfo.Description
  commentId: P:Microsoft.Health.ApplicationInfo.Description
- uid: Microsoft.Health.ApplicationInfo.AuthorizationReason
  commentId: P:Microsoft.Health.ApplicationInfo.AuthorizationReason
- uid: Microsoft.Health.ApplicationInfo.LargeLogo
  commentId: P:Microsoft.Health.ApplicationInfo.LargeLogo
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.AddChildApplication*
  commentId: Overload:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.AddChildApplication
  isExternal: false
  name: AddChildApplication
  nameWithType: HealthVaultPlatformProvisioning.AddChildApplication
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformProvisioning.AddChildApplication
