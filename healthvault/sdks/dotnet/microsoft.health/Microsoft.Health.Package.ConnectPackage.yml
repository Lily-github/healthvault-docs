### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.Package.ConnectPackage
  commentId: T:Microsoft.Health.Package.ConnectPackage
  id: ConnectPackage
  parent: Microsoft.Health.Package
  children:
  - Microsoft.Health.Package.ConnectPackage.AllocatePackageId(Microsoft.Health.Web.OfflineWebApplicationConnection)
  - Microsoft.Health.Package.ConnectPackage.Create(Microsoft.Health.Package.ConnectPackageCreationParameters,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})
  - Microsoft.Health.Package.ConnectPackage.Create(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,Microsoft.Health.ItemTypes.PasswordProtectedPackage)
  - Microsoft.Health.Package.ConnectPackage.Create(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,System.String,Microsoft.Health.ItemTypes.PasswordProtectedPackage)
  - Microsoft.Health.Package.ConnectPackage.Create(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,System.String,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})
  - Microsoft.Health.Package.ConnectPackage.CreatePackage(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})
  - Microsoft.Health.Package.ConnectPackage.DeletePending(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String)
  - Microsoft.Health.Package.ConnectPackage.DeletePendingForIdentityCode(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String)
  - Microsoft.Health.Package.ConnectPackage.UpdateApplicationPatientId(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String)
  - Microsoft.Health.Package.ConnectPackage.UpdateApplicationPatientIdForIdentityCode(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String)
  langs:
  - csharp
  - vb
  name: ConnectPackage
  nameWithType: ConnectPackage
  fullName: Microsoft.Health.Package.ConnectPackage
  type: Class
  source:
    remote:
      path: Microsoft.Health/PatientConnect/ConnectPackage.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ConnectPackage
    path: PatientConnect/ConnectPackage.cs
    startLine: 27
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Package
  summary: "\nMethods for accessing the package APIs of HealthVault.\n"
  remarks: "\nThe ConnectPackage class allows applications to send user data to the user's\nHealthVault account, outside of the context of an ongoing interaction with the user.\nThe application can do this by sending a data package to the HealthVault service\nalong with the application's identifier and user specific information.\nThe user can then go to HealthVault Shell and add the package's contents to their \nappropriate health record.\n"
  example: []
  syntax:
    content: public static class ConnectPackage
    content.vb: Public Module ConnectPackage
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Health.Package.ConnectPackage.Create(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,System.String,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})
  commentId: M:Microsoft.Health.Package.ConnectPackage.Create(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,System.String,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})
  id: Create(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,System.String,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})
  parent: Microsoft.Health.Package.ConnectPackage
  langs:
  - csharp
  - vb
  name: Create(OfflineWebApplicationConnection, String, String, String, String, IList<HealthRecordItem>)
  nameWithType: ConnectPackage.Create(OfflineWebApplicationConnection, String, String, String, String, IList<HealthRecordItem>)
  fullName: Microsoft.Health.Package.ConnectPackage.Create(Microsoft.Health.Web.OfflineWebApplicationConnection, System.String, System.String, System.String, System.String, System.Collections.Generic.IList<Microsoft.Health.HealthRecordItem>)
  type: Method
  source:
    remote:
      path: Microsoft.Health/PatientConnect/ConnectPackage.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Create
    path: PatientConnect/ConnectPackage.cs
    startLine: 119
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Package
  summary: "\nRepresents a package of user data that is created by HealthVault in order\nto be retrieved by a user using the HealthVault Shell.\n"
  remarks: "\nPackage encryption is delegated to the .NET Crypto classes. The encryption algorithm \nsupported by default is AES256. If TripleDES is required, the caller should create \nthe custom Password Protected Package and call <xref href=\"Microsoft.Health.Package.ConnectPackage.Create(Microsoft.Health.Web.OfflineWebApplicationConnection%2cSystem.String%2cSystem.String%2cSystem.String%2cMicrosoft.Health.ItemTypes.PasswordProtectedPackage)\" data-throw-if-not-resolved=\"false\"></xref>.\n<br /><br />\nThe answer key provided is not the actual key to the decryption. A key is derived using \nthe answer, the salt, and the number of hash iterations (via the \n<xref href=\"System.Security.Cryptography.Rfc2898DeriveBytes\" data-throw-if-not-resolved=\"false\"></xref> class). To ensure case-insensitivity, the answer \nis lower cased using <xref href=\"System.String.ToLowerInvariant\" data-throw-if-not-resolved=\"false\"></xref> (culturally-agnostic) \nprior to generating the derived key.\n<br /><br />\nThe algorithm used has the following parameters:\n<ul>\n<li>Mode = CipherMode.CBC</li>\n<li>Padding = PaddingMode.ISO10126</li>\n</ul>\n<br /><br />\nThe salt supplied is used as the salt to the derived key as well as the key to the \nsupplied HMAC. The data must be appended to the hash, then encrypted and then Base64 \nencoded.\n"
  example: []
  syntax:
    content: public static string Create(OfflineWebApplicationConnection connection, string friendlyName, string securityQuestion, string securityAnswer, string applicationPatientId, IList<HealthRecordItem> packageContents)
    content.vb: Public Shared Function Create(connection As OfflineWebApplicationConnection, friendlyName As String, securityQuestion As String, securityAnswer As String, applicationPatientId As String, packageContents As IList(Of HealthRecordItem)) As String
    parameters:
    - id: connection
      type: Microsoft.Health.Web.OfflineWebApplicationConnection
      description: "\nThe application connection to HealthVault. The application ID in the connection is used\nwhen making the patient connection.\n"
    - id: friendlyName
      type: System.String
      description: "\nA friendly name for the patient connection which will be shown to the user when they\ngo to HealthVault Shell to validate the connection.\n"
    - id: securityQuestion
      type: System.String
      description: "\nA question (usually provided by the patient) to which the patient must provide the \n<span class=\"paramref\">securityAnswer</span> when they go to validate the connection in \nthe HealthVault Shell.\n"
    - id: securityAnswer
      type: System.String
      description: "\nThe answer to the <span class=\"paramref\">securityQuestion</span> which the patient must use\nwhen adding the package to their record via HealthVault Shell. The answer is \ncase-insensitive but otherwise must match exactly. Additionally, it must be at least \n6 characters long.\n"
    - id: applicationPatientId
      type: System.String
      description: "\nThe application specific identifier for the user. This identifier is used to uniquely\nidentify the user in the application data storage, whereas the HealthVault person ID is\nused to identify the person in HealthVault.\n"
    - id: packageContents
      type: System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem}
      description: "\nThe list of HealthRecordItems that will be encrypted and added to the package that the \nuser will claim via HealthVault Shell.\n"
    return:
      type: System.String
      description: "\nA token that the application must give to the patient to use when validating the\nconnection request.\n"
  overload: Microsoft.Health.Package.ConnectPackage.Create*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> is <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">friendlyName</span>, <span class=\"paramref\">securityQuestion</span>,\n<span class=\"paramref\">securityAnswer</span>, <span class=\"paramref\">applicationPatientId</span> or\nany element in <span class=\"paramref\">packageContents</span> are\n<strong>null</strong> or empty.        \n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\nIf <span class=\"paramref\">securityAnswer</span> is less than 6 characters.\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\nOne of the items in <span class=\"paramref\">packageContents</span> is signed and contains\nstreamed blobs. This is not supported.        \n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf an error occurs when contacting HealthVault.\n"
  nameWithType.vb: ConnectPackage.Create(OfflineWebApplicationConnection, String, String, String, String, IList(Of HealthRecordItem))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Package.ConnectPackage.Create(Microsoft.Health.Web.OfflineWebApplicationConnection, System.String, System.String, System.String, System.String, System.Collections.Generic.IList(Of Microsoft.Health.HealthRecordItem))
  name.vb: Create(OfflineWebApplicationConnection, String, String, String, String, IList(Of HealthRecordItem))
- uid: Microsoft.Health.Package.ConnectPackage.Create(Microsoft.Health.Package.ConnectPackageCreationParameters,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})
  commentId: M:Microsoft.Health.Package.ConnectPackage.Create(Microsoft.Health.Package.ConnectPackageCreationParameters,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})
  id: Create(Microsoft.Health.Package.ConnectPackageCreationParameters,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})
  parent: Microsoft.Health.Package.ConnectPackage
  langs:
  - csharp
  - vb
  name: Create(ConnectPackageCreationParameters, IList<HealthRecordItem>)
  nameWithType: ConnectPackage.Create(ConnectPackageCreationParameters, IList<HealthRecordItem>)
  fullName: Microsoft.Health.Package.ConnectPackage.Create(Microsoft.Health.Package.ConnectPackageCreationParameters, System.Collections.Generic.IList<Microsoft.Health.HealthRecordItem>)
  type: Method
  source:
    remote:
      path: Microsoft.Health/PatientConnect/ConnectPackage.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Create
    path: PatientConnect/ConnectPackage.cs
    startLine: 191
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Package
  summary: "\nRepresents a package of user data that is created by HealthVault in order\nto be retrieved by a user using the HealthVault Shell.\n"
  remarks: "\nPackage encryption is delegated to the .NET Crypto classes. The encryption algorithm \nsupported by default is AES256. If TripleDES is required, the caller should create \nthe custom Password Protected Package and call <xref href=\"Microsoft.Health.Package.ConnectPackage.Create(Microsoft.Health.Web.OfflineWebApplicationConnection%2cSystem.String%2cSystem.String%2cSystem.String%2cMicrosoft.Health.ItemTypes.PasswordProtectedPackage)\" data-throw-if-not-resolved=\"false\"></xref>.\n<br /><br />\nThe answer key provided is not the actual key to the decryption. A key is derived using \nthe answer, the salt, and the number of hash iterations (via the \n<xref href=\"System.Security.Cryptography.Rfc2898DeriveBytes\" data-throw-if-not-resolved=\"false\"></xref> class). To ensure case-insensitivity, the answer \nis lower cased using <xref href=\"System.String.ToLowerInvariant\" data-throw-if-not-resolved=\"false\"></xref> (culturally-agnostic) \nprior to generating the derived key.\n<br /><br />\nThe algorithm used has the following parameters:\n<ul>\n<li>Mode = CipherMode.CBC</li>\n<li>Padding = PaddingMode.ISO10126</li>\n</ul>\n<br /><br />\nThe salt supplied is used as the salt to the derived key as well as the key to the \nsupplied HMAC. The data must be appended to the hash, then encrypted and then Base64 \nencoded.\n"
  example: []
  syntax:
    content: public static string Create(ConnectPackageCreationParameters creationParameters, IList<HealthRecordItem> packageContents)
    content.vb: Public Shared Function Create(creationParameters As ConnectPackageCreationParameters, packageContents As IList(Of HealthRecordItem)) As String
    parameters:
    - id: creationParameters
      type: Microsoft.Health.Package.ConnectPackageCreationParameters
      description: "\nThe <xref href=\"Microsoft.Health.Package.ConnectPackageCreationParameters\" data-throw-if-not-resolved=\"false\"></xref> to be used while creating the \nconnect package.\n"
    - id: packageContents
      type: System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem}
      description: "\nThe list of HealthRecordItems that will be encrypted and added to the package that the \nuser will claim via HealthVault Shell.\n"
    return:
      type: System.String
      description: "\nA token that the application must give to the patient to use when validating the\nconnection request.\n"
  overload: Microsoft.Health.Package.ConnectPackage.Create*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\nOne of the items in <span class=\"paramref\">packageContents</span> is signed and contains\nstreamed blobs. This is not supported.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf an error occurs when contacting HealthVault.\n"
  nameWithType.vb: ConnectPackage.Create(ConnectPackageCreationParameters, IList(Of HealthRecordItem))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Package.ConnectPackage.Create(Microsoft.Health.Package.ConnectPackageCreationParameters, System.Collections.Generic.IList(Of Microsoft.Health.HealthRecordItem))
  name.vb: Create(ConnectPackageCreationParameters, IList(Of HealthRecordItem))
- uid: Microsoft.Health.Package.ConnectPackage.CreatePackage(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})
  commentId: M:Microsoft.Health.Package.ConnectPackage.CreatePackage(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})
  id: CreatePackage(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})
  parent: Microsoft.Health.Package.ConnectPackage
  langs:
  - csharp
  - vb
  name: CreatePackage(OfflineWebApplicationConnection, String, String, String, String, String, IList<HealthRecordItem>)
  nameWithType: ConnectPackage.CreatePackage(OfflineWebApplicationConnection, String, String, String, String, String, IList<HealthRecordItem>)
  fullName: Microsoft.Health.Package.ConnectPackage.CreatePackage(Microsoft.Health.Web.OfflineWebApplicationConnection, System.String, System.String, System.String, System.String, System.String, System.Collections.Generic.IList<Microsoft.Health.HealthRecordItem>)
  type: Method
  source:
    remote:
      path: Microsoft.Health/PatientConnect/ConnectPackage.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CreatePackage
    path: PatientConnect/ConnectPackage.cs
    startLine: 294
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Package
  summary: "\nAsks HealthVault to create a pending package for the application specified\nby the connection with the specified user specific parameters.\n"
  remarks: "\nThe encryption is delegated to the .NET Crypto classes. The encryption algorithm \nsupported by default is AES256. If TripleDES is required, the caller should create \nthe custom Password Protected Package and call <xref href=\"Microsoft.Health.Package.ConnectPackage.Create(Microsoft.Health.Web.OfflineWebApplicationConnection%2cSystem.String%2cSystem.String%2cSystem.String%2cMicrosoft.Health.ItemTypes.PasswordProtectedPackage)\" data-throw-if-not-resolved=\"false\"></xref>.\n<br /><br />\nThe answer key provided is not the actual key to the decryption. A key is derived using \nthe answer, the salt, and the number of hash iterations (via the \n<xref href=\"System.Security.Cryptography.Rfc2898DeriveBytes\" data-throw-if-not-resolved=\"false\"></xref> class). To ensure case-insensitivity, the answer \nis lower cased using <xref href=\"System.String.ToLowerInvariant\" data-throw-if-not-resolved=\"false\"></xref> (culturally-agnostic) \nprior to generating the derived key.\n<br /><br />\nThe algorithm used has the following parameters:\n<ul>\n<li>Mode = CipherMode.CBC</li>\n<li>Padding = PaddingMode.ISO10126</li>\n</ul>\n<br /><br />\nThe salt supplied is used as the salt to the derived key as well as the key to the \nsupplied HMAC. The data must be appended to the hash, then encrypted and then Base64 \nencoded.\n"
  example: []
  syntax:
    content: public static string CreatePackage(OfflineWebApplicationConnection connection, string identityCode, string friendlyName, string securityQuestion, string securityAnswer, string applicationPatientId, IList<HealthRecordItem> packageContents)
    content.vb: Public Shared Function CreatePackage(connection As OfflineWebApplicationConnection, identityCode As String, friendlyName As String, securityQuestion As String, securityAnswer As String, applicationPatientId As String, packageContents As IList(Of HealthRecordItem)) As String
    parameters:
    - id: connection
      type: Microsoft.Health.Web.OfflineWebApplicationConnection
      description: "\nThe application connection to HealthVault. The application ID in the connection is used\nwhen making the patient connection.\n"
    - id: identityCode
      type: System.String
      description: "\nThe application unique identifier of the package.\n"
    - id: friendlyName
      type: System.String
      description: "\nA friendly name for the patient connection which will be shown to the user when they\ngo to HealthVault Shell to validate the connection.\n"
    - id: securityQuestion
      type: System.String
      description: "\nA question (usually provided by the patient) to which the patient must provide the \n<span class=\"paramref\">securityAnswer</span> when they go to validate the connection in \nthe HealthVault Shell.\n"
    - id: securityAnswer
      type: System.String
      description: "\nThe answer to the <span class=\"paramref\">securityQuestion</span> which the patient must use\nwhen adding the package to their record via HealthVault Shell. The answer is \ncase-insensitive but otherwise must match exactly. Additionally, it must be at least \n6 characters long.\n"
    - id: applicationPatientId
      type: System.String
      description: "\nThe application specific identifier for the user. This identifier is used to uniquely\nidentify the user in the application data storage, whereas the HealthVault person ID is\nused to identify the person in HealthVault.\n"
    - id: packageContents
      type: System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem}
      description: "\nThe list of HealthRecordItems that will be encrypted and added to the package that the \nuser will claim via HealthVault Shell.\n"
    return:
      type: System.String
      description: "\nA token that the application must give to the patient to use when validating the\nconnection request.\n"
  overload: Microsoft.Health.Package.ConnectPackage.CreatePackage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> is <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">identityCode</span>, <span class=\"paramref\">friendlyName</span>, <span class=\"paramref\">securityQuestion</span>,\n<span class=\"paramref\">securityAnswer</span>, <span class=\"paramref\">applicationPatientId</span> or\nany element in <span class=\"paramref\">packageContents</span> are\n<strong>null</strong> or empty.\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\nIf <span class=\"paramref\">securityAnswer</span> is less than 6 characters.\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\nOne of the items in <span class=\"paramref\">packageContents</span> is signed and contains\nstreamed blobs. This is not supported.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf an error occurs when contacting HealthVault.\n"
  nameWithType.vb: ConnectPackage.CreatePackage(OfflineWebApplicationConnection, String, String, String, String, String, IList(Of HealthRecordItem))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Package.ConnectPackage.CreatePackage(Microsoft.Health.Web.OfflineWebApplicationConnection, System.String, System.String, System.String, System.String, System.String, System.Collections.Generic.IList(Of Microsoft.Health.HealthRecordItem))
  name.vb: CreatePackage(OfflineWebApplicationConnection, String, String, String, String, String, IList(Of HealthRecordItem))
- uid: Microsoft.Health.Package.ConnectPackage.Create(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,Microsoft.Health.ItemTypes.PasswordProtectedPackage)
  commentId: M:Microsoft.Health.Package.ConnectPackage.Create(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,Microsoft.Health.ItemTypes.PasswordProtectedPackage)
  id: Create(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,Microsoft.Health.ItemTypes.PasswordProtectedPackage)
  parent: Microsoft.Health.Package.ConnectPackage
  langs:
  - csharp
  - vb
  name: Create(OfflineWebApplicationConnection, String, String, String, PasswordProtectedPackage)
  nameWithType: ConnectPackage.Create(OfflineWebApplicationConnection, String, String, String, PasswordProtectedPackage)
  fullName: Microsoft.Health.Package.ConnectPackage.Create(Microsoft.Health.Web.OfflineWebApplicationConnection, System.String, System.String, System.String, Microsoft.Health.ItemTypes.PasswordProtectedPackage)
  type: Method
  source:
    remote:
      path: Microsoft.Health/PatientConnect/ConnectPackage.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Create
    path: PatientConnect/ConnectPackage.cs
    startLine: 414
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Package
  summary: "\nAsks HealthVault to create a pending package for the application specified\nby the connection with the specified user specific parameters.\n"
  remarks: "\nThe password protected package supports 2 encryption algorithms, AES256 (recommended)\nand TripleDES. \n<br /><br />\nFor AES256, the supported key size is 256 bits, the blocksize is 256 bits, the IV \nlength is 32 bytes.\n<br /><br />\nFor TripleDES, the supported key size is 192 bits, the blocksize is 64 bits, the IV \nlength is 8 bytes.\n<br /><br />\nThe encryption key should be derived using the answer, the salt, and the number of hash \niterations. The decryption will generate this key via the \n<xref href=\"System.Security.Cryptography.Rfc2898DeriveBytes\" data-throw-if-not-resolved=\"false\"></xref> class, hence, encryption should use a similar or \nidentical process. To ensure case-insensitivity, the answer should be converted to its\nlower cased form using <xref href=\"System.String.ToLowerInvariant\" data-throw-if-not-resolved=\"false\"></xref> (culturally-agnostic) \nprior to generating the derived key.\n<br /><br />\nThe algorithm used has the following parameters:\n<ul>\n<li>Mode = CipherMode.CBC</li>\n<li>Padding = PaddingMode.ISO10126</li>\n</ul>\n<br /><br />\nThe salt supplied is used as the salt to the derived key as well as the key to the \nsupplied HMAC. The salt should be at least 8 bytes long.\n<br /><br />\nIt is recommended that the number of hash iterations be at least 10000.\n"
  example: []
  syntax:
    content: public static string Create(OfflineWebApplicationConnection connection, string friendlyName, string securityQuestion, string applicationPatientId, PasswordProtectedPackage connectPackage)
    content.vb: Public Shared Function Create(connection As OfflineWebApplicationConnection, friendlyName As String, securityQuestion As String, applicationPatientId As String, connectPackage As PasswordProtectedPackage) As String
    parameters:
    - id: connection
      type: Microsoft.Health.Web.OfflineWebApplicationConnection
      description: "\nThe application connection to HealthVault. The application ID in the connection is used\nwhen making the patient connection.\n"
    - id: friendlyName
      type: System.String
      description: "\nA friendly name for the patient connection which will be shown to the user when they\ngo to HealthVault Shell to validate the connection.\n"
    - id: securityQuestion
      type: System.String
      description: "\nA question (usually provided by the patient) to which the patient must provide the \nanswer when they go to validate the connection in the \nHealthVault Shell.\n"
    - id: applicationPatientId
      type: System.String
      description: "\nThe application specific identifier for the user. This identifier is used to uniquely\nidentify the user in the application data storage whereas the HealthVault person ID is\nused to identify the person in HealthVault.\n"
    - id: connectPackage
      type: Microsoft.Health.ItemTypes.PasswordProtectedPackage
      description: "\nThe pending connect package that the user will add to his/her record. This package's\n<xref href=\"Microsoft.Health.Blob\" data-throw-if-not-resolved=\"false\"></xref> must be an encrypted and Base64 \nencoded blob of xml that represents a list of HealthRecordItems. This xml blob\nmust be a sequence of <thing></thing> elements, each wrapping the XML representation of a \nsingle HealthRecordItem. Each <thing></thing> element may be generated by calling \n<xref href=\"Microsoft.Health.HealthRecordItem.GetItemXml\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    return:
      type: System.String
      description: "\nA token that the application must give to the patient to use when validating the\nconnection request.\n"
  overload: Microsoft.Health.Package.ConnectPackage.Create*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> is <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">friendlyName</span>, <span class=\"paramref\">securityQuestion</span>,\n<span class=\"paramref\">applicationPatientId</span>, or <span class=\"paramref\">connectPackage</span> is\n<strong>null</strong> or empty.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf an error occurs when contacting HealthVault.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Package.ConnectPackage.Create(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,System.String,Microsoft.Health.ItemTypes.PasswordProtectedPackage)
  commentId: M:Microsoft.Health.Package.ConnectPackage.Create(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,System.String,Microsoft.Health.ItemTypes.PasswordProtectedPackage)
  id: Create(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,System.String,Microsoft.Health.ItemTypes.PasswordProtectedPackage)
  parent: Microsoft.Health.Package.ConnectPackage
  langs:
  - csharp
  - vb
  name: Create(OfflineWebApplicationConnection, String, String, String, String, PasswordProtectedPackage)
  nameWithType: ConnectPackage.Create(OfflineWebApplicationConnection, String, String, String, String, PasswordProtectedPackage)
  fullName: Microsoft.Health.Package.ConnectPackage.Create(Microsoft.Health.Web.OfflineWebApplicationConnection, System.String, System.String, System.String, System.String, Microsoft.Health.ItemTypes.PasswordProtectedPackage)
  type: Method
  source:
    remote:
      path: Microsoft.Health/PatientConnect/ConnectPackage.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Create
    path: PatientConnect/ConnectPackage.cs
    startLine: 529
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Package
  summary: "\nAsks HealthVault to create a pending package for the application specified\nby the connection with the specified user specific parameters and the pre-allocated\nidentity code.\n"
  remarks: "\nThe password protected package supports 2 encryption algorithms, AES256 (recommended)\nand TripleDES. \n<br /><br />\nFor AES256, the supported key size is 256 bits, the blocksize is 256 bits, the IV \nlength is 32 bytes.\n<br /><br />\nFor TripleDES, the supported key size is 192 bits, the blocksize is 64 bits, the IV \nlength is 8 bytes.\n<br /><br />\nThe encryption key should be derived using the answer, the salt, and the number of hash \niterations. The decryption will generate this key via the \n<xref href=\"System.Security.Cryptography.Rfc2898DeriveBytes\" data-throw-if-not-resolved=\"false\"></xref> class, hence, encryption should use a similar or \nidentical process. To ensure case-insensitivity, the answer should be converted to its\nlower cased form using <xref href=\"System.String.ToLowerInvariant\" data-throw-if-not-resolved=\"false\"></xref> (culturally-agnostic) \nprior to generating the derived key.\n<br /><br />\nThe algorithm used has the following parameters:\n<ul>\n<li>Mode = CipherMode.CBC</li>\n<li>Padding = PaddingMode.ISO10126</li>\n</ul>\n<br /><br />\nThe salt supplied is used as the salt to the derived key as well as the key to the \nsupplied HMAC. The salt should be at least 8 bytes long.\n<br /><br />\nIt is recommended that the number of hash iterations be at least 10000.\n"
  example: []
  syntax:
    content: public static string Create(OfflineWebApplicationConnection connection, string identityCode, string friendlyName, string securityQuestion, string applicationPatientId, PasswordProtectedPackage connectPackage)
    content.vb: Public Shared Function Create(connection As OfflineWebApplicationConnection, identityCode As String, friendlyName As String, securityQuestion As String, applicationPatientId As String, connectPackage As PasswordProtectedPackage) As String
    parameters:
    - id: connection
      type: Microsoft.Health.Web.OfflineWebApplicationConnection
      description: "\nThe application connection to HealthVault. The application ID in the connection is used\nwhen making the patient connection.\n"
    - id: identityCode
      type: System.String
      description: "\nA package identity token previously obtained from <xref href=\"Microsoft.Health.Package.ConnectPackage.AllocatePackageId(Microsoft.Health.Web.OfflineWebApplicationConnection)\" data-throw-if-not-resolved=\"false\"></xref>.  \n"
    - id: friendlyName
      type: System.String
      description: "\nA friendly name for the patient connection which will be shown to the user when they\ngo to HealthVault Shell to validate the connection.\n"
    - id: securityQuestion
      type: System.String
      description: "\nA question (usually provided by the patient) to which the patient must provide the \nanswer when they go to validate the connection in the \nHealthVault Shell.\n"
    - id: applicationPatientId
      type: System.String
      description: "\nThe application specific identifier for the user. This identifier is used to uniquely\nidentify the user in the application data storage whereas the HealthVault person ID is\nused to identify the person in HealthVault.\n"
    - id: connectPackage
      type: Microsoft.Health.ItemTypes.PasswordProtectedPackage
      description: "\nThe pending connect package that the user will add to his/her record. \nThis package's\n<xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref>'s <xref href=\"Microsoft.Health.BlobStore\" data-throw-if-not-resolved=\"false\"></xref> must be an encrypted \nblob of xml that represents a list of HealthRecordItems. This xml blob\nmust be a sequence of <thing></thing> elements, each wrapping the XML representation of a \nsingle HealthRecordItem. Each <thing></thing> element may be generated by calling \n<xref href=\"Microsoft.Health.HealthRecordItem.GetItemXml\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    return:
      type: System.String
      description: "\nA token that the application must give to the patient to use when validating the\nconnection request.\n"
  overload: Microsoft.Health.Package.ConnectPackage.Create*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> is <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">identityCode</span>, <span class=\"paramref\">friendlyName</span>, \n<span class=\"paramref\">securityQuestion</span>,\n<span class=\"paramref\">applicationPatientId</span>, or <span class=\"paramref\">connectPackage</span> is\n<strong>null</strong> or empty.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf an error occurs when contacting HealthVault.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Package.ConnectPackage.DeletePending(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String)
  commentId: M:Microsoft.Health.Package.ConnectPackage.DeletePending(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String)
  id: DeletePending(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String)
  parent: Microsoft.Health.Package.ConnectPackage
  langs:
  - csharp
  - vb
  name: DeletePending(OfflineWebApplicationConnection, String)
  nameWithType: ConnectPackage.DeletePending(OfflineWebApplicationConnection, String)
  fullName: Microsoft.Health.Package.ConnectPackage.DeletePending(Microsoft.Health.Web.OfflineWebApplicationConnection, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/PatientConnect/ConnectPackage.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DeletePending
    path: PatientConnect/ConnectPackage.cs
    startLine: 582
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Package
  summary: "\nDeletes all packages that have been created by the calling application \nfor the applicationPatientId and have not been accepted by the user.\n"
  example: []
  syntax:
    content: public static void DeletePending(OfflineWebApplicationConnection connection, string applicationPatientId)
    content.vb: Public Shared Sub DeletePending(connection As OfflineWebApplicationConnection, applicationPatientId As String)
    parameters:
    - id: connection
      type: Microsoft.Health.Web.OfflineWebApplicationConnection
      description: "\nThe connection to HealthVault to use for this operation. \n"
    - id: applicationPatientId
      type: System.String
      description: "\nThe application specific user ID that was used to create the connection \nrequest.\n"
  overload: Microsoft.Health.Package.ConnectPackage.DeletePending*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> is <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">applicationPatientId</span> is <strong>null</strong> or empty.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf an error occurs when contacting HealthVault.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Package.ConnectPackage.DeletePendingForIdentityCode(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String)
  commentId: M:Microsoft.Health.Package.ConnectPackage.DeletePendingForIdentityCode(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String)
  id: DeletePendingForIdentityCode(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String)
  parent: Microsoft.Health.Package.ConnectPackage
  langs:
  - csharp
  - vb
  name: DeletePendingForIdentityCode(OfflineWebApplicationConnection, String)
  nameWithType: ConnectPackage.DeletePendingForIdentityCode(OfflineWebApplicationConnection, String)
  fullName: Microsoft.Health.Package.ConnectPackage.DeletePendingForIdentityCode(Microsoft.Health.Web.OfflineWebApplicationConnection, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/PatientConnect/ConnectPackage.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DeletePendingForIdentityCode
    path: PatientConnect/ConnectPackage.cs
    startLine: 616
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Package
  summary: "\nDeletes a single package that has been created by the calling application but has not been \naccepted by the user.\n"
  example: []
  syntax:
    content: public static void DeletePendingForIdentityCode(OfflineWebApplicationConnection connection, string identityCode)
    content.vb: Public Shared Sub DeletePendingForIdentityCode(connection As OfflineWebApplicationConnection, identityCode As String)
    parameters:
    - id: connection
      type: Microsoft.Health.Web.OfflineWebApplicationConnection
      description: "\nThe connection to HealthVault to use for this operation. \n"
    - id: identityCode
      type: System.String
      description: "\nThe unique token that identifies the package.\n"
  overload: Microsoft.Health.Package.ConnectPackage.DeletePendingForIdentityCode*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> is <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">identityCode</span> is <strong>null</strong> or empty.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf an error occurs when contacting HealthVault.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Package.ConnectPackage.UpdateApplicationPatientId(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String)
  commentId: M:Microsoft.Health.Package.ConnectPackage.UpdateApplicationPatientId(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String)
  id: UpdateApplicationPatientId(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String)
  parent: Microsoft.Health.Package.ConnectPackage
  langs:
  - csharp
  - vb
  name: UpdateApplicationPatientId(OfflineWebApplicationConnection, String, String)
  nameWithType: ConnectPackage.UpdateApplicationPatientId(OfflineWebApplicationConnection, String, String)
  fullName: Microsoft.Health.Package.ConnectPackage.UpdateApplicationPatientId(Microsoft.Health.Web.OfflineWebApplicationConnection, System.String, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/PatientConnect/ConnectPackage.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: UpdateApplicationPatientId
    path: PatientConnect/ConnectPackage.cs
    startLine: 654
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Package
  summary: "\nUpdates existing pending packages with a new application patient identifier.\n"
  example: []
  syntax:
    content: public static void UpdateApplicationPatientId(OfflineWebApplicationConnection connection, string oldApplicationPatientId, string newApplicationPatientId)
    content.vb: Public Shared Sub UpdateApplicationPatientId(connection As OfflineWebApplicationConnection, oldApplicationPatientId As String, newApplicationPatientId As String)
    parameters:
    - id: connection
      type: Microsoft.Health.Web.OfflineWebApplicationConnection
      description: "\nThe HealthVault connection to use for the operation.\n"
    - id: oldApplicationPatientId
      type: System.String
      description: "\nThe application patient identifier that was used to create the initial package.\n"
    - id: newApplicationPatientId
      type: System.String
      description: "\nThe new application patient identifier.\n"
  overload: Microsoft.Health.Package.ConnectPackage.UpdateApplicationPatientId*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> is <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">oldApplicationPatientId</span> or <span class=\"paramref\">newApplicationPatientId</span>\nis <strong>null</strong> or empty.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf an error occurs when contacting HealthVault.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Package.ConnectPackage.UpdateApplicationPatientIdForIdentityCode(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String)
  commentId: M:Microsoft.Health.Package.ConnectPackage.UpdateApplicationPatientIdForIdentityCode(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String)
  id: UpdateApplicationPatientIdForIdentityCode(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String)
  parent: Microsoft.Health.Package.ConnectPackage
  langs:
  - csharp
  - vb
  name: UpdateApplicationPatientIdForIdentityCode(OfflineWebApplicationConnection, String, String)
  nameWithType: ConnectPackage.UpdateApplicationPatientIdForIdentityCode(OfflineWebApplicationConnection, String, String)
  fullName: Microsoft.Health.Package.ConnectPackage.UpdateApplicationPatientIdForIdentityCode(Microsoft.Health.Web.OfflineWebApplicationConnection, System.String, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/PatientConnect/ConnectPackage.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: UpdateApplicationPatientIdForIdentityCode
    path: PatientConnect/ConnectPackage.cs
    startLine: 694
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Package
  summary: "\nUpdates an existing pending package with a new application patient identifier.\n"
  example: []
  syntax:
    content: public static void UpdateApplicationPatientIdForIdentityCode(OfflineWebApplicationConnection connection, string identityCode, string newApplicationPatientId)
    content.vb: Public Shared Sub UpdateApplicationPatientIdForIdentityCode(connection As OfflineWebApplicationConnection, identityCode As String, newApplicationPatientId As String)
    parameters:
    - id: connection
      type: Microsoft.Health.Web.OfflineWebApplicationConnection
      description: "\nThe HealthVault connection to use for the operation.\n"
    - id: identityCode
      type: System.String
      description: "\nThe unique token that identifies the package.\n"
    - id: newApplicationPatientId
      type: System.String
      description: "\nThe new application patient identifier.\n"
  overload: Microsoft.Health.Package.ConnectPackage.UpdateApplicationPatientIdForIdentityCode*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> is <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">newApplicationPatientId</span>\nis <strong>null</strong> or empty.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf an error occurs when contacting HealthVault.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Package.ConnectPackage.AllocatePackageId(Microsoft.Health.Web.OfflineWebApplicationConnection)
  commentId: M:Microsoft.Health.Package.ConnectPackage.AllocatePackageId(Microsoft.Health.Web.OfflineWebApplicationConnection)
  id: AllocatePackageId(Microsoft.Health.Web.OfflineWebApplicationConnection)
  parent: Microsoft.Health.Package.ConnectPackage
  langs:
  - csharp
  - vb
  name: AllocatePackageId(OfflineWebApplicationConnection)
  nameWithType: ConnectPackage.AllocatePackageId(OfflineWebApplicationConnection)
  fullName: Microsoft.Health.Package.ConnectPackage.AllocatePackageId(Microsoft.Health.Web.OfflineWebApplicationConnection)
  type: Method
  source:
    remote:
      path: Microsoft.Health/PatientConnect/ConnectPackage.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: AllocatePackageId
    path: PatientConnect/ConnectPackage.cs
    startLine: 739
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Package
  summary: "\nAllocates a package ID within HealthVault and returns it.\n"
  remarks: "\n<p>The package ID is allocated as a place holder for information that \nis identifiable but not yet available through the HealthVault service.\nThe returned package ID token should be stored or given to a patient, \nthen used in a call to <xref href=\"Microsoft.Health.Package.ConnectPackage.Create(Microsoft.Health.Web.OfflineWebApplicationConnection%2cSystem.String%2cSystem.String%2cSystem.String%2cMicrosoft.Health.ItemTypes.PasswordProtectedPackage)\" data-throw-if-not-resolved=\"false\"></xref>\nto send the package data to the HealthVault service.</p>\n<p>The package ID is not a GUID.  It uses a shorter format that is more\nconvenient for offline delivery and manual data entry.  The HealthVault \nservice guarantees that each package ID is unique for the lifetime of the \npackage.  Once the package has been accepted by the patient using the \nHealthVault Shell, or explicitly deleted using the API, the package ID is \ndeallocated and may be reused.</p>\n"
  example: []
  syntax:
    content: public static string AllocatePackageId(OfflineWebApplicationConnection connection)
    content.vb: Public Shared Function AllocatePackageId(connection As OfflineWebApplicationConnection) As String
    parameters:
    - id: connection
      type: Microsoft.Health.Web.OfflineWebApplicationConnection
      description: "\nThe HealthVault connection to use for the operation.\n"
    return:
      type: System.String
      description: "\nA token that the application must give to the patient to use when validating the\nconnection request.\n"
  overload: Microsoft.Health.Package.ConnectPackage.AllocatePackageId*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> is <strong>null</strong>.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf an error occurs when contacting HealthVault.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Health.Package
  commentId: N:Microsoft.Health.Package
  isExternal: false
  name: Microsoft.Health.Package
  nameWithType: Microsoft.Health.Package
  fullName: Microsoft.Health.Package
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Package.ConnectPackage.Create(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,Microsoft.Health.ItemTypes.PasswordProtectedPackage)
  commentId: M:Microsoft.Health.Package.ConnectPackage.Create(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,Microsoft.Health.ItemTypes.PasswordProtectedPackage)
- uid: System.Security.Cryptography.Rfc2898DeriveBytes
  commentId: T:System.Security.Cryptography.Rfc2898DeriveBytes
- uid: System.String.ToLowerInvariant
  commentId: M:System.String.ToLowerInvariant
- uid: Microsoft.Health.Package.ConnectPackage.Create*
  commentId: Overload:Microsoft.Health.Package.ConnectPackage.Create
  isExternal: false
  name: Create
  nameWithType: ConnectPackage.Create
  fullName: Microsoft.Health.Package.ConnectPackage.Create
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
- uid: System.NotSupportedException
  commentId: T:System.NotSupportedException
- uid: Microsoft.Health.HealthServiceException
  commentId: T:Microsoft.Health.HealthServiceException
  parent: Microsoft.Health
  isExternal: false
  name: HealthServiceException
  nameWithType: HealthServiceException
  fullName: Microsoft.Health.HealthServiceException
- uid: Microsoft.Health.Web.OfflineWebApplicationConnection
  commentId: T:Microsoft.Health.Web.OfflineWebApplicationConnection
  parent: Microsoft.Health.Web
  isExternal: false
  name: OfflineWebApplicationConnection
  nameWithType: OfflineWebApplicationConnection
  fullName: Microsoft.Health.Web.OfflineWebApplicationConnection
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem}
  commentId: T:System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<HealthRecordItem>
  nameWithType: IList<HealthRecordItem>
  fullName: System.Collections.Generic.IList<Microsoft.Health.HealthRecordItem>
  nameWithType.vb: IList(Of HealthRecordItem)
  fullName.vb: System.Collections.Generic.IList(Of Microsoft.Health.HealthRecordItem)
  name.vb: IList(Of HealthRecordItem)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: Microsoft.Health.Web
  commentId: N:Microsoft.Health.Web
  isExternal: false
  name: Microsoft.Health.Web
  nameWithType: Microsoft.Health.Web
  fullName: Microsoft.Health.Web
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Health.Package.ConnectPackageCreationParameters
  commentId: T:Microsoft.Health.Package.ConnectPackageCreationParameters
  parent: Microsoft.Health.Package
  isExternal: false
  name: ConnectPackageCreationParameters
  nameWithType: ConnectPackageCreationParameters
  fullName: Microsoft.Health.Package.ConnectPackageCreationParameters
- uid: Microsoft.Health.Package.ConnectPackage.CreatePackage*
  commentId: Overload:Microsoft.Health.Package.ConnectPackage.CreatePackage
  isExternal: false
  name: CreatePackage
  nameWithType: ConnectPackage.CreatePackage
  fullName: Microsoft.Health.Package.ConnectPackage.CreatePackage
- uid: Microsoft.Health.Blob
  commentId: T:Microsoft.Health.Blob
  parent: Microsoft.Health
  isExternal: false
  name: Blob
  nameWithType: Blob
  fullName: Microsoft.Health.Blob
- uid: Microsoft.Health.HealthRecordItem.GetItemXml
  commentId: M:Microsoft.Health.HealthRecordItem.GetItemXml
  parent: Microsoft.Health.HealthRecordItem
  isExternal: false
  name: GetItemXml()
  nameWithType: HealthRecordItem.GetItemXml()
  fullName: Microsoft.Health.HealthRecordItem.GetItemXml()
  spec.csharp:
  - uid: Microsoft.Health.HealthRecordItem.GetItemXml
    name: GetItemXml
    nameWithType: HealthRecordItem.GetItemXml
    fullName: Microsoft.Health.HealthRecordItem.GetItemXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.HealthRecordItem.GetItemXml
    name: GetItemXml
    nameWithType: HealthRecordItem.GetItemXml
    fullName: Microsoft.Health.HealthRecordItem.GetItemXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ItemTypes.PasswordProtectedPackage
  commentId: T:Microsoft.Health.ItemTypes.PasswordProtectedPackage
  parent: Microsoft.Health.ItemTypes
  isExternal: false
  name: PasswordProtectedPackage
  nameWithType: PasswordProtectedPackage
  fullName: Microsoft.Health.ItemTypes.PasswordProtectedPackage
- uid: Microsoft.Health.HealthRecordItem
  commentId: T:Microsoft.Health.HealthRecordItem
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordItem
  nameWithType: HealthRecordItem
  fullName: Microsoft.Health.HealthRecordItem
- uid: Microsoft.Health.ItemTypes
  commentId: N:Microsoft.Health.ItemTypes
  isExternal: false
  name: Microsoft.Health.ItemTypes
  nameWithType: Microsoft.Health.ItemTypes
  fullName: Microsoft.Health.ItemTypes
- uid: Microsoft.Health.Package.ConnectPackage.AllocatePackageId(Microsoft.Health.Web.OfflineWebApplicationConnection)
  commentId: M:Microsoft.Health.Package.ConnectPackage.AllocatePackageId(Microsoft.Health.Web.OfflineWebApplicationConnection)
- uid: Microsoft.Health.BlobStore
  commentId: T:Microsoft.Health.BlobStore
  parent: Microsoft.Health
  isExternal: false
  name: BlobStore
  nameWithType: BlobStore
  fullName: Microsoft.Health.BlobStore
- uid: Microsoft.Health.Package.ConnectPackage.DeletePending*
  commentId: Overload:Microsoft.Health.Package.ConnectPackage.DeletePending
  isExternal: false
  name: DeletePending
  nameWithType: ConnectPackage.DeletePending
  fullName: Microsoft.Health.Package.ConnectPackage.DeletePending
- uid: Microsoft.Health.Package.ConnectPackage.DeletePendingForIdentityCode*
  commentId: Overload:Microsoft.Health.Package.ConnectPackage.DeletePendingForIdentityCode
  isExternal: false
  name: DeletePendingForIdentityCode
  nameWithType: ConnectPackage.DeletePendingForIdentityCode
  fullName: Microsoft.Health.Package.ConnectPackage.DeletePendingForIdentityCode
- uid: Microsoft.Health.Package.ConnectPackage.UpdateApplicationPatientId*
  commentId: Overload:Microsoft.Health.Package.ConnectPackage.UpdateApplicationPatientId
  isExternal: false
  name: UpdateApplicationPatientId
  nameWithType: ConnectPackage.UpdateApplicationPatientId
  fullName: Microsoft.Health.Package.ConnectPackage.UpdateApplicationPatientId
- uid: Microsoft.Health.Package.ConnectPackage.UpdateApplicationPatientIdForIdentityCode*
  commentId: Overload:Microsoft.Health.Package.ConnectPackage.UpdateApplicationPatientIdForIdentityCode
  isExternal: false
  name: UpdateApplicationPatientIdForIdentityCode
  nameWithType: ConnectPackage.UpdateApplicationPatientIdForIdentityCode
  fullName: Microsoft.Health.Package.ConnectPackage.UpdateApplicationPatientIdForIdentityCode
- uid: Microsoft.Health.Package.ConnectPackage.AllocatePackageId*
  commentId: Overload:Microsoft.Health.Package.ConnectPackage.AllocatePackageId
  isExternal: false
  name: AllocatePackageId
  nameWithType: ConnectPackage.AllocatePackageId
  fullName: Microsoft.Health.Package.ConnectPackage.AllocatePackageId
