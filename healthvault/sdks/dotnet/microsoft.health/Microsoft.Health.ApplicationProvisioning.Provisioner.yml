### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.ApplicationProvisioning.Provisioner
  commentId: T:Microsoft.Health.ApplicationProvisioning.Provisioner
  id: Provisioner
  parent: Microsoft.Health.ApplicationProvisioning
  children:
  - Microsoft.Health.ApplicationProvisioning.Provisioner.AddApplication(Microsoft.Health.Web.OfflineWebApplicationConnection,Microsoft.Health.ApplicationInfo)
  - Microsoft.Health.ApplicationProvisioning.Provisioner.GetApplication(Microsoft.Health.Web.OfflineWebApplicationConnection,System.Guid)
  langs:
  - csharp
  - vb
  name: Provisioner
  nameWithType: Provisioner
  fullName: Microsoft.Health.ApplicationProvisioning.Provisioner
  type: Class
  source:
    remote:
      path: Microsoft.Health/ApplicationProvisioning/Provisioner.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Provisioner
    path: ApplicationProvisioning/Provisioner.cs
    startLine: 25
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.ApplicationProvisioning
  summary: "\nAn application provisioning application can use the method of this class to \nprovision and update child applications.\n"
  remarks: "\nHealthVault allows certain types of application to be used to instantiate, configure, and\nupdate applications that are related to it.  For example, one implementation of an application\nmay be used and installed as many different application instances. To allow for these \nseparate applications to be instantiated HealthVault enables a \"parent\" application to\ntell HealthVault about a new installation of the application and provide certain configuration\nvalues for it.  That application will then be able access HealthVault with a unique \napplication identifier.\n"
  example: []
  syntax:
    content: public static class Provisioner
    content.vb: Public Module Provisioner
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Health.ApplicationProvisioning.Provisioner.GetApplication(Microsoft.Health.Web.OfflineWebApplicationConnection,System.Guid)
  commentId: M:Microsoft.Health.ApplicationProvisioning.Provisioner.GetApplication(Microsoft.Health.Web.OfflineWebApplicationConnection,System.Guid)
  id: GetApplication(Microsoft.Health.Web.OfflineWebApplicationConnection,System.Guid)
  parent: Microsoft.Health.ApplicationProvisioning.Provisioner
  langs:
  - csharp
  - vb
  name: GetApplication(OfflineWebApplicationConnection, Guid)
  nameWithType: Provisioner.GetApplication(OfflineWebApplicationConnection, Guid)
  fullName: Microsoft.Health.ApplicationProvisioning.Provisioner.GetApplication(Microsoft.Health.Web.OfflineWebApplicationConnection, System.Guid)
  type: Method
  source:
    remote:
      path: Microsoft.Health/ApplicationProvisioning/Provisioner.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetApplication
    path: ApplicationProvisioning/Provisioner.cs
    startLine: 62
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.ApplicationProvisioning
  summary: "\nGets the configuration information for the specified child application ID.\n"
  example: []
  syntax:
    content: public static ApplicationInfo GetApplication(OfflineWebApplicationConnection connection, Guid childApplicationId)
    content.vb: Public Shared Function GetApplication(connection As OfflineWebApplicationConnection, childApplicationId As Guid) As ApplicationInfo
    parameters:
    - id: connection
      type: Microsoft.Health.Web.OfflineWebApplicationConnection
      description: "\nThe connection to use to get the application information.\n"
    - id: childApplicationId
      type: System.Guid
      description: "\nThe unique application identifier for the child application to get the configuration\ninformation for.\n"
    return:
      type: Microsoft.Health.ApplicationInfo
      description: "\nConfiguration information for the specified child application.\n"
  overload: Microsoft.Health.ApplicationProvisioning.Provisioner.GetApplication*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> is <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">childApplicationId</span> is <xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  - type: Microsoft.Health.HealthServiceAccessDeniedException
    commentId: T:Microsoft.Health.HealthServiceAccessDeniedException
    description: "\nIf the application specified in the <span class=\"paramref\">connection</span> is not a master\napplication, or if <span class=\"paramref\">childApplicationId</span> does not identify a child\napplication of the calling application.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf there is an error when the HealthVault service is called.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.ApplicationProvisioning.Provisioner.AddApplication(Microsoft.Health.Web.OfflineWebApplicationConnection,Microsoft.Health.ApplicationInfo)
  commentId: M:Microsoft.Health.ApplicationProvisioning.Provisioner.AddApplication(Microsoft.Health.Web.OfflineWebApplicationConnection,Microsoft.Health.ApplicationInfo)
  id: AddApplication(Microsoft.Health.Web.OfflineWebApplicationConnection,Microsoft.Health.ApplicationInfo)
  parent: Microsoft.Health.ApplicationProvisioning.Provisioner
  langs:
  - csharp
  - vb
  name: AddApplication(OfflineWebApplicationConnection, ApplicationInfo)
  nameWithType: Provisioner.AddApplication(OfflineWebApplicationConnection, ApplicationInfo)
  fullName: Microsoft.Health.ApplicationProvisioning.Provisioner.AddApplication(Microsoft.Health.Web.OfflineWebApplicationConnection, Microsoft.Health.ApplicationInfo)
  type: Method
  source:
    remote:
      path: Microsoft.Health/ApplicationProvisioning/Provisioner.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: AddApplication
    path: ApplicationProvisioning/Provisioner.cs
    startLine: 102
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.ApplicationProvisioning
  summary: "\nAdds a HealthVault application instance for a \"child\" application of the calling\napplication.\n"
  example: []
  syntax:
    content: public static Guid AddApplication(OfflineWebApplicationConnection connection, ApplicationInfo applicationConfigurationInformation)
    content.vb: Public Shared Function AddApplication(connection As OfflineWebApplicationConnection, applicationConfigurationInformation As ApplicationInfo) As Guid
    parameters:
    - id: connection
      type: Microsoft.Health.Web.OfflineWebApplicationConnection
      description: "\nA HealthVault connection instantiated as the provisioning application.\n"
    - id: applicationConfigurationInformation
      type: Microsoft.Health.ApplicationInfo
      description: "\nConfiguration information about the application being provisioned.\n"
    return:
      type: System.Guid
      description: "\nThe new application identifier for the new application provided by HealthVault.\n"
  overload: Microsoft.Health.ApplicationProvisioning.Provisioner.AddApplication*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> or <span class=\"paramref\">applicationConfigurationInformation</span>\nis <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <xref href=\"Microsoft.Health.ApplicationInfo.Name\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"Microsoft.Health.ApplicationInfo.PublicKeys\" data-throw-if-not-resolved=\"false\"></xref>,\n<xref href=\"Microsoft.Health.ApplicationInfo.OfflineBaseAuthorizations\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"Microsoft.Health.ApplicationInfo.Description\" data-throw-if-not-resolved=\"false\"></xref>,\n<xref href=\"Microsoft.Health.ApplicationInfo.AuthorizationReason\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"Microsoft.Health.ApplicationInfo.LargeLogo\" data-throw-if-not-resolved=\"false\"></xref> \nis not specified.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf there is an error when the HealthVault service is called.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Health.ApplicationProvisioning
  commentId: N:Microsoft.Health.ApplicationProvisioning
  isExternal: false
  name: Microsoft.Health.ApplicationProvisioning
  nameWithType: Microsoft.Health.ApplicationProvisioning
  fullName: Microsoft.Health.ApplicationProvisioning
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Guid.Empty
  commentId: F:System.Guid.Empty
- uid: Microsoft.Health.ApplicationProvisioning.Provisioner.GetApplication*
  commentId: Overload:Microsoft.Health.ApplicationProvisioning.Provisioner.GetApplication
  isExternal: false
  name: GetApplication
  nameWithType: Provisioner.GetApplication
  fullName: Microsoft.Health.ApplicationProvisioning.Provisioner.GetApplication
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: Microsoft.Health.HealthServiceAccessDeniedException
  commentId: T:Microsoft.Health.HealthServiceAccessDeniedException
  isExternal: false
  name: HealthServiceAccessDeniedException
  nameWithType: HealthServiceAccessDeniedException
  fullName: Microsoft.Health.HealthServiceAccessDeniedException
- uid: Microsoft.Health.HealthServiceException
  commentId: T:Microsoft.Health.HealthServiceException
  parent: Microsoft.Health
  isExternal: false
  name: HealthServiceException
  nameWithType: HealthServiceException
  fullName: Microsoft.Health.HealthServiceException
- uid: Microsoft.Health.Web.OfflineWebApplicationConnection
  commentId: T:Microsoft.Health.Web.OfflineWebApplicationConnection
  parent: Microsoft.Health.Web
  isExternal: false
  name: OfflineWebApplicationConnection
  nameWithType: OfflineWebApplicationConnection
  fullName: Microsoft.Health.Web.OfflineWebApplicationConnection
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: Microsoft.Health.ApplicationInfo
  commentId: T:Microsoft.Health.ApplicationInfo
  parent: Microsoft.Health
  isExternal: false
  name: ApplicationInfo
  nameWithType: ApplicationInfo
  fullName: Microsoft.Health.ApplicationInfo
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: Microsoft.Health.Web
  commentId: N:Microsoft.Health.Web
  isExternal: false
  name: Microsoft.Health.Web
  nameWithType: Microsoft.Health.Web
  fullName: Microsoft.Health.Web
- uid: Microsoft.Health.ApplicationInfo.Name
  commentId: P:Microsoft.Health.ApplicationInfo.Name
- uid: Microsoft.Health.ApplicationInfo.PublicKeys
  commentId: P:Microsoft.Health.ApplicationInfo.PublicKeys
- uid: Microsoft.Health.ApplicationInfo.OfflineBaseAuthorizations
  commentId: P:Microsoft.Health.ApplicationInfo.OfflineBaseAuthorizations
- uid: Microsoft.Health.ApplicationInfo.Description
  commentId: P:Microsoft.Health.ApplicationInfo.Description
- uid: Microsoft.Health.ApplicationInfo.AuthorizationReason
  commentId: P:Microsoft.Health.ApplicationInfo.AuthorizationReason
- uid: Microsoft.Health.ApplicationInfo.LargeLogo
  commentId: P:Microsoft.Health.ApplicationInfo.LargeLogo
- uid: Microsoft.Health.ApplicationProvisioning.Provisioner.AddApplication*
  commentId: Overload:Microsoft.Health.ApplicationProvisioning.Provisioner.AddApplication
  isExternal: false
  name: AddApplication
  nameWithType: Provisioner.AddApplication
  fullName: Microsoft.Health.ApplicationProvisioning.Provisioner.AddApplication
