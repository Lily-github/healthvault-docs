### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.AuthorizationRule
  commentId: T:Microsoft.Health.AuthorizationRule
  id: AuthorizationRule
  parent: Microsoft.Health
  children:
  - Microsoft.Health.AuthorizationRule.#ctor(Microsoft.Health.HealthRecordItemPermissions)
  - Microsoft.Health.AuthorizationRule.#ctor(Microsoft.Health.HealthRecordItemPermissions,System.Collections.Generic.IList{Microsoft.Health.AuthorizationSetDefinition},System.Collections.Generic.IList{Microsoft.Health.AuthorizationSetDefinition})
  - Microsoft.Health.AuthorizationRule.#ctor(System.String,System.String,Microsoft.Health.HealthRecordItemPermissions,System.Collections.Generic.IList{Microsoft.Health.AuthorizationSetDefinition},System.Collections.Generic.IList{Microsoft.Health.AuthorizationSetDefinition},System.Boolean,Microsoft.Health.AuthorizationRuleDisplayFlags)
  - Microsoft.Health.AuthorizationRule.CreateFromXml(System.Xml.XPath.XPathNavigator)
  - Microsoft.Health.AuthorizationRule.CultureSpecificReasons
  - Microsoft.Health.AuthorizationRule.DisplayFlags
  - Microsoft.Health.AuthorizationRule.ExceptionSets
  - Microsoft.Health.AuthorizationRule.GetBase64EncodedRulesXml(System.Collections.Generic.IList{Microsoft.Health.AuthorizationRule})
  - Microsoft.Health.AuthorizationRule.GetRulesXml(System.Collections.Generic.IList{Microsoft.Health.AuthorizationRule})
  - Microsoft.Health.AuthorizationRule.GetXml
  - Microsoft.Health.AuthorizationRule.IsOptional
  - Microsoft.Health.AuthorizationRule.Name
  - Microsoft.Health.AuthorizationRule.Permissions
  - Microsoft.Health.AuthorizationRule.Reason
  - Microsoft.Health.AuthorizationRule.TargetSets
  - Microsoft.Health.AuthorizationRule.ToString
  langs:
  - csharp
  - vb
  name: AuthorizationRule
  nameWithType: AuthorizationRule
  fullName: Microsoft.Health.AuthorizationRule
  type: Class
  source:
    remote:
      path: Microsoft.Health/AuthorizationRule.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: AuthorizationRule
    path: AuthorizationRule.cs
    startLine: 29
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nThis class defines an authorization rule in the HealthVault service.\n"
  remarks: "\nAuthorization rules are applied to authorized records to state what\npermissions the person or group being authorized has on the data in\nthat record. See the HealthVault Developer's Guide for more information\non how authorization works in HealthVault.\n\nThis rule does not necessarily represent a rule that is present\non the server. It can be used to generate the necessary XML when \nusing the Shell pages to authorize records.\n"
  example: []
  syntax:
    content: public class AuthorizationRule
    content.vb: Public Class AuthorizationRule
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.AuthorizationRule.#ctor(Microsoft.Health.HealthRecordItemPermissions)
  commentId: M:Microsoft.Health.AuthorizationRule.#ctor(Microsoft.Health.HealthRecordItemPermissions)
  id: '#ctor(Microsoft.Health.HealthRecordItemPermissions)'
  parent: Microsoft.Health.AuthorizationRule
  langs:
  - csharp
  - vb
  name: AuthorizationRule(HealthRecordItemPermissions)
  nameWithType: AuthorizationRule.AuthorizationRule(HealthRecordItemPermissions)
  fullName: Microsoft.Health.AuthorizationRule.AuthorizationRule(Microsoft.Health.HealthRecordItemPermissions)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health/AuthorizationRule.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: AuthorizationRule.cs
    startLine: 45
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nCreates a new instance of the <xref href=\"Microsoft.Health.AuthorizationRule\" data-throw-if-not-resolved=\"false\"></xref> class\nwith the specified permissions.\n"
  example: []
  syntax:
    content: public AuthorizationRule(HealthRecordItemPermissions permissions)
    content.vb: Public Sub New(permissions As HealthRecordItemPermissions)
    parameters:
    - id: permissions
      type: Microsoft.Health.HealthRecordItemPermissions
      description: "\nThe permissions granted.\n"
  overload: Microsoft.Health.AuthorizationRule.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">permissions</span> parameter is \n<xref href=\"Microsoft.Health.HealthRecordItemPermissions.None\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.AuthorizationRule.#ctor(Microsoft.Health.HealthRecordItemPermissions,System.Collections.Generic.IList{Microsoft.Health.AuthorizationSetDefinition},System.Collections.Generic.IList{Microsoft.Health.AuthorizationSetDefinition})
  commentId: M:Microsoft.Health.AuthorizationRule.#ctor(Microsoft.Health.HealthRecordItemPermissions,System.Collections.Generic.IList{Microsoft.Health.AuthorizationSetDefinition},System.Collections.Generic.IList{Microsoft.Health.AuthorizationSetDefinition})
  id: '#ctor(Microsoft.Health.HealthRecordItemPermissions,System.Collections.Generic.IList{Microsoft.Health.AuthorizationSetDefinition},System.Collections.Generic.IList{Microsoft.Health.AuthorizationSetDefinition})'
  parent: Microsoft.Health.AuthorizationRule
  langs:
  - csharp
  - vb
  name: AuthorizationRule(HealthRecordItemPermissions, IList<AuthorizationSetDefinition>, IList<AuthorizationSetDefinition>)
  nameWithType: AuthorizationRule.AuthorizationRule(HealthRecordItemPermissions, IList<AuthorizationSetDefinition>, IList<AuthorizationSetDefinition>)
  fullName: Microsoft.Health.AuthorizationRule.AuthorizationRule(Microsoft.Health.HealthRecordItemPermissions, System.Collections.Generic.IList<Microsoft.Health.AuthorizationSetDefinition>, System.Collections.Generic.IList<Microsoft.Health.AuthorizationSetDefinition>)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health/AuthorizationRule.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: AuthorizationRule.cs
    startLine: 75
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nCreates a new instance of the <xref href=\"Microsoft.Health.AuthorizationRule\" data-throw-if-not-resolved=\"false\"></xref> class \nwith the specified permissions, target and exception sets.\n"
  example: []
  syntax:
    content: public AuthorizationRule(HealthRecordItemPermissions permissions, IList<AuthorizationSetDefinition> targetSets, IList<AuthorizationSetDefinition> exceptionSets)
    content.vb: Public Sub New(permissions As HealthRecordItemPermissions, targetSets As IList(Of AuthorizationSetDefinition), exceptionSets As IList(Of AuthorizationSetDefinition))
    parameters:
    - id: permissions
      type: Microsoft.Health.HealthRecordItemPermissions
      description: "\nThe permissions granted. \n"
    - id: targetSets
      type: System.Collections.Generic.IList{Microsoft.Health.AuthorizationSetDefinition}
      description: "\nThe set or sets of health record items to which this rule applies.\n"
    - id: exceptionSets
      type: System.Collections.Generic.IList{Microsoft.Health.AuthorizationSetDefinition}
      description: "\nThe set or sets of health record items to which this rule does not \napply even if contained in a set defined by \n<span class=\"paramref\">targetSets</span>.\n"
  overload: Microsoft.Health.AuthorizationRule.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">permissions</span> parameter is \n<xref href=\"Microsoft.Health.HealthRecordItemPermissions.None\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  nameWithType.vb: AuthorizationRule.AuthorizationRule(HealthRecordItemPermissions, IList(Of AuthorizationSetDefinition), IList(Of AuthorizationSetDefinition))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.AuthorizationRule.AuthorizationRule(Microsoft.Health.HealthRecordItemPermissions, System.Collections.Generic.IList(Of Microsoft.Health.AuthorizationSetDefinition), System.Collections.Generic.IList(Of Microsoft.Health.AuthorizationSetDefinition))
  name.vb: AuthorizationRule(HealthRecordItemPermissions, IList(Of AuthorizationSetDefinition), IList(Of AuthorizationSetDefinition))
- uid: Microsoft.Health.AuthorizationRule.#ctor(System.String,System.String,Microsoft.Health.HealthRecordItemPermissions,System.Collections.Generic.IList{Microsoft.Health.AuthorizationSetDefinition},System.Collections.Generic.IList{Microsoft.Health.AuthorizationSetDefinition},System.Boolean,Microsoft.Health.AuthorizationRuleDisplayFlags)
  commentId: M:Microsoft.Health.AuthorizationRule.#ctor(System.String,System.String,Microsoft.Health.HealthRecordItemPermissions,System.Collections.Generic.IList{Microsoft.Health.AuthorizationSetDefinition},System.Collections.Generic.IList{Microsoft.Health.AuthorizationSetDefinition},System.Boolean,Microsoft.Health.AuthorizationRuleDisplayFlags)
  id: '#ctor(System.String,System.String,Microsoft.Health.HealthRecordItemPermissions,System.Collections.Generic.IList{Microsoft.Health.AuthorizationSetDefinition},System.Collections.Generic.IList{Microsoft.Health.AuthorizationSetDefinition},System.Boolean,Microsoft.Health.AuthorizationRuleDisplayFlags)'
  parent: Microsoft.Health.AuthorizationRule
  langs:
  - csharp
  - vb
  name: AuthorizationRule(String, String, HealthRecordItemPermissions, IList<AuthorizationSetDefinition>, IList<AuthorizationSetDefinition>, Boolean, AuthorizationRuleDisplayFlags)
  nameWithType: AuthorizationRule.AuthorizationRule(String, String, HealthRecordItemPermissions, IList<AuthorizationSetDefinition>, IList<AuthorizationSetDefinition>, Boolean, AuthorizationRuleDisplayFlags)
  fullName: Microsoft.Health.AuthorizationRule.AuthorizationRule(System.String, System.String, Microsoft.Health.HealthRecordItemPermissions, System.Collections.Generic.IList<Microsoft.Health.AuthorizationSetDefinition>, System.Collections.Generic.IList<Microsoft.Health.AuthorizationSetDefinition>, System.Boolean, Microsoft.Health.AuthorizationRuleDisplayFlags)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health/AuthorizationRule.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: AuthorizationRule.cs
    startLine: 125
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nCreates a new instance of the <xref href=\"Microsoft.Health.AuthorizationRule\" data-throw-if-not-resolved=\"false\"></xref> class \nwith the specified name, reason, permissions, target, exception sets,\noptional and display flags.\n"
  example: []
  syntax:
    content: public AuthorizationRule(string name, string reason, HealthRecordItemPermissions permissions, IList<AuthorizationSetDefinition> targetSets, IList<AuthorizationSetDefinition> exceptionSets, bool isOptional, AuthorizationRuleDisplayFlags displayFlags)
    content.vb: Public Sub New(name As String, reason As String, permissions As HealthRecordItemPermissions, targetSets As IList(Of AuthorizationSetDefinition), exceptionSets As IList(Of AuthorizationSetDefinition), isOptional As Boolean, displayFlags As AuthorizationRuleDisplayFlags)
    parameters:
    - id: name
      type: System.String
      description: "\nThe name uniquely identifying this rule in a set\n"
    - id: reason
      type: System.String
      description: "\nThe reason why an application wants this access\n"
    - id: permissions
      type: Microsoft.Health.HealthRecordItemPermissions
      description: "\nThe permissions granted. \n"
    - id: targetSets
      type: System.Collections.Generic.IList{Microsoft.Health.AuthorizationSetDefinition}
      description: "\nThe set or sets of health record items to which this rule applies.\n"
    - id: exceptionSets
      type: System.Collections.Generic.IList{Microsoft.Health.AuthorizationSetDefinition}
      description: "\nThe set or sets of health record items to which this rule does not \napply even if contained in a set defined by \n<span class=\"paramref\">targetSets</span>.\n"
    - id: isOptional
      type: System.Boolean
      description: "\nFlag indicating whether or not this rule is optional\n"
    - id: displayFlags
      type: Microsoft.Health.AuthorizationRuleDisplayFlags
      description: "\nFlags controlling how to display this rule\n"
  overload: Microsoft.Health.AuthorizationRule.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">permissions</span> parameter is \n<xref href=\"Microsoft.Health.HealthRecordItemPermissions.None\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  nameWithType.vb: AuthorizationRule.AuthorizationRule(String, String, HealthRecordItemPermissions, IList(Of AuthorizationSetDefinition), IList(Of AuthorizationSetDefinition), Boolean, AuthorizationRuleDisplayFlags)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.AuthorizationRule.AuthorizationRule(System.String, System.String, Microsoft.Health.HealthRecordItemPermissions, System.Collections.Generic.IList(Of Microsoft.Health.AuthorizationSetDefinition), System.Collections.Generic.IList(Of Microsoft.Health.AuthorizationSetDefinition), System.Boolean, Microsoft.Health.AuthorizationRuleDisplayFlags)
  name.vb: AuthorizationRule(String, String, HealthRecordItemPermissions, IList(Of AuthorizationSetDefinition), IList(Of AuthorizationSetDefinition), Boolean, AuthorizationRuleDisplayFlags)
- uid: Microsoft.Health.AuthorizationRule.Name
  commentId: P:Microsoft.Health.AuthorizationRule.Name
  id: Name
  parent: Microsoft.Health.AuthorizationRule
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: AuthorizationRule.Name
  fullName: Microsoft.Health.AuthorizationRule.Name
  type: Property
  source:
    remote:
      path: Microsoft.Health/AuthorizationRule.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Name
    path: AuthorizationRule.cs
    startLine: 181
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the name uniquely identifying the rule within the rule set.\n"
  example: []
  syntax:
    content: public string Name { get; }
    content.vb: Public ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Health.AuthorizationRule.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.AuthorizationRule.IsOptional
  commentId: P:Microsoft.Health.AuthorizationRule.IsOptional
  id: IsOptional
  parent: Microsoft.Health.AuthorizationRule
  langs:
  - csharp
  - vb
  name: IsOptional
  nameWithType: AuthorizationRule.IsOptional
  fullName: Microsoft.Health.AuthorizationRule.IsOptional
  type: Property
  source:
    remote:
      path: Microsoft.Health/AuthorizationRule.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IsOptional
    path: AuthorizationRule.cs
    startLine: 195
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets a value indicating whether the authorization rule is optional\n"
  remarks: "\nOptional rules are not required for application authorization.\n"
  example: []
  syntax:
    content: public bool IsOptional { get; }
    content.vb: Public ReadOnly Property IsOptional As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.Health.AuthorizationRule.IsOptional*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.AuthorizationRule.Reason
  commentId: P:Microsoft.Health.AuthorizationRule.Reason
  id: Reason
  parent: Microsoft.Health.AuthorizationRule
  langs:
  - csharp
  - vb
  name: Reason
  nameWithType: AuthorizationRule.Reason
  fullName: Microsoft.Health.AuthorizationRule.Reason
  type: Property
  source:
    remote:
      path: Microsoft.Health/AuthorizationRule.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Reason
    path: AuthorizationRule.cs
    startLine: 205
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the reason the application wants the access represented by this rule.\n"
  example: []
  syntax:
    content: public string Reason { get; }
    content.vb: Public ReadOnly Property Reason As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Health.AuthorizationRule.Reason*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.AuthorizationRule.CultureSpecificReasons
  commentId: P:Microsoft.Health.AuthorizationRule.CultureSpecificReasons
  id: CultureSpecificReasons
  parent: Microsoft.Health.AuthorizationRule
  langs:
  - csharp
  - vb
  name: CultureSpecificReasons
  nameWithType: AuthorizationRule.CultureSpecificReasons
  fullName: Microsoft.Health.AuthorizationRule.CultureSpecificReasons
  type: Property
  source:
    remote:
      path: Microsoft.Health/AuthorizationRule.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CultureSpecificReasons
    path: AuthorizationRule.cs
    startLine: 220
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets a dictionary of language specifiers and reasons.\n"
  remarks: "\nEach entry is a localized version of the same reason.\n"
  example: []
  syntax:
    content: public CultureSpecificStringDictionary CultureSpecificReasons { get; }
    content.vb: Public ReadOnly Property CultureSpecificReasons As CultureSpecificStringDictionary
    parameters: []
    return:
      type: Microsoft.Health.CultureSpecificStringDictionary
  overload: Microsoft.Health.AuthorizationRule.CultureSpecificReasons*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.AuthorizationRule.DisplayFlags
  commentId: P:Microsoft.Health.AuthorizationRule.DisplayFlags
  id: DisplayFlags
  parent: Microsoft.Health.AuthorizationRule
  langs:
  - csharp
  - vb
  name: DisplayFlags
  nameWithType: AuthorizationRule.DisplayFlags
  fullName: Microsoft.Health.AuthorizationRule.DisplayFlags
  type: Property
  source:
    remote:
      path: Microsoft.Health/AuthorizationRule.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DisplayFlags
    path: AuthorizationRule.cs
    startLine: 231
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets flags controlling display behavior of rules.\n"
  example: []
  syntax:
    content: public AuthorizationRuleDisplayFlags DisplayFlags { get; }
    content.vb: Public ReadOnly Property DisplayFlags As AuthorizationRuleDisplayFlags
    parameters: []
    return:
      type: Microsoft.Health.AuthorizationRuleDisplayFlags
  overload: Microsoft.Health.AuthorizationRule.DisplayFlags*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.AuthorizationRule.Permissions
  commentId: P:Microsoft.Health.AuthorizationRule.Permissions
  id: Permissions
  parent: Microsoft.Health.AuthorizationRule
  langs:
  - csharp
  - vb
  name: Permissions
  nameWithType: AuthorizationRule.Permissions
  fullName: Microsoft.Health.AuthorizationRule.Permissions
  type: Property
  source:
    remote:
      path: Microsoft.Health/AuthorizationRule.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Permissions
    path: AuthorizationRule.cs
    startLine: 246
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the permissions that the rule grants.\n"
  example: []
  syntax:
    content: public HealthRecordItemPermissions Permissions { get; }
    content.vb: Public ReadOnly Property Permissions As HealthRecordItemPermissions
    parameters: []
    return:
      type: Microsoft.Health.HealthRecordItemPermissions
      description: "\nAn instance of <xref href=\"Microsoft.Health.HealthRecordItemPermissions\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  overload: Microsoft.Health.AuthorizationRule.Permissions*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.AuthorizationRule.TargetSets
  commentId: P:Microsoft.Health.AuthorizationRule.TargetSets
  id: TargetSets
  parent: Microsoft.Health.AuthorizationRule
  langs:
  - csharp
  - vb
  name: TargetSets
  nameWithType: AuthorizationRule.TargetSets
  fullName: Microsoft.Health.AuthorizationRule.TargetSets
  type: Property
  source:
    remote:
      path: Microsoft.Health/AuthorizationRule.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: TargetSets
    path: AuthorizationRule.cs
    startLine: 263
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the sets of health record items to which this rule \ngrants permission.\n"
  example: []
  syntax:
    content: public ReadOnlyCollection<AuthorizationSetDefinition> TargetSets { get; }
    content.vb: Public ReadOnly Property TargetSets As ReadOnlyCollection(Of AuthorizationSetDefinition)
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Health.AuthorizationSetDefinition}
      description: "\nA read-only collection of type <xref href=\"Microsoft.Health.AuthorizationSetDefinition\" data-throw-if-not-resolved=\"false\"></xref>\nrepresenting the items.\n"
  overload: Microsoft.Health.AuthorizationRule.TargetSets*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.AuthorizationRule.ExceptionSets
  commentId: P:Microsoft.Health.AuthorizationRule.ExceptionSets
  id: ExceptionSets
  parent: Microsoft.Health.AuthorizationRule
  langs:
  - csharp
  - vb
  name: ExceptionSets
  nameWithType: AuthorizationRule.ExceptionSets
  fullName: Microsoft.Health.AuthorizationRule.ExceptionSets
  type: Property
  source:
    remote:
      path: Microsoft.Health/AuthorizationRule.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ExceptionSets
    path: AuthorizationRule.cs
    startLine: 279
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the sets of health record items that are excluded by this \nrule even if they are part of the <xref href=\"Microsoft.Health.AuthorizationRule.TargetSets\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ReadOnlyCollection<AuthorizationSetDefinition> ExceptionSets { get; }
    content.vb: Public ReadOnly Property ExceptionSets As ReadOnlyCollection(Of AuthorizationSetDefinition)
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Health.AuthorizationSetDefinition}
      description: "\nA read-only collection of type <xref href=\"Microsoft.Health.AuthorizationSetDefinition\" data-throw-if-not-resolved=\"false\"></xref>\nrepresenting the items.\n"
  overload: Microsoft.Health.AuthorizationRule.ExceptionSets*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.AuthorizationRule.ToString
  commentId: M:Microsoft.Health.AuthorizationRule.ToString
  id: ToString
  parent: Microsoft.Health.AuthorizationRule
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: AuthorizationRule.ToString()
  fullName: Microsoft.Health.AuthorizationRule.ToString()
  type: Method
  source:
    remote:
      path: Microsoft.Health/AuthorizationRule.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ToString
    path: AuthorizationRule.cs
    startLine: 293
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the XML representation of the <xref href=\"Microsoft.Health.AuthorizationRule\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\nThe XML representation of the <xref href=\"Microsoft.Health.AuthorizationRule\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  overridden: System.Object.ToString
  overload: Microsoft.Health.AuthorizationRule.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Health.AuthorizationRule.GetRulesXml(System.Collections.Generic.IList{Microsoft.Health.AuthorizationRule})
  commentId: M:Microsoft.Health.AuthorizationRule.GetRulesXml(System.Collections.Generic.IList{Microsoft.Health.AuthorizationRule})
  id: GetRulesXml(System.Collections.Generic.IList{Microsoft.Health.AuthorizationRule})
  parent: Microsoft.Health.AuthorizationRule
  langs:
  - csharp
  - vb
  name: GetRulesXml(IList<AuthorizationRule>)
  nameWithType: AuthorizationRule.GetRulesXml(IList<AuthorizationRule>)
  fullName: Microsoft.Health.AuthorizationRule.GetRulesXml(System.Collections.Generic.IList<Microsoft.Health.AuthorizationRule>)
  type: Method
  source:
    remote:
      path: Microsoft.Health/AuthorizationRule.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetRulesXml
    path: AuthorizationRule.cs
    startLine: 315
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nRetrieves the authorization XML for the specified rules.\n"
  example: []
  syntax:
    content: public static string GetRulesXml(IList<AuthorizationRule> rules)
    content.vb: Public Shared Function GetRulesXml(rules As IList(Of AuthorizationRule)) As String
    parameters:
    - id: rules
      type: System.Collections.Generic.IList{Microsoft.Health.AuthorizationRule}
      description: "\nThe authorization rules to be included in the authorization XML.\n"
    return:
      type: System.String
      description: "\nA string containing the XML representation of the specified\nauthorization rules.\n"
  overload: Microsoft.Health.AuthorizationRule.GetRulesXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <span class=\"paramref\">rules</span> is <strong>null</strong>.\n"
  nameWithType.vb: AuthorizationRule.GetRulesXml(IList(Of AuthorizationRule))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.AuthorizationRule.GetRulesXml(System.Collections.Generic.IList(Of Microsoft.Health.AuthorizationRule))
  name.vb: GetRulesXml(IList(Of AuthorizationRule))
- uid: Microsoft.Health.AuthorizationRule.GetBase64EncodedRulesXml(System.Collections.Generic.IList{Microsoft.Health.AuthorizationRule})
  commentId: M:Microsoft.Health.AuthorizationRule.GetBase64EncodedRulesXml(System.Collections.Generic.IList{Microsoft.Health.AuthorizationRule})
  id: GetBase64EncodedRulesXml(System.Collections.Generic.IList{Microsoft.Health.AuthorizationRule})
  parent: Microsoft.Health.AuthorizationRule
  langs:
  - csharp
  - vb
  name: GetBase64EncodedRulesXml(IList<AuthorizationRule>)
  nameWithType: AuthorizationRule.GetBase64EncodedRulesXml(IList<AuthorizationRule>)
  fullName: Microsoft.Health.AuthorizationRule.GetBase64EncodedRulesXml(System.Collections.Generic.IList<Microsoft.Health.AuthorizationRule>)
  type: Method
  source:
    remote:
      path: Microsoft.Health/AuthorizationRule.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetBase64EncodedRulesXml
    path: AuthorizationRule.cs
    startLine: 367
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the base-64 encoding of the authorization XML for the \nspecified rules.\n"
  remarks: "\nThe base-64 encoding of the authorization rules can be used when\ncalling the Shell web pages to authorize records, register an\napplication, or set permissions on a record for a person or group.\nThe base-64 encoding of the authorization rules is passed as a \nvalue in the appropriate query string argument to the web page.\n"
  example: []
  syntax:
    content: public static string GetBase64EncodedRulesXml(IList<AuthorizationRule> rules)
    content.vb: Public Shared Function GetBase64EncodedRulesXml(rules As IList(Of AuthorizationRule)) As String
    parameters:
    - id: rules
      type: System.Collections.Generic.IList{Microsoft.Health.AuthorizationRule}
      description: "\nThe authorization rules to be included in the authorization XML.\n"
    return:
      type: System.String
      description: "\nA string containing the base-64 encoding of the XML representation \nof the specified authorization rules.\n"
  overload: Microsoft.Health.AuthorizationRule.GetBase64EncodedRulesXml*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">rules</span> parameter is <strong>null</strong> or empty.\n"
  nameWithType.vb: AuthorizationRule.GetBase64EncodedRulesXml(IList(Of AuthorizationRule))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.AuthorizationRule.GetBase64EncodedRulesXml(System.Collections.Generic.IList(Of Microsoft.Health.AuthorizationRule))
  name.vb: GetBase64EncodedRulesXml(IList(Of AuthorizationRule))
- uid: Microsoft.Health.AuthorizationRule.GetXml
  commentId: M:Microsoft.Health.AuthorizationRule.GetXml
  id: GetXml
  parent: Microsoft.Health.AuthorizationRule
  langs:
  - csharp
  - vb
  name: GetXml()
  nameWithType: AuthorizationRule.GetXml()
  fullName: Microsoft.Health.AuthorizationRule.GetXml()
  type: Method
  source:
    remote:
      path: Microsoft.Health/AuthorizationRule.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetXml
    path: AuthorizationRule.cs
    startLine: 385
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the XML representation of the rule.\n"
  example: []
  syntax:
    content: public string GetXml()
    content.vb: Public Function GetXml As String
    return:
      type: System.String
      description: "\nA string containing XML representing the rule.\n"
  overload: Microsoft.Health.AuthorizationRule.GetXml*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.AuthorizationRule.CreateFromXml(System.Xml.XPath.XPathNavigator)
  commentId: M:Microsoft.Health.AuthorizationRule.CreateFromXml(System.Xml.XPath.XPathNavigator)
  id: CreateFromXml(System.Xml.XPath.XPathNavigator)
  parent: Microsoft.Health.AuthorizationRule
  langs:
  - csharp
  - vb
  name: CreateFromXml(XPathNavigator)
  nameWithType: AuthorizationRule.CreateFromXml(XPathNavigator)
  fullName: Microsoft.Health.AuthorizationRule.CreateFromXml(System.Xml.XPath.XPathNavigator)
  type: Method
  source:
    remote:
      path: Microsoft.Health/AuthorizationRule.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CreateFromXml
    path: AuthorizationRule.cs
    startLine: 551
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nCreates an instance of an AuthorizationRule object using\nthe specified XML.\n"
  example: []
  syntax:
    content: public static Collection<AuthorizationRule> CreateFromXml(XPathNavigator authNav)
    content.vb: Public Shared Function CreateFromXml(authNav As XPathNavigator) As Collection(Of AuthorizationRule)
    parameters:
    - id: authNav
      type: System.Xml.XPath.XPathNavigator
      description: "\nThe XML containing the auth rules information.\n"
    return:
      type: System.Collections.ObjectModel.Collection{Microsoft.Health.AuthorizationRule}
      description: "\nA Collection of AuthorizationRule objects parsed out from \nthe XML.\n"
  overload: Microsoft.Health.AuthorizationRule.CreateFromXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">authNav</span> is null.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.AuthorizationRule
  commentId: T:Microsoft.Health.AuthorizationRule
  isExternal: false
  name: AuthorizationRule
  nameWithType: AuthorizationRule
  fullName: Microsoft.Health.AuthorizationRule
- uid: Microsoft.Health.HealthRecordItemPermissions.None
  commentId: F:Microsoft.Health.HealthRecordItemPermissions.None
- uid: Microsoft.Health.AuthorizationRule.#ctor*
  commentId: Overload:Microsoft.Health.AuthorizationRule.#ctor
  isExternal: false
  name: AuthorizationRule
  nameWithType: AuthorizationRule.AuthorizationRule
  fullName: Microsoft.Health.AuthorizationRule.AuthorizationRule
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: Microsoft.Health.HealthRecordItemPermissions
  commentId: T:Microsoft.Health.HealthRecordItemPermissions
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordItemPermissions
  nameWithType: HealthRecordItemPermissions
  fullName: Microsoft.Health.HealthRecordItemPermissions
- uid: System.Collections.Generic.IList{Microsoft.Health.AuthorizationSetDefinition}
  commentId: T:System.Collections.Generic.IList{Microsoft.Health.AuthorizationSetDefinition}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<AuthorizationSetDefinition>
  nameWithType: IList<AuthorizationSetDefinition>
  fullName: System.Collections.Generic.IList<Microsoft.Health.AuthorizationSetDefinition>
  nameWithType.vb: IList(Of AuthorizationSetDefinition)
  fullName.vb: System.Collections.Generic.IList(Of Microsoft.Health.AuthorizationSetDefinition)
  name.vb: IList(Of AuthorizationSetDefinition)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.AuthorizationSetDefinition
    name: AuthorizationSetDefinition
    nameWithType: AuthorizationSetDefinition
    fullName: Microsoft.Health.AuthorizationSetDefinition
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.AuthorizationSetDefinition
    name: AuthorizationSetDefinition
    nameWithType: AuthorizationSetDefinition
    fullName: Microsoft.Health.AuthorizationSetDefinition
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Health.AuthorizationRuleDisplayFlags
  commentId: T:Microsoft.Health.AuthorizationRuleDisplayFlags
  parent: Microsoft.Health
  isExternal: false
  name: AuthorizationRuleDisplayFlags
  nameWithType: AuthorizationRuleDisplayFlags
  fullName: Microsoft.Health.AuthorizationRuleDisplayFlags
- uid: Microsoft.Health.AuthorizationRule.Name*
  commentId: Overload:Microsoft.Health.AuthorizationRule.Name
  isExternal: false
  name: Name
  nameWithType: AuthorizationRule.Name
  fullName: Microsoft.Health.AuthorizationRule.Name
- uid: Microsoft.Health.AuthorizationRule.IsOptional*
  commentId: Overload:Microsoft.Health.AuthorizationRule.IsOptional
  isExternal: false
  name: IsOptional
  nameWithType: AuthorizationRule.IsOptional
  fullName: Microsoft.Health.AuthorizationRule.IsOptional
- uid: Microsoft.Health.AuthorizationRule.Reason*
  commentId: Overload:Microsoft.Health.AuthorizationRule.Reason
  isExternal: false
  name: Reason
  nameWithType: AuthorizationRule.Reason
  fullName: Microsoft.Health.AuthorizationRule.Reason
- uid: Microsoft.Health.AuthorizationRule.CultureSpecificReasons*
  commentId: Overload:Microsoft.Health.AuthorizationRule.CultureSpecificReasons
  isExternal: false
  name: CultureSpecificReasons
  nameWithType: AuthorizationRule.CultureSpecificReasons
  fullName: Microsoft.Health.AuthorizationRule.CultureSpecificReasons
- uid: Microsoft.Health.CultureSpecificStringDictionary
  commentId: T:Microsoft.Health.CultureSpecificStringDictionary
  parent: Microsoft.Health
  isExternal: false
  name: CultureSpecificStringDictionary
  nameWithType: CultureSpecificStringDictionary
  fullName: Microsoft.Health.CultureSpecificStringDictionary
- uid: Microsoft.Health.AuthorizationRule.DisplayFlags*
  commentId: Overload:Microsoft.Health.AuthorizationRule.DisplayFlags
  isExternal: false
  name: DisplayFlags
  nameWithType: AuthorizationRule.DisplayFlags
  fullName: Microsoft.Health.AuthorizationRule.DisplayFlags
- uid: Microsoft.Health.AuthorizationRule.Permissions*
  commentId: Overload:Microsoft.Health.AuthorizationRule.Permissions
  isExternal: false
  name: Permissions
  nameWithType: AuthorizationRule.Permissions
  fullName: Microsoft.Health.AuthorizationRule.Permissions
- uid: Microsoft.Health.AuthorizationSetDefinition
  commentId: T:Microsoft.Health.AuthorizationSetDefinition
  parent: Microsoft.Health
  isExternal: false
  name: AuthorizationSetDefinition
  nameWithType: AuthorizationSetDefinition
  fullName: Microsoft.Health.AuthorizationSetDefinition
- uid: Microsoft.Health.AuthorizationRule.TargetSets*
  commentId: Overload:Microsoft.Health.AuthorizationRule.TargetSets
  isExternal: false
  name: TargetSets
  nameWithType: AuthorizationRule.TargetSets
  fullName: Microsoft.Health.AuthorizationRule.TargetSets
- uid: System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Health.AuthorizationSetDefinition}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Health.AuthorizationSetDefinition}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<AuthorizationSetDefinition>
  nameWithType: ReadOnlyCollection<AuthorizationSetDefinition>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Health.AuthorizationSetDefinition>
  nameWithType.vb: ReadOnlyCollection(Of AuthorizationSetDefinition)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of Microsoft.Health.AuthorizationSetDefinition)
  name.vb: ReadOnlyCollection(Of AuthorizationSetDefinition)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.AuthorizationSetDefinition
    name: AuthorizationSetDefinition
    nameWithType: AuthorizationSetDefinition
    fullName: Microsoft.Health.AuthorizationSetDefinition
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.AuthorizationSetDefinition
    name: AuthorizationSetDefinition
    nameWithType: AuthorizationSetDefinition
    fullName: Microsoft.Health.AuthorizationSetDefinition
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: true
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  nameWithType.vb: ReadOnlyCollection(Of T)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: Microsoft.Health.AuthorizationRule.TargetSets
  commentId: P:Microsoft.Health.AuthorizationRule.TargetSets
- uid: Microsoft.Health.AuthorizationRule.ExceptionSets*
  commentId: Overload:Microsoft.Health.AuthorizationRule.ExceptionSets
  isExternal: false
  name: ExceptionSets
  nameWithType: AuthorizationRule.ExceptionSets
  fullName: Microsoft.Health.AuthorizationRule.ExceptionSets
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.AuthorizationRule.ToString*
  commentId: Overload:Microsoft.Health.AuthorizationRule.ToString
  isExternal: false
  name: ToString
  nameWithType: AuthorizationRule.ToString
  fullName: Microsoft.Health.AuthorizationRule.ToString
- uid: Microsoft.Health.AuthorizationRule.GetRulesXml*
  commentId: Overload:Microsoft.Health.AuthorizationRule.GetRulesXml
  isExternal: false
  name: GetRulesXml
  nameWithType: AuthorizationRule.GetRulesXml
  fullName: Microsoft.Health.AuthorizationRule.GetRulesXml
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.Collections.Generic.IList{Microsoft.Health.AuthorizationRule}
  commentId: T:System.Collections.Generic.IList{Microsoft.Health.AuthorizationRule}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<AuthorizationRule>
  nameWithType: IList<AuthorizationRule>
  fullName: System.Collections.Generic.IList<Microsoft.Health.AuthorizationRule>
  nameWithType.vb: IList(Of AuthorizationRule)
  fullName.vb: System.Collections.Generic.IList(Of Microsoft.Health.AuthorizationRule)
  name.vb: IList(Of AuthorizationRule)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.AuthorizationRule
    name: AuthorizationRule
    nameWithType: AuthorizationRule
    fullName: Microsoft.Health.AuthorizationRule
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.AuthorizationRule
    name: AuthorizationRule
    nameWithType: AuthorizationRule
    fullName: Microsoft.Health.AuthorizationRule
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.AuthorizationRule.GetBase64EncodedRulesXml*
  commentId: Overload:Microsoft.Health.AuthorizationRule.GetBase64EncodedRulesXml
  isExternal: false
  name: GetBase64EncodedRulesXml
  nameWithType: AuthorizationRule.GetBase64EncodedRulesXml
  fullName: Microsoft.Health.AuthorizationRule.GetBase64EncodedRulesXml
- uid: Microsoft.Health.AuthorizationRule.GetXml*
  commentId: Overload:Microsoft.Health.AuthorizationRule.GetXml
  isExternal: false
  name: GetXml
  nameWithType: AuthorizationRule.GetXml
  fullName: Microsoft.Health.AuthorizationRule.GetXml
- uid: Microsoft.Health.AuthorizationRule.CreateFromXml*
  commentId: Overload:Microsoft.Health.AuthorizationRule.CreateFromXml
  isExternal: false
  name: CreateFromXml
  nameWithType: AuthorizationRule.CreateFromXml
  fullName: Microsoft.Health.AuthorizationRule.CreateFromXml
- uid: System.Xml.XPath.XPathNavigator
  commentId: T:System.Xml.XPath.XPathNavigator
  parent: System.Xml.XPath
  isExternal: true
  name: XPathNavigator
  nameWithType: XPathNavigator
  fullName: System.Xml.XPath.XPathNavigator
- uid: System.Collections.ObjectModel.Collection{Microsoft.Health.AuthorizationRule}
  commentId: T:System.Collections.ObjectModel.Collection{Microsoft.Health.AuthorizationRule}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.Collection`1
  name: Collection<AuthorizationRule>
  nameWithType: Collection<AuthorizationRule>
  fullName: System.Collections.ObjectModel.Collection<Microsoft.Health.AuthorizationRule>
  nameWithType.vb: Collection(Of AuthorizationRule)
  fullName.vb: System.Collections.ObjectModel.Collection(Of Microsoft.Health.AuthorizationRule)
  name.vb: Collection(Of AuthorizationRule)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.AuthorizationRule
    name: AuthorizationRule
    nameWithType: AuthorizationRule
    fullName: Microsoft.Health.AuthorizationRule
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.AuthorizationRule
    name: AuthorizationRule
    nameWithType: AuthorizationRule
    fullName: Microsoft.Health.AuthorizationRule
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.XPath
  commentId: N:System.Xml.XPath
  isExternal: false
  name: System.Xml.XPath
  nameWithType: System.Xml.XPath
  fullName: System.Xml.XPath
- uid: System.Collections.ObjectModel.Collection`1
  commentId: T:System.Collections.ObjectModel.Collection`1
  isExternal: true
  name: Collection<T>
  nameWithType: Collection<T>
  fullName: System.Collections.ObjectModel.Collection<T>
  nameWithType.vb: Collection(Of T)
  fullName.vb: System.Collections.ObjectModel.Collection(Of T)
  name.vb: Collection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
