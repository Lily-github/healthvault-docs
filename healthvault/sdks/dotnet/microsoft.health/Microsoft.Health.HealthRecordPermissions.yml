### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.HealthRecordPermissions
  commentId: T:Microsoft.Health.HealthRecordPermissions
  id: HealthRecordPermissions
  parent: Microsoft.Health
  children:
  - Microsoft.Health.HealthRecordPermissions.#ctor
  - Microsoft.Health.HealthRecordPermissions.ItemTypePermissions
  - Microsoft.Health.HealthRecordPermissions.MeaningfulUseOptIn
  langs:
  - csharp
  - vb
  name: HealthRecordPermissions
  nameWithType: HealthRecordPermissions
  fullName: Microsoft.Health.HealthRecordPermissions
  type: Class
  source:
    remote:
      path: Microsoft.Health/HealthRecordPermissions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: HealthRecordPermissions
    path: HealthRecordPermissions.cs
    startLine: 14
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nProvides the permission information that the current\nauthenticated person has for the record when using the current application.\n"
  example: []
  syntax:
    content: public class HealthRecordPermissions
    content.vb: Public Class HealthRecordPermissions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.HealthRecordPermissions.#ctor
  commentId: M:Microsoft.Health.HealthRecordPermissions.#ctor
  id: '#ctor'
  parent: Microsoft.Health.HealthRecordPermissions
  langs:
  - csharp
  - vb
  name: HealthRecordPermissions()
  nameWithType: HealthRecordPermissions.HealthRecordPermissions()
  fullName: Microsoft.Health.HealthRecordPermissions.HealthRecordPermissions()
  type: Constructor
  source:
    remote:
      path: Microsoft.Health/HealthRecordPermissions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: HealthRecordPermissions.cs
    startLine: 19
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nConstructor for HealthRecordPermissions.\n"
  example: []
  syntax:
    content: public HealthRecordPermissions()
    content.vb: Public Sub New
  overload: Microsoft.Health.HealthRecordPermissions.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordPermissions.ItemTypePermissions
  commentId: P:Microsoft.Health.HealthRecordPermissions.ItemTypePermissions
  id: ItemTypePermissions
  parent: Microsoft.Health.HealthRecordPermissions
  langs:
  - csharp
  - vb
  name: ItemTypePermissions
  nameWithType: HealthRecordPermissions.ItemTypePermissions
  fullName: Microsoft.Health.HealthRecordPermissions.ItemTypePermissions
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordPermissions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ItemTypePermissions
    path: HealthRecordPermissions.cs
    startLine: 28
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nA collection of <xref href=\"Microsoft.Health.HealthRecordItemTypePermission\" data-throw-if-not-resolved=\"false\"></xref>(s) describing\nthe permissions for current person record in the context of the application.\n"
  example: []
  syntax:
    content: public Collection<HealthRecordItemTypePermission> ItemTypePermissions { get; }
    content.vb: Public ReadOnly Property ItemTypePermissions As Collection(Of HealthRecordItemTypePermission)
    parameters: []
    return:
      type: System.Collections.ObjectModel.Collection{Microsoft.Health.HealthRecordItemTypePermission}
  overload: Microsoft.Health.HealthRecordPermissions.ItemTypePermissions*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthRecordPermissions.MeaningfulUseOptIn
  commentId: P:Microsoft.Health.HealthRecordPermissions.MeaningfulUseOptIn
  id: MeaningfulUseOptIn
  parent: Microsoft.Health.HealthRecordPermissions
  langs:
  - csharp
  - vb
  name: MeaningfulUseOptIn
  nameWithType: HealthRecordPermissions.MeaningfulUseOptIn
  fullName: Microsoft.Health.HealthRecordPermissions.MeaningfulUseOptIn
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordPermissions.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: MeaningfulUseOptIn
    path: HealthRecordPermissions.cs
    startLine: 40
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets or sets whether the current record has opted in for\nMeaningful Use reporting.\n"
  remarks: "\nIf set to true, the current record has explicitly opted into Meaningful Use reporting.\nIf set to false, the current record has explicitly opted out of Meaningful Use reporting.\nIf no value, the current record has not explicitly opted in or out of Meaningful Use reporting.\n"
  example: []
  syntax:
    content: public bool ? MeaningfulUseOptIn { get; set; }
    content.vb: Public Property MeaningfulUseOptIn As Boolean?
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
  overload: Microsoft.Health.HealthRecordPermissions.MeaningfulUseOptIn*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.HealthRecordPermissions.#ctor*
  commentId: Overload:Microsoft.Health.HealthRecordPermissions.#ctor
  isExternal: false
  name: HealthRecordPermissions
  nameWithType: HealthRecordPermissions.HealthRecordPermissions
  fullName: Microsoft.Health.HealthRecordPermissions.HealthRecordPermissions
- uid: Microsoft.Health.HealthRecordItemTypePermission
  commentId: T:Microsoft.Health.HealthRecordItemTypePermission
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordItemTypePermission
  nameWithType: HealthRecordItemTypePermission
  fullName: Microsoft.Health.HealthRecordItemTypePermission
- uid: Microsoft.Health.HealthRecordPermissions.ItemTypePermissions*
  commentId: Overload:Microsoft.Health.HealthRecordPermissions.ItemTypePermissions
  isExternal: false
  name: ItemTypePermissions
  nameWithType: HealthRecordPermissions.ItemTypePermissions
  fullName: Microsoft.Health.HealthRecordPermissions.ItemTypePermissions
- uid: System.Collections.ObjectModel.Collection{Microsoft.Health.HealthRecordItemTypePermission}
  commentId: T:System.Collections.ObjectModel.Collection{Microsoft.Health.HealthRecordItemTypePermission}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.Collection`1
  name: Collection<HealthRecordItemTypePermission>
  nameWithType: Collection<HealthRecordItemTypePermission>
  fullName: System.Collections.ObjectModel.Collection<Microsoft.Health.HealthRecordItemTypePermission>
  nameWithType.vb: Collection(Of HealthRecordItemTypePermission)
  fullName.vb: System.Collections.ObjectModel.Collection(Of Microsoft.Health.HealthRecordItemTypePermission)
  name.vb: Collection(Of HealthRecordItemTypePermission)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.HealthRecordItemTypePermission
    name: HealthRecordItemTypePermission
    nameWithType: HealthRecordItemTypePermission
    fullName: Microsoft.Health.HealthRecordItemTypePermission
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.HealthRecordItemTypePermission
    name: HealthRecordItemTypePermission
    nameWithType: HealthRecordItemTypePermission
    fullName: Microsoft.Health.HealthRecordItemTypePermission
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.Collection`1
  commentId: T:System.Collections.ObjectModel.Collection`1
  isExternal: true
  name: Collection<T>
  nameWithType: Collection<T>
  fullName: System.Collections.ObjectModel.Collection<T>
  nameWithType.vb: Collection(Of T)
  fullName.vb: System.Collections.ObjectModel.Collection(Of T)
  name.vb: Collection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: Microsoft.Health.HealthRecordPermissions.MeaningfulUseOptIn*
  commentId: Overload:Microsoft.Health.HealthRecordPermissions.MeaningfulUseOptIn
  isExternal: false
  name: MeaningfulUseOptIn
  nameWithType: HealthRecordPermissions.MeaningfulUseOptIn
  fullName: Microsoft.Health.HealthRecordPermissions.MeaningfulUseOptIn
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullName.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
