### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.CachedServiceInfoProvider
  commentId: T:Microsoft.Health.CachedServiceInfoProvider
  id: CachedServiceInfoProvider
  parent: Microsoft.Health
  children:
  - Microsoft.Health.CachedServiceInfoProvider.#ctor
  - Microsoft.Health.CachedServiceInfoProvider.#ctor(Microsoft.Health.ServiceInfoSections)
  - Microsoft.Health.CachedServiceInfoProvider.#ctor(Microsoft.Health.ServiceInfoSections,System.TimeSpan)
  - Microsoft.Health.CachedServiceInfoProvider.#ctor(Microsoft.Health.ServiceInfoSections,System.TimeSpan,System.Uri)
  - Microsoft.Health.CachedServiceInfoProvider.#ctor(System.TimeSpan)
  - Microsoft.Health.CachedServiceInfoProvider.#ctor(System.Uri)
  - Microsoft.Health.CachedServiceInfoProvider.GetServiceInfo
  langs:
  - csharp
  - vb
  name: CachedServiceInfoProvider
  nameWithType: CachedServiceInfoProvider
  fullName: Microsoft.Health.CachedServiceInfoProvider
  type: Class
  source:
    remote:
      path: Microsoft.Health/CachedServiceInfoProvider.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CachedServiceInfoProvider
    path: CachedServiceInfoProvider.cs
    startLine: 18
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nA cached provider for service info retrieved from the HealthVault web-service.\n"
  remarks: "\nThis provider will cache the service information it obtains from Platform for\na configured or specified period of time. \n"
  example: []
  syntax:
    content: 'public class CachedServiceInfoProvider : IServiceInfoProvider'
    content.vb: >-
      Public Class CachedServiceInfoProvider
          Implements IServiceInfoProvider
  inheritance:
  - System.Object
  implements:
  - Microsoft.Health.IServiceInfoProvider
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.CachedServiceInfoProvider.#ctor
  commentId: M:Microsoft.Health.CachedServiceInfoProvider.#ctor
  id: '#ctor'
  parent: Microsoft.Health.CachedServiceInfoProvider
  langs:
  - csharp
  - vb
  name: CachedServiceInfoProvider()
  nameWithType: CachedServiceInfoProvider.CachedServiceInfoProvider()
  fullName: Microsoft.Health.CachedServiceInfoProvider.CachedServiceInfoProvider()
  type: Constructor
  source:
    remote:
      path: Microsoft.Health/CachedServiceInfoProvider.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: CachedServiceInfoProvider.cs
    startLine: 35
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nInitializes a new instance of the provider using the expiration period\nprovided through configuration and retrieving the full service info response.\n"
  remarks: "\nThe expiration period is the value of the\n<xref href=\"Microsoft.Health.HealthApplicationConfiguration.ServiceInfoDefaultCacheTtl\" data-throw-if-not-resolved=\"false\"></xref> configuration.\n"
  example: []
  syntax:
    content: public CachedServiceInfoProvider()
    content.vb: Public Sub New
  overload: Microsoft.Health.CachedServiceInfoProvider.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.CachedServiceInfoProvider.#ctor(System.TimeSpan)
  commentId: M:Microsoft.Health.CachedServiceInfoProvider.#ctor(System.TimeSpan)
  id: '#ctor(System.TimeSpan)'
  parent: Microsoft.Health.CachedServiceInfoProvider
  langs:
  - csharp
  - vb
  name: CachedServiceInfoProvider(TimeSpan)
  nameWithType: CachedServiceInfoProvider.CachedServiceInfoProvider(TimeSpan)
  fullName: Microsoft.Health.CachedServiceInfoProvider.CachedServiceInfoProvider(System.TimeSpan)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health/CachedServiceInfoProvider.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: CachedServiceInfoProvider.cs
    startLine: 50
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nInitializes a new instance of the provider with a specified expiration period and\nretrieving the full service info response.\n"
  example: []
  syntax:
    content: public CachedServiceInfoProvider(TimeSpan timeToLive)
    content.vb: Public Sub New(timeToLive As TimeSpan)
    parameters:
    - id: timeToLive
      type: System.TimeSpan
      description: "\nPeriod of time before the cached instance of service info is considered expired, and a new copy is obtained\nfrom the HealthVault web-service.\n"
  overload: Microsoft.Health.CachedServiceInfoProvider.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.CachedServiceInfoProvider.#ctor(Microsoft.Health.ServiceInfoSections)
  commentId: M:Microsoft.Health.CachedServiceInfoProvider.#ctor(Microsoft.Health.ServiceInfoSections)
  id: '#ctor(Microsoft.Health.ServiceInfoSections)'
  parent: Microsoft.Health.CachedServiceInfoProvider
  langs:
  - csharp
  - vb
  name: CachedServiceInfoProvider(ServiceInfoSections)
  nameWithType: CachedServiceInfoProvider.CachedServiceInfoProvider(ServiceInfoSections)
  fullName: Microsoft.Health.CachedServiceInfoProvider.CachedServiceInfoProvider(Microsoft.Health.ServiceInfoSections)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health/CachedServiceInfoProvider.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: CachedServiceInfoProvider.cs
    startLine: 72
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nInitializes a new instance of the provider using the expiration period\nprovided through configuration and retrieving the service information\nfor the specified response sections.\n"
  remarks: "\nThe expiration period is the value of the\n<xref href=\"Microsoft.Health.HealthApplicationConfiguration.ServiceInfoDefaultCacheTtl\" data-throw-if-not-resolved=\"false\"></xref> configuration.\n"
  example: []
  syntax:
    content: public CachedServiceInfoProvider(ServiceInfoSections responseSections)
    content.vb: Public Sub New(responseSections As ServiceInfoSections)
    parameters:
    - id: responseSections
      type: Microsoft.Health.ServiceInfoSections
      description: "\nThe categories of information to be populated in the\n<xref href=\"Microsoft.Health.ServiceInfo\" data-throw-if-not-resolved=\"false\"></xref> instance, represented as the result of XOR'ing the\ndesired categories.\n"
  overload: Microsoft.Health.CachedServiceInfoProvider.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.CachedServiceInfoProvider.#ctor(System.Uri)
  commentId: M:Microsoft.Health.CachedServiceInfoProvider.#ctor(System.Uri)
  id: '#ctor(System.Uri)'
  parent: Microsoft.Health.CachedServiceInfoProvider
  langs:
  - csharp
  - vb
  name: CachedServiceInfoProvider(Uri)
  nameWithType: CachedServiceInfoProvider.CachedServiceInfoProvider(Uri)
  fullName: Microsoft.Health.CachedServiceInfoProvider.CachedServiceInfoProvider(System.Uri)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health/CachedServiceInfoProvider.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: CachedServiceInfoProvider.cs
    startLine: 86
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nInitializes a new instance of the provider using the expiration period\nprovided through configuration and retrieving the full service info response\nusing the specified HealthVault web-service URL.\n"
  example: []
  syntax:
    content: public CachedServiceInfoProvider(Uri healthServiceUrl)
    content.vb: Public Sub New(healthServiceUrl As Uri)
    parameters:
    - id: healthServiceUrl
      type: System.Uri
      description: "\nThe URL for the HealthVault web-service to use to retrieve the service information.\n"
  overload: Microsoft.Health.CachedServiceInfoProvider.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.CachedServiceInfoProvider.#ctor(Microsoft.Health.ServiceInfoSections,System.TimeSpan)
  commentId: M:Microsoft.Health.CachedServiceInfoProvider.#ctor(Microsoft.Health.ServiceInfoSections,System.TimeSpan)
  id: '#ctor(Microsoft.Health.ServiceInfoSections,System.TimeSpan)'
  parent: Microsoft.Health.CachedServiceInfoProvider
  langs:
  - csharp
  - vb
  name: CachedServiceInfoProvider(ServiceInfoSections, TimeSpan)
  nameWithType: CachedServiceInfoProvider.CachedServiceInfoProvider(ServiceInfoSections, TimeSpan)
  fullName: Microsoft.Health.CachedServiceInfoProvider.CachedServiceInfoProvider(Microsoft.Health.ServiceInfoSections, System.TimeSpan)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health/CachedServiceInfoProvider.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: CachedServiceInfoProvider.cs
    startLine: 107
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nInitializes a new instance of the provider with a specified expiration period and\nretrieving the service information for the specified response sections.\n"
  example: []
  syntax:
    content: public CachedServiceInfoProvider(ServiceInfoSections responseSections, TimeSpan timeToLive)
    content.vb: Public Sub New(responseSections As ServiceInfoSections, timeToLive As TimeSpan)
    parameters:
    - id: responseSections
      type: Microsoft.Health.ServiceInfoSections
      description: "\nThe categories of information to be populated in the\n<xref href=\"Microsoft.Health.ServiceInfo\" data-throw-if-not-resolved=\"false\"></xref> instance, represented as the result of XOR'ing the\ndesired categories.\n"
    - id: timeToLive
      type: System.TimeSpan
      description: "\nPeriod of time before the cached instance of service info is considered expired, and a new copy is obtained\nfrom the HealthVault web-service.\n"
  overload: Microsoft.Health.CachedServiceInfoProvider.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.CachedServiceInfoProvider.#ctor(Microsoft.Health.ServiceInfoSections,System.TimeSpan,System.Uri)
  commentId: M:Microsoft.Health.CachedServiceInfoProvider.#ctor(Microsoft.Health.ServiceInfoSections,System.TimeSpan,System.Uri)
  id: '#ctor(Microsoft.Health.ServiceInfoSections,System.TimeSpan,System.Uri)'
  parent: Microsoft.Health.CachedServiceInfoProvider
  langs:
  - csharp
  - vb
  name: CachedServiceInfoProvider(ServiceInfoSections, TimeSpan, Uri)
  nameWithType: CachedServiceInfoProvider.CachedServiceInfoProvider(ServiceInfoSections, TimeSpan, Uri)
  fullName: Microsoft.Health.CachedServiceInfoProvider.CachedServiceInfoProvider(Microsoft.Health.ServiceInfoSections, System.TimeSpan, System.Uri)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health/CachedServiceInfoProvider.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: CachedServiceInfoProvider.cs
    startLine: 132
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nInitializes a new instance of the provider with a specified expiration period and\nretrieving the service information for the specified response sections using the\nspecified HealthVault web-service URL.\n"
  example: []
  syntax:
    content: public CachedServiceInfoProvider(ServiceInfoSections responseSections, TimeSpan timeToLive, Uri healthServiceUrl)
    content.vb: Public Sub New(responseSections As ServiceInfoSections, timeToLive As TimeSpan, healthServiceUrl As Uri)
    parameters:
    - id: responseSections
      type: Microsoft.Health.ServiceInfoSections
      description: "\nThe categories of information to be populated in the\n<xref href=\"Microsoft.Health.ServiceInfo\" data-throw-if-not-resolved=\"false\"></xref> instance, represented as the result of XOR'ing the\ndesired categories.\n"
    - id: timeToLive
      type: System.TimeSpan
      description: "\nPeriod of time before the cached instance of service info is considered expired, and a new copy is obtained\nfrom the HealthVault web-service.\n"
    - id: healthServiceUrl
      type: System.Uri
      description: "\nThe URL for of the HealthVault web-service to use to retrieve the service information.\n"
  overload: Microsoft.Health.CachedServiceInfoProvider.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.CachedServiceInfoProvider.GetServiceInfo
  commentId: M:Microsoft.Health.CachedServiceInfoProvider.GetServiceInfo
  id: GetServiceInfo
  parent: Microsoft.Health.CachedServiceInfoProvider
  langs:
  - csharp
  - vb
  name: GetServiceInfo()
  nameWithType: CachedServiceInfoProvider.GetServiceInfo()
  fullName: Microsoft.Health.CachedServiceInfoProvider.GetServiceInfo()
  type: Method
  source:
    remote:
      path: Microsoft.Health/CachedServiceInfoProvider.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetServiceInfo
    path: CachedServiceInfoProvider.cs
    startLine: 154
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nReturns the service information retrieved from the HealthVault web-service.\n"
  remarks: "\nCalls to this method are thread-safe.\n"
  example: []
  syntax:
    content: public ServiceInfo GetServiceInfo()
    content.vb: Public Function GetServiceInfo As ServiceInfo
    return:
      type: Microsoft.Health.ServiceInfo
      description: "\nService information retrieved from the HealthVault web-service.\n"
  overload: Microsoft.Health.CachedServiceInfoProvider.GetServiceInfo*
  implements:
  - Microsoft.Health.IServiceInfoProvider.GetServiceInfo
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Health.IServiceInfoProvider
  commentId: T:Microsoft.Health.IServiceInfoProvider
  parent: Microsoft.Health
  isExternal: false
  name: IServiceInfoProvider
  nameWithType: IServiceInfoProvider
  fullName: Microsoft.Health.IServiceInfoProvider
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.HealthApplicationConfiguration.ServiceInfoDefaultCacheTtl
  commentId: P:Microsoft.Health.HealthApplicationConfiguration.ServiceInfoDefaultCacheTtl
- uid: Microsoft.Health.CachedServiceInfoProvider.#ctor*
  commentId: Overload:Microsoft.Health.CachedServiceInfoProvider.#ctor
  isExternal: false
  name: CachedServiceInfoProvider
  nameWithType: CachedServiceInfoProvider.CachedServiceInfoProvider
  fullName: Microsoft.Health.CachedServiceInfoProvider.CachedServiceInfoProvider
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: Microsoft.Health.ServiceInfo
  commentId: T:Microsoft.Health.ServiceInfo
  parent: Microsoft.Health
  isExternal: false
  name: ServiceInfo
  nameWithType: ServiceInfo
  fullName: Microsoft.Health.ServiceInfo
- uid: Microsoft.Health.ServiceInfoSections
  commentId: T:Microsoft.Health.ServiceInfoSections
  parent: Microsoft.Health
  isExternal: false
  name: ServiceInfoSections
  nameWithType: ServiceInfoSections
  fullName: Microsoft.Health.ServiceInfoSections
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: Microsoft.Health.CachedServiceInfoProvider.GetServiceInfo*
  commentId: Overload:Microsoft.Health.CachedServiceInfoProvider.GetServiceInfo
  isExternal: false
  name: GetServiceInfo
  nameWithType: CachedServiceInfoProvider.GetServiceInfo
  fullName: Microsoft.Health.CachedServiceInfoProvider.GetServiceInfo
- uid: Microsoft.Health.IServiceInfoProvider.GetServiceInfo
  commentId: M:Microsoft.Health.IServiceInfoProvider.GetServiceInfo
  parent: Microsoft.Health.IServiceInfoProvider
  isExternal: false
  name: GetServiceInfo()
  nameWithType: IServiceInfoProvider.GetServiceInfo()
  fullName: Microsoft.Health.IServiceInfoProvider.GetServiceInfo()
  spec.csharp:
  - uid: Microsoft.Health.IServiceInfoProvider.GetServiceInfo
    name: GetServiceInfo
    nameWithType: IServiceInfoProvider.GetServiceInfo
    fullName: Microsoft.Health.IServiceInfoProvider.GetServiceInfo
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.IServiceInfoProvider.GetServiceInfo
    name: GetServiceInfo
    nameWithType: IServiceInfoProvider.GetServiceInfo
    fullName: Microsoft.Health.IServiceInfoProvider.GetServiceInfo
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
