### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.HealthRecordItemSignature
  commentId: T:Microsoft.Health.HealthRecordItemSignature
  id: HealthRecordItemSignature
  parent: Microsoft.Health
  children:
  - Microsoft.Health.HealthRecordItemSignature.#ctor
  - Microsoft.Health.HealthRecordItemSignature.AlgorithmName
  - Microsoft.Health.HealthRecordItemSignature.BlobSignatureItems
  - Microsoft.Health.HealthRecordItemSignature.CertType
  - Microsoft.Health.HealthRecordItemSignature.GetCertificate``1
  - Microsoft.Health.HealthRecordItemSignature.Method
  - Microsoft.Health.HealthRecordItemSignature.RsaSha1W3cAlgorithmName
  - Microsoft.Health.HealthRecordItemSignature.X509Certificate2
  langs:
  - csharp
  - vb
  name: HealthRecordItemSignature
  nameWithType: HealthRecordItemSignature
  fullName: Microsoft.Health.HealthRecordItemSignature
  type: Class
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemSignature.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: HealthRecordItemSignature
    path: HealthRecordItemSignature.cs
    startLine: 27
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nRepresents a digital signature of the HealthRecordItem. \n"
  remarks: "\nA digital signature contains key information, which may be an X509 certificate,\nand a cryptographic hash. These may be used to verify the identity of the signer\nand the contents of the HealthRecordItem.\n"
  example: []
  syntax:
    content: public class HealthRecordItemSignature
    content.vb: Public Class HealthRecordItemSignature
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.HealthRecordItemSignature.#ctor
  commentId: M:Microsoft.Health.HealthRecordItemSignature.#ctor
  id: '#ctor'
  parent: Microsoft.Health.HealthRecordItemSignature
  langs:
  - csharp
  - vb
  name: HealthRecordItemSignature()
  nameWithType: HealthRecordItemSignature.HealthRecordItemSignature()
  fullName: Microsoft.Health.HealthRecordItemSignature.HealthRecordItemSignature()
  type: Constructor
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemSignature.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: HealthRecordItemSignature.cs
    startLine: 34
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nCreates a new instance of the <xref href=\"Microsoft.Health.HealthRecordItemSignature\" data-throw-if-not-resolved=\"false\"></xref> class \nusing default values.\n"
  example: []
  syntax:
    content: public HealthRecordItemSignature()
    content.vb: Public Sub New
  overload: Microsoft.Health.HealthRecordItemSignature.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordItemSignature.CertType
  commentId: P:Microsoft.Health.HealthRecordItemSignature.CertType
  id: CertType
  parent: Microsoft.Health.HealthRecordItemSignature
  langs:
  - csharp
  - vb
  name: CertType
  nameWithType: HealthRecordItemSignature.CertType
  fullName: Microsoft.Health.HealthRecordItemSignature.CertType
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemSignature.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CertType
    path: HealthRecordItemSignature.cs
    startLine: 45
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nThe type of the certificate used to sign the signature.\n"
  example: []
  syntax:
    content: public CertificateType CertType { get; }
    content.vb: Public ReadOnly Property CertType As CertificateType
    parameters: []
    return:
      type: Microsoft.Health.CertificateType
  overload: Microsoft.Health.HealthRecordItemSignature.CertType*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthRecordItemSignature.GetCertificate``1
  commentId: M:Microsoft.Health.HealthRecordItemSignature.GetCertificate``1
  id: GetCertificate``1
  parent: Microsoft.Health.HealthRecordItemSignature
  langs:
  - csharp
  - vb
  name: GetCertificate<T>()
  nameWithType: HealthRecordItemSignature.GetCertificate<T>()
  fullName: Microsoft.Health.HealthRecordItemSignature.GetCertificate<T>()
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemSignature.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetCertificate
    path: HealthRecordItemSignature.cs
    startLine: 81
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGet's the X509Certificate2 used for the signature.\n"
  remarks: "\nThis method is deprecated. Please use <xref href=\"Microsoft.Health.HealthRecordItemSignature.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> to \naccess the signing certificate information.\n"
  example: []
  syntax:
    content: 'public T GetCertificate<T>()where T : X509Certificate2'
    content.vb: Public Function GetCertificate(Of T As X509Certificate2) As T
    typeParameters:
    - id: T
    return:
      type: '{T}'
  overload: Microsoft.Health.HealthRecordItemSignature.GetCertificate*
  nameWithType.vb: HealthRecordItemSignature.GetCertificate(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.HealthRecordItemSignature.GetCertificate(Of T)()
  name.vb: GetCertificate(Of T)()
- uid: Microsoft.Health.HealthRecordItemSignature.X509Certificate2
  commentId: P:Microsoft.Health.HealthRecordItemSignature.X509Certificate2
  id: X509Certificate2
  parent: Microsoft.Health.HealthRecordItemSignature
  langs:
  - csharp
  - vb
  name: X509Certificate2
  nameWithType: HealthRecordItemSignature.X509Certificate2
  fullName: Microsoft.Health.HealthRecordItemSignature.X509Certificate2
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemSignature.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: X509Certificate2
    path: HealthRecordItemSignature.cs
    startLine: 91
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGet's the X509Certificate2 used for the signature.\n"
  example: []
  syntax:
    content: public X509Certificate2 X509Certificate2 { get; }
    content.vb: Public ReadOnly Property X509Certificate2 As X509Certificate2
    parameters: []
    return:
      type: System.Security.Cryptography.X509Certificates.X509Certificate2
  overload: Microsoft.Health.HealthRecordItemSignature.X509Certificate2*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthRecordItemSignature.Method
  commentId: P:Microsoft.Health.HealthRecordItemSignature.Method
  id: Method
  parent: Microsoft.Health.HealthRecordItemSignature
  langs:
  - csharp
  - vb
  name: Method
  nameWithType: HealthRecordItemSignature.Method
  fullName: Microsoft.Health.HealthRecordItemSignature.Method
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemSignature.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Method
    path: HealthRecordItemSignature.cs
    startLine: 621
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the HealthVault signature method for this signature.\n"
  example: []
  syntax:
    content: public HealthRecordItemSignatureMethod Method { get; }
    content.vb: Public ReadOnly Property Method As HealthRecordItemSignatureMethod
    parameters: []
    return:
      type: Microsoft.Health.HealthRecordItemSignatureMethod
  overload: Microsoft.Health.HealthRecordItemSignature.Method*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthRecordItemSignature.BlobSignatureItems
  commentId: P:Microsoft.Health.HealthRecordItemSignature.BlobSignatureItems
  id: BlobSignatureItems
  parent: Microsoft.Health.HealthRecordItemSignature
  langs:
  - csharp
  - vb
  name: BlobSignatureItems
  nameWithType: HealthRecordItemSignature.BlobSignatureItems
  fullName: Microsoft.Health.HealthRecordItemSignature.BlobSignatureItems
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemSignature.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: BlobSignatureItems
    path: HealthRecordItemSignature.cs
    startLine: 633
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets a <xref href=\"System.Collections.ObjectModel.ReadOnlyCollection%601\" data-throw-if-not-resolved=\"false\"></xref> objects describing \nthe blobs that are part of this signature.\n"
  example: []
  syntax:
    content: public ReadOnlyCollection<BlobSignatureItem> BlobSignatureItems { get; }
    content.vb: Public ReadOnly Property BlobSignatureItems As ReadOnlyCollection(Of BlobSignatureItem)
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Health.BlobSignatureItem}
  overload: Microsoft.Health.HealthRecordItemSignature.BlobSignatureItems*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthRecordItemSignature.AlgorithmName
  commentId: P:Microsoft.Health.HealthRecordItemSignature.AlgorithmName
  id: AlgorithmName
  parent: Microsoft.Health.HealthRecordItemSignature
  langs:
  - csharp
  - vb
  name: AlgorithmName
  nameWithType: HealthRecordItemSignature.AlgorithmName
  fullName: Microsoft.Health.HealthRecordItemSignature.AlgorithmName
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemSignature.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: AlgorithmName
    path: HealthRecordItemSignature.cs
    startLine: 651
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets a string identifying the signature algorithm for this signature.         \n"
  remarks: "\nThis value is currently <xref href=\"Microsoft.Health.HealthRecordItemSignature.RsaSha1W3cAlgorithmName\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public string AlgorithmName { get; }
    content.vb: Public ReadOnly Property AlgorithmName As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Health.HealthRecordItemSignature.AlgorithmName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthRecordItemSignature.RsaSha1W3cAlgorithmName
  commentId: F:Microsoft.Health.HealthRecordItemSignature.RsaSha1W3cAlgorithmName
  id: RsaSha1W3cAlgorithmName
  parent: Microsoft.Health.HealthRecordItemSignature
  langs:
  - csharp
  - vb
  name: RsaSha1W3cAlgorithmName
  nameWithType: HealthRecordItemSignature.RsaSha1W3cAlgorithmName
  fullName: Microsoft.Health.HealthRecordItemSignature.RsaSha1W3cAlgorithmName
  type: Field
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemSignature.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: RsaSha1W3cAlgorithmName
    path: HealthRecordItemSignature.cs
    startLine: 663
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nRepresents the signature algorithm defined by:\n\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\".\n"
  example: []
  syntax:
    content: public const string RsaSha1W3cAlgorithmName = "rsa-sha1"
    content.vb: Public Const RsaSha1W3cAlgorithmName As String = "rsa-sha1"
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.HealthRecordItemSignature
  commentId: T:Microsoft.Health.HealthRecordItemSignature
  isExternal: false
  name: HealthRecordItemSignature
  nameWithType: HealthRecordItemSignature
  fullName: Microsoft.Health.HealthRecordItemSignature
- uid: Microsoft.Health.HealthRecordItemSignature.#ctor*
  commentId: Overload:Microsoft.Health.HealthRecordItemSignature.#ctor
  isExternal: false
  name: HealthRecordItemSignature
  nameWithType: HealthRecordItemSignature.HealthRecordItemSignature
  fullName: Microsoft.Health.HealthRecordItemSignature.HealthRecordItemSignature
- uid: Microsoft.Health.HealthRecordItemSignature.CertType*
  commentId: Overload:Microsoft.Health.HealthRecordItemSignature.CertType
  isExternal: false
  name: CertType
  nameWithType: HealthRecordItemSignature.CertType
  fullName: Microsoft.Health.HealthRecordItemSignature.CertType
- uid: Microsoft.Health.CertificateType
  commentId: T:Microsoft.Health.CertificateType
  parent: Microsoft.Health
  isExternal: false
  name: CertificateType
  nameWithType: CertificateType
  fullName: Microsoft.Health.CertificateType
- uid: Microsoft.Health.HealthRecordItemSignature.X509Certificate2
  commentId: P:Microsoft.Health.HealthRecordItemSignature.X509Certificate2
- uid: Microsoft.Health.HealthRecordItemSignature.GetCertificate*
  commentId: Overload:Microsoft.Health.HealthRecordItemSignature.GetCertificate
  isExternal: false
  name: GetCertificate
  nameWithType: HealthRecordItemSignature.GetCertificate
  fullName: Microsoft.Health.HealthRecordItemSignature.GetCertificate
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  commentId: '!:T'
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: Microsoft.Health.HealthRecordItemSignature.X509Certificate2*
  commentId: Overload:Microsoft.Health.HealthRecordItemSignature.X509Certificate2
  isExternal: false
  name: X509Certificate2
  nameWithType: HealthRecordItemSignature.X509Certificate2
  fullName: Microsoft.Health.HealthRecordItemSignature.X509Certificate2
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2
  commentId: T:System.Security.Cryptography.X509Certificates.X509Certificate2
  parent: System.Security.Cryptography.X509Certificates
  isExternal: true
  name: X509Certificate2
  nameWithType: X509Certificate2
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2
- uid: System.Security.Cryptography.X509Certificates
  commentId: N:System.Security.Cryptography.X509Certificates
  isExternal: false
  name: System.Security.Cryptography.X509Certificates
  nameWithType: System.Security.Cryptography.X509Certificates
  fullName: System.Security.Cryptography.X509Certificates
- uid: Microsoft.Health.HealthRecordItemSignature.Method*
  commentId: Overload:Microsoft.Health.HealthRecordItemSignature.Method
  isExternal: false
  name: Method
  nameWithType: HealthRecordItemSignature.Method
  fullName: Microsoft.Health.HealthRecordItemSignature.Method
- uid: Microsoft.Health.HealthRecordItemSignatureMethod
  commentId: T:Microsoft.Health.HealthRecordItemSignatureMethod
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordItemSignatureMethod
  nameWithType: HealthRecordItemSignatureMethod
  fullName: Microsoft.Health.HealthRecordItemSignatureMethod
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: true
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  nameWithType.vb: ReadOnlyCollection(Of T)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthRecordItemSignature.BlobSignatureItems*
  commentId: Overload:Microsoft.Health.HealthRecordItemSignature.BlobSignatureItems
  isExternal: false
  name: BlobSignatureItems
  nameWithType: HealthRecordItemSignature.BlobSignatureItems
  fullName: Microsoft.Health.HealthRecordItemSignature.BlobSignatureItems
- uid: System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Health.BlobSignatureItem}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Health.BlobSignatureItem}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<BlobSignatureItem>
  nameWithType: ReadOnlyCollection<BlobSignatureItem>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Health.BlobSignatureItem>
  nameWithType.vb: ReadOnlyCollection(Of BlobSignatureItem)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of Microsoft.Health.BlobSignatureItem)
  name.vb: ReadOnlyCollection(Of BlobSignatureItem)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.BlobSignatureItem
    name: BlobSignatureItem
    nameWithType: BlobSignatureItem
    fullName: Microsoft.Health.BlobSignatureItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.BlobSignatureItem
    name: BlobSignatureItem
    nameWithType: BlobSignatureItem
    fullName: Microsoft.Health.BlobSignatureItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: Microsoft.Health.HealthRecordItemSignature.RsaSha1W3cAlgorithmName
  commentId: F:Microsoft.Health.HealthRecordItemSignature.RsaSha1W3cAlgorithmName
- uid: Microsoft.Health.HealthRecordItemSignature.AlgorithmName*
  commentId: Overload:Microsoft.Health.HealthRecordItemSignature.AlgorithmName
  isExternal: false
  name: AlgorithmName
  nameWithType: HealthRecordItemSignature.AlgorithmName
  fullName: Microsoft.Health.HealthRecordItemSignature.AlgorithmName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
