### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.BlobHashInfo
  commentId: T:Microsoft.Health.BlobHashInfo
  id: BlobHashInfo
  parent: Microsoft.Health
  children:
  - Microsoft.Health.BlobHashInfo.#ctor
  - Microsoft.Health.BlobHashInfo.#ctor(Microsoft.Health.BlobHashAlgorithm,System.Int32,System.Byte[])
  - Microsoft.Health.BlobHashInfo.BlobHashAlgorithm
  - Microsoft.Health.BlobHashInfo.BlockSizeBytes
  - Microsoft.Health.BlobHashInfo.Hash
  langs:
  - csharp
  - vb
  name: BlobHashInfo
  nameWithType: BlobHashInfo
  fullName: Microsoft.Health.BlobHashInfo
  type: Class
  source:
    remote:
      path: Microsoft.Health/BlobHashInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: BlobHashInfo
    path: BlobHashInfo.cs
    startLine: 15
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nRepresents hash information about a <xref href=\"Microsoft.Health.Blob\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public class BlobHashInfo
    content.vb: Public Class BlobHashInfo
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.BlobHashInfo.#ctor
  commentId: M:Microsoft.Health.BlobHashInfo.#ctor
  id: '#ctor'
  parent: Microsoft.Health.BlobHashInfo
  langs:
  - csharp
  - vb
  name: BlobHashInfo()
  nameWithType: BlobHashInfo.BlobHashInfo()
  fullName: Microsoft.Health.BlobHashInfo.BlobHashInfo()
  type: Constructor
  source:
    remote:
      path: Microsoft.Health/BlobHashInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: BlobHashInfo.cs
    startLine: 21
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nCreates an instance of the <xref href=\"Microsoft.Health.BlobHashInfo\" data-throw-if-not-resolved=\"false\"></xref> class \nwith default values.\n"
  example: []
  syntax:
    content: public BlobHashInfo()
    content.vb: Public Sub New
  overload: Microsoft.Health.BlobHashInfo.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.BlobHashInfo.#ctor(Microsoft.Health.BlobHashAlgorithm,System.Int32,System.Byte[])
  commentId: M:Microsoft.Health.BlobHashInfo.#ctor(Microsoft.Health.BlobHashAlgorithm,System.Int32,System.Byte[])
  id: '#ctor(Microsoft.Health.BlobHashAlgorithm,System.Int32,System.Byte[])'
  parent: Microsoft.Health.BlobHashInfo
  langs:
  - csharp
  - vb
  name: BlobHashInfo(BlobHashAlgorithm, Int32, Byte[])
  nameWithType: BlobHashInfo.BlobHashInfo(BlobHashAlgorithm, Int32, Byte[])
  fullName: Microsoft.Health.BlobHashInfo.BlobHashInfo(Microsoft.Health.BlobHashAlgorithm, System.Int32, System.Byte[])
  type: Constructor
  source:
    remote:
      path: Microsoft.Health/BlobHashInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: BlobHashInfo.cs
    startLine: 41
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nCreates an instance of the <xref href=\"Microsoft.Health.BlobHashInfo\" data-throw-if-not-resolved=\"false\"></xref> class \nfor a given hashing algorithm, hashblock size and hash.\n"
  example: []
  syntax:
    content: public BlobHashInfo(BlobHashAlgorithm blobHashAlgorithm, int blobBlockSizeBytes, byte[] hash)
    content.vb: Public Sub New(blobHashAlgorithm As BlobHashAlgorithm, blobBlockSizeBytes As Integer, hash As Byte())
    parameters:
    - id: blobHashAlgorithm
      type: Microsoft.Health.BlobHashAlgorithm
      description: "\nThe hashing algorithm used.\n"
    - id: blobBlockSizeBytes
      type: System.Int32
      description: "\nThe size of the BLOB block size used in calculating hashes\n"
    - id: hash
      type: System.Byte[]
      description: "\nRepresents the BLOB hash value \n"
  overload: Microsoft.Health.BlobHashInfo.#ctor*
  nameWithType.vb: BlobHashInfo.BlobHashInfo(BlobHashAlgorithm, Int32, Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.BlobHashInfo.BlobHashInfo(Microsoft.Health.BlobHashAlgorithm, System.Int32, System.Byte())
  name.vb: BlobHashInfo(BlobHashAlgorithm, Int32, Byte())
- uid: Microsoft.Health.BlobHashInfo.BlobHashAlgorithm
  commentId: P:Microsoft.Health.BlobHashInfo.BlobHashAlgorithm
  id: BlobHashAlgorithm
  parent: Microsoft.Health.BlobHashInfo
  langs:
  - csharp
  - vb
  name: BlobHashAlgorithm
  nameWithType: BlobHashInfo.BlobHashAlgorithm
  fullName: Microsoft.Health.BlobHashInfo.BlobHashAlgorithm
  type: Property
  source:
    remote:
      path: Microsoft.Health/BlobHashInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: BlobHashAlgorithm
    path: BlobHashInfo.cs
    startLine: 105
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nThe algorithm used to calculate the BLOB hash.\n"
  example: []
  syntax:
    content: public BlobHashAlgorithm BlobHashAlgorithm { get; }
    content.vb: Public ReadOnly Property BlobHashAlgorithm As BlobHashAlgorithm
    parameters: []
    return:
      type: Microsoft.Health.BlobHashAlgorithm
  overload: Microsoft.Health.BlobHashInfo.BlobHashAlgorithm*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.BlobHashInfo.BlockSizeBytes
  commentId: P:Microsoft.Health.BlobHashInfo.BlockSizeBytes
  id: BlockSizeBytes
  parent: Microsoft.Health.BlobHashInfo
  langs:
  - csharp
  - vb
  name: BlockSizeBytes
  nameWithType: BlobHashInfo.BlockSizeBytes
  fullName: Microsoft.Health.BlobHashInfo.BlockSizeBytes
  type: Property
  source:
    remote:
      path: Microsoft.Health/BlobHashInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: BlockSizeBytes
    path: BlobHashInfo.cs
    startLine: 117
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nThe block size in bytes used by the <xref href=\"Microsoft.Health.BlobHashInfo.BlobHashAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> to \ncalculate the BLOB hash.\n"
  example: []
  syntax:
    content: public int BlockSizeBytes { get; }
    content.vb: Public ReadOnly Property BlockSizeBytes As Integer
    parameters: []
    return:
      type: System.Int32
  overload: Microsoft.Health.BlobHashInfo.BlockSizeBytes*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.BlobHashInfo.Hash
  commentId: P:Microsoft.Health.BlobHashInfo.Hash
  id: Hash
  parent: Microsoft.Health.BlobHashInfo
  langs:
  - csharp
  - vb
  name: Hash
  nameWithType: BlobHashInfo.Hash
  fullName: Microsoft.Health.BlobHashInfo.Hash
  type: Property
  source:
    remote:
      path: Microsoft.Health/BlobHashInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Hash
    path: BlobHashInfo.cs
    startLine: 127
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nRepresents the BLOB hash as calculated by the <xref href=\"Microsoft.Health.BlobHashInfo.BlobHashAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> \nand <xref href=\"Microsoft.Health.BlobHashInfo.BlockSizeBytes\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public byte[] Hash { get; }
    content.vb: Public ReadOnly Property Hash As Byte()
    parameters: []
    return:
      type: System.Byte[]
  overload: Microsoft.Health.BlobHashInfo.Hash*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Microsoft.Health.Blob
  commentId: T:Microsoft.Health.Blob
  parent: Microsoft.Health
  isExternal: false
  name: Blob
  nameWithType: Blob
  fullName: Microsoft.Health.Blob
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.BlobHashInfo
  commentId: T:Microsoft.Health.BlobHashInfo
  parent: Microsoft.Health
  isExternal: false
  name: BlobHashInfo
  nameWithType: BlobHashInfo
  fullName: Microsoft.Health.BlobHashInfo
- uid: Microsoft.Health.BlobHashInfo.#ctor*
  commentId: Overload:Microsoft.Health.BlobHashInfo.#ctor
  isExternal: false
  name: BlobHashInfo
  nameWithType: BlobHashInfo.BlobHashInfo
  fullName: Microsoft.Health.BlobHashInfo.BlobHashInfo
- uid: Microsoft.Health.BlobHashAlgorithm
  commentId: T:Microsoft.Health.BlobHashAlgorithm
  parent: Microsoft.Health
  isExternal: false
  name: BlobHashAlgorithm
  nameWithType: BlobHashAlgorithm
  fullName: Microsoft.Health.BlobHashAlgorithm
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.Health.BlobHashInfo.BlobHashAlgorithm*
  commentId: Overload:Microsoft.Health.BlobHashInfo.BlobHashAlgorithm
  isExternal: false
  name: BlobHashAlgorithm
  nameWithType: BlobHashInfo.BlobHashAlgorithm
  fullName: Microsoft.Health.BlobHashInfo.BlobHashAlgorithm
- uid: Microsoft.Health.BlobHashInfo.BlobHashAlgorithm
  commentId: P:Microsoft.Health.BlobHashInfo.BlobHashAlgorithm
- uid: Microsoft.Health.BlobHashInfo.BlockSizeBytes*
  commentId: Overload:Microsoft.Health.BlobHashInfo.BlockSizeBytes
  isExternal: false
  name: BlockSizeBytes
  nameWithType: BlobHashInfo.BlockSizeBytes
  fullName: Microsoft.Health.BlobHashInfo.BlockSizeBytes
- uid: Microsoft.Health.BlobHashInfo.BlockSizeBytes
  commentId: P:Microsoft.Health.BlobHashInfo.BlockSizeBytes
- uid: Microsoft.Health.BlobHashInfo.Hash*
  commentId: Overload:Microsoft.Health.BlobHashInfo.Hash
  isExternal: false
  name: Hash
  nameWithType: BlobHashInfo.Hash
  fullName: Microsoft.Health.BlobHashInfo.Hash
