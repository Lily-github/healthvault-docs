### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.ItemTypeManager
  commentId: T:Microsoft.Health.ItemTypeManager
  id: ItemTypeManager
  parent: Microsoft.Health
  children:
  - Microsoft.Health.ItemTypeManager.ClearItemTypeCache
  - Microsoft.Health.ItemTypeManager.DeserializeItem(System.String)
  - Microsoft.Health.ItemTypeManager.GetBaseHealthRecordItemTypeDefinition(Microsoft.Health.HealthServiceConnection)
  - Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(Microsoft.Health.HealthRecordItemTypeSections,Microsoft.Health.HealthServiceConnection)
  - Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(Microsoft.Health.HealthServiceConnection)
  - Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList{System.Guid},Microsoft.Health.HealthRecordItemTypeSections,Microsoft.Health.HealthServiceConnection)
  - Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList{System.Guid},Microsoft.Health.HealthRecordItemTypeSections,System.Collections.Generic.IList{System.String},System.Nullable{System.DateTime},Microsoft.Health.HealthServiceConnection)
  - Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList{System.Guid},Microsoft.Health.HealthRecordItemTypeSections,System.Nullable{System.DateTime},Microsoft.Health.HealthServiceConnection)
  - Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList{System.Guid},Microsoft.Health.HealthServiceConnection)
  - Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList{System.Guid},System.Nullable{System.DateTime},Microsoft.Health.HealthServiceConnection)
  - Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Guid,Microsoft.Health.HealthServiceConnection)
  - Microsoft.Health.ItemTypeManager.GetRegisteredTypeForTypeId(System.Guid)
  - Microsoft.Health.ItemTypeManager.RegisterApplicationSpecificHandler(System.Guid,System.String,System.Type)
  - Microsoft.Health.ItemTypeManager.RegisterApplicationSpecificHandler(System.String,System.String,System.Type)
  - Microsoft.Health.ItemTypeManager.RegisterApplicationSpecificHandler(System.String,System.String,System.Type,System.Boolean)
  - Microsoft.Health.ItemTypeManager.RegisteredTypes
  - Microsoft.Health.ItemTypeManager.RegisterExtensionHandler(System.String,System.Type)
  - Microsoft.Health.ItemTypeManager.RegisterExtensionHandler(System.String,System.Type,System.Boolean)
  - Microsoft.Health.ItemTypeManager.RegisterTypeHandler(System.Guid,System.Type)
  - Microsoft.Health.ItemTypeManager.RegisterTypeHandler(System.Guid,System.Type,System.Boolean)
  langs:
  - csharp
  - vb
  name: ItemTypeManager
  nameWithType: ItemTypeManager
  fullName: Microsoft.Health.ItemTypeManager
  type: Class
  source:
    remote:
      path: Microsoft.Health/ItemTypeManager.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ItemTypeManager
    path: ItemTypeManager.cs
    startLine: 23
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nManages the mapping of a health record item type ID to a class \nrepresenting the type-specific data for an item and the method used \nto deserialize it.\n"
  example: []
  syntax:
    content: public static class ItemTypeManager
    content.vb: Public Module ItemTypeManager
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Health.ItemTypeManager.RegisterTypeHandler(System.Guid,System.Type)
  commentId: M:Microsoft.Health.ItemTypeManager.RegisterTypeHandler(System.Guid,System.Type)
  id: RegisterTypeHandler(System.Guid,System.Type)
  parent: Microsoft.Health.ItemTypeManager
  langs:
  - csharp
  - vb
  name: RegisterTypeHandler(Guid, Type)
  nameWithType: ItemTypeManager.RegisterTypeHandler(Guid, Type)
  fullName: Microsoft.Health.ItemTypeManager.RegisterTypeHandler(System.Guid, System.Type)
  type: Method
  source:
    remote:
      path: Microsoft.Health/ItemTypeManager.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: RegisterTypeHandler
    path: ItemTypeManager.cs
    startLine: 226
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nRegisters a deserializer for item type-specific data.\n"
  example: []
  syntax:
    content: public static void RegisterTypeHandler(Guid typeId, Type itemTypeClass)
    content.vb: Public Shared Sub RegisterTypeHandler(typeId As Guid, itemTypeClass As Type)
    parameters:
    - id: typeId
      type: System.Guid
      description: "\nThe unique identifier for the item type-specific data as defined\nby the HealthVault service.\n"
    - id: itemTypeClass
      type: System.Type
      description: "\nThe class that implements the item type-specific data. It must\nbe public, derive from <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref>, and \nhave a default constructor.\n"
  overload: Microsoft.Health.ItemTypeManager.RegisterTypeHandler*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.ItemTypeManager.RegisterTypeHandler(System.Guid,System.Type,System.Boolean)
  commentId: M:Microsoft.Health.ItemTypeManager.RegisterTypeHandler(System.Guid,System.Type,System.Boolean)
  id: RegisterTypeHandler(System.Guid,System.Type,System.Boolean)
  parent: Microsoft.Health.ItemTypeManager
  langs:
  - csharp
  - vb
  name: RegisterTypeHandler(Guid, Type, Boolean)
  nameWithType: ItemTypeManager.RegisterTypeHandler(Guid, Type, Boolean)
  fullName: Microsoft.Health.ItemTypeManager.RegisterTypeHandler(System.Guid, System.Type, System.Boolean)
  type: Method
  source:
    remote:
      path: Microsoft.Health/ItemTypeManager.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: RegisterTypeHandler
    path: ItemTypeManager.cs
    startLine: 269
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nRegisters a deserializer for item type-specific data.\n"
  example: []
  syntax:
    content: public static void RegisterTypeHandler(Guid typeId, Type itemTypeClass, bool overwriteExisting)
    content.vb: Public Shared Sub RegisterTypeHandler(typeId As Guid, itemTypeClass As Type, overwriteExisting As Boolean)
    parameters:
    - id: typeId
      type: System.Guid
      description: "\nThe unique identifier for the item type-specific data as defined\nby the HealthVault service.\n"
    - id: itemTypeClass
      type: System.Type
      description: "\nThe class that implements the item type-specific data. It must\nbe public, derive from <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref>, and \nhave a default constructor.\n"
    - id: overwriteExisting
      type: System.Boolean
      description: "\n<strong>true</strong> to register the new deserializer even if the type\nalready has a deserializer registered; <strong>false</strong> to throw an \nexception because a deserializer is already registered.\n"
  overload: Microsoft.Health.ItemTypeManager.RegisterTypeHandler*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">typeId</span> parameter is <xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref> or\nthe <span class=\"paramref\">itemTypeClass</span> parameter does not derive from\n<xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <span class=\"paramref\">itemTypeClass</span> parameter is <strong>null</strong>.\n"
  - type: Microsoft.Health.TypeHandlerAlreadyRegisteredException
    commentId: T:Microsoft.Health.TypeHandlerAlreadyRegisteredException
    description: "\nThe <span class=\"paramref\">typeId</span> parameter already has a handler \nregistered and <span class=\"paramref\">overwriteExisting</span> is <strong>false</strong>.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.ItemTypeManager.RegisteredTypes
  commentId: P:Microsoft.Health.ItemTypeManager.RegisteredTypes
  id: RegisteredTypes
  parent: Microsoft.Health.ItemTypeManager
  langs:
  - csharp
  - vb
  name: RegisteredTypes
  nameWithType: ItemTypeManager.RegisteredTypes
  fullName: Microsoft.Health.ItemTypeManager.RegisteredTypes
  type: Property
  source:
    remote:
      path: Microsoft.Health/ItemTypeManager.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: RegisteredTypes
    path: ItemTypeManager.cs
    startLine: 328
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGet a collection of all the HealthRecordItem-derived types that are registered.\n"
  remarks: "\nThis set of types defines all of the HealthVault item types that this SDK \nunderstands how to process. If new types have been added, it may be a subset of the\ntypes that are available through the HealthVault service.\n\nTo retrieve information about the types from the HealthVault service, \nuse the <xref href=\"Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(Microsoft.Health.HealthServiceConnection)\" data-throw-if-not-resolved=\"false\"></xref> method.\n"
  example: []
  syntax:
    content: public static IDictionary<Guid, Type> RegisteredTypes { get; }
    content.vb: Public Shared ReadOnly Property RegisteredTypes As IDictionary(Of Guid, Type)
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.Guid,System.Type}
      description: A dictionary of <xref href="System.Type" data-throw-if-not-resolved="false"></xref> instances.
  overload: Microsoft.Health.ItemTypeManager.RegisteredTypes*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Health.ItemTypeManager.GetRegisteredTypeForTypeId(System.Guid)
  commentId: M:Microsoft.Health.ItemTypeManager.GetRegisteredTypeForTypeId(System.Guid)
  id: GetRegisteredTypeForTypeId(System.Guid)
  parent: Microsoft.Health.ItemTypeManager
  langs:
  - csharp
  - vb
  name: GetRegisteredTypeForTypeId(Guid)
  nameWithType: ItemTypeManager.GetRegisteredTypeForTypeId(Guid)
  fullName: Microsoft.Health.ItemTypeManager.GetRegisteredTypeForTypeId(System.Guid)
  type: Method
  source:
    remote:
      path: Microsoft.Health/ItemTypeManager.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetRegisteredTypeForTypeId
    path: ItemTypeManager.cs
    startLine: 357
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> instance of the class that is registered to\nhandle this type id.\n"
  remarks: "\nThis method looks up the type id in the list of types that the SDK understands how\nto process. If new types were added to the HealthVault service since this SDK was\nreleased, this method will not return them. \n\nTo retrieve information about the types from the HealthVault service, \nuse the <xref href=\"Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(Microsoft.Health.HealthServiceConnection)\" data-throw-if-not-resolved=\"false\"></xref> method.\n"
  example: []
  syntax:
    content: public static Type GetRegisteredTypeForTypeId(Guid typeId)
    content.vb: Public Shared Function GetRegisteredTypeForTypeId(typeId As Guid) As Type
    parameters:
    - id: typeId
      type: System.Guid
      description: ''
    return:
      type: System.Type
      description: The typeId.
  overload: Microsoft.Health.ItemTypeManager.GetRegisteredTypeForTypeId*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.ItemTypeManager.RegisterExtensionHandler(System.String,System.Type)
  commentId: M:Microsoft.Health.ItemTypeManager.RegisterExtensionHandler(System.String,System.Type)
  id: RegisterExtensionHandler(System.String,System.Type)
  parent: Microsoft.Health.ItemTypeManager
  langs:
  - csharp
  - vb
  name: RegisterExtensionHandler(String, Type)
  nameWithType: ItemTypeManager.RegisterExtensionHandler(String, Type)
  fullName: Microsoft.Health.ItemTypeManager.RegisterExtensionHandler(System.String, System.Type)
  type: Method
  source:
    remote:
      path: Microsoft.Health/ItemTypeManager.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: RegisterExtensionHandler
    path: ItemTypeManager.cs
    startLine: 395
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nRegisters a deserializer for item extension data.\n"
  remarks: "\nExtension data is available to all applications, and since there is no registration\nmethod for the extensionSource identifiers, collisions between applications are possible.\n\nApplications should be written to be tolerant of the presence of extension data using the\nsame extensionSource but a different schema. It is also recommended that extensionSource be\nspecified the same way .NET namespaces are specified, prefixing the extensionSource with the\ncompany name. \n"
  example: []
  syntax:
    content: public static void RegisterExtensionHandler(string extensionSource, Type itemExtensionClass)
    content.vb: Public Shared Sub RegisterExtensionHandler(extensionSource As String, itemExtensionClass As Type)
    parameters:
    - id: extensionSource
      type: System.String
      description: "\nThe unique identifier for the source of the item extension.\n"
    - id: itemExtensionClass
      type: System.Type
      description: "\nThe class that implements the item extension. It must\nbe public, derive from <xref href=\"Microsoft.Health.HealthRecordItemExtension\" data-throw-if-not-resolved=\"false\"></xref>, \nand have a default constructor.\n"
  overload: Microsoft.Health.ItemTypeManager.RegisterExtensionHandler*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.ItemTypeManager.RegisterExtensionHandler(System.String,System.Type,System.Boolean)
  commentId: M:Microsoft.Health.ItemTypeManager.RegisterExtensionHandler(System.String,System.Type,System.Boolean)
  id: RegisterExtensionHandler(System.String,System.Type,System.Boolean)
  parent: Microsoft.Health.ItemTypeManager
  langs:
  - csharp
  - vb
  name: RegisterExtensionHandler(String, Type, Boolean)
  nameWithType: ItemTypeManager.RegisterExtensionHandler(String, Type, Boolean)
  fullName: Microsoft.Health.ItemTypeManager.RegisterExtensionHandler(System.String, System.Type, System.Boolean)
  type: Method
  source:
    remote:
      path: Microsoft.Health/ItemTypeManager.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: RegisterExtensionHandler
    path: ItemTypeManager.cs
    startLine: 447
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nRegisters a deserializer for item extension data.\n"
  remarks: "\nExtension data is available to all applications, and since there is no registration\nmethod for the extensionSource identifiers, collisions between applications are possible.\n\nApplications should be written to be tolerant of the presence of extension data using the\nsame extensionSource but a different schema. It is also recommended that extensionSource be\nspecified the same way .NET namespaces are specified, prefixing the extensionSource with the\ncompany name. \n"
  example: []
  syntax:
    content: public static void RegisterExtensionHandler(string extensionSource, Type itemExtensionClass, bool overwriteExisting)
    content.vb: Public Shared Sub RegisterExtensionHandler(extensionSource As String, itemExtensionClass As Type, overwriteExisting As Boolean)
    parameters:
    - id: extensionSource
      type: System.String
      description: "\nThe unique identifier for the source of the item extension.\n"
    - id: itemExtensionClass
      type: System.Type
      description: "\nThe class that implements the item extension. It must\nbe public, derive from <xref href=\"Microsoft.Health.HealthRecordItemExtension\" data-throw-if-not-resolved=\"false\"></xref>, \nand have a default constructor.\n"
    - id: overwriteExisting
      type: System.Boolean
      description: "\n<strong>true</strong> to register the new deserializer even if the type\nalready has a deserializer registered; <strong>false</strong> to throw an \nexception because a deserializer is already registered.\n"
  overload: Microsoft.Health.ItemTypeManager.RegisterExtensionHandler*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">extensionSource</span> parameter is <strong>null</strong> or empty or\nthe <span class=\"paramref\">itemExtensionClass</span> parameter does not derive from\n<xref href=\"Microsoft.Health.HealthRecordItemExtension\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <span class=\"paramref\">itemExtensionClass</span> parameter is <strong>null</strong>.\n"
  - type: Microsoft.Health.TypeHandlerAlreadyRegisteredException
    commentId: T:Microsoft.Health.TypeHandlerAlreadyRegisteredException
    description: "\nThe <span class=\"paramref\">extensionSource</span> already has a handler \nregistered and <span class=\"paramref\">overwriteExisting</span> is <strong>false</strong>.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.ItemTypeManager.RegisterApplicationSpecificHandler(System.Guid,System.String,System.Type)
  commentId: M:Microsoft.Health.ItemTypeManager.RegisterApplicationSpecificHandler(System.Guid,System.String,System.Type)
  id: RegisterApplicationSpecificHandler(System.Guid,System.String,System.Type)
  parent: Microsoft.Health.ItemTypeManager
  langs:
  - csharp
  - vb
  name: RegisterApplicationSpecificHandler(Guid, String, Type)
  nameWithType: ItemTypeManager.RegisterApplicationSpecificHandler(Guid, String, Type)
  fullName: Microsoft.Health.ItemTypeManager.RegisterApplicationSpecificHandler(System.Guid, System.String, System.Type)
  type: Method
  source:
    remote:
      path: Microsoft.Health/ItemTypeManager.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: RegisterApplicationSpecificHandler
    path: ItemTypeManager.cs
    startLine: 515
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nRegisters a class as the handler for the application specific health record\nitem type with the specific application ID and subtype tag.\n"
  example: []
  syntax:
    content: public static void RegisterApplicationSpecificHandler(Guid applicationId, string subtypeTag, Type applicationSpecificHandlerClass)
    content.vb: Public Shared Sub RegisterApplicationSpecificHandler(applicationId As Guid, subtypeTag As String, applicationSpecificHandlerClass As Type)
    parameters:
    - id: applicationId
      type: System.Guid
      description: "\nThe application identifier for the application specific data that the\nspecified type will handle.\n"
    - id: subtypeTag
      type: System.String
      description: "\nThe subtype tag for the application specific data that the specified type\nwill handle.\n"
    - id: applicationSpecificHandlerClass
      type: System.Type
      description: "\nThe .NET type that handles parsing of the application specific data for\nthe specified application ID and subtype tag.\n"
  overload: Microsoft.Health.ItemTypeManager.RegisterApplicationSpecificHandler*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">applicationId</span> is <xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref>,\nor <span class=\"paramref\">subtypeTag</span> is \n<strong>null</strong> or empty, or if <span class=\"paramref\">applicationSpecificHandlerClass</span> \ndoes not derive from ApplicationSpecific.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">applicationSpecificHandlerClass</span> is <strong>null</strong>.\n"
  - type: Microsoft.Health.TypeHandlerAlreadyRegisteredException
    commentId: T:Microsoft.Health.TypeHandlerAlreadyRegisteredException
    description: "\nIf a type is already registered to handle the application specific data\nfor the specified <span class=\"paramref\">applicationId</span> and\n<span class=\"paramref\">subtypeTag</span>.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.ItemTypeManager.RegisterApplicationSpecificHandler(System.String,System.String,System.Type)
  commentId: M:Microsoft.Health.ItemTypeManager.RegisterApplicationSpecificHandler(System.String,System.String,System.Type)
  id: RegisterApplicationSpecificHandler(System.String,System.String,System.Type)
  parent: Microsoft.Health.ItemTypeManager
  langs:
  - csharp
  - vb
  name: RegisterApplicationSpecificHandler(String, String, Type)
  nameWithType: ItemTypeManager.RegisterApplicationSpecificHandler(String, String, Type)
  fullName: Microsoft.Health.ItemTypeManager.RegisterApplicationSpecificHandler(System.String, System.String, System.Type)
  type: Method
  source:
    remote:
      path: Microsoft.Health/ItemTypeManager.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: RegisterApplicationSpecificHandler
    path: ItemTypeManager.cs
    startLine: 568
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nRegisters a class as the handler for the application specific health record\nitem type with the specific application ID and subtype tag.\n"
  example: []
  syntax:
    content: public static void RegisterApplicationSpecificHandler(string applicationId, string subtypeTag, Type applicationSpecificHandlerClass)
    content.vb: Public Shared Sub RegisterApplicationSpecificHandler(applicationId As String, subtypeTag As String, applicationSpecificHandlerClass As Type)
    parameters:
    - id: applicationId
      type: System.String
      description: "\nThe application identifier for the application specific data that the\nspecified type will handle.\n"
    - id: subtypeTag
      type: System.String
      description: "\nThe subtype tag for the application specific data that the specified type\nwill handle.\n"
    - id: applicationSpecificHandlerClass
      type: System.Type
      description: "\nThe .NET type that handles parsing of the application specific data for\nthe specified application ID and subtype tag.\n"
  overload: Microsoft.Health.ItemTypeManager.RegisterApplicationSpecificHandler*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">applicationId</span> or <span class=\"paramref\">subtypeTag</span> is \n<strong>null</strong> or empty, or if <span class=\"paramref\">applicationSpecificHandlerClass</span> \ndoes not derive from ApplicationSpecific.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">applicationSpecificHandlerClass</span> is <strong>null</strong>.\n"
  - type: Microsoft.Health.TypeHandlerAlreadyRegisteredException
    commentId: T:Microsoft.Health.TypeHandlerAlreadyRegisteredException
    description: "\nIf a type is already registered to handle the application specific data\nfor the specified <span class=\"paramref\">applicationId</span> and\n<span class=\"paramref\">subtypeTag</span>.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.ItemTypeManager.RegisterApplicationSpecificHandler(System.String,System.String,System.Type,System.Boolean)
  commentId: M:Microsoft.Health.ItemTypeManager.RegisterApplicationSpecificHandler(System.String,System.String,System.Type,System.Boolean)
  id: RegisterApplicationSpecificHandler(System.String,System.String,System.Type,System.Boolean)
  parent: Microsoft.Health.ItemTypeManager
  langs:
  - csharp
  - vb
  name: RegisterApplicationSpecificHandler(String, String, Type, Boolean)
  nameWithType: ItemTypeManager.RegisterApplicationSpecificHandler(String, String, Type, Boolean)
  fullName: Microsoft.Health.ItemTypeManager.RegisterApplicationSpecificHandler(System.String, System.String, System.Type, System.Boolean)
  type: Method
  source:
    remote:
      path: Microsoft.Health/ItemTypeManager.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: RegisterApplicationSpecificHandler
    path: ItemTypeManager.cs
    startLine: 621
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nRegisters a class as the handler for the application specific health record\nitem type with the specific application ID and subtype tag.\n"
  example: []
  syntax:
    content: public static void RegisterApplicationSpecificHandler(string applicationId, string subtypeTag, Type applicationSpecificHandlerClass, bool overwriteExisting)
    content.vb: Public Shared Sub RegisterApplicationSpecificHandler(applicationId As String, subtypeTag As String, applicationSpecificHandlerClass As Type, overwriteExisting As Boolean)
    parameters:
    - id: applicationId
      type: System.String
      description: "\nThe application identifier for the application specific data that the\nspecified type will handle.\n"
    - id: subtypeTag
      type: System.String
      description: "\nThe subtype tag for the application specific data that the specified type\nwill handle.\n"
    - id: applicationSpecificHandlerClass
      type: System.Type
      description: "\nThe .NET type that handles parsing of the application specific data for\nthe specified application ID and subtype tag.\n"
    - id: overwriteExisting
      type: System.Boolean
      description: "\nIf true and an entry exist for the specified <span class=\"paramref\">applicationId</span>\nand <span class=\"paramref\">subtypeTag</span> it will be replaced.\n"
  overload: Microsoft.Health.ItemTypeManager.RegisterApplicationSpecificHandler*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">applicationId</span> or <span class=\"paramref\">subtypeTag</span> is \n<strong>null</strong> or empty, or if <span class=\"paramref\">applicationSpecificHandlerClass</span> \ndoes not derive from ApplicationSpecific.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">applicationSpecificHandlerClass</span> is <strong>null</strong>.\n"
  - type: Microsoft.Health.TypeHandlerAlreadyRegisteredException
    commentId: T:Microsoft.Health.TypeHandlerAlreadyRegisteredException
    description: "\nIf a type is already registered to handle the application specific data\nfor the specified <span class=\"paramref\">applicationId</span> and\n<span class=\"paramref\">subtypeTag</span> and <span class=\"paramref\">overwriteExisting</span> is false.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.ItemTypeManager.DeserializeItem(System.String)
  commentId: M:Microsoft.Health.ItemTypeManager.DeserializeItem(System.String)
  id: DeserializeItem(System.String)
  parent: Microsoft.Health.ItemTypeManager
  langs:
  - csharp
  - vb
  name: DeserializeItem(String)
  nameWithType: ItemTypeManager.DeserializeItem(String)
  fullName: Microsoft.Health.ItemTypeManager.DeserializeItem(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/ItemTypeManager.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DeserializeItem
    path: ItemTypeManager.cs
    startLine: 682
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nConstructs a <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref> or an appropriate derived type for the\nspecified item XML.\n"
  example: []
  syntax:
    content: public static HealthRecordItem DeserializeItem(string itemXml)
    content.vb: Public Shared Function DeserializeItem(itemXml As String) As HealthRecordItem
    parameters:
    - id: itemXml
      type: System.String
      description: "\nThe item XML, including the health record item tag as the root, to be\ndeserialized into a <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    return:
      type: Microsoft.Health.HealthRecordItem
      description: "\nA <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref> or derived type based on the specified item XML.\n"
  overload: Microsoft.Health.ItemTypeManager.DeserializeItem*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(Microsoft.Health.HealthServiceConnection)
  commentId: M:Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(Microsoft.Health.HealthServiceConnection)
  id: GetHealthRecordItemTypeDefinition(Microsoft.Health.HealthServiceConnection)
  parent: Microsoft.Health.ItemTypeManager
  langs:
  - csharp
  - vb
  name: GetHealthRecordItemTypeDefinition(HealthServiceConnection)
  nameWithType: ItemTypeManager.GetHealthRecordItemTypeDefinition(HealthServiceConnection)
  fullName: Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(Microsoft.Health.HealthServiceConnection)
  type: Method
  source:
    remote:
      path: Microsoft.Health/ItemTypeManager.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetHealthRecordItemTypeDefinition
    path: ItemTypeManager.cs
    startLine: 866
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the definitions for all health record item type definitions\nsupported by HealthVault.\n"
  remarks: "\nThis method calls the HealthVault service if the types are not\nalready in the client-side cache.\n"
  example: []
  syntax:
    content: public static IDictionary<Guid, HealthRecordItemTypeDefinition> GetHealthRecordItemTypeDefinition(HealthServiceConnection connection)
    content.vb: Public Shared Function GetHealthRecordItemTypeDefinition(connection As HealthServiceConnection) As IDictionary(Of Guid, HealthRecordItemTypeDefinition)
    parameters:
    - id: connection
      type: Microsoft.Health.HealthServiceConnection
      description: "\nA connection to the HealthVault service.\n"
    return:
      type: System.Collections.Generic.IDictionary{System.Guid,Microsoft.Health.HealthRecordItemTypeDefinition}
      description: "\nThe type definitions for all health record item type definitions\nsupported by HealthVault.\n"
  overload: Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> parameter is <strong>null</strong>.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList{System.Guid},System.Nullable{System.DateTime},Microsoft.Health.HealthServiceConnection)
  commentId: M:Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList{System.Guid},System.Nullable{System.DateTime},Microsoft.Health.HealthServiceConnection)
  id: GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList{System.Guid},System.Nullable{System.DateTime},Microsoft.Health.HealthServiceConnection)
  parent: Microsoft.Health.ItemTypeManager
  langs:
  - csharp
  - vb
  name: GetHealthRecordItemTypeDefinition(IList<Guid>, Nullable<DateTime>, HealthServiceConnection)
  nameWithType: ItemTypeManager.GetHealthRecordItemTypeDefinition(IList<Guid>, Nullable<DateTime>, HealthServiceConnection)
  fullName: Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList<System.Guid>, System.Nullable<System.DateTime>, Microsoft.Health.HealthServiceConnection)
  type: Method
  source:
    remote:
      path: Microsoft.Health/ItemTypeManager.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetHealthRecordItemTypeDefinition
    path: ItemTypeManager.cs
    startLine: 917
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the definitions for all health record item type definitions\nsupported by HealthVault only if they have been updated since the \nspecified last client refresh date.\n"
  remarks: "\nThis method calls the HealthVault service if the types are not\nalready in the client-side cache.\n"
  example: []
  syntax:
    content: public static IDictionary<Guid, HealthRecordItemTypeDefinition> GetHealthRecordItemTypeDefinition(IList<Guid> typeIds, DateTime? lastClientRefreshDate, HealthServiceConnection connection)
    content.vb: Public Shared Function GetHealthRecordItemTypeDefinition(typeIds As IList(Of Guid), lastClientRefreshDate As Date?, connection As HealthServiceConnection) As IDictionary(Of Guid, HealthRecordItemTypeDefinition)
    parameters:
    - id: typeIds
      type: System.Collections.Generic.IList{System.Guid}
      description: "\nA collection of health record items whose details are being requested. Null indicates \nthat all health item records should be returned.\n"
    - id: lastClientRefreshDate
      type: System.Nullable{System.DateTime}
      description: "\nA <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> instance that specifies the time of the last refresh\nmade by the client.\n"
    - id: connection
      type: Microsoft.Health.HealthServiceConnection
      description: "\nA connection to the HealthVault service.\n"
    return:
      type: System.Collections.Generic.IDictionary{System.Guid,Microsoft.Health.HealthRecordItemTypeDefinition}
      description: "\nThe type definitions for the specified types, or empty if the\n<span class=\"paramref\">typeIds</span> parameter does not represent a known unique\ntype identifier.\n"
  overload: Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">typeIds</span> is <strong>null</strong> and empty, or \n<span class=\"paramref\">typeIds</span> is <strong>null</strong> and member in <span class=\"paramref\">typeIds</span> is \n<xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> parameter is <strong>null</strong>.\n"
  nameWithType.vb: ItemTypeManager.GetHealthRecordItemTypeDefinition(IList(Of Guid), Nullable(Of DateTime), HealthServiceConnection)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList(Of System.Guid), System.Nullable(Of System.DateTime), Microsoft.Health.HealthServiceConnection)
  name.vb: GetHealthRecordItemTypeDefinition(IList(Of Guid), Nullable(Of DateTime), HealthServiceConnection)
- uid: Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList{System.Guid},Microsoft.Health.HealthRecordItemTypeSections,Microsoft.Health.HealthServiceConnection)
  commentId: M:Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList{System.Guid},Microsoft.Health.HealthRecordItemTypeSections,Microsoft.Health.HealthServiceConnection)
  id: GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList{System.Guid},Microsoft.Health.HealthRecordItemTypeSections,Microsoft.Health.HealthServiceConnection)
  parent: Microsoft.Health.ItemTypeManager
  langs:
  - csharp
  - vb
  name: GetHealthRecordItemTypeDefinition(IList<Guid>, HealthRecordItemTypeSections, HealthServiceConnection)
  nameWithType: ItemTypeManager.GetHealthRecordItemTypeDefinition(IList<Guid>, HealthRecordItemTypeSections, HealthServiceConnection)
  fullName: Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList<System.Guid>, Microsoft.Health.HealthRecordItemTypeSections, Microsoft.Health.HealthServiceConnection)
  type: Method
  source:
    remote:
      path: Microsoft.Health/ItemTypeManager.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetHealthRecordItemTypeDefinition
    path: ItemTypeManager.cs
    startLine: 969
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the requested definitions for the specified health record item type definitions\nsupported by HealthVault.\n"
  remarks: "\nThis method calls the HealthVault service if the types are not\nalready in the client-side cache.\n"
  example: []
  syntax:
    content: public static IDictionary<Guid, HealthRecordItemTypeDefinition> GetHealthRecordItemTypeDefinition(IList<Guid> typeIds, HealthRecordItemTypeSections sections, HealthServiceConnection connection)
    content.vb: Public Shared Function GetHealthRecordItemTypeDefinition(typeIds As IList(Of Guid), sections As HealthRecordItemTypeSections, connection As HealthServiceConnection) As IDictionary(Of Guid, HealthRecordItemTypeDefinition)
    parameters:
    - id: typeIds
      type: System.Collections.Generic.IList{System.Guid}
      description: "\nA collection of health item record type Ids whose details are being requested. Null \nindicates that all health item record types should be returned.\n"
    - id: sections
      type: Microsoft.Health.HealthRecordItemTypeSections
      description: "\nA collection of HealthRecordItemTypeSections enumeration values that indicate the type of\ndetails to be returned for the specified health item record(s).\n"
    - id: connection
      type: Microsoft.Health.HealthServiceConnection
      description: "\nA connection to the HealthVault service.\n"
    return:
      type: System.Collections.Generic.IDictionary{System.Guid,Microsoft.Health.HealthRecordItemTypeDefinition}
      description: "\nThe type definitions for the specified types, or empty if the\n<span class=\"paramref\">typeIds</span> parameter does not represent a known unique\ntype identifier.\n"
  overload: Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">typeIds</span> is <strong>null</strong> and empty, or \n<span class=\"paramref\">typeIds</span> is <strong>null</strong> and member in <span class=\"paramref\">typeIds</span> is \n<xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> parameter is <strong>null</strong>.\n"
  nameWithType.vb: ItemTypeManager.GetHealthRecordItemTypeDefinition(IList(Of Guid), HealthRecordItemTypeSections, HealthServiceConnection)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList(Of System.Guid), Microsoft.Health.HealthRecordItemTypeSections, Microsoft.Health.HealthServiceConnection)
  name.vb: GetHealthRecordItemTypeDefinition(IList(Of Guid), HealthRecordItemTypeSections, HealthServiceConnection)
- uid: Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList{System.Guid},Microsoft.Health.HealthRecordItemTypeSections,System.Nullable{System.DateTime},Microsoft.Health.HealthServiceConnection)
  commentId: M:Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList{System.Guid},Microsoft.Health.HealthRecordItemTypeSections,System.Nullable{System.DateTime},Microsoft.Health.HealthServiceConnection)
  id: GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList{System.Guid},Microsoft.Health.HealthRecordItemTypeSections,System.Nullable{System.DateTime},Microsoft.Health.HealthServiceConnection)
  parent: Microsoft.Health.ItemTypeManager
  langs:
  - csharp
  - vb
  name: GetHealthRecordItemTypeDefinition(IList<Guid>, HealthRecordItemTypeSections, Nullable<DateTime>, HealthServiceConnection)
  nameWithType: ItemTypeManager.GetHealthRecordItemTypeDefinition(IList<Guid>, HealthRecordItemTypeSections, Nullable<DateTime>, HealthServiceConnection)
  fullName: Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList<System.Guid>, Microsoft.Health.HealthRecordItemTypeSections, System.Nullable<System.DateTime>, Microsoft.Health.HealthServiceConnection)
  type: Method
  source:
    remote:
      path: Microsoft.Health/ItemTypeManager.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetHealthRecordItemTypeDefinition
    path: ItemTypeManager.cs
    startLine: 1026
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the requested health record item type definitions supported by HealthVault \nonly if they have been updated since the specified last client refresh date.\n"
  remarks: "\nThis method calls the HealthVault service if the types are not\nalready in the client-side cache.\n"
  example: []
  syntax:
    content: public static IDictionary<Guid, HealthRecordItemTypeDefinition> GetHealthRecordItemTypeDefinition(IList<Guid> typeIds, HealthRecordItemTypeSections sections, DateTime? lastClientRefreshDate, HealthServiceConnection connection)
    content.vb: Public Shared Function GetHealthRecordItemTypeDefinition(typeIds As IList(Of Guid), sections As HealthRecordItemTypeSections, lastClientRefreshDate As Date?, connection As HealthServiceConnection) As IDictionary(Of Guid, HealthRecordItemTypeDefinition)
    parameters:
    - id: typeIds
      type: System.Collections.Generic.IList{System.Guid}
      description: "\nA collection of health item type IDs whose details are being requested. Null \nindicates that all health item types should be returned.\n"
    - id: sections
      type: Microsoft.Health.HealthRecordItemTypeSections
      description: "\nA collection of HealthRecordItemTypeSections enumeration values that indicate the type of\ndetails to be returned for the specified health item record(s).\n"
    - id: lastClientRefreshDate
      type: System.Nullable{System.DateTime}
      description: "\nA <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> instance that specifies the time of the last refresh\nmade by the client.\n"
    - id: connection
      type: Microsoft.Health.HealthServiceConnection
      description: "\nA connection to the HealthVault service.\n"
    return:
      type: System.Collections.Generic.IDictionary{System.Guid,Microsoft.Health.HealthRecordItemTypeDefinition}
      description: "\nThe type definitions for the specified types, or empty if the\n<span class=\"paramref\">typeIds</span> parameter does not represent a known unique\ntype identifier.\n"
  overload: Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">typeIds</span> is <strong>null</strong> and empty, or \n<span class=\"paramref\">typeIds</span> is <strong>null</strong> and member in <span class=\"paramref\">typeIds</span> is \n<xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> parameter is <strong>null</strong>.\n"
  nameWithType.vb: ItemTypeManager.GetHealthRecordItemTypeDefinition(IList(Of Guid), HealthRecordItemTypeSections, Nullable(Of DateTime), HealthServiceConnection)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList(Of System.Guid), Microsoft.Health.HealthRecordItemTypeSections, System.Nullable(Of System.DateTime), Microsoft.Health.HealthServiceConnection)
  name.vb: GetHealthRecordItemTypeDefinition(IList(Of Guid), HealthRecordItemTypeSections, Nullable(Of DateTime), HealthServiceConnection)
- uid: Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(Microsoft.Health.HealthRecordItemTypeSections,Microsoft.Health.HealthServiceConnection)
  commentId: M:Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(Microsoft.Health.HealthRecordItemTypeSections,Microsoft.Health.HealthServiceConnection)
  id: GetHealthRecordItemTypeDefinition(Microsoft.Health.HealthRecordItemTypeSections,Microsoft.Health.HealthServiceConnection)
  parent: Microsoft.Health.ItemTypeManager
  langs:
  - csharp
  - vb
  name: GetHealthRecordItemTypeDefinition(HealthRecordItemTypeSections, HealthServiceConnection)
  nameWithType: ItemTypeManager.GetHealthRecordItemTypeDefinition(HealthRecordItemTypeSections, HealthServiceConnection)
  fullName: Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(Microsoft.Health.HealthRecordItemTypeSections, Microsoft.Health.HealthServiceConnection)
  type: Method
  source:
    remote:
      path: Microsoft.Health/ItemTypeManager.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetHealthRecordItemTypeDefinition
    path: ItemTypeManager.cs
    startLine: 1067
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the definitions for all health record item type definitions\nsupported by HealthVault.\n"
  remarks: "\nThis method calls the HealthVault service if the types are not\nalready in the client-side cache.\n"
  example: []
  syntax:
    content: public static IDictionary<Guid, HealthRecordItemTypeDefinition> GetHealthRecordItemTypeDefinition(HealthRecordItemTypeSections sections, HealthServiceConnection connection)
    content.vb: Public Shared Function GetHealthRecordItemTypeDefinition(sections As HealthRecordItemTypeSections, connection As HealthServiceConnection) As IDictionary(Of Guid, HealthRecordItemTypeDefinition)
    parameters:
    - id: sections
      type: Microsoft.Health.HealthRecordItemTypeSections
      description: "\nA collection of HealthRecordItemTypeSections enumeration values that indicate the type of\ndetails to be returned for the specified health item record(s).\n"
    - id: connection
      type: Microsoft.Health.HealthServiceConnection
      description: "\nA connection to the HealthVault service.\n"
    return:
      type: System.Collections.Generic.IDictionary{System.Guid,Microsoft.Health.HealthRecordItemTypeDefinition}
      description: "\nThe type definitions for all the health record item type definitions\nsupported by HealthVault.\n"
  overload: Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> parameter is <strong>null</strong>.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList{System.Guid},Microsoft.Health.HealthRecordItemTypeSections,System.Collections.Generic.IList{System.String},System.Nullable{System.DateTime},Microsoft.Health.HealthServiceConnection)
  commentId: M:Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList{System.Guid},Microsoft.Health.HealthRecordItemTypeSections,System.Collections.Generic.IList{System.String},System.Nullable{System.DateTime},Microsoft.Health.HealthServiceConnection)
  id: GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList{System.Guid},Microsoft.Health.HealthRecordItemTypeSections,System.Collections.Generic.IList{System.String},System.Nullable{System.DateTime},Microsoft.Health.HealthServiceConnection)
  parent: Microsoft.Health.ItemTypeManager
  langs:
  - csharp
  - vb
  name: GetHealthRecordItemTypeDefinition(IList<Guid>, HealthRecordItemTypeSections, IList<String>, Nullable<DateTime>, HealthServiceConnection)
  nameWithType: ItemTypeManager.GetHealthRecordItemTypeDefinition(IList<Guid>, HealthRecordItemTypeSections, IList<String>, Nullable<DateTime>, HealthServiceConnection)
  fullName: Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList<System.Guid>, Microsoft.Health.HealthRecordItemTypeSections, System.Collections.Generic.IList<System.String>, System.Nullable<System.DateTime>, Microsoft.Health.HealthServiceConnection)
  type: Method
  source:
    remote:
      path: Microsoft.Health/ItemTypeManager.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetHealthRecordItemTypeDefinition
    path: ItemTypeManager.cs
    startLine: 1131
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the definitions for one or more health record item type definitions\nsupported by HealthVault.\n"
  remarks: "\nThis method calls the HealthVault service if the types are not\nalready in the client-side cache.\n"
  example: []
  syntax:
    content: public static IDictionary<Guid, HealthRecordItemTypeDefinition> GetHealthRecordItemTypeDefinition(IList<Guid> typeIds, HealthRecordItemTypeSections sections, IList<string> imageTypes, DateTime? lastClientRefreshDate, HealthServiceConnection connection)
    content.vb: Public Shared Function GetHealthRecordItemTypeDefinition(typeIds As IList(Of Guid), sections As HealthRecordItemTypeSections, imageTypes As IList(Of String), lastClientRefreshDate As Date?, connection As HealthServiceConnection) As IDictionary(Of Guid, HealthRecordItemTypeDefinition)
    parameters:
    - id: typeIds
      type: System.Collections.Generic.IList{System.Guid}
      description: "\nA collection of health item type IDs whose details are being requested. Null \nindicates that all health item types should be returned.\n"
    - id: sections
      type: Microsoft.Health.HealthRecordItemTypeSections
      description: "\nA collection of HealthRecordItemTypeSections enumeration values that indicate the type \nof details to be returned for the specified health item records(s).\n"
    - id: imageTypes
      type: System.Collections.Generic.IList{System.String}
      description: "\nA collection of strings that identify which health item record images should be \nretrieved.\n\nThis requests an image of the specified mime type should be returned. For example, \nto request a GIF image, \"image/gif\" should be specified. For icons, \"image/vnd.microsoft.icon\" \nshould be specified. Note, not all health item records will have all image types and \nsome may not have any images at all.\n\nIf '*' is specified, all image types will be returned.\n"
    - id: lastClientRefreshDate
      type: System.Nullable{System.DateTime}
      description: "\nA <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> instance that specifies the time of the last refresh\nmade by the client.\n"
    - id: connection
      type: Microsoft.Health.HealthServiceConnection
      description: "\nA connection to the HealthVault service.\n"
    return:
      type: System.Collections.Generic.IDictionary{System.Guid,Microsoft.Health.HealthRecordItemTypeDefinition}
      description: "\nThe type definitions for the specified types, or empty if the\n<span class=\"paramref\">typeIds</span> parameter does not represent a known unique\ntype identifier.\n"
  overload: Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">typeIds</span> is <strong>null</strong> and empty, or \n<span class=\"paramref\">typeIds</span> is <strong>null</strong> and member in <span class=\"paramref\">typeIds</span> is \n<xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> parameter is <strong>null</strong>.\n"
  nameWithType.vb: ItemTypeManager.GetHealthRecordItemTypeDefinition(IList(Of Guid), HealthRecordItemTypeSections, IList(Of String), Nullable(Of DateTime), HealthServiceConnection)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList(Of System.Guid), Microsoft.Health.HealthRecordItemTypeSections, System.Collections.Generic.IList(Of System.String), System.Nullable(Of System.DateTime), Microsoft.Health.HealthServiceConnection)
  name.vb: GetHealthRecordItemTypeDefinition(IList(Of Guid), HealthRecordItemTypeSections, IList(Of String), Nullable(Of DateTime), HealthServiceConnection)
- uid: Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Guid,Microsoft.Health.HealthServiceConnection)
  commentId: M:Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Guid,Microsoft.Health.HealthServiceConnection)
  id: GetHealthRecordItemTypeDefinition(System.Guid,Microsoft.Health.HealthServiceConnection)
  parent: Microsoft.Health.ItemTypeManager
  langs:
  - csharp
  - vb
  name: GetHealthRecordItemTypeDefinition(Guid, HealthServiceConnection)
  nameWithType: ItemTypeManager.GetHealthRecordItemTypeDefinition(Guid, HealthServiceConnection)
  fullName: Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Guid, Microsoft.Health.HealthServiceConnection)
  type: Method
  source:
    remote:
      path: Microsoft.Health/ItemTypeManager.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetHealthRecordItemTypeDefinition
    path: ItemTypeManager.cs
    startLine: 1177
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the definition for a health record item type.\n"
  remarks: "\nThis method calls the HealthVault service if the type is not\nalready in the client-side cache.\n"
  example: []
  syntax:
    content: public static HealthRecordItemTypeDefinition GetHealthRecordItemTypeDefinition(Guid typeId, HealthServiceConnection connection)
    content.vb: Public Shared Function GetHealthRecordItemTypeDefinition(typeId As Guid, connection As HealthServiceConnection) As HealthRecordItemTypeDefinition
    parameters:
    - id: typeId
      type: System.Guid
      description: "\nThe unique identifier for the type to get the definition of.\n"
    - id: connection
      type: Microsoft.Health.HealthServiceConnection
      description: "\nA connection to the HealthVault service.\n"
    return:
      type: Microsoft.Health.HealthRecordItemTypeDefinition
      description: "\nThe type definition for the specified type, or <strong>null</strong> if the\n<span class=\"paramref\">typeId</span> parameter does not represent a known unique\ntype identifier.\n"
  overload: Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">typeId</span> parameter is Guid.Empty.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <span class=\"paramref\">connection</span> parameter is <strong>null</strong>.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList{System.Guid},Microsoft.Health.HealthServiceConnection)
  commentId: M:Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList{System.Guid},Microsoft.Health.HealthServiceConnection)
  id: GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList{System.Guid},Microsoft.Health.HealthServiceConnection)
  parent: Microsoft.Health.ItemTypeManager
  langs:
  - csharp
  - vb
  name: GetHealthRecordItemTypeDefinition(IList<Guid>, HealthServiceConnection)
  nameWithType: ItemTypeManager.GetHealthRecordItemTypeDefinition(IList<Guid>, HealthServiceConnection)
  fullName: Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList<System.Guid>, Microsoft.Health.HealthServiceConnection)
  type: Method
  source:
    remote:
      path: Microsoft.Health/ItemTypeManager.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetHealthRecordItemTypeDefinition
    path: ItemTypeManager.cs
    startLine: 1220
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the definition of one or more health record item type definitions\nsupported by HealthVault.\n"
  remarks: "\nThis method calls the HealthVault service if the types are not\nalready in the client-side cache.\n"
  example: []
  syntax:
    content: public static IDictionary<Guid, HealthRecordItemTypeDefinition> GetHealthRecordItemTypeDefinition(IList<Guid> typeIds, HealthServiceConnection connection)
    content.vb: Public Shared Function GetHealthRecordItemTypeDefinition(typeIds As IList(Of Guid), connection As HealthServiceConnection) As IDictionary(Of Guid, HealthRecordItemTypeDefinition)
    parameters:
    - id: typeIds
      type: System.Collections.Generic.IList{System.Guid}
      description: "\nThe unique identifiers for the type to get the definition of.\n"
    - id: connection
      type: Microsoft.Health.HealthServiceConnection
      description: "\nA connection to the HealthVault service.\n"
    return:
      type: System.Collections.Generic.IDictionary{System.Guid,Microsoft.Health.HealthRecordItemTypeDefinition}
      description: "\nThe type definitions for the specified types, or empty if the\n<span class=\"paramref\">typeIds</span> parameter does not represent a known unique\ntype identifier.\n"
  overload: Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">typeIds</span> is <strong>null</strong> and empty, or \n<span class=\"paramref\">typeIds</span> is <strong>null</strong> and member in <span class=\"paramref\">typeIds</span> is \n<xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> parameter is <strong>null</strong>.\n"
  nameWithType.vb: ItemTypeManager.GetHealthRecordItemTypeDefinition(IList(Of Guid), HealthServiceConnection)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList(Of System.Guid), Microsoft.Health.HealthServiceConnection)
  name.vb: GetHealthRecordItemTypeDefinition(IList(Of Guid), HealthServiceConnection)
- uid: Microsoft.Health.ItemTypeManager.GetBaseHealthRecordItemTypeDefinition(Microsoft.Health.HealthServiceConnection)
  commentId: M:Microsoft.Health.ItemTypeManager.GetBaseHealthRecordItemTypeDefinition(Microsoft.Health.HealthServiceConnection)
  id: GetBaseHealthRecordItemTypeDefinition(Microsoft.Health.HealthServiceConnection)
  parent: Microsoft.Health.ItemTypeManager
  langs:
  - csharp
  - vb
  name: GetBaseHealthRecordItemTypeDefinition(HealthServiceConnection)
  nameWithType: ItemTypeManager.GetBaseHealthRecordItemTypeDefinition(HealthServiceConnection)
  fullName: Microsoft.Health.ItemTypeManager.GetBaseHealthRecordItemTypeDefinition(Microsoft.Health.HealthServiceConnection)
  type: Method
  source:
    remote:
      path: Microsoft.Health/ItemTypeManager.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetBaseHealthRecordItemTypeDefinition
    path: ItemTypeManager.cs
    startLine: 1252
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the health record item type definition for the base item type.\n"
  remarks: "\nThe base item type is a constructed item type that contains\ndefinitions of the standard item transforms that will work \nfor any item type. If a specific item type does not define a \nstandard transformation, the base item type transformation can\nbe used instead.\n<br /><br />\nThis method calls the HealthVault service if the type is not\nalready in the client-side cache.\n"
  example: []
  syntax:
    content: public static HealthRecordItemTypeDefinition GetBaseHealthRecordItemTypeDefinition(HealthServiceConnection connection)
    content.vb: Public Shared Function GetBaseHealthRecordItemTypeDefinition(connection As HealthServiceConnection) As HealthRecordItemTypeDefinition
    parameters:
    - id: connection
      type: Microsoft.Health.HealthServiceConnection
      description: "\nA connection to the HealthVault service.\n"
    return:
      type: Microsoft.Health.HealthRecordItemTypeDefinition
  overload: Microsoft.Health.ItemTypeManager.GetBaseHealthRecordItemTypeDefinition*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <span class=\"paramref\">connection</span> parameter is <strong>null</strong>.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.ItemTypeManager.ClearItemTypeCache
  commentId: M:Microsoft.Health.ItemTypeManager.ClearItemTypeCache
  id: ClearItemTypeCache
  parent: Microsoft.Health.ItemTypeManager
  langs:
  - csharp
  - vb
  name: ClearItemTypeCache()
  nameWithType: ItemTypeManager.ClearItemTypeCache()
  fullName: Microsoft.Health.ItemTypeManager.ClearItemTypeCache()
  type: Method
  source:
    remote:
      path: Microsoft.Health/ItemTypeManager.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ClearItemTypeCache
    path: ItemTypeManager.cs
    startLine: 1262
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nRemoves all item type definitions from the client-side cache.\n"
  example: []
  syntax:
    content: public static void ClearItemTypeCache()
    content.vb: Public Shared Sub ClearItemTypeCache
  overload: Microsoft.Health.ItemTypeManager.ClearItemTypeCache*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.HealthRecordItem
  commentId: T:Microsoft.Health.HealthRecordItem
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordItem
  nameWithType: HealthRecordItem
  fullName: Microsoft.Health.HealthRecordItem
- uid: Microsoft.Health.ItemTypeManager.RegisterTypeHandler*
  commentId: Overload:Microsoft.Health.ItemTypeManager.RegisterTypeHandler
  isExternal: false
  name: RegisterTypeHandler
  nameWithType: ItemTypeManager.RegisterTypeHandler
  fullName: Microsoft.Health.ItemTypeManager.RegisterTypeHandler
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Guid.Empty
  commentId: F:System.Guid.Empty
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: Microsoft.Health.TypeHandlerAlreadyRegisteredException
  commentId: T:Microsoft.Health.TypeHandlerAlreadyRegisteredException
  isExternal: false
  name: TypeHandlerAlreadyRegisteredException
  nameWithType: TypeHandlerAlreadyRegisteredException
  fullName: Microsoft.Health.TypeHandlerAlreadyRegisteredException
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(Microsoft.Health.HealthServiceConnection)
  commentId: M:Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(Microsoft.Health.HealthServiceConnection)
- uid: Microsoft.Health.ItemTypeManager.RegisteredTypes*
  commentId: Overload:Microsoft.Health.ItemTypeManager.RegisteredTypes
  isExternal: false
  name: RegisteredTypes
  nameWithType: ItemTypeManager.RegisteredTypes
  fullName: Microsoft.Health.ItemTypeManager.RegisteredTypes
- uid: System.Collections.Generic.IDictionary{System.Guid,System.Type}
  commentId: T:System.Collections.Generic.IDictionary{System.Guid,System.Type}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<Guid, Type>
  nameWithType: IDictionary<Guid, Type>
  fullName: System.Collections.Generic.IDictionary<System.Guid, System.Type>
  nameWithType.vb: IDictionary(Of Guid, Type)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.Guid, System.Type)
  name.vb: IDictionary(Of Guid, Type)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Health.ItemTypeManager.GetRegisteredTypeForTypeId*
  commentId: Overload:Microsoft.Health.ItemTypeManager.GetRegisteredTypeForTypeId
  isExternal: false
  name: GetRegisteredTypeForTypeId
  nameWithType: ItemTypeManager.GetRegisteredTypeForTypeId
  fullName: Microsoft.Health.ItemTypeManager.GetRegisteredTypeForTypeId
- uid: Microsoft.Health.HealthRecordItemExtension
  commentId: T:Microsoft.Health.HealthRecordItemExtension
  isExternal: false
  name: HealthRecordItemExtension
  nameWithType: HealthRecordItemExtension
  fullName: Microsoft.Health.HealthRecordItemExtension
- uid: Microsoft.Health.ItemTypeManager.RegisterExtensionHandler*
  commentId: Overload:Microsoft.Health.ItemTypeManager.RegisterExtensionHandler
  isExternal: false
  name: RegisterExtensionHandler
  nameWithType: ItemTypeManager.RegisterExtensionHandler
  fullName: Microsoft.Health.ItemTypeManager.RegisterExtensionHandler
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Health.ItemTypeManager.RegisterApplicationSpecificHandler*
  commentId: Overload:Microsoft.Health.ItemTypeManager.RegisterApplicationSpecificHandler
  isExternal: false
  name: RegisterApplicationSpecificHandler
  nameWithType: ItemTypeManager.RegisterApplicationSpecificHandler
  fullName: Microsoft.Health.ItemTypeManager.RegisterApplicationSpecificHandler
- uid: Microsoft.Health.ItemTypeManager.DeserializeItem*
  commentId: Overload:Microsoft.Health.ItemTypeManager.DeserializeItem
  isExternal: false
  name: DeserializeItem
  nameWithType: ItemTypeManager.DeserializeItem
  fullName: Microsoft.Health.ItemTypeManager.DeserializeItem
- uid: Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition*
  commentId: Overload:Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition
  isExternal: false
  name: GetHealthRecordItemTypeDefinition
  nameWithType: ItemTypeManager.GetHealthRecordItemTypeDefinition
  fullName: Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition
- uid: Microsoft.Health.HealthServiceConnection
  commentId: T:Microsoft.Health.HealthServiceConnection
  parent: Microsoft.Health
  isExternal: false
  name: HealthServiceConnection
  nameWithType: HealthServiceConnection
  fullName: Microsoft.Health.HealthServiceConnection
- uid: System.Collections.Generic.IDictionary{System.Guid,Microsoft.Health.HealthRecordItemTypeDefinition}
  commentId: T:System.Collections.Generic.IDictionary{System.Guid,Microsoft.Health.HealthRecordItemTypeDefinition}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<Guid, HealthRecordItemTypeDefinition>
  nameWithType: IDictionary<Guid, HealthRecordItemTypeDefinition>
  fullName: System.Collections.Generic.IDictionary<System.Guid, Microsoft.Health.HealthRecordItemTypeDefinition>
  nameWithType.vb: IDictionary(Of Guid, HealthRecordItemTypeDefinition)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.Guid, Microsoft.Health.HealthRecordItemTypeDefinition)
  name.vb: IDictionary(Of Guid, HealthRecordItemTypeDefinition)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.HealthRecordItemTypeDefinition
    name: HealthRecordItemTypeDefinition
    nameWithType: HealthRecordItemTypeDefinition
    fullName: Microsoft.Health.HealthRecordItemTypeDefinition
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.HealthRecordItemTypeDefinition
    name: HealthRecordItemTypeDefinition
    nameWithType: HealthRecordItemTypeDefinition
    fullName: Microsoft.Health.HealthRecordItemTypeDefinition
  - name: )
    nameWithType: )
    fullName: )
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Collections.Generic.IList{System.Guid}
  commentId: T:System.Collections.Generic.IList{System.Guid}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Guid>
  nameWithType: IList<Guid>
  fullName: System.Collections.Generic.IList<System.Guid>
  nameWithType.vb: IList(Of Guid)
  fullName.vb: System.Collections.Generic.IList(Of System.Guid)
  name.vb: IList(Of Guid)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.DateTime}
  commentId: T:System.Nullable{System.DateTime}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTime>
  nameWithType: Nullable<DateTime>
  fullName: System.Nullable<System.DateTime>
  nameWithType.vb: Nullable(Of DateTime)
  fullName.vb: System.Nullable(Of System.DateTime)
  name.vb: Nullable(Of DateTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthRecordItemTypeSections
  commentId: T:Microsoft.Health.HealthRecordItemTypeSections
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordItemTypeSections
  nameWithType: HealthRecordItemTypeSections
  fullName: Microsoft.Health.HealthRecordItemTypeSections
- uid: System.Collections.Generic.IList{System.String}
  commentId: T:System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  nameWithType.vb: IList(Of String)
  fullName.vb: System.Collections.Generic.IList(Of System.String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthRecordItemTypeDefinition
  commentId: T:Microsoft.Health.HealthRecordItemTypeDefinition
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordItemTypeDefinition
  nameWithType: HealthRecordItemTypeDefinition
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition
- uid: Microsoft.Health.ItemTypeManager.GetBaseHealthRecordItemTypeDefinition*
  commentId: Overload:Microsoft.Health.ItemTypeManager.GetBaseHealthRecordItemTypeDefinition
  isExternal: false
  name: GetBaseHealthRecordItemTypeDefinition
  nameWithType: ItemTypeManager.GetBaseHealthRecordItemTypeDefinition
  fullName: Microsoft.Health.ItemTypeManager.GetBaseHealthRecordItemTypeDefinition
- uid: Microsoft.Health.ItemTypeManager.ClearItemTypeCache*
  commentId: Overload:Microsoft.Health.ItemTypeManager.ClearItemTypeCache
  isExternal: false
  name: ClearItemTypeCache
  nameWithType: ItemTypeManager.ClearItemTypeCache
  fullName: Microsoft.Health.ItemTypeManager.ClearItemTypeCache
