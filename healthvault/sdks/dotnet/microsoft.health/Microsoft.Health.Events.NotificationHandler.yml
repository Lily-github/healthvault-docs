### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.Events.NotificationHandler
  commentId: T:Microsoft.Health.Events.NotificationHandler
  id: NotificationHandler
  parent: Microsoft.Health.Events
  children:
  - Microsoft.Health.Events.NotificationHandler.ProcessNotificationXml(System.String)
  - Microsoft.Health.Events.NotificationHandler.RecordChanged
  langs:
  - csharp
  - vb
  name: NotificationHandler
  nameWithType: NotificationHandler
  fullName: Microsoft.Health.Events.NotificationHandler
  type: Class
  source:
    remote:
      path: Microsoft.Health/Eventing/NotificationHandler.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: NotificationHandler
    path: Eventing/NotificationHandler.cs
    startLine: 25
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Events
  summary: "\nA class to make processing event notifications simpler.\n"
  remarks: "\nTo use this class, create an instance and then hook a delegate to the\nevent the application is interested in. Then, call the <xref href=\"Microsoft.Health.Events.NotificationHandler.ProcessNotificationXml(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\nmethod and pass in the notication XML from the HealthVault service. The\nmethod will parse the XML, find the notifications in it, and fire the \nappropriate event. \n"
  example: []
  syntax:
    content: public class NotificationHandler
    content.vb: Public Class NotificationHandler
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.Events.NotificationHandler.ProcessNotificationXml(System.String)
  commentId: M:Microsoft.Health.Events.NotificationHandler.ProcessNotificationXml(System.String)
  id: ProcessNotificationXml(System.String)
  parent: Microsoft.Health.Events.NotificationHandler
  langs:
  - csharp
  - vb
  name: ProcessNotificationXml(String)
  nameWithType: NotificationHandler.ProcessNotificationXml(String)
  fullName: Microsoft.Health.Events.NotificationHandler.ProcessNotificationXml(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/Eventing/NotificationHandler.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ProcessNotificationXml
    path: Eventing/NotificationHandler.cs
    startLine: 59
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Events
  summary: "\nParses the notification XML from the HealthVault service and dispatches to event handlers.\n"
  example: []
  syntax:
    content: public void ProcessNotificationXml(string notificationXml)
    content.vb: Public Sub ProcessNotificationXml(notificationXml As String)
    parameters:
    - id: notificationXml
      type: System.String
      description: The notification XML from the HealthVault service.
  overload: Microsoft.Health.Events.NotificationHandler.ProcessNotificationXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <span class=\"paramref\">notificationXml</span> parameter is <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">notificationXml</span> does not contain a notifications node.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Events.NotificationHandler.RecordChanged
  commentId: E:Microsoft.Health.Events.NotificationHandler.RecordChanged
  id: RecordChanged
  parent: Microsoft.Health.Events.NotificationHandler
  langs:
  - csharp
  - vb
  name: RecordChanged
  nameWithType: NotificationHandler.RecordChanged
  fullName: Microsoft.Health.Events.NotificationHandler.RecordChanged
  type: Event
  source:
    remote:
      path: Microsoft.Health/Eventing/NotificationHandler.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: RecordChanged
    path: Eventing/NotificationHandler.cs
    startLine: 139
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Events
  summary: "\nThe record changed event.\n"
  remarks: "\nThis event is called when the <xref href=\"Microsoft.Health.Events.NotificationHandler.ProcessNotificationXml(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method is called and the \nXML that is passed to it contains record changed notifications.\n"
  example: []
  syntax:
    content: public event EventHandler<HealthRecordItemChangedEventArgs> RecordChanged
    content.vb: Public Event RecordChanged As EventHandler(Of HealthRecordItemChangedEventArgs)
    return:
      type: System.EventHandler{Microsoft.Health.Events.HealthRecordItemChangedEventArgs}
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Health.Events.NotificationHandler.ProcessNotificationXml(System.String)
  commentId: M:Microsoft.Health.Events.NotificationHandler.ProcessNotificationXml(System.String)
- uid: Microsoft.Health.Events
  commentId: N:Microsoft.Health.Events
  isExternal: false
  name: Microsoft.Health.Events
  nameWithType: Microsoft.Health.Events
  fullName: Microsoft.Health.Events
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Events.NotificationHandler.ProcessNotificationXml*
  commentId: Overload:Microsoft.Health.Events.NotificationHandler.ProcessNotificationXml
  isExternal: false
  name: ProcessNotificationXml
  nameWithType: NotificationHandler.ProcessNotificationXml
  fullName: Microsoft.Health.Events.NotificationHandler.ProcessNotificationXml
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.EventHandler{Microsoft.Health.Events.HealthRecordItemChangedEventArgs}
  commentId: T:System.EventHandler{Microsoft.Health.Events.HealthRecordItemChangedEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<HealthRecordItemChangedEventArgs>
  nameWithType: EventHandler<HealthRecordItemChangedEventArgs>
  fullName: System.EventHandler<Microsoft.Health.Events.HealthRecordItemChangedEventArgs>
  nameWithType.vb: EventHandler(Of HealthRecordItemChangedEventArgs)
  fullName.vb: System.EventHandler(Of Microsoft.Health.Events.HealthRecordItemChangedEventArgs)
  name.vb: EventHandler(Of HealthRecordItemChangedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.Events.HealthRecordItemChangedEventArgs
    name: HealthRecordItemChangedEventArgs
    nameWithType: HealthRecordItemChangedEventArgs
    fullName: Microsoft.Health.Events.HealthRecordItemChangedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.Events.HealthRecordItemChangedEventArgs
    name: HealthRecordItemChangedEventArgs
    nameWithType: HealthRecordItemChangedEventArgs
    fullName: Microsoft.Health.Events.HealthRecordItemChangedEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
