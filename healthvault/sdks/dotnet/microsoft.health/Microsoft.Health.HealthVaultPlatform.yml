### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.HealthVaultPlatform
  commentId: T:Microsoft.Health.HealthVaultPlatform
  id: HealthVaultPlatform
  parent: Microsoft.Health
  children:
  - Microsoft.Health.HealthVaultPlatform.AddChildApplication(Microsoft.Health.Web.OfflineWebApplicationConnection,Microsoft.Health.ApplicationInfo)
  - Microsoft.Health.HealthVaultPlatform.AllocateConnectPackageId(Microsoft.Health.Web.OfflineWebApplicationConnection)
  - Microsoft.Health.HealthVaultPlatform.AssociateAlternateId(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.String)
  - Microsoft.Health.HealthVaultPlatform.ClearItemTypeCache
  - Microsoft.Health.HealthVaultPlatform.CreateConnectPackage(Microsoft.Health.Package.ConnectPackageCreationParameters,Microsoft.Health.ItemTypes.PasswordProtectedPackage)
  - Microsoft.Health.HealthVaultPlatform.CreateConnectPackage(Microsoft.Health.Package.ConnectPackageCreationParameters,Microsoft.Health.ItemTypes.PasswordProtectedPackage,System.Collections.Generic.IEnumerable{System.Uri})
  - Microsoft.Health.HealthVaultPlatform.CreatePatientConnection(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,System.Uri,System.String)
  - Microsoft.Health.HealthVaultPlatform.DeletePendingConnectionPackageForIdentityCode(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String)
  - Microsoft.Health.HealthVaultPlatform.DeletePendingConnectPackages(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String)
  - Microsoft.Health.HealthVaultPlatform.DeletePendingPatientConnection(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String)
  - Microsoft.Health.HealthVaultPlatform.DisassociateAlternateId(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.String)
  - Microsoft.Health.HealthVaultPlatform.DisassociateAlternateId(Microsoft.Health.ApplicationConnection,System.String)
  - Microsoft.Health.HealthVaultPlatform.GetAlternateIds(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor)
  - Microsoft.Health.HealthVaultPlatform.GetApplicationInfo(Microsoft.Health.HealthServiceConnection)
  - Microsoft.Health.HealthVaultPlatform.GetApplicationInfo(Microsoft.Health.HealthServiceConnection,System.Boolean)
  - Microsoft.Health.HealthVaultPlatform.GetApplicationSettings(Microsoft.Health.HealthServiceConnection)
  - Microsoft.Health.HealthVaultPlatform.GetApplicationSettingsAsXml(Microsoft.Health.HealthServiceConnection)
  - Microsoft.Health.HealthVaultPlatform.GetAuthorizedPeople(Microsoft.Health.ApplicationConnection)
  - Microsoft.Health.HealthVaultPlatform.GetAuthorizedPeople(Microsoft.Health.ApplicationConnection,Microsoft.Health.GetAuthorizedPeopleSettings)
  - Microsoft.Health.HealthVaultPlatform.GetAuthorizedRecords(Microsoft.Health.ApplicationConnection,System.Collections.Generic.IList{System.Guid})
  - Microsoft.Health.HealthVaultPlatform.GetChildApplication(Microsoft.Health.Web.OfflineWebApplicationConnection,System.Guid)
  - Microsoft.Health.HealthVaultPlatform.GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList{System.Guid},Microsoft.Health.HealthRecordItemTypeSections,System.Collections.Generic.IList{System.String},System.Nullable{System.DateTime},Microsoft.Health.HealthServiceConnection)
  - Microsoft.Health.HealthVaultPlatform.GetMatchingItems(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,Microsoft.Health.HealthRecordSearcher)
  - Microsoft.Health.HealthVaultPlatform.GetMatchingItemsRaw(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,Microsoft.Health.HealthRecordSearcher)
  - Microsoft.Health.HealthVaultPlatform.GetMatchingItemsReader(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,Microsoft.Health.HealthRecordSearcher)
  - Microsoft.Health.HealthVaultPlatform.GetMeaningfulUseTimelyAccessDocumentReport(Microsoft.Health.HealthServiceConnection,Microsoft.Health.DateRange)
  - Microsoft.Health.HealthVaultPlatform.GetMeaningfulUseTimelyAccessDOPUDocumentReport(Microsoft.Health.HealthServiceConnection,Microsoft.Health.DateRange)
  - Microsoft.Health.HealthVaultPlatform.GetMeaningfulUseVDTReport(Microsoft.Health.HealthServiceConnection,Microsoft.Health.DateRange)
  - Microsoft.Health.HealthVaultPlatform.GetPersonAndRecordForAlternateId(Microsoft.Health.ApplicationConnection,System.String)
  - Microsoft.Health.HealthVaultPlatform.GetPersonInfo(Microsoft.Health.ApplicationConnection)
  - Microsoft.Health.HealthVaultPlatform.GetServiceDefinition(Microsoft.Health.HealthServiceConnection)
  - Microsoft.Health.HealthVaultPlatform.GetServiceDefinition(Microsoft.Health.HealthServiceConnection,Microsoft.Health.ServiceInfoSections)
  - Microsoft.Health.HealthVaultPlatform.GetServiceDefinition(Microsoft.Health.HealthServiceConnection,Microsoft.Health.ServiceInfoSections,System.DateTime)
  - Microsoft.Health.HealthVaultPlatform.GetServiceDefinition(Microsoft.Health.HealthServiceConnection,System.DateTime)
  - Microsoft.Health.HealthVaultPlatform.GetTransformedItems(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,Microsoft.Health.HealthRecordSearcher,System.String)
  - Microsoft.Health.HealthVaultPlatform.GetUpdatedRecordInfoForApplication(Microsoft.Health.HealthServiceConnection,System.Nullable{System.DateTime})
  - Microsoft.Health.HealthVaultPlatform.GetUpdatedRecordsForApplication(Microsoft.Health.HealthServiceConnection,System.Nullable{System.DateTime})
  - Microsoft.Health.HealthVaultPlatform.GetValidatedPatientConnections(Microsoft.Health.Web.OfflineWebApplicationConnection,System.DateTime)
  - Microsoft.Health.HealthVaultPlatform.GetValidGroupMembership(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{System.Guid})
  - Microsoft.Health.HealthVaultPlatform.GetVocabulary(Microsoft.Health.HealthServiceConnection,Microsoft.Health.VocabularyKey,System.Boolean)
  - Microsoft.Health.HealthVaultPlatform.GetVocabulary(Microsoft.Health.HealthServiceConnection,System.Collections.Generic.IList{Microsoft.Health.VocabularyKey},System.Boolean)
  - Microsoft.Health.HealthVaultPlatform.GetVocabulary(Microsoft.Health.HealthServiceConnection,System.String)
  - Microsoft.Health.HealthVaultPlatform.GetVocabularyKeys(Microsoft.Health.HealthServiceConnection)
  - Microsoft.Health.HealthVaultPlatform.NewItems(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})
  - Microsoft.Health.HealthVaultPlatform.NewSignupCode(Microsoft.Health.HealthServiceConnection)
  - Microsoft.Health.HealthVaultPlatform.QueryPermissions(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{System.Guid})
  - Microsoft.Health.HealthVaultPlatform.QueryPermissionsByTypes(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{System.Guid})
  - Microsoft.Health.HealthVaultPlatform.QueryRecordPermissions(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{System.Guid})
  - Microsoft.Health.HealthVaultPlatform.RemoveApplicationAuthorization(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor)
  - Microsoft.Health.HealthVaultPlatform.RemoveItems(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItemKey})
  - Microsoft.Health.HealthVaultPlatform.SearchVocabulary(Microsoft.Health.HealthServiceConnection,Microsoft.Health.VocabularyKey,System.String,Microsoft.Health.VocabularySearchType,System.Nullable{System.Int32})
  - Microsoft.Health.HealthVaultPlatform.SearchVocabularyKeys(Microsoft.Health.HealthServiceConnection,System.String,Microsoft.Health.VocabularySearchType,System.Nullable{System.Int32})
  - Microsoft.Health.HealthVaultPlatform.SelectInstance(Microsoft.Health.HealthServiceConnection,Microsoft.Health.Location)
  - Microsoft.Health.HealthVaultPlatform.SendInsecureMessage(Microsoft.Health.HealthServiceConnection,System.Collections.Generic.IList{Microsoft.Health.MailRecipient},System.String,System.String,System.String)
  - Microsoft.Health.HealthVaultPlatform.SendInsecureMessage(Microsoft.Health.HealthServiceConnection,System.Collections.Generic.IList{System.Guid},System.Boolean,System.String,System.String,System.String)
  - Microsoft.Health.HealthVaultPlatform.SendInsecureMessageFromApplication(Microsoft.Health.HealthServiceConnection,System.Collections.Generic.IList{Microsoft.Health.MailRecipient},System.String,System.String,System.String,System.String,System.String)
  - Microsoft.Health.HealthVaultPlatform.SendInsecureMessageFromApplication(Microsoft.Health.HealthServiceConnection,System.Collections.Generic.IList{System.Guid},System.Boolean,System.String,System.String,System.String,System.String,System.String)
  - Microsoft.Health.HealthVaultPlatform.SendInsecureMessageToCustodians(Microsoft.Health.HealthServiceConnection,System.Guid,System.Boolean,System.String,System.String,System.String)
  - Microsoft.Health.HealthVaultPlatform.SendInsecureMessageToCustodiansFromApplication(Microsoft.Health.HealthServiceConnection,System.Guid,System.Boolean,System.String,System.String,System.String,System.String,System.String)
  - Microsoft.Health.HealthVaultPlatform.SetApplicationSettings(Microsoft.Health.HealthServiceConnection,System.Xml.XPath.IXPathNavigable)
  - Microsoft.Health.HealthVaultPlatform.UpdateChildApplication(Microsoft.Health.ApplicationConnection,Microsoft.Health.ApplicationInfo)
  - Microsoft.Health.HealthVaultPlatform.UpdateConnectPackageApplicationPatientId(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String)
  - Microsoft.Health.HealthVaultPlatform.UpdateConnectPackageApplicationPatientIdForIdentityCode(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String)
  - Microsoft.Health.HealthVaultPlatform.UpdateItems(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})
  - Microsoft.Health.HealthVaultPlatform.UpdatePatientConnectionApplicationPatientId(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String)
  langs:
  - csharp
  - vb
  name: HealthVaultPlatform
  nameWithType: HealthVaultPlatform
  fullName: Microsoft.Health.HealthVaultPlatform
  type: Class
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: HealthVaultPlatform
    path: HealthVaultPlatform.cs
    startLine: 31
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nProvides low-level access to the HealthVault service.\n"
  remarks: "\nHealthServicePlatform provides access to the HealthVault service at a low level.\n\nFor an easier-to-use interface, please see the following abstractions:\n<strong>Data item operations</strong>\n<xref href=\"Microsoft.Health.HealthRecordAccessor\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"Microsoft.Health.HealthRecordInfo\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static class HealthVaultPlatform
    content.vb: Public Module HealthVaultPlatform
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Health.HealthVaultPlatform.GetApplicationSettingsAsXml(Microsoft.Health.HealthServiceConnection)
  commentId: M:Microsoft.Health.HealthVaultPlatform.GetApplicationSettingsAsXml(Microsoft.Health.HealthServiceConnection)
  id: GetApplicationSettingsAsXml(Microsoft.Health.HealthServiceConnection)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: GetApplicationSettingsAsXml(HealthServiceConnection)
  nameWithType: HealthVaultPlatform.GetApplicationSettingsAsXml(HealthServiceConnection)
  fullName: Microsoft.Health.HealthVaultPlatform.GetApplicationSettingsAsXml(Microsoft.Health.HealthServiceConnection)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetApplicationSettingsAsXml
    path: HealthVaultPlatform.cs
    startLine: 52
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the application settings for the current application and\nperson.\n"
  remarks: "\nThis might be <strong>null</strong> if no application settings have been \nstored for the application or user.\n"
  example: []
  syntax:
    content: public static IXPathNavigable GetApplicationSettingsAsXml(HealthServiceConnection connection)
    content.vb: Public Shared Function GetApplicationSettingsAsXml(connection As HealthServiceConnection) As IXPathNavigable
    parameters:
    - id: connection
      type: Microsoft.Health.HealthServiceConnection
      description: "The connection to use to perform the operation. This connection\nmust be authenticated. "
    return:
      type: System.Xml.XPath.IXPathNavigable
      description: "\nThe application settings XML.\n"
  overload: Microsoft.Health.HealthVaultPlatform.GetApplicationSettingsAsXml*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.GetApplicationSettings(Microsoft.Health.HealthServiceConnection)
  commentId: M:Microsoft.Health.HealthVaultPlatform.GetApplicationSettings(Microsoft.Health.HealthServiceConnection)
  id: GetApplicationSettings(Microsoft.Health.HealthServiceConnection)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: GetApplicationSettings(HealthServiceConnection)
  nameWithType: HealthVaultPlatform.GetApplicationSettings(HealthServiceConnection)
  fullName: Microsoft.Health.HealthVaultPlatform.GetApplicationSettings(Microsoft.Health.HealthServiceConnection)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetApplicationSettings
    path: HealthVaultPlatform.cs
    startLine: 69
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the application settings for the current application and\nperson.\n"
  example: []
  syntax:
    content: public static ApplicationSettings GetApplicationSettings(HealthServiceConnection connection)
    content.vb: Public Shared Function GetApplicationSettings(connection As HealthServiceConnection) As ApplicationSettings
    parameters:
    - id: connection
      type: Microsoft.Health.HealthServiceConnection
      description: "The connection to use to perform the operation. This connection\nmust be authenticated. "
    return:
      type: Microsoft.Health.ApplicationSettings
      description: "\nThe complete set application settings including the XML settings, selected record ID, etc.\n"
  overload: Microsoft.Health.HealthVaultPlatform.GetApplicationSettings*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.SetApplicationSettings(Microsoft.Health.HealthServiceConnection,System.Xml.XPath.IXPathNavigable)
  commentId: M:Microsoft.Health.HealthVaultPlatform.SetApplicationSettings(Microsoft.Health.HealthServiceConnection,System.Xml.XPath.IXPathNavigable)
  id: SetApplicationSettings(Microsoft.Health.HealthServiceConnection,System.Xml.XPath.IXPathNavigable)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: SetApplicationSettings(HealthServiceConnection, IXPathNavigable)
  nameWithType: HealthVaultPlatform.SetApplicationSettings(HealthServiceConnection, IXPathNavigable)
  fullName: Microsoft.Health.HealthVaultPlatform.SetApplicationSettings(Microsoft.Health.HealthServiceConnection, System.Xml.XPath.IXPathNavigable)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SetApplicationSettings
    path: HealthVaultPlatform.cs
    startLine: 91
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nSets the application settings for the current application and\nperson.\n"
  remarks: "\nThis may be <strong>null</strong> if no application settings have been \nstored for the application or user.\n"
  example: []
  syntax:
    content: public static void SetApplicationSettings(HealthServiceConnection connection, IXPathNavigable applicationSettings)
    content.vb: Public Shared Sub SetApplicationSettings(connection As HealthServiceConnection, applicationSettings As IXPathNavigable)
    parameters:
    - id: connection
      type: Microsoft.Health.HealthServiceConnection
      description: "The connection to use to perform the operation. This connection\nmust be authenticated. "
    - id: applicationSettings
      type: System.Xml.XPath.IXPathNavigable
      description: "\nThe application settings XML.\n"
  overload: Microsoft.Health.HealthVaultPlatform.SetApplicationSettings*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.SendInsecureMessage(Microsoft.Health.HealthServiceConnection,System.Collections.Generic.IList{Microsoft.Health.MailRecipient},System.String,System.String,System.String)
  commentId: M:Microsoft.Health.HealthVaultPlatform.SendInsecureMessage(Microsoft.Health.HealthServiceConnection,System.Collections.Generic.IList{Microsoft.Health.MailRecipient},System.String,System.String,System.String)
  id: SendInsecureMessage(Microsoft.Health.HealthServiceConnection,System.Collections.Generic.IList{Microsoft.Health.MailRecipient},System.String,System.String,System.String)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: SendInsecureMessage(HealthServiceConnection, IList<MailRecipient>, String, String, String)
  nameWithType: HealthVaultPlatform.SendInsecureMessage(HealthServiceConnection, IList<MailRecipient>, String, String, String)
  fullName: Microsoft.Health.HealthVaultPlatform.SendInsecureMessage(Microsoft.Health.HealthServiceConnection, System.Collections.Generic.IList<Microsoft.Health.MailRecipient>, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SendInsecureMessage
    path: HealthVaultPlatform.cs
    startLine: 149
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nSends an insecure message to the specified message recipients.\n"
  remarks: "\nIf both the <span class=\"paramref\">textBody</span> and \n<span class=\"paramref\">htmlBody</span> of the message is specified then a\nmulti-part message will be sent so that the html body will be used\nand fallback to text if not supported by the client.\n"
  example: []
  syntax:
    content: public static void SendInsecureMessage(HealthServiceConnection connection, IList<MailRecipient> mailRecipient, string subject, string textBody, string htmlBody)
    content.vb: Public Shared Sub SendInsecureMessage(connection As HealthServiceConnection, mailRecipient As IList(Of MailRecipient), subject As String, textBody As String, htmlBody As String)
    parameters:
    - id: connection
      type: Microsoft.Health.HealthServiceConnection
      description: "\nThe connection to use for this operation. The connection must\nhave application capabilities.\n"
    - id: mailRecipient
      type: System.Collections.Generic.IList{Microsoft.Health.MailRecipient}
      description: "\nThe addresses and display names of the people to send the \nmessage to.\n"
    - id: subject
      type: System.String
      description: "\nThe subject of the message.\n"
    - id: textBody
      type: System.String
      description: "\nThe text body of the message.\n"
    - id: htmlBody
      type: System.String
      description: "\nThe HTML body of the message.\n"
  overload: Microsoft.Health.HealthVaultPlatform.SendInsecureMessage*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">mailRecipient</span> property is <strong>null</strong> or empty, \nor the <span class=\"paramref\">subject</span> parameter is <strong>null</strong> or empty, or \nthe <span class=\"paramref\">textBody</span> and <span class=\"paramref\">htmlBody</span> \nparameters are both <strong>null</strong> or empty.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe server returned a failure when making the request.\n"
  nameWithType.vb: HealthVaultPlatform.SendInsecureMessage(HealthServiceConnection, IList(Of MailRecipient), String, String, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.HealthVaultPlatform.SendInsecureMessage(Microsoft.Health.HealthServiceConnection, System.Collections.Generic.IList(Of Microsoft.Health.MailRecipient), System.String, System.String, System.String)
  name.vb: SendInsecureMessage(HealthServiceConnection, IList(Of MailRecipient), String, String, String)
- uid: Microsoft.Health.HealthVaultPlatform.SendInsecureMessage(Microsoft.Health.HealthServiceConnection,System.Collections.Generic.IList{System.Guid},System.Boolean,System.String,System.String,System.String)
  commentId: M:Microsoft.Health.HealthVaultPlatform.SendInsecureMessage(Microsoft.Health.HealthServiceConnection,System.Collections.Generic.IList{System.Guid},System.Boolean,System.String,System.String,System.String)
  id: SendInsecureMessage(Microsoft.Health.HealthServiceConnection,System.Collections.Generic.IList{System.Guid},System.Boolean,System.String,System.String,System.String)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: SendInsecureMessage(HealthServiceConnection, IList<Guid>, Boolean, String, String, String)
  nameWithType: HealthVaultPlatform.SendInsecureMessage(HealthServiceConnection, IList<Guid>, Boolean, String, String, String)
  fullName: Microsoft.Health.HealthVaultPlatform.SendInsecureMessage(Microsoft.Health.HealthServiceConnection, System.Collections.Generic.IList<System.Guid>, System.Boolean, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SendInsecureMessage
    path: HealthVaultPlatform.cs
    startLine: 217
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nSends an insecure message to the specified message recipients.\n"
  remarks: "\nIf both the <span class=\"paramref\">textBody</span> and \n<span class=\"paramref\">htmlBody</span> of the message is specified then a\nmulti-part message will be sent so that the html body will be used\nand fallback to text if not supported by the client.\n"
  example: []
  syntax:
    content: public static void SendInsecureMessage(HealthServiceConnection connection, IList<Guid> personIds, bool addressMustBeValidated, string subject, string textBody, string htmlBody)
    content.vb: Public Shared Sub SendInsecureMessage(connection As HealthServiceConnection, personIds As IList(Of Guid), addressMustBeValidated As Boolean, subject As String, textBody As String, htmlBody As String)
    parameters:
    - id: connection
      type: Microsoft.Health.HealthServiceConnection
      description: "\nThe connection to use for this operation. The connection must\nhave application capabilities.\n"
    - id: personIds
      type: System.Collections.Generic.IList{System.Guid}
      description: "\nThe unique identifiers of the people to which the message should be\nsent.\n"
    - id: addressMustBeValidated
      type: System.Boolean
      description: "\n<strong>true</strong> if HealthVault ensures that the person has validated \ntheir message address before sending the mail; <strong>false</strong> if the \nmessage will be sent even if the person's address has not been \nvalidated.\n"
    - id: subject
      type: System.String
      description: "\nThe subject of the message.\n"
    - id: textBody
      type: System.String
      description: "\nThe text body of the message.\n"
    - id: htmlBody
      type: System.String
      description: "\nThe HTML body of the message.\n"
  overload: Microsoft.Health.HealthVaultPlatform.SendInsecureMessage*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">personIds</span> or <span class=\"paramref\">subject</span>, \n<span class=\"paramref\">textBody</span>  or <span class=\"paramref\">htmlBody</span> parameters \nare <strong>null</strong> or empty.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe server returned a failure when making the request.        \n"
  nameWithType.vb: HealthVaultPlatform.SendInsecureMessage(HealthServiceConnection, IList(Of Guid), Boolean, String, String, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.HealthVaultPlatform.SendInsecureMessage(Microsoft.Health.HealthServiceConnection, System.Collections.Generic.IList(Of System.Guid), System.Boolean, System.String, System.String, System.String)
  name.vb: SendInsecureMessage(HealthServiceConnection, IList(Of Guid), Boolean, String, String, String)
- uid: Microsoft.Health.HealthVaultPlatform.SendInsecureMessageToCustodians(Microsoft.Health.HealthServiceConnection,System.Guid,System.Boolean,System.String,System.String,System.String)
  commentId: M:Microsoft.Health.HealthVaultPlatform.SendInsecureMessageToCustodians(Microsoft.Health.HealthServiceConnection,System.Guid,System.Boolean,System.String,System.String,System.String)
  id: SendInsecureMessageToCustodians(Microsoft.Health.HealthServiceConnection,System.Guid,System.Boolean,System.String,System.String,System.String)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: SendInsecureMessageToCustodians(HealthServiceConnection, Guid, Boolean, String, String, String)
  nameWithType: HealthVaultPlatform.SendInsecureMessageToCustodians(HealthServiceConnection, Guid, Boolean, String, String, String)
  fullName: Microsoft.Health.HealthVaultPlatform.SendInsecureMessageToCustodians(Microsoft.Health.HealthServiceConnection, System.Guid, System.Boolean, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SendInsecureMessageToCustodians
    path: HealthVaultPlatform.cs
    startLine: 290
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nSends an insecure message to custodians of the specified health \nrecord.\n"
  remarks: "\nIf both the <span class=\"paramref\">textBody</span> and \n<span class=\"paramref\">htmlBody</span> of the message is specified, then a\nmulti-part message is sent so that the HTML body will be used\nand falls back to text if not supported by the client.\n"
  example: []
  syntax:
    content: public static void SendInsecureMessageToCustodians(HealthServiceConnection connection, Guid recordId, bool addressMustBeValidated, string subject, string textBody, string htmlBody)
    content.vb: Public Shared Sub SendInsecureMessageToCustodians(connection As HealthServiceConnection, recordId As Guid, addressMustBeValidated As Boolean, subject As String, textBody As String, htmlBody As String)
    parameters:
    - id: connection
      type: Microsoft.Health.HealthServiceConnection
      description: "\nThe connection to use for this operation. The connection must\nhave application capabilities.\n"
    - id: recordId
      type: System.Guid
      description: "\nThe unique identifier of the health record for which the \ncustodians should be sent the message.\n"
    - id: addressMustBeValidated
      type: System.Boolean
      description: "\n<strong>true</strong> if HealthVault ensures that the person has validated \ntheir message address before sending the mail; <strong>false</strong> if the \nmessage will be sent even if the person's address has not been \nvalidated.\n"
    - id: subject
      type: System.String
      description: "\nThe subject of the message.\n"
    - id: textBody
      type: System.String
      description: "\nThe text body of the message.\n"
    - id: htmlBody
      type: System.String
      description: "\nThe HTML body of the message.\n"
  overload: Microsoft.Health.HealthVaultPlatform.SendInsecureMessageToCustodians*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">recordId</span> parameter is <xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref>\n-or-\nThe <span class=\"paramref\">subject</span> parameter is <strong>null</strong> or empty,\n-or-\nThe <span class=\"paramref\">textBody</span> and <span class=\"paramref\">htmlBody</span> parameters \nare both <strong>null</strong> or empty.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe server returned a failure when making the request.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.SendInsecureMessageFromApplication(Microsoft.Health.HealthServiceConnection,System.Collections.Generic.IList{Microsoft.Health.MailRecipient},System.String,System.String,System.String,System.String,System.String)
  commentId: M:Microsoft.Health.HealthVaultPlatform.SendInsecureMessageFromApplication(Microsoft.Health.HealthServiceConnection,System.Collections.Generic.IList{Microsoft.Health.MailRecipient},System.String,System.String,System.String,System.String,System.String)
  id: SendInsecureMessageFromApplication(Microsoft.Health.HealthServiceConnection,System.Collections.Generic.IList{Microsoft.Health.MailRecipient},System.String,System.String,System.String,System.String,System.String)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: SendInsecureMessageFromApplication(HealthServiceConnection, IList<MailRecipient>, String, String, String, String, String)
  nameWithType: HealthVaultPlatform.SendInsecureMessageFromApplication(HealthServiceConnection, IList<MailRecipient>, String, String, String, String, String)
  fullName: Microsoft.Health.HealthVaultPlatform.SendInsecureMessageFromApplication(Microsoft.Health.HealthServiceConnection, System.Collections.Generic.IList<Microsoft.Health.MailRecipient>, System.String, System.String, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SendInsecureMessageFromApplication
    path: HealthVaultPlatform.cs
    startLine: 376
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nSends an insecure message originating from the application to \nthe specified message recipients. \n"
  remarks: "\nIf both the <span class=\"paramref\">textBody</span> and \n<span class=\"paramref\">htmlBody</span> of the message is specified then a\nmulti-part message will be sent so that the html body will be used\nand fallback to text if not supported by the client.\n\nIf the domain name of the application has not been previously \nset (usually through app registration), this method will throw \na <xref href=\"Microsoft.Health.HealthServiceException\" data-throw-if-not-resolved=\"false\"></xref>.        \n"
  example: []
  syntax:
    content: public static void SendInsecureMessageFromApplication(HealthServiceConnection connection, IList<MailRecipient> mailRecipient, string senderMailboxName, string senderDisplayName, string subject, string textBody, string htmlBody)
    content.vb: Public Shared Sub SendInsecureMessageFromApplication(connection As HealthServiceConnection, mailRecipient As IList(Of MailRecipient), senderMailboxName As String, senderDisplayName As String, subject As String, textBody As String, htmlBody As String)
    parameters:
    - id: connection
      type: Microsoft.Health.HealthServiceConnection
      description: "\nThe connection to use for this operation. The connection must\nhave application capabilities.\n"
    - id: mailRecipient
      type: System.Collections.Generic.IList{Microsoft.Health.MailRecipient}
      description: "\nThe addresses and display names of the people to send the \nmessage to.\n"
    - id: senderMailboxName
      type: System.String
      description: "\nAn application specified mailbox name that's sending the message.\nThe mailbox name is appended to the application's domain name to \nform the From email address of the message. This parameter should\nonly contain the characters before the @ symbol of the email \naddress.\n"
    - id: senderDisplayName
      type: System.String
      description: "\nThe message sender's display name.\n"
    - id: subject
      type: System.String
      description: "\nThe subject of the message.\n"
    - id: textBody
      type: System.String
      description: "\nThe text body of the message.\n"
    - id: htmlBody
      type: System.String
      description: "\nThe HTML body of the message.\n"
  overload: Microsoft.Health.HealthVaultPlatform.SendInsecureMessageFromApplication*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">mailRecipient</span> is null or empty,\n-or-\nif <span class=\"paramref\">senderMailboxName</span> is null or empty,\n-or-\nif <span class=\"paramref\">senderDisplayName</span> is null or empty,\n-or-\nif <span class=\"paramref\">subject</span> is null or empty,\n-or-\nif <span class=\"paramref\">textBody</span> and <span class=\"paramref\">htmlBody</span>\nare both null or empty.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf the server returned a failure when making the request.\n"
  nameWithType.vb: HealthVaultPlatform.SendInsecureMessageFromApplication(HealthServiceConnection, IList(Of MailRecipient), String, String, String, String, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.HealthVaultPlatform.SendInsecureMessageFromApplication(Microsoft.Health.HealthServiceConnection, System.Collections.Generic.IList(Of Microsoft.Health.MailRecipient), System.String, System.String, System.String, System.String, System.String)
  name.vb: SendInsecureMessageFromApplication(HealthServiceConnection, IList(Of MailRecipient), String, String, String, String, String)
- uid: Microsoft.Health.HealthVaultPlatform.SendInsecureMessageFromApplication(Microsoft.Health.HealthServiceConnection,System.Collections.Generic.IList{System.Guid},System.Boolean,System.String,System.String,System.String,System.String,System.String)
  commentId: M:Microsoft.Health.HealthVaultPlatform.SendInsecureMessageFromApplication(Microsoft.Health.HealthServiceConnection,System.Collections.Generic.IList{System.Guid},System.Boolean,System.String,System.String,System.String,System.String,System.String)
  id: SendInsecureMessageFromApplication(Microsoft.Health.HealthServiceConnection,System.Collections.Generic.IList{System.Guid},System.Boolean,System.String,System.String,System.String,System.String,System.String)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: SendInsecureMessageFromApplication(HealthServiceConnection, IList<Guid>, Boolean, String, String, String, String, String)
  nameWithType: HealthVaultPlatform.SendInsecureMessageFromApplication(HealthServiceConnection, IList<Guid>, Boolean, String, String, String, String, String)
  fullName: Microsoft.Health.HealthVaultPlatform.SendInsecureMessageFromApplication(Microsoft.Health.HealthServiceConnection, System.Collections.Generic.IList<System.Guid>, System.Boolean, System.String, System.String, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SendInsecureMessageFromApplication
    path: HealthVaultPlatform.cs
    startLine: 473
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nSends an insecure message originating from the application\nto the specified message recipients.\n"
  remarks: "\nIf both the <span class=\"paramref\">textBody</span> and \n<span class=\"paramref\">htmlBody</span> of the message is specified then a\nmulti-part message will be sent so that the html body will be used\nand fallback to text if not supported by the client.\n\nIf the domain name of the application has not been previously \nset (usually through app registration), this method will throw\na <xref href=\"Microsoft.Health.HealthServiceException\" data-throw-if-not-resolved=\"false\"></xref>.        \n"
  example: []
  syntax:
    content: public static void SendInsecureMessageFromApplication(HealthServiceConnection connection, IList<Guid> recipientPersonIds, bool addressMustBeValidated, string senderMailboxName, string senderDisplayName, string subject, string textBody, string htmlBody)
    content.vb: Public Shared Sub SendInsecureMessageFromApplication(connection As HealthServiceConnection, recipientPersonIds As IList(Of Guid), addressMustBeValidated As Boolean, senderMailboxName As String, senderDisplayName As String, subject As String, textBody As String, htmlBody As String)
    parameters:
    - id: connection
      type: Microsoft.Health.HealthServiceConnection
      description: "\nThe connection to use for this operation. The connection must\nhave application capabilities.\n"
    - id: recipientPersonIds
      type: System.Collections.Generic.IList{System.Guid}
      description: "\nThe unique identifiers of the people to which the message should be\nsent.\n"
    - id: addressMustBeValidated
      type: System.Boolean
      description: "\nIf true, HealthVault will ensure that the person has validated \ntheir message address before sending the mail. If false, the \nmessage will be sent even if the person's address has not been \nvalidated.\n"
    - id: senderMailboxName
      type: System.String
      description: "\nAn application specified mailbox name that's sending the message.\nThe mailbox name is appended to the application's domain name to \nform the From email address of the message. This parameter should\nonly contain the characters before the @ symbol of the email \naddress.\n"
    - id: senderDisplayName
      type: System.String
      description: "\nThe message sender's display name.\n"
    - id: subject
      type: System.String
      description: "\nThe subject of the message.\n"
    - id: textBody
      type: System.String
      description: "\nThe text body of the message.\n"
    - id: htmlBody
      type: System.String
      description: "\nThe HTML body of the message.\n"
  overload: Microsoft.Health.HealthVaultPlatform.SendInsecureMessageFromApplication*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">recipientPersonIds</span> is null or empty,\n-or-\nif <span class=\"paramref\">senderMailboxName</span> is null or empty,\n-or-\nif <span class=\"paramref\">senderDisplayName</span> is null or empty,\n-or-\nif <span class=\"paramref\">subject</span> is null or empty,\n-or-\nif <span class=\"paramref\">textBody</span> and <span class=\"paramref\">htmlBody</span>\nare both null or empty.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf the server returned a failure when making the request.        \n"
  nameWithType.vb: HealthVaultPlatform.SendInsecureMessageFromApplication(HealthServiceConnection, IList(Of Guid), Boolean, String, String, String, String, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.HealthVaultPlatform.SendInsecureMessageFromApplication(Microsoft.Health.HealthServiceConnection, System.Collections.Generic.IList(Of System.Guid), System.Boolean, System.String, System.String, System.String, System.String, System.String)
  name.vb: SendInsecureMessageFromApplication(HealthServiceConnection, IList(Of Guid), Boolean, String, String, String, String, String)
- uid: Microsoft.Health.HealthVaultPlatform.SendInsecureMessageToCustodiansFromApplication(Microsoft.Health.HealthServiceConnection,System.Guid,System.Boolean,System.String,System.String,System.String,System.String,System.String)
  commentId: M:Microsoft.Health.HealthVaultPlatform.SendInsecureMessageToCustodiansFromApplication(Microsoft.Health.HealthServiceConnection,System.Guid,System.Boolean,System.String,System.String,System.String,System.String,System.String)
  id: SendInsecureMessageToCustodiansFromApplication(Microsoft.Health.HealthServiceConnection,System.Guid,System.Boolean,System.String,System.String,System.String,System.String,System.String)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: SendInsecureMessageToCustodiansFromApplication(HealthServiceConnection, Guid, Boolean, String, String, String, String, String)
  nameWithType: HealthVaultPlatform.SendInsecureMessageToCustodiansFromApplication(HealthServiceConnection, Guid, Boolean, String, String, String, String, String)
  fullName: Microsoft.Health.HealthVaultPlatform.SendInsecureMessageToCustodiansFromApplication(Microsoft.Health.HealthServiceConnection, System.Guid, System.Boolean, System.String, System.String, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SendInsecureMessageToCustodiansFromApplication
    path: HealthVaultPlatform.cs
    startLine: 576
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nSends an insecure message originating from the application \nto custodians of the specified health record.\n"
  remarks: "\nIf both the <span class=\"paramref\">textBody</span> and \n<span class=\"paramref\">htmlBody</span> of the message is specified then a\nmulti-part message will be sent so that the html body will be used\nand fallback to text if not supported by the client.\n\nIf the domain name of the application has not been previously \nset (usually through app registration), this method will throw \na <xref href=\"Microsoft.Health.HealthServiceException\" data-throw-if-not-resolved=\"false\"></xref>.\n\nThe calling application and the person through which authorization to the \nspecified record was obtained must be authorized for the record. \nThe person must be either authenticated, or if the person is offline,\ntheir person Id specified as the offline person Id.\nSee <xref href=\"Microsoft.Health.Web.OfflineWebApplicationConnection\" data-throw-if-not-resolved=\"false\"></xref> \nfor more information.\n"
  example: []
  syntax:
    content: public static void SendInsecureMessageToCustodiansFromApplication(HealthServiceConnection connection, Guid recordId, bool addressMustBeValidated, string senderMailboxName, string senderDisplayName, string subject, string textBody, string htmlBody)
    content.vb: Public Shared Sub SendInsecureMessageToCustodiansFromApplication(connection As HealthServiceConnection, recordId As Guid, addressMustBeValidated As Boolean, senderMailboxName As String, senderDisplayName As String, subject As String, textBody As String, htmlBody As String)
    parameters:
    - id: connection
      type: Microsoft.Health.HealthServiceConnection
      description: "\nThe connection to use for this operation. The connection must\nhave application capabilities.\n"
    - id: recordId
      type: System.Guid
      description: "\nThe unique identifier of the health record for which the \ncustodians should be sent the message.\n"
    - id: addressMustBeValidated
      type: System.Boolean
      description: "\nIf true, HealthVault will only send the message to custodians with \nvalidated e-mail addresses. If false, the message will\nbe sent even if the custodians' addresses have not been validated.\n"
    - id: senderMailboxName
      type: System.String
      description: "\nAn application specified mailbox name that's sending the message.\nThe mailbox name is appended to the application's domain name to \nform the From email address of the message. This parameter should\nonly contain the characters before the @ symbol of the email \naddress.\n"
    - id: senderDisplayName
      type: System.String
      description: "\nThe message sender's display name.\n"
    - id: subject
      type: System.String
      description: "\nThe subject of the message.\n"
    - id: textBody
      type: System.String
      description: "\nThe text body of the message.\n"
    - id: htmlBody
      type: System.String
      description: "\nThe HTML body of the message.\n"
  overload: Microsoft.Health.HealthVaultPlatform.SendInsecureMessageToCustodiansFromApplication*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">recordId</span> is <xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref>\n-or-\nif <span class=\"paramref\">senderMailboxName</span> is null or empty,\n-or-\nif <span class=\"paramref\">senderDisplayName</span> is null or empty,\n-or-\nif <span class=\"paramref\">subject</span> is null or empty,\n-or-\nif <span class=\"paramref\">textBody</span> and <span class=\"paramref\">htmlBody</span>\nare both null or empty.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf the server returned a failure when making the request.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.GetVocabulary(Microsoft.Health.HealthServiceConnection,System.String)
  commentId: M:Microsoft.Health.HealthVaultPlatform.GetVocabulary(Microsoft.Health.HealthServiceConnection,System.String)
  id: GetVocabulary(Microsoft.Health.HealthServiceConnection,System.String)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: GetVocabulary(HealthServiceConnection, String)
  nameWithType: HealthVaultPlatform.GetVocabulary(HealthServiceConnection, String)
  fullName: Microsoft.Health.HealthVaultPlatform.GetVocabulary(Microsoft.Health.HealthServiceConnection, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetVocabulary
    path: HealthVaultPlatform.cs
    startLine: 638
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nRetrieves a list of vocabulary items for the specified vocabulary.  \n"
  example: []
  syntax:
    content: public static Vocabulary GetVocabulary(HealthServiceConnection connection, string name)
    content.vb: Public Shared Function GetVocabulary(connection As HealthServiceConnection, name As String) As Vocabulary
    parameters:
    - id: connection
      type: Microsoft.Health.HealthServiceConnection
      description: "\nThe connection to use for this operation. The connection\nmust have application capability. \n"
    - id: name
      type: System.String
      description: "\nThe name of the vocabulary requested.\n"
    return:
      type: Microsoft.Health.Vocabulary
      description: "\nThe requested vocabulary and its items.\n"
  overload: Microsoft.Health.HealthVaultPlatform.GetVocabulary*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">name</span> parameter <strong>null</strong> or an empty \nstring.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThere is an error in the server request.\n<br />\n-Or- \n<br />\nOne of the requested vocabularies is not found on the server.\n<br />\n-Or- \n<br />\n-Or- \n<br />\nThere is an error loading the vocabulary.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.GetVocabulary(Microsoft.Health.HealthServiceConnection,Microsoft.Health.VocabularyKey,System.Boolean)
  commentId: M:Microsoft.Health.HealthVaultPlatform.GetVocabulary(Microsoft.Health.HealthServiceConnection,Microsoft.Health.VocabularyKey,System.Boolean)
  id: GetVocabulary(Microsoft.Health.HealthServiceConnection,Microsoft.Health.VocabularyKey,System.Boolean)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: GetVocabulary(HealthServiceConnection, VocabularyKey, Boolean)
  nameWithType: HealthVaultPlatform.GetVocabulary(HealthServiceConnection, VocabularyKey, Boolean)
  fullName: Microsoft.Health.HealthVaultPlatform.GetVocabulary(Microsoft.Health.HealthServiceConnection, Microsoft.Health.VocabularyKey, System.Boolean)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetVocabulary
    path: HealthVaultPlatform.cs
    startLine: 699
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nRetrieves a list of vocabulary items for the specified vocabulary\nand culture.\n"
  example: []
  syntax:
    content: public static Vocabulary GetVocabulary(HealthServiceConnection connection, VocabularyKey vocabularyKey, bool cultureIsFixed)
    content.vb: Public Shared Function GetVocabulary(connection As HealthServiceConnection, vocabularyKey As VocabularyKey, cultureIsFixed As Boolean) As Vocabulary
    parameters:
    - id: connection
      type: Microsoft.Health.HealthServiceConnection
      description: "\nThe connection to use for this operation. The connection\nmust have application capability. \n"
    - id: vocabularyKey
      type: Microsoft.Health.VocabularyKey
      description: "\nA key identifying the vocabulary requested.\n"
    - id: cultureIsFixed
      type: System.Boolean
      description: "\nHealthVault looks for the vocabulary items for the culture info\nspecified using <xref href=\"Microsoft.Health.HealthServiceConnection.Culture\" data-throw-if-not-resolved=\"false\"></xref>.\nIf <span class=\"paramref\">cultureIsFixed</span> is set to <strong>false</strong> and if \nitems are not found for the specified culture, items for the \ndefault fallback culture are returned. If \n<span class=\"paramref\">cultureIsFixed</span> is set to <strong>true</strong>, \nfallback will not occur, and if items are not found for the \nspecified culture, empty strings are returned.\n"
    return:
      type: Microsoft.Health.Vocabulary
      description: "\nThe specified vocabulary and its items, or empty strings.\n"
  overload: Microsoft.Health.HealthVaultPlatform.GetVocabulary*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <span class=\"paramref\">vocabularyKey</span> is <strong>null</strong>.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThere is an error in the server request.\n<br />\n-Or- \n<br />\nThe requested vocabulary is not found on the server.\n<br />\n-Or- \n<br />\nThe requested vocabulary does not contain representations \nfor its items for the specified culture when \n<span class=\"paramref\">cultureIsFixed</span> is <strong>true</strong>.\n<br />\n-Or- \n<br />\nThere is an error loading the vocabulary.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.GetVocabulary(Microsoft.Health.HealthServiceConnection,System.Collections.Generic.IList{Microsoft.Health.VocabularyKey},System.Boolean)
  commentId: M:Microsoft.Health.HealthVaultPlatform.GetVocabulary(Microsoft.Health.HealthServiceConnection,System.Collections.Generic.IList{Microsoft.Health.VocabularyKey},System.Boolean)
  id: GetVocabulary(Microsoft.Health.HealthServiceConnection,System.Collections.Generic.IList{Microsoft.Health.VocabularyKey},System.Boolean)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: GetVocabulary(HealthServiceConnection, IList<VocabularyKey>, Boolean)
  nameWithType: HealthVaultPlatform.GetVocabulary(HealthServiceConnection, IList<VocabularyKey>, Boolean)
  fullName: Microsoft.Health.HealthVaultPlatform.GetVocabulary(Microsoft.Health.HealthServiceConnection, System.Collections.Generic.IList<Microsoft.Health.VocabularyKey>, System.Boolean)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetVocabulary
    path: HealthVaultPlatform.cs
    startLine: 768
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nRetrieves lists of vocabulary items for the specified \nvocabularies and culture.\n"
  example: []
  syntax:
    content: public static ReadOnlyCollection<Vocabulary> GetVocabulary(HealthServiceConnection connection, IList<VocabularyKey> vocabularyKeys, bool cultureIsFixed)
    content.vb: Public Shared Function GetVocabulary(connection As HealthServiceConnection, vocabularyKeys As IList(Of VocabularyKey), cultureIsFixed As Boolean) As ReadOnlyCollection(Of Vocabulary)
    parameters:
    - id: connection
      type: Microsoft.Health.HealthServiceConnection
      description: "\nThe connection to use for this operation. The connection\nmust have application capability. \n"
    - id: vocabularyKeys
      type: System.Collections.Generic.IList{Microsoft.Health.VocabularyKey}
      description: "\nA list of keys identifying the requested vocabularies.\n"
    - id: cultureIsFixed
      type: System.Boolean
      description: "\nHealthVault looks for the vocabulary items for the culture info\nspecified using <xref href=\"Microsoft.Health.HealthServiceConnection.Culture\" data-throw-if-not-resolved=\"false\"></xref>.\nIf <span class=\"paramref\">cultureIsFixed</span> is set to <strong>false</strong> and if \nitems are not found for the specified culture, items for the \ndefault fallback culture are returned. If \n<span class=\"paramref\">cultureIsFixed</span> is set to <strong>true</strong>, \nfallback will not occur, and if items are not found for the \nspecified culture, empty strings are returned.\n"
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Health.Vocabulary}
      description: "\nThe specified vocabularies and their items, or empty strings.\n"
  overload: Microsoft.Health.HealthVaultPlatform.GetVocabulary*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">vocabularyKeys</span> list is empty.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <span class=\"paramref\">vocabularyKeys</span> list is <strong>null</strong> \nor contains a <strong>null</strong> entry.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThere is an error in the server request.\n<br />\n-Or- \n<br />\nOne of the requested vocabularies is not found on the server.\n<br />\n-Or- \n<br />\nOne of the requested vocabularies does not contain representations \nfor its items for the specified culture when \n<span class=\"paramref\">cultureIsFixed</span> is <strong>true</strong>.\n<br />\n-Or- \n<br />\nThere is an error loading the vocabulary.\n"
  nameWithType.vb: HealthVaultPlatform.GetVocabulary(HealthServiceConnection, IList(Of VocabularyKey), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.HealthVaultPlatform.GetVocabulary(Microsoft.Health.HealthServiceConnection, System.Collections.Generic.IList(Of Microsoft.Health.VocabularyKey), System.Boolean)
  name.vb: GetVocabulary(HealthServiceConnection, IList(Of VocabularyKey), Boolean)
- uid: Microsoft.Health.HealthVaultPlatform.GetVocabularyKeys(Microsoft.Health.HealthServiceConnection)
  commentId: M:Microsoft.Health.HealthVaultPlatform.GetVocabularyKeys(Microsoft.Health.HealthServiceConnection)
  id: GetVocabularyKeys(Microsoft.Health.HealthServiceConnection)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: GetVocabularyKeys(HealthServiceConnection)
  nameWithType: HealthVaultPlatform.GetVocabularyKeys(HealthServiceConnection)
  fullName: Microsoft.Health.HealthVaultPlatform.GetVocabularyKeys(Microsoft.Health.HealthServiceConnection)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetVocabularyKeys
    path: HealthVaultPlatform.cs
    startLine: 793
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nRetrieves a collection of key information for identifying and \ndescribing the vocabularies in the system.\n"
  example: []
  syntax:
    content: public static ReadOnlyCollection<VocabularyKey> GetVocabularyKeys(HealthServiceConnection connection)
    content.vb: Public Shared Function GetVocabularyKeys(connection As HealthServiceConnection) As ReadOnlyCollection(Of VocabularyKey)
    parameters:
    - id: connection
      type: Microsoft.Health.HealthServiceConnection
      description: "\nThe connection to use for this operation. The connection\nmust have application capability. \n"
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Health.VocabularyKey}
      description: "\nA collection of keys identifying the vocabularies in the system.\n"
  overload: Microsoft.Health.HealthVaultPlatform.GetVocabularyKeys*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.SearchVocabularyKeys(Microsoft.Health.HealthServiceConnection,System.String,Microsoft.Health.VocabularySearchType,System.Nullable{System.Int32})
  commentId: M:Microsoft.Health.HealthVaultPlatform.SearchVocabularyKeys(Microsoft.Health.HealthServiceConnection,System.String,Microsoft.Health.VocabularySearchType,System.Nullable{System.Int32})
  id: SearchVocabularyKeys(Microsoft.Health.HealthServiceConnection,System.String,Microsoft.Health.VocabularySearchType,System.Nullable{System.Int32})
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: SearchVocabularyKeys(HealthServiceConnection, String, VocabularySearchType, Nullable<Int32>)
  nameWithType: HealthVaultPlatform.SearchVocabularyKeys(HealthServiceConnection, String, VocabularySearchType, Nullable<Int32>)
  fullName: Microsoft.Health.HealthVaultPlatform.SearchVocabularyKeys(Microsoft.Health.HealthServiceConnection, System.String, Microsoft.Health.VocabularySearchType, System.Nullable<System.Int32>)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SearchVocabularyKeys
    path: HealthVaultPlatform.cs
    startLine: 848
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nSearches the keys of vocabularies defined by the HealthVault service.\n"
  remarks: "\nThis method does a text search of vocabulary names and descriptions.\n"
  example: []
  syntax:
    content: public static ReadOnlyCollection<VocabularyKey> SearchVocabularyKeys(HealthServiceConnection connection, string searchValue, VocabularySearchType searchType, int ? maxResults)
    content.vb: Public Shared Function SearchVocabularyKeys(connection As HealthServiceConnection, searchValue As String, searchType As VocabularySearchType, maxResults As Integer?) As ReadOnlyCollection(Of VocabularyKey)
    parameters:
    - id: connection
      type: Microsoft.Health.HealthServiceConnection
      description: "\nThe connection to use for this operation. The connection\nmust have application capability. \n"
    - id: searchValue
      type: System.String
      description: "\nThe search string to use.\n"
    - id: searchType
      type: Microsoft.Health.VocabularySearchType
      description: "\nThe type of search to perform.\n"
    - id: maxResults
      type: System.Nullable{System.Int32}
      description: "\nThe maximum number of results to return. If null, all matching results \nare returned, up to a maximum number defined by the service config \nvalue with key maxResultsPerVocabularyRetrieval.\n"
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Health.VocabularyKey}
      description: "\nA <strong>ReadOnlyCollection</strong> of <xref href=\"Microsoft.Health.VocabularyKey\" data-throw-if-not-resolved=\"false\"></xref> with entries\nmatching the search criteria.\n"
  overload: Microsoft.Health.HealthVaultPlatform.SearchVocabularyKeys*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">searchValue</span> is <strong>null</strong> or empty or greater \nthan <strong>255</strong> characters.\n<br />\n-Or-\n<br />\nif <span class=\"paramref\">searchType</span> is not a known \n<xref href=\"Microsoft.Health.VocabularySearchType\" data-throw-if-not-resolved=\"false\"></xref> value.        \n<br />\n-Or-\n<br />\nwhen <span class=\"paramref\">maxResults</span> is defined but has a value less than 1.        \n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThere is an error in the server request.        \n"
  nameWithType.vb: HealthVaultPlatform.SearchVocabularyKeys(HealthServiceConnection, String, VocabularySearchType, Nullable(Of Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.HealthVaultPlatform.SearchVocabularyKeys(Microsoft.Health.HealthServiceConnection, System.String, Microsoft.Health.VocabularySearchType, System.Nullable(Of System.Int32))
  name.vb: SearchVocabularyKeys(HealthServiceConnection, String, VocabularySearchType, Nullable(Of Int32))
- uid: Microsoft.Health.HealthVaultPlatform.SearchVocabulary(Microsoft.Health.HealthServiceConnection,Microsoft.Health.VocabularyKey,System.String,Microsoft.Health.VocabularySearchType,System.Nullable{System.Int32})
  commentId: M:Microsoft.Health.HealthVaultPlatform.SearchVocabulary(Microsoft.Health.HealthServiceConnection,Microsoft.Health.VocabularyKey,System.String,Microsoft.Health.VocabularySearchType,System.Nullable{System.Int32})
  id: SearchVocabulary(Microsoft.Health.HealthServiceConnection,Microsoft.Health.VocabularyKey,System.String,Microsoft.Health.VocabularySearchType,System.Nullable{System.Int32})
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: SearchVocabulary(HealthServiceConnection, VocabularyKey, String, VocabularySearchType, Nullable<Int32>)
  nameWithType: HealthVaultPlatform.SearchVocabulary(HealthServiceConnection, VocabularyKey, String, VocabularySearchType, Nullable<Int32>)
  fullName: Microsoft.Health.HealthVaultPlatform.SearchVocabulary(Microsoft.Health.HealthServiceConnection, Microsoft.Health.VocabularyKey, System.String, Microsoft.Health.VocabularySearchType, System.Nullable<System.Int32>)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SearchVocabulary
    path: HealthVaultPlatform.cs
    startLine: 940
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nSearches a specific vocabulary and retrieves the matching vocabulary items.\n"
  remarks: "\nThis method does text search matching of display text and abbreviation text\nfor the culture defined by the <xref href=\"Microsoft.Health.HealthServiceConnection.Culture\" data-throw-if-not-resolved=\"false\"></xref>. \nThe <span class=\"paramref\">searchValue</span> is a string of characters in the specified \nculture. \n"
  example: []
  syntax:
    content: public static VocabularyItemCollection SearchVocabulary(HealthServiceConnection connection, VocabularyKey vocabularyKey, string searchValue, VocabularySearchType searchType, int ? maxResults)
    content.vb: Public Shared Function SearchVocabulary(connection As HealthServiceConnection, vocabularyKey As VocabularyKey, searchValue As String, searchType As VocabularySearchType, maxResults As Integer?) As VocabularyItemCollection
    parameters:
    - id: connection
      type: Microsoft.Health.HealthServiceConnection
      description: "\nThe connection to use for this operation. The connection\nmust have application capability. \n"
    - id: vocabularyKey
      type: Microsoft.Health.VocabularyKey
      description: "\nThe <xref href=\"Microsoft.Health.VocabularyKey\" data-throw-if-not-resolved=\"false\"></xref> defining the vocabulary to search. If the \nfamily is not specified, the default HealthVault vocabulary family is used. \nIf the version is not specified, the most current version of the vocabulary \nis used.\n"
    - id: searchValue
      type: System.String
      description: "\nThe search string to use.\n"
    - id: searchType
      type: Microsoft.Health.VocabularySearchType
      description: "\nThe type of search to perform.\n"
    - id: maxResults
      type: System.Nullable{System.Int32}
      description: "\nThe maximum number of results to return. If null, all matching results \nare returned, up to a maximum number defined by the service config \nvalue with key maxResultsPerVocabularyRetrieval.\n"
    return:
      type: Microsoft.Health.VocabularyItemCollection
      description: "\nA <xref href=\"Microsoft.Health.VocabularyItemCollection\" data-throw-if-not-resolved=\"false\"></xref> populated with entries matching \nthe search criteria.\n"
  overload: Microsoft.Health.HealthVaultPlatform.SearchVocabulary*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">vocabularyKey</span> is <strong>null</strong>.\n<br />\n-Or-\n<br />\nIf <span class=\"paramref\">searchValue</span> is <strong>null</strong> or empty or greater \nthan <strong>255</strong> characters.\n<br />\n-Or-\n<br />\nif <span class=\"paramref\">searchType</span> is not a known \n<xref href=\"Microsoft.Health.VocabularySearchType\" data-throw-if-not-resolved=\"false\"></xref> value.        \n<br />\n-Or-\n<br />\nwhen <span class=\"paramref\">maxResults</span> is defined but has a value less than 1.        \n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThere is an error in the server request.         \n<br />\n-Or-        \n<br />\nThe requested vocabulary is not found on the server.\n<br />\n-Or- \nThe requested search culture is not supported. \n"
  nameWithType.vb: HealthVaultPlatform.SearchVocabulary(HealthServiceConnection, VocabularyKey, String, VocabularySearchType, Nullable(Of Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.HealthVaultPlatform.SearchVocabulary(Microsoft.Health.HealthServiceConnection, Microsoft.Health.VocabularyKey, System.String, Microsoft.Health.VocabularySearchType, System.Nullable(Of System.Int32))
  name.vb: SearchVocabulary(HealthServiceConnection, VocabularyKey, String, VocabularySearchType, Nullable(Of Int32))
- uid: Microsoft.Health.HealthVaultPlatform.GetPersonInfo(Microsoft.Health.ApplicationConnection)
  commentId: M:Microsoft.Health.HealthVaultPlatform.GetPersonInfo(Microsoft.Health.ApplicationConnection)
  id: GetPersonInfo(Microsoft.Health.ApplicationConnection)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: GetPersonInfo(ApplicationConnection)
  nameWithType: HealthVaultPlatform.GetPersonInfo(ApplicationConnection)
  fullName: Microsoft.Health.HealthVaultPlatform.GetPersonInfo(Microsoft.Health.ApplicationConnection)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetPersonInfo
    path: HealthVaultPlatform.cs
    startLine: 990
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the information about the person specified.\n"
  remarks: "\nThis method always calls the HealthVault service to get the latest \ninformation. It is recommended that the calling application cache \nthe return value and only call this method again if it needs to \nrefresh the cache.\n"
  example: []
  syntax:
    content: public static PersonInfo GetPersonInfo(ApplicationConnection connection)
    content.vb: Public Shared Function GetPersonInfo(connection As ApplicationConnection) As PersonInfo
    parameters:
    - id: connection
      type: Microsoft.Health.ApplicationConnection
      description: "The connection to use to perform the operation. This connection\nmust be authenticated. "
    return:
      type: Microsoft.Health.PersonInfo
      description: "\nInformation about the person's HealthVault account.\n"
  overload: Microsoft.Health.HealthVaultPlatform.GetPersonInfo*
  exceptions:
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe HealthVault service returned an error.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.GetAuthorizedPeople(Microsoft.Health.ApplicationConnection)
  commentId: M:Microsoft.Health.HealthVaultPlatform.GetAuthorizedPeople(Microsoft.Health.ApplicationConnection)
  id: GetAuthorizedPeople(Microsoft.Health.ApplicationConnection)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: GetAuthorizedPeople(ApplicationConnection)
  nameWithType: HealthVaultPlatform.GetAuthorizedPeople(ApplicationConnection)
  fullName: Microsoft.Health.HealthVaultPlatform.GetAuthorizedPeople(Microsoft.Health.ApplicationConnection)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetAuthorizedPeople
    path: HealthVaultPlatform.cs
    startLine: 1020
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets information about people authorized for an application.\n"
  remarks: "\nThe returned IEnumerable iterator will access the HealthVault service \nacross the network. The default <xref href=\"Microsoft.Health.GetAuthorizedPeopleSettings\" data-throw-if-not-resolved=\"false\"></xref> \nvalues are used.\n"
  example: []
  syntax:
    content: public static IEnumerable<PersonInfo> GetAuthorizedPeople(ApplicationConnection connection)
    content.vb: Public Shared Function GetAuthorizedPeople(connection As ApplicationConnection) As IEnumerable(Of PersonInfo)
    parameters:
    - id: connection
      type: Microsoft.Health.ApplicationConnection
      description: "The connection to use to perform the operation. This connection\nmust be application-level. "
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Health.PersonInfo}
      description: "\nAn IEnumerable iterator of <xref href=\"Microsoft.Health.PersonInfo\" data-throw-if-not-resolved=\"false\"></xref> objects representing \npeople authorized for the application.\n"
  overload: Microsoft.Health.HealthVaultPlatform.GetAuthorizedPeople*
  exceptions:
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe HealthVault service returned an error.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.GetAuthorizedPeople(Microsoft.Health.ApplicationConnection,Microsoft.Health.GetAuthorizedPeopleSettings)
  commentId: M:Microsoft.Health.HealthVaultPlatform.GetAuthorizedPeople(Microsoft.Health.ApplicationConnection,Microsoft.Health.GetAuthorizedPeopleSettings)
  id: GetAuthorizedPeople(Microsoft.Health.ApplicationConnection,Microsoft.Health.GetAuthorizedPeopleSettings)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: GetAuthorizedPeople(ApplicationConnection, GetAuthorizedPeopleSettings)
  nameWithType: HealthVaultPlatform.GetAuthorizedPeople(ApplicationConnection, GetAuthorizedPeopleSettings)
  fullName: Microsoft.Health.HealthVaultPlatform.GetAuthorizedPeople(Microsoft.Health.ApplicationConnection, Microsoft.Health.GetAuthorizedPeopleSettings)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetAuthorizedPeople
    path: HealthVaultPlatform.cs
    startLine: 1058
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets information about people authorized for an application.\n"
  remarks: "\nThe returned IEnumerable iterator will access the HealthVault service \nacross the network. See <xref href=\"Microsoft.Health.GetAuthorizedPeopleSettings\" data-throw-if-not-resolved=\"false\"></xref> for applicable \nsettings.\n"
  example: []
  syntax:
    content: public static IEnumerable<PersonInfo> GetAuthorizedPeople(ApplicationConnection connection, GetAuthorizedPeopleSettings settings)
    content.vb: Public Shared Function GetAuthorizedPeople(connection As ApplicationConnection, settings As GetAuthorizedPeopleSettings) As IEnumerable(Of PersonInfo)
    parameters:
    - id: connection
      type: Microsoft.Health.ApplicationConnection
      description: "The connection to use to perform the operation. This connection\nmust be application-level. "
    - id: settings
      type: Microsoft.Health.GetAuthorizedPeopleSettings
      description: "\nThe <xref href=\"Microsoft.Health.GetAuthorizedPeopleSettings\" data-throw-if-not-resolved=\"false\"></xref> object used to configure the \nIEnumerable iterator returned by this method.\n"
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Health.PersonInfo}
      description: "\nAn IEnumerable iterator of <xref href=\"Microsoft.Health.PersonInfo\" data-throw-if-not-resolved=\"false\"></xref> objects representing \npeople authorized for the application.\n"
  overload: Microsoft.Health.HealthVaultPlatform.GetAuthorizedPeople*
  exceptions:
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe HealthVault service returned an error. The retrieval can be retried from the \ncurrent position by calling this method again and using the last successfully \nretrieved person Id for <xref href=\"Microsoft.Health.GetAuthorizedPeopleSettings.StartingPersonId\" data-throw-if-not-resolved=\"false\"></xref>.        \n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<span class=\"paramref\">settings</span> is null.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.GetAuthorizedRecords(Microsoft.Health.ApplicationConnection,System.Collections.Generic.IList{System.Guid})
  commentId: M:Microsoft.Health.HealthVaultPlatform.GetAuthorizedRecords(Microsoft.Health.ApplicationConnection,System.Collections.Generic.IList{System.Guid})
  id: GetAuthorizedRecords(Microsoft.Health.ApplicationConnection,System.Collections.Generic.IList{System.Guid})
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: GetAuthorizedRecords(ApplicationConnection, IList<Guid>)
  nameWithType: HealthVaultPlatform.GetAuthorizedRecords(ApplicationConnection, IList<Guid>)
  fullName: Microsoft.Health.HealthVaultPlatform.GetAuthorizedRecords(Microsoft.Health.ApplicationConnection, System.Collections.Generic.IList<System.Guid>)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetAuthorizedRecords
    path: HealthVaultPlatform.cs
    startLine: 1092
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the <xref href=\"Microsoft.Health.HealthRecordInfo\" data-throw-if-not-resolved=\"false\"></xref> for the records identified\nby the specified <span class=\"paramref\">recordIds</span>.\n"
  remarks: "\nThis method is useful in cases where the application is storing\nrecord identifiers and needs access to the functionality provided\nby the object model.\n"
  example: []
  syntax:
    content: public static Collection<HealthRecordInfo> GetAuthorizedRecords(ApplicationConnection connection, IList<Guid> recordIds)
    content.vb: Public Shared Function GetAuthorizedRecords(connection As ApplicationConnection, recordIds As IList(Of Guid)) As Collection(Of HealthRecordInfo)
    parameters:
    - id: connection
      type: Microsoft.Health.ApplicationConnection
      description: "The connection to use to perform the operation. This connection\nmust be authenticated. "
    - id: recordIds
      type: System.Collections.Generic.IList{System.Guid}
      description: "\nThe unique identifiers for the records to retrieve.\n"
    return:
      type: System.Collections.ObjectModel.Collection{Microsoft.Health.HealthRecordInfo}
      description: "\nA collection of the records matching the specified record \nidentifiers and authorized for the authenticated person.\n"
  overload: Microsoft.Health.HealthVaultPlatform.GetAuthorizedRecords*
  nameWithType.vb: HealthVaultPlatform.GetAuthorizedRecords(ApplicationConnection, IList(Of Guid))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.HealthVaultPlatform.GetAuthorizedRecords(Microsoft.Health.ApplicationConnection, System.Collections.Generic.IList(Of System.Guid))
  name.vb: GetAuthorizedRecords(ApplicationConnection, IList(Of Guid))
- uid: Microsoft.Health.HealthVaultPlatform.GetApplicationInfo(Microsoft.Health.HealthServiceConnection)
  commentId: M:Microsoft.Health.HealthVaultPlatform.GetApplicationInfo(Microsoft.Health.HealthServiceConnection)
  id: GetApplicationInfo(Microsoft.Health.HealthServiceConnection)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: GetApplicationInfo(HealthServiceConnection)
  nameWithType: HealthVaultPlatform.GetApplicationInfo(HealthServiceConnection)
  fullName: Microsoft.Health.HealthVaultPlatform.GetApplicationInfo(Microsoft.Health.HealthServiceConnection)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetApplicationInfo
    path: HealthVaultPlatform.cs
    startLine: 1124
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the application configuration information for the calling application.\n"
  remarks: "\nThis method always calls the HealthVault service to get the latest \ninformation. It returns installation configuration about the calling \napplication.\n"
  example: []
  syntax:
    content: public static ApplicationInfo GetApplicationInfo(HealthServiceConnection connection)
    content.vb: Public Shared Function GetApplicationInfo(connection As HealthServiceConnection) As ApplicationInfo
    parameters:
    - id: connection
      type: Microsoft.Health.HealthServiceConnection
      description: "The connection to use to perform the operation. This connection\nmust be application-level. "
    return:
      type: Microsoft.Health.ApplicationInfo
      description: "\nAn ApplicationInfo object for the calling application.\n"
  overload: Microsoft.Health.HealthVaultPlatform.GetApplicationInfo*
  exceptions:
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe HealthVault service returned an error.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.GetApplicationInfo(Microsoft.Health.HealthServiceConnection,System.Boolean)
  commentId: M:Microsoft.Health.HealthVaultPlatform.GetApplicationInfo(Microsoft.Health.HealthServiceConnection,System.Boolean)
  id: GetApplicationInfo(Microsoft.Health.HealthServiceConnection,System.Boolean)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: GetApplicationInfo(HealthServiceConnection, Boolean)
  nameWithType: HealthVaultPlatform.GetApplicationInfo(HealthServiceConnection, Boolean)
  fullName: Microsoft.Health.HealthVaultPlatform.GetApplicationInfo(Microsoft.Health.HealthServiceConnection, System.Boolean)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetApplicationInfo
    path: HealthVaultPlatform.cs
    startLine: 1163
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the application configuration information for the calling application.\n"
  remarks: "\nThis method always calls the HealthVault service to get the latest \ninformation. It returns installation configuration about the calling \napplication.\n"
  example: []
  syntax:
    content: public static ApplicationInfo GetApplicationInfo(HealthServiceConnection connection, bool allLanguages)
    content.vb: Public Shared Function GetApplicationInfo(connection As HealthServiceConnection, allLanguages As Boolean) As ApplicationInfo
    parameters:
    - id: connection
      type: Microsoft.Health.HealthServiceConnection
      description: "The connection to use to perform the operation. This connection\nmust be application level. "
    - id: allLanguages
      type: System.Boolean
      description: "\nA boolean value indicating whether the localized values all languages should be \nreturned, just one language. This affects all properties which can have multiple \nlocalized values, including <xref href=\"Microsoft.Health.ApplicationInfo.CultureSpecificNames\" data-throw-if-not-resolved=\"false\"></xref>, \n<xref href=\"Microsoft.Health.ApplicationInfo.CultureSpecificDescriptions\" data-throw-if-not-resolved=\"false\"></xref>,\n<xref href=\"Microsoft.Health.ApplicationInfo.CultureSpecificAuthorizationReasons\" data-throw-if-not-resolved=\"false\"></xref>, \n<xref href=\"Microsoft.Health.ApplicationInfo.LargeLogo\" data-throw-if-not-resolved=\"false\"></xref>,\n<xref href=\"Microsoft.Health.ApplicationInfo.SmallLogo\" data-throw-if-not-resolved=\"false\"></xref>,\n<xref href=\"Microsoft.Health.ApplicationInfo.PrivacyStatement\" data-throw-if-not-resolved=\"false\"></xref>,\n<xref href=\"Microsoft.Health.ApplicationInfo.TermsOfUse\" data-throw-if-not-resolved=\"false\"></xref>,\nand <xref href=\"Microsoft.Health.ApplicationInfo.DtcSuccessMessage\" data-throw-if-not-resolved=\"false\"></xref>\n"
    return:
      type: Microsoft.Health.ApplicationInfo
      description: "\nAn ApplicationInfo object for the calling application.\n"
  overload: Microsoft.Health.HealthVaultPlatform.GetApplicationInfo*
  exceptions:
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe HealthVault service returned an error.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.GetUpdatedRecordsForApplication(Microsoft.Health.HealthServiceConnection,System.Nullable{System.DateTime})
  commentId: M:Microsoft.Health.HealthVaultPlatform.GetUpdatedRecordsForApplication(Microsoft.Health.HealthServiceConnection,System.Nullable{System.DateTime})
  id: GetUpdatedRecordsForApplication(Microsoft.Health.HealthServiceConnection,System.Nullable{System.DateTime})
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: GetUpdatedRecordsForApplication(HealthServiceConnection, Nullable<DateTime>)
  nameWithType: HealthVaultPlatform.GetUpdatedRecordsForApplication(HealthServiceConnection, Nullable<DateTime>)
  fullName: Microsoft.Health.HealthVaultPlatform.GetUpdatedRecordsForApplication(Microsoft.Health.HealthServiceConnection, System.Nullable<System.DateTime>)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetUpdatedRecordsForApplication
    path: HealthVaultPlatform.cs
    startLine: 1191
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets a list of health record IDs for the current application, \nthat optionally have been updated since a specified date.\n"
  example: []
  syntax:
    content: public static IList<Guid> GetUpdatedRecordsForApplication(HealthServiceConnection connection, DateTime? updatedDate)
    content.vb: Public Shared Function GetUpdatedRecordsForApplication(connection As HealthServiceConnection, updatedDate As Date?) As IList(Of Guid)
    parameters:
    - id: connection
      type: Microsoft.Health.HealthServiceConnection
      description: "The connection to use to perform the operation. This connection\nmust be application level. "
    - id: updatedDate
      type: System.Nullable{System.DateTime}
      description: "\nDate that is used to filter health record IDs according to whether or not they have\nbeen updated since the specified date.\n"
    return:
      type: System.Collections.Generic.IList{System.Guid}
      description: "\nList of health record IDs filtered by any specified input parameters.\n"
  overload: Microsoft.Health.HealthVaultPlatform.GetUpdatedRecordsForApplication*
  nameWithType.vb: HealthVaultPlatform.GetUpdatedRecordsForApplication(HealthServiceConnection, Nullable(Of DateTime))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.HealthVaultPlatform.GetUpdatedRecordsForApplication(Microsoft.Health.HealthServiceConnection, System.Nullable(Of System.DateTime))
  name.vb: GetUpdatedRecordsForApplication(HealthServiceConnection, Nullable(Of DateTime))
- uid: Microsoft.Health.HealthVaultPlatform.GetUpdatedRecordInfoForApplication(Microsoft.Health.HealthServiceConnection,System.Nullable{System.DateTime})
  commentId: M:Microsoft.Health.HealthVaultPlatform.GetUpdatedRecordInfoForApplication(Microsoft.Health.HealthServiceConnection,System.Nullable{System.DateTime})
  id: GetUpdatedRecordInfoForApplication(Microsoft.Health.HealthServiceConnection,System.Nullable{System.DateTime})
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: GetUpdatedRecordInfoForApplication(HealthServiceConnection, Nullable<DateTime>)
  nameWithType: HealthVaultPlatform.GetUpdatedRecordInfoForApplication(HealthServiceConnection, Nullable<DateTime>)
  fullName: Microsoft.Health.HealthVaultPlatform.GetUpdatedRecordInfoForApplication(Microsoft.Health.HealthServiceConnection, System.Nullable<System.DateTime>)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetUpdatedRecordInfoForApplication
    path: HealthVaultPlatform.cs
    startLine: 1215
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets a list of <xref href=\"Microsoft.Health.HealthRecordUpdateInfo\" data-throw-if-not-resolved=\"false\"></xref> objects for the current application, \nthat optionally have been updated since a specified date.\n"
  example: []
  syntax:
    content: public static IList<HealthRecordUpdateInfo> GetUpdatedRecordInfoForApplication(HealthServiceConnection connection, DateTime? updatedDate)
    content.vb: Public Shared Function GetUpdatedRecordInfoForApplication(connection As HealthServiceConnection, updatedDate As Date?) As IList(Of HealthRecordUpdateInfo)
    parameters:
    - id: connection
      type: Microsoft.Health.HealthServiceConnection
      description: "The connection to use to perform the operation. This connection\nmust be application level. "
    - id: updatedDate
      type: System.Nullable{System.DateTime}
      description: "\nDate that is used to filter health record IDs according to whether or not they have\nbeen updated since the specified date.\n"
    return:
      type: System.Collections.Generic.IList{Microsoft.Health.HealthRecordUpdateInfo}
      description: "\nList of <xref href=\"Microsoft.Health.HealthRecordUpdateInfo\" data-throw-if-not-resolved=\"false\"></xref> objects filtered by any specified input parameters.\n"
  overload: Microsoft.Health.HealthVaultPlatform.GetUpdatedRecordInfoForApplication*
  nameWithType.vb: HealthVaultPlatform.GetUpdatedRecordInfoForApplication(HealthServiceConnection, Nullable(Of DateTime))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.HealthVaultPlatform.GetUpdatedRecordInfoForApplication(Microsoft.Health.HealthServiceConnection, System.Nullable(Of System.DateTime))
  name.vb: GetUpdatedRecordInfoForApplication(HealthServiceConnection, Nullable(Of DateTime))
- uid: Microsoft.Health.HealthVaultPlatform.NewSignupCode(Microsoft.Health.HealthServiceConnection)
  commentId: M:Microsoft.Health.HealthVaultPlatform.NewSignupCode(Microsoft.Health.HealthServiceConnection)
  id: NewSignupCode(Microsoft.Health.HealthServiceConnection)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: NewSignupCode(HealthServiceConnection)
  nameWithType: HealthVaultPlatform.NewSignupCode(HealthServiceConnection)
  fullName: Microsoft.Health.HealthVaultPlatform.NewSignupCode(Microsoft.Health.HealthServiceConnection)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: NewSignupCode
    path: HealthVaultPlatform.cs
    startLine: 1238
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGenerates a new signup code that should be passed to HealthVault Shell in order\nto create a new user account.\n"
  example: []
  syntax:
    content: public static string NewSignupCode(HealthServiceConnection connection)
    content.vb: Public Shared Function NewSignupCode(connection As HealthServiceConnection) As String
    parameters:
    - id: connection
      type: Microsoft.Health.HealthServiceConnection
      description: "The connection to use to perform the operation. This connection\nmust be application level. "
    return:
      type: System.String
      description: "\nA signup code that can be used to create an account.\n"
  overload: Microsoft.Health.HealthVaultPlatform.NewSignupCode*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.GetServiceDefinition(Microsoft.Health.HealthServiceConnection)
  commentId: M:Microsoft.Health.HealthVaultPlatform.GetServiceDefinition(Microsoft.Health.HealthServiceConnection)
  id: GetServiceDefinition(Microsoft.Health.HealthServiceConnection)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: GetServiceDefinition(HealthServiceConnection)
  nameWithType: HealthVaultPlatform.GetServiceDefinition(HealthServiceConnection)
  fullName: Microsoft.Health.HealthVaultPlatform.GetServiceDefinition(Microsoft.Health.HealthServiceConnection)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetServiceDefinition
    path: HealthVaultPlatform.cs
    startLine: 1281
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets information about the HealthVault service.\n"
  remarks: "\nGets the latest information about the HealthVault service. This \nincludes:<br />\n- The version of the service.<br />\n- The SDK assembly URLs.<br />\n- The SDK assembly versions.<br />\n- The SDK documentation URL.<br />\n- The URL to the HealthVault Shell.<br />\n- The schema definition for the HealthVault method's request and \nresponse.<br />\n- The common schema definitions for types that the HealthVault methods\nuse.<br />\n- Information about all available HealthVault instances.<br />\n"
  example: []
  syntax:
    content: public static ServiceInfo GetServiceDefinition(HealthServiceConnection connection)
    content.vb: Public Shared Function GetServiceDefinition(connection As HealthServiceConnection) As ServiceInfo
    parameters:
    - id: connection
      type: Microsoft.Health.HealthServiceConnection
      description: 'The connection to use to perform the operation. '
    return:
      type: Microsoft.Health.ServiceInfo
      description: "\nA <xref href=\"Microsoft.Health.ServiceInfo\" data-throw-if-not-resolved=\"false\"></xref> instance that contains the service version, SDK\nassemblies versions and URLs, method information, and so on.\n"
  overload: Microsoft.Health.HealthVaultPlatform.GetServiceDefinition*
  exceptions:
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe HealthVault service returned an error.\n"
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "\nOne or more URL strings returned by HealthVault is invalid.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.GetServiceDefinition(Microsoft.Health.HealthServiceConnection,System.DateTime)
  commentId: M:Microsoft.Health.HealthVaultPlatform.GetServiceDefinition(Microsoft.Health.HealthServiceConnection,System.DateTime)
  id: GetServiceDefinition(Microsoft.Health.HealthServiceConnection,System.DateTime)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: GetServiceDefinition(HealthServiceConnection, DateTime)
  nameWithType: HealthVaultPlatform.GetServiceDefinition(HealthServiceConnection, DateTime)
  fullName: Microsoft.Health.HealthVaultPlatform.GetServiceDefinition(Microsoft.Health.HealthServiceConnection, System.DateTime)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetServiceDefinition
    path: HealthVaultPlatform.cs
    startLine: 1329
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets information about the HealthVault service only if it has been updated since\nthe specified update time.\n"
  remarks: "\nGets the latest information about the HealthVault service, if there were updates\nsince the specified <span class=\"paramref\">lastUpdatedTime</span>.  If there were no updates\nthe method returns <strong>null</strong>.\nThis includes:<br />\n- The version of the service.<br />\n- The SDK assembly URLs.<br />\n- The SDK assembly versions.<br />\n- The SDK documentation URL.<br />\n- The URL to the HealthVault Shell.<br />\n- The schema definition for the HealthVault method's request and \nresponse.<br />\n- The common schema definitions for types that the HealthVault methods\nuse.<br />\n- Information about all available HealthVault instances.<br />\n"
  example: []
  syntax:
    content: public static ServiceInfo GetServiceDefinition(HealthServiceConnection connection, DateTime lastUpdatedTime)
    content.vb: Public Shared Function GetServiceDefinition(connection As HealthServiceConnection, lastUpdatedTime As Date) As ServiceInfo
    parameters:
    - id: connection
      type: Microsoft.Health.HealthServiceConnection
      description: The connection to use to perform the operation.
    - id: lastUpdatedTime
      type: System.DateTime
      description: "\nThe time of the last update to an existing cached copy of <xref href=\"Microsoft.Health.ServiceInfo\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    return:
      type: Microsoft.Health.ServiceInfo
      description: "\nIf there were updates to the service information since the specified <span class=\"paramref\">lastUpdatedTime</span>,\na <xref href=\"Microsoft.Health.ServiceInfo\" data-throw-if-not-resolved=\"false\"></xref> instance that contains the service version, SDK\nassemblies versions and URLs, method information, and so on.  Otherwise, if there were no updates,\nreturns <strong>null</strong>.\n"
  overload: Microsoft.Health.HealthVaultPlatform.GetServiceDefinition*
  exceptions:
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe HealthVault service returned an error.\n"
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "\nOne or more URL strings returned by HealthVault is invalid.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.GetServiceDefinition(Microsoft.Health.HealthServiceConnection,Microsoft.Health.ServiceInfoSections)
  commentId: M:Microsoft.Health.HealthVaultPlatform.GetServiceDefinition(Microsoft.Health.HealthServiceConnection,Microsoft.Health.ServiceInfoSections)
  id: GetServiceDefinition(Microsoft.Health.HealthServiceConnection,Microsoft.Health.ServiceInfoSections)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: GetServiceDefinition(HealthServiceConnection, ServiceInfoSections)
  nameWithType: HealthVaultPlatform.GetServiceDefinition(HealthServiceConnection, ServiceInfoSections)
  fullName: Microsoft.Health.HealthVaultPlatform.GetServiceDefinition(Microsoft.Health.HealthServiceConnection, Microsoft.Health.ServiceInfoSections)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetServiceDefinition
    path: HealthVaultPlatform.cs
    startLine: 1382
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets information about the HealthVault service corresponding to the specified\ncategories.\n"
  remarks: "\nGets the latest information about the HealthVault service. Depending on the specified\n<span class=\"paramref\">responseSections</span>, this will include some or all of:<br />\n- The version of the service.<br />\n- The SDK assembly URLs.<br />\n- The SDK assembly versions.<br />\n- The SDK documentation URL.<br />\n- The URL to the HealthVault Shell.<br />\n- The schema definition for the HealthVault method's request and \n  response.<br />\n- The common schema definitions for types that the HealthVault methods\n  use.<br />\n- Information about all available HealthVault instances.<br />\n\nRetrieving only the sections you need will give a faster response time than\ndownloading the full response.\n"
  example: []
  syntax:
    content: public static ServiceInfo GetServiceDefinition(HealthServiceConnection connection, ServiceInfoSections responseSections)
    content.vb: Public Shared Function GetServiceDefinition(connection As HealthServiceConnection, responseSections As ServiceInfoSections) As ServiceInfo
    parameters:
    - id: connection
      type: Microsoft.Health.HealthServiceConnection
      description: The connection to use to perform the operation.
    - id: responseSections
      type: Microsoft.Health.ServiceInfoSections
      description: "\nThe categories of information to be populated in the <xref href=\"Microsoft.Health.ServiceInfo\" data-throw-if-not-resolved=\"false\"></xref>\ninstance, represented as the result of XOR'ing the desired categories.\n"
    return:
      type: Microsoft.Health.ServiceInfo
      description: "\nA <xref href=\"Microsoft.Health.ServiceInfo\" data-throw-if-not-resolved=\"false\"></xref> instance that contains some or all of the service version,\nSDK assemblies versions and URLs, method information, and so on, depending on which\ninformation categories were specified.\n"
  overload: Microsoft.Health.HealthVaultPlatform.GetServiceDefinition*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<span class=\"paramref\">connection</span> is <strong>null</strong>.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe HealthVault service returned an error.\n"
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "\nOne or more URL strings returned by HealthVault is invalid.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.GetServiceDefinition(Microsoft.Health.HealthServiceConnection,Microsoft.Health.ServiceInfoSections,System.DateTime)
  commentId: M:Microsoft.Health.HealthVaultPlatform.GetServiceDefinition(Microsoft.Health.HealthServiceConnection,Microsoft.Health.ServiceInfoSections,System.DateTime)
  id: GetServiceDefinition(Microsoft.Health.HealthServiceConnection,Microsoft.Health.ServiceInfoSections,System.DateTime)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: GetServiceDefinition(HealthServiceConnection, ServiceInfoSections, DateTime)
  nameWithType: HealthVaultPlatform.GetServiceDefinition(HealthServiceConnection, ServiceInfoSections, DateTime)
  fullName: Microsoft.Health.HealthVaultPlatform.GetServiceDefinition(Microsoft.Health.HealthServiceConnection, Microsoft.Health.ServiceInfoSections, System.DateTime)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetServiceDefinition
    path: HealthVaultPlatform.cs
    startLine: 1447
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets information about the HealthVault service corresponding to the specified\ncategories if the requested information has been updated since the specified\nupdate time.\n"
  remarks: "\nGets the latest information about the HealthVault service, if there were updates\nsince the specified <span class=\"paramref\">lastUpdatedTime</span>.  If there were no updates\nthe method returns <strong>null</strong>.\nDepending on the specified\n<span class=\"paramref\">responseSections</span>, this will include some or all of:<br />\n- The version of the service.<br />\n- The SDK assembly URLs.<br />\n- The SDK assembly versions.<br />\n- The SDK documentation URL.<br />\n- The URL to the HealthVault Shell.<br />\n- The schema definition for the HealthVault method's request and \n  response.<br />\n- The common schema definitions for types that the HealthVault methods\n  use.<br />\n- Information about all available HealthVault instances.<br />\n\nRetrieving only the sections you need will give a faster response time than\ndownloading the full response.\n"
  example: []
  syntax:
    content: public static ServiceInfo GetServiceDefinition(HealthServiceConnection connection, ServiceInfoSections responseSections, DateTime lastUpdatedTime)
    content.vb: Public Shared Function GetServiceDefinition(connection As HealthServiceConnection, responseSections As ServiceInfoSections, lastUpdatedTime As Date) As ServiceInfo
    parameters:
    - id: connection
      type: Microsoft.Health.HealthServiceConnection
      description: The connection to use to perform the operation.
    - id: responseSections
      type: Microsoft.Health.ServiceInfoSections
      description: "\nThe categories of information to be populated in the <xref href=\"Microsoft.Health.ServiceInfo\" data-throw-if-not-resolved=\"false\"></xref>\ninstance, represented as the result of XOR'ing the desired categories.\n"
    - id: lastUpdatedTime
      type: System.DateTime
      description: "\nThe time of the last update to an existing cached copy of <xref href=\"Microsoft.Health.ServiceInfo\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    return:
      type: Microsoft.Health.ServiceInfo
      description: "\nIf there were updates to the service information since the specified <span class=\"paramref\">lastUpdatedTime</span>,\na <xref href=\"Microsoft.Health.ServiceInfo\" data-throw-if-not-resolved=\"false\"></xref> instance that contains some or all of the service version,\nSDK  assemblies versions and URLs, method information, and so on, depending on which\ninformation categories were specified.  Otherwise, if there were no updates, returns\n<strong>null</strong>.\n"
  overload: Microsoft.Health.HealthVaultPlatform.GetServiceDefinition*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<span class=\"paramref\">connection</span> is <strong>null</strong>.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe HealthVault service returned an error.\n"
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "\nOne or more URL strings returned by HealthVault is invalid.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.NewItems(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})
  commentId: M:Microsoft.Health.HealthVaultPlatform.NewItems(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})
  id: NewItems(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: NewItems(ApplicationConnection, HealthRecordAccessor, IList<HealthRecordItem>)
  nameWithType: HealthVaultPlatform.NewItems(ApplicationConnection, HealthRecordAccessor, IList<HealthRecordItem>)
  fullName: Microsoft.Health.HealthVaultPlatform.NewItems(Microsoft.Health.ApplicationConnection, Microsoft.Health.HealthRecordAccessor, System.Collections.Generic.IList<Microsoft.Health.HealthRecordItem>)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: NewItems
    path: HealthVaultPlatform.cs
    startLine: 1488
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nCreates new health record items associated with the record.\n"
  remarks: "\nThis method accesses the HealthVault service across the network.\n"
  example: []
  syntax:
    content: public static void NewItems(ApplicationConnection connection, HealthRecordAccessor accessor, IList<HealthRecordItem> items)
    content.vb: Public Shared Sub NewItems(connection As ApplicationConnection, accessor As HealthRecordAccessor, items As IList(Of HealthRecordItem))
    parameters:
    - id: connection
      type: Microsoft.Health.ApplicationConnection
      description: "\nThe connection to use to access the data.\n"
    - id: accessor
      type: Microsoft.Health.HealthRecordAccessor
      description: "\nThe record to use.\n"
    - id: items
      type: System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem}
      description: "\nThe health record items from which to create new instances.\n"
  overload: Microsoft.Health.HealthVaultPlatform.NewItems*
  exceptions:
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe HealthVault service returned an error. \nThe exception's Error property will contain the index of the\nitem on which the failure occurred in the ErrorInfo property. If any failures occur, \nno items will have been created.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nAt least one HealthRecordItem in the supplied list was null.\n"
  nameWithType.vb: HealthVaultPlatform.NewItems(ApplicationConnection, HealthRecordAccessor, IList(Of HealthRecordItem))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.HealthVaultPlatform.NewItems(Microsoft.Health.ApplicationConnection, Microsoft.Health.HealthRecordAccessor, System.Collections.Generic.IList(Of Microsoft.Health.HealthRecordItem))
  name.vb: NewItems(ApplicationConnection, HealthRecordAccessor, IList(Of HealthRecordItem))
- uid: Microsoft.Health.HealthVaultPlatform.UpdateItems(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})
  commentId: M:Microsoft.Health.HealthVaultPlatform.UpdateItems(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})
  id: UpdateItems(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: UpdateItems(ApplicationConnection, HealthRecordAccessor, IList<HealthRecordItem>)
  nameWithType: HealthVaultPlatform.UpdateItems(ApplicationConnection, HealthRecordAccessor, IList<HealthRecordItem>)
  fullName: Microsoft.Health.HealthVaultPlatform.UpdateItems(Microsoft.Health.ApplicationConnection, Microsoft.Health.HealthRecordAccessor, System.Collections.Generic.IList<Microsoft.Health.HealthRecordItem>)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: UpdateItems
    path: HealthVaultPlatform.cs
    startLine: 1536
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nUpdates the specified health record items in one batch call to \nthe service.\n"
  remarks: "\nOnly new items are updated with the appropriate unique identifier. \nAll other sections must be updated manually.\n<br /><br />\nThis method accesses the HealthVault service across the network.\n"
  example: []
  syntax:
    content: public static void UpdateItems(ApplicationConnection connection, HealthRecordAccessor accessor, IList<HealthRecordItem> itemsToUpdate)
    content.vb: Public Shared Sub UpdateItems(connection As ApplicationConnection, accessor As HealthRecordAccessor, itemsToUpdate As IList(Of HealthRecordItem))
    parameters:
    - id: connection
      type: Microsoft.Health.ApplicationConnection
      description: "\nThe connection to use to access the data.\n"
    - id: accessor
      type: Microsoft.Health.HealthRecordAccessor
      description: "\nThe record to use.\n"
    - id: itemsToUpdate
      type: System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem}
      description: "\nThe health record items to be updated.\n"
  overload: Microsoft.Health.HealthVaultPlatform.UpdateItems*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <span class=\"paramref\">itemsToUpdate</span> parameter is <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">itemsToUpdate</span> contains a <strong>null</strong> member or\na <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref> instance that does not have an ID.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe HealthVault service returned an error.\nThe exception's Error property will contain the index of the\nitem on which the failure occurred in the ErrorInfo property. If any failures occur, \nno items will have been updated.\n"
  nameWithType.vb: HealthVaultPlatform.UpdateItems(ApplicationConnection, HealthRecordAccessor, IList(Of HealthRecordItem))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.HealthVaultPlatform.UpdateItems(Microsoft.Health.ApplicationConnection, Microsoft.Health.HealthRecordAccessor, System.Collections.Generic.IList(Of Microsoft.Health.HealthRecordItem))
  name.vb: UpdateItems(ApplicationConnection, HealthRecordAccessor, IList(Of HealthRecordItem))
- uid: Microsoft.Health.HealthVaultPlatform.RemoveItems(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItemKey})
  commentId: M:Microsoft.Health.HealthVaultPlatform.RemoveItems(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItemKey})
  id: RemoveItems(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItemKey})
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: RemoveItems(ApplicationConnection, HealthRecordAccessor, IList<HealthRecordItemKey>)
  nameWithType: HealthVaultPlatform.RemoveItems(ApplicationConnection, HealthRecordAccessor, IList<HealthRecordItemKey>)
  fullName: Microsoft.Health.HealthVaultPlatform.RemoveItems(Microsoft.Health.ApplicationConnection, Microsoft.Health.HealthRecordAccessor, System.Collections.Generic.IList<Microsoft.Health.HealthRecordItemKey>)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: RemoveItems
    path: HealthVaultPlatform.cs
    startLine: 1579
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nMarks the specified health record item as deleted.\n"
  remarks: "\nThis method accesses the HealthVault service across the network.\n<br /><br />\nHealth record items are never completely deleted. They are marked \nas deleted and are ignored for most normal operations. Items can \nbe undeleted by contacting customer service.\n"
  example: []
  syntax:
    content: public static void RemoveItems(ApplicationConnection connection, HealthRecordAccessor accessor, IList<HealthRecordItemKey> itemsToRemove)
    content.vb: Public Shared Sub RemoveItems(connection As ApplicationConnection, accessor As HealthRecordAccessor, itemsToRemove As IList(Of HealthRecordItemKey))
    parameters:
    - id: connection
      type: Microsoft.Health.ApplicationConnection
      description: "\nThe connection to use to access the data.\n"
    - id: accessor
      type: Microsoft.Health.HealthRecordAccessor
      description: "\nThe record to use.\n"
    - id: itemsToRemove
      type: System.Collections.Generic.IList{Microsoft.Health.HealthRecordItemKey}
      description: "\nThe unique item identifiers of the items to remove.\n"
  overload: Microsoft.Health.HealthVaultPlatform.RemoveItems*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">itemsToRemove</span> parameter is empty.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nErrors removed the health record items from the server.\nThe exception's Error property will contain the index of the\nitem on which the failure occurred in the ErrorInfo property. If any failures occur, \nno items will have been removed.\n"
  nameWithType.vb: HealthVaultPlatform.RemoveItems(ApplicationConnection, HealthRecordAccessor, IList(Of HealthRecordItemKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.HealthVaultPlatform.RemoveItems(Microsoft.Health.ApplicationConnection, Microsoft.Health.HealthRecordAccessor, System.Collections.Generic.IList(Of Microsoft.Health.HealthRecordItemKey))
  name.vb: RemoveItems(ApplicationConnection, HealthRecordAccessor, IList(Of HealthRecordItemKey))
- uid: Microsoft.Health.HealthVaultPlatform.RemoveApplicationAuthorization(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor)
  commentId: M:Microsoft.Health.HealthVaultPlatform.RemoveApplicationAuthorization(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor)
  id: RemoveApplicationAuthorization(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: RemoveApplicationAuthorization(ApplicationConnection, HealthRecordAccessor)
  nameWithType: HealthVaultPlatform.RemoveApplicationAuthorization(ApplicationConnection, HealthRecordAccessor)
  fullName: Microsoft.Health.HealthVaultPlatform.RemoveApplicationAuthorization(Microsoft.Health.ApplicationConnection, Microsoft.Health.HealthRecordAccessor)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: RemoveApplicationAuthorization
    path: HealthVaultPlatform.cs
    startLine: 1611
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nReleases the authorization of the application on the health record.\n"
  remarks: "\nOnce the application releases the authorization to the health record, \ncalling any methods of this <xref href=\"Microsoft.Health.HealthRecordAccessor\" data-throw-if-not-resolved=\"false\"></xref> will result \nin a <xref href=\"Microsoft.Health.HealthServiceAccessDeniedException\" data-throw-if-not-resolved=\"false\"></xref>.\"\n"
  example: []
  syntax:
    content: public static void RemoveApplicationAuthorization(ApplicationConnection connection, HealthRecordAccessor accessor)
    content.vb: Public Shared Sub RemoveApplicationAuthorization(connection As ApplicationConnection, accessor As HealthRecordAccessor)
    parameters:
    - id: connection
      type: Microsoft.Health.ApplicationConnection
      description: "\nThe connection to use to access the data.\n"
    - id: accessor
      type: Microsoft.Health.HealthRecordAccessor
      description: "\nThe record to use.\n"
  overload: Microsoft.Health.HealthVaultPlatform.RemoveApplicationAuthorization*
  exceptions:
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nErrors during the authorization release.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.QueryPermissionsByTypes(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{System.Guid})
  commentId: M:Microsoft.Health.HealthVaultPlatform.QueryPermissionsByTypes(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{System.Guid})
  id: QueryPermissionsByTypes(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{System.Guid})
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: QueryPermissionsByTypes(ApplicationConnection, HealthRecordAccessor, IList<Guid>)
  nameWithType: HealthVaultPlatform.QueryPermissionsByTypes(ApplicationConnection, HealthRecordAccessor, IList<Guid>)
  fullName: Microsoft.Health.HealthVaultPlatform.QueryPermissionsByTypes(Microsoft.Health.ApplicationConnection, Microsoft.Health.HealthRecordAccessor, System.Collections.Generic.IList<System.Guid>)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: QueryPermissionsByTypes
    path: HealthVaultPlatform.cs
    startLine: 1657
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the permissions which the authenticated person \nhas when using the calling application for the specified item types\nin this  record.\n"
  remarks: "\nIf the list of health record item types is empty, an empty dictionary is \nreturned. If for a health record item type, the person has \nneither online access nor offline access permissions, \n<strong> null </strong> will be returned for that type in the dictionary.\n"
  example: []
  syntax:
    content: public static IDictionary<Guid, HealthRecordItemTypePermission> QueryPermissionsByTypes(ApplicationConnection connection, HealthRecordAccessor accessor, IList<Guid> healthRecordItemTypeIds)
    content.vb: Public Shared Function QueryPermissionsByTypes(connection As ApplicationConnection, accessor As HealthRecordAccessor, healthRecordItemTypeIds As IList(Of Guid)) As IDictionary(Of Guid, HealthRecordItemTypePermission)
    parameters:
    - id: connection
      type: Microsoft.Health.ApplicationConnection
      description: "\nThe connection to use to access the data.\n"
    - id: accessor
      type: Microsoft.Health.HealthRecordAccessor
      description: "\nThe record to use.\n"
    - id: healthRecordItemTypeIds
      type: System.Collections.Generic.IList{System.Guid}
      description: "\nA collection of unique identifiers to identify the health record  \nitem types, for which the permissions are being queried. \n"
    return:
      type: System.Collections.Generic.IDictionary{System.Guid,Microsoft.Health.HealthRecordItemTypePermission}
      description: "\nReturns a dictionary of <xref href=\"Microsoft.Health.HealthRecordItemTypePermission\" data-throw-if-not-resolved=\"false\"></xref> \nwith health record item types as the keys. \n"
  overload: Microsoft.Health.HealthVaultPlatform.QueryPermissionsByTypes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">healthRecordItemTypeIds</span> is <strong>null</strong>.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf there is an exception during executing the request to HealthVault. \n"
  nameWithType.vb: HealthVaultPlatform.QueryPermissionsByTypes(ApplicationConnection, HealthRecordAccessor, IList(Of Guid))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.HealthVaultPlatform.QueryPermissionsByTypes(Microsoft.Health.ApplicationConnection, Microsoft.Health.HealthRecordAccessor, System.Collections.Generic.IList(Of System.Guid))
  name.vb: QueryPermissionsByTypes(ApplicationConnection, HealthRecordAccessor, IList(Of Guid))
- uid: Microsoft.Health.HealthVaultPlatform.QueryPermissions(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{System.Guid})
  commentId: M:Microsoft.Health.HealthVaultPlatform.QueryPermissions(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{System.Guid})
  id: QueryPermissions(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{System.Guid})
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: QueryPermissions(ApplicationConnection, HealthRecordAccessor, IList<Guid>)
  nameWithType: HealthVaultPlatform.QueryPermissions(ApplicationConnection, HealthRecordAccessor, IList<Guid>)
  fullName: Microsoft.Health.HealthVaultPlatform.QueryPermissions(Microsoft.Health.ApplicationConnection, Microsoft.Health.HealthRecordAccessor, System.Collections.Generic.IList<System.Guid>)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: QueryPermissions
    path: HealthVaultPlatform.cs
    startLine: 1707
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the permissions which the authenticated person \nhas when using the calling application for the specified item types \nin this health record.\n"
  remarks: "\nIf the list of health record item types is empty, an empty list is \nreturned. If for a health record item type, the person has \nneither online access nor offline access permissions, \nHealthRecordItemTypePermission object is not returned for that\nhealth record item type. \n"
  example: []
  syntax:
    content: public static Collection<HealthRecordItemTypePermission> QueryPermissions(ApplicationConnection connection, HealthRecordAccessor accessor, IList<Guid> healthRecordItemTypeIds)
    content.vb: Public Shared Function QueryPermissions(connection As ApplicationConnection, accessor As HealthRecordAccessor, healthRecordItemTypeIds As IList(Of Guid)) As Collection(Of HealthRecordItemTypePermission)
    parameters:
    - id: connection
      type: Microsoft.Health.ApplicationConnection
      description: "\nThe connection to use to access the data.\n"
    - id: accessor
      type: Microsoft.Health.HealthRecordAccessor
      description: "\nThe record to use.\n"
    - id: healthRecordItemTypeIds
      type: System.Collections.Generic.IList{System.Guid}
      description: "\nA collection of uniqueidentifiers to identify the health record  \nitem types, for which the permissions are being queried. \n"
    return:
      type: System.Collections.ObjectModel.Collection{Microsoft.Health.HealthRecordItemTypePermission}
      description: "\nA list of <xref href=\"Microsoft.Health.HealthRecordItemTypePermission\" data-throw-if-not-resolved=\"false\"></xref> \nobjects which represent the permissions that the current\nauthenticated person has for the HealthRecordItemTypes specified\nin the current health record when using the current application.\n"
  overload: Microsoft.Health.HealthVaultPlatform.QueryPermissions*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">healthRecordItemTypeIds</span> is <strong>null</strong>.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf there is an exception during executing the request to HealthVault. \n"
  nameWithType.vb: HealthVaultPlatform.QueryPermissions(ApplicationConnection, HealthRecordAccessor, IList(Of Guid))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.HealthVaultPlatform.QueryPermissions(Microsoft.Health.ApplicationConnection, Microsoft.Health.HealthRecordAccessor, System.Collections.Generic.IList(Of System.Guid))
  name.vb: QueryPermissions(ApplicationConnection, HealthRecordAccessor, IList(Of Guid))
- uid: Microsoft.Health.HealthVaultPlatform.QueryRecordPermissions(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{System.Guid})
  commentId: M:Microsoft.Health.HealthVaultPlatform.QueryRecordPermissions(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{System.Guid})
  id: QueryRecordPermissions(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{System.Guid})
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: QueryRecordPermissions(ApplicationConnection, HealthRecordAccessor, IList<Guid>)
  nameWithType: HealthVaultPlatform.QueryRecordPermissions(ApplicationConnection, HealthRecordAccessor, IList<Guid>)
  fullName: Microsoft.Health.HealthVaultPlatform.QueryRecordPermissions(Microsoft.Health.ApplicationConnection, Microsoft.Health.HealthRecordAccessor, System.Collections.Generic.IList<System.Guid>)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: QueryRecordPermissions
    path: HealthVaultPlatform.cs
    startLine: 1756
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the permissions which the authenticated person \nhas when using the calling application for the specified item types \nin this health record as well as the other permission settings such as IsMeaningfulUseTrackingEnabled.\n"
  remarks: "\nIf the list of health record item types is empty, an empty list is \nreturned. If for a health record item type, the person has \nneither online access nor offline access permissions, \nHealthRecordItemTypePermission object is not returned for that\nhealth record item type. \n"
  example: []
  syntax:
    content: public static HealthRecordPermissions QueryRecordPermissions(ApplicationConnection connection, HealthRecordAccessor accessor, IList<Guid> healthRecordItemTypeIds)
    content.vb: Public Shared Function QueryRecordPermissions(connection As ApplicationConnection, accessor As HealthRecordAccessor, healthRecordItemTypeIds As IList(Of Guid)) As HealthRecordPermissions
    parameters:
    - id: connection
      type: Microsoft.Health.ApplicationConnection
      description: "\nThe connection to use to access the data.\n"
    - id: accessor
      type: Microsoft.Health.HealthRecordAccessor
      description: "\nThe record to use.\n"
    - id: healthRecordItemTypeIds
      type: System.Collections.Generic.IList{System.Guid}
      description: "\nA collection of uniqueidentifiers to identify the health record  \nitem types, for which the permissions are being queried. \n"
    return:
      type: Microsoft.Health.HealthRecordPermissions
      description: "\nA <xref href=\"Microsoft.Health.HealthRecordPermissions\" data-throw-if-not-resolved=\"false\"></xref> object\nwhich contains a collection of <xref href=\"Microsoft.Health.HealthRecordItemTypePermission\" data-throw-if-not-resolved=\"false\"></xref> objects and\nother permission settings.\n"
  overload: Microsoft.Health.HealthVaultPlatform.QueryRecordPermissions*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">healthRecordItemTypeIds</span> is <strong>null</strong>.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThere is an error in the server request.\n"
  nameWithType.vb: HealthVaultPlatform.QueryRecordPermissions(ApplicationConnection, HealthRecordAccessor, IList(Of Guid))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.HealthVaultPlatform.QueryRecordPermissions(Microsoft.Health.ApplicationConnection, Microsoft.Health.HealthRecordAccessor, System.Collections.Generic.IList(Of System.Guid))
  name.vb: QueryRecordPermissions(ApplicationConnection, HealthRecordAccessor, IList(Of Guid))
- uid: Microsoft.Health.HealthVaultPlatform.GetValidGroupMembership(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{System.Guid})
  commentId: M:Microsoft.Health.HealthVaultPlatform.GetValidGroupMembership(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{System.Guid})
  id: GetValidGroupMembership(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{System.Guid})
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: GetValidGroupMembership(ApplicationConnection, HealthRecordAccessor, IList<Guid>)
  nameWithType: HealthVaultPlatform.GetValidGroupMembership(ApplicationConnection, HealthRecordAccessor, IList<Guid>)
  fullName: Microsoft.Health.HealthVaultPlatform.GetValidGroupMembership(Microsoft.Health.ApplicationConnection, Microsoft.Health.HealthRecordAccessor, System.Collections.Generic.IList<System.Guid>)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetValidGroupMembership
    path: HealthVaultPlatform.cs
    startLine: 1801
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets valid group memberships for a record.\n"
  remarks: "\nGroup membership thing types allow an application to signify that the\nrecord belongs to an application defined group.  A record in the group may be \neligible for special programs offered by other applications, for example.  \nApplications then need a away to query for valid group memberships.\n<br />\nValid group memberships are those memberships which are not expired, and whose\nlast updating application is authorized by the the last updating person to \nread and delete the membership.\n"
  example: []
  syntax:
    content: public static Collection<HealthRecordItem> GetValidGroupMembership(ApplicationConnection connection, HealthRecordAccessor accessor, IList<Guid> applicationIds)
    content.vb: Public Shared Function GetValidGroupMembership(connection As ApplicationConnection, accessor As HealthRecordAccessor, applicationIds As IList(Of Guid)) As Collection(Of HealthRecordItem)
    parameters:
    - id: connection
      type: Microsoft.Health.ApplicationConnection
      description: "\nThe connection to use to access the data.\n"
    - id: accessor
      type: Microsoft.Health.HealthRecordAccessor
      description: "\nThe record to use.\n"
    - id: applicationIds
      type: System.Collections.Generic.IList{System.Guid}
      description: "\nA collection of unique application identifiers for which to \nsearch for group memberships.  For a null or empty application identifier \nlist, return all valid group memberships for the record.  Otherwise, \nreturn only those group memberships last updated by one of the \nsupplied application identifiers.\n"
    return:
      type: System.Collections.ObjectModel.Collection{Microsoft.Health.HealthRecordItem}
      description: "\nA List of HealthRecordItems representing the valid group memberships.\n"
  overload: Microsoft.Health.HealthVaultPlatform.GetValidGroupMembership*
  exceptions:
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf an error occurs while contacting the HealthVault service.\n"
  nameWithType.vb: HealthVaultPlatform.GetValidGroupMembership(ApplicationConnection, HealthRecordAccessor, IList(Of Guid))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.HealthVaultPlatform.GetValidGroupMembership(Microsoft.Health.ApplicationConnection, Microsoft.Health.HealthRecordAccessor, System.Collections.Generic.IList(Of System.Guid))
  name.vb: GetValidGroupMembership(ApplicationConnection, HealthRecordAccessor, IList(Of Guid))
- uid: Microsoft.Health.HealthVaultPlatform.GetMatchingItems(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,Microsoft.Health.HealthRecordSearcher)
  commentId: M:Microsoft.Health.HealthVaultPlatform.GetMatchingItems(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,Microsoft.Health.HealthRecordSearcher)
  id: GetMatchingItems(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,Microsoft.Health.HealthRecordSearcher)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: GetMatchingItems(ApplicationConnection, HealthRecordAccessor, HealthRecordSearcher)
  nameWithType: HealthVaultPlatform.GetMatchingItems(ApplicationConnection, HealthRecordAccessor, HealthRecordSearcher)
  fullName: Microsoft.Health.HealthVaultPlatform.GetMatchingItems(Microsoft.Health.ApplicationConnection, Microsoft.Health.HealthRecordAccessor, Microsoft.Health.HealthRecordSearcher)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetMatchingItems
    path: HealthVaultPlatform.cs
    startLine: 1842
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the health record items that match the filters as specified by \nthe properties of this class.\n"
  remarks: "\nThis method accesses the HealthVault service across the network.\n"
  example: []
  syntax:
    content: public static ReadOnlyCollection<HealthRecordItemCollection> GetMatchingItems(ApplicationConnection connection, HealthRecordAccessor accessor, HealthRecordSearcher searcher)
    content.vb: Public Shared Function GetMatchingItems(connection As ApplicationConnection, accessor As HealthRecordAccessor, searcher As HealthRecordSearcher) As ReadOnlyCollection(Of HealthRecordItemCollection)
    parameters:
    - id: connection
      type: Microsoft.Health.ApplicationConnection
      description: "\nThe connection to use to access the data.\n"
    - id: accessor
      type: Microsoft.Health.HealthRecordAccessor
      description: "\nThe record to use.\n"
    - id: searcher
      type: Microsoft.Health.HealthRecordSearcher
      description: "\nThe searcher that defines what items to return. .\n"
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Health.HealthRecordItemCollection}
      description: "\nA collection of health record items that match the applied filters.\n"
  overload: Microsoft.Health.HealthVaultPlatform.GetMatchingItems*
  exceptions:
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe response from the server was anything but \n<xref href=\"Microsoft.Health.HealthServiceStatusCode.Ok\" data-throw-if-not-resolved=\"false\"></xref>.\n-or-\n<xref href=\"Microsoft.Health.HealthRecordSearcher.Filters\" data-throw-if-not-resolved=\"false\"></xref> is empty\nor contains invalid filters.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.GetMatchingItemsReader(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,Microsoft.Health.HealthRecordSearcher)
  commentId: M:Microsoft.Health.HealthVaultPlatform.GetMatchingItemsReader(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,Microsoft.Health.HealthRecordSearcher)
  id: GetMatchingItemsReader(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,Microsoft.Health.HealthRecordSearcher)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: GetMatchingItemsReader(ApplicationConnection, HealthRecordAccessor, HealthRecordSearcher)
  nameWithType: HealthVaultPlatform.GetMatchingItemsReader(ApplicationConnection, HealthRecordAccessor, HealthRecordSearcher)
  fullName: Microsoft.Health.HealthVaultPlatform.GetMatchingItemsReader(Microsoft.Health.ApplicationConnection, Microsoft.Health.HealthRecordAccessor, Microsoft.Health.HealthRecordSearcher)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetMatchingItemsReader
    path: HealthVaultPlatform.cs
    startLine: 1879
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the health record items that match the filters as specified by \nthe properties of this class.\n"
  remarks: "\nThis method accesses the HealthVault service across the network.\n<br /><br />\nThis method is typically used when the calling application wants to\nhandle the raw health record item XML directly instead of using the \nobject model.\n"
  example: []
  syntax:
    content: public static XmlReader GetMatchingItemsReader(ApplicationConnection connection, HealthRecordAccessor accessor, HealthRecordSearcher searcher)
    content.vb: Public Shared Function GetMatchingItemsReader(connection As ApplicationConnection, accessor As HealthRecordAccessor, searcher As HealthRecordSearcher) As XmlReader
    parameters:
    - id: connection
      type: Microsoft.Health.ApplicationConnection
      description: "\nThe connection to use to access the data.\n"
    - id: accessor
      type: Microsoft.Health.HealthRecordAccessor
      description: "\nThe record to use.\n"
    - id: searcher
      type: Microsoft.Health.HealthRecordSearcher
      description: "\nThe searcher that defines what items to return.\n"
    return:
      type: System.Xml.XmlReader
      description: "\nAn XmlReader representing the raw results of the search.\n"
  overload: Microsoft.Health.HealthVaultPlatform.GetMatchingItemsReader*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.GetMatchingItemsRaw(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,Microsoft.Health.HealthRecordSearcher)
  commentId: M:Microsoft.Health.HealthVaultPlatform.GetMatchingItemsRaw(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,Microsoft.Health.HealthRecordSearcher)
  id: GetMatchingItemsRaw(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,Microsoft.Health.HealthRecordSearcher)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: GetMatchingItemsRaw(ApplicationConnection, HealthRecordAccessor, HealthRecordSearcher)
  nameWithType: HealthVaultPlatform.GetMatchingItemsRaw(ApplicationConnection, HealthRecordAccessor, HealthRecordSearcher)
  fullName: Microsoft.Health.HealthVaultPlatform.GetMatchingItemsRaw(Microsoft.Health.ApplicationConnection, Microsoft.Health.HealthRecordAccessor, Microsoft.Health.HealthRecordSearcher)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetMatchingItemsRaw
    path: HealthVaultPlatform.cs
    startLine: 1916
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the health record items that match the filters as specified by \nthe properties of this class.\n"
  remarks: "\nThis method accesses the HealthVault service across the network.\n<br /><br />\nThis method is typically used when the calling application wants to\nhandle the raw health record item XML directly instead of using the \nobject model.\n"
  example: []
  syntax:
    content: public static XPathNavigator GetMatchingItemsRaw(ApplicationConnection connection, HealthRecordAccessor accessor, HealthRecordSearcher searcher)
    content.vb: Public Shared Function GetMatchingItemsRaw(connection As ApplicationConnection, accessor As HealthRecordAccessor, searcher As HealthRecordSearcher) As XPathNavigator
    parameters:
    - id: connection
      type: Microsoft.Health.ApplicationConnection
      description: "\nThe connection to use to access the data.\n"
    - id: accessor
      type: Microsoft.Health.HealthRecordAccessor
      description: "\nThe record to use.\n"
    - id: searcher
      type: Microsoft.Health.HealthRecordSearcher
      description: "\nThe searcher that defines what items to return.\n"
    return:
      type: System.Xml.XPath.XPathNavigator
      description: "\nAn XPathNavigator representing the raw results of the search.\n"
  overload: Microsoft.Health.HealthVaultPlatform.GetMatchingItemsRaw*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.GetTransformedItems(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,Microsoft.Health.HealthRecordSearcher,System.String)
  commentId: M:Microsoft.Health.HealthVaultPlatform.GetTransformedItems(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,Microsoft.Health.HealthRecordSearcher,System.String)
  id: GetTransformedItems(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,Microsoft.Health.HealthRecordSearcher,System.String)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: GetTransformedItems(ApplicationConnection, HealthRecordAccessor, HealthRecordSearcher, String)
  nameWithType: HealthVaultPlatform.GetTransformedItems(ApplicationConnection, HealthRecordAccessor, HealthRecordSearcher, String)
  fullName: Microsoft.Health.HealthVaultPlatform.GetTransformedItems(Microsoft.Health.ApplicationConnection, Microsoft.Health.HealthRecordAccessor, Microsoft.Health.HealthRecordSearcher, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetTransformedItems
    path: HealthVaultPlatform.cs
    startLine: 1998
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the health record items specified by the \n<xref href=\"Microsoft.Health.HealthRecordSearcher\" data-throw-if-not-resolved=\"false\"></xref> and runs them through the specified \ntransform.\n"
  remarks: "\nThis method accesses the HealthVault service across the network.\n<br /><br />\nAny call to HealthVault may specify a transform to be run on the\nresponse XML. The transform can be specified as a XSL fragment or\na well-known transform tag provided by the HealthVault service. If a\nXSL fragment is specified, it gets compiled and cached on the server.\n<br />\n<br />\nA final-xsl is useful when you want to convert the result from XML to\nHTML so that you can display the result directly in a web page.\nYou may also use it to generate other data formats like CCR, CCD, CSV,\nRSS, etc.\n<br />\n<br />\nTransform fragments cannot contain embedded script. The following set\nof parameters are passed to all final-xsl transforms:<br />\n<ul>\n<li>currentDateTimeUtc - the date and time just before the transform \nstarted executing</li>\n<li>requestingApplicationName - the name of the application that\nmade the request to HealthVault.</li>\n<li>countryCode - the ISO 3166 country code from the request.</li>\n<li>languageCode - the ISO 639-1 language code from the request.</li>\n<li>personName - the name of the person making the request.</li>\n<li>recordName - if the request identified a HealthVault record to \nbe used, this parameter contains the name of that record.</li>\n</ul>\n"
  example: []
  syntax:
    content: public static string GetTransformedItems(ApplicationConnection connection, HealthRecordAccessor accessor, HealthRecordSearcher searcher, string transform)
    content.vb: Public Shared Function GetTransformedItems(connection As ApplicationConnection, accessor As HealthRecordAccessor, searcher As HealthRecordSearcher, transform As String) As String
    parameters:
    - id: connection
      type: Microsoft.Health.ApplicationConnection
      description: "\nThe connection to use to access the data.\n"
    - id: accessor
      type: Microsoft.Health.HealthRecordAccessor
      description: "\nThe record to use.\n"
    - id: searcher
      type: Microsoft.Health.HealthRecordSearcher
      description: "\nThe searcher that defines what items to return.\n"
    - id: transform
      type: System.String
      description: "\nA URL to a transform to run on the resulting XML. This can be\na fully-qualified URL or the name of one of the standard XSLs\nprovided by the HealthVault system.\n"
    return:
      type: System.String
      description: "\nThe string resulting from performing the specified transform on\nthe XML representation of the items.\n"
  overload: Microsoft.Health.HealthVaultPlatform.GetTransformedItems*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">transform</span> parameter is <strong>null</strong> or empty.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<xref href=\"Microsoft.Health.HealthRecordView.Sections\" data-throw-if-not-resolved=\"false\"></xref> does not\ncontain the XML section in the view.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThere is a failure retrieving the items.\n-or-\nNo filters have been specified.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.UpdateChildApplication(Microsoft.Health.ApplicationConnection,Microsoft.Health.ApplicationInfo)
  commentId: M:Microsoft.Health.HealthVaultPlatform.UpdateChildApplication(Microsoft.Health.ApplicationConnection,Microsoft.Health.ApplicationInfo)
  id: UpdateChildApplication(Microsoft.Health.ApplicationConnection,Microsoft.Health.ApplicationInfo)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: UpdateChildApplication(ApplicationConnection, ApplicationInfo)
  nameWithType: HealthVaultPlatform.UpdateChildApplication(ApplicationConnection, ApplicationInfo)
  fullName: Microsoft.Health.HealthVaultPlatform.UpdateChildApplication(Microsoft.Health.ApplicationConnection, Microsoft.Health.ApplicationInfo)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: UpdateChildApplication
    path: HealthVaultPlatform.cs
    startLine: 2040
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nUpdates the application's configuration in HealthVault.\n"
  remarks: "\nThis method makes a remote call to the HealthVault service.\nThe calling application in the <span class=\"paramref\">connection</span> must be the same as\nthe application specified by this ApplicationInfo instance or its master application.\nNote, this update will replace all configuration elements for the application. It is \nadvised that <xref href=\"Microsoft.Health.ApplicationProvisioning.Provisioner.GetApplication(Microsoft.Health.Web.OfflineWebApplicationConnection%2cSystem.Guid)\" data-throw-if-not-resolved=\"false\"></xref> is \ncalled to retrieve the existing application configuration before changing values and \ncalling Update.\n"
  example: []
  syntax:
    content: public static void UpdateChildApplication(ApplicationConnection connection, ApplicationInfo applicationInfo)
    content.vb: Public Shared Sub UpdateChildApplication(connection As ApplicationConnection, applicationInfo As ApplicationInfo)
    parameters:
    - id: connection
      type: Microsoft.Health.ApplicationConnection
      description: "\nThe connection to use to make the update.\n"
    - id: applicationInfo
      type: Microsoft.Health.ApplicationInfo
      description: "\nThe updated <xref href=\"Microsoft.Health.ApplicationInfo\" data-throw-if-not-resolved=\"false\"></xref> instance.\n"
  overload: Microsoft.Health.HealthVaultPlatform.UpdateChildApplication*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> is <strong>null</strong>.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe HealthVault service returned an error.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.GetChildApplication(Microsoft.Health.Web.OfflineWebApplicationConnection,System.Guid)
  commentId: M:Microsoft.Health.HealthVaultPlatform.GetChildApplication(Microsoft.Health.Web.OfflineWebApplicationConnection,System.Guid)
  id: GetChildApplication(Microsoft.Health.Web.OfflineWebApplicationConnection,System.Guid)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: GetChildApplication(OfflineWebApplicationConnection, Guid)
  nameWithType: HealthVaultPlatform.GetChildApplication(OfflineWebApplicationConnection, Guid)
  fullName: Microsoft.Health.HealthVaultPlatform.GetChildApplication(Microsoft.Health.Web.OfflineWebApplicationConnection, System.Guid)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetChildApplication
    path: HealthVaultPlatform.cs
    startLine: 2082
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the configuration information for the specified child application ID.\n"
  example: []
  syntax:
    content: public static ApplicationInfo GetChildApplication(OfflineWebApplicationConnection connection, Guid childApplicationId)
    content.vb: Public Shared Function GetChildApplication(connection As OfflineWebApplicationConnection, childApplicationId As Guid) As ApplicationInfo
    parameters:
    - id: connection
      type: Microsoft.Health.Web.OfflineWebApplicationConnection
      description: "\nThe connection to use to get the application information.\n"
    - id: childApplicationId
      type: System.Guid
      description: "\nThe unique application identifier for the child application to get the configuration\ninformation for.\n"
    return:
      type: Microsoft.Health.ApplicationInfo
      description: "\nConfiguration information for the specified child application.\n"
  overload: Microsoft.Health.HealthVaultPlatform.GetChildApplication*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> is <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">childApplicationId</span> is <xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  - type: Microsoft.Health.HealthServiceAccessDeniedException
    commentId: T:Microsoft.Health.HealthServiceAccessDeniedException
    description: "\nIf the application specified in the <span class=\"paramref\">connection</span> is not a master\napplication, or if <span class=\"paramref\">childApplicationId</span> does not identify a child\napplication of the calling application.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf there is an error when the HealthVault service is called.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.AddChildApplication(Microsoft.Health.Web.OfflineWebApplicationConnection,Microsoft.Health.ApplicationInfo)
  commentId: M:Microsoft.Health.HealthVaultPlatform.AddChildApplication(Microsoft.Health.Web.OfflineWebApplicationConnection,Microsoft.Health.ApplicationInfo)
  id: AddChildApplication(Microsoft.Health.Web.OfflineWebApplicationConnection,Microsoft.Health.ApplicationInfo)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: AddChildApplication(OfflineWebApplicationConnection, ApplicationInfo)
  nameWithType: HealthVaultPlatform.AddChildApplication(OfflineWebApplicationConnection, ApplicationInfo)
  fullName: Microsoft.Health.HealthVaultPlatform.AddChildApplication(Microsoft.Health.Web.OfflineWebApplicationConnection, Microsoft.Health.ApplicationInfo)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: AddChildApplication
    path: HealthVaultPlatform.cs
    startLine: 2122
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nAdds a HealthVault application instance for a \"child\" application of the calling\napplication.\n"
  example: []
  syntax:
    content: public static Guid AddChildApplication(OfflineWebApplicationConnection connection, ApplicationInfo applicationConfigurationInformation)
    content.vb: Public Shared Function AddChildApplication(connection As OfflineWebApplicationConnection, applicationConfigurationInformation As ApplicationInfo) As Guid
    parameters:
    - id: connection
      type: Microsoft.Health.Web.OfflineWebApplicationConnection
      description: "\nThe connection to use to add the application.\n"
    - id: applicationConfigurationInformation
      type: Microsoft.Health.ApplicationInfo
      description: "\nConfiguration information about the application being provisioned.\n"
    return:
      type: System.Guid
      description: "\nThe new application identifier for the new application provided by HealthVault.\n"
  overload: Microsoft.Health.HealthVaultPlatform.AddChildApplication*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> or <span class=\"paramref\">applicationConfigurationInformation</span>\nis <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <xref href=\"Microsoft.Health.ApplicationInfo.Name\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"Microsoft.Health.ApplicationInfo.PublicKeys\" data-throw-if-not-resolved=\"false\"></xref>,\n<xref href=\"Microsoft.Health.ApplicationInfo.OfflineBaseAuthorizations\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"Microsoft.Health.ApplicationInfo.Description\" data-throw-if-not-resolved=\"false\"></xref>,\n<xref href=\"Microsoft.Health.ApplicationInfo.AuthorizationReason\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"Microsoft.Health.ApplicationInfo.LargeLogo\" data-throw-if-not-resolved=\"false\"></xref> \nis not specified.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf there is an error when the HealthVault service is called.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.ClearItemTypeCache
  commentId: M:Microsoft.Health.HealthVaultPlatform.ClearItemTypeCache
  id: ClearItemTypeCache
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: ClearItemTypeCache()
  nameWithType: HealthVaultPlatform.ClearItemTypeCache()
  fullName: Microsoft.Health.HealthVaultPlatform.ClearItemTypeCache()
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ClearItemTypeCache
    path: HealthVaultPlatform.cs
    startLine: 2137
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nRemoves all item type definitions from the client-side cache.\n"
  example: []
  syntax:
    content: public static void ClearItemTypeCache()
    content.vb: Public Shared Sub ClearItemTypeCache
  overload: Microsoft.Health.HealthVaultPlatform.ClearItemTypeCache*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList{System.Guid},Microsoft.Health.HealthRecordItemTypeSections,System.Collections.Generic.IList{System.String},System.Nullable{System.DateTime},Microsoft.Health.HealthServiceConnection)
  commentId: M:Microsoft.Health.HealthVaultPlatform.GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList{System.Guid},Microsoft.Health.HealthRecordItemTypeSections,System.Collections.Generic.IList{System.String},System.Nullable{System.DateTime},Microsoft.Health.HealthServiceConnection)
  id: GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList{System.Guid},Microsoft.Health.HealthRecordItemTypeSections,System.Collections.Generic.IList{System.String},System.Nullable{System.DateTime},Microsoft.Health.HealthServiceConnection)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: GetHealthRecordItemTypeDefinition(IList<Guid>, HealthRecordItemTypeSections, IList<String>, Nullable<DateTime>, HealthServiceConnection)
  nameWithType: HealthVaultPlatform.GetHealthRecordItemTypeDefinition(IList<Guid>, HealthRecordItemTypeSections, IList<String>, Nullable<DateTime>, HealthServiceConnection)
  fullName: Microsoft.Health.HealthVaultPlatform.GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList<System.Guid>, Microsoft.Health.HealthRecordItemTypeSections, System.Collections.Generic.IList<System.String>, System.Nullable<System.DateTime>, Microsoft.Health.HealthServiceConnection)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetHealthRecordItemTypeDefinition
    path: HealthVaultPlatform.cs
    startLine: 2199
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the definitions for one or more health record item type definitions\nsupported by HealthVault.\n"
  remarks: "\nThis method calls the HealthVault service if the types are not\nalready in the client-side cache.\n"
  example: []
  syntax:
    content: public static IDictionary<Guid, HealthRecordItemTypeDefinition> GetHealthRecordItemTypeDefinition(IList<Guid> typeIds, HealthRecordItemTypeSections sections, IList<string> imageTypes, DateTime? lastClientRefreshDate, HealthServiceConnection connection)
    content.vb: Public Shared Function GetHealthRecordItemTypeDefinition(typeIds As IList(Of Guid), sections As HealthRecordItemTypeSections, imageTypes As IList(Of String), lastClientRefreshDate As Date?, connection As HealthServiceConnection) As IDictionary(Of Guid, HealthRecordItemTypeDefinition)
    parameters:
    - id: typeIds
      type: System.Collections.Generic.IList{System.Guid}
      description: "\nA collection of health item type IDs whose details are being requested. Null \nindicates that all health item types should be returned.\n"
    - id: sections
      type: Microsoft.Health.HealthRecordItemTypeSections
      description: "\nA collection of HealthRecordItemTypeSections enumeration values that indicate the type \nof details to be returned for the specified health item records(s).\n"
    - id: imageTypes
      type: System.Collections.Generic.IList{System.String}
      description: "\nA collection of strings that identify which health item record images should be \nretrieved.\n\nThis requests an image of the specified mime type should be returned. For example, \nto request a GIF image, \"image/gif\" should be specified. For icons, \"image/vnd.microsoft.icon\" \nshould be specified. Note, not all health item records will have all image types and \nsome may not have any images at all.\n\nIf '*' is specified, all image types will be returned.\n"
    - id: lastClientRefreshDate
      type: System.Nullable{System.DateTime}
      description: "\nA <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> instance that specifies the time of the last refresh\nmade by the client.\n"
    - id: connection
      type: Microsoft.Health.HealthServiceConnection
      description: "\nA connection to the HealthVault service.\n"
    return:
      type: System.Collections.Generic.IDictionary{System.Guid,Microsoft.Health.HealthRecordItemTypeDefinition}
      description: "\nThe type definitions for the specified types, or empty if the\n<span class=\"paramref\">typeIds</span> parameter does not represent a known unique\ntype identifier.\n"
  overload: Microsoft.Health.HealthVaultPlatform.GetHealthRecordItemTypeDefinition*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">typeIds</span> is <strong>null</strong> and empty, or \n<span class=\"paramref\">typeIds</span> is <strong>null</strong> and member in <span class=\"paramref\">typeIds</span> is \n<xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> parameter is <strong>null</strong>.\n"
  nameWithType.vb: HealthVaultPlatform.GetHealthRecordItemTypeDefinition(IList(Of Guid), HealthRecordItemTypeSections, IList(Of String), Nullable(Of DateTime), HealthServiceConnection)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.HealthVaultPlatform.GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList(Of System.Guid), Microsoft.Health.HealthRecordItemTypeSections, System.Collections.Generic.IList(Of System.String), System.Nullable(Of System.DateTime), Microsoft.Health.HealthServiceConnection)
  name.vb: GetHealthRecordItemTypeDefinition(IList(Of Guid), HealthRecordItemTypeSections, IList(Of String), Nullable(Of DateTime), HealthServiceConnection)
- uid: Microsoft.Health.HealthVaultPlatform.CreatePatientConnection(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,System.Uri,System.String)
  commentId: M:Microsoft.Health.HealthVaultPlatform.CreatePatientConnection(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,System.Uri,System.String)
  id: CreatePatientConnection(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,System.Uri,System.String)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: CreatePatientConnection(OfflineWebApplicationConnection, String, String, String, Uri, String)
  nameWithType: HealthVaultPlatform.CreatePatientConnection(OfflineWebApplicationConnection, String, String, String, Uri, String)
  fullName: Microsoft.Health.HealthVaultPlatform.CreatePatientConnection(Microsoft.Health.Web.OfflineWebApplicationConnection, System.String, System.String, System.String, System.Uri, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CreatePatientConnection
    path: HealthVaultPlatform.cs
    startLine: 2273
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nAsks HealthVault to create a pending patient connection for the application specified\nby the connection with the specified user specific parameters.\n"
  example: []
  syntax:
    content: public static string CreatePatientConnection(OfflineWebApplicationConnection connection, string friendlyName, string securityQuestion, string securityAnswer, Uri callbackUrl, string applicationPatientId)
    content.vb: Public Shared Function CreatePatientConnection(connection As OfflineWebApplicationConnection, friendlyName As String, securityQuestion As String, securityAnswer As String, callbackUrl As Uri, applicationPatientId As String) As String
    parameters:
    - id: connection
      type: Microsoft.Health.Web.OfflineWebApplicationConnection
      description: "\nThe connection to HealthVault. The application ID in the connection is used\nwhen making the patient connection.\n"
    - id: friendlyName
      type: System.String
      description: "\nA friendly name for the patient connection which will be shown to the user when they\ngo to HealthVault Shell to validate the connection.\n"
    - id: securityQuestion
      type: System.String
      description: "\nA question (usually provided by the patient) to which the patient must provide the \nanswer when they go to validate the connection in the HealthVault Shell.\n"
    - id: securityAnswer
      type: System.String
      description: "\nThe answer to the <span class=\"paramref\">securityQuestion</span> which the patient must use\nwhen validating the connection in HealthVault Shell. The answer is case-insensitive but\notherwise must match exactly. In most cases it is recommended that this is a single \nword to prevent entry problems when validating the connection.\n"
    - id: callbackUrl
      type: System.Uri
      description: "\nNot yet implemented. May be null.\n"
    - id: applicationPatientId
      type: System.String
      description: "\nThe application specific identifier for the user. This identifier is used to uniquely\nidentify the user in the application data storage whereas the HealthVault person ID is\nused to identify the person in HealthVault.\n"
    return:
      type: System.String
      description: "\nA token that the application must give to the patient to use when validating the\nconnection request.\n"
  overload: Microsoft.Health.HealthVaultPlatform.CreatePatientConnection*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> is <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">friendlyName</span>, <span class=\"paramref\">securityQuestion</span>,\n<span class=\"paramref\">securityAnswer</span>, or <span class=\"paramref\">applicationPatientId</span> is\n<strong>null</strong> or empty.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf an error occurs when contacting HealthVault.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.DeletePendingPatientConnection(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String)
  commentId: M:Microsoft.Health.HealthVaultPlatform.DeletePendingPatientConnection(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String)
  id: DeletePendingPatientConnection(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: DeletePendingPatientConnection(OfflineWebApplicationConnection, String)
  nameWithType: HealthVaultPlatform.DeletePendingPatientConnection(OfflineWebApplicationConnection, String)
  fullName: Microsoft.Health.HealthVaultPlatform.DeletePendingPatientConnection(Microsoft.Health.Web.OfflineWebApplicationConnection, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DeletePendingPatientConnection
    path: HealthVaultPlatform.cs
    startLine: 2316
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nDeletes a request for a connection that has been made by the calling application but\nhas not been validated by the user.\n"
  example: []
  syntax:
    content: public static void DeletePendingPatientConnection(OfflineWebApplicationConnection connection, string applicationPatientId)
    content.vb: Public Shared Sub DeletePendingPatientConnection(connection As OfflineWebApplicationConnection, applicationPatientId As String)
    parameters:
    - id: connection
      type: Microsoft.Health.Web.OfflineWebApplicationConnection
      description: "\nThe connection to HealthVault to use for this operation. \n"
    - id: applicationPatientId
      type: System.String
      description: "\nThe application's identifier for the user which was used to create the connection \nrequest.\n"
  overload: Microsoft.Health.HealthVaultPlatform.DeletePendingPatientConnection*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> is <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">applicationPatientId</span> is <strong>null</strong> or empty.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf an error occurs when contacting HealthVault.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.UpdatePatientConnectionApplicationPatientId(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String)
  commentId: M:Microsoft.Health.HealthVaultPlatform.UpdatePatientConnectionApplicationPatientId(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String)
  id: UpdatePatientConnectionApplicationPatientId(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: UpdatePatientConnectionApplicationPatientId(OfflineWebApplicationConnection, String, String)
  nameWithType: HealthVaultPlatform.UpdatePatientConnectionApplicationPatientId(OfflineWebApplicationConnection, String, String)
  fullName: Microsoft.Health.HealthVaultPlatform.UpdatePatientConnectionApplicationPatientId(Microsoft.Health.Web.OfflineWebApplicationConnection, System.String, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: UpdatePatientConnectionApplicationPatientId
    path: HealthVaultPlatform.cs
    startLine: 2352
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nUpdates an existing pending patient connection with a new application patient identifier.\n"
  example: []
  syntax:
    content: public static void UpdatePatientConnectionApplicationPatientId(OfflineWebApplicationConnection connection, string oldApplicationPatientId, string newApplicationPatientId)
    content.vb: Public Shared Sub UpdatePatientConnectionApplicationPatientId(connection As OfflineWebApplicationConnection, oldApplicationPatientId As String, newApplicationPatientId As String)
    parameters:
    - id: connection
      type: Microsoft.Health.Web.OfflineWebApplicationConnection
      description: "\nThe HealthVault connection to use for the operation.\n"
    - id: oldApplicationPatientId
      type: System.String
      description: "\nThe application patient identifier that was used to make the initial connection request.\n"
    - id: newApplicationPatientId
      type: System.String
      description: "\nThe new application patient identifier.\n"
  overload: Microsoft.Health.HealthVaultPlatform.UpdatePatientConnectionApplicationPatientId*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> is <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">oldApplicationPatientId</span> or <span class=\"paramref\">newApplicationPatientId</span>\nis <strong>null</strong> or empty.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf an error occurs when contacting HealthVault.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.GetValidatedPatientConnections(Microsoft.Health.Web.OfflineWebApplicationConnection,System.DateTime)
  commentId: M:Microsoft.Health.HealthVaultPlatform.GetValidatedPatientConnections(Microsoft.Health.Web.OfflineWebApplicationConnection,System.DateTime)
  id: GetValidatedPatientConnections(Microsoft.Health.Web.OfflineWebApplicationConnection,System.DateTime)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: GetValidatedPatientConnections(OfflineWebApplicationConnection, DateTime)
  nameWithType: HealthVaultPlatform.GetValidatedPatientConnections(OfflineWebApplicationConnection, DateTime)
  fullName: Microsoft.Health.HealthVaultPlatform.GetValidatedPatientConnections(Microsoft.Health.Web.OfflineWebApplicationConnection, System.DateTime)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetValidatedPatientConnections
    path: HealthVaultPlatform.cs
    startLine: 2391
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the connections for the application that people have accepted since the specified\ndate.\n"
  remarks: "\nValidated connect requests are removed by HealthVault after 90 days. It is advised \nthat applications call <xref href=\"Microsoft.Health.HealthVaultPlatform.GetValidatedPatientConnections(Microsoft.Health.Web.OfflineWebApplicationConnection%2cSystem.DateTime)\" data-throw-if-not-resolved=\"false\"></xref> \ndaily or weekly to ensure that all validated connect requests are retrieved.\n"
  example: []
  syntax:
    content: public static Collection<ValidatedPatientConnection> GetValidatedPatientConnections(OfflineWebApplicationConnection connection, DateTime validatedSince)
    content.vb: Public Shared Function GetValidatedPatientConnections(connection As OfflineWebApplicationConnection, validatedSince As Date) As Collection(Of ValidatedPatientConnection)
    parameters:
    - id: connection
      type: Microsoft.Health.Web.OfflineWebApplicationConnection
      description: "\nThe application's connection to HealthVault.\n"
    - id: validatedSince
      type: System.DateTime
      description: "\nConnections that have been validated since this date will be returned. The date passed\nshould be in UTC time.\n"
    return:
      type: System.Collections.ObjectModel.Collection{Microsoft.Health.PatientConnect.ValidatedPatientConnection}
      description: "\nA collection of the connections that people have accepted.\n"
  overload: Microsoft.Health.HealthVaultPlatform.GetValidatedPatientConnections*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> is <strong>null</strong>.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.CreateConnectPackage(Microsoft.Health.Package.ConnectPackageCreationParameters,Microsoft.Health.ItemTypes.PasswordProtectedPackage)
  commentId: M:Microsoft.Health.HealthVaultPlatform.CreateConnectPackage(Microsoft.Health.Package.ConnectPackageCreationParameters,Microsoft.Health.ItemTypes.PasswordProtectedPackage)
  id: CreateConnectPackage(Microsoft.Health.Package.ConnectPackageCreationParameters,Microsoft.Health.ItemTypes.PasswordProtectedPackage)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: CreateConnectPackage(ConnectPackageCreationParameters, PasswordProtectedPackage)
  nameWithType: HealthVaultPlatform.CreateConnectPackage(ConnectPackageCreationParameters, PasswordProtectedPackage)
  fullName: Microsoft.Health.HealthVaultPlatform.CreateConnectPackage(Microsoft.Health.Package.ConnectPackageCreationParameters, Microsoft.Health.ItemTypes.PasswordProtectedPackage)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CreateConnectPackage
    path: HealthVaultPlatform.cs
    startLine: 2457
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nAsks HealthVault to create a pending package for the application specified\nby the connection with the specified user specific parameters and the pre-allocated\nidentity code.\n"
  remarks: "\nThe password protected package supports 2 encryption algorithms, AES256 (recommended)\nand TripleDES. \n<br /><br />\nFor AES256, the supported key size is 256 bits, the blocksize is 256 bits, the IV \nlength is 32 bytes.\n<br /><br />\nFor TripleDES, the supported key size is 192 bits, the blocksize is 64 bits, the IV \nlength is 8 bytes.\n<br /><br />\nThe encryption key should be derived using the answer, the salt, and the number of hash \niterations. The decryption will generate this key via the \n<xref href=\"System.Security.Cryptography.Rfc2898DeriveBytes\" data-throw-if-not-resolved=\"false\"></xref> class, hence, encryption should use a similar or \nidentical process. To ensure case-insensitivity, the answer should be converted to its\nlower cased form using <xref href=\"System.String.ToLowerInvariant\" data-throw-if-not-resolved=\"false\"></xref> (culturally-agnostic) \nprior to generating the derived key.\n<br /><br />\nThe algorithm used has the following parameters:\n<ul>\n<li>Mode = CipherMode.CBC</li>\n<li>Padding = PaddingMode.ISO10126</li>\n</ul>\n<br /><br />\nThe salt supplied is used as the salt to the derived key as well as the key to the \nsupplied HMAC. The salt should be at least 8 bytes long.\n<br /><br />\nIt is recommended that the number of hash iterations be at least 10000.\n"
  example: []
  syntax:
    content: public static string CreateConnectPackage(ConnectPackageCreationParameters creationParameters, PasswordProtectedPackage connectPackage)
    content.vb: Public Shared Function CreateConnectPackage(creationParameters As ConnectPackageCreationParameters, connectPackage As PasswordProtectedPackage) As String
    parameters:
    - id: creationParameters
      type: Microsoft.Health.Package.ConnectPackageCreationParameters
      description: "\nThe parameters to use when creating the package. \n"
    - id: connectPackage
      type: Microsoft.Health.ItemTypes.PasswordProtectedPackage
      description: "\nThe pending connect package that the user will add to his/her record. \nThis package's\n<xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref>'s <xref href=\"Microsoft.Health.BlobStore\" data-throw-if-not-resolved=\"false\"></xref> must be an encrypted \nblob of xml that represents a list of HealthRecordItems. This xml blob\nmust be a sequence of <thing></thing> elements, each wrapping the XML representation of a \nsingle HealthRecordItem. Each <thing></thing> element may be generated by calling \n<xref href=\"Microsoft.Health.HealthRecordItem.GetItemXml\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    return:
      type: System.String
      description: "\nA token that the application must give to the patient to use when validating the\nconnection request.\n"
  overload: Microsoft.Health.HealthVaultPlatform.CreateConnectPackage*
  exceptions:
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf an error occurs when contacting HealthVault.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.CreateConnectPackage(Microsoft.Health.Package.ConnectPackageCreationParameters,Microsoft.Health.ItemTypes.PasswordProtectedPackage,System.Collections.Generic.IEnumerable{System.Uri})
  commentId: M:Microsoft.Health.HealthVaultPlatform.CreateConnectPackage(Microsoft.Health.Package.ConnectPackageCreationParameters,Microsoft.Health.ItemTypes.PasswordProtectedPackage,System.Collections.Generic.IEnumerable{System.Uri})
  id: CreateConnectPackage(Microsoft.Health.Package.ConnectPackageCreationParameters,Microsoft.Health.ItemTypes.PasswordProtectedPackage,System.Collections.Generic.IEnumerable{System.Uri})
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: CreateConnectPackage(ConnectPackageCreationParameters, PasswordProtectedPackage, IEnumerable<Uri>)
  nameWithType: HealthVaultPlatform.CreateConnectPackage(ConnectPackageCreationParameters, PasswordProtectedPackage, IEnumerable<Uri>)
  fullName: Microsoft.Health.HealthVaultPlatform.CreateConnectPackage(Microsoft.Health.Package.ConnectPackageCreationParameters, Microsoft.Health.ItemTypes.PasswordProtectedPackage, System.Collections.Generic.IEnumerable<System.Uri>)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CreateConnectPackage
    path: HealthVaultPlatform.cs
    startLine: 2525
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nAsks HealthVault to create a pending package for the application specified\nby the connection with the specified user specific parameters and the pre-allocated\nidentity code.\n"
  remarks: "\nThe password protected package supports 2 encryption algorithms, AES256 (recommended)\nand TripleDES. \n<br /><br />\nFor AES256, the supported key size is 256 bits, the blocksize is 256 bits, the IV \nlength is 32 bytes.\n<br /><br />\nFor TripleDES, the supported key size is 192 bits, the blocksize is 64 bits, the IV \nlength is 8 bytes.\n<br /><br />\nThe encryption key should be derived using the answer, the salt, and the number of hash \niterations. The decryption will generate this key via the \n<xref href=\"System.Security.Cryptography.Rfc2898DeriveBytes\" data-throw-if-not-resolved=\"false\"></xref> class, hence, encryption should use a similar or \nidentical process. To ensure case-insensitivity, the answer should be converted to its\nlower cased form using <xref href=\"System.String.ToLowerInvariant\" data-throw-if-not-resolved=\"false\"></xref> (culturally-agnostic) \nprior to generating the derived key.\n<br /><br />\nThe algorithm used has the following parameters:\n<ul>\n<li>Mode = CipherMode.CBC</li>\n<li>Padding = PaddingMode.ISO10126</li>\n</ul>\n<br /><br />\nThe salt supplied is used as the salt to the derived key as well as the key to the \nsupplied HMAC. The salt should be at least 8 bytes long.\n<br /><br />\nIt is recommended that the number of hash iterations be at least 10000.\n"
  example: []
  syntax:
    content: public static string CreateConnectPackage(ConnectPackageCreationParameters creationParameters, PasswordProtectedPackage connectPackage, IEnumerable<Uri> packageContentsBlobUrls)
    content.vb: Public Shared Function CreateConnectPackage(creationParameters As ConnectPackageCreationParameters, connectPackage As PasswordProtectedPackage, packageContentsBlobUrls As IEnumerable(Of Uri)) As String
    parameters:
    - id: creationParameters
      type: Microsoft.Health.Package.ConnectPackageCreationParameters
      description: "\nThe parameters to use when creating the package. \n"
    - id: connectPackage
      type: Microsoft.Health.ItemTypes.PasswordProtectedPackage
      description: "\nThe pending connect package that the user will add to his/her record. \nThis package's\n<xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref>'s <xref href=\"Microsoft.Health.BlobStore\" data-throw-if-not-resolved=\"false\"></xref> must be an encrypted \nblob of xml that represents a list of HealthRecordItems. This xml blob\nmust be a sequence of <thing></thing> elements, each wrapping the XML representation of a \nsingle HealthRecordItem. Each <thing></thing> element may be generated by calling \n<xref href=\"Microsoft.Health.HealthRecordItem.GetItemXml\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    - id: packageContentsBlobUrls
      type: System.Collections.Generic.IEnumerable{System.Uri}
      description: "\nURLs of the streamed blobs of the package contents.\n"
    return:
      type: System.String
      description: "\nA token that the application must give to the patient to use when validating the\nconnection request.\n"
  overload: Microsoft.Health.HealthVaultPlatform.CreateConnectPackage*
  exceptions:
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf an error occurs when contacting HealthVault.\n"
  nameWithType.vb: HealthVaultPlatform.CreateConnectPackage(ConnectPackageCreationParameters, PasswordProtectedPackage, IEnumerable(Of Uri))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.HealthVaultPlatform.CreateConnectPackage(Microsoft.Health.Package.ConnectPackageCreationParameters, Microsoft.Health.ItemTypes.PasswordProtectedPackage, System.Collections.Generic.IEnumerable(Of System.Uri))
  name.vb: CreateConnectPackage(ConnectPackageCreationParameters, PasswordProtectedPackage, IEnumerable(Of Uri))
- uid: Microsoft.Health.HealthVaultPlatform.DeletePendingConnectPackages(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String)
  commentId: M:Microsoft.Health.HealthVaultPlatform.DeletePendingConnectPackages(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String)
  id: DeletePendingConnectPackages(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: DeletePendingConnectPackages(OfflineWebApplicationConnection, String)
  nameWithType: HealthVaultPlatform.DeletePendingConnectPackages(OfflineWebApplicationConnection, String)
  fullName: Microsoft.Health.HealthVaultPlatform.DeletePendingConnectPackages(Microsoft.Health.Web.OfflineWebApplicationConnection, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DeletePendingConnectPackages
    path: HealthVaultPlatform.cs
    startLine: 2562
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nDeletes all packages that have been created by the calling application \nfor the applicationPatientId and have not been accepted by the user.\n"
  example: []
  syntax:
    content: public static void DeletePendingConnectPackages(OfflineWebApplicationConnection connection, string applicationPatientId)
    content.vb: Public Shared Sub DeletePendingConnectPackages(connection As OfflineWebApplicationConnection, applicationPatientId As String)
    parameters:
    - id: connection
      type: Microsoft.Health.Web.OfflineWebApplicationConnection
      description: "\nThe connection to HealthVault to use for this operation. \n"
    - id: applicationPatientId
      type: System.String
      description: "\nThe application specific user ID that was used to create the connection \nrequest.\n"
  overload: Microsoft.Health.HealthVaultPlatform.DeletePendingConnectPackages*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> is <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">applicationPatientId</span> is <strong>null</strong> or empty.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf an error occurs when contacting HealthVault.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.DeletePendingConnectionPackageForIdentityCode(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String)
  commentId: M:Microsoft.Health.HealthVaultPlatform.DeletePendingConnectionPackageForIdentityCode(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String)
  id: DeletePendingConnectionPackageForIdentityCode(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: DeletePendingConnectionPackageForIdentityCode(OfflineWebApplicationConnection, String)
  nameWithType: HealthVaultPlatform.DeletePendingConnectionPackageForIdentityCode(OfflineWebApplicationConnection, String)
  fullName: Microsoft.Health.HealthVaultPlatform.DeletePendingConnectionPackageForIdentityCode(Microsoft.Health.Web.OfflineWebApplicationConnection, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DeletePendingConnectionPackageForIdentityCode
    path: HealthVaultPlatform.cs
    startLine: 2596
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nDeletes a single package that has been created by the calling application but has not been \naccepted by the user.\n"
  example: []
  syntax:
    content: public static void DeletePendingConnectionPackageForIdentityCode(OfflineWebApplicationConnection connection, string identityCode)
    content.vb: Public Shared Sub DeletePendingConnectionPackageForIdentityCode(connection As OfflineWebApplicationConnection, identityCode As String)
    parameters:
    - id: connection
      type: Microsoft.Health.Web.OfflineWebApplicationConnection
      description: "\nThe connection to HealthVault to use for this operation. \n"
    - id: identityCode
      type: System.String
      description: "\nThe unique token that identifies the package.\n"
  overload: Microsoft.Health.HealthVaultPlatform.DeletePendingConnectionPackageForIdentityCode*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> is <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">identityCode</span> is <strong>null</strong> or empty.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf an error occurs when contacting HealthVault.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.UpdateConnectPackageApplicationPatientId(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String)
  commentId: M:Microsoft.Health.HealthVaultPlatform.UpdateConnectPackageApplicationPatientId(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String)
  id: UpdateConnectPackageApplicationPatientId(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: UpdateConnectPackageApplicationPatientId(OfflineWebApplicationConnection, String, String)
  nameWithType: HealthVaultPlatform.UpdateConnectPackageApplicationPatientId(OfflineWebApplicationConnection, String, String)
  fullName: Microsoft.Health.HealthVaultPlatform.UpdateConnectPackageApplicationPatientId(Microsoft.Health.Web.OfflineWebApplicationConnection, System.String, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: UpdateConnectPackageApplicationPatientId
    path: HealthVaultPlatform.cs
    startLine: 2634
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nUpdates existing pending packages with a new application patient identifier.\n"
  example: []
  syntax:
    content: public static void UpdateConnectPackageApplicationPatientId(OfflineWebApplicationConnection connection, string oldApplicationPatientId, string newApplicationPatientId)
    content.vb: Public Shared Sub UpdateConnectPackageApplicationPatientId(connection As OfflineWebApplicationConnection, oldApplicationPatientId As String, newApplicationPatientId As String)
    parameters:
    - id: connection
      type: Microsoft.Health.Web.OfflineWebApplicationConnection
      description: "\nThe HealthVault connection to use for the operation.\n"
    - id: oldApplicationPatientId
      type: System.String
      description: "\nThe application patient identifier that was used to create the initial package.\n"
    - id: newApplicationPatientId
      type: System.String
      description: "\nThe new application patient identifier.\n"
  overload: Microsoft.Health.HealthVaultPlatform.UpdateConnectPackageApplicationPatientId*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> is <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">oldApplicationPatientId</span> or <span class=\"paramref\">newApplicationPatientId</span>\nis <strong>null</strong> or empty.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf an error occurs when contacting HealthVault.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.UpdateConnectPackageApplicationPatientIdForIdentityCode(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String)
  commentId: M:Microsoft.Health.HealthVaultPlatform.UpdateConnectPackageApplicationPatientIdForIdentityCode(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String)
  id: UpdateConnectPackageApplicationPatientIdForIdentityCode(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: UpdateConnectPackageApplicationPatientIdForIdentityCode(OfflineWebApplicationConnection, String, String)
  nameWithType: HealthVaultPlatform.UpdateConnectPackageApplicationPatientIdForIdentityCode(OfflineWebApplicationConnection, String, String)
  fullName: Microsoft.Health.HealthVaultPlatform.UpdateConnectPackageApplicationPatientIdForIdentityCode(Microsoft.Health.Web.OfflineWebApplicationConnection, System.String, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: UpdateConnectPackageApplicationPatientIdForIdentityCode
    path: HealthVaultPlatform.cs
    startLine: 2674
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nUpdates an existing pending package with a new application patient identifier.\n"
  example: []
  syntax:
    content: public static void UpdateConnectPackageApplicationPatientIdForIdentityCode(OfflineWebApplicationConnection connection, string identityCode, string newApplicationPatientId)
    content.vb: Public Shared Sub UpdateConnectPackageApplicationPatientIdForIdentityCode(connection As OfflineWebApplicationConnection, identityCode As String, newApplicationPatientId As String)
    parameters:
    - id: connection
      type: Microsoft.Health.Web.OfflineWebApplicationConnection
      description: "\nThe HealthVault connection to use for the operation.\n"
    - id: identityCode
      type: System.String
      description: "\nThe unique token that identifies the package.\n"
    - id: newApplicationPatientId
      type: System.String
      description: "\nThe new application patient identifier.\n"
  overload: Microsoft.Health.HealthVaultPlatform.UpdateConnectPackageApplicationPatientIdForIdentityCode*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> is <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">newApplicationPatientId</span>\nis <strong>null</strong> or empty.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf an error occurs when contacting HealthVault.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.AllocateConnectPackageId(Microsoft.Health.Web.OfflineWebApplicationConnection)
  commentId: M:Microsoft.Health.HealthVaultPlatform.AllocateConnectPackageId(Microsoft.Health.Web.OfflineWebApplicationConnection)
  id: AllocateConnectPackageId(Microsoft.Health.Web.OfflineWebApplicationConnection)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: AllocateConnectPackageId(OfflineWebApplicationConnection)
  nameWithType: HealthVaultPlatform.AllocateConnectPackageId(OfflineWebApplicationConnection)
  fullName: Microsoft.Health.HealthVaultPlatform.AllocateConnectPackageId(Microsoft.Health.Web.OfflineWebApplicationConnection)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: AllocateConnectPackageId
    path: HealthVaultPlatform.cs
    startLine: 2719
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nAllocates a package ID within HealthVault and returns it.\n"
  remarks: "\n<p>The package ID is allocated as a place holder for information that \nis identifiable but not yet available through the HealthVault service.\nThe returned package ID token should be stored or given to a patient, \nthen used in a call to CreateConnectPackage()\nto send the package data to the HealthVault service.</p>\n<p>The package ID is not a GUID.  It uses a shorter format that is more\nconvenient for offline delivery and manual data entry.  The HealthVault \nservice guarantees that each package ID is unique for the lifetime of the \npackage.  Once the package has been accepted by the patient using the \nHealthVault Shell, or explicitly deleted using the API, the package ID is \ndeallocated and may be reused.</p>\n"
  example: []
  syntax:
    content: public static string AllocateConnectPackageId(OfflineWebApplicationConnection connection)
    content.vb: Public Shared Function AllocateConnectPackageId(connection As OfflineWebApplicationConnection) As String
    parameters:
    - id: connection
      type: Microsoft.Health.Web.OfflineWebApplicationConnection
      description: "\nThe HealthVault connection to use for the operation.\n"
    return:
      type: System.String
      description: "\nA token that the application must give to the patient to use when validating the\nconnection request.\n"
  overload: Microsoft.Health.HealthVaultPlatform.AllocateConnectPackageId*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> is <strong>null</strong>.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf an error occurs when contacting HealthVault.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.AssociateAlternateId(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.String)
  commentId: M:Microsoft.Health.HealthVaultPlatform.AssociateAlternateId(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.String)
  id: AssociateAlternateId(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.String)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: AssociateAlternateId(ApplicationConnection, HealthRecordAccessor, String)
  nameWithType: HealthVaultPlatform.AssociateAlternateId(ApplicationConnection, HealthRecordAccessor, String)
  fullName: Microsoft.Health.HealthVaultPlatform.AssociateAlternateId(Microsoft.Health.ApplicationConnection, Microsoft.Health.HealthRecordAccessor, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: AssociateAlternateId
    path: HealthVaultPlatform.cs
    startLine: 2765
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nAssociates an alternate ID with a record.\n"
  remarks: "\nThis method accesses the HealthVault service across the network.\n"
  example: []
  syntax:
    content: public static void AssociateAlternateId(ApplicationConnection connection, HealthRecordAccessor accessor, string alternateId)
    content.vb: Public Shared Sub AssociateAlternateId(connection As ApplicationConnection, accessor As HealthRecordAccessor, alternateId As String)
    parameters:
    - id: connection
      type: Microsoft.Health.ApplicationConnection
      description: "\nThe connection to use to access the data.\n"
    - id: accessor
      type: Microsoft.Health.HealthRecordAccessor
      description: "\nThe record to use.\n"
    - id: alternateId
      type: System.String
      description: "\nThe alternate ID.\n"
  overload: Microsoft.Health.HealthVaultPlatform.AssociateAlternateId*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe connection, accessor, or alternateId parameters are null\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe alternateId parameter is empty, all whitespace, or more than 255 characters in length.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe HealthVault service returned an error. \nIf the alternate ID is already associated by this application, the ErrorCode property\nwill be set to DuplicateAlternateId.\nIf the number of alternate IDs associated with a record exceeds the limit, the ErrorCode\nproperty will be set to AlternateIdsLimitExceeded.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.DisassociateAlternateId(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.String)
  commentId: M:Microsoft.Health.HealthVaultPlatform.DisassociateAlternateId(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.String)
  id: DisassociateAlternateId(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.String)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: DisassociateAlternateId(ApplicationConnection, HealthRecordAccessor, String)
  nameWithType: HealthVaultPlatform.DisassociateAlternateId(ApplicationConnection, HealthRecordAccessor, String)
  fullName: Microsoft.Health.HealthVaultPlatform.DisassociateAlternateId(Microsoft.Health.ApplicationConnection, Microsoft.Health.HealthRecordAccessor, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DisassociateAlternateId
    path: HealthVaultPlatform.cs
    startLine: 2807
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nDisassociates an alternate id with a record.\n"
  remarks: "\nThis method accesses the HealthVault service across the network.\n"
  example: []
  syntax:
    content: public static void DisassociateAlternateId(ApplicationConnection connection, HealthRecordAccessor accessor, string alternateId)
    content.vb: Public Shared Sub DisassociateAlternateId(connection As ApplicationConnection, accessor As HealthRecordAccessor, alternateId As String)
    parameters:
    - id: connection
      type: Microsoft.Health.ApplicationConnection
      description: "\nThe connection to use to access the data.\n"
    - id: accessor
      type: Microsoft.Health.HealthRecordAccessor
      description: "\nThe record to use.\n"
    - id: alternateId
      type: System.String
      description: "\nThe alternate id.\n"
  overload: Microsoft.Health.HealthVaultPlatform.DisassociateAlternateId*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe connection, accessor, or alternateId parameters are null\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe alternateId parameter is empty, all whitespace, or more than 255 characters in length.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe HealthVault service returned an error. \nIf the alternate Id is not associated with a person and record id, the ErrorCode property\nwill be set to AlternateIdNotFound.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.DisassociateAlternateId(Microsoft.Health.ApplicationConnection,System.String)
  commentId: M:Microsoft.Health.HealthVaultPlatform.DisassociateAlternateId(Microsoft.Health.ApplicationConnection,System.String)
  id: DisassociateAlternateId(Microsoft.Health.ApplicationConnection,System.String)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: DisassociateAlternateId(ApplicationConnection, String)
  nameWithType: HealthVaultPlatform.DisassociateAlternateId(ApplicationConnection, String)
  fullName: Microsoft.Health.HealthVaultPlatform.DisassociateAlternateId(Microsoft.Health.ApplicationConnection, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DisassociateAlternateId
    path: HealthVaultPlatform.cs
    startLine: 2845
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nDisassociates an alternate id with a record.\n"
  remarks: "\nThis method accesses the HealthVault service across the network.\n"
  example: []
  syntax:
    content: public static void DisassociateAlternateId(ApplicationConnection connection, string alternateId)
    content.vb: Public Shared Sub DisassociateAlternateId(connection As ApplicationConnection, alternateId As String)
    parameters:
    - id: connection
      type: Microsoft.Health.ApplicationConnection
      description: "\nThe connection to use to access the data.\n"
    - id: alternateId
      type: System.String
      description: "\nThe alternate id.\n"
  overload: Microsoft.Health.HealthVaultPlatform.DisassociateAlternateId*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe connection, or alternateId parameters are null\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe alternateId parameter is empty, all whitespace, or more than 255 characters in length.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe HealthVault service returned an error. \nIf the alternate Id is not associated with a person and record id, the ErrorCode property\nwill be set to AlternateIdNotFound.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.GetAlternateIds(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor)
  commentId: M:Microsoft.Health.HealthVaultPlatform.GetAlternateIds(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor)
  id: GetAlternateIds(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: GetAlternateIds(ApplicationConnection, HealthRecordAccessor)
  nameWithType: HealthVaultPlatform.GetAlternateIds(ApplicationConnection, HealthRecordAccessor)
  fullName: Microsoft.Health.HealthVaultPlatform.GetAlternateIds(Microsoft.Health.ApplicationConnection, Microsoft.Health.HealthRecordAccessor)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetAlternateIds
    path: HealthVaultPlatform.cs
    startLine: 2874
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the list of alternate IDs that are associated with a record.\n"
  remarks: "\nThis method accesses the HealthVault service across the network.\n"
  example: []
  syntax:
    content: public static Collection<string> GetAlternateIds(ApplicationConnection connection, HealthRecordAccessor accessor)
    content.vb: Public Shared Function GetAlternateIds(connection As ApplicationConnection, accessor As HealthRecordAccessor) As Collection(Of String)
    parameters:
    - id: connection
      type: Microsoft.Health.ApplicationConnection
      description: "\nThe connection to use to access the data.\n"
    - id: accessor
      type: Microsoft.Health.HealthRecordAccessor
      description: "\nThe record to use.\n"
    return:
      type: System.Collections.ObjectModel.Collection{System.String}
  overload: Microsoft.Health.HealthVaultPlatform.GetAlternateIds*
  exceptions:
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe HealthVault service returned an error. \nIf the alternate Id is not associated with a person and record id, the ErrorCode property\nwill be set to AlternateIdNotFound.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.GetPersonAndRecordForAlternateId(Microsoft.Health.ApplicationConnection,System.String)
  commentId: M:Microsoft.Health.HealthVaultPlatform.GetPersonAndRecordForAlternateId(Microsoft.Health.ApplicationConnection,System.String)
  id: GetPersonAndRecordForAlternateId(Microsoft.Health.ApplicationConnection,System.String)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: GetPersonAndRecordForAlternateId(ApplicationConnection, String)
  nameWithType: HealthVaultPlatform.GetPersonAndRecordForAlternateId(ApplicationConnection, String)
  fullName: Microsoft.Health.HealthVaultPlatform.GetPersonAndRecordForAlternateId(Microsoft.Health.ApplicationConnection, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetPersonAndRecordForAlternateId
    path: HealthVaultPlatform.cs
    startLine: 2912
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the person and record IDs that were previosly associated\nwith an alternate ID.\n"
  remarks: "\nThis method accesses the HealthVault service across the network.\n"
  example: []
  syntax:
    content: public static PersonInfo GetPersonAndRecordForAlternateId(ApplicationConnection connection, string alternateId)
    content.vb: Public Shared Function GetPersonAndRecordForAlternateId(connection As ApplicationConnection, alternateId As String) As PersonInfo
    parameters:
    - id: connection
      type: Microsoft.Health.ApplicationConnection
      description: "\nThe connection to use to access the data.\n"
    - id: alternateId
      type: System.String
      description: "\nThe alternate ID.\n"
    return:
      type: Microsoft.Health.PersonInfo
  overload: Microsoft.Health.HealthVaultPlatform.GetPersonAndRecordForAlternateId*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe connection, accessor, or alternateId parameters are null\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe alternateId parameter is empty, all whitespace, or more than 255 characters in length.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe HealthVault service returned an error. \nIf the alternate Id is not associated with a person and record id, the ErrorCode property\nwill be set to AlternateIdNotFound.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.SelectInstance(Microsoft.Health.HealthServiceConnection,Microsoft.Health.Location)
  commentId: M:Microsoft.Health.HealthVaultPlatform.SelectInstance(Microsoft.Health.HealthServiceConnection,Microsoft.Health.Location)
  id: SelectInstance(Microsoft.Health.HealthServiceConnection,Microsoft.Health.Location)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: SelectInstance(HealthServiceConnection, Location)
  nameWithType: HealthVaultPlatform.SelectInstance(HealthServiceConnection, Location)
  fullName: Microsoft.Health.HealthVaultPlatform.SelectInstance(Microsoft.Health.HealthServiceConnection, Microsoft.Health.Location)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SelectInstance
    path: HealthVaultPlatform.cs
    startLine: 2963
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the instance where a HealthVault account should be created\nfor the specified account location.\n"
  remarks: "\nIf no suitable instance can be found, a null value is returned. This can happen,\nfor example, if the account location is not supported by HealthVault.\n\nCurrently the returned instance IDs all parse to integers, but that is not\nguaranteed and should not be relied upon.\n"
  example: []
  syntax:
    content: public static HealthServiceInstance SelectInstance(HealthServiceConnection connection, Location preferredLocation)
    content.vb: Public Shared Function SelectInstance(connection As HealthServiceConnection, preferredLocation As Location) As HealthServiceInstance
    parameters:
    - id: connection
      type: Microsoft.Health.HealthServiceConnection
      description: "\nThe connection to use to perform the operation.\n"
    - id: preferredLocation
      type: Microsoft.Health.Location
      description: "\nA user's preferred geographical location, used to select the best instance\nin which to create a new HealthVault account. If there is a location associated\nwith the credential that will be used to log into the account, that location\nshould be used.\n"
    return:
      type: Microsoft.Health.HealthServiceInstance
      description: "\nA <xref href=\"Microsoft.Health.HealthServiceInstance\" data-throw-if-not-resolved=\"false\"></xref> object represents the selected instance,\nor null if no suitable instance exists.\n"
  overload: Microsoft.Health.HealthVaultPlatform.SelectInstance*
  exceptions:
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe HealthVault service returned an error.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">preferredLocation</span> is <strong>null</strong>.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> parameter is <strong>null</strong>.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.GetMeaningfulUseVDTReport(Microsoft.Health.HealthServiceConnection,Microsoft.Health.DateRange)
  commentId: M:Microsoft.Health.HealthVaultPlatform.GetMeaningfulUseVDTReport(Microsoft.Health.HealthServiceConnection,Microsoft.Health.DateRange)
  id: GetMeaningfulUseVDTReport(Microsoft.Health.HealthServiceConnection,Microsoft.Health.DateRange)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: GetMeaningfulUseVDTReport(HealthServiceConnection, DateRange)
  nameWithType: HealthVaultPlatform.GetMeaningfulUseVDTReport(HealthServiceConnection, DateRange)
  fullName: Microsoft.Health.HealthVaultPlatform.GetMeaningfulUseVDTReport(Microsoft.Health.HealthServiceConnection, Microsoft.Health.DateRange)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetMeaningfulUseVDTReport
    path: HealthVaultPlatform.cs
    startLine: 3025
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nRetrieves the Meaningful Use View, Download, and Transmit (VDT) Report for the application.\n"
  remarks: "\n<p>\nThe View, Download, and Transmit (VDT) Report gives applications information to determine if they meet the Meaningful Use Stage 2 measure\nfor patients taking action on their health information. For ambulatory settings, the measure states\n\"More than 5 percent of all unique patients seen by the EP during the EHR reporting period (or their authorized representatives)\nview, download or transmit to a third party their health information\". For inpatient settings, the measure states\n\"More than 5 percent of all patients who are discharged from the Inpatient or emergency department (POS 21 or 23) of an eligible hospital\nor CAH (or their authorized representative) view, download or transmit to a third party their information during the EHR reporting period.\"\n(For more regarding this measure see \"View, download, and transmit to a 3rd party\"\nin the <a href=\"http://www.healthit.gov/policy-researchers-implementers/meaningful-use-stage-2\">Meaningful Use Stage 2 Reference Grid</a>.)\n</p>\n<p>\nHealthVault returns an entry in the report for each patient to which the data source has sent a CCDA document and\nwhere the patient has viewed, downloaded, or transmitted to a 3rd party health information from the health record.\nThe entries in the report are filtered such that only those CCDAs having an event date (which is the visit date for ambulatory settings,\nand the discharge date for inpatient settings) within the specified reporting period filter, will lead to the receiving patient being included in the report.\nThe application can use the patient identifiers in the report to help calculate the percentage value of the measure.\n</p>\n<p>\nNote that HealthVault does not know the full list of patients seen by the provider. To calculate the percentage for this measure,\nthe application must take into account the total number of unique patients seen or discharged within the desired reporting period.\n</p>\n"
  example: []
  syntax:
    content: public static IEnumerable<PatientActivity> GetMeaningfulUseVDTReport(HealthServiceConnection connection, DateRange reportingPeriodFilter)
    content.vb: Public Shared Function GetMeaningfulUseVDTReport(connection As HealthServiceConnection, reportingPeriodFilter As DateRange) As IEnumerable(Of PatientActivity)
    parameters:
    - id: connection
      type: Microsoft.Health.HealthServiceConnection
      description: "\nThe connection to use for this operation. The connection\nmust have application capability. \n"
    - id: reportingPeriodFilter
      type: Microsoft.Health.DateRange
      description: "\nThe UTC reporting period to be used to retrieve the VDT Report.\n"
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Health.MeaningfulUse.PatientActivity}
      description: "\nAn IEnumerable iterator of <xref href=\"Microsoft.Health.MeaningfulUse.PatientActivity\" data-throw-if-not-resolved=\"false\"></xref> objects which contains the list of patients to which the\ndata source sent a CCDA document where the event date (visit or discharge date) is within the specified reporting period,\nand additionally, the patient viewed, downloaded or transmitted to a 3rd party, health information in the record.\n"
  overload: Microsoft.Health.HealthVaultPlatform.GetMeaningfulUseVDTReport*
  exceptions:
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe HealthVault service returned an error.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> or <span class=\"paramref\">reportingPeriodFilter</span>\nis <strong>null</strong>.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.GetMeaningfulUseTimelyAccessDocumentReport(Microsoft.Health.HealthServiceConnection,Microsoft.Health.DateRange)
  commentId: M:Microsoft.Health.HealthVaultPlatform.GetMeaningfulUseTimelyAccessDocumentReport(Microsoft.Health.HealthServiceConnection,Microsoft.Health.DateRange)
  id: GetMeaningfulUseTimelyAccessDocumentReport(Microsoft.Health.HealthServiceConnection,Microsoft.Health.DateRange)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: GetMeaningfulUseTimelyAccessDocumentReport(HealthServiceConnection, DateRange)
  nameWithType: HealthVaultPlatform.GetMeaningfulUseTimelyAccessDocumentReport(HealthServiceConnection, DateRange)
  fullName: Microsoft.Health.HealthVaultPlatform.GetMeaningfulUseTimelyAccessDocumentReport(Microsoft.Health.HealthServiceConnection, Microsoft.Health.DateRange)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetMeaningfulUseTimelyAccessDocumentReport
    path: HealthVaultPlatform.cs
    startLine: 3083
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nRetrieves the Meaningful Use Timely Access Report for the application.\n"
  remarks: "\n<p>\nThe Timely Access Report gives applications information to determine if they meet the Meaningful Use Stage 2 measure for timely patient access to information.\nFor ambulatory settings, the measure states \"More than 50 percent of all unique patients seen by the EP during the EHR reporting period are provided timely\n(available to the patient within 4 business days after the information is available to the EP)\nonline access to their health information subject to the EP's discretion to withhold certain information\".\nFor the inpatient settings, the measure states \"More than 50 percent of all patients who are discharged from the\nInpatient or emergency department (POS 21 or 23) of an eligible hospital or CAH have their information available online\nwithin 36 hours of discharge\". (For more regarding this measure see \"View, download, and transmit to a 3rd party\"\nin the <a href=\"http://www.healthit.gov/policy-researchers-implementers/meaningful-use-stage-2\">Meaningful Use Stage 2 Reference Grid</a>.)\n</p>\n<p>\nHealthVault returns an entry in the report for each CCDA document received by the data source having an event date\n(which is the visit date for ambulatory settings, and the discharge date for inpatient settings) within the specified\nreporting period filter. Each entry consists of the date the document was made available to the patient in HealthVault, the event date,\nand the patient ID as specified in the CCDA document. The application can use this information to help calculate the percentage value of the measure.\n</p>\n<p>\nNote that HealthVault does not know the full list of patients seen by the provider and does not apply any logic to determine whether patients\nhad access to the data within the timeframe specified by the measure. To calculate the percentage for this measure, the application must take into\naccount the total number of unique patients seen or discharged within the desired reporting period, and for each patient determine if the data was made\navailable to them within the measure's specified timeframe.\n</p>\n\n"
  example: []
  syntax:
    content: public static IEnumerable<DocumentReceipt> GetMeaningfulUseTimelyAccessDocumentReport(HealthServiceConnection connection, DateRange reportingPeriodFilter)
    content.vb: Public Shared Function GetMeaningfulUseTimelyAccessDocumentReport(connection As HealthServiceConnection, reportingPeriodFilter As DateRange) As IEnumerable(Of DocumentReceipt)
    parameters:
    - id: connection
      type: Microsoft.Health.HealthServiceConnection
      description: "\nThe connection to use for this operation. The connection\nmust have application capability. \n"
    - id: reportingPeriodFilter
      type: Microsoft.Health.DateRange
      description: "\nThe UTC reporting period to be used to retrieve the Timely Access Report.\n"
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Health.MeaningfulUse.DocumentReceipt}
      description: "\nAn IEnumerable iterator of <xref href=\"Microsoft.Health.MeaningfulUse.DocumentReceipt\" data-throw-if-not-resolved=\"false\"></xref> objects which contains the\nlist of document receipts having an event date (visit or discharge date) within the specified reporting period.\n"
  overload: Microsoft.Health.HealthVaultPlatform.GetMeaningfulUseTimelyAccessDocumentReport*
  exceptions:
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe HealthVault service returned an error.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> or <span class=\"paramref\">reportingPeriodFilter</span> is <strong>null</strong>.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthVaultPlatform.GetMeaningfulUseTimelyAccessDOPUDocumentReport(Microsoft.Health.HealthServiceConnection,Microsoft.Health.DateRange)
  commentId: M:Microsoft.Health.HealthVaultPlatform.GetMeaningfulUseTimelyAccessDOPUDocumentReport(Microsoft.Health.HealthServiceConnection,Microsoft.Health.DateRange)
  id: GetMeaningfulUseTimelyAccessDOPUDocumentReport(Microsoft.Health.HealthServiceConnection,Microsoft.Health.DateRange)
  parent: Microsoft.Health.HealthVaultPlatform
  langs:
  - csharp
  - vb
  name: GetMeaningfulUseTimelyAccessDOPUDocumentReport(HealthServiceConnection, DateRange)
  nameWithType: HealthVaultPlatform.GetMeaningfulUseTimelyAccessDOPUDocumentReport(HealthServiceConnection, DateRange)
  fullName: Microsoft.Health.HealthVaultPlatform.GetMeaningfulUseTimelyAccessDOPUDocumentReport(Microsoft.Health.HealthServiceConnection, Microsoft.Health.DateRange)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatform.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetMeaningfulUseTimelyAccessDOPUDocumentReport
    path: HealthVaultPlatform.cs
    startLine: 3137
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nRetrieves the Meaningful Use Timely Access Report for applications that use DOPU to transfer CCDA documents to HealthVault.\n"
  remarks: "\n<p>\nThe Timely Access Report gives applications information to determine if they meet the Meaningful Use Stage 2 measure for timely patient access to information.\nFor ambulatory settings, the measure states \"More than 50 percent of all unique patients seen by the EP during the EHR reporting period are provided timely\n(available to the patient within 4 business days after the information is available to the EP) online access to their health information subject to the EP's discretion to withhold certain information\".\nFor the inpatient settings, the measure states \"More than 50 percent of all patients who are discharged from the Inpatient or emergency department (POS 21 or 23) of an eligible hospital\nor CAH have their information available online within 36 hours of discharge\". (For more regarding this measure see \"View, download, and transmit to a 3rd party\"\nin the <a href=\"http://www.healthit.gov/policy-researchers-implementers/meaningful-use-stage-2\">Meaningful Use Stage 2 Reference Grid</a>.)\n</p>\n<p>\nHealthVault returns an entry in the report for each CCDA document received by the data source using DOPU.\nThe entries are filtered to those that were made available to HealthVault within the specified available date range filter.\nEach entry consists of the date the document was made available to the patient in HealthVault, and the identifier of the DOPU package that was made available to the patient.\nThe application can use this information to help calculate the percentage value of the measure.\n</p>\n<p>\nNote that HealthVault does not know the full list of patients seen by the provider and does not apply any logic to determine whether patients had access to the data within the\ntimeframe specified by the measure. To calculate the percentage for this measure, the application must take into account the total number of unique patients seen or\ndischarged within the desired reporting period, and for each patient determine if the data was made available to them within the measure's specified timeframe.\n</p>\n"
  example: []
  syntax:
    content: public static IEnumerable<DOPUDocumentReceipt> GetMeaningfulUseTimelyAccessDOPUDocumentReport(HealthServiceConnection connection, DateRange availableDateFilter)
    content.vb: Public Shared Function GetMeaningfulUseTimelyAccessDOPUDocumentReport(connection As HealthServiceConnection, availableDateFilter As DateRange) As IEnumerable(Of DOPUDocumentReceipt)
    parameters:
    - id: connection
      type: Microsoft.Health.HealthServiceConnection
      description: "\nThe connection to use for this operation. The connection\nmust have application capability. \n"
    - id: availableDateFilter
      type: Microsoft.Health.DateRange
      description: "\nThe UTC date range used to filter the entries in the Timely Access Report by the date the CCDA document was made available to HealthVault.\n"
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt}
      description: "\nAn IEnumerable iterator of <xref href=\"Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt\" data-throw-if-not-resolved=\"false\"></xref> objects which contains the list of CCDA document receipts sent to HealthVault using DOPU, filtered by the available date range. \n"
  overload: Microsoft.Health.HealthVaultPlatform.GetMeaningfulUseTimelyAccessDOPUDocumentReport*
  exceptions:
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe HealthVault service returned an error.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> or <span class=\"paramref\">availableDateFilter</span>\nis <strong>null</strong>.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Health.HealthRecordAccessor
  commentId: T:Microsoft.Health.HealthRecordAccessor
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordAccessor
  nameWithType: HealthRecordAccessor
  fullName: Microsoft.Health.HealthRecordAccessor
- uid: Microsoft.Health.HealthRecordInfo
  commentId: T:Microsoft.Health.HealthRecordInfo
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordInfo
  nameWithType: HealthRecordInfo
  fullName: Microsoft.Health.HealthRecordInfo
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.HealthVaultPlatform.GetApplicationSettingsAsXml*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.GetApplicationSettingsAsXml
  isExternal: false
  name: GetApplicationSettingsAsXml
  nameWithType: HealthVaultPlatform.GetApplicationSettingsAsXml
  fullName: Microsoft.Health.HealthVaultPlatform.GetApplicationSettingsAsXml
- uid: Microsoft.Health.HealthServiceConnection
  commentId: T:Microsoft.Health.HealthServiceConnection
  parent: Microsoft.Health
  isExternal: false
  name: HealthServiceConnection
  nameWithType: HealthServiceConnection
  fullName: Microsoft.Health.HealthServiceConnection
- uid: System.Xml.XPath.IXPathNavigable
  commentId: T:System.Xml.XPath.IXPathNavigable
  parent: System.Xml.XPath
  isExternal: true
  name: IXPathNavigable
  nameWithType: IXPathNavigable
  fullName: System.Xml.XPath.IXPathNavigable
- uid: System.Xml.XPath
  commentId: N:System.Xml.XPath
  isExternal: false
  name: System.Xml.XPath
  nameWithType: System.Xml.XPath
  fullName: System.Xml.XPath
- uid: Microsoft.Health.HealthVaultPlatform.GetApplicationSettings*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.GetApplicationSettings
  isExternal: false
  name: GetApplicationSettings
  nameWithType: HealthVaultPlatform.GetApplicationSettings
  fullName: Microsoft.Health.HealthVaultPlatform.GetApplicationSettings
- uid: Microsoft.Health.ApplicationSettings
  commentId: T:Microsoft.Health.ApplicationSettings
  parent: Microsoft.Health
  isExternal: false
  name: ApplicationSettings
  nameWithType: ApplicationSettings
  fullName: Microsoft.Health.ApplicationSettings
- uid: Microsoft.Health.HealthVaultPlatform.SetApplicationSettings*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.SetApplicationSettings
  isExternal: false
  name: SetApplicationSettings
  nameWithType: HealthVaultPlatform.SetApplicationSettings
  fullName: Microsoft.Health.HealthVaultPlatform.SetApplicationSettings
- uid: Microsoft.Health.HealthVaultPlatform.SendInsecureMessage*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.SendInsecureMessage
  isExternal: false
  name: SendInsecureMessage
  nameWithType: HealthVaultPlatform.SendInsecureMessage
  fullName: Microsoft.Health.HealthVaultPlatform.SendInsecureMessage
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: Microsoft.Health.HealthServiceException
  commentId: T:Microsoft.Health.HealthServiceException
  parent: Microsoft.Health
  isExternal: false
  name: HealthServiceException
  nameWithType: HealthServiceException
  fullName: Microsoft.Health.HealthServiceException
- uid: System.Collections.Generic.IList{Microsoft.Health.MailRecipient}
  commentId: T:System.Collections.Generic.IList{Microsoft.Health.MailRecipient}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<MailRecipient>
  nameWithType: IList<MailRecipient>
  fullName: System.Collections.Generic.IList<Microsoft.Health.MailRecipient>
  nameWithType.vb: IList(Of MailRecipient)
  fullName.vb: System.Collections.Generic.IList(Of Microsoft.Health.MailRecipient)
  name.vb: IList(Of MailRecipient)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.MailRecipient
    name: MailRecipient
    nameWithType: MailRecipient
    fullName: Microsoft.Health.MailRecipient
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.MailRecipient
    name: MailRecipient
    nameWithType: MailRecipient
    fullName: Microsoft.Health.MailRecipient
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IList{System.Guid}
  commentId: T:System.Collections.Generic.IList{System.Guid}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Guid>
  nameWithType: IList<Guid>
  fullName: System.Collections.Generic.IList<System.Guid>
  nameWithType.vb: IList(Of Guid)
  fullName.vb: System.Collections.Generic.IList(Of System.Guid)
  name.vb: IList(Of Guid)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Guid.Empty
  commentId: F:System.Guid.Empty
- uid: Microsoft.Health.HealthVaultPlatform.SendInsecureMessageToCustodians*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.SendInsecureMessageToCustodians
  isExternal: false
  name: SendInsecureMessageToCustodians
  nameWithType: HealthVaultPlatform.SendInsecureMessageToCustodians
  fullName: Microsoft.Health.HealthVaultPlatform.SendInsecureMessageToCustodians
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: Microsoft.Health.HealthVaultPlatform.SendInsecureMessageFromApplication*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.SendInsecureMessageFromApplication
  isExternal: false
  name: SendInsecureMessageFromApplication
  nameWithType: HealthVaultPlatform.SendInsecureMessageFromApplication
  fullName: Microsoft.Health.HealthVaultPlatform.SendInsecureMessageFromApplication
- uid: Microsoft.Health.Web.OfflineWebApplicationConnection
  commentId: T:Microsoft.Health.Web.OfflineWebApplicationConnection
  parent: Microsoft.Health.Web
  isExternal: false
  name: OfflineWebApplicationConnection
  nameWithType: OfflineWebApplicationConnection
  fullName: Microsoft.Health.Web.OfflineWebApplicationConnection
- uid: Microsoft.Health.HealthVaultPlatform.SendInsecureMessageToCustodiansFromApplication*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.SendInsecureMessageToCustodiansFromApplication
  isExternal: false
  name: SendInsecureMessageToCustodiansFromApplication
  nameWithType: HealthVaultPlatform.SendInsecureMessageToCustodiansFromApplication
  fullName: Microsoft.Health.HealthVaultPlatform.SendInsecureMessageToCustodiansFromApplication
- uid: Microsoft.Health.Web
  commentId: N:Microsoft.Health.Web
  isExternal: false
  name: Microsoft.Health.Web
  nameWithType: Microsoft.Health.Web
  fullName: Microsoft.Health.Web
- uid: Microsoft.Health.HealthVaultPlatform.GetVocabulary*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.GetVocabulary
  isExternal: false
  name: GetVocabulary
  nameWithType: HealthVaultPlatform.GetVocabulary
  fullName: Microsoft.Health.HealthVaultPlatform.GetVocabulary
- uid: Microsoft.Health.Vocabulary
  commentId: T:Microsoft.Health.Vocabulary
  parent: Microsoft.Health
  isExternal: false
  name: Vocabulary
  nameWithType: Vocabulary
  fullName: Microsoft.Health.Vocabulary
- uid: Microsoft.Health.HealthServiceConnection.Culture
  commentId: P:Microsoft.Health.HealthServiceConnection.Culture
  parent: Microsoft.Health.HealthServiceConnection
  isExternal: false
  name: Culture
  nameWithType: HealthServiceConnection.Culture
  fullName: Microsoft.Health.HealthServiceConnection.Culture
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: Microsoft.Health.VocabularyKey
  commentId: T:Microsoft.Health.VocabularyKey
  parent: Microsoft.Health
  isExternal: false
  name: VocabularyKey
  nameWithType: VocabularyKey
  fullName: Microsoft.Health.VocabularyKey
- uid: System.Collections.Generic.IList{Microsoft.Health.VocabularyKey}
  commentId: T:System.Collections.Generic.IList{Microsoft.Health.VocabularyKey}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<VocabularyKey>
  nameWithType: IList<VocabularyKey>
  fullName: System.Collections.Generic.IList<Microsoft.Health.VocabularyKey>
  nameWithType.vb: IList(Of VocabularyKey)
  fullName.vb: System.Collections.Generic.IList(Of Microsoft.Health.VocabularyKey)
  name.vb: IList(Of VocabularyKey)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.VocabularyKey
    name: VocabularyKey
    nameWithType: VocabularyKey
    fullName: Microsoft.Health.VocabularyKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.VocabularyKey
    name: VocabularyKey
    nameWithType: VocabularyKey
    fullName: Microsoft.Health.VocabularyKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Health.Vocabulary}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Health.Vocabulary}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<Vocabulary>
  nameWithType: ReadOnlyCollection<Vocabulary>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Health.Vocabulary>
  nameWithType.vb: ReadOnlyCollection(Of Vocabulary)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of Microsoft.Health.Vocabulary)
  name.vb: ReadOnlyCollection(Of Vocabulary)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.Vocabulary
    name: Vocabulary
    nameWithType: Vocabulary
    fullName: Microsoft.Health.Vocabulary
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.Vocabulary
    name: Vocabulary
    nameWithType: Vocabulary
    fullName: Microsoft.Health.Vocabulary
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: true
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  nameWithType.vb: ReadOnlyCollection(Of T)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: Microsoft.Health.HealthVaultPlatform.GetVocabularyKeys*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.GetVocabularyKeys
  isExternal: false
  name: GetVocabularyKeys
  nameWithType: HealthVaultPlatform.GetVocabularyKeys
  fullName: Microsoft.Health.HealthVaultPlatform.GetVocabularyKeys
- uid: System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Health.VocabularyKey}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Health.VocabularyKey}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<VocabularyKey>
  nameWithType: ReadOnlyCollection<VocabularyKey>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Health.VocabularyKey>
  nameWithType.vb: ReadOnlyCollection(Of VocabularyKey)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of Microsoft.Health.VocabularyKey)
  name.vb: ReadOnlyCollection(Of VocabularyKey)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.VocabularyKey
    name: VocabularyKey
    nameWithType: VocabularyKey
    fullName: Microsoft.Health.VocabularyKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.VocabularyKey
    name: VocabularyKey
    nameWithType: VocabularyKey
    fullName: Microsoft.Health.VocabularyKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.VocabularySearchType
  commentId: T:Microsoft.Health.VocabularySearchType
  parent: Microsoft.Health
  isExternal: false
  name: VocabularySearchType
  nameWithType: VocabularySearchType
  fullName: Microsoft.Health.VocabularySearchType
- uid: Microsoft.Health.HealthVaultPlatform.SearchVocabularyKeys*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.SearchVocabularyKeys
  isExternal: false
  name: SearchVocabularyKeys
  nameWithType: HealthVaultPlatform.SearchVocabularyKeys
  fullName: Microsoft.Health.HealthVaultPlatform.SearchVocabularyKeys
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.VocabularyItemCollection
  commentId: T:Microsoft.Health.VocabularyItemCollection
  parent: Microsoft.Health
  isExternal: false
  name: VocabularyItemCollection
  nameWithType: VocabularyItemCollection
  fullName: Microsoft.Health.VocabularyItemCollection
- uid: Microsoft.Health.HealthVaultPlatform.SearchVocabulary*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.SearchVocabulary
  isExternal: false
  name: SearchVocabulary
  nameWithType: HealthVaultPlatform.SearchVocabulary
  fullName: Microsoft.Health.HealthVaultPlatform.SearchVocabulary
- uid: Microsoft.Health.HealthVaultPlatform.GetPersonInfo*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.GetPersonInfo
  isExternal: false
  name: GetPersonInfo
  nameWithType: HealthVaultPlatform.GetPersonInfo
  fullName: Microsoft.Health.HealthVaultPlatform.GetPersonInfo
- uid: Microsoft.Health.ApplicationConnection
  commentId: T:Microsoft.Health.ApplicationConnection
  parent: Microsoft.Health
  isExternal: false
  name: ApplicationConnection
  nameWithType: ApplicationConnection
  fullName: Microsoft.Health.ApplicationConnection
- uid: Microsoft.Health.PersonInfo
  commentId: T:Microsoft.Health.PersonInfo
  parent: Microsoft.Health
  isExternal: false
  name: PersonInfo
  nameWithType: PersonInfo
  fullName: Microsoft.Health.PersonInfo
- uid: Microsoft.Health.GetAuthorizedPeopleSettings
  commentId: T:Microsoft.Health.GetAuthorizedPeopleSettings
  parent: Microsoft.Health
  isExternal: false
  name: GetAuthorizedPeopleSettings
  nameWithType: GetAuthorizedPeopleSettings
  fullName: Microsoft.Health.GetAuthorizedPeopleSettings
- uid: Microsoft.Health.HealthVaultPlatform.GetAuthorizedPeople*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.GetAuthorizedPeople
  isExternal: false
  name: GetAuthorizedPeople
  nameWithType: HealthVaultPlatform.GetAuthorizedPeople
  fullName: Microsoft.Health.HealthVaultPlatform.GetAuthorizedPeople
- uid: System.Collections.Generic.IEnumerable{Microsoft.Health.PersonInfo}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Health.PersonInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<PersonInfo>
  nameWithType: IEnumerable<PersonInfo>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Health.PersonInfo>
  nameWithType.vb: IEnumerable(Of PersonInfo)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Health.PersonInfo)
  name.vb: IEnumerable(Of PersonInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.PersonInfo
    name: PersonInfo
    nameWithType: PersonInfo
    fullName: Microsoft.Health.PersonInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.PersonInfo
    name: PersonInfo
    nameWithType: PersonInfo
    fullName: Microsoft.Health.PersonInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.GetAuthorizedPeopleSettings.StartingPersonId
  commentId: P:Microsoft.Health.GetAuthorizedPeopleSettings.StartingPersonId
- uid: Microsoft.Health.HealthVaultPlatform.GetAuthorizedRecords*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.GetAuthorizedRecords
  isExternal: false
  name: GetAuthorizedRecords
  nameWithType: HealthVaultPlatform.GetAuthorizedRecords
  fullName: Microsoft.Health.HealthVaultPlatform.GetAuthorizedRecords
- uid: System.Collections.ObjectModel.Collection{Microsoft.Health.HealthRecordInfo}
  commentId: T:System.Collections.ObjectModel.Collection{Microsoft.Health.HealthRecordInfo}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.Collection`1
  name: Collection<HealthRecordInfo>
  nameWithType: Collection<HealthRecordInfo>
  fullName: System.Collections.ObjectModel.Collection<Microsoft.Health.HealthRecordInfo>
  nameWithType.vb: Collection(Of HealthRecordInfo)
  fullName.vb: System.Collections.ObjectModel.Collection(Of Microsoft.Health.HealthRecordInfo)
  name.vb: Collection(Of HealthRecordInfo)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.HealthRecordInfo
    name: HealthRecordInfo
    nameWithType: HealthRecordInfo
    fullName: Microsoft.Health.HealthRecordInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.HealthRecordInfo
    name: HealthRecordInfo
    nameWithType: HealthRecordInfo
    fullName: Microsoft.Health.HealthRecordInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.Collection`1
  commentId: T:System.Collections.ObjectModel.Collection`1
  isExternal: true
  name: Collection<T>
  nameWithType: Collection<T>
  fullName: System.Collections.ObjectModel.Collection<T>
  nameWithType.vb: Collection(Of T)
  fullName.vb: System.Collections.ObjectModel.Collection(Of T)
  name.vb: Collection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthVaultPlatform.GetApplicationInfo*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.GetApplicationInfo
  isExternal: false
  name: GetApplicationInfo
  nameWithType: HealthVaultPlatform.GetApplicationInfo
  fullName: Microsoft.Health.HealthVaultPlatform.GetApplicationInfo
- uid: Microsoft.Health.ApplicationInfo
  commentId: T:Microsoft.Health.ApplicationInfo
  parent: Microsoft.Health
  isExternal: false
  name: ApplicationInfo
  nameWithType: ApplicationInfo
  fullName: Microsoft.Health.ApplicationInfo
- uid: Microsoft.Health.ApplicationInfo.CultureSpecificNames
  commentId: P:Microsoft.Health.ApplicationInfo.CultureSpecificNames
- uid: Microsoft.Health.ApplicationInfo.CultureSpecificDescriptions
  commentId: P:Microsoft.Health.ApplicationInfo.CultureSpecificDescriptions
- uid: Microsoft.Health.ApplicationInfo.CultureSpecificAuthorizationReasons
  commentId: P:Microsoft.Health.ApplicationInfo.CultureSpecificAuthorizationReasons
- uid: Microsoft.Health.ApplicationInfo.LargeLogo
  commentId: P:Microsoft.Health.ApplicationInfo.LargeLogo
- uid: Microsoft.Health.ApplicationInfo.SmallLogo
  commentId: P:Microsoft.Health.ApplicationInfo.SmallLogo
- uid: Microsoft.Health.ApplicationInfo.PrivacyStatement
  commentId: P:Microsoft.Health.ApplicationInfo.PrivacyStatement
- uid: Microsoft.Health.ApplicationInfo.TermsOfUse
  commentId: P:Microsoft.Health.ApplicationInfo.TermsOfUse
- uid: Microsoft.Health.ApplicationInfo.DtcSuccessMessage
  commentId: P:Microsoft.Health.ApplicationInfo.DtcSuccessMessage
- uid: Microsoft.Health.HealthVaultPlatform.GetUpdatedRecordsForApplication*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.GetUpdatedRecordsForApplication
  isExternal: false
  name: GetUpdatedRecordsForApplication
  nameWithType: HealthVaultPlatform.GetUpdatedRecordsForApplication
  fullName: Microsoft.Health.HealthVaultPlatform.GetUpdatedRecordsForApplication
- uid: System.Nullable{System.DateTime}
  commentId: T:System.Nullable{System.DateTime}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTime>
  nameWithType: Nullable<DateTime>
  fullName: System.Nullable<System.DateTime>
  nameWithType.vb: Nullable(Of DateTime)
  fullName.vb: System.Nullable(Of System.DateTime)
  name.vb: Nullable(Of DateTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthRecordUpdateInfo
  commentId: T:Microsoft.Health.HealthRecordUpdateInfo
  isExternal: false
  name: HealthRecordUpdateInfo
  nameWithType: HealthRecordUpdateInfo
  fullName: Microsoft.Health.HealthRecordUpdateInfo
- uid: Microsoft.Health.HealthVaultPlatform.GetUpdatedRecordInfoForApplication*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.GetUpdatedRecordInfoForApplication
  isExternal: false
  name: GetUpdatedRecordInfoForApplication
  nameWithType: HealthVaultPlatform.GetUpdatedRecordInfoForApplication
  fullName: Microsoft.Health.HealthVaultPlatform.GetUpdatedRecordInfoForApplication
- uid: System.Collections.Generic.IList{Microsoft.Health.HealthRecordUpdateInfo}
  commentId: T:System.Collections.Generic.IList{Microsoft.Health.HealthRecordUpdateInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<HealthRecordUpdateInfo>
  nameWithType: IList<HealthRecordUpdateInfo>
  fullName: System.Collections.Generic.IList<Microsoft.Health.HealthRecordUpdateInfo>
  nameWithType.vb: IList(Of HealthRecordUpdateInfo)
  fullName.vb: System.Collections.Generic.IList(Of Microsoft.Health.HealthRecordUpdateInfo)
  name.vb: IList(Of HealthRecordUpdateInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.HealthRecordUpdateInfo
    name: HealthRecordUpdateInfo
    nameWithType: HealthRecordUpdateInfo
    fullName: Microsoft.Health.HealthRecordUpdateInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.HealthRecordUpdateInfo
    name: HealthRecordUpdateInfo
    nameWithType: HealthRecordUpdateInfo
    fullName: Microsoft.Health.HealthRecordUpdateInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthVaultPlatform.NewSignupCode*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.NewSignupCode
  isExternal: false
  name: NewSignupCode
  nameWithType: HealthVaultPlatform.NewSignupCode
  fullName: Microsoft.Health.HealthVaultPlatform.NewSignupCode
- uid: Microsoft.Health.ServiceInfo
  commentId: T:Microsoft.Health.ServiceInfo
  parent: Microsoft.Health
  isExternal: false
  name: ServiceInfo
  nameWithType: ServiceInfo
  fullName: Microsoft.Health.ServiceInfo
- uid: Microsoft.Health.HealthVaultPlatform.GetServiceDefinition*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.GetServiceDefinition
  isExternal: false
  name: GetServiceDefinition
  nameWithType: HealthVaultPlatform.GetServiceDefinition
  fullName: Microsoft.Health.HealthVaultPlatform.GetServiceDefinition
- uid: System.UriFormatException
  commentId: T:System.UriFormatException
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: Microsoft.Health.ServiceInfoSections
  commentId: T:Microsoft.Health.ServiceInfoSections
  parent: Microsoft.Health
  isExternal: false
  name: ServiceInfoSections
  nameWithType: ServiceInfoSections
  fullName: Microsoft.Health.ServiceInfoSections
- uid: Microsoft.Health.HealthVaultPlatform.NewItems*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.NewItems
  isExternal: false
  name: NewItems
  nameWithType: HealthVaultPlatform.NewItems
  fullName: Microsoft.Health.HealthVaultPlatform.NewItems
- uid: System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem}
  commentId: T:System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<HealthRecordItem>
  nameWithType: IList<HealthRecordItem>
  fullName: System.Collections.Generic.IList<Microsoft.Health.HealthRecordItem>
  nameWithType.vb: IList(Of HealthRecordItem)
  fullName.vb: System.Collections.Generic.IList(Of Microsoft.Health.HealthRecordItem)
  name.vb: IList(Of HealthRecordItem)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthRecordItem
  commentId: T:Microsoft.Health.HealthRecordItem
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordItem
  nameWithType: HealthRecordItem
  fullName: Microsoft.Health.HealthRecordItem
- uid: Microsoft.Health.HealthVaultPlatform.UpdateItems*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.UpdateItems
  isExternal: false
  name: UpdateItems
  nameWithType: HealthVaultPlatform.UpdateItems
  fullName: Microsoft.Health.HealthVaultPlatform.UpdateItems
- uid: Microsoft.Health.HealthVaultPlatform.RemoveItems*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.RemoveItems
  isExternal: false
  name: RemoveItems
  nameWithType: HealthVaultPlatform.RemoveItems
  fullName: Microsoft.Health.HealthVaultPlatform.RemoveItems
- uid: System.Collections.Generic.IList{Microsoft.Health.HealthRecordItemKey}
  commentId: T:System.Collections.Generic.IList{Microsoft.Health.HealthRecordItemKey}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<HealthRecordItemKey>
  nameWithType: IList<HealthRecordItemKey>
  fullName: System.Collections.Generic.IList<Microsoft.Health.HealthRecordItemKey>
  nameWithType.vb: IList(Of HealthRecordItemKey)
  fullName.vb: System.Collections.Generic.IList(Of Microsoft.Health.HealthRecordItemKey)
  name.vb: IList(Of HealthRecordItemKey)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.HealthRecordItemKey
    name: HealthRecordItemKey
    nameWithType: HealthRecordItemKey
    fullName: Microsoft.Health.HealthRecordItemKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.HealthRecordItemKey
    name: HealthRecordItemKey
    nameWithType: HealthRecordItemKey
    fullName: Microsoft.Health.HealthRecordItemKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthServiceAccessDeniedException
  commentId: T:Microsoft.Health.HealthServiceAccessDeniedException
  isExternal: false
  name: HealthServiceAccessDeniedException
  nameWithType: HealthServiceAccessDeniedException
  fullName: Microsoft.Health.HealthServiceAccessDeniedException
- uid: Microsoft.Health.HealthVaultPlatform.RemoveApplicationAuthorization*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.RemoveApplicationAuthorization
  isExternal: false
  name: RemoveApplicationAuthorization
  nameWithType: HealthVaultPlatform.RemoveApplicationAuthorization
  fullName: Microsoft.Health.HealthVaultPlatform.RemoveApplicationAuthorization
- uid: Microsoft.Health.HealthRecordItemTypePermission
  commentId: T:Microsoft.Health.HealthRecordItemTypePermission
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordItemTypePermission
  nameWithType: HealthRecordItemTypePermission
  fullName: Microsoft.Health.HealthRecordItemTypePermission
- uid: Microsoft.Health.HealthVaultPlatform.QueryPermissionsByTypes*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.QueryPermissionsByTypes
  isExternal: false
  name: QueryPermissionsByTypes
  nameWithType: HealthVaultPlatform.QueryPermissionsByTypes
  fullName: Microsoft.Health.HealthVaultPlatform.QueryPermissionsByTypes
- uid: System.Collections.Generic.IDictionary{System.Guid,Microsoft.Health.HealthRecordItemTypePermission}
  commentId: T:System.Collections.Generic.IDictionary{System.Guid,Microsoft.Health.HealthRecordItemTypePermission}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<Guid, HealthRecordItemTypePermission>
  nameWithType: IDictionary<Guid, HealthRecordItemTypePermission>
  fullName: System.Collections.Generic.IDictionary<System.Guid, Microsoft.Health.HealthRecordItemTypePermission>
  nameWithType.vb: IDictionary(Of Guid, HealthRecordItemTypePermission)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.Guid, Microsoft.Health.HealthRecordItemTypePermission)
  name.vb: IDictionary(Of Guid, HealthRecordItemTypePermission)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.HealthRecordItemTypePermission
    name: HealthRecordItemTypePermission
    nameWithType: HealthRecordItemTypePermission
    fullName: Microsoft.Health.HealthRecordItemTypePermission
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.HealthRecordItemTypePermission
    name: HealthRecordItemTypePermission
    nameWithType: HealthRecordItemTypePermission
    fullName: Microsoft.Health.HealthRecordItemTypePermission
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthVaultPlatform.QueryPermissions*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.QueryPermissions
  isExternal: false
  name: QueryPermissions
  nameWithType: HealthVaultPlatform.QueryPermissions
  fullName: Microsoft.Health.HealthVaultPlatform.QueryPermissions
- uid: System.Collections.ObjectModel.Collection{Microsoft.Health.HealthRecordItemTypePermission}
  commentId: T:System.Collections.ObjectModel.Collection{Microsoft.Health.HealthRecordItemTypePermission}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.Collection`1
  name: Collection<HealthRecordItemTypePermission>
  nameWithType: Collection<HealthRecordItemTypePermission>
  fullName: System.Collections.ObjectModel.Collection<Microsoft.Health.HealthRecordItemTypePermission>
  nameWithType.vb: Collection(Of HealthRecordItemTypePermission)
  fullName.vb: System.Collections.ObjectModel.Collection(Of Microsoft.Health.HealthRecordItemTypePermission)
  name.vb: Collection(Of HealthRecordItemTypePermission)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.HealthRecordItemTypePermission
    name: HealthRecordItemTypePermission
    nameWithType: HealthRecordItemTypePermission
    fullName: Microsoft.Health.HealthRecordItemTypePermission
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.HealthRecordItemTypePermission
    name: HealthRecordItemTypePermission
    nameWithType: HealthRecordItemTypePermission
    fullName: Microsoft.Health.HealthRecordItemTypePermission
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthRecordPermissions
  commentId: T:Microsoft.Health.HealthRecordPermissions
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordPermissions
  nameWithType: HealthRecordPermissions
  fullName: Microsoft.Health.HealthRecordPermissions
- uid: Microsoft.Health.HealthVaultPlatform.QueryRecordPermissions*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.QueryRecordPermissions
  isExternal: false
  name: QueryRecordPermissions
  nameWithType: HealthVaultPlatform.QueryRecordPermissions
  fullName: Microsoft.Health.HealthVaultPlatform.QueryRecordPermissions
- uid: Microsoft.Health.HealthVaultPlatform.GetValidGroupMembership*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.GetValidGroupMembership
  isExternal: false
  name: GetValidGroupMembership
  nameWithType: HealthVaultPlatform.GetValidGroupMembership
  fullName: Microsoft.Health.HealthVaultPlatform.GetValidGroupMembership
- uid: System.Collections.ObjectModel.Collection{Microsoft.Health.HealthRecordItem}
  commentId: T:System.Collections.ObjectModel.Collection{Microsoft.Health.HealthRecordItem}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.Collection`1
  name: Collection<HealthRecordItem>
  nameWithType: Collection<HealthRecordItem>
  fullName: System.Collections.ObjectModel.Collection<Microsoft.Health.HealthRecordItem>
  nameWithType.vb: Collection(Of HealthRecordItem)
  fullName.vb: System.Collections.ObjectModel.Collection(Of Microsoft.Health.HealthRecordItem)
  name.vb: Collection(Of HealthRecordItem)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthServiceStatusCode.Ok
  commentId: F:Microsoft.Health.HealthServiceStatusCode.Ok
- uid: Microsoft.Health.HealthRecordSearcher.Filters
  commentId: P:Microsoft.Health.HealthRecordSearcher.Filters
- uid: Microsoft.Health.HealthVaultPlatform.GetMatchingItems*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.GetMatchingItems
  isExternal: false
  name: GetMatchingItems
  nameWithType: HealthVaultPlatform.GetMatchingItems
  fullName: Microsoft.Health.HealthVaultPlatform.GetMatchingItems
- uid: Microsoft.Health.HealthRecordSearcher
  commentId: T:Microsoft.Health.HealthRecordSearcher
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordSearcher
  nameWithType: HealthRecordSearcher
  fullName: Microsoft.Health.HealthRecordSearcher
- uid: System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Health.HealthRecordItemCollection}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Health.HealthRecordItemCollection}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<HealthRecordItemCollection>
  nameWithType: ReadOnlyCollection<HealthRecordItemCollection>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Health.HealthRecordItemCollection>
  nameWithType.vb: ReadOnlyCollection(Of HealthRecordItemCollection)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of Microsoft.Health.HealthRecordItemCollection)
  name.vb: ReadOnlyCollection(Of HealthRecordItemCollection)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.HealthRecordItemCollection
    name: HealthRecordItemCollection
    nameWithType: HealthRecordItemCollection
    fullName: Microsoft.Health.HealthRecordItemCollection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.HealthRecordItemCollection
    name: HealthRecordItemCollection
    nameWithType: HealthRecordItemCollection
    fullName: Microsoft.Health.HealthRecordItemCollection
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthVaultPlatform.GetMatchingItemsReader*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.GetMatchingItemsReader
  isExternal: false
  name: GetMatchingItemsReader
  nameWithType: HealthVaultPlatform.GetMatchingItemsReader
  fullName: Microsoft.Health.HealthVaultPlatform.GetMatchingItemsReader
- uid: System.Xml.XmlReader
  commentId: T:System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: false
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: Microsoft.Health.HealthVaultPlatform.GetMatchingItemsRaw*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.GetMatchingItemsRaw
  isExternal: false
  name: GetMatchingItemsRaw
  nameWithType: HealthVaultPlatform.GetMatchingItemsRaw
  fullName: Microsoft.Health.HealthVaultPlatform.GetMatchingItemsRaw
- uid: System.Xml.XPath.XPathNavigator
  commentId: T:System.Xml.XPath.XPathNavigator
  parent: System.Xml.XPath
  isExternal: true
  name: XPathNavigator
  nameWithType: XPathNavigator
  fullName: System.Xml.XPath.XPathNavigator
- uid: Microsoft.Health.HealthRecordView.Sections
  commentId: P:Microsoft.Health.HealthRecordView.Sections
- uid: Microsoft.Health.HealthVaultPlatform.GetTransformedItems*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.GetTransformedItems
  isExternal: false
  name: GetTransformedItems
  nameWithType: HealthVaultPlatform.GetTransformedItems
  fullName: Microsoft.Health.HealthVaultPlatform.GetTransformedItems
- uid: Microsoft.Health.ApplicationProvisioning.Provisioner.GetApplication(Microsoft.Health.Web.OfflineWebApplicationConnection,System.Guid)
  commentId: M:Microsoft.Health.ApplicationProvisioning.Provisioner.GetApplication(Microsoft.Health.Web.OfflineWebApplicationConnection,System.Guid)
- uid: Microsoft.Health.HealthVaultPlatform.UpdateChildApplication*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.UpdateChildApplication
  isExternal: false
  name: UpdateChildApplication
  nameWithType: HealthVaultPlatform.UpdateChildApplication
  fullName: Microsoft.Health.HealthVaultPlatform.UpdateChildApplication
- uid: Microsoft.Health.HealthVaultPlatform.GetChildApplication*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.GetChildApplication
  isExternal: false
  name: GetChildApplication
  nameWithType: HealthVaultPlatform.GetChildApplication
  fullName: Microsoft.Health.HealthVaultPlatform.GetChildApplication
- uid: Microsoft.Health.ApplicationInfo.Name
  commentId: P:Microsoft.Health.ApplicationInfo.Name
- uid: Microsoft.Health.ApplicationInfo.PublicKeys
  commentId: P:Microsoft.Health.ApplicationInfo.PublicKeys
- uid: Microsoft.Health.ApplicationInfo.OfflineBaseAuthorizations
  commentId: P:Microsoft.Health.ApplicationInfo.OfflineBaseAuthorizations
- uid: Microsoft.Health.ApplicationInfo.Description
  commentId: P:Microsoft.Health.ApplicationInfo.Description
- uid: Microsoft.Health.ApplicationInfo.AuthorizationReason
  commentId: P:Microsoft.Health.ApplicationInfo.AuthorizationReason
- uid: Microsoft.Health.HealthVaultPlatform.AddChildApplication*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.AddChildApplication
  isExternal: false
  name: AddChildApplication
  nameWithType: HealthVaultPlatform.AddChildApplication
  fullName: Microsoft.Health.HealthVaultPlatform.AddChildApplication
- uid: Microsoft.Health.HealthVaultPlatform.ClearItemTypeCache*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.ClearItemTypeCache
  isExternal: false
  name: ClearItemTypeCache
  nameWithType: HealthVaultPlatform.ClearItemTypeCache
  fullName: Microsoft.Health.HealthVaultPlatform.ClearItemTypeCache
- uid: Microsoft.Health.HealthVaultPlatform.GetHealthRecordItemTypeDefinition*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.GetHealthRecordItemTypeDefinition
  isExternal: false
  name: GetHealthRecordItemTypeDefinition
  nameWithType: HealthVaultPlatform.GetHealthRecordItemTypeDefinition
  fullName: Microsoft.Health.HealthVaultPlatform.GetHealthRecordItemTypeDefinition
- uid: Microsoft.Health.HealthRecordItemTypeSections
  commentId: T:Microsoft.Health.HealthRecordItemTypeSections
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordItemTypeSections
  nameWithType: HealthRecordItemTypeSections
  fullName: Microsoft.Health.HealthRecordItemTypeSections
- uid: System.Collections.Generic.IList{System.String}
  commentId: T:System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  nameWithType.vb: IList(Of String)
  fullName.vb: System.Collections.Generic.IList(Of System.String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.Guid,Microsoft.Health.HealthRecordItemTypeDefinition}
  commentId: T:System.Collections.Generic.IDictionary{System.Guid,Microsoft.Health.HealthRecordItemTypeDefinition}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<Guid, HealthRecordItemTypeDefinition>
  nameWithType: IDictionary<Guid, HealthRecordItemTypeDefinition>
  fullName: System.Collections.Generic.IDictionary<System.Guid, Microsoft.Health.HealthRecordItemTypeDefinition>
  nameWithType.vb: IDictionary(Of Guid, HealthRecordItemTypeDefinition)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.Guid, Microsoft.Health.HealthRecordItemTypeDefinition)
  name.vb: IDictionary(Of Guid, HealthRecordItemTypeDefinition)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.HealthRecordItemTypeDefinition
    name: HealthRecordItemTypeDefinition
    nameWithType: HealthRecordItemTypeDefinition
    fullName: Microsoft.Health.HealthRecordItemTypeDefinition
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.HealthRecordItemTypeDefinition
    name: HealthRecordItemTypeDefinition
    nameWithType: HealthRecordItemTypeDefinition
    fullName: Microsoft.Health.HealthRecordItemTypeDefinition
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthVaultPlatform.CreatePatientConnection*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.CreatePatientConnection
  isExternal: false
  name: CreatePatientConnection
  nameWithType: HealthVaultPlatform.CreatePatientConnection
  fullName: Microsoft.Health.HealthVaultPlatform.CreatePatientConnection
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: Microsoft.Health.HealthVaultPlatform.DeletePendingPatientConnection*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.DeletePendingPatientConnection
  isExternal: false
  name: DeletePendingPatientConnection
  nameWithType: HealthVaultPlatform.DeletePendingPatientConnection
  fullName: Microsoft.Health.HealthVaultPlatform.DeletePendingPatientConnection
- uid: Microsoft.Health.HealthVaultPlatform.UpdatePatientConnectionApplicationPatientId*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.UpdatePatientConnectionApplicationPatientId
  isExternal: false
  name: UpdatePatientConnectionApplicationPatientId
  nameWithType: HealthVaultPlatform.UpdatePatientConnectionApplicationPatientId
  fullName: Microsoft.Health.HealthVaultPlatform.UpdatePatientConnectionApplicationPatientId
- uid: Microsoft.Health.HealthVaultPlatform.GetValidatedPatientConnections(Microsoft.Health.Web.OfflineWebApplicationConnection,System.DateTime)
  commentId: M:Microsoft.Health.HealthVaultPlatform.GetValidatedPatientConnections(Microsoft.Health.Web.OfflineWebApplicationConnection,System.DateTime)
- uid: Microsoft.Health.HealthVaultPlatform.GetValidatedPatientConnections*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.GetValidatedPatientConnections
  isExternal: false
  name: GetValidatedPatientConnections
  nameWithType: HealthVaultPlatform.GetValidatedPatientConnections
  fullName: Microsoft.Health.HealthVaultPlatform.GetValidatedPatientConnections
- uid: System.Collections.ObjectModel.Collection{Microsoft.Health.PatientConnect.ValidatedPatientConnection}
  commentId: T:System.Collections.ObjectModel.Collection{Microsoft.Health.PatientConnect.ValidatedPatientConnection}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.Collection`1
  name: Collection<ValidatedPatientConnection>
  nameWithType: Collection<ValidatedPatientConnection>
  fullName: System.Collections.ObjectModel.Collection<Microsoft.Health.PatientConnect.ValidatedPatientConnection>
  nameWithType.vb: Collection(Of ValidatedPatientConnection)
  fullName.vb: System.Collections.ObjectModel.Collection(Of Microsoft.Health.PatientConnect.ValidatedPatientConnection)
  name.vb: Collection(Of ValidatedPatientConnection)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.PatientConnect.ValidatedPatientConnection
    name: ValidatedPatientConnection
    nameWithType: ValidatedPatientConnection
    fullName: Microsoft.Health.PatientConnect.ValidatedPatientConnection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.PatientConnect.ValidatedPatientConnection
    name: ValidatedPatientConnection
    nameWithType: ValidatedPatientConnection
    fullName: Microsoft.Health.PatientConnect.ValidatedPatientConnection
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Security.Cryptography.Rfc2898DeriveBytes
  commentId: T:System.Security.Cryptography.Rfc2898DeriveBytes
- uid: System.String.ToLowerInvariant
  commentId: M:System.String.ToLowerInvariant
- uid: Microsoft.Health.BlobStore
  commentId: T:Microsoft.Health.BlobStore
  parent: Microsoft.Health
  isExternal: false
  name: BlobStore
  nameWithType: BlobStore
  fullName: Microsoft.Health.BlobStore
- uid: Microsoft.Health.HealthRecordItem.GetItemXml
  commentId: M:Microsoft.Health.HealthRecordItem.GetItemXml
  parent: Microsoft.Health.HealthRecordItem
  isExternal: false
  name: GetItemXml()
  nameWithType: HealthRecordItem.GetItemXml()
  fullName: Microsoft.Health.HealthRecordItem.GetItemXml()
  spec.csharp:
  - uid: Microsoft.Health.HealthRecordItem.GetItemXml
    name: GetItemXml
    nameWithType: HealthRecordItem.GetItemXml
    fullName: Microsoft.Health.HealthRecordItem.GetItemXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.HealthRecordItem.GetItemXml
    name: GetItemXml
    nameWithType: HealthRecordItem.GetItemXml
    fullName: Microsoft.Health.HealthRecordItem.GetItemXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthVaultPlatform.CreateConnectPackage*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.CreateConnectPackage
  isExternal: false
  name: CreateConnectPackage
  nameWithType: HealthVaultPlatform.CreateConnectPackage
  fullName: Microsoft.Health.HealthVaultPlatform.CreateConnectPackage
- uid: Microsoft.Health.Package.ConnectPackageCreationParameters
  commentId: T:Microsoft.Health.Package.ConnectPackageCreationParameters
  parent: Microsoft.Health.Package
  isExternal: false
  name: ConnectPackageCreationParameters
  nameWithType: ConnectPackageCreationParameters
  fullName: Microsoft.Health.Package.ConnectPackageCreationParameters
- uid: Microsoft.Health.ItemTypes.PasswordProtectedPackage
  commentId: T:Microsoft.Health.ItemTypes.PasswordProtectedPackage
  parent: Microsoft.Health.ItemTypes
  isExternal: false
  name: PasswordProtectedPackage
  nameWithType: PasswordProtectedPackage
  fullName: Microsoft.Health.ItemTypes.PasswordProtectedPackage
- uid: Microsoft.Health.Package
  commentId: N:Microsoft.Health.Package
  isExternal: false
  name: Microsoft.Health.Package
  nameWithType: Microsoft.Health.Package
  fullName: Microsoft.Health.Package
- uid: Microsoft.Health.ItemTypes
  commentId: N:Microsoft.Health.ItemTypes
  isExternal: false
  name: Microsoft.Health.ItemTypes
  nameWithType: Microsoft.Health.ItemTypes
  fullName: Microsoft.Health.ItemTypes
- uid: System.Collections.Generic.IEnumerable{System.Uri}
  commentId: T:System.Collections.Generic.IEnumerable{System.Uri}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Uri>
  nameWithType: IEnumerable<Uri>
  fullName: System.Collections.Generic.IEnumerable<System.Uri>
  nameWithType.vb: IEnumerable(Of Uri)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Uri)
  name.vb: IEnumerable(Of Uri)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthVaultPlatform.DeletePendingConnectPackages*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.DeletePendingConnectPackages
  isExternal: false
  name: DeletePendingConnectPackages
  nameWithType: HealthVaultPlatform.DeletePendingConnectPackages
  fullName: Microsoft.Health.HealthVaultPlatform.DeletePendingConnectPackages
- uid: Microsoft.Health.HealthVaultPlatform.DeletePendingConnectionPackageForIdentityCode*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.DeletePendingConnectionPackageForIdentityCode
  isExternal: false
  name: DeletePendingConnectionPackageForIdentityCode
  nameWithType: HealthVaultPlatform.DeletePendingConnectionPackageForIdentityCode
  fullName: Microsoft.Health.HealthVaultPlatform.DeletePendingConnectionPackageForIdentityCode
- uid: Microsoft.Health.HealthVaultPlatform.UpdateConnectPackageApplicationPatientId*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.UpdateConnectPackageApplicationPatientId
  isExternal: false
  name: UpdateConnectPackageApplicationPatientId
  nameWithType: HealthVaultPlatform.UpdateConnectPackageApplicationPatientId
  fullName: Microsoft.Health.HealthVaultPlatform.UpdateConnectPackageApplicationPatientId
- uid: Microsoft.Health.HealthVaultPlatform.UpdateConnectPackageApplicationPatientIdForIdentityCode*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.UpdateConnectPackageApplicationPatientIdForIdentityCode
  isExternal: false
  name: UpdateConnectPackageApplicationPatientIdForIdentityCode
  nameWithType: HealthVaultPlatform.UpdateConnectPackageApplicationPatientIdForIdentityCode
  fullName: Microsoft.Health.HealthVaultPlatform.UpdateConnectPackageApplicationPatientIdForIdentityCode
- uid: Microsoft.Health.HealthVaultPlatform.AllocateConnectPackageId*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.AllocateConnectPackageId
  isExternal: false
  name: AllocateConnectPackageId
  nameWithType: HealthVaultPlatform.AllocateConnectPackageId
  fullName: Microsoft.Health.HealthVaultPlatform.AllocateConnectPackageId
- uid: Microsoft.Health.HealthVaultPlatform.AssociateAlternateId*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.AssociateAlternateId
  isExternal: false
  name: AssociateAlternateId
  nameWithType: HealthVaultPlatform.AssociateAlternateId
  fullName: Microsoft.Health.HealthVaultPlatform.AssociateAlternateId
- uid: Microsoft.Health.HealthVaultPlatform.DisassociateAlternateId*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.DisassociateAlternateId
  isExternal: false
  name: DisassociateAlternateId
  nameWithType: HealthVaultPlatform.DisassociateAlternateId
  fullName: Microsoft.Health.HealthVaultPlatform.DisassociateAlternateId
- uid: Microsoft.Health.HealthVaultPlatform.GetAlternateIds*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.GetAlternateIds
  isExternal: false
  name: GetAlternateIds
  nameWithType: HealthVaultPlatform.GetAlternateIds
  fullName: Microsoft.Health.HealthVaultPlatform.GetAlternateIds
- uid: System.Collections.ObjectModel.Collection{System.String}
  commentId: T:System.Collections.ObjectModel.Collection{System.String}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.Collection`1
  name: Collection<String>
  nameWithType: Collection<String>
  fullName: System.Collections.ObjectModel.Collection<System.String>
  nameWithType.vb: Collection(Of String)
  fullName.vb: System.Collections.ObjectModel.Collection(Of System.String)
  name.vb: Collection(Of String)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthVaultPlatform.GetPersonAndRecordForAlternateId*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.GetPersonAndRecordForAlternateId
  isExternal: false
  name: GetPersonAndRecordForAlternateId
  nameWithType: HealthVaultPlatform.GetPersonAndRecordForAlternateId
  fullName: Microsoft.Health.HealthVaultPlatform.GetPersonAndRecordForAlternateId
- uid: Microsoft.Health.HealthServiceInstance
  commentId: T:Microsoft.Health.HealthServiceInstance
  parent: Microsoft.Health
  isExternal: false
  name: HealthServiceInstance
  nameWithType: HealthServiceInstance
  fullName: Microsoft.Health.HealthServiceInstance
- uid: Microsoft.Health.HealthVaultPlatform.SelectInstance*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.SelectInstance
  isExternal: false
  name: SelectInstance
  nameWithType: HealthVaultPlatform.SelectInstance
  fullName: Microsoft.Health.HealthVaultPlatform.SelectInstance
- uid: Microsoft.Health.Location
  commentId: T:Microsoft.Health.Location
  parent: Microsoft.Health
  isExternal: false
  name: Location
  nameWithType: Location
  fullName: Microsoft.Health.Location
- uid: Microsoft.Health.MeaningfulUse.PatientActivity
  commentId: T:Microsoft.Health.MeaningfulUse.PatientActivity
  isExternal: false
  name: PatientActivity
  nameWithType: PatientActivity
  fullName: Microsoft.Health.MeaningfulUse.PatientActivity
- uid: Microsoft.Health.HealthVaultPlatform.GetMeaningfulUseVDTReport*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.GetMeaningfulUseVDTReport
  isExternal: false
  name: GetMeaningfulUseVDTReport
  nameWithType: HealthVaultPlatform.GetMeaningfulUseVDTReport
  fullName: Microsoft.Health.HealthVaultPlatform.GetMeaningfulUseVDTReport
- uid: Microsoft.Health.DateRange
  commentId: T:Microsoft.Health.DateRange
  parent: Microsoft.Health
  isExternal: false
  name: DateRange
  nameWithType: DateRange
  fullName: Microsoft.Health.DateRange
- uid: System.Collections.Generic.IEnumerable{Microsoft.Health.MeaningfulUse.PatientActivity}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Health.MeaningfulUse.PatientActivity}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<PatientActivity>
  nameWithType: IEnumerable<PatientActivity>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Health.MeaningfulUse.PatientActivity>
  nameWithType.vb: IEnumerable(Of PatientActivity)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Health.MeaningfulUse.PatientActivity)
  name.vb: IEnumerable(Of PatientActivity)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.MeaningfulUse.PatientActivity
    name: PatientActivity
    nameWithType: PatientActivity
    fullName: Microsoft.Health.MeaningfulUse.PatientActivity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.MeaningfulUse.PatientActivity
    name: PatientActivity
    nameWithType: PatientActivity
    fullName: Microsoft.Health.MeaningfulUse.PatientActivity
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.MeaningfulUse.DocumentReceipt
  commentId: T:Microsoft.Health.MeaningfulUse.DocumentReceipt
  isExternal: false
  name: DocumentReceipt
  nameWithType: DocumentReceipt
  fullName: Microsoft.Health.MeaningfulUse.DocumentReceipt
- uid: Microsoft.Health.HealthVaultPlatform.GetMeaningfulUseTimelyAccessDocumentReport*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.GetMeaningfulUseTimelyAccessDocumentReport
  isExternal: false
  name: GetMeaningfulUseTimelyAccessDocumentReport
  nameWithType: HealthVaultPlatform.GetMeaningfulUseTimelyAccessDocumentReport
  fullName: Microsoft.Health.HealthVaultPlatform.GetMeaningfulUseTimelyAccessDocumentReport
- uid: System.Collections.Generic.IEnumerable{Microsoft.Health.MeaningfulUse.DocumentReceipt}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Health.MeaningfulUse.DocumentReceipt}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<DocumentReceipt>
  nameWithType: IEnumerable<DocumentReceipt>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Health.MeaningfulUse.DocumentReceipt>
  nameWithType.vb: IEnumerable(Of DocumentReceipt)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Health.MeaningfulUse.DocumentReceipt)
  name.vb: IEnumerable(Of DocumentReceipt)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.MeaningfulUse.DocumentReceipt
    name: DocumentReceipt
    nameWithType: DocumentReceipt
    fullName: Microsoft.Health.MeaningfulUse.DocumentReceipt
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.MeaningfulUse.DocumentReceipt
    name: DocumentReceipt
    nameWithType: DocumentReceipt
    fullName: Microsoft.Health.MeaningfulUse.DocumentReceipt
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt
  commentId: T:Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt
  isExternal: false
  name: DOPUDocumentReceipt
  nameWithType: DOPUDocumentReceipt
  fullName: Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt
- uid: Microsoft.Health.HealthVaultPlatform.GetMeaningfulUseTimelyAccessDOPUDocumentReport*
  commentId: Overload:Microsoft.Health.HealthVaultPlatform.GetMeaningfulUseTimelyAccessDOPUDocumentReport
  isExternal: false
  name: GetMeaningfulUseTimelyAccessDOPUDocumentReport
  nameWithType: HealthVaultPlatform.GetMeaningfulUseTimelyAccessDOPUDocumentReport
  fullName: Microsoft.Health.HealthVaultPlatform.GetMeaningfulUseTimelyAccessDOPUDocumentReport
- uid: System.Collections.Generic.IEnumerable{Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<DOPUDocumentReceipt>
  nameWithType: IEnumerable<DOPUDocumentReceipt>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt>
  nameWithType.vb: IEnumerable(Of DOPUDocumentReceipt)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt)
  name.vb: IEnumerable(Of DOPUDocumentReceipt)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt
    name: DOPUDocumentReceipt
    nameWithType: DOPUDocumentReceipt
    fullName: Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt
    name: DOPUDocumentReceipt
    nameWithType: DOPUDocumentReceipt
    fullName: Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt
  - name: )
    nameWithType: )
    fullName: )
