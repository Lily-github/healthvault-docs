### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.Location
  commentId: T:Microsoft.Health.Location
  id: Location
  parent: Microsoft.Health
  children:
  - Microsoft.Health.Location.#ctor(System.String,System.String)
  - Microsoft.Health.Location.Country
  - Microsoft.Health.Location.ParseXml(System.Xml.XPath.XPathNavigator)
  - Microsoft.Health.Location.StateProvince
  - Microsoft.Health.Location.ToString
  - Microsoft.Health.Location.WriteXml(System.Xml.XmlWriter,System.String)
  langs:
  - csharp
  - vb
  name: Location
  nameWithType: Location
  fullName: Microsoft.Health.Location
  type: Class
  source:
    remote:
      path: Microsoft.Health/Location.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Location
    path: Location.cs
    startLine: 13
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nA location defined by country and state/province ISO 3166 codes.\n"
  example: []
  syntax:
    content: public class Location
    content.vb: Public Class Location
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.Location.#ctor(System.String,System.String)
  commentId: M:Microsoft.Health.Location.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: Microsoft.Health.Location
  langs:
  - csharp
  - vb
  name: Location(String, String)
  nameWithType: Location.Location(String, String)
  fullName: Microsoft.Health.Location.Location(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health/Location.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: Location.cs
    startLine: 34
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nConstructs a location instance with the specified country and state/province codes.\n"
  example: []
  syntax:
    content: public Location(string country, string stateProvince)
    content.vb: Public Sub New(country As String, stateProvince As String)
    parameters:
    - id: country
      type: System.String
      description: "\nAn ISO 3166-1 two-letter country code.\n"
    - id: stateProvince
      type: System.String
      description: "\nAn ISO 3166-2 state/province code without the country prefix.\n"
  overload: Microsoft.Health.Location.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Location.Country
  commentId: P:Microsoft.Health.Location.Country
  id: Country
  parent: Microsoft.Health.Location
  langs:
  - csharp
  - vb
  name: Country
  nameWithType: Location.Country
  fullName: Microsoft.Health.Location.Country
  type: Property
  source:
    remote:
      path: Microsoft.Health/Location.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Country
    path: Location.cs
    startLine: 48
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets or sets the country code.\n"
  remarks: "\nAn ISO 3166-1 two letter country code.\n"
  example: []
  syntax:
    content: public string Country { get; set; }
    content.vb: Public Property Country As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Health.Location.Country*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Location.StateProvince
  commentId: P:Microsoft.Health.Location.StateProvince
  id: StateProvince
  parent: Microsoft.Health.Location
  langs:
  - csharp
  - vb
  name: StateProvince
  nameWithType: Location.StateProvince
  fullName: Microsoft.Health.Location.StateProvince
  type: Property
  source:
    remote:
      path: Microsoft.Health/Location.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: StateProvince
    path: Location.cs
    startLine: 74
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets or sets the state/province code.\n"
  remarks: "\nAn ISO 3166-2 state/province code without the country prefix.\n"
  example: []
  syntax:
    content: public string StateProvince { get; set; }
    content.vb: Public Property StateProvince As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Health.Location.StateProvince*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Location.ParseXml(System.Xml.XPath.XPathNavigator)
  commentId: M:Microsoft.Health.Location.ParseXml(System.Xml.XPath.XPathNavigator)
  id: ParseXml(System.Xml.XPath.XPathNavigator)
  parent: Microsoft.Health.Location
  langs:
  - csharp
  - vb
  name: ParseXml(XPathNavigator)
  nameWithType: Location.ParseXml(XPathNavigator)
  fullName: Microsoft.Health.Location.ParseXml(System.Xml.XPath.XPathNavigator)
  type: Method
  source:
    remote:
      path: Microsoft.Health/Location.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ParseXml
    path: Location.cs
    startLine: 85
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nParses the location XML and populates the instance properties from\nthe results.\n"
  example: []
  syntax:
    content: public void ParseXml(XPathNavigator location)
    content.vb: Public Sub ParseXml(location As XPathNavigator)
    parameters:
    - id: location
      type: System.Xml.XPath.XPathNavigator
      description: "\nXML of the location to be parsed.\n"
  overload: Microsoft.Health.Location.ParseXml*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Location.WriteXml(System.Xml.XmlWriter,System.String)
  commentId: M:Microsoft.Health.Location.WriteXml(System.Xml.XmlWriter,System.String)
  id: WriteXml(System.Xml.XmlWriter,System.String)
  parent: Microsoft.Health.Location
  langs:
  - csharp
  - vb
  name: WriteXml(XmlWriter, String)
  nameWithType: Location.WriteXml(XmlWriter, String)
  fullName: Microsoft.Health.Location.WriteXml(System.Xml.XmlWriter, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/Location.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: WriteXml
    path: Location.cs
    startLine: 112
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nWrites the location to the specified XmlWriter.\n"
  example: []
  syntax:
    content: public void WriteXml(XmlWriter writer, string elementName)
    content.vb: Public Sub WriteXml(writer As XmlWriter, elementName As String)
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "\nThe XmlWriter to write the location xml to.\n"
    - id: elementName
      type: System.String
      description: "\nThe name of the containing element to use when writing the location. Typically \"location\".\n"
  overload: Microsoft.Health.Location.WriteXml*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Location.ToString
  commentId: M:Microsoft.Health.Location.ToString
  id: ToString
  parent: Microsoft.Health.Location
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Location.ToString()
  fullName: Microsoft.Health.Location.ToString()
  type: Method
  source:
    remote:
      path: Microsoft.Health/Location.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ToString
    path: Location.cs
    startLine: 137
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets a string representation of the location.\n"
  example: []
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<cref name=\"Country\"></cref>-<cref name=\"StateProvince\"></cref>\n"
  overridden: System.Object.ToString
  overload: Microsoft.Health.Location.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Location.#ctor*
  commentId: Overload:Microsoft.Health.Location.#ctor
  isExternal: false
  name: Location
  nameWithType: Location.Location
  fullName: Microsoft.Health.Location.Location
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Health.Location.Country*
  commentId: Overload:Microsoft.Health.Location.Country
  isExternal: false
  name: Country
  nameWithType: Location.Country
  fullName: Microsoft.Health.Location.Country
- uid: Microsoft.Health.Location.StateProvince*
  commentId: Overload:Microsoft.Health.Location.StateProvince
  isExternal: false
  name: StateProvince
  nameWithType: Location.StateProvince
  fullName: Microsoft.Health.Location.StateProvince
- uid: Microsoft.Health.Location.ParseXml*
  commentId: Overload:Microsoft.Health.Location.ParseXml
  isExternal: false
  name: ParseXml
  nameWithType: Location.ParseXml
  fullName: Microsoft.Health.Location.ParseXml
- uid: System.Xml.XPath.XPathNavigator
  commentId: T:System.Xml.XPath.XPathNavigator
  parent: System.Xml.XPath
  isExternal: true
  name: XPathNavigator
  nameWithType: XPathNavigator
  fullName: System.Xml.XPath.XPathNavigator
- uid: System.Xml.XPath
  commentId: N:System.Xml.XPath
  isExternal: false
  name: System.Xml.XPath
  nameWithType: System.Xml.XPath
  fullName: System.Xml.XPath
- uid: Microsoft.Health.Location.WriteXml*
  commentId: Overload:Microsoft.Health.Location.WriteXml
  isExternal: false
  name: WriteXml
  nameWithType: Location.WriteXml
  fullName: Microsoft.Health.Location.WriteXml
- uid: System.Xml.XmlWriter
  commentId: T:System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: false
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Location.ToString*
  commentId: Overload:Microsoft.Health.Location.ToString
  isExternal: false
  name: ToString
  nameWithType: Location.ToString
  fullName: Microsoft.Health.Location.ToString
