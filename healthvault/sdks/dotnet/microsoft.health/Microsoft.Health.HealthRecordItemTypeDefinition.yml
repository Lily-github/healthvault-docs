### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.HealthRecordItemTypeDefinition
  commentId: T:Microsoft.Health.HealthRecordItemTypeDefinition
  id: HealthRecordItemTypeDefinition
  parent: Microsoft.Health
  children:
  - Microsoft.Health.HealthRecordItemTypeDefinition.#ctor
  - Microsoft.Health.HealthRecordItemTypeDefinition.AllowReadOnly
  - Microsoft.Health.HealthRecordItemTypeDefinition.ColumnDefinitions
  - Microsoft.Health.HealthRecordItemTypeDefinition.CreateFromXml(System.Xml.XPath.XPathNavigator)
  - Microsoft.Health.HealthRecordItemTypeDefinition.EffectiveDateXPath
  - Microsoft.Health.HealthRecordItemTypeDefinition.GetTransform(System.String)
  - Microsoft.Health.HealthRecordItemTypeDefinition.IsCreatable
  - Microsoft.Health.HealthRecordItemTypeDefinition.IsImmutable
  - Microsoft.Health.HealthRecordItemTypeDefinition.IsItemXmlSchemaValid(System.String)
  - Microsoft.Health.HealthRecordItemTypeDefinition.IsSingletonType
  - Microsoft.Health.HealthRecordItemTypeDefinition.Name
  - Microsoft.Health.HealthRecordItemTypeDefinition.SupportedTransformNames
  - Microsoft.Health.HealthRecordItemTypeDefinition.TransformItem(System.String,Microsoft.Health.HealthRecordItem)
  - Microsoft.Health.HealthRecordItemTypeDefinition.TransformSource
  - Microsoft.Health.HealthRecordItemTypeDefinition.TypeId
  - Microsoft.Health.HealthRecordItemTypeDefinition.TypeSchema
  - Microsoft.Health.HealthRecordItemTypeDefinition.UpdatedEndDateXPath
  - Microsoft.Health.HealthRecordItemTypeDefinition.ValidationSchemaSet
  - Microsoft.Health.HealthRecordItemTypeDefinition.Versions
  - Microsoft.Health.HealthRecordItemTypeDefinition.XmlSchemaDefinition
  langs:
  - csharp
  - vb
  name: HealthRecordItemTypeDefinition
  nameWithType: HealthRecordItemTypeDefinition
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition
  type: Class
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemTypeDefinition.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: HealthRecordItemTypeDefinition
    path: HealthRecordItemTypeDefinition.cs
    startLine: 24
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nDescribes the schema and structure of a health record item type.\n"
  example: []
  syntax:
    content: public class HealthRecordItemTypeDefinition
    content.vb: Public Class HealthRecordItemTypeDefinition
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.CreateFromXml(System.Xml.XPath.XPathNavigator)
  commentId: M:Microsoft.Health.HealthRecordItemTypeDefinition.CreateFromXml(System.Xml.XPath.XPathNavigator)
  id: CreateFromXml(System.Xml.XPath.XPathNavigator)
  parent: Microsoft.Health.HealthRecordItemTypeDefinition
  langs:
  - csharp
  - vb
  name: CreateFromXml(XPathNavigator)
  nameWithType: HealthRecordItemTypeDefinition.CreateFromXml(XPathNavigator)
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition.CreateFromXml(System.Xml.XPath.XPathNavigator)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemTypeDefinition.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CreateFromXml
    path: HealthRecordItemTypeDefinition.cs
    startLine: 41
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nConstructs an instance of <xref href=\"Microsoft.Health.HealthRecordItemTypeDefinition\" data-throw-if-not-resolved=\"false\"></xref> from the specified\nXML.\n"
  example: []
  syntax:
    content: public static HealthRecordItemTypeDefinition CreateFromXml(XPathNavigator typeNavigator)
    content.vb: Public Shared Function CreateFromXml(typeNavigator As XPathNavigator) As HealthRecordItemTypeDefinition
    parameters:
    - id: typeNavigator
      type: System.Xml.XPath.XPathNavigator
      description: "\nXML navigator containing the information needed to construct the instance. This XML\nmust adhere to the schema for a ThingType as defined by response-getthingtype.xsd.\n"
    return:
      type: Microsoft.Health.HealthRecordItemTypeDefinition
      description: "\nAn instance of <xref href=\"Microsoft.Health.HealthRecordItemTypeDefinition\" data-throw-if-not-resolved=\"false\"></xref> constructed from the \nspecified XML.\n"
  overload: Microsoft.Health.HealthRecordItemTypeDefinition.CreateFromXml*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.#ctor
  commentId: M:Microsoft.Health.HealthRecordItemTypeDefinition.#ctor
  id: '#ctor'
  parent: Microsoft.Health.HealthRecordItemTypeDefinition
  langs:
  - csharp
  - vb
  name: HealthRecordItemTypeDefinition()
  nameWithType: HealthRecordItemTypeDefinition.HealthRecordItemTypeDefinition()
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition.HealthRecordItemTypeDefinition()
  type: Constructor
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemTypeDefinition.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: HealthRecordItemTypeDefinition.cs
    startLine: 54
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nCreates a new instance of the <xref href=\"Microsoft.Health.HealthRecordItemTypeDefinition\" data-throw-if-not-resolved=\"false\"></xref> class for use in testing.\n"
  example: []
  syntax:
    content: protected HealthRecordItemTypeDefinition()
    content.vb: Protected Sub New
  overload: Microsoft.Health.HealthRecordItemTypeDefinition.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.Name
  commentId: P:Microsoft.Health.HealthRecordItemTypeDefinition.Name
  id: Name
  parent: Microsoft.Health.HealthRecordItemTypeDefinition
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: HealthRecordItemTypeDefinition.Name
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition.Name
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemTypeDefinition.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Name
    path: HealthRecordItemTypeDefinition.cs
    startLine: 189
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets or sets the type name.\n"
  example: []
  syntax:
    content: public string Name { get; protected set; }
    content.vb: Public Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\nA string representing the type name.\n"
  overload: Microsoft.Health.HealthRecordItemTypeDefinition.Name*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.TypeId
  commentId: P:Microsoft.Health.HealthRecordItemTypeDefinition.TypeId
  id: TypeId
  parent: Microsoft.Health.HealthRecordItemTypeDefinition
  langs:
  - csharp
  - vb
  name: TypeId
  nameWithType: HealthRecordItemTypeDefinition.TypeId
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition.TypeId
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemTypeDefinition.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: TypeId
    path: HealthRecordItemTypeDefinition.cs
    startLine: 204
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets or sets the type unique identifier.\n"
  example: []
  syntax:
    content: public Guid TypeId { get; protected set; }
    content.vb: Public Property TypeId As Guid
    parameters: []
    return:
      type: System.Guid
      description: "\nA GUID representing the type identifier.\n"
  overload: Microsoft.Health.HealthRecordItemTypeDefinition.TypeId*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.XmlSchemaDefinition
  commentId: P:Microsoft.Health.HealthRecordItemTypeDefinition.XmlSchemaDefinition
  id: XmlSchemaDefinition
  parent: Microsoft.Health.HealthRecordItemTypeDefinition
  langs:
  - csharp
  - vb
  name: XmlSchemaDefinition
  nameWithType: HealthRecordItemTypeDefinition.XmlSchemaDefinition
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition.XmlSchemaDefinition
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemTypeDefinition.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: XmlSchemaDefinition
    path: HealthRecordItemTypeDefinition.cs
    startLine: 219
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets or sets the XML schema definition.\n"
  example: []
  syntax:
    content: public string XmlSchemaDefinition { get; protected set; }
    content.vb: Public Property XmlSchemaDefinition As String
    parameters: []
    return:
      type: System.String
      description: "\nA string representing the definition.\n"
  overload: Microsoft.Health.HealthRecordItemTypeDefinition.XmlSchemaDefinition*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.TypeSchema
  commentId: P:Microsoft.Health.HealthRecordItemTypeDefinition.TypeSchema
  id: TypeSchema
  parent: Microsoft.Health.HealthRecordItemTypeDefinition
  langs:
  - csharp
  - vb
  name: TypeSchema
  nameWithType: HealthRecordItemTypeDefinition.TypeSchema
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition.TypeSchema
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemTypeDefinition.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: TypeSchema
    path: HealthRecordItemTypeDefinition.cs
    startLine: 229
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the schema definition of the type.\n"
  example: []
  syntax:
    content: public XmlSchema TypeSchema { get; }
    content.vb: Public ReadOnly Property TypeSchema As XmlSchema
    parameters: []
    return:
      type: System.Xml.Schema.XmlSchema
  overload: Microsoft.Health.HealthRecordItemTypeDefinition.TypeSchema*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.ValidationSchemaSet
  commentId: P:Microsoft.Health.HealthRecordItemTypeDefinition.ValidationSchemaSet
  id: ValidationSchemaSet
  parent: Microsoft.Health.HealthRecordItemTypeDefinition
  langs:
  - csharp
  - vb
  name: ValidationSchemaSet
  nameWithType: HealthRecordItemTypeDefinition.ValidationSchemaSet
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition.ValidationSchemaSet
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemTypeDefinition.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ValidationSchemaSet
    path: HealthRecordItemTypeDefinition.cs
    startLine: 253
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the XmlSchemaSet that can be used to validate an XML fragment of\nthis health record item type.\n"
  example: []
  syntax:
    content: public XmlSchemaSet ValidationSchemaSet { get; }
    content.vb: Public ReadOnly Property ValidationSchemaSet As XmlSchemaSet
    parameters: []
    return:
      type: System.Xml.Schema.XmlSchemaSet
  overload: Microsoft.Health.HealthRecordItemTypeDefinition.ValidationSchemaSet*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.IsCreatable
  commentId: P:Microsoft.Health.HealthRecordItemTypeDefinition.IsCreatable
  id: IsCreatable
  parent: Microsoft.Health.HealthRecordItemTypeDefinition
  langs:
  - csharp
  - vb
  name: IsCreatable
  nameWithType: HealthRecordItemTypeDefinition.IsCreatable
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition.IsCreatable
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemTypeDefinition.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IsCreatable
    path: HealthRecordItemTypeDefinition.cs
    startLine: 283
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets or sets a value indicating whether instances of the type are creatable.\n"
  example: []
  syntax:
    content: public bool IsCreatable { get; protected set; }
    content.vb: Public Property IsCreatable As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<strong>true</strong> if the instances are creatable; otherwise, <strong>false</strong>.\n"
  overload: Microsoft.Health.HealthRecordItemTypeDefinition.IsCreatable*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.IsImmutable
  commentId: P:Microsoft.Health.HealthRecordItemTypeDefinition.IsImmutable
  id: IsImmutable
  parent: Microsoft.Health.HealthRecordItemTypeDefinition
  langs:
  - csharp
  - vb
  name: IsImmutable
  nameWithType: HealthRecordItemTypeDefinition.IsImmutable
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition.IsImmutable
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemTypeDefinition.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IsImmutable
    path: HealthRecordItemTypeDefinition.cs
    startLine: 298
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets or sets a value indicating whether instances of the type are immutable.\n"
  example: []
  syntax:
    content: public bool IsImmutable { get; protected set; }
    content.vb: Public Property IsImmutable As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<strong>true</strong> if the instances are immutable; otherwise, <strong>false</strong>.\n"
  overload: Microsoft.Health.HealthRecordItemTypeDefinition.IsImmutable*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.IsSingletonType
  commentId: P:Microsoft.Health.HealthRecordItemTypeDefinition.IsSingletonType
  id: IsSingletonType
  parent: Microsoft.Health.HealthRecordItemTypeDefinition
  langs:
  - csharp
  - vb
  name: IsSingletonType
  nameWithType: HealthRecordItemTypeDefinition.IsSingletonType
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition.IsSingletonType
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemTypeDefinition.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IsSingletonType
    path: HealthRecordItemTypeDefinition.cs
    startLine: 315
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets or sets a value indicating whether only a single instance of the type \ncan exist for each health record.\n"
  example: []
  syntax:
    content: public bool IsSingletonType { get; protected set; }
    content.vb: Public Property IsSingletonType As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<strong>true</strong> if only a single instance of the type can exist for each\nhealth record; otherwise, <strong>false</strong>.\n"
  overload: Microsoft.Health.HealthRecordItemTypeDefinition.IsSingletonType*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.AllowReadOnly
  commentId: P:Microsoft.Health.HealthRecordItemTypeDefinition.AllowReadOnly
  id: AllowReadOnly
  parent: Microsoft.Health.HealthRecordItemTypeDefinition
  langs:
  - csharp
  - vb
  name: AllowReadOnly
  nameWithType: HealthRecordItemTypeDefinition.AllowReadOnly
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition.AllowReadOnly
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemTypeDefinition.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: AllowReadOnly
    path: HealthRecordItemTypeDefinition.cs
    startLine: 329
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets or sets a value indicating whether the Thing Type allows read-only\ninstances.\n"
  example: []
  syntax:
    content: public bool AllowReadOnly { get; protected set; }
    content.vb: Public Property AllowReadOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<strong>true</strong> if the Thing Type allows read-only instances; otherwise <strong>false</strong>\n"
  overload: Microsoft.Health.HealthRecordItemTypeDefinition.AllowReadOnly*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.ColumnDefinitions
  commentId: P:Microsoft.Health.HealthRecordItemTypeDefinition.ColumnDefinitions
  id: ColumnDefinitions
  parent: Microsoft.Health.HealthRecordItemTypeDefinition
  langs:
  - csharp
  - vb
  name: ColumnDefinitions
  nameWithType: HealthRecordItemTypeDefinition.ColumnDefinitions
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition.ColumnDefinitions
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemTypeDefinition.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ColumnDefinitions
    path: HealthRecordItemTypeDefinition.cs
    startLine: 344
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets or sets the column definitions when dealing with the type as a\nsingle type table.\n"
  example: []
  syntax:
    content: public ReadOnlyCollection<ItemTypeDataColumn> ColumnDefinitions { get; protected set; }
    content.vb: Public Property ColumnDefinitions As ReadOnlyCollection(Of ItemTypeDataColumn)
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Health.ItemTypeDataColumn}
      description: "\nA read-only collection containing the defintions.\n"
  overload: Microsoft.Health.HealthRecordItemTypeDefinition.ColumnDefinitions*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.SupportedTransformNames
  commentId: P:Microsoft.Health.HealthRecordItemTypeDefinition.SupportedTransformNames
  id: SupportedTransformNames
  parent: Microsoft.Health.HealthRecordItemTypeDefinition
  langs:
  - csharp
  - vb
  name: SupportedTransformNames
  nameWithType: HealthRecordItemTypeDefinition.SupportedTransformNames
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition.SupportedTransformNames
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemTypeDefinition.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SupportedTransformNames
    path: HealthRecordItemTypeDefinition.cs
    startLine: 360
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets or sets the HealthVault transform names supported by the type.\n"
  example: []
  syntax:
    content: public ReadOnlyCollection<string> SupportedTransformNames { get; protected set; }
    content.vb: Public Property SupportedTransformNames As ReadOnlyCollection(Of String)
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.String}
      description: "\nA read-only collection containing the transforms.\n"
  overload: Microsoft.Health.HealthRecordItemTypeDefinition.SupportedTransformNames*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.TransformSource
  commentId: P:Microsoft.Health.HealthRecordItemTypeDefinition.TransformSource
  id: TransformSource
  parent: Microsoft.Health.HealthRecordItemTypeDefinition
  langs:
  - csharp
  - vb
  name: TransformSource
  nameWithType: HealthRecordItemTypeDefinition.TransformSource
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition.TransformSource
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemTypeDefinition.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: TransformSource
    path: HealthRecordItemTypeDefinition.cs
    startLine: 381
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets or sets the HealthVault transforms supported by the type.\n"
  remarks: "\nThe transform can be run by calling one of the <xref href=\"Microsoft.Health.HealthRecordItemTypeDefinition.TransformItem(System.String%2cMicrosoft.Health.HealthRecordItem)\" data-throw-if-not-resolved=\"false\"></xref> overloads.\n"
  example: []
  syntax:
    content: public Dictionary<string, string> TransformSource { get; protected set; }
    content.vb: Public Property TransformSource As Dictionary(Of String, String)
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.String}
      description: "\nA dictionary containing each of the transforms supported by the type. The key is the\ntransform name and the value is the source of the transform.\n"
  overload: Microsoft.Health.HealthRecordItemTypeDefinition.TransformSource*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.Versions
  commentId: P:Microsoft.Health.HealthRecordItemTypeDefinition.Versions
  id: Versions
  parent: Microsoft.Health.HealthRecordItemTypeDefinition
  langs:
  - csharp
  - vb
  name: Versions
  nameWithType: HealthRecordItemTypeDefinition.Versions
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition.Versions
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemTypeDefinition.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Versions
    path: HealthRecordItemTypeDefinition.cs
    startLine: 395
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets or sets a collection of the version information for the type.\n"
  example: []
  syntax:
    content: public ReadOnlyCollection<HealthRecordItemTypeVersionInfo> Versions { get; protected set; }
    content.vb: Public Property Versions As ReadOnlyCollection(Of HealthRecordItemTypeVersionInfo)
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Health.HealthRecordItemTypeVersionInfo}
  overload: Microsoft.Health.HealthRecordItemTypeDefinition.Versions*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.EffectiveDateXPath
  commentId: P:Microsoft.Health.HealthRecordItemTypeDefinition.EffectiveDateXPath
  id: EffectiveDateXPath
  parent: Microsoft.Health.HealthRecordItemTypeDefinition
  langs:
  - csharp
  - vb
  name: EffectiveDateXPath
  nameWithType: HealthRecordItemTypeDefinition.EffectiveDateXPath
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition.EffectiveDateXPath
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemTypeDefinition.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: EffectiveDateXPath
    path: HealthRecordItemTypeDefinition.cs
    startLine: 410
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets or sets the XPath to the effective date element in the <xref href=\"Microsoft.Health.HealthRecordItem.TypeSpecificData\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public string EffectiveDateXPath { get; protected set; }
    content.vb: Public Property EffectiveDateXPath As String
    parameters: []
    return:
      type: System.String
      description: "\nThe String representation of the XPath.\n"
  overload: Microsoft.Health.HealthRecordItemTypeDefinition.EffectiveDateXPath*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.UpdatedEndDateXPath
  commentId: P:Microsoft.Health.HealthRecordItemTypeDefinition.UpdatedEndDateXPath
  id: UpdatedEndDateXPath
  parent: Microsoft.Health.HealthRecordItemTypeDefinition
  langs:
  - csharp
  - vb
  name: UpdatedEndDateXPath
  nameWithType: HealthRecordItemTypeDefinition.UpdatedEndDateXPath
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition.UpdatedEndDateXPath
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemTypeDefinition.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: UpdatedEndDateXPath
    path: HealthRecordItemTypeDefinition.cs
    startLine: 425
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets or sets the XPath to the updated end date element in the <xref href=\"Microsoft.Health.HealthRecordItem.TypeSpecificData\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public string UpdatedEndDateXPath { get; protected set; }
    content.vb: Public Property UpdatedEndDateXPath As String
    parameters: []
    return:
      type: System.String
      description: "\nThe String representation of the XPath.\n"
  overload: Microsoft.Health.HealthRecordItemTypeDefinition.UpdatedEndDateXPath*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.IsItemXmlSchemaValid(System.String)
  commentId: M:Microsoft.Health.HealthRecordItemTypeDefinition.IsItemXmlSchemaValid(System.String)
  id: IsItemXmlSchemaValid(System.String)
  parent: Microsoft.Health.HealthRecordItemTypeDefinition
  langs:
  - csharp
  - vb
  name: IsItemXmlSchemaValid(String)
  nameWithType: HealthRecordItemTypeDefinition.IsItemXmlSchemaValid(String)
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition.IsItemXmlSchemaValid(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemTypeDefinition.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IsItemXmlSchemaValid
    path: HealthRecordItemTypeDefinition.cs
    startLine: 456
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nValidates the type specific XML is valid based on item type definition schema.\n"
  example: []
  syntax:
    content: public bool IsItemXmlSchemaValid(string typeSpecificXml)
    content.vb: Public Function IsItemXmlSchemaValid(typeSpecificXml As String) As Boolean
    parameters:
    - id: typeSpecificXml
      type: System.String
      description: "\nThe type specific portion of the XML for a health record item. It does not include\nthe header information like type-id, thing-id, etc.\n"
    return:
      type: System.Boolean
      description: "\nTrue if <span class=\"paramref\">typeSpecificXml</span> is schema valid according to\nthis type definition.\n"
  overload: Microsoft.Health.HealthRecordItemTypeDefinition.IsItemXmlSchemaValid*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">typeSpecificXml</span> is <strong>null</strong> or empty.\n"
  - type: System.Xml.Schema.XmlSchemaException
    commentId: T:System.Xml.Schema.XmlSchemaException
    description: "\nIf <span class=\"paramref\">typeSpecificXml</span> is not valid according to\nthis type definition.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.TransformItem(System.String,Microsoft.Health.HealthRecordItem)
  commentId: M:Microsoft.Health.HealthRecordItemTypeDefinition.TransformItem(System.String,Microsoft.Health.HealthRecordItem)
  id: TransformItem(System.String,Microsoft.Health.HealthRecordItem)
  parent: Microsoft.Health.HealthRecordItemTypeDefinition
  langs:
  - csharp
  - vb
  name: TransformItem(String, HealthRecordItem)
  nameWithType: HealthRecordItemTypeDefinition.TransformItem(String, HealthRecordItem)
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition.TransformItem(System.String, Microsoft.Health.HealthRecordItem)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemTypeDefinition.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: TransformItem
    path: HealthRecordItemTypeDefinition.cs
    startLine: 541
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nTransforms the XML of the specified health record item using the specified transform.\n"
  remarks: "\nIf the transform has been used before a cached instance of the compiled transform will\nbe used. Compiled transforms are not thread safe. It is up to the caller to ensure\nthat multiple threads do not attempt to use the same transform at the same time.\n"
  example: []
  syntax:
    content: public string TransformItem(string transformName, HealthRecordItem item)
    content.vb: Public Function TransformItem(transformName As String, item As HealthRecordItem) As String
    parameters:
    - id: transformName
      type: System.String
      description: "\nThe name of the transform to use. Supported transforms for the type can be found in the\n<xref href=\"Microsoft.Health.HealthRecordItemTypeDefinition.SupportedTransformNames\" data-throw-if-not-resolved=\"false\"></xref> collection.\n"
    - id: item
      type: Microsoft.Health.HealthRecordItem
      description: "\nThe health record item to be transformed.\n"
    return:
      type: System.String
      description: "\nA string containing the results of the transform.\n"
  overload: Microsoft.Health.HealthRecordItemTypeDefinition.TransformItem*
  exceptions:
  - type: System.Collections.Generic.KeyNotFoundException
    commentId: T:System.Collections.Generic.KeyNotFoundException
    description: "\nIf <span class=\"paramref\">transformName</span> could not be found in the <xref href=\"Microsoft.Health.HealthRecordItemTypeDefinition.TransformSource\" data-throw-if-not-resolved=\"false\"></xref>\ncollection.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.GetTransform(System.String)
  commentId: M:Microsoft.Health.HealthRecordItemTypeDefinition.GetTransform(System.String)
  id: GetTransform(System.String)
  parent: Microsoft.Health.HealthRecordItemTypeDefinition
  langs:
  - csharp
  - vb
  name: GetTransform(String)
  nameWithType: HealthRecordItemTypeDefinition.GetTransform(String)
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition.GetTransform(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemTypeDefinition.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetTransform
    path: HealthRecordItemTypeDefinition.cs
    startLine: 597
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets a compiled version of the specified transform.\n"
  example: []
  syntax:
    content: public XslCompiledTransform GetTransform(string transformName)
    content.vb: Public Function GetTransform(transformName As String) As XslCompiledTransform
    parameters:
    - id: transformName
      type: System.String
      description: "\nThe name of the transform to get.\n"
    return:
      type: System.Xml.Xsl.XslCompiledTransform
      description: "\nA compiled version of the specified transform.\n"
  overload: Microsoft.Health.HealthRecordItemTypeDefinition.GetTransform*
  exceptions:
  - type: System.Collections.Generic.KeyNotFoundException
    commentId: T:System.Collections.Generic.KeyNotFoundException
    description: "\nIf <span class=\"paramref\">transformName</span> is not found as a transform for the item type.\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\nThere is a load or parse error in the specified transform.\n"
  - type: System.Xml.Xsl.XsltException
    commentId: T:System.Xml.Xsl.XsltException
    description: "\nThe specified style sheet contains an error.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.HealthRecordItemTypeDefinition
  commentId: T:Microsoft.Health.HealthRecordItemTypeDefinition
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordItemTypeDefinition
  nameWithType: HealthRecordItemTypeDefinition
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.CreateFromXml*
  commentId: Overload:Microsoft.Health.HealthRecordItemTypeDefinition.CreateFromXml
  isExternal: false
  name: CreateFromXml
  nameWithType: HealthRecordItemTypeDefinition.CreateFromXml
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition.CreateFromXml
- uid: System.Xml.XPath.XPathNavigator
  commentId: T:System.Xml.XPath.XPathNavigator
  parent: System.Xml.XPath
  isExternal: true
  name: XPathNavigator
  nameWithType: XPathNavigator
  fullName: System.Xml.XPath.XPathNavigator
- uid: System.Xml.XPath
  commentId: N:System.Xml.XPath
  isExternal: false
  name: System.Xml.XPath
  nameWithType: System.Xml.XPath
  fullName: System.Xml.XPath
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.#ctor*
  commentId: Overload:Microsoft.Health.HealthRecordItemTypeDefinition.#ctor
  isExternal: false
  name: HealthRecordItemTypeDefinition
  nameWithType: HealthRecordItemTypeDefinition.HealthRecordItemTypeDefinition
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition.HealthRecordItemTypeDefinition
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.Name*
  commentId: Overload:Microsoft.Health.HealthRecordItemTypeDefinition.Name
  isExternal: false
  name: Name
  nameWithType: HealthRecordItemTypeDefinition.Name
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.TypeId*
  commentId: Overload:Microsoft.Health.HealthRecordItemTypeDefinition.TypeId
  isExternal: false
  name: TypeId
  nameWithType: HealthRecordItemTypeDefinition.TypeId
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition.TypeId
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.XmlSchemaDefinition*
  commentId: Overload:Microsoft.Health.HealthRecordItemTypeDefinition.XmlSchemaDefinition
  isExternal: false
  name: XmlSchemaDefinition
  nameWithType: HealthRecordItemTypeDefinition.XmlSchemaDefinition
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition.XmlSchemaDefinition
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.TypeSchema*
  commentId: Overload:Microsoft.Health.HealthRecordItemTypeDefinition.TypeSchema
  isExternal: false
  name: TypeSchema
  nameWithType: HealthRecordItemTypeDefinition.TypeSchema
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition.TypeSchema
- uid: System.Xml.Schema.XmlSchema
  commentId: T:System.Xml.Schema.XmlSchema
  parent: System.Xml.Schema
  isExternal: true
  name: XmlSchema
  nameWithType: XmlSchema
  fullName: System.Xml.Schema.XmlSchema
- uid: System.Xml.Schema
  commentId: N:System.Xml.Schema
  isExternal: false
  name: System.Xml.Schema
  nameWithType: System.Xml.Schema
  fullName: System.Xml.Schema
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.ValidationSchemaSet*
  commentId: Overload:Microsoft.Health.HealthRecordItemTypeDefinition.ValidationSchemaSet
  isExternal: false
  name: ValidationSchemaSet
  nameWithType: HealthRecordItemTypeDefinition.ValidationSchemaSet
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition.ValidationSchemaSet
- uid: System.Xml.Schema.XmlSchemaSet
  commentId: T:System.Xml.Schema.XmlSchemaSet
  parent: System.Xml.Schema
  isExternal: true
  name: XmlSchemaSet
  nameWithType: XmlSchemaSet
  fullName: System.Xml.Schema.XmlSchemaSet
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.IsCreatable*
  commentId: Overload:Microsoft.Health.HealthRecordItemTypeDefinition.IsCreatable
  isExternal: false
  name: IsCreatable
  nameWithType: HealthRecordItemTypeDefinition.IsCreatable
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition.IsCreatable
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.IsImmutable*
  commentId: Overload:Microsoft.Health.HealthRecordItemTypeDefinition.IsImmutable
  isExternal: false
  name: IsImmutable
  nameWithType: HealthRecordItemTypeDefinition.IsImmutable
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition.IsImmutable
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.IsSingletonType*
  commentId: Overload:Microsoft.Health.HealthRecordItemTypeDefinition.IsSingletonType
  isExternal: false
  name: IsSingletonType
  nameWithType: HealthRecordItemTypeDefinition.IsSingletonType
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition.IsSingletonType
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.AllowReadOnly*
  commentId: Overload:Microsoft.Health.HealthRecordItemTypeDefinition.AllowReadOnly
  isExternal: false
  name: AllowReadOnly
  nameWithType: HealthRecordItemTypeDefinition.AllowReadOnly
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition.AllowReadOnly
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.ColumnDefinitions*
  commentId: Overload:Microsoft.Health.HealthRecordItemTypeDefinition.ColumnDefinitions
  isExternal: false
  name: ColumnDefinitions
  nameWithType: HealthRecordItemTypeDefinition.ColumnDefinitions
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition.ColumnDefinitions
- uid: System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Health.ItemTypeDataColumn}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Health.ItemTypeDataColumn}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<ItemTypeDataColumn>
  nameWithType: ReadOnlyCollection<ItemTypeDataColumn>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Health.ItemTypeDataColumn>
  nameWithType.vb: ReadOnlyCollection(Of ItemTypeDataColumn)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of Microsoft.Health.ItemTypeDataColumn)
  name.vb: ReadOnlyCollection(Of ItemTypeDataColumn)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.ItemTypeDataColumn
    name: ItemTypeDataColumn
    nameWithType: ItemTypeDataColumn
    fullName: Microsoft.Health.ItemTypeDataColumn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.ItemTypeDataColumn
    name: ItemTypeDataColumn
    nameWithType: ItemTypeDataColumn
    fullName: Microsoft.Health.ItemTypeDataColumn
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: true
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  nameWithType.vb: ReadOnlyCollection(Of T)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.SupportedTransformNames*
  commentId: Overload:Microsoft.Health.HealthRecordItemTypeDefinition.SupportedTransformNames
  isExternal: false
  name: SupportedTransformNames
  nameWithType: HealthRecordItemTypeDefinition.SupportedTransformNames
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition.SupportedTransformNames
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.String}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{System.String}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<String>
  nameWithType: ReadOnlyCollection<String>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.String>
  nameWithType.vb: ReadOnlyCollection(Of String)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of System.String)
  name.vb: ReadOnlyCollection(Of String)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.TransformItem(System.String,Microsoft.Health.HealthRecordItem)
  commentId: M:Microsoft.Health.HealthRecordItemTypeDefinition.TransformItem(System.String,Microsoft.Health.HealthRecordItem)
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.TransformSource*
  commentId: Overload:Microsoft.Health.HealthRecordItemTypeDefinition.TransformSource
  isExternal: false
  name: TransformSource
  nameWithType: HealthRecordItemTypeDefinition.TransformSource
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition.TransformSource
- uid: System.Collections.Generic.Dictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, String>
  nameWithType: Dictionary<String, String>
  fullName: System.Collections.Generic.Dictionary<System.String, System.String>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.Versions*
  commentId: Overload:Microsoft.Health.HealthRecordItemTypeDefinition.Versions
  isExternal: false
  name: Versions
  nameWithType: HealthRecordItemTypeDefinition.Versions
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition.Versions
- uid: System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Health.HealthRecordItemTypeVersionInfo}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Health.HealthRecordItemTypeVersionInfo}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<HealthRecordItemTypeVersionInfo>
  nameWithType: ReadOnlyCollection<HealthRecordItemTypeVersionInfo>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Health.HealthRecordItemTypeVersionInfo>
  nameWithType.vb: ReadOnlyCollection(Of HealthRecordItemTypeVersionInfo)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of Microsoft.Health.HealthRecordItemTypeVersionInfo)
  name.vb: ReadOnlyCollection(Of HealthRecordItemTypeVersionInfo)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.HealthRecordItemTypeVersionInfo
    name: HealthRecordItemTypeVersionInfo
    nameWithType: HealthRecordItemTypeVersionInfo
    fullName: Microsoft.Health.HealthRecordItemTypeVersionInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.HealthRecordItemTypeVersionInfo
    name: HealthRecordItemTypeVersionInfo
    nameWithType: HealthRecordItemTypeVersionInfo
    fullName: Microsoft.Health.HealthRecordItemTypeVersionInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthRecordItem.TypeSpecificData
  commentId: P:Microsoft.Health.HealthRecordItem.TypeSpecificData
  parent: Microsoft.Health.HealthRecordItem
  isExternal: false
  name: TypeSpecificData
  nameWithType: HealthRecordItem.TypeSpecificData
  fullName: Microsoft.Health.HealthRecordItem.TypeSpecificData
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.EffectiveDateXPath*
  commentId: Overload:Microsoft.Health.HealthRecordItemTypeDefinition.EffectiveDateXPath
  isExternal: false
  name: EffectiveDateXPath
  nameWithType: HealthRecordItemTypeDefinition.EffectiveDateXPath
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition.EffectiveDateXPath
- uid: Microsoft.Health.HealthRecordItem
  commentId: T:Microsoft.Health.HealthRecordItem
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordItem
  nameWithType: HealthRecordItem
  fullName: Microsoft.Health.HealthRecordItem
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.UpdatedEndDateXPath*
  commentId: Overload:Microsoft.Health.HealthRecordItemTypeDefinition.UpdatedEndDateXPath
  isExternal: false
  name: UpdatedEndDateXPath
  nameWithType: HealthRecordItemTypeDefinition.UpdatedEndDateXPath
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition.UpdatedEndDateXPath
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.IsItemXmlSchemaValid*
  commentId: Overload:Microsoft.Health.HealthRecordItemTypeDefinition.IsItemXmlSchemaValid
  isExternal: false
  name: IsItemXmlSchemaValid
  nameWithType: HealthRecordItemTypeDefinition.IsItemXmlSchemaValid
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition.IsItemXmlSchemaValid
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: System.Xml.Schema.XmlSchemaException
  commentId: T:System.Xml.Schema.XmlSchemaException
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.SupportedTransformNames
  commentId: P:Microsoft.Health.HealthRecordItemTypeDefinition.SupportedTransformNames
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.TransformSource
  commentId: P:Microsoft.Health.HealthRecordItemTypeDefinition.TransformSource
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.TransformItem*
  commentId: Overload:Microsoft.Health.HealthRecordItemTypeDefinition.TransformItem
  isExternal: false
  name: TransformItem
  nameWithType: HealthRecordItemTypeDefinition.TransformItem
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition.TransformItem
- uid: System.Collections.Generic.KeyNotFoundException
  commentId: T:System.Collections.Generic.KeyNotFoundException
- uid: Microsoft.Health.HealthRecordItemTypeDefinition.GetTransform*
  commentId: Overload:Microsoft.Health.HealthRecordItemTypeDefinition.GetTransform
  isExternal: false
  name: GetTransform
  nameWithType: HealthRecordItemTypeDefinition.GetTransform
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition.GetTransform
- uid: System.Xml.XmlException
  commentId: T:System.Xml.XmlException
- uid: System.Xml.Xsl.XsltException
  commentId: T:System.Xml.Xsl.XsltException
- uid: System.Xml.Xsl.XslCompiledTransform
  commentId: T:System.Xml.Xsl.XslCompiledTransform
  parent: System.Xml.Xsl
  isExternal: true
  name: XslCompiledTransform
  nameWithType: XslCompiledTransform
  fullName: System.Xml.Xsl.XslCompiledTransform
- uid: System.Xml.Xsl
  commentId: N:System.Xml.Xsl
  isExternal: false
  name: System.Xml.Xsl
  nameWithType: System.Xml.Xsl
  fullName: System.Xml.Xsl
