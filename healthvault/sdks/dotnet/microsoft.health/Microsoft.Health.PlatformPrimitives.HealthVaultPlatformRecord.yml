### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord
  commentId: T:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord
  id: HealthVaultPlatformRecord
  parent: Microsoft.Health.PlatformPrimitives
  children:
  - Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.DisableMock
  - Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.EnableMock(Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord)
  - Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.GetValidGroupMembership(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{System.Guid})
  - Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.QueryPermissions(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{System.Guid})
  - Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.QueryPermissionsByTypes(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{System.Guid})
  - Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.QueryRecordPermissions(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{System.Guid})
  - Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.RemoveApplicationAuthorization(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor)
  langs:
  - csharp
  - vb
  name: HealthVaultPlatformRecord
  nameWithType: HealthVaultPlatformRecord
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord
  type: Class
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformRecord.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: HealthVaultPlatformRecord
    path: HealthVaultPlatformRecord.cs
    startLine: 23
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nProvides low-level access to the HealthVault record operations.\n"
  remarks: "\n<xref href=\"Microsoft.Health.HealthVaultPlatform\" data-throw-if-not-resolved=\"false\"></xref> uses this class to perform operations. Set \nHealthVaultPlatformRecord.Current to a derived class to intercept all message calls.\n"
  example: []
  syntax:
    content: public class HealthVaultPlatformRecord
    content.vb: Public Class HealthVaultPlatformRecord
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.EnableMock(Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord)
  commentId: M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.EnableMock(Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord)
  id: EnableMock(Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord)
  parent: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord
  langs:
  - csharp
  - vb
  name: EnableMock(HealthVaultPlatformRecord)
  nameWithType: HealthVaultPlatformRecord.EnableMock(HealthVaultPlatformRecord)
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.EnableMock(Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformRecord.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: EnableMock
    path: HealthVaultPlatformRecord.cs
    startLine: 40
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nEnables mocking of calls to this class.\n"
  remarks: "\nThe calling class should pass in a class that derives from this\nclass and overrides the calls to be mocked. \n"
  example: []
  syntax:
    content: public static void EnableMock(HealthVaultPlatformRecord mock)
    content.vb: Public Shared Sub EnableMock(mock As HealthVaultPlatformRecord)
    parameters:
    - id: mock
      type: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord
      description: The mocking class.
  overload: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.EnableMock*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThere is already a mock registered for this class.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.DisableMock
  commentId: M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.DisableMock
  id: DisableMock
  parent: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord
  langs:
  - csharp
  - vb
  name: DisableMock()
  nameWithType: HealthVaultPlatformRecord.DisableMock()
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.DisableMock()
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformRecord.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DisableMock
    path: HealthVaultPlatformRecord.cs
    startLine: 56
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nRemoves mocking of calls to this class.\n"
  example: []
  syntax:
    content: public static void DisableMock()
    content.vb: Public Shared Sub DisableMock
  overload: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.DisableMock*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThere is no mock registered for this class.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.RemoveApplicationAuthorization(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor)
  commentId: M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.RemoveApplicationAuthorization(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor)
  id: RemoveApplicationAuthorization(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor)
  parent: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord
  langs:
  - csharp
  - vb
  name: RemoveApplicationAuthorization(ApplicationConnection, HealthRecordAccessor)
  nameWithType: HealthVaultPlatformRecord.RemoveApplicationAuthorization(ApplicationConnection, HealthRecordAccessor)
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.RemoveApplicationAuthorization(Microsoft.Health.ApplicationConnection, Microsoft.Health.HealthRecordAccessor)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformRecord.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: RemoveApplicationAuthorization
    path: HealthVaultPlatformRecord.cs
    startLine: 91
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nReleases the authorization of the application on the health record.\n"
  remarks: "\nOnce the application releases the authorization to the health record, \ncalling any methods of this <xref href=\"Microsoft.Health.HealthRecordAccessor\" data-throw-if-not-resolved=\"false\"></xref> will result \nin a <xref href=\"Microsoft.Health.HealthServiceAccessDeniedException\" data-throw-if-not-resolved=\"false\"></xref>.\"\n"
  example: []
  syntax:
    content: public virtual void RemoveApplicationAuthorization(ApplicationConnection connection, HealthRecordAccessor accessor)
    content.vb: Public Overridable Sub RemoveApplicationAuthorization(connection As ApplicationConnection, accessor As HealthRecordAccessor)
    parameters:
    - id: connection
      type: Microsoft.Health.ApplicationConnection
      description: "\nThe connection to use to access the data.\n"
    - id: accessor
      type: Microsoft.Health.HealthRecordAccessor
      description: "\nThe record to use.\n"
  overload: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.RemoveApplicationAuthorization*
  exceptions:
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nErrors during the authorization release.\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.QueryPermissionsByTypes(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{System.Guid})
  commentId: M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.QueryPermissionsByTypes(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{System.Guid})
  id: QueryPermissionsByTypes(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{System.Guid})
  parent: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord
  langs:
  - csharp
  - vb
  name: QueryPermissionsByTypes(ApplicationConnection, HealthRecordAccessor, IList<Guid>)
  nameWithType: HealthVaultPlatformRecord.QueryPermissionsByTypes(ApplicationConnection, HealthRecordAccessor, IList<Guid>)
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.QueryPermissionsByTypes(Microsoft.Health.ApplicationConnection, Microsoft.Health.HealthRecordAccessor, System.Collections.Generic.IList<System.Guid>)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformRecord.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: QueryPermissionsByTypes
    path: HealthVaultPlatformRecord.cs
    startLine: 140
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nGets the permissions which the authenticated person \nhas when using the calling application for the specified item types\nin this  record.\n"
  remarks: "\nIf the list of health record item types is empty, an empty dictionary is \nreturned. If for a health record item type, the person has \nneither online access nor offline access permissions, \n<strong> null </strong> will be returned for that type in the dictionary.\n"
  example: []
  syntax:
    content: public virtual IDictionary<Guid, HealthRecordItemTypePermission> QueryPermissionsByTypes(ApplicationConnection connection, HealthRecordAccessor accessor, IList<Guid> healthRecordItemTypeIds)
    content.vb: Public Overridable Function QueryPermissionsByTypes(connection As ApplicationConnection, accessor As HealthRecordAccessor, healthRecordItemTypeIds As IList(Of Guid)) As IDictionary(Of Guid, HealthRecordItemTypePermission)
    parameters:
    - id: connection
      type: Microsoft.Health.ApplicationConnection
      description: "\nThe connection to use to access the data.\n"
    - id: accessor
      type: Microsoft.Health.HealthRecordAccessor
      description: "\nThe record to use.\n"
    - id: healthRecordItemTypeIds
      type: System.Collections.Generic.IList{System.Guid}
      description: "\nA collection of unique identifiers to identify the health record  \nitem types, for which the permissions are being queried. \n"
    return:
      type: System.Collections.Generic.IDictionary{System.Guid,Microsoft.Health.HealthRecordItemTypePermission}
      description: "\nReturns a dictionary of <xref href=\"Microsoft.Health.HealthRecordItemTypePermission\" data-throw-if-not-resolved=\"false\"></xref> \nwith health record item types as the keys. \n"
  overload: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.QueryPermissionsByTypes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">healthRecordItemTypeIds</span> is <strong>null</strong>.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf there is an exception during executing the request to HealthVault. \n"
  nameWithType.vb: HealthVaultPlatformRecord.QueryPermissionsByTypes(ApplicationConnection, HealthRecordAccessor, IList(Of Guid))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.QueryPermissionsByTypes(Microsoft.Health.ApplicationConnection, Microsoft.Health.HealthRecordAccessor, System.Collections.Generic.IList(Of System.Guid))
  name.vb: QueryPermissionsByTypes(ApplicationConnection, HealthRecordAccessor, IList(Of Guid))
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.QueryPermissions(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{System.Guid})
  commentId: M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.QueryPermissions(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{System.Guid})
  id: QueryPermissions(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{System.Guid})
  parent: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord
  langs:
  - csharp
  - vb
  name: QueryPermissions(ApplicationConnection, HealthRecordAccessor, IList<Guid>)
  nameWithType: HealthVaultPlatformRecord.QueryPermissions(ApplicationConnection, HealthRecordAccessor, IList<Guid>)
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.QueryPermissions(Microsoft.Health.ApplicationConnection, Microsoft.Health.HealthRecordAccessor, System.Collections.Generic.IList<System.Guid>)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformRecord.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: QueryPermissions
    path: HealthVaultPlatformRecord.cs
    startLine: 208
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nGets the permissions which the authenticated person \nhas when using the calling application for the specified item types \nin this health record.\n"
  remarks: "\nIf the list of health record item types is empty, an empty list is \nreturned. If for a health record item type, the person has \nneither online access nor offline access permissions, \nHealthRecordItemTypePermission object is not returned for that\nhealth record item type. \n"
  example: []
  syntax:
    content: public virtual Collection<HealthRecordItemTypePermission> QueryPermissions(ApplicationConnection connection, HealthRecordAccessor accessor, IList<Guid> healthRecordItemTypeIds)
    content.vb: Public Overridable Function QueryPermissions(connection As ApplicationConnection, accessor As HealthRecordAccessor, healthRecordItemTypeIds As IList(Of Guid)) As Collection(Of HealthRecordItemTypePermission)
    parameters:
    - id: connection
      type: Microsoft.Health.ApplicationConnection
      description: "\nThe connection to use to access the data.\n"
    - id: accessor
      type: Microsoft.Health.HealthRecordAccessor
      description: "\nThe record to use.\n"
    - id: healthRecordItemTypeIds
      type: System.Collections.Generic.IList{System.Guid}
      description: "\nA collection of uniqueidentifiers to identify the health record  \nitem types, for which the permissions are being queried. \n"
    return:
      type: System.Collections.ObjectModel.Collection{Microsoft.Health.HealthRecordItemTypePermission}
      description: "\nA list of <xref href=\"Microsoft.Health.HealthRecordItemTypePermission\" data-throw-if-not-resolved=\"false\"></xref> \nobjects which represent the permissions that the current\nauthenticated person has for the HealthRecordItemTypes specified\nin the current health record when using the current application.\n"
  overload: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.QueryPermissions*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">healthRecordItemTypeIds</span> is <strong>null</strong>.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf there is an exception during executing the request to HealthVault. \n"
  nameWithType.vb: HealthVaultPlatformRecord.QueryPermissions(ApplicationConnection, HealthRecordAccessor, IList(Of Guid))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.QueryPermissions(Microsoft.Health.ApplicationConnection, Microsoft.Health.HealthRecordAccessor, System.Collections.Generic.IList(Of System.Guid))
  name.vb: QueryPermissions(ApplicationConnection, HealthRecordAccessor, IList(Of Guid))
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.QueryRecordPermissions(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{System.Guid})
  commentId: M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.QueryRecordPermissions(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{System.Guid})
  id: QueryRecordPermissions(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{System.Guid})
  parent: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord
  langs:
  - csharp
  - vb
  name: QueryRecordPermissions(ApplicationConnection, HealthRecordAccessor, IList<Guid>)
  nameWithType: HealthVaultPlatformRecord.QueryRecordPermissions(ApplicationConnection, HealthRecordAccessor, IList<Guid>)
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.QueryRecordPermissions(Microsoft.Health.ApplicationConnection, Microsoft.Health.HealthRecordAccessor, System.Collections.Generic.IList<System.Guid>)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformRecord.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: QueryRecordPermissions
    path: HealthVaultPlatformRecord.cs
    startLine: 258
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nGets the permissions which the authenticated person \nhas when using the calling application for the specified item types \nin this health record as well as the other permission settings such as MeaningfulUseOptIn.\n"
  remarks: "\nIf the list of health record item types is empty, an empty list is \nreturned for <xref href=\"Microsoft.Health.HealthRecordPermissions\" data-throw-if-not-resolved=\"false\"></xref> object's ItemTypePermissions property.\nIf for a health record item type, the person has \nneither online access nor offline access permissions, \nHealthRecordItemTypePermission object is not returned for that\nhealth record item type. \n"
  example: []
  syntax:
    content: public virtual HealthRecordPermissions QueryRecordPermissions(ApplicationConnection connection, HealthRecordAccessor accessor, IList<Guid> healthRecordItemTypeIds)
    content.vb: Public Overridable Function QueryRecordPermissions(connection As ApplicationConnection, accessor As HealthRecordAccessor, healthRecordItemTypeIds As IList(Of Guid)) As HealthRecordPermissions
    parameters:
    - id: connection
      type: Microsoft.Health.ApplicationConnection
      description: "\nThe connection to use to access the data.\n"
    - id: accessor
      type: Microsoft.Health.HealthRecordAccessor
      description: "\nThe record to use.\n"
    - id: healthRecordItemTypeIds
      type: System.Collections.Generic.IList{System.Guid}
      description: "\nA collection of uniqueidentifiers to identify the health record  \nitem types, for which the permissions are being queried. \n"
    return:
      type: Microsoft.Health.HealthRecordPermissions
      description: "\nA <xref href=\"Microsoft.Health.HealthRecordPermissions\" data-throw-if-not-resolved=\"false\"></xref> object\nwhich contains a collection of <xref href=\"Microsoft.Health.HealthRecordItemTypePermission\" data-throw-if-not-resolved=\"false\"></xref> objects and\nother permission settings.\n"
  overload: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.QueryRecordPermissions*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">healthRecordItemTypeIds</span> is <strong>null</strong>.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThere is an error in the server request.\n"
  nameWithType.vb: HealthVaultPlatformRecord.QueryRecordPermissions(ApplicationConnection, HealthRecordAccessor, IList(Of Guid))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.QueryRecordPermissions(Microsoft.Health.ApplicationConnection, Microsoft.Health.HealthRecordAccessor, System.Collections.Generic.IList(Of System.Guid))
  name.vb: QueryRecordPermissions(ApplicationConnection, HealthRecordAccessor, IList(Of Guid))
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.GetValidGroupMembership(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{System.Guid})
  commentId: M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.GetValidGroupMembership(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{System.Guid})
  id: GetValidGroupMembership(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{System.Guid})
  parent: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord
  langs:
  - csharp
  - vb
  name: GetValidGroupMembership(ApplicationConnection, HealthRecordAccessor, IList<Guid>)
  nameWithType: HealthVaultPlatformRecord.GetValidGroupMembership(ApplicationConnection, HealthRecordAccessor, IList<Guid>)
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.GetValidGroupMembership(Microsoft.Health.ApplicationConnection, Microsoft.Health.HealthRecordAccessor, System.Collections.Generic.IList<System.Guid>)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformRecord.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetValidGroupMembership
    path: HealthVaultPlatformRecord.cs
    startLine: 392
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nGets valid group memberships for a record.\n"
  remarks: "\nGroup membership thing types allow an application to signify that the\nrecord belongs to an application defined group.  A record in the group may be \neligible for special programs offered by other applications, for example.  \nApplications then need a away to query for valid group memberships.\n<br />\nValid group memberships are those memberships which are not expired, and whose\nlast updating application is authorized by the the last updating person to \nread and delete the membership.\n"
  example: []
  syntax:
    content: public virtual Collection<HealthRecordItem> GetValidGroupMembership(ApplicationConnection connection, HealthRecordAccessor accessor, IList<Guid> applicationIds)
    content.vb: Public Overridable Function GetValidGroupMembership(connection As ApplicationConnection, accessor As HealthRecordAccessor, applicationIds As IList(Of Guid)) As Collection(Of HealthRecordItem)
    parameters:
    - id: connection
      type: Microsoft.Health.ApplicationConnection
      description: "\nThe connection to use to access the data.\n"
    - id: accessor
      type: Microsoft.Health.HealthRecordAccessor
      description: "\nThe record to use.\n"
    - id: applicationIds
      type: System.Collections.Generic.IList{System.Guid}
      description: "\nA collection of unique application identifiers for which to \nsearch for group memberships.  For a null or empty application identifier \nlist, return all valid group memberships for the record.  Otherwise, \nreturn only those group memberships last updated by one of the \nsupplied application identifiers.\n"
    return:
      type: System.Collections.ObjectModel.Collection{Microsoft.Health.HealthRecordItem}
      description: "\nA List of HealthRecordItems representing the valid group memberships.\n"
  overload: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.GetValidGroupMembership*
  exceptions:
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf an error occurs while contacting the HealthVault service.\n"
  nameWithType.vb: HealthVaultPlatformRecord.GetValidGroupMembership(ApplicationConnection, HealthRecordAccessor, IList(Of Guid))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.GetValidGroupMembership(Microsoft.Health.ApplicationConnection, Microsoft.Health.HealthRecordAccessor, System.Collections.Generic.IList(Of System.Guid))
  name.vb: GetValidGroupMembership(ApplicationConnection, HealthRecordAccessor, IList(Of Guid))
references:
- uid: Microsoft.Health.HealthVaultPlatform
  commentId: T:Microsoft.Health.HealthVaultPlatform
  isExternal: false
  name: HealthVaultPlatform
  nameWithType: HealthVaultPlatform
  fullName: Microsoft.Health.HealthVaultPlatform
- uid: Microsoft.Health.PlatformPrimitives
  commentId: N:Microsoft.Health.PlatformPrimitives
  isExternal: false
  name: Microsoft.Health.PlatformPrimitives
  nameWithType: Microsoft.Health.PlatformPrimitives
  fullName: Microsoft.Health.PlatformPrimitives
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.EnableMock*
  commentId: Overload:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.EnableMock
  isExternal: false
  name: EnableMock
  nameWithType: HealthVaultPlatformRecord.EnableMock
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.EnableMock
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord
  commentId: T:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord
  parent: Microsoft.Health.PlatformPrimitives
  isExternal: false
  name: HealthVaultPlatformRecord
  nameWithType: HealthVaultPlatformRecord
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.DisableMock*
  commentId: Overload:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.DisableMock
  isExternal: false
  name: DisableMock
  nameWithType: HealthVaultPlatformRecord.DisableMock
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.DisableMock
- uid: Microsoft.Health.HealthRecordAccessor
  commentId: T:Microsoft.Health.HealthRecordAccessor
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordAccessor
  nameWithType: HealthRecordAccessor
  fullName: Microsoft.Health.HealthRecordAccessor
- uid: Microsoft.Health.HealthServiceAccessDeniedException
  commentId: T:Microsoft.Health.HealthServiceAccessDeniedException
  isExternal: false
  name: HealthServiceAccessDeniedException
  nameWithType: HealthServiceAccessDeniedException
  fullName: Microsoft.Health.HealthServiceAccessDeniedException
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.RemoveApplicationAuthorization*
  commentId: Overload:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.RemoveApplicationAuthorization
  isExternal: false
  name: RemoveApplicationAuthorization
  nameWithType: HealthVaultPlatformRecord.RemoveApplicationAuthorization
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.RemoveApplicationAuthorization
- uid: Microsoft.Health.HealthServiceException
  commentId: T:Microsoft.Health.HealthServiceException
  parent: Microsoft.Health
  isExternal: false
  name: HealthServiceException
  nameWithType: HealthServiceException
  fullName: Microsoft.Health.HealthServiceException
- uid: Microsoft.Health.ApplicationConnection
  commentId: T:Microsoft.Health.ApplicationConnection
  parent: Microsoft.Health
  isExternal: false
  name: ApplicationConnection
  nameWithType: ApplicationConnection
  fullName: Microsoft.Health.ApplicationConnection
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: Microsoft.Health.HealthRecordItemTypePermission
  commentId: T:Microsoft.Health.HealthRecordItemTypePermission
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordItemTypePermission
  nameWithType: HealthRecordItemTypePermission
  fullName: Microsoft.Health.HealthRecordItemTypePermission
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.QueryPermissionsByTypes*
  commentId: Overload:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.QueryPermissionsByTypes
  isExternal: false
  name: QueryPermissionsByTypes
  nameWithType: HealthVaultPlatformRecord.QueryPermissionsByTypes
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.QueryPermissionsByTypes
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.Collections.Generic.IList{System.Guid}
  commentId: T:System.Collections.Generic.IList{System.Guid}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Guid>
  nameWithType: IList<Guid>
  fullName: System.Collections.Generic.IList<System.Guid>
  nameWithType.vb: IList(Of Guid)
  fullName.vb: System.Collections.Generic.IList(Of System.Guid)
  name.vb: IList(Of Guid)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.Guid,Microsoft.Health.HealthRecordItemTypePermission}
  commentId: T:System.Collections.Generic.IDictionary{System.Guid,Microsoft.Health.HealthRecordItemTypePermission}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<Guid, HealthRecordItemTypePermission>
  nameWithType: IDictionary<Guid, HealthRecordItemTypePermission>
  fullName: System.Collections.Generic.IDictionary<System.Guid, Microsoft.Health.HealthRecordItemTypePermission>
  nameWithType.vb: IDictionary(Of Guid, HealthRecordItemTypePermission)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.Guid, Microsoft.Health.HealthRecordItemTypePermission)
  name.vb: IDictionary(Of Guid, HealthRecordItemTypePermission)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.HealthRecordItemTypePermission
    name: HealthRecordItemTypePermission
    nameWithType: HealthRecordItemTypePermission
    fullName: Microsoft.Health.HealthRecordItemTypePermission
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.HealthRecordItemTypePermission
    name: HealthRecordItemTypePermission
    nameWithType: HealthRecordItemTypePermission
    fullName: Microsoft.Health.HealthRecordItemTypePermission
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.QueryPermissions*
  commentId: Overload:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.QueryPermissions
  isExternal: false
  name: QueryPermissions
  nameWithType: HealthVaultPlatformRecord.QueryPermissions
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.QueryPermissions
- uid: System.Collections.ObjectModel.Collection{Microsoft.Health.HealthRecordItemTypePermission}
  commentId: T:System.Collections.ObjectModel.Collection{Microsoft.Health.HealthRecordItemTypePermission}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.Collection`1
  name: Collection<HealthRecordItemTypePermission>
  nameWithType: Collection<HealthRecordItemTypePermission>
  fullName: System.Collections.ObjectModel.Collection<Microsoft.Health.HealthRecordItemTypePermission>
  nameWithType.vb: Collection(Of HealthRecordItemTypePermission)
  fullName.vb: System.Collections.ObjectModel.Collection(Of Microsoft.Health.HealthRecordItemTypePermission)
  name.vb: Collection(Of HealthRecordItemTypePermission)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.HealthRecordItemTypePermission
    name: HealthRecordItemTypePermission
    nameWithType: HealthRecordItemTypePermission
    fullName: Microsoft.Health.HealthRecordItemTypePermission
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.HealthRecordItemTypePermission
    name: HealthRecordItemTypePermission
    nameWithType: HealthRecordItemTypePermission
    fullName: Microsoft.Health.HealthRecordItemTypePermission
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.Collection`1
  commentId: T:System.Collections.ObjectModel.Collection`1
  isExternal: true
  name: Collection<T>
  nameWithType: Collection<T>
  fullName: System.Collections.ObjectModel.Collection<T>
  nameWithType.vb: Collection(Of T)
  fullName.vb: System.Collections.ObjectModel.Collection(Of T)
  name.vb: Collection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: Microsoft.Health.HealthRecordPermissions
  commentId: T:Microsoft.Health.HealthRecordPermissions
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordPermissions
  nameWithType: HealthRecordPermissions
  fullName: Microsoft.Health.HealthRecordPermissions
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.QueryRecordPermissions*
  commentId: Overload:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.QueryRecordPermissions
  isExternal: false
  name: QueryRecordPermissions
  nameWithType: HealthVaultPlatformRecord.QueryRecordPermissions
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.QueryRecordPermissions
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.GetValidGroupMembership*
  commentId: Overload:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.GetValidGroupMembership
  isExternal: false
  name: GetValidGroupMembership
  nameWithType: HealthVaultPlatformRecord.GetValidGroupMembership
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformRecord.GetValidGroupMembership
- uid: System.Collections.ObjectModel.Collection{Microsoft.Health.HealthRecordItem}
  commentId: T:System.Collections.ObjectModel.Collection{Microsoft.Health.HealthRecordItem}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.Collection`1
  name: Collection<HealthRecordItem>
  nameWithType: Collection<HealthRecordItem>
  fullName: System.Collections.ObjectModel.Collection<Microsoft.Health.HealthRecordItem>
  nameWithType.vb: Collection(Of HealthRecordItem)
  fullName.vb: System.Collections.ObjectModel.Collection(Of Microsoft.Health.HealthRecordItem)
  name.vb: Collection(Of HealthRecordItem)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: )
    nameWithType: )
    fullName: )
