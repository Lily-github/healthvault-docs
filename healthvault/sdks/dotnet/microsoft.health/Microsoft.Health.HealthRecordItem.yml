### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.HealthRecordItem
  commentId: T:Microsoft.Health.HealthRecordItem
  id: HealthRecordItem
  parent: Microsoft.Health
  children:
  - Microsoft.Health.HealthRecordItem.#ctor(System.Guid)
  - Microsoft.Health.HealthRecordItem.#ctor(System.Guid,System.Xml.XPath.IXPathNavigable)
  - Microsoft.Health.HealthRecordItem.CommonData
  - Microsoft.Health.HealthRecordItem.Created
  - Microsoft.Health.HealthRecordItem.Deserialize(System.String)
  - Microsoft.Health.HealthRecordItem.EffectiveDate
  - Microsoft.Health.HealthRecordItem.EffectivePermissions
  - Microsoft.Health.HealthRecordItem.Flags
  - Microsoft.Health.HealthRecordItem.GetBlobStore(Microsoft.Health.HealthRecordAccessor)
  - Microsoft.Health.HealthRecordItem.GetBlobStore(Microsoft.Health.Package.ConnectPackageCreationParameters)
  - Microsoft.Health.HealthRecordItem.GetItemXml
  - Microsoft.Health.HealthRecordItem.GetItemXml(Microsoft.Health.HealthRecordItemSections)
  - Microsoft.Health.HealthRecordItem.GetItemXml(Microsoft.Health.HealthRecordItemSections,System.String)
  - Microsoft.Health.HealthRecordItem.GetItemXml(System.String)
  - Microsoft.Health.HealthRecordItem.GetSizeInBytes
  - Microsoft.Health.HealthRecordItem.HealthRecordItemSignatures
  - Microsoft.Health.HealthRecordItem.IsDownVersioned
  - Microsoft.Health.HealthRecordItem.IsImmutable
  - Microsoft.Health.HealthRecordItem.IsPersonal
  - Microsoft.Health.HealthRecordItem.IsReadOnly
  - Microsoft.Health.HealthRecordItem.IsSignatureValid
  - Microsoft.Health.HealthRecordItem.IsUpVersioned
  - Microsoft.Health.HealthRecordItem.Key
  - Microsoft.Health.HealthRecordItem.LastUpdated
  - Microsoft.Health.HealthRecordItem.ParseXml(System.Xml.XPath.IXPathNavigable)
  - Microsoft.Health.HealthRecordItem.Sections
  - Microsoft.Health.HealthRecordItem.Serialize
  - Microsoft.Health.HealthRecordItem.Sign(System.Security.Cryptography.X509Certificates.X509Certificate2)
  - Microsoft.Health.HealthRecordItem.State
  - Microsoft.Health.HealthRecordItem.Tags
  - Microsoft.Health.HealthRecordItem.TransformedXmlData
  - Microsoft.Health.HealthRecordItem.TypeId
  - Microsoft.Health.HealthRecordItem.TypeName
  - Microsoft.Health.HealthRecordItem.TypeSpecificData
  - Microsoft.Health.HealthRecordItem.UpdatedEndDate
  - Microsoft.Health.HealthRecordItem.ValidateCertificate
  - Microsoft.Health.HealthRecordItem.WriteXml(System.Xml.XmlWriter)
  langs:
  - csharp
  - vb
  name: HealthRecordItem
  nameWithType: HealthRecordItem
  fullName: Microsoft.Health.HealthRecordItem
  type: Class
  source:
    remote:
      path: Microsoft.Health/HealthRecordItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: HealthRecordItem
    path: HealthRecordItem.cs
    startLine: 35
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nRepresents a health record item.\n"
  remarks: "\nA health record item is a single piece of data in a health record \nthat is accessible through the HealthVault service. Examples of health \nrecord items include a blood pressure measurement, an exercise session, \nor an insurance claim.\n<br /><br />\nHealth record items are typed and have XML data that adheres to the \nschema for the type.\n"
  example: []
  syntax:
    content: public class HealthRecordItem
    content.vb: Public Class HealthRecordItem
  inheritance:
  - System.Object
  derivedClasses:
  - Microsoft.Health.ItemTypes.PasswordProtectedPackage
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.HealthRecordItem.#ctor(System.Guid)
  commentId: M:Microsoft.Health.HealthRecordItem.#ctor(System.Guid)
  id: '#ctor(System.Guid)'
  parent: Microsoft.Health.HealthRecordItem
  langs:
  - csharp
  - vb
  name: HealthRecordItem(Guid)
  nameWithType: HealthRecordItem.HealthRecordItem(Guid)
  fullName: Microsoft.Health.HealthRecordItem.HealthRecordItem(System.Guid)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health/HealthRecordItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: HealthRecordItem.cs
    startLine: 46
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nDerived classes must call this method when their default \nconstructor is called.\n"
  example: []
  syntax:
    content: protected HealthRecordItem(Guid typeId)
    content.vb: Protected Sub New(typeId As Guid)
    parameters:
    - id: typeId
      type: System.Guid
      description: "\nThe unique identifier of the type of which the item is an instance.\n"
  overload: Microsoft.Health.HealthRecordItem.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.Health.HealthRecordItem.#ctor(System.Guid,System.Xml.XPath.IXPathNavigable)
  commentId: M:Microsoft.Health.HealthRecordItem.#ctor(System.Guid,System.Xml.XPath.IXPathNavigable)
  id: '#ctor(System.Guid,System.Xml.XPath.IXPathNavigable)'
  parent: Microsoft.Health.HealthRecordItem
  langs:
  - csharp
  - vb
  name: HealthRecordItem(Guid, IXPathNavigable)
  nameWithType: HealthRecordItem.HealthRecordItem(Guid, IXPathNavigable)
  fullName: Microsoft.Health.HealthRecordItem.HealthRecordItem(System.Guid, System.Xml.XPath.IXPathNavigable)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health/HealthRecordItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: HealthRecordItem.cs
    startLine: 71
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nCreates a new instance of the <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref> class \nwith the specified type identifier and type-specific data.\n"
  remarks: "\nThis constructor is reserved for when there are no derived\nclasses for the item type being created. In most situations, use the\nderived type constructor.\n"
  example: []
  syntax:
    content: public HealthRecordItem(Guid typeId, IXPathNavigable typeSpecificData)
    content.vb: Public Sub New(typeId As Guid, typeSpecificData As IXPathNavigable)
    parameters:
    - id: typeId
      type: System.Guid
      description: "\nThe unique identifier for the item type.\n"
    - id: typeSpecificData
      type: System.Xml.XPath.IXPathNavigable
      description: "\nThe type-specific data XML for the item. \n"
  overload: Microsoft.Health.HealthRecordItem.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordItem.ParseXml(System.Xml.XPath.IXPathNavigable)
  commentId: M:Microsoft.Health.HealthRecordItem.ParseXml(System.Xml.XPath.IXPathNavigable)
  id: ParseXml(System.Xml.XPath.IXPathNavigable)
  parent: Microsoft.Health.HealthRecordItem
  langs:
  - csharp
  - vb
  name: ParseXml(IXPathNavigable)
  nameWithType: HealthRecordItem.ParseXml(IXPathNavigable)
  fullName: Microsoft.Health.HealthRecordItem.ParseXml(System.Xml.XPath.IXPathNavigable)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ParseXml
    path: HealthRecordItem.cs
    startLine: 92
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nParses the type-specific XML data for the item.\n"
  remarks: "\nDerived classes should override this method and populate their\nmembers with the data from the XML.\n<br /><br />\nThe default implementation does nothing.\n"
  example: []
  syntax:
    content: protected virtual void ParseXml(IXPathNavigable typeSpecificXml)
    content.vb: Protected Overridable Sub ParseXml(typeSpecificXml As IXPathNavigable)
    parameters:
    - id: typeSpecificXml
      type: System.Xml.XPath.IXPathNavigable
      description: "\nThe type-specific data XML for the item.\n"
  overload: Microsoft.Health.HealthRecordItem.ParseXml*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.Health.HealthRecordItem.WriteXml(System.Xml.XmlWriter)
  commentId: M:Microsoft.Health.HealthRecordItem.WriteXml(System.Xml.XmlWriter)
  id: WriteXml(System.Xml.XmlWriter)
  parent: Microsoft.Health.HealthRecordItem
  langs:
  - csharp
  - vb
  name: WriteXml(XmlWriter)
  nameWithType: HealthRecordItem.WriteXml(XmlWriter)
  fullName: Microsoft.Health.HealthRecordItem.WriteXml(System.Xml.XmlWriter)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: WriteXml
    path: HealthRecordItem.cs
    startLine: 113
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nWrites the XML for the type-specific data of the item to the\nspecified XmlWriter.\n"
  remarks: "\nDerived classes should override this method and write the type-\nspecific XML which goes in the data-xml section of the item.\n<br /><br />\nThe default implementation writes the XML in the \n<xref href=\"Microsoft.Health.HealthRecordItem.TypeSpecificData\" data-throw-if-not-resolved=\"false\"></xref> property to the specified writer.\n"
  example: []
  syntax:
    content: public virtual void WriteXml(XmlWriter writer)
    content.vb: Public Overridable Sub WriteXml(writer As XmlWriter)
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "\nThe XmlWriter that receives the type-specific data.\n"
  overload: Microsoft.Health.HealthRecordItem.WriteXml*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.Health.HealthRecordItem.Sign(System.Security.Cryptography.X509Certificates.X509Certificate2)
  commentId: M:Microsoft.Health.HealthRecordItem.Sign(System.Security.Cryptography.X509Certificates.X509Certificate2)
  id: Sign(System.Security.Cryptography.X509Certificates.X509Certificate2)
  parent: Microsoft.Health.HealthRecordItem
  langs:
  - csharp
  - vb
  name: Sign(X509Certificate2)
  nameWithType: HealthRecordItem.Sign(X509Certificate2)
  fullName: Microsoft.Health.HealthRecordItem.Sign(System.Security.Cryptography.X509Certificates.X509Certificate2)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Sign
    path: HealthRecordItem.cs
    startLine: 171
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nSigns the <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref> with a digital signature.\n"
  remarks: "\nCreates an instance of <xref href=\"Microsoft.Health.HealthRecordItemSignature\" data-throw-if-not-resolved=\"false\"></xref> and calls its Sign method.\n"
  example: []
  syntax:
    content: public void Sign(X509Certificate2 signingCertificate)
    content.vb: Public Sub Sign(signingCertificate As X509Certificate2)
    parameters:
    - id: signingCertificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate2
      description: "\nAn X509 certificate. The private key from the certificate is used to sign the\n<xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  overload: Microsoft.Health.HealthRecordItem.Sign*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe specified argument is null.\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref> is already signed and may only have one signature.\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\nThere is a load or parse error in the XML.\n"
  - type: Microsoft.Health.SignatureFailureException
    commentId: T:Microsoft.Health.SignatureFailureException
    description: "\nSigning failed. See the inner exception.\nThe inner exception may be one of the following:\nAn <xref href=\"System.Xml.XmlException\" data-throw-if-not-resolved=\"false\"></xref> is thrown because there is a load or parse error loading \nthe xsl.\nA CryptographicException is thrown because the nodelist from the xsl does not contain \nan <xref href=\"System.Security.Cryptography.Xml.XmlDsigXsltTransform\" data-throw-if-not-resolved=\"false\"></xref> object.\nA <xref href=\"System.Security.Cryptography.CryptographicException\" data-throw-if-not-resolved=\"false\"></xref> is thrown because signingCertificate.PrivateKey \nis not an RSA or DSA key, or is unreadable.\nA <xref href=\"System.Security.Cryptography.CryptographicException\" data-throw-if-not-resolved=\"false\"></xref> is thrown because signingCertificate.PrivateKey \nis not a DSA or RSA object.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordItem.IsSignatureValid
  commentId: M:Microsoft.Health.HealthRecordItem.IsSignatureValid
  id: IsSignatureValid
  parent: Microsoft.Health.HealthRecordItem
  langs:
  - csharp
  - vb
  name: IsSignatureValid()
  nameWithType: HealthRecordItem.IsSignatureValid()
  fullName: Microsoft.Health.HealthRecordItem.IsSignatureValid()
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IsSignatureValid
    path: HealthRecordItem.cs
    startLine: 256
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nChecks if the health record item's signature is valid.\n"
  remarks: "\nVerifies that the signature on the item is valid for the XML representation of the \nitem as retrieved from the HealthVault service.\n<br /><br />\nThis method will always verify against the underlying XML of this item as returned \nfrom the service, even if local modifications are made to the item. In the case \nof new items that have not yet been created in the HealthVault service, this method \nvalidates the signature against the XML of the item at the time of signing.\n<br /><br />\nFor more information about XML digital signatures see: \n<xref href=\"System.Security.Cryptography.Xml\" data-throw-if-not-resolved=\"false\"></xref>. \n"
  example: []
  syntax:
    content: >-
      [SecurityCritical]

      public bool IsSignatureValid()
    content.vb: >-
      <SecurityCritical>

      Public Function IsSignatureValid As Boolean
    return:
      type: System.Boolean
      description: "\n<strong>true</strong> if the signature is valid against the XML representation of the item \nreturned from the service, or for new items, if the signature is valid against\nthe XML of the item at the time the item was signed. Returns <strong>false</strong> if the \nsignature could not be validated.\n"
  overload: Microsoft.Health.HealthRecordItem.IsSignatureValid*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe signature could not be validated because the <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref> is not \nsigned.\n"
  - type: Microsoft.Health.SignatureFailureException
    commentId: T:Microsoft.Health.SignatureFailureException
    description: "\nSignature validation failed becaue either the \n<xref href=\"Microsoft.Health.HealthRecordItemSignatureMethod\" data-throw-if-not-resolved=\"false\"></xref> of this item is unknown and cannot be\nvalidated, or the integrity of the signature could not be verified in which case the \ninner exception contains details on the reasons why.\nThe inner exception is <xref href=\"System.Security.Cryptography.CryptographicException\" data-throw-if-not-resolved=\"false\"></xref>, thrown because of one of:\nThe SignatureAlgorithm property of the public key in the \nsignature does not match the SignatureMethod property.\nThe signature description could not be created.\nThe hash algorithm could not be created. \n"
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordItem.ValidateCertificate
  commentId: M:Microsoft.Health.HealthRecordItem.ValidateCertificate
  id: ValidateCertificate
  parent: Microsoft.Health.HealthRecordItem
  langs:
  - csharp
  - vb
  name: ValidateCertificate()
  nameWithType: HealthRecordItem.ValidateCertificate()
  fullName: Microsoft.Health.HealthRecordItem.ValidateCertificate()
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ValidateCertificate
    path: HealthRecordItem.cs
    startLine: 428
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nChecks if the certificates are valid.\n"
  remarks: "\nValidates the certificates of each signature on the <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [SecurityCritical]

      public void ValidateCertificate()
    content.vb: >-
      <SecurityCritical>

      Public Sub ValidateCertificate
  overload: Microsoft.Health.HealthRecordItem.ValidateCertificate*
  exceptions:
  - type: Microsoft.Health.CertificateValidationException
    commentId: T:Microsoft.Health.CertificateValidationException
    description: "\nCertificate validation failed.\nThere may be an inner exception is <xref href=\"System.Security.Cryptography.CryptographicException\" data-throw-if-not-resolved=\"false\"></xref>, thrown because\nof:\nThe certificate is unreadable. \nIf there is no inner exception, there will be a string with info about the certificate\nand the error.\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe certificate could not be validated because the <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref> is \nnot signed.\n"
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordItem.Key
  commentId: P:Microsoft.Health.HealthRecordItem.Key
  id: Key
  parent: Microsoft.Health.HealthRecordItem
  langs:
  - csharp
  - vb
  name: Key
  nameWithType: HealthRecordItem.Key
  fullName: Microsoft.Health.HealthRecordItem.Key
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Key
    path: HealthRecordItem.cs
    startLine: 455
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the key of the health record item.\n"
  remarks: "\nThis is the only property that\nis guaranteed to be available regardless of how \n<xref href=\"Microsoft.Health.HealthRecordItem.Sections\" data-throw-if-not-resolved=\"false\"></xref> is set.\n"
  example: []
  syntax:
    content: public HealthRecordItemKey Key { get; }
    content.vb: Public ReadOnly Property Key As HealthRecordItemKey
    parameters: []
    return:
      type: Microsoft.Health.HealthRecordItemKey
      description: "\nA globally unique identifier for the item issued when the item is \ncreated and a globally unique version stamp updated every time \nthe item is changed.\n"
  overload: Microsoft.Health.HealthRecordItem.Key*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthRecordItem.TypeId
  commentId: P:Microsoft.Health.HealthRecordItem.TypeId
  id: TypeId
  parent: Microsoft.Health.HealthRecordItem
  langs:
  - csharp
  - vb
  name: TypeId
  nameWithType: HealthRecordItem.TypeId
  fullName: Microsoft.Health.HealthRecordItem.TypeId
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: TypeId
    path: HealthRecordItem.cs
    startLine: 477
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the type identifier for the health record item type.\n"
  remarks: "\nThe types available can be queried using  \n<xref href=\"Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Guid%2cMicrosoft.Health.HealthServiceConnection)\" data-throw-if-not-resolved=\"false\"></xref>\n.\n"
  example: []
  syntax:
    content: public Guid TypeId { get; }
    content.vb: Public ReadOnly Property TypeId As Guid
    parameters: []
    return:
      type: System.Guid
      description: "\nA globally unique identifier for the type of the item.\n"
  overload: Microsoft.Health.HealthRecordItem.TypeId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthRecordItem.TypeName
  commentId: P:Microsoft.Health.HealthRecordItem.TypeName
  id: TypeName
  parent: Microsoft.Health.HealthRecordItem
  langs:
  - csharp
  - vb
  name: TypeName
  nameWithType: HealthRecordItem.TypeName
  fullName: Microsoft.Health.HealthRecordItem.TypeName
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: TypeName
    path: HealthRecordItem.cs
    startLine: 495
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the health record item type name.\n"
  remarks: "\nThe types and names of types available can be queried using \n<xref href=\"Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Guid%2cMicrosoft.Health.HealthServiceConnection)\" data-throw-if-not-resolved=\"false\"></xref>\n.\n"
  example: []
  syntax:
    content: public string TypeName { get; }
    content.vb: Public ReadOnly Property TypeName As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Health.HealthRecordItem.TypeName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthRecordItem.EffectiveDate
  commentId: P:Microsoft.Health.HealthRecordItem.EffectiveDate
  id: EffectiveDate
  parent: Microsoft.Health.HealthRecordItem
  langs:
  - csharp
  - vb
  name: EffectiveDate
  nameWithType: HealthRecordItem.EffectiveDate
  fullName: Microsoft.Health.HealthRecordItem.EffectiveDate
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: EffectiveDate
    path: HealthRecordItem.cs
    startLine: 519
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets or sets the date and time that the health record item data was taken.\n"
  remarks: "\nThis might not be the same time that the data was entered\ninto the system.\n<br /><br />\nThis data value is only available when the\n<xref href=\"Microsoft.Health.HealthRecordItem.Sections\" data-throw-if-not-resolved=\"false\"></xref> show the\n<xref href=\"Microsoft.Health.HealthRecordItemSections.Core\" data-throw-if-not-resolved=\"false\"></xref> bit\nset.       \n"
  example: []
  syntax:
    content: public DateTime EffectiveDate { get; set; }
    content.vb: Public Property EffectiveDate As Date
    parameters: []
    return:
      type: System.DateTime
  overload: Microsoft.Health.HealthRecordItem.EffectiveDate*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordItem.State
  commentId: P:Microsoft.Health.HealthRecordItem.State
  id: State
  parent: Microsoft.Health.HealthRecordItem
  langs:
  - csharp
  - vb
  name: State
  nameWithType: HealthRecordItem.State
  fullName: Microsoft.Health.HealthRecordItem.State
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: State
    path: HealthRecordItem.cs
    startLine: 544
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the state of the <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\n<xref href=\"Microsoft.Health.HealthRecordItem.Sections\" data-throw-if-not-resolved=\"false\"></xref> show the\n<xref href=\"Microsoft.Health.HealthRecordItemSections.Core\" data-throw-if-not-resolved=\"false\"></xref> bit\nset.       \n"
  example: []
  syntax:
    content: public HealthRecordItemState State { get; }
    content.vb: Public ReadOnly Property State As HealthRecordItemState
    parameters: []
    return:
      type: Microsoft.Health.HealthRecordItemState
  overload: Microsoft.Health.HealthRecordItem.State*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthRecordItem.Flags
  commentId: P:Microsoft.Health.HealthRecordItem.Flags
  id: Flags
  parent: Microsoft.Health.HealthRecordItem
  langs:
  - csharp
  - vb
  name: Flags
  nameWithType: HealthRecordItem.Flags
  fullName: Microsoft.Health.HealthRecordItem.Flags
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Flags
    path: HealthRecordItem.cs
    startLine: 561
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref> flags.\n"
  remarks: "\n<xref href=\"Microsoft.Health.HealthRecordItem.Sections\" data-throw-if-not-resolved=\"false\"></xref> show the\n<xref href=\"Microsoft.Health.HealthRecordItemSections.Core\" data-throw-if-not-resolved=\"false\"></xref> bit\nset.       \n"
  example: []
  syntax:
    content: public HealthRecordItemFlags Flags { get; set; }
    content.vb: Public Property Flags As HealthRecordItemFlags
    parameters: []
    return:
      type: Microsoft.Health.HealthRecordItemFlags
  overload: Microsoft.Health.HealthRecordItem.Flags*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordItem.IsPersonal
  commentId: P:Microsoft.Health.HealthRecordItem.IsPersonal
  id: IsPersonal
  parent: Microsoft.Health.HealthRecordItem
  langs:
  - csharp
  - vb
  name: IsPersonal
  nameWithType: HealthRecordItem.IsPersonal
  fullName: Microsoft.Health.HealthRecordItem.IsPersonal
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IsPersonal
    path: HealthRecordItem.cs
    startLine: 590
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets or sets the value indicating if the <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref> is private.\n"
  remarks: "\nPrivate items are accessible only by custodians.\n<xref href=\"Microsoft.Health.HealthRecordItem.Sections\" data-throw-if-not-resolved=\"false\"></xref> show the\n<xref href=\"Microsoft.Health.HealthRecordItemSections.Core\" data-throw-if-not-resolved=\"false\"></xref> bit\nset.       \n"
  example: []
  syntax:
    content: public bool IsPersonal { get; set; }
    content.vb: Public Property IsPersonal As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.Health.HealthRecordItem.IsPersonal*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordItem.IsDownVersioned
  commentId: P:Microsoft.Health.HealthRecordItem.IsDownVersioned
  id: IsDownVersioned
  parent: Microsoft.Health.HealthRecordItem
  langs:
  - csharp
  - vb
  name: IsDownVersioned
  nameWithType: HealthRecordItem.IsDownVersioned
  fullName: Microsoft.Health.HealthRecordItem.IsDownVersioned
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IsDownVersioned
    path: HealthRecordItem.cs
    startLine: 615
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the value indicating if the <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref> is down-versioned.\n"
  remarks: "\nIf this value is true then an attempt to update the <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref>\nwill fail.\n"
  example: []
  syntax:
    content: public bool IsDownVersioned { get; }
    content.vb: Public ReadOnly Property IsDownVersioned As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.Health.HealthRecordItem.IsDownVersioned*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthRecordItem.IsUpVersioned
  commentId: P:Microsoft.Health.HealthRecordItem.IsUpVersioned
  id: IsUpVersioned
  parent: Microsoft.Health.HealthRecordItem
  langs:
  - csharp
  - vb
  name: IsUpVersioned
  nameWithType: HealthRecordItem.IsUpVersioned
  fullName: Microsoft.Health.HealthRecordItem.IsUpVersioned
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IsUpVersioned
    path: HealthRecordItem.cs
    startLine: 630
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the value indicating if the <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref> is up-versioned.\n"
  remarks: "\nIf this value is true then an application should get explicit permission to update the\ninstance from the user. This will cause the stored instance to be converted to the \ntype version which may cause data loss in some cases.\n"
  example: []
  syntax:
    content: public bool IsUpVersioned { get; }
    content.vb: Public ReadOnly Property IsUpVersioned As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.Health.HealthRecordItem.IsUpVersioned*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthRecordItem.UpdatedEndDate
  commentId: P:Microsoft.Health.HealthRecordItem.UpdatedEndDate
  id: UpdatedEndDate
  parent: Microsoft.Health.HealthRecordItem
  langs:
  - csharp
  - vb
  name: UpdatedEndDate
  nameWithType: HealthRecordItem.UpdatedEndDate
  fullName: Microsoft.Health.HealthRecordItem.UpdatedEndDate
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: UpdatedEndDate
    path: HealthRecordItem.cs
    startLine: 644
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets or sets the date when HealthRecordItem is not relevant.\n"
  remarks: "\nThis data value is only available when the\n<xref href=\"Microsoft.Health.HealthRecordItem.Sections\" data-throw-if-not-resolved=\"false\"></xref> show the\n<xref href=\"Microsoft.Health.HealthRecordItemSections.Core\" data-throw-if-not-resolved=\"false\"></xref> bit\nset.\n"
  example: []
  syntax:
    content: public DateTime UpdatedEndDate { get; set; }
    content.vb: Public Property UpdatedEndDate As Date
    parameters: []
    return:
      type: System.DateTime
  overload: Microsoft.Health.HealthRecordItem.UpdatedEndDate*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordItem.LastUpdated
  commentId: P:Microsoft.Health.HealthRecordItem.LastUpdated
  id: LastUpdated
  parent: Microsoft.Health.HealthRecordItem
  langs:
  - csharp
  - vb
  name: LastUpdated
  nameWithType: HealthRecordItem.LastUpdated
  fullName: Microsoft.Health.HealthRecordItem.LastUpdated
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: LastUpdated
    path: HealthRecordItem.cs
    startLine: 682
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the audit information associated with the last update of\nthis health record item.\n"
  remarks: "\nIt is the responsibility of the application to convert the audit time\nto local time if necessary.\n<br /><br />\nThis data value is only available when the\n<xref href=\"Microsoft.Health.HealthRecordItem.Sections\" data-throw-if-not-resolved=\"false\"></xref> show the\n<xref href=\"Microsoft.Health.HealthRecordItemSections.Audits\" data-throw-if-not-resolved=\"false\"></xref> bit\nset.\n"
  example: []
  syntax:
    content: public HealthServiceAudit LastUpdated { get; }
    content.vb: Public ReadOnly Property LastUpdated As HealthServiceAudit
    parameters: []
    return:
      type: Microsoft.Health.HealthServiceAudit
  overload: Microsoft.Health.HealthRecordItem.LastUpdated*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthRecordItem.Created
  commentId: P:Microsoft.Health.HealthRecordItem.Created
  id: Created
  parent: Microsoft.Health.HealthRecordItem
  langs:
  - csharp
  - vb
  name: Created
  nameWithType: HealthRecordItem.Created
  fullName: Microsoft.Health.HealthRecordItem.Created
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Created
    path: HealthRecordItem.cs
    startLine: 704
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the audit information associated with the creation of\nthis health record item.\n"
  remarks: "\nIt is the responsibility of the application to convert the audit time\nto local time if necessary.\n<br /><br />\nThis data value is only available when the\n<xref href=\"Microsoft.Health.HealthRecordItem.Sections\" data-throw-if-not-resolved=\"false\"></xref> show the\n<xref href=\"Microsoft.Health.HealthRecordItemSections.Audits\" data-throw-if-not-resolved=\"false\"></xref> bit\nset.\n"
  example: []
  syntax:
    content: public HealthServiceAudit Created { get; }
    content.vb: Public ReadOnly Property Created As HealthServiceAudit
    parameters: []
    return:
      type: Microsoft.Health.HealthServiceAudit
  overload: Microsoft.Health.HealthRecordItem.Created*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthRecordItem.EffectivePermissions
  commentId: P:Microsoft.Health.HealthRecordItem.EffectivePermissions
  id: EffectivePermissions
  parent: Microsoft.Health.HealthRecordItem
  langs:
  - csharp
  - vb
  name: EffectivePermissions
  nameWithType: HealthRecordItem.EffectivePermissions
  fullName: Microsoft.Health.HealthRecordItem.EffectivePermissions
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: EffectivePermissions
    path: HealthRecordItem.cs
    startLine: 732
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the effective permissions on the item granted to the person \nretrieving the <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nThis data value is only available when the\n<xref href=\"Microsoft.Health.HealthRecordItem.Sections\" data-throw-if-not-resolved=\"false\"></xref> show the\n<xref href=\"Microsoft.Health.HealthRecordItemSections.EffectivePermissions\" data-throw-if-not-resolved=\"false\"></xref> \nbit set.\n"
  example: []
  syntax:
    content: public HealthRecordItemPermissions? EffectivePermissions { get; }
    content.vb: Public ReadOnly Property EffectivePermissions As HealthRecordItemPermissions?
    parameters: []
    return:
      type: System.Nullable{Microsoft.Health.HealthRecordItemPermissions}
      description: "\nIf the permissions are unknown, the value is <strong>null</strong>; otherwise\nthe appropriate permissions are returned.\n"
  overload: Microsoft.Health.HealthRecordItem.EffectivePermissions*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthRecordItem.IsImmutable
  commentId: P:Microsoft.Health.HealthRecordItem.IsImmutable
  id: IsImmutable
  parent: Microsoft.Health.HealthRecordItem
  langs:
  - csharp
  - vb
  name: IsImmutable
  nameWithType: HealthRecordItem.IsImmutable
  fullName: Microsoft.Health.HealthRecordItem.IsImmutable
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IsImmutable
    path: HealthRecordItem.cs
    startLine: 755
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets a value indicating whether the <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref> \nis immutable.\n"
  remarks: "\nThis data value is only available when the\n<xref href=\"Microsoft.Health.HealthRecordItem.Sections\" data-throw-if-not-resolved=\"false\"></xref> show the\n<xref href=\"Microsoft.Health.HealthRecordItemSections.EffectivePermissions\" data-throw-if-not-resolved=\"false\"></xref> \nbit set. Returns true if either Thing Type is immutable or Thing instance is read-only.\n"
  example: []
  syntax:
    content: public bool IsImmutable { get; }
    content.vb: Public ReadOnly Property IsImmutable As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<strong>true</strong> if the <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref> is immutable; otherwise,\n<strong>false</strong>.\n"
  overload: Microsoft.Health.HealthRecordItem.IsImmutable*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthRecordItem.IsReadOnly
  commentId: P:Microsoft.Health.HealthRecordItem.IsReadOnly
  id: IsReadOnly
  parent: Microsoft.Health.HealthRecordItem
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: HealthRecordItem.IsReadOnly
  fullName: Microsoft.Health.HealthRecordItem.IsReadOnly
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IsReadOnly
    path: HealthRecordItem.cs
    startLine: 776
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets a value indicating whether <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref> is read-only.\n"
  remarks: "\nReturns true if either Thing Type is immutable or Thing instance is read-only \nbut sets only the instance immutability.\n"
  example: []
  syntax:
    content: public bool IsReadOnly { get; set; }
    content.vb: Public Property IsReadOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<strong>true</strong> if the <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref> is read-only; otherwise,\n<strong>false</strong>.\n"
  overload: Microsoft.Health.HealthRecordItem.IsReadOnly*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nCannot change read-only flag to false if it is already true.\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordItem.TypeSpecificData
  commentId: P:Microsoft.Health.HealthRecordItem.TypeSpecificData
  id: TypeSpecificData
  parent: Microsoft.Health.HealthRecordItem
  langs:
  - csharp
  - vb
  name: TypeSpecificData
  nameWithType: HealthRecordItem.TypeSpecificData
  fullName: Microsoft.Health.HealthRecordItem.TypeSpecificData
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: TypeSpecificData
    path: HealthRecordItem.cs
    startLine: 820
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets or sets the XML representation of the type-specific data for the \n<xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nThis data might contain data from other applications that also work\nwith the same type of data. Take care not to overwrite\nexisting data when making updates. Do not remove or manipulate\nelements in the XML that you do not understand.\n<br /><br />\nIf this property is set on a type derived from <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref> the data\nis not parsed into the object model so properties of the class may still show old data.\n<br /><br />\nThis data value is only available to get when the\n<xref href=\"Microsoft.Health.HealthRecordItem.Sections\" data-throw-if-not-resolved=\"false\"></xref> show the\n<xref href=\"Microsoft.Health.HealthRecordItemSections.Xml\" data-throw-if-not-resolved=\"false\"></xref> bit\nset.\n"
  example: []
  syntax:
    content: public IXPathNavigable TypeSpecificData { get; set; }
    content.vb: Public Property TypeSpecificData As IXPathNavigable
    parameters: []
    return:
      type: System.Xml.XPath.IXPathNavigable
  overload: Microsoft.Health.HealthRecordItem.TypeSpecificData*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordItem.TransformedXmlData
  commentId: P:Microsoft.Health.HealthRecordItem.TransformedXmlData
  id: TransformedXmlData
  parent: Microsoft.Health.HealthRecordItem
  langs:
  - csharp
  - vb
  name: TransformedXmlData
  nameWithType: HealthRecordItem.TransformedXmlData
  fullName: Microsoft.Health.HealthRecordItem.TransformedXmlData
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: TransformedXmlData
    path: HealthRecordItem.cs
    startLine: 844
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the transformed XML data of the <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nTransformed XML data is provided if you so specify in \n<xref href=\"Microsoft.Health.HealthRecordSearcher\" data-throw-if-not-resolved=\"false\"></xref>. The dictionary values are \nindexed by the name of the transform that was specified when the \nsearch was performed.\n<br /><br />\nThis data value is only available to get when the\n<xref href=\"Microsoft.Health.HealthRecordItem.Sections\" data-throw-if-not-resolved=\"false\"></xref> show the\n<xref href=\"Microsoft.Health.HealthRecordItemSections.Xml\" data-throw-if-not-resolved=\"false\"></xref> bit\nset though it will not contain data unless a transform was \nspecified when getting the item.\n"
  example: []
  syntax:
    content: public IDictionary<string, XmlDocument> TransformedXmlData { get; }
    content.vb: Public ReadOnly Property TransformedXmlData As IDictionary(Of String, XmlDocument)
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Xml.XmlDocument}
  overload: Microsoft.Health.HealthRecordItem.TransformedXmlData*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthRecordItem.CommonData
  commentId: P:Microsoft.Health.HealthRecordItem.CommonData
  id: CommonData
  parent: Microsoft.Health.HealthRecordItem
  langs:
  - csharp
  - vb
  name: CommonData
  nameWithType: HealthRecordItem.CommonData
  fullName: Microsoft.Health.HealthRecordItem.CommonData
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CommonData
    path: HealthRecordItem.cs
    startLine: 864
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the common data for the <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nThe common data includes notes, source, and extensions.\n"
  example: []
  syntax:
    content: public CommonItemData CommonData { get; }
    content.vb: Public ReadOnly Property CommonData As CommonItemData
    parameters: []
    return:
      type: Microsoft.Health.CommonItemData
      description: "\nAn instance of <xref href=\"Microsoft.Health.CommonItemData\" data-throw-if-not-resolved=\"false\"></xref> for the \n<xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  overload: Microsoft.Health.HealthRecordItem.CommonData*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthRecordItem.GetBlobStore(Microsoft.Health.HealthRecordAccessor)
  commentId: M:Microsoft.Health.HealthRecordItem.GetBlobStore(Microsoft.Health.HealthRecordAccessor)
  id: GetBlobStore(Microsoft.Health.HealthRecordAccessor)
  parent: Microsoft.Health.HealthRecordItem
  langs:
  - csharp
  - vb
  name: GetBlobStore(HealthRecordAccessor)
  nameWithType: HealthRecordItem.GetBlobStore(HealthRecordAccessor)
  fullName: Microsoft.Health.HealthRecordItem.GetBlobStore(Microsoft.Health.HealthRecordAccessor)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetBlobStore
    path: HealthRecordItem.cs
    startLine: 903
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the BLOB store for this health record item.\n"
  remarks: "\nThis method replaces the previous OtherData property. All binary data is now created,\nupdated, and retrieved through <xref href=\"Microsoft.Health.BlobStore\" data-throw-if-not-resolved=\"false\"></xref> instance associated with the\n<xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref>.<br />\n<br />\nGetBlobStore will return an empty store on an existing <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref>\nif <xref href=\"Microsoft.Health.HealthRecordItemSections.BlobPayload\" data-throw-if-not-resolved=\"false\"></xref> is not specified when retrieving\nthe item. In this case it is possible to overwrite or remove existing Blobs in the\n<xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref> instance stored in HealthVault by using the same name\nas the existing Blob. It is recommended that if you are going to be manipulating \nBlobs in the BlobStore, that you specify\n<xref href=\"Microsoft.Health.HealthRecordItemSections.BlobPayload\" data-throw-if-not-resolved=\"false\"></xref> when retrieving the item.\n"
  example: []
  syntax:
    content: public BlobStore GetBlobStore(HealthRecordAccessor record)
    content.vb: Public Function GetBlobStore(record As HealthRecordAccessor) As BlobStore
    parameters:
    - id: record
      type: Microsoft.Health.HealthRecordAccessor
      description: "\nThe <xref href=\"Microsoft.Health.HealthRecordAccessor\" data-throw-if-not-resolved=\"false\"></xref> that any BLOB data will be written to. This parameter\nmay be <strong>null</strong> if only read access is required or the BLOB data to be written is \nfor a <xref href=\"Microsoft.Health.Package.ConnectPackage\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    return:
      type: Microsoft.Health.BlobStore
      description: "\nA <xref href=\"Microsoft.Health.BlobStore\" data-throw-if-not-resolved=\"false\"></xref> instance related to this health record item.\n"
  overload: Microsoft.Health.HealthRecordItem.GetBlobStore*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordItem.GetBlobStore(Microsoft.Health.Package.ConnectPackageCreationParameters)
  commentId: M:Microsoft.Health.HealthRecordItem.GetBlobStore(Microsoft.Health.Package.ConnectPackageCreationParameters)
  id: GetBlobStore(Microsoft.Health.Package.ConnectPackageCreationParameters)
  parent: Microsoft.Health.HealthRecordItem
  langs:
  - csharp
  - vb
  name: GetBlobStore(ConnectPackageCreationParameters)
  nameWithType: HealthRecordItem.GetBlobStore(ConnectPackageCreationParameters)
  fullName: Microsoft.Health.HealthRecordItem.GetBlobStore(Microsoft.Health.Package.ConnectPackageCreationParameters)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetBlobStore
    path: HealthRecordItem.cs
    startLine: 946
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the BLOB store for this health record item.\n"
  remarks: "\nThis method replaces the previous OtherData property. All binary data is now created,\nupdated, and retrieved through <xref href=\"Microsoft.Health.BlobStore\" data-throw-if-not-resolved=\"false\"></xref> instance associated with the\n<xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref>.<br />\n<br />\nGetBlobStore will return an empty store on an existing <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref>\nif <xref href=\"Microsoft.Health.HealthRecordItemSections.BlobPayload\" data-throw-if-not-resolved=\"false\"></xref> is not specified when retrieving\nthe item. In this case it is possible to overwrite or remove existing Blobs in the\n<xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref> instance stored in HealthVault by using the same name\nas the existing Blob. It is recommended that if you are going to be manipulating \nBlobs in the BlobStore, that you specify\n<xref href=\"Microsoft.Health.HealthRecordItemSections.BlobPayload\" data-throw-if-not-resolved=\"false\"></xref> when retrieving the item.\n"
  example: []
  syntax:
    content: public BlobStore GetBlobStore(ConnectPackageCreationParameters connectPackageParameters)
    content.vb: Public Function GetBlobStore(connectPackageParameters As ConnectPackageCreationParameters) As BlobStore
    parameters:
    - id: connectPackageParameters
      type: Microsoft.Health.Package.ConnectPackageCreationParameters
      description: "\nThe <xref href=\"Microsoft.Health.Package.ConnectPackageCreationParameters\" data-throw-if-not-resolved=\"false\"></xref> that define \nthe <xref href=\"Microsoft.Health.Package.ConnectPackage\" data-throw-if-not-resolved=\"false\"></xref> to which any BLOB data will be written to.\n"
    return:
      type: Microsoft.Health.BlobStore
      description: "\nA <xref href=\"Microsoft.Health.BlobStore\" data-throw-if-not-resolved=\"false\"></xref> instance related to this health record item.\n"
  overload: Microsoft.Health.HealthRecordItem.GetBlobStore*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connectPackageParameters</span> is <strong>null</strong>.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordItem.Tags
  commentId: P:Microsoft.Health.HealthRecordItem.Tags
  id: Tags
  parent: Microsoft.Health.HealthRecordItem
  langs:
  - csharp
  - vb
  name: Tags
  nameWithType: HealthRecordItem.Tags
  fullName: Microsoft.Health.HealthRecordItem.Tags
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Tags
    path: HealthRecordItem.cs
    startLine: 972
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the list of tags on the <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Collection<string> Tags { get; }
    content.vb: Public ReadOnly Property Tags As Collection(Of String)
    parameters: []
    return:
      type: System.Collections.ObjectModel.Collection{System.String}
      description: "\nA string representing the tag list.\n"
  overload: Microsoft.Health.HealthRecordItem.Tags*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthRecordItem.HealthRecordItemSignatures
  commentId: P:Microsoft.Health.HealthRecordItem.HealthRecordItemSignatures
  id: HealthRecordItemSignatures
  parent: Microsoft.Health.HealthRecordItem
  langs:
  - csharp
  - vb
  name: HealthRecordItemSignatures
  nameWithType: HealthRecordItem.HealthRecordItemSignatures
  fullName: Microsoft.Health.HealthRecordItem.HealthRecordItemSignatures
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: HealthRecordItemSignatures
    path: HealthRecordItem.cs
    startLine: 1029
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the signatures for the <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref>. \n"
  example: []
  syntax:
    content: public Collection<HealthRecordItemSignature> HealthRecordItemSignatures { get; }
    content.vb: Public ReadOnly Property HealthRecordItemSignatures As Collection(Of HealthRecordItemSignature)
    parameters: []
    return:
      type: System.Collections.ObjectModel.Collection{Microsoft.Health.HealthRecordItemSignature}
      description: "\nAn collection of <xref href=\"Microsoft.Health.HealthRecordItemSignature\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  overload: Microsoft.Health.HealthRecordItem.HealthRecordItemSignatures*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthRecordItem.Sections
  commentId: P:Microsoft.Health.HealthRecordItem.Sections
  id: Sections
  parent: Microsoft.Health.HealthRecordItem
  langs:
  - csharp
  - vb
  name: Sections
  nameWithType: HealthRecordItem.Sections
  fullName: Microsoft.Health.HealthRecordItem.Sections
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Sections
    path: HealthRecordItem.cs
    startLine: 1045
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the data sections that this HealthRecordItem represents.\n"
  example: []
  syntax:
    content: public HealthRecordItemSections Sections { get; }
    content.vb: Public ReadOnly Property Sections As HealthRecordItemSections
    parameters: []
    return:
      type: Microsoft.Health.HealthRecordItemSections
      description: "\nAn instance of <xref href=\"Microsoft.Health.HealthRecordItemSections\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  overload: Microsoft.Health.HealthRecordItem.Sections*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthRecordItem.GetSizeInBytes
  commentId: M:Microsoft.Health.HealthRecordItem.GetSizeInBytes
  id: GetSizeInBytes
  parent: Microsoft.Health.HealthRecordItem
  langs:
  - csharp
  - vb
  name: GetSizeInBytes()
  nameWithType: HealthRecordItem.GetSizeInBytes()
  fullName: Microsoft.Health.HealthRecordItem.GetSizeInBytes()
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetSizeInBytes
    path: HealthRecordItem.cs
    startLine: 1073
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the size of the health record item which will be added to the quota used in the\nperson's health record.\n"
  remarks: "\nThis size may be used to determine if there is sufficient room left in the person's health\nrecord. It is recommended that this be used only for large items that may cause the\nperson to exceed their quota. This measurement is an approximation. The HealthVault\nservice may evaluate the item to have slightly more or fewer bytes depending on how the\nwhite space is transformed between the client and server. The person's health record\nquota usage may also change on the HealthVault service due to data being added by other\napplications.\n"
  example: []
  syntax:
    content: public int GetSizeInBytes()
    content.vb: Public Function GetSizeInBytes As Integer
    return:
      type: System.Int32
      description: "\nThe size in bytes of the health record item.\n"
  overload: Microsoft.Health.HealthRecordItem.GetSizeInBytes*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordItem.GetItemXml
  commentId: M:Microsoft.Health.HealthRecordItem.GetItemXml
  id: GetItemXml
  parent: Microsoft.Health.HealthRecordItem
  langs:
  - csharp
  - vb
  name: GetItemXml()
  nameWithType: HealthRecordItem.GetItemXml()
  fullName: Microsoft.Health.HealthRecordItem.GetItemXml()
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetItemXml
    path: HealthRecordItem.cs
    startLine: 1098
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the XML representation of the health record item.\n"
  example: []
  syntax:
    content: public string GetItemXml()
    content.vb: Public Function GetItemXml As String
    return:
      type: System.String
      description: "\nA string containing the XML representation of the item.\n"
  overload: Microsoft.Health.HealthRecordItem.GetItemXml*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordItem.GetItemXml(Microsoft.Health.HealthRecordItemSections)
  commentId: M:Microsoft.Health.HealthRecordItem.GetItemXml(Microsoft.Health.HealthRecordItemSections)
  id: GetItemXml(Microsoft.Health.HealthRecordItemSections)
  parent: Microsoft.Health.HealthRecordItem
  langs:
  - csharp
  - vb
  name: GetItemXml(HealthRecordItemSections)
  nameWithType: HealthRecordItem.GetItemXml(HealthRecordItemSections)
  fullName: Microsoft.Health.HealthRecordItem.GetItemXml(Microsoft.Health.HealthRecordItemSections)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetItemXml
    path: HealthRecordItem.cs
    startLine: 1119
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the XML representation of the health record item.\n"
  example: []
  syntax:
    content: public string GetItemXml(HealthRecordItemSections sections)
    content.vb: Public Function GetItemXml(sections As HealthRecordItemSections) As String
    parameters:
    - id: sections
      type: Microsoft.Health.HealthRecordItemSections
      description: "\nThe sections of the item to write to the XML.\n"
    return:
      type: System.String
      description: "\nA string containing the XML representation of the item wrapped by a \"thing\" element. \n"
  overload: Microsoft.Health.HealthRecordItem.GetItemXml*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">sections</span> is <strong>null</strong> or empty.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordItem.GetItemXml(System.String)
  commentId: M:Microsoft.Health.HealthRecordItem.GetItemXml(System.String)
  id: GetItemXml(System.String)
  parent: Microsoft.Health.HealthRecordItem
  langs:
  - csharp
  - vb
  name: GetItemXml(String)
  nameWithType: HealthRecordItem.GetItemXml(String)
  fullName: Microsoft.Health.HealthRecordItem.GetItemXml(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetItemXml
    path: HealthRecordItem.cs
    startLine: 1141
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the XML representation of the health record item.\n"
  example: []
  syntax:
    content: public string GetItemXml(string elementName)
    content.vb: Public Function GetItemXml(elementName As String) As String
    parameters:
    - id: elementName
      type: System.String
      description: "\nThe element that will wrap the thing's contents.\n"
    return:
      type: System.String
      description: "\nA string containing the XML representation of the item wrapped by the specified \n<span class=\"paramref\">elementName</span>.\n"
  overload: Microsoft.Health.HealthRecordItem.GetItemXml*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">elementName</span> is <strong>null</strong> or empty.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordItem.GetItemXml(Microsoft.Health.HealthRecordItemSections,System.String)
  commentId: M:Microsoft.Health.HealthRecordItem.GetItemXml(Microsoft.Health.HealthRecordItemSections,System.String)
  id: GetItemXml(Microsoft.Health.HealthRecordItemSections,System.String)
  parent: Microsoft.Health.HealthRecordItem
  langs:
  - csharp
  - vb
  name: GetItemXml(HealthRecordItemSections, String)
  nameWithType: HealthRecordItem.GetItemXml(HealthRecordItemSections, String)
  fullName: Microsoft.Health.HealthRecordItem.GetItemXml(Microsoft.Health.HealthRecordItemSections, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetItemXml
    path: HealthRecordItem.cs
    startLine: 1174
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the XML representation of the health record item.\n"
  example: []
  syntax:
    content: public string GetItemXml(HealthRecordItemSections sections, string elementName)
    content.vb: Public Function GetItemXml(sections As HealthRecordItemSections, elementName As String) As String
    parameters:
    - id: sections
      type: Microsoft.Health.HealthRecordItemSections
      description: "\nThe sections of the item to write to the XML.\n"
    - id: elementName
      type: System.String
      description: "\nThe element that will wrap the thing's contents.\n"
    return:
      type: System.String
      description: "\nA string containing the XML representation of the item wrapped by the specified \n<span class=\"paramref\">elementName</span>.\n"
  overload: Microsoft.Health.HealthRecordItem.GetItemXml*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">elementName</span> is <strong>null</strong> or empty.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordItem.Serialize
  commentId: M:Microsoft.Health.HealthRecordItem.Serialize
  id: Serialize
  parent: Microsoft.Health.HealthRecordItem
  langs:
  - csharp
  - vb
  name: Serialize()
  nameWithType: HealthRecordItem.Serialize()
  fullName: Microsoft.Health.HealthRecordItem.Serialize()
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Serialize
    path: HealthRecordItem.cs
    startLine: 1301
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the XML representation of the item for serialization.\n"
  remarks: "\nThere are two ways to obtain an XML representation of the item.\nGetItemXml() returns only the XML for the type-specific information of the item.\nSerialize() returns the full XML.\n\nUse GetItemXml() if you want to save the XML representation to pass to the HealthVault platform for a \nnew or update operation.\nUse Serialize if you want to serialize and deserialize the item and have the deserialized item be\nidentical to the serialized one.\n"
  example: []
  syntax:
    content: public string Serialize()
    content.vb: Public Function Serialize As String
    return:
      type: System.String
      description: "\nA string containing the XML representation of the item.\n"
  overload: Microsoft.Health.HealthRecordItem.Serialize*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordItem.Deserialize(System.String)
  commentId: M:Microsoft.Health.HealthRecordItem.Deserialize(System.String)
  id: Deserialize(System.String)
  parent: Microsoft.Health.HealthRecordItem
  langs:
  - csharp
  - vb
  name: Deserialize(String)
  nameWithType: HealthRecordItem.Deserialize(String)
  fullName: Microsoft.Health.HealthRecordItem.Deserialize(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Deserialize
    path: HealthRecordItem.cs
    startLine: 1345
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nCreate a <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref> instance from the item XML. \n"
  remarks: "\nThis method is identical to calling <xref href=\"Microsoft.Health.ItemTypeManager.DeserializeItem(System.String)\" data-throw-if-not-resolved=\"false\"></xref>.\n\nThe item XML should come from a previous call to <xref href=\"Microsoft.Health.HealthRecordItem.Serialize\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static HealthRecordItem Deserialize(string itemXml)
    content.vb: Public Shared Function Deserialize(itemXml As String) As HealthRecordItem
    parameters:
    - id: itemXml
      type: System.String
    return:
      type: Microsoft.Health.HealthRecordItem
      description: "\nA instance of the <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  overload: Microsoft.Health.HealthRecordItem.Deserialize*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.HealthRecordItem.#ctor*
  commentId: Overload:Microsoft.Health.HealthRecordItem.#ctor
  isExternal: false
  name: HealthRecordItem
  nameWithType: HealthRecordItem.HealthRecordItem
  fullName: Microsoft.Health.HealthRecordItem.HealthRecordItem
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: Microsoft.Health.HealthRecordItem
  commentId: T:Microsoft.Health.HealthRecordItem
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordItem
  nameWithType: HealthRecordItem
  fullName: Microsoft.Health.HealthRecordItem
- uid: System.Xml.XPath.IXPathNavigable
  commentId: T:System.Xml.XPath.IXPathNavigable
  parent: System.Xml.XPath
  isExternal: true
  name: IXPathNavigable
  nameWithType: IXPathNavigable
  fullName: System.Xml.XPath.IXPathNavigable
- uid: System.Xml.XPath
  commentId: N:System.Xml.XPath
  isExternal: false
  name: System.Xml.XPath
  nameWithType: System.Xml.XPath
  fullName: System.Xml.XPath
- uid: Microsoft.Health.HealthRecordItem.ParseXml*
  commentId: Overload:Microsoft.Health.HealthRecordItem.ParseXml
  isExternal: false
  name: ParseXml
  nameWithType: HealthRecordItem.ParseXml
  fullName: Microsoft.Health.HealthRecordItem.ParseXml
- uid: Microsoft.Health.HealthRecordItem.TypeSpecificData
  commentId: P:Microsoft.Health.HealthRecordItem.TypeSpecificData
  parent: Microsoft.Health.HealthRecordItem
  isExternal: false
  name: TypeSpecificData
  nameWithType: HealthRecordItem.TypeSpecificData
  fullName: Microsoft.Health.HealthRecordItem.TypeSpecificData
- uid: Microsoft.Health.HealthRecordItem.WriteXml*
  commentId: Overload:Microsoft.Health.HealthRecordItem.WriteXml
  isExternal: false
  name: WriteXml
  nameWithType: HealthRecordItem.WriteXml
  fullName: Microsoft.Health.HealthRecordItem.WriteXml
- uid: System.Xml.XmlWriter
  commentId: T:System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: false
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: Microsoft.Health.HealthRecordItemSignature
  commentId: T:Microsoft.Health.HealthRecordItemSignature
  isExternal: false
  name: HealthRecordItemSignature
  nameWithType: HealthRecordItemSignature
  fullName: Microsoft.Health.HealthRecordItemSignature
- uid: System.Xml.XmlException
  commentId: T:System.Xml.XmlException
- uid: System.Security.Cryptography.Xml.XmlDsigXsltTransform
  commentId: T:System.Security.Cryptography.Xml.XmlDsigXsltTransform
- uid: System.Security.Cryptography.CryptographicException
  commentId: T:System.Security.Cryptography.CryptographicException
- uid: Microsoft.Health.HealthRecordItem.Sign*
  commentId: Overload:Microsoft.Health.HealthRecordItem.Sign
  isExternal: false
  name: Sign
  nameWithType: HealthRecordItem.Sign
  fullName: Microsoft.Health.HealthRecordItem.Sign
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
- uid: Microsoft.Health.SignatureFailureException
  commentId: T:Microsoft.Health.SignatureFailureException
  isExternal: false
  name: SignatureFailureException
  nameWithType: SignatureFailureException
  fullName: Microsoft.Health.SignatureFailureException
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2
  commentId: T:System.Security.Cryptography.X509Certificates.X509Certificate2
  parent: System.Security.Cryptography.X509Certificates
  isExternal: true
  name: X509Certificate2
  nameWithType: X509Certificate2
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2
- uid: System.Security.Cryptography.X509Certificates
  commentId: N:System.Security.Cryptography.X509Certificates
  isExternal: false
  name: System.Security.Cryptography.X509Certificates
  nameWithType: System.Security.Cryptography.X509Certificates
  fullName: System.Security.Cryptography.X509Certificates
- uid: System.Security.Cryptography.Xml
  commentId: N:System.Security.Cryptography.Xml
- uid: Microsoft.Health.HealthRecordItemSignatureMethod
  commentId: T:Microsoft.Health.HealthRecordItemSignatureMethod
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordItemSignatureMethod
  nameWithType: HealthRecordItemSignatureMethod
  fullName: Microsoft.Health.HealthRecordItemSignatureMethod
- uid: Microsoft.Health.HealthRecordItem.IsSignatureValid*
  commentId: Overload:Microsoft.Health.HealthRecordItem.IsSignatureValid
  isExternal: false
  name: IsSignatureValid
  nameWithType: HealthRecordItem.IsSignatureValid
  fullName: Microsoft.Health.HealthRecordItem.IsSignatureValid
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Health.HealthRecordItem.ValidateCertificate*
  commentId: Overload:Microsoft.Health.HealthRecordItem.ValidateCertificate
  isExternal: false
  name: ValidateCertificate
  nameWithType: HealthRecordItem.ValidateCertificate
  fullName: Microsoft.Health.HealthRecordItem.ValidateCertificate
- uid: Microsoft.Health.CertificateValidationException
  commentId: T:Microsoft.Health.CertificateValidationException
  isExternal: false
  name: CertificateValidationException
  nameWithType: CertificateValidationException
  fullName: Microsoft.Health.CertificateValidationException
- uid: Microsoft.Health.HealthRecordItem.Sections
  commentId: P:Microsoft.Health.HealthRecordItem.Sections
  parent: Microsoft.Health.HealthRecordItem
  isExternal: false
  name: Sections
  nameWithType: HealthRecordItem.Sections
  fullName: Microsoft.Health.HealthRecordItem.Sections
- uid: Microsoft.Health.HealthRecordItem.Key*
  commentId: Overload:Microsoft.Health.HealthRecordItem.Key
  isExternal: false
  name: Key
  nameWithType: HealthRecordItem.Key
  fullName: Microsoft.Health.HealthRecordItem.Key
- uid: Microsoft.Health.HealthRecordItemKey
  commentId: T:Microsoft.Health.HealthRecordItemKey
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordItemKey
  nameWithType: HealthRecordItemKey
  fullName: Microsoft.Health.HealthRecordItemKey
- uid: Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Guid,Microsoft.Health.HealthServiceConnection)
  commentId: M:Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Guid,Microsoft.Health.HealthServiceConnection)
- uid: Microsoft.Health.HealthRecordItem.TypeId*
  commentId: Overload:Microsoft.Health.HealthRecordItem.TypeId
  isExternal: false
  name: TypeId
  nameWithType: HealthRecordItem.TypeId
  fullName: Microsoft.Health.HealthRecordItem.TypeId
- uid: Microsoft.Health.HealthRecordItem.TypeName*
  commentId: Overload:Microsoft.Health.HealthRecordItem.TypeName
  isExternal: false
  name: TypeName
  nameWithType: HealthRecordItem.TypeName
  fullName: Microsoft.Health.HealthRecordItem.TypeName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Health.HealthRecordItemSections.Core
  commentId: F:Microsoft.Health.HealthRecordItemSections.Core
- uid: Microsoft.Health.HealthRecordItem.EffectiveDate*
  commentId: Overload:Microsoft.Health.HealthRecordItem.EffectiveDate
  isExternal: false
  name: EffectiveDate
  nameWithType: HealthRecordItem.EffectiveDate
  fullName: Microsoft.Health.HealthRecordItem.EffectiveDate
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: Microsoft.Health.HealthRecordItem.State*
  commentId: Overload:Microsoft.Health.HealthRecordItem.State
  isExternal: false
  name: State
  nameWithType: HealthRecordItem.State
  fullName: Microsoft.Health.HealthRecordItem.State
- uid: Microsoft.Health.HealthRecordItemState
  commentId: T:Microsoft.Health.HealthRecordItemState
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordItemState
  nameWithType: HealthRecordItemState
  fullName: Microsoft.Health.HealthRecordItemState
- uid: Microsoft.Health.HealthRecordItem.Flags*
  commentId: Overload:Microsoft.Health.HealthRecordItem.Flags
  isExternal: false
  name: Flags
  nameWithType: HealthRecordItem.Flags
  fullName: Microsoft.Health.HealthRecordItem.Flags
- uid: Microsoft.Health.HealthRecordItemFlags
  commentId: T:Microsoft.Health.HealthRecordItemFlags
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordItemFlags
  nameWithType: HealthRecordItemFlags
  fullName: Microsoft.Health.HealthRecordItemFlags
- uid: Microsoft.Health.HealthRecordItem.IsPersonal*
  commentId: Overload:Microsoft.Health.HealthRecordItem.IsPersonal
  isExternal: false
  name: IsPersonal
  nameWithType: HealthRecordItem.IsPersonal
  fullName: Microsoft.Health.HealthRecordItem.IsPersonal
- uid: Microsoft.Health.HealthRecordItem.IsDownVersioned*
  commentId: Overload:Microsoft.Health.HealthRecordItem.IsDownVersioned
  isExternal: false
  name: IsDownVersioned
  nameWithType: HealthRecordItem.IsDownVersioned
  fullName: Microsoft.Health.HealthRecordItem.IsDownVersioned
- uid: Microsoft.Health.HealthRecordItem.IsUpVersioned*
  commentId: Overload:Microsoft.Health.HealthRecordItem.IsUpVersioned
  isExternal: false
  name: IsUpVersioned
  nameWithType: HealthRecordItem.IsUpVersioned
  fullName: Microsoft.Health.HealthRecordItem.IsUpVersioned
- uid: Microsoft.Health.HealthRecordItem.UpdatedEndDate*
  commentId: Overload:Microsoft.Health.HealthRecordItem.UpdatedEndDate
  isExternal: false
  name: UpdatedEndDate
  nameWithType: HealthRecordItem.UpdatedEndDate
  fullName: Microsoft.Health.HealthRecordItem.UpdatedEndDate
- uid: Microsoft.Health.HealthRecordItemSections.Audits
  commentId: F:Microsoft.Health.HealthRecordItemSections.Audits
- uid: Microsoft.Health.HealthRecordItem.LastUpdated*
  commentId: Overload:Microsoft.Health.HealthRecordItem.LastUpdated
  isExternal: false
  name: LastUpdated
  nameWithType: HealthRecordItem.LastUpdated
  fullName: Microsoft.Health.HealthRecordItem.LastUpdated
- uid: Microsoft.Health.HealthServiceAudit
  commentId: T:Microsoft.Health.HealthServiceAudit
  parent: Microsoft.Health
  isExternal: false
  name: HealthServiceAudit
  nameWithType: HealthServiceAudit
  fullName: Microsoft.Health.HealthServiceAudit
- uid: Microsoft.Health.HealthRecordItem.Created*
  commentId: Overload:Microsoft.Health.HealthRecordItem.Created
  isExternal: false
  name: Created
  nameWithType: HealthRecordItem.Created
  fullName: Microsoft.Health.HealthRecordItem.Created
- uid: Microsoft.Health.HealthRecordItemSections.EffectivePermissions
  commentId: F:Microsoft.Health.HealthRecordItemSections.EffectivePermissions
- uid: Microsoft.Health.HealthRecordItem.EffectivePermissions*
  commentId: Overload:Microsoft.Health.HealthRecordItem.EffectivePermissions
  isExternal: false
  name: EffectivePermissions
  nameWithType: HealthRecordItem.EffectivePermissions
  fullName: Microsoft.Health.HealthRecordItem.EffectivePermissions
- uid: System.Nullable{Microsoft.Health.HealthRecordItemPermissions}
  commentId: T:System.Nullable{Microsoft.Health.HealthRecordItemPermissions}
  parent: System
  definition: System.Nullable`1
  name: Nullable<HealthRecordItemPermissions>
  nameWithType: Nullable<HealthRecordItemPermissions>
  fullName: System.Nullable<Microsoft.Health.HealthRecordItemPermissions>
  nameWithType.vb: Nullable(Of HealthRecordItemPermissions)
  fullName.vb: System.Nullable(Of Microsoft.Health.HealthRecordItemPermissions)
  name.vb: Nullable(Of HealthRecordItemPermissions)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.HealthRecordItemPermissions
    name: HealthRecordItemPermissions
    nameWithType: HealthRecordItemPermissions
    fullName: Microsoft.Health.HealthRecordItemPermissions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.HealthRecordItemPermissions
    name: HealthRecordItemPermissions
    nameWithType: HealthRecordItemPermissions
    fullName: Microsoft.Health.HealthRecordItemPermissions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthRecordItem.IsImmutable*
  commentId: Overload:Microsoft.Health.HealthRecordItem.IsImmutable
  isExternal: false
  name: IsImmutable
  nameWithType: HealthRecordItem.IsImmutable
  fullName: Microsoft.Health.HealthRecordItem.IsImmutable
- uid: Microsoft.Health.HealthRecordItem.IsReadOnly*
  commentId: Overload:Microsoft.Health.HealthRecordItem.IsReadOnly
  isExternal: false
  name: IsReadOnly
  nameWithType: HealthRecordItem.IsReadOnly
  fullName: Microsoft.Health.HealthRecordItem.IsReadOnly
- uid: Microsoft.Health.HealthRecordItemSections.Xml
  commentId: F:Microsoft.Health.HealthRecordItemSections.Xml
- uid: Microsoft.Health.HealthRecordItem.TypeSpecificData*
  commentId: Overload:Microsoft.Health.HealthRecordItem.TypeSpecificData
  isExternal: false
  name: TypeSpecificData
  nameWithType: HealthRecordItem.TypeSpecificData
  fullName: Microsoft.Health.HealthRecordItem.TypeSpecificData
- uid: Microsoft.Health.HealthRecordSearcher
  commentId: T:Microsoft.Health.HealthRecordSearcher
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordSearcher
  nameWithType: HealthRecordSearcher
  fullName: Microsoft.Health.HealthRecordSearcher
- uid: Microsoft.Health.HealthRecordItem.TransformedXmlData*
  commentId: Overload:Microsoft.Health.HealthRecordItem.TransformedXmlData
  isExternal: false
  name: TransformedXmlData
  nameWithType: HealthRecordItem.TransformedXmlData
  fullName: Microsoft.Health.HealthRecordItem.TransformedXmlData
- uid: System.Collections.Generic.IDictionary{System.String,System.Xml.XmlDocument}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Xml.XmlDocument}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, XmlDocument>
  nameWithType: IDictionary<String, XmlDocument>
  fullName: System.Collections.Generic.IDictionary<System.String, System.Xml.XmlDocument>
  nameWithType.vb: IDictionary(Of String, XmlDocument)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.Xml.XmlDocument)
  name.vb: IDictionary(Of String, XmlDocument)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Xml.XmlDocument
    name: XmlDocument
    nameWithType: XmlDocument
    fullName: System.Xml.XmlDocument
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Xml.XmlDocument
    name: XmlDocument
    nameWithType: XmlDocument
    fullName: System.Xml.XmlDocument
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Health.CommonItemData
  commentId: T:Microsoft.Health.CommonItemData
  parent: Microsoft.Health
  isExternal: false
  name: CommonItemData
  nameWithType: CommonItemData
  fullName: Microsoft.Health.CommonItemData
- uid: Microsoft.Health.HealthRecordItem.CommonData*
  commentId: Overload:Microsoft.Health.HealthRecordItem.CommonData
  isExternal: false
  name: CommonData
  nameWithType: HealthRecordItem.CommonData
  fullName: Microsoft.Health.HealthRecordItem.CommonData
- uid: Microsoft.Health.HealthRecordAccessor
  commentId: T:Microsoft.Health.HealthRecordAccessor
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordAccessor
  nameWithType: HealthRecordAccessor
  fullName: Microsoft.Health.HealthRecordAccessor
- uid: Microsoft.Health.Package.ConnectPackage
  commentId: T:Microsoft.Health.Package.ConnectPackage
  isExternal: false
  name: ConnectPackage
  nameWithType: ConnectPackage
  fullName: Microsoft.Health.Package.ConnectPackage
- uid: Microsoft.Health.BlobStore
  commentId: T:Microsoft.Health.BlobStore
  parent: Microsoft.Health
  isExternal: false
  name: BlobStore
  nameWithType: BlobStore
  fullName: Microsoft.Health.BlobStore
- uid: Microsoft.Health.HealthRecordItemSections.BlobPayload
  commentId: F:Microsoft.Health.HealthRecordItemSections.BlobPayload
- uid: Microsoft.Health.HealthRecordItem.GetBlobStore*
  commentId: Overload:Microsoft.Health.HealthRecordItem.GetBlobStore
  isExternal: false
  name: GetBlobStore
  nameWithType: HealthRecordItem.GetBlobStore
  fullName: Microsoft.Health.HealthRecordItem.GetBlobStore
- uid: Microsoft.Health.Package.ConnectPackageCreationParameters
  commentId: T:Microsoft.Health.Package.ConnectPackageCreationParameters
  parent: Microsoft.Health.Package
  isExternal: false
  name: ConnectPackageCreationParameters
  nameWithType: ConnectPackageCreationParameters
  fullName: Microsoft.Health.Package.ConnectPackageCreationParameters
- uid: Microsoft.Health.Package
  commentId: N:Microsoft.Health.Package
  isExternal: false
  name: Microsoft.Health.Package
  nameWithType: Microsoft.Health.Package
  fullName: Microsoft.Health.Package
- uid: Microsoft.Health.HealthRecordItem.Tags*
  commentId: Overload:Microsoft.Health.HealthRecordItem.Tags
  isExternal: false
  name: Tags
  nameWithType: HealthRecordItem.Tags
  fullName: Microsoft.Health.HealthRecordItem.Tags
- uid: System.Collections.ObjectModel.Collection{System.String}
  commentId: T:System.Collections.ObjectModel.Collection{System.String}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.Collection`1
  name: Collection<String>
  nameWithType: Collection<String>
  fullName: System.Collections.ObjectModel.Collection<System.String>
  nameWithType.vb: Collection(Of String)
  fullName.vb: System.Collections.ObjectModel.Collection(Of System.String)
  name.vb: Collection(Of String)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.Collection`1
  commentId: T:System.Collections.ObjectModel.Collection`1
  isExternal: true
  name: Collection<T>
  nameWithType: Collection<T>
  fullName: System.Collections.ObjectModel.Collection<T>
  nameWithType.vb: Collection(Of T)
  fullName.vb: System.Collections.ObjectModel.Collection(Of T)
  name.vb: Collection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: Microsoft.Health.HealthRecordItem.HealthRecordItemSignatures*
  commentId: Overload:Microsoft.Health.HealthRecordItem.HealthRecordItemSignatures
  isExternal: false
  name: HealthRecordItemSignatures
  nameWithType: HealthRecordItem.HealthRecordItemSignatures
  fullName: Microsoft.Health.HealthRecordItem.HealthRecordItemSignatures
- uid: System.Collections.ObjectModel.Collection{Microsoft.Health.HealthRecordItemSignature}
  commentId: T:System.Collections.ObjectModel.Collection{Microsoft.Health.HealthRecordItemSignature}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.Collection`1
  name: Collection<HealthRecordItemSignature>
  nameWithType: Collection<HealthRecordItemSignature>
  fullName: System.Collections.ObjectModel.Collection<Microsoft.Health.HealthRecordItemSignature>
  nameWithType.vb: Collection(Of HealthRecordItemSignature)
  fullName.vb: System.Collections.ObjectModel.Collection(Of Microsoft.Health.HealthRecordItemSignature)
  name.vb: Collection(Of HealthRecordItemSignature)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.HealthRecordItemSignature
    name: HealthRecordItemSignature
    nameWithType: HealthRecordItemSignature
    fullName: Microsoft.Health.HealthRecordItemSignature
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.HealthRecordItemSignature
    name: HealthRecordItemSignature
    nameWithType: HealthRecordItemSignature
    fullName: Microsoft.Health.HealthRecordItemSignature
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthRecordItemSections
  commentId: T:Microsoft.Health.HealthRecordItemSections
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordItemSections
  nameWithType: HealthRecordItemSections
  fullName: Microsoft.Health.HealthRecordItemSections
- uid: Microsoft.Health.HealthRecordItem.Sections*
  commentId: Overload:Microsoft.Health.HealthRecordItem.Sections
  isExternal: false
  name: Sections
  nameWithType: HealthRecordItem.Sections
  fullName: Microsoft.Health.HealthRecordItem.Sections
- uid: Microsoft.Health.HealthRecordItem.GetSizeInBytes*
  commentId: Overload:Microsoft.Health.HealthRecordItem.GetSizeInBytes
  isExternal: false
  name: GetSizeInBytes
  nameWithType: HealthRecordItem.GetSizeInBytes
  fullName: Microsoft.Health.HealthRecordItem.GetSizeInBytes
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Health.HealthRecordItem.GetItemXml*
  commentId: Overload:Microsoft.Health.HealthRecordItem.GetItemXml
  isExternal: false
  name: GetItemXml
  nameWithType: HealthRecordItem.GetItemXml
  fullName: Microsoft.Health.HealthRecordItem.GetItemXml
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: Microsoft.Health.HealthRecordItem.Serialize*
  commentId: Overload:Microsoft.Health.HealthRecordItem.Serialize
  isExternal: false
  name: Serialize
  nameWithType: HealthRecordItem.Serialize
  fullName: Microsoft.Health.HealthRecordItem.Serialize
- uid: Microsoft.Health.ItemTypeManager.DeserializeItem(System.String)
  commentId: M:Microsoft.Health.ItemTypeManager.DeserializeItem(System.String)
- uid: Microsoft.Health.HealthRecordItem.Serialize
  commentId: M:Microsoft.Health.HealthRecordItem.Serialize
  parent: Microsoft.Health.HealthRecordItem
  isExternal: false
  name: Serialize()
  nameWithType: HealthRecordItem.Serialize()
  fullName: Microsoft.Health.HealthRecordItem.Serialize()
  spec.csharp:
  - uid: Microsoft.Health.HealthRecordItem.Serialize
    name: Serialize
    nameWithType: HealthRecordItem.Serialize
    fullName: Microsoft.Health.HealthRecordItem.Serialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.HealthRecordItem.Serialize
    name: Serialize
    nameWithType: HealthRecordItem.Serialize
    fullName: Microsoft.Health.HealthRecordItem.Serialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthRecordItem.Deserialize*
  commentId: Overload:Microsoft.Health.HealthRecordItem.Deserialize
  isExternal: false
  name: Deserialize
  nameWithType: HealthRecordItem.Deserialize
  fullName: Microsoft.Health.HealthRecordItem.Deserialize
