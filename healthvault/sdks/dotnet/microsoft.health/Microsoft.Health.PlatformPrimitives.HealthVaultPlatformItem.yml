### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem
  commentId: T:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem
  id: HealthVaultPlatformItem
  parent: Microsoft.Health.PlatformPrimitives
  children:
  - Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.DisableMock
  - Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.EnableMock(Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem)
  - Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.GetMatchingItems(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,Microsoft.Health.HealthRecordSearcher)
  - Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.GetMatchingItemsRaw(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,Microsoft.Health.HealthRecordSearcher)
  - Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.GetMatchingItemsReader(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,Microsoft.Health.HealthRecordSearcher)
  - Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.GetTransformedItems(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,Microsoft.Health.HealthRecordSearcher,System.String)
  - Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.NewItems(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})
  - Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.RemoveItems(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItemKey})
  - Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.UpdateItems(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})
  langs:
  - csharp
  - vb
  name: HealthVaultPlatformItem
  nameWithType: HealthVaultPlatformItem
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem
  type: Class
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: HealthVaultPlatformItem
    path: HealthVaultPlatformItem.cs
    startLine: 23
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nProvides low-level access to the HealthVault item operations.\n"
  remarks: "\n<xref href=\"Microsoft.Health.HealthVaultPlatform\" data-throw-if-not-resolved=\"false\"></xref> uses this class to perform operations. Set \nHealthVaultPlatformItem.Current to a derived class to intercept all calls.\n"
  example: []
  syntax:
    content: public class HealthVaultPlatformItem
    content.vb: Public Class HealthVaultPlatformItem
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.EnableMock(Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem)
  commentId: M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.EnableMock(Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem)
  id: EnableMock(Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem)
  parent: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem
  langs:
  - csharp
  - vb
  name: EnableMock(HealthVaultPlatformItem)
  nameWithType: HealthVaultPlatformItem.EnableMock(HealthVaultPlatformItem)
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.EnableMock(Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: EnableMock
    path: HealthVaultPlatformItem.cs
    startLine: 40
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nEnables mocking of calls to this class.\n"
  remarks: "\nThe calling class should pass in a class that derives from this\nclass and overrides the calls to be mocked. \n"
  example: []
  syntax:
    content: public static void EnableMock(HealthVaultPlatformItem mock)
    content.vb: Public Shared Sub EnableMock(mock As HealthVaultPlatformItem)
    parameters:
    - id: mock
      type: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem
      description: The mocking class.
  overload: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.EnableMock*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThere is already a mock registered for this class.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.DisableMock
  commentId: M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.DisableMock
  id: DisableMock
  parent: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem
  langs:
  - csharp
  - vb
  name: DisableMock()
  nameWithType: HealthVaultPlatformItem.DisableMock()
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.DisableMock()
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DisableMock
    path: HealthVaultPlatformItem.cs
    startLine: 56
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nRemoves mocking of calls to this class.\n"
  example: []
  syntax:
    content: public static void DisableMock()
    content.vb: Public Shared Sub DisableMock
  overload: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.DisableMock*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThere is no mock registered for this class.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.NewItems(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})
  commentId: M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.NewItems(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})
  id: NewItems(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})
  parent: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem
  langs:
  - csharp
  - vb
  name: NewItems(ApplicationConnection, HealthRecordAccessor, IList<HealthRecordItem>)
  nameWithType: HealthVaultPlatformItem.NewItems(ApplicationConnection, HealthRecordAccessor, IList<HealthRecordItem>)
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.NewItems(Microsoft.Health.ApplicationConnection, Microsoft.Health.HealthRecordAccessor, System.Collections.Generic.IList<Microsoft.Health.HealthRecordItem>)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: NewItems
    path: HealthVaultPlatformItem.cs
    startLine: 102
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nCreates new health record items associated with the record.\n"
  remarks: "\nThis method accesses the HealthVault service across the network.\n"
  example: []
  syntax:
    content: public virtual void NewItems(ApplicationConnection connection, HealthRecordAccessor accessor, IList<HealthRecordItem> items)
    content.vb: Public Overridable Sub NewItems(connection As ApplicationConnection, accessor As HealthRecordAccessor, items As IList(Of HealthRecordItem))
    parameters:
    - id: connection
      type: Microsoft.Health.ApplicationConnection
      description: "\nThe connection to use to access the data.\n"
    - id: accessor
      type: Microsoft.Health.HealthRecordAccessor
      description: "\nThe record to use.\n"
    - id: items
      type: System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem}
      description: "\nThe health record items from which to create new instances.\n"
  overload: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.NewItems*
  exceptions:
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe HealthVault service returned an error. \nThe exception's Error property will contain the index of the\nitem on which the failure occurred in the ErrorInfo property. If any failures occur, \nno items will have been created.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nAt least one HealthRecordItem in the supplied list was null.\n"
  nameWithType.vb: HealthVaultPlatformItem.NewItems(ApplicationConnection, HealthRecordAccessor, IList(Of HealthRecordItem))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.NewItems(Microsoft.Health.ApplicationConnection, Microsoft.Health.HealthRecordAccessor, System.Collections.Generic.IList(Of Microsoft.Health.HealthRecordItem))
  name.vb: NewItems(ApplicationConnection, HealthRecordAccessor, IList(Of HealthRecordItem))
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.UpdateItems(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})
  commentId: M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.UpdateItems(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})
  id: UpdateItems(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})
  parent: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem
  langs:
  - csharp
  - vb
  name: UpdateItems(ApplicationConnection, HealthRecordAccessor, IList<HealthRecordItem>)
  nameWithType: HealthVaultPlatformItem.UpdateItems(ApplicationConnection, HealthRecordAccessor, IList<HealthRecordItem>)
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.UpdateItems(Microsoft.Health.ApplicationConnection, Microsoft.Health.HealthRecordAccessor, System.Collections.Generic.IList<Microsoft.Health.HealthRecordItem>)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: UpdateItems
    path: HealthVaultPlatformItem.cs
    startLine: 193
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nUpdates the specified health record items in one batch call to \nthe service.\n"
  remarks: "\nOnly new items are updated with the appropriate unique identifier. \nAll other sections must be updated manually.\n<br /><br />\nThis method accesses the HealthVault service across the network.\n"
  example: []
  syntax:
    content: public virtual void UpdateItems(ApplicationConnection connection, HealthRecordAccessor accessor, IList<HealthRecordItem> itemsToUpdate)
    content.vb: Public Overridable Sub UpdateItems(connection As ApplicationConnection, accessor As HealthRecordAccessor, itemsToUpdate As IList(Of HealthRecordItem))
    parameters:
    - id: connection
      type: Microsoft.Health.ApplicationConnection
      description: "\nThe connection to use to access the data.\n"
    - id: accessor
      type: Microsoft.Health.HealthRecordAccessor
      description: "\nThe record to use.\n"
    - id: itemsToUpdate
      type: System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem}
      description: "\nThe health record items to be updated.\n"
  overload: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.UpdateItems*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <span class=\"paramref\">itemsToUpdate</span> parameter is <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">itemsToUpdate</span> contains a <strong>null</strong> member or\na <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref> instance that does not have an ID.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe HealthVault service returned an error.\nThe exception's Error property will contain the index of the\nitem on which the failure occurred in the ErrorInfo property. If any failures occur, \nno items will have been updated.\n"
  nameWithType.vb: HealthVaultPlatformItem.UpdateItems(ApplicationConnection, HealthRecordAccessor, IList(Of HealthRecordItem))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.UpdateItems(Microsoft.Health.ApplicationConnection, Microsoft.Health.HealthRecordAccessor, System.Collections.Generic.IList(Of Microsoft.Health.HealthRecordItem))
  name.vb: UpdateItems(ApplicationConnection, HealthRecordAccessor, IList(Of HealthRecordItem))
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.RemoveItems(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItemKey})
  commentId: M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.RemoveItems(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItemKey})
  id: RemoveItems(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItemKey})
  parent: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem
  langs:
  - csharp
  - vb
  name: RemoveItems(ApplicationConnection, HealthRecordAccessor, IList<HealthRecordItemKey>)
  nameWithType: HealthVaultPlatformItem.RemoveItems(ApplicationConnection, HealthRecordAccessor, IList<HealthRecordItemKey>)
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.RemoveItems(Microsoft.Health.ApplicationConnection, Microsoft.Health.HealthRecordAccessor, System.Collections.Generic.IList<Microsoft.Health.HealthRecordItemKey>)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: RemoveItems
    path: HealthVaultPlatformItem.cs
    startLine: 322
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nMarks the specified health record item as deleted.\n"
  remarks: "\nThis method accesses the HealthVault service across the network.\n<br /><br />\nHealth record items are never completely deleted. They are marked \nas deleted and are ignored for most normal operations. Items can \nbe undeleted by contacting customer service.\n"
  example: []
  syntax:
    content: public virtual void RemoveItems(ApplicationConnection connection, HealthRecordAccessor accessor, IList<HealthRecordItemKey> itemsToRemove)
    content.vb: Public Overridable Sub RemoveItems(connection As ApplicationConnection, accessor As HealthRecordAccessor, itemsToRemove As IList(Of HealthRecordItemKey))
    parameters:
    - id: connection
      type: Microsoft.Health.ApplicationConnection
      description: "\nThe connection to use to access the data.\n"
    - id: accessor
      type: Microsoft.Health.HealthRecordAccessor
      description: "\nThe record to use.\n"
    - id: itemsToRemove
      type: System.Collections.Generic.IList{Microsoft.Health.HealthRecordItemKey}
      description: "\nThe unique item identifiers of the items to remove.\n"
  overload: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.RemoveItems*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">itemsToRemove</span> parameter is empty.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nErrors removed the health record items from the server.\nThe exception's Error property will contain the index of the\nitem on which the failure occurred in the ErrorInfo property. If any failures occur, \nno items will have been removed.\n"
  nameWithType.vb: HealthVaultPlatformItem.RemoveItems(ApplicationConnection, HealthRecordAccessor, IList(Of HealthRecordItemKey))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.RemoveItems(Microsoft.Health.ApplicationConnection, Microsoft.Health.HealthRecordAccessor, System.Collections.Generic.IList(Of Microsoft.Health.HealthRecordItemKey))
  name.vb: RemoveItems(ApplicationConnection, HealthRecordAccessor, IList(Of HealthRecordItemKey))
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.GetMatchingItems(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,Microsoft.Health.HealthRecordSearcher)
  commentId: M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.GetMatchingItems(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,Microsoft.Health.HealthRecordSearcher)
  id: GetMatchingItems(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,Microsoft.Health.HealthRecordSearcher)
  parent: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem
  langs:
  - csharp
  - vb
  name: GetMatchingItems(ApplicationConnection, HealthRecordAccessor, HealthRecordSearcher)
  nameWithType: HealthVaultPlatformItem.GetMatchingItems(ApplicationConnection, HealthRecordAccessor, HealthRecordSearcher)
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.GetMatchingItems(Microsoft.Health.ApplicationConnection, Microsoft.Health.HealthRecordAccessor, Microsoft.Health.HealthRecordSearcher)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetMatchingItems
    path: HealthVaultPlatformItem.cs
    startLine: 384
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nGets the health record items that match the filters as specified by \nthe properties of this class.\n"
  remarks: "\nThis method accesses the HealthVault service across the network.\n"
  example: []
  syntax:
    content: public virtual ReadOnlyCollection<HealthRecordItemCollection> GetMatchingItems(ApplicationConnection connection, HealthRecordAccessor accessor, HealthRecordSearcher searcher)
    content.vb: Public Overridable Function GetMatchingItems(connection As ApplicationConnection, accessor As HealthRecordAccessor, searcher As HealthRecordSearcher) As ReadOnlyCollection(Of HealthRecordItemCollection)
    parameters:
    - id: connection
      type: Microsoft.Health.ApplicationConnection
      description: "\nThe connection to use to access the data.\n"
    - id: accessor
      type: Microsoft.Health.HealthRecordAccessor
      description: "\nThe record to use.\n"
    - id: searcher
      type: Microsoft.Health.HealthRecordSearcher
      description: "\nThe searcher that defines what items to return.\n"
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Health.HealthRecordItemCollection}
      description: "\nA collection of health record items that match the applied filters.\n"
  overload: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.GetMatchingItems*
  exceptions:
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe response from the server was anything but \n<xref href=\"Microsoft.Health.HealthServiceStatusCode.Ok\" data-throw-if-not-resolved=\"false\"></xref>.\n-or-\n<xref href=\"Microsoft.Health.HealthRecordSearcher.Filters\" data-throw-if-not-resolved=\"false\"></xref> is empty\nor contains invalid filters.\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.GetMatchingItemsReader(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,Microsoft.Health.HealthRecordSearcher)
  commentId: M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.GetMatchingItemsReader(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,Microsoft.Health.HealthRecordSearcher)
  id: GetMatchingItemsReader(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,Microsoft.Health.HealthRecordSearcher)
  parent: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem
  langs:
  - csharp
  - vb
  name: GetMatchingItemsReader(ApplicationConnection, HealthRecordAccessor, HealthRecordSearcher)
  nameWithType: HealthVaultPlatformItem.GetMatchingItemsReader(ApplicationConnection, HealthRecordAccessor, HealthRecordSearcher)
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.GetMatchingItemsReader(Microsoft.Health.ApplicationConnection, Microsoft.Health.HealthRecordAccessor, Microsoft.Health.HealthRecordSearcher)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetMatchingItemsReader
    path: HealthVaultPlatformItem.cs
    startLine: 423
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nGets the health record items that match the filters as specified by \nthe properties of this class.\n"
  remarks: "\nThis method accesses the HealthVault service across the network.\n<br /><br />\nThis method is typically used when the calling application wants to\nhandle the raw health record item XML directly instead of using the \nobject model.\n"
  example: []
  syntax:
    content: public virtual XmlReader GetMatchingItemsReader(ApplicationConnection connection, HealthRecordAccessor accessor, HealthRecordSearcher searcher)
    content.vb: Public Overridable Function GetMatchingItemsReader(connection As ApplicationConnection, accessor As HealthRecordAccessor, searcher As HealthRecordSearcher) As XmlReader
    parameters:
    - id: connection
      type: Microsoft.Health.ApplicationConnection
      description: "\nThe connection to use to access the data.\n"
    - id: accessor
      type: Microsoft.Health.HealthRecordAccessor
      description: "\nThe record to use.\n"
    - id: searcher
      type: Microsoft.Health.HealthRecordSearcher
      description: "\nThe searcher that defines what items to return.\n"
    return:
      type: System.Xml.XmlReader
      description: "\nAn XmlReader representing the raw results of the search.\n"
  overload: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.GetMatchingItemsReader*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.GetMatchingItemsRaw(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,Microsoft.Health.HealthRecordSearcher)
  commentId: M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.GetMatchingItemsRaw(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,Microsoft.Health.HealthRecordSearcher)
  id: GetMatchingItemsRaw(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,Microsoft.Health.HealthRecordSearcher)
  parent: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem
  langs:
  - csharp
  - vb
  name: GetMatchingItemsRaw(ApplicationConnection, HealthRecordAccessor, HealthRecordSearcher)
  nameWithType: HealthVaultPlatformItem.GetMatchingItemsRaw(ApplicationConnection, HealthRecordAccessor, HealthRecordSearcher)
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.GetMatchingItemsRaw(Microsoft.Health.ApplicationConnection, Microsoft.Health.HealthRecordAccessor, Microsoft.Health.HealthRecordSearcher)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetMatchingItemsRaw
    path: HealthVaultPlatformItem.cs
    startLine: 463
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nGets the health record items that match the filters as specified by \nthe properties of this class.\n"
  remarks: "\nThis method accesses the HealthVault service across the network.\n<br /><br />\nThis method is typically used when the calling application wants to\nhandle the raw health record item XML directly instead of using the \nobject model.\n"
  example: []
  syntax:
    content: public virtual XPathNavigator GetMatchingItemsRaw(ApplicationConnection connection, HealthRecordAccessor accessor, HealthRecordSearcher searcher)
    content.vb: Public Overridable Function GetMatchingItemsRaw(connection As ApplicationConnection, accessor As HealthRecordAccessor, searcher As HealthRecordSearcher) As XPathNavigator
    parameters:
    - id: connection
      type: Microsoft.Health.ApplicationConnection
      description: "\nThe connection to use to access the data.\n"
    - id: accessor
      type: Microsoft.Health.HealthRecordAccessor
      description: "\nThe record to use.\n"
    - id: searcher
      type: Microsoft.Health.HealthRecordSearcher
      description: "\nThe searcher that defines what items to return.\n"
    return:
      type: System.Xml.XPath.XPathNavigator
      description: "\nAn XPathNavigator representing the raw results of the search.\n"
  overload: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.GetMatchingItemsRaw*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.GetTransformedItems(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,Microsoft.Health.HealthRecordSearcher,System.String)
  commentId: M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.GetTransformedItems(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,Microsoft.Health.HealthRecordSearcher,System.String)
  id: GetTransformedItems(Microsoft.Health.ApplicationConnection,Microsoft.Health.HealthRecordAccessor,Microsoft.Health.HealthRecordSearcher,System.String)
  parent: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem
  langs:
  - csharp
  - vb
  name: GetTransformedItems(ApplicationConnection, HealthRecordAccessor, HealthRecordSearcher, String)
  nameWithType: HealthVaultPlatformItem.GetTransformedItems(ApplicationConnection, HealthRecordAccessor, HealthRecordSearcher, String)
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.GetTransformedItems(Microsoft.Health.ApplicationConnection, Microsoft.Health.HealthRecordAccessor, Microsoft.Health.HealthRecordSearcher, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformItem.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetTransformedItems
    path: HealthVaultPlatformItem.cs
    startLine: 548
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nGets the health record items specified by the \n<xref href=\"Microsoft.Health.HealthRecordSearcher\" data-throw-if-not-resolved=\"false\"></xref> and runs them through the specified \ntransform.\n"
  remarks: "\nThis method accesses the HealthVault service across the network.\n<br /><br />\nAny call to HealthVault may specify a transform to be run on the\nresponse XML. The transform can be specified as a XSL fragment or\na well-known transform tag provided by the HealthVault service. If a\nXSL fragment is specified, it gets compiled and cached on the server.\n<br />\n<br />\nA final-xsl is useful when you want to convert the result from XML to\nHTML so that you can display the result directly in a web page.\nYou may also use it to generate other data formats like CCR, CCD, CSV,\nRSS, etc.\n<br />\n<br />\nTransform fragments cannot contain embedded script. The following set\nof parameters are passed to all final-xsl transforms:<br />\n<ul>\n<li>currentDateTimeUtc - the date and time just before the transform \nstarted executing</li>\n<li>requestingApplicationName - the name of the application that\nmade the request to HealthVault.</li>\n<li>countryCode - the ISO 3166 country code from the request.</li>\n<li>languageCode - the ISO 639-1 language code from the request.</li>\n<li>personName - the name of the person making the request.</li>\n<li>recordName - if the request identified a HealthVault record to \nbe used, this parameter contains the name of that record.</li>\n</ul>\n"
  example: []
  syntax:
    content: public virtual string GetTransformedItems(ApplicationConnection connection, HealthRecordAccessor accessor, HealthRecordSearcher searcher, string transform)
    content.vb: Public Overridable Function GetTransformedItems(connection As ApplicationConnection, accessor As HealthRecordAccessor, searcher As HealthRecordSearcher, transform As String) As String
    parameters:
    - id: connection
      type: Microsoft.Health.ApplicationConnection
      description: "\nThe connection to use to access the data.\n"
    - id: accessor
      type: Microsoft.Health.HealthRecordAccessor
      description: "\nThe record to use.\n"
    - id: searcher
      type: Microsoft.Health.HealthRecordSearcher
      description: "\nThe searcher that defines what items to return.\n"
    - id: transform
      type: System.String
      description: "\nA URL to a transform to run on the resulting XML. This can be\na fully-qualified URL or the name of one of the standard XSLs\nprovided by the HealthVault system.\n"
    return:
      type: System.String
      description: "\nThe string resulting from performing the specified transform on\nthe XML representation of the items.\n"
  overload: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.GetTransformedItems*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">transform</span> parameter is <strong>null</strong> or empty.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<xref href=\"Microsoft.Health.HealthRecordView.Sections\" data-throw-if-not-resolved=\"false\"></xref> does not\ncontain the XML section in the view.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThere is a failure retrieving the items.\n-or-\nNo filters have been specified.\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: Microsoft.Health.HealthVaultPlatform
  commentId: T:Microsoft.Health.HealthVaultPlatform
  isExternal: false
  name: HealthVaultPlatform
  nameWithType: HealthVaultPlatform
  fullName: Microsoft.Health.HealthVaultPlatform
- uid: Microsoft.Health.PlatformPrimitives
  commentId: N:Microsoft.Health.PlatformPrimitives
  isExternal: false
  name: Microsoft.Health.PlatformPrimitives
  nameWithType: Microsoft.Health.PlatformPrimitives
  fullName: Microsoft.Health.PlatformPrimitives
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.EnableMock*
  commentId: Overload:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.EnableMock
  isExternal: false
  name: EnableMock
  nameWithType: HealthVaultPlatformItem.EnableMock
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.EnableMock
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem
  commentId: T:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem
  parent: Microsoft.Health.PlatformPrimitives
  isExternal: false
  name: HealthVaultPlatformItem
  nameWithType: HealthVaultPlatformItem
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.DisableMock*
  commentId: Overload:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.DisableMock
  isExternal: false
  name: DisableMock
  nameWithType: HealthVaultPlatformItem.DisableMock
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.DisableMock
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.NewItems*
  commentId: Overload:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.NewItems
  isExternal: false
  name: NewItems
  nameWithType: HealthVaultPlatformItem.NewItems
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.NewItems
- uid: Microsoft.Health.HealthServiceException
  commentId: T:Microsoft.Health.HealthServiceException
  parent: Microsoft.Health
  isExternal: false
  name: HealthServiceException
  nameWithType: HealthServiceException
  fullName: Microsoft.Health.HealthServiceException
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: Microsoft.Health.ApplicationConnection
  commentId: T:Microsoft.Health.ApplicationConnection
  parent: Microsoft.Health
  isExternal: false
  name: ApplicationConnection
  nameWithType: ApplicationConnection
  fullName: Microsoft.Health.ApplicationConnection
- uid: Microsoft.Health.HealthRecordAccessor
  commentId: T:Microsoft.Health.HealthRecordAccessor
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordAccessor
  nameWithType: HealthRecordAccessor
  fullName: Microsoft.Health.HealthRecordAccessor
- uid: System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem}
  commentId: T:System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<HealthRecordItem>
  nameWithType: IList<HealthRecordItem>
  fullName: System.Collections.Generic.IList<Microsoft.Health.HealthRecordItem>
  nameWithType.vb: IList(Of HealthRecordItem)
  fullName.vb: System.Collections.Generic.IList(Of Microsoft.Health.HealthRecordItem)
  name.vb: IList(Of HealthRecordItem)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Health.HealthRecordItem
  commentId: T:Microsoft.Health.HealthRecordItem
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordItem
  nameWithType: HealthRecordItem
  fullName: Microsoft.Health.HealthRecordItem
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.UpdateItems*
  commentId: Overload:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.UpdateItems
  isExternal: false
  name: UpdateItems
  nameWithType: HealthVaultPlatformItem.UpdateItems
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.UpdateItems
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.RemoveItems*
  commentId: Overload:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.RemoveItems
  isExternal: false
  name: RemoveItems
  nameWithType: HealthVaultPlatformItem.RemoveItems
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.RemoveItems
- uid: System.Collections.Generic.IList{Microsoft.Health.HealthRecordItemKey}
  commentId: T:System.Collections.Generic.IList{Microsoft.Health.HealthRecordItemKey}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<HealthRecordItemKey>
  nameWithType: IList<HealthRecordItemKey>
  fullName: System.Collections.Generic.IList<Microsoft.Health.HealthRecordItemKey>
  nameWithType.vb: IList(Of HealthRecordItemKey)
  fullName.vb: System.Collections.Generic.IList(Of Microsoft.Health.HealthRecordItemKey)
  name.vb: IList(Of HealthRecordItemKey)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.HealthRecordItemKey
    name: HealthRecordItemKey
    nameWithType: HealthRecordItemKey
    fullName: Microsoft.Health.HealthRecordItemKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.HealthRecordItemKey
    name: HealthRecordItemKey
    nameWithType: HealthRecordItemKey
    fullName: Microsoft.Health.HealthRecordItemKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthServiceStatusCode.Ok
  commentId: F:Microsoft.Health.HealthServiceStatusCode.Ok
- uid: Microsoft.Health.HealthRecordSearcher.Filters
  commentId: P:Microsoft.Health.HealthRecordSearcher.Filters
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.GetMatchingItems*
  commentId: Overload:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.GetMatchingItems
  isExternal: false
  name: GetMatchingItems
  nameWithType: HealthVaultPlatformItem.GetMatchingItems
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.GetMatchingItems
- uid: Microsoft.Health.HealthRecordSearcher
  commentId: T:Microsoft.Health.HealthRecordSearcher
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordSearcher
  nameWithType: HealthRecordSearcher
  fullName: Microsoft.Health.HealthRecordSearcher
- uid: System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Health.HealthRecordItemCollection}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Health.HealthRecordItemCollection}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<HealthRecordItemCollection>
  nameWithType: ReadOnlyCollection<HealthRecordItemCollection>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Health.HealthRecordItemCollection>
  nameWithType.vb: ReadOnlyCollection(Of HealthRecordItemCollection)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of Microsoft.Health.HealthRecordItemCollection)
  name.vb: ReadOnlyCollection(Of HealthRecordItemCollection)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.HealthRecordItemCollection
    name: HealthRecordItemCollection
    nameWithType: HealthRecordItemCollection
    fullName: Microsoft.Health.HealthRecordItemCollection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.HealthRecordItemCollection
    name: HealthRecordItemCollection
    nameWithType: HealthRecordItemCollection
    fullName: Microsoft.Health.HealthRecordItemCollection
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: true
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  nameWithType.vb: ReadOnlyCollection(Of T)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.GetMatchingItemsReader*
  commentId: Overload:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.GetMatchingItemsReader
  isExternal: false
  name: GetMatchingItemsReader
  nameWithType: HealthVaultPlatformItem.GetMatchingItemsReader
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.GetMatchingItemsReader
- uid: System.Xml.XmlReader
  commentId: T:System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: false
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.GetMatchingItemsRaw*
  commentId: Overload:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.GetMatchingItemsRaw
  isExternal: false
  name: GetMatchingItemsRaw
  nameWithType: HealthVaultPlatformItem.GetMatchingItemsRaw
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.GetMatchingItemsRaw
- uid: System.Xml.XPath.XPathNavigator
  commentId: T:System.Xml.XPath.XPathNavigator
  parent: System.Xml.XPath
  isExternal: true
  name: XPathNavigator
  nameWithType: XPathNavigator
  fullName: System.Xml.XPath.XPathNavigator
- uid: System.Xml.XPath
  commentId: N:System.Xml.XPath
  isExternal: false
  name: System.Xml.XPath
  nameWithType: System.Xml.XPath
  fullName: System.Xml.XPath
- uid: Microsoft.Health.HealthRecordView.Sections
  commentId: P:Microsoft.Health.HealthRecordView.Sections
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.GetTransformedItems*
  commentId: Overload:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.GetTransformedItems
  isExternal: false
  name: GetTransformedItems
  nameWithType: HealthVaultPlatformItem.GetTransformedItems
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformItem.GetTransformedItems
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
