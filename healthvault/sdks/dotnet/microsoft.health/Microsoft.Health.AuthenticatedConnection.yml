### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.AuthenticatedConnection
  commentId: T:Microsoft.Health.AuthenticatedConnection
  id: AuthenticatedConnection
  parent: Microsoft.Health
  children:
  - Microsoft.Health.AuthenticatedConnection.#ctor(Microsoft.Health.Authentication.Credential)
  - Microsoft.Health.AuthenticatedConnection.#ctor(Microsoft.Health.HealthServiceInstance,Microsoft.Health.Authentication.Credential)
  - Microsoft.Health.AuthenticatedConnection.#ctor(System.Guid,Microsoft.Health.Authentication.Credential)
  - Microsoft.Health.AuthenticatedConnection.#ctor(System.Guid,Microsoft.Health.HealthServiceInstance,Microsoft.Health.Authentication.Credential)
  - Microsoft.Health.AuthenticatedConnection.#ctor(System.Guid,System.String,Microsoft.Health.Authentication.Credential)
  - Microsoft.Health.AuthenticatedConnection.#ctor(System.Guid,System.Uri,Microsoft.Health.Authentication.Credential)
  - Microsoft.Health.AuthenticatedConnection.Authenticate
  - Microsoft.Health.AuthenticatedConnection.GetAllApplicationSettings
  - Microsoft.Health.AuthenticatedConnection.GetApplicationSettings
  - Microsoft.Health.AuthenticatedConnection.Impersonate(System.Guid)
  - Microsoft.Health.AuthenticatedConnection.IsImpersonating
  - Microsoft.Health.AuthenticatedConnection.LogOn(System.String)
  - Microsoft.Health.AuthenticatedConnection.LogOn(System.String,System.Boolean)
  - Microsoft.Health.AuthenticatedConnection.LogOn(System.String,System.Boolean,System.Boolean,System.Threading.ManualResetEvent,System.Guid,System.Uri,System.Uri)
  - Microsoft.Health.AuthenticatedConnection.LogOn(System.String,System.Boolean,System.Threading.ManualResetEvent)
  - Microsoft.Health.AuthenticatedConnection.LogOn(System.String,System.Boolean,System.Threading.ManualResetEvent,System.Guid,System.Uri,System.Uri)
  - Microsoft.Health.AuthenticatedConnection.SetApplicationSettings(System.Xml.XPath.IXPathNavigable)
  - Microsoft.Health.AuthenticatedConnection.StopImpersonating
  langs:
  - csharp
  - vb
  name: AuthenticatedConnection
  nameWithType: AuthenticatedConnection
  fullName: Microsoft.Health.AuthenticatedConnection
  type: Class
  source:
    remote:
      path: Microsoft.Health/AuthenticatedConnection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: AuthenticatedConnection
    path: AuthenticatedConnection.cs
    startLine: 41
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nRepresents an authenticated interface to the HealthVault service. Most\noperations performed against the service require authentication.\n"
  remarks: "\nYou must connect to the HealthVault service to access its\nweb methods. This class does not maintain\nan open connection to the service, but uses XML over HTTP to \nmake requests and receive responses from the service. The connection\nonly maintains the data necessary for the request.\n<br /><br />\nAn authenticated connection takes the user name and password, \nauthenticates them against the HealthVault service, and then stores an \nauthentication token which is then passed to the service on each \nsubsequent request. An authenticated connection is required for \naccessing a person's health record. \n<br /><br />\nFor operations that do not require user or application authentication, \nuse the <xref href=\"Microsoft.Health.AnonymousConnection\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: 'public class AuthenticatedConnection : ApplicationConnection'
    content.vb: >-
      Public Class AuthenticatedConnection
          Inherits ApplicationConnection
  inheritance:
  - System.Object
  - Microsoft.Health.HealthServiceConnection
  - Microsoft.Health.ApplicationConnection
  derivedClasses:
  - Microsoft.Health.Web.WebApplicationConnection
  inheritedMembers:
  - Microsoft.Health.ApplicationConnection.CreateRequest(Microsoft.Health.HealthRecordAccessor,System.String,System.Int32)
  - Microsoft.Health.ApplicationConnection.GetVocabulary(System.String)
  - Microsoft.Health.ApplicationConnection.GetVocabulary(Microsoft.Health.VocabularyKey,System.Boolean)
  - Microsoft.Health.ApplicationConnection.GetVocabulary(System.Collections.Generic.IList{Microsoft.Health.VocabularyKey},System.Boolean)
  - Microsoft.Health.ApplicationConnection.GetVocabularyKeys
  - Microsoft.Health.ApplicationConnection.SearchVocabularyKeys(System.String,Microsoft.Health.VocabularySearchType,System.Nullable{System.Int32})
  - Microsoft.Health.ApplicationConnection.SearchVocabulary(Microsoft.Health.VocabularyKey,System.String,Microsoft.Health.VocabularySearchType,System.Nullable{System.Int32})
  - Microsoft.Health.ApplicationConnection.SendInsecureMessageFromApplication(System.Collections.Generic.IList{Microsoft.Health.MailRecipient},System.String,System.String,System.String,System.String,System.String)
  - Microsoft.Health.ApplicationConnection.SendInsecureMessageFromApplication(System.Collections.Generic.IList{System.Guid},System.Boolean,System.String,System.String,System.String,System.String,System.String)
  - Microsoft.Health.ApplicationConnection.SendInsecureMessageToCustodiansFromApplication(System.Guid,System.Boolean,System.String,System.String,System.String,System.String,System.String)
  - Microsoft.Health.ApplicationConnection.GetPersonInfo
  - Microsoft.Health.ApplicationConnection.GetAuthorizedPeople
  - Microsoft.Health.ApplicationConnection.GetAuthorizedPeople(Microsoft.Health.GetAuthorizedPeopleSettings)
  - Microsoft.Health.ApplicationConnection.GetAuthorizedRecords(System.Collections.Generic.IList{System.Guid})
  - Microsoft.Health.ApplicationConnection.GetApplicationInfo
  - Microsoft.Health.ApplicationConnection.GetApplicationInfo(System.Boolean)
  - Microsoft.Health.ApplicationConnection.GetUpdatedRecordsForApplication(System.Nullable{System.DateTime})
  - Microsoft.Health.ApplicationConnection.GetUpdatedRecordInfoForApplication(System.Nullable{System.DateTime})
  - Microsoft.Health.ApplicationConnection.NewSignupCode
  - Microsoft.Health.ApplicationConnection.SelectInstance(Microsoft.Health.Location)
  - Microsoft.Health.ApplicationConnection.GetMeaningfulUseVDTReport(Microsoft.Health.DateRange)
  - Microsoft.Health.ApplicationConnection.GetMeaningfulUseTimelyAccessDocumentReport(Microsoft.Health.DateRange)
  - Microsoft.Health.ApplicationConnection.GetMeaningfulUseTimelyAccessDOPUDocumentReport(Microsoft.Health.DateRange)
  - Microsoft.Health.HealthServiceConnection.CreateRequest(System.String,System.Int32)
  - Microsoft.Health.HealthServiceConnection.CancelAllRequests
  - Microsoft.Health.HealthServiceConnection.GetServiceDefinition
  - Microsoft.Health.HealthServiceConnection.GetServiceDefinition(System.DateTime)
  - Microsoft.Health.HealthServiceConnection.GetServiceDefinition(Microsoft.Health.ServiceInfoSections)
  - Microsoft.Health.HealthServiceConnection.GetServiceDefinition(Microsoft.Health.ServiceInfoSections,System.DateTime)
  - Microsoft.Health.HealthServiceConnection.WebProxy
  - Microsoft.Health.HealthServiceConnection.ApplicationId
  - Microsoft.Health.HealthServiceConnection.RequestUrl
  - Microsoft.Health.HealthServiceConnection.ServiceInstance
  - Microsoft.Health.HealthServiceConnection.RequestTimeoutSeconds
  - Microsoft.Health.HealthServiceConnection.RequestTimeToLive
  - Microsoft.Health.HealthServiceConnection.Culture
  - Microsoft.Health.HealthServiceConnection.RequestCompressionMethod
  - Microsoft.Health.HealthServiceConnection.ResponseCompressionMethods
  - Microsoft.Health.HealthServiceConnection.AuthenticationToken
  - Microsoft.Health.HealthServiceConnection.Credential
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.AuthenticatedConnection.LogOn(System.String)
  commentId: M:Microsoft.Health.AuthenticatedConnection.LogOn(System.String)
  id: LogOn(System.String)
  parent: Microsoft.Health.AuthenticatedConnection
  langs:
  - csharp
  - vb
  name: LogOn(String)
  nameWithType: AuthenticatedConnection.LogOn(String)
  fullName: Microsoft.Health.AuthenticatedConnection.LogOn(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/AuthenticatedConnection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: LogOn
    path: AuthenticatedConnection.cs
    startLine: 72
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nUses the specified Live ID ticket to authenticate the user with HealthVault.\n"
  remarks: "\nThe calling ApplicationId, HealthServiceUrl, and ShellUrl are retrieved from the\napp.config file for the application.\n"
  example: []
  syntax:
    content: public static AuthenticatedConnection LogOn(string liveIdTicket)
    content.vb: Public Shared Function LogOn(liveIdTicket As String) As AuthenticatedConnection
    parameters:
    - id: liveIdTicket
      type: System.String
      description: "\nA Live ID ticket that was retrieved using the Live ID client APIs (IDCRL).\n"
    return:
      type: Microsoft.Health.AuthenticatedConnection
      description: "\nAn <xref href=\"Microsoft.Health.AuthenticatedConnection\" data-throw-if-not-resolved=\"false\"></xref> to HealthVault for the user specified in the\n<span class=\"paramref\">liveIdTicket</span>.\n"
  overload: Microsoft.Health.AuthenticatedConnection.LogOn*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">liveIdTicket</span> or is <strong>null</strong> or empty.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf verification of the passport ticket fails or there is a failure\nin finding a HealthVault account for the specified <span class=\"paramref\">liveIdTicket</span>.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.AuthenticatedConnection.LogOn(System.String,System.Boolean)
  commentId: M:Microsoft.Health.AuthenticatedConnection.LogOn(System.String,System.Boolean)
  id: LogOn(System.String,System.Boolean)
  parent: Microsoft.Health.AuthenticatedConnection
  langs:
  - csharp
  - vb
  name: LogOn(String, Boolean)
  nameWithType: AuthenticatedConnection.LogOn(String, Boolean)
  fullName: Microsoft.Health.AuthenticatedConnection.LogOn(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: Microsoft.Health/AuthenticatedConnection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: LogOn
    path: AuthenticatedConnection.cs
    startLine: 110
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nUses the specified Live ID ticket to authenticate the user with HealthVault.\n"
  remarks: "\nThe calling ApplicationId, HealthServiceUrl, and ShellUrl are retrieved from the\napp.config file for the application.\n"
  example: []
  syntax:
    content: public static AuthenticatedConnection LogOn(string liveIdTicket, bool isMra)
    content.vb: Public Shared Function LogOn(liveIdTicket As String, isMra As Boolean) As AuthenticatedConnection
    parameters:
    - id: liveIdTicket
      type: System.String
      description: "\nA Live ID ticket that was retrieved using the Live ID client APIs (IDCRL).\n"
    - id: isMra
      type: System.Boolean
      description: "\nTrue if the application is a multi-record application, or false otherwise. Multi-record\napplications can work with many user records at one time and does not rely on the\nselected record when performing operations.\n"
    return:
      type: Microsoft.Health.AuthenticatedConnection
      description: "\nAn <xref href=\"Microsoft.Health.AuthenticatedConnection\" data-throw-if-not-resolved=\"false\"></xref> to HealthVault for the user specified in the\n<span class=\"paramref\">liveIdTicket</span>.\n"
  overload: Microsoft.Health.AuthenticatedConnection.LogOn*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">liveIdTicket</span> or is <strong>null</strong> or empty.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf verification of the passport ticket fails or there is a failure\nin finding a HealthVault account for the specified <span class=\"paramref\">liveIdTicket</span>.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.AuthenticatedConnection.LogOn(System.String,System.Boolean,System.Threading.ManualResetEvent)
  commentId: M:Microsoft.Health.AuthenticatedConnection.LogOn(System.String,System.Boolean,System.Threading.ManualResetEvent)
  id: LogOn(System.String,System.Boolean,System.Threading.ManualResetEvent)
  parent: Microsoft.Health.AuthenticatedConnection
  langs:
  - csharp
  - vb
  name: LogOn(String, Boolean, ManualResetEvent)
  nameWithType: AuthenticatedConnection.LogOn(String, Boolean, ManualResetEvent)
  fullName: Microsoft.Health.AuthenticatedConnection.LogOn(System.String, System.Boolean, System.Threading.ManualResetEvent)
  type: Method
  source:
    remote:
      path: Microsoft.Health/AuthenticatedConnection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: LogOn
    path: AuthenticatedConnection.cs
    startLine: 165
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nUses the specified Live ID ticket to authenticate the user with HealthVault.\n"
  remarks: "\nThe calling ApplicationId, HealthServiceUrl, and ShellUrl are retrieved from the\napp.config file for the application.\n"
  example: []
  syntax:
    content: public static AuthenticatedConnection LogOn(string liveIdTicket, bool isMra, ManualResetEvent cancelTrigger)
    content.vb: Public Shared Function LogOn(liveIdTicket As String, isMra As Boolean, cancelTrigger As ManualResetEvent) As AuthenticatedConnection
    parameters:
    - id: liveIdTicket
      type: System.String
      description: "\nA Live ID ticket that was retrieved using the IDCRL.\n"
    - id: isMra
      type: System.Boolean
      description: "\nTrue if the application is a multi-record application, or false otherwise. Multi-record\napplications can work with many user records at one time and does not rely on the\nselected record when performing operations.\n"
    - id: cancelTrigger
      type: System.Threading.ManualResetEvent
      description: "\nIf the event gets triggered the log on request will be cancelled resulting in an\n<xref href=\"Microsoft.Health.HealthServiceRequestCancelledException\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    return:
      type: Microsoft.Health.AuthenticatedConnection
      description: "\nAn <xref href=\"Microsoft.Health.AuthenticatedConnection\" data-throw-if-not-resolved=\"false\"></xref> to HealthVault for the user specified in the\n<span class=\"paramref\">liveIdTicket</span>.\n"
  overload: Microsoft.Health.AuthenticatedConnection.LogOn*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">liveIdTicket</span> or is <strong>null</strong> or empty.\n"
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "\nIf the request to the HealthVault Shell to verify the <span class=\"paramref\">liveIdTicket</span>\nfails.\n"
  - type: Microsoft.Health.HealthServiceAccessDeniedException
    commentId: T:Microsoft.Health.HealthServiceAccessDeniedException
    description: "\nIf the user specified in the <span class=\"paramref\">liveIdTicket</span> could not be authenticated\nto HealthVault.\n"
  - type: Microsoft.Health.InvalidConfigurationException
    commentId: T:Microsoft.Health.InvalidConfigurationException
    description: "\nIf either the application identifier, platform URL or the shell URL is\nmissing from the configuration.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.AuthenticatedConnection.LogOn(System.String,System.Boolean,System.Threading.ManualResetEvent,System.Guid,System.Uri,System.Uri)
  commentId: M:Microsoft.Health.AuthenticatedConnection.LogOn(System.String,System.Boolean,System.Threading.ManualResetEvent,System.Guid,System.Uri,System.Uri)
  id: LogOn(System.String,System.Boolean,System.Threading.ManualResetEvent,System.Guid,System.Uri,System.Uri)
  parent: Microsoft.Health.AuthenticatedConnection
  langs:
  - csharp
  - vb
  name: LogOn(String, Boolean, ManualResetEvent, Guid, Uri, Uri)
  nameWithType: AuthenticatedConnection.LogOn(String, Boolean, ManualResetEvent, Guid, Uri, Uri)
  fullName: Microsoft.Health.AuthenticatedConnection.LogOn(System.String, System.Boolean, System.Threading.ManualResetEvent, System.Guid, System.Uri, System.Uri)
  type: Method
  source:
    remote:
      path: Microsoft.Health/AuthenticatedConnection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: LogOn
    path: AuthenticatedConnection.cs
    startLine: 249
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nUses the specified Live ID ticket to authenticate the user with HealthVault.\n"
  example: []
  syntax:
    content: public static AuthenticatedConnection LogOn(string liveIdTicket, bool isMra, ManualResetEvent cancelTrigger, Guid applicationId, Uri shellUrl, Uri healthServiceUrl)
    content.vb: Public Shared Function LogOn(liveIdTicket As String, isMra As Boolean, cancelTrigger As ManualResetEvent, applicationId As Guid, shellUrl As Uri, healthServiceUrl As Uri) As AuthenticatedConnection
    parameters:
    - id: liveIdTicket
      type: System.String
      description: "\nA Live ID ticket that was retrieved using the IDCRL.\n"
    - id: isMra
      type: System.Boolean
      description: "\nTrue if the application is a multi-record application, or false otherwise. Multi-record\napplications can work with many user records at one time and does not rely on the\nselected record when performing operations.\n"
    - id: cancelTrigger
      type: System.Threading.ManualResetEvent
      description: "\nIf the event gets triggered the log on request will be cancelled resulting in an\n<xref href=\"Microsoft.Health.HealthServiceRequestCancelledException\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    - id: applicationId
      type: System.Guid
      description: "\nThe unique HealthVault application identifier that the user is being logged into.\n"
    - id: shellUrl
      type: System.Uri
      description: "\nThe HealthVault Shell redirector URL. This is used to to verify the Live ID ticket before \nauthenticating the user to HealthVault.\n"
    - id: healthServiceUrl
      type: System.Uri
      description: "\nThe URL of the HealthVault service. Note, this must include the web service handler, \n\"wildcat.ashx\".\n"
    return:
      type: Microsoft.Health.AuthenticatedConnection
      description: "\nAn <xref href=\"Microsoft.Health.AuthenticatedConnection\" data-throw-if-not-resolved=\"false\"></xref> to HealthVault for the user specified in the\n<span class=\"paramref\">liveIdTicket</span>.\n"
  overload: Microsoft.Health.AuthenticatedConnection.LogOn*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">liveIdTicket</span> or is <strong>null</strong> or empty, or\n<span class=\"paramref\">applicationId</span> is <xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">shellUrl</span> or <span class=\"paramref\">healthServiceUrl</span> is <strong>null</strong>.\n"
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "\nIf the request to the HealthVault Shell to verify the <span class=\"paramref\">liveIdTicket</span>\nfails.\n"
  - type: Microsoft.Health.HealthServiceAccessDeniedException
    commentId: T:Microsoft.Health.HealthServiceAccessDeniedException
    description: "\nIf the user specified in the <span class=\"paramref\">liveIdTicket</span> could not be authenticated\nto HealthVault.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.AuthenticatedConnection.LogOn(System.String,System.Boolean,System.Boolean,System.Threading.ManualResetEvent,System.Guid,System.Uri,System.Uri)
  commentId: M:Microsoft.Health.AuthenticatedConnection.LogOn(System.String,System.Boolean,System.Boolean,System.Threading.ManualResetEvent,System.Guid,System.Uri,System.Uri)
  id: LogOn(System.String,System.Boolean,System.Boolean,System.Threading.ManualResetEvent,System.Guid,System.Uri,System.Uri)
  parent: Microsoft.Health.AuthenticatedConnection
  langs:
  - csharp
  - vb
  name: LogOn(String, Boolean, Boolean, ManualResetEvent, Guid, Uri, Uri)
  nameWithType: AuthenticatedConnection.LogOn(String, Boolean, Boolean, ManualResetEvent, Guid, Uri, Uri)
  fullName: Microsoft.Health.AuthenticatedConnection.LogOn(System.String, System.Boolean, System.Boolean, System.Threading.ManualResetEvent, System.Guid, System.Uri, System.Uri)
  type: Method
  source:
    remote:
      path: Microsoft.Health/AuthenticatedConnection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: LogOn
    path: AuthenticatedConnection.cs
    startLine: 324
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nUses the specified Live ID ticket to authenticate the user with HealthVault.\n"
  example: []
  syntax:
    content: public static AuthenticatedConnection LogOn(string liveIdTicket, bool isMra, bool isPersistent, ManualResetEvent cancelTrigger, Guid applicationId, Uri shellUrl, Uri healthServiceUrl)
    content.vb: Public Shared Function LogOn(liveIdTicket As String, isMra As Boolean, isPersistent As Boolean, cancelTrigger As ManualResetEvent, applicationId As Guid, shellUrl As Uri, healthServiceUrl As Uri) As AuthenticatedConnection
    parameters:
    - id: liveIdTicket
      type: System.String
      description: "\nA Live ID ticket that was retrieved using the IDCRL.\n"
    - id: isMra
      type: System.Boolean
      description: "\nTrue if the application is a multi-record application, or false otherwise. Multi-record\napplications can work with many user records at one time and does not rely on the\nselected record when performing operations.\n"
    - id: isPersistent
      type: System.Boolean
      description: "\nTrue if creating a persistent token, or false otherwise.  Persistent connections\nremain valid for the duration specified in the application's configuration within\nHealthVault.  Typically, persistent tokens are valid for up to one year.\n"
    - id: cancelTrigger
      type: System.Threading.ManualResetEvent
      description: "\nIf the event gets triggered the log on request will be cancelled resulting in an\n<xref href=\"Microsoft.Health.HealthServiceRequestCancelledException\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    - id: applicationId
      type: System.Guid
      description: "\nThe unique HealthVault application identifier that the user is being logged into.\n"
    - id: shellUrl
      type: System.Uri
      description: "\nThe HealthVault Shell redirector URL. This is used to to verify the Live ID ticket before \nauthenticating the user to HealthVault.\n"
    - id: healthServiceUrl
      type: System.Uri
      description: "\nThe URL of the HealthVault service. Note, this must include the web service handler, \n\"wildcat.ashx\".\n"
    return:
      type: Microsoft.Health.AuthenticatedConnection
      description: "\nAn <xref href=\"Microsoft.Health.AuthenticatedConnection\" data-throw-if-not-resolved=\"false\"></xref> to HealthVault for the user specified in the\n<span class=\"paramref\">liveIdTicket</span>.\n"
  overload: Microsoft.Health.AuthenticatedConnection.LogOn*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">liveIdTicket</span> or is <strong>null</strong> or empty, or\n<span class=\"paramref\">applicationId</span> is <xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">shellUrl</span> or <span class=\"paramref\">healthServiceUrl</span> is <strong>null</strong>.\n"
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "\nIf the request to the HealthVault Shell to verify the <span class=\"paramref\">liveIdTicket</span>\nfails.\n"
  - type: Microsoft.Health.HealthServiceAccessDeniedException
    commentId: T:Microsoft.Health.HealthServiceAccessDeniedException
    description: "\nIf the user specified in the <span class=\"paramref\">liveIdTicket</span> could not be authenticated\nto HealthVault.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.AuthenticatedConnection.#ctor(Microsoft.Health.Authentication.Credential)
  commentId: M:Microsoft.Health.AuthenticatedConnection.#ctor(Microsoft.Health.Authentication.Credential)
  id: '#ctor(Microsoft.Health.Authentication.Credential)'
  parent: Microsoft.Health.AuthenticatedConnection
  langs:
  - csharp
  - vb
  name: AuthenticatedConnection(Credential)
  nameWithType: AuthenticatedConnection.AuthenticatedConnection(Credential)
  fullName: Microsoft.Health.AuthenticatedConnection.AuthenticatedConnection(Microsoft.Health.Authentication.Credential)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health/AuthenticatedConnection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: AuthenticatedConnection.cs
    startLine: 557
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nCreates an instance of the <xref href=\"Microsoft.Health.AuthenticatedConnection\" data-throw-if-not-resolved=\"false\"></xref>\nclass with the specified credential.\n"
  remarks: "\nThe base class, <xref href=\"Microsoft.Health.ApplicationConnection\" data-throw-if-not-resolved=\"false\"></xref>, obtains an \napplication identifier and a service URL from the configuration file.\n"
  example: []
  syntax:
    content: public AuthenticatedConnection(Credential credential)
    content.vb: Public Sub New(credential As Credential)
    parameters:
    - id: credential
      type: Microsoft.Health.Authentication.Credential
      description: "\nThe credential of the user to authenticate for access to HealthVault.\n"
  overload: Microsoft.Health.AuthenticatedConnection.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <span class=\"paramref\">credential</span> parameter is <strong>null</strong>.\n"
  - type: Microsoft.Health.InvalidConfigurationException
    commentId: T:Microsoft.Health.InvalidConfigurationException
    description: "\nThe web or application configuration file does not contain \nconfiguration entries for \"ApplicationID\" or \"HealthServiceUrl\".\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.AuthenticatedConnection.#ctor(System.Guid,Microsoft.Health.Authentication.Credential)
  commentId: M:Microsoft.Health.AuthenticatedConnection.#ctor(System.Guid,Microsoft.Health.Authentication.Credential)
  id: '#ctor(System.Guid,Microsoft.Health.Authentication.Credential)'
  parent: Microsoft.Health.AuthenticatedConnection
  langs:
  - csharp
  - vb
  name: AuthenticatedConnection(Guid, Credential)
  nameWithType: AuthenticatedConnection.AuthenticatedConnection(Guid, Credential)
  fullName: Microsoft.Health.AuthenticatedConnection.AuthenticatedConnection(System.Guid, Microsoft.Health.Authentication.Credential)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health/AuthenticatedConnection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: AuthenticatedConnection.cs
    startLine: 583
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nCreates an instance of the <xref href=\"Microsoft.Health.AuthenticatedConnection\" data-throw-if-not-resolved=\"false\"></xref>\nclass with the specified application identifier, and \ncredential.\n"
  example: []
  syntax:
    content: public AuthenticatedConnection(Guid callingApplicationId, Credential credential)
    content.vb: Public Sub New(callingApplicationId As Guid, credential As Credential)
    parameters:
    - id: callingApplicationId
      type: System.Guid
      description: "\nThe HealthVault application identifier.\n"
    - id: credential
      type: Microsoft.Health.Authentication.Credential
      description: "\nThe credential of the user to authenticate for access to HealthVault.\n"
  overload: Microsoft.Health.AuthenticatedConnection.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <span class=\"paramref\">credential</span> parameter is <strong>null</strong>.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.AuthenticatedConnection.#ctor(Microsoft.Health.HealthServiceInstance,Microsoft.Health.Authentication.Credential)
  commentId: M:Microsoft.Health.AuthenticatedConnection.#ctor(Microsoft.Health.HealthServiceInstance,Microsoft.Health.Authentication.Credential)
  id: '#ctor(Microsoft.Health.HealthServiceInstance,Microsoft.Health.Authentication.Credential)'
  parent: Microsoft.Health.AuthenticatedConnection
  langs:
  - csharp
  - vb
  name: AuthenticatedConnection(HealthServiceInstance, Credential)
  nameWithType: AuthenticatedConnection.AuthenticatedConnection(HealthServiceInstance, Credential)
  fullName: Microsoft.Health.AuthenticatedConnection.AuthenticatedConnection(Microsoft.Health.HealthServiceInstance, Microsoft.Health.Authentication.Credential)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health/AuthenticatedConnection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: AuthenticatedConnection.cs
    startLine: 614
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nCreates an instance of the <xref href=\"Microsoft.Health.AuthenticatedConnection\" data-throw-if-not-resolved=\"false\"></xref>\nclass with the specified HealthVault web-service instance\nand credential.\n"
  remarks: "\nIf <span class=\"paramref\">serviceInstance</span> is <strong>null</strong>, the URL for the configured\ndefault HealthVault web-service instance is used.\n"
  example: []
  syntax:
    content: public AuthenticatedConnection(HealthServiceInstance serviceInstance, Credential credential)
    content.vb: Public Sub New(serviceInstance As HealthServiceInstance, credential As Credential)
    parameters:
    - id: serviceInstance
      type: Microsoft.Health.HealthServiceInstance
      description: "\nThe HealthVault web-service instance.\n"
    - id: credential
      type: Microsoft.Health.Authentication.Credential
      description: "\nThe credential of the user to authenticate for access to HealthVault.\n"
  overload: Microsoft.Health.AuthenticatedConnection.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <span class=\"paramref\">credential</span> parameter is <strong>null</strong>.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.AuthenticatedConnection.#ctor(System.Guid,Microsoft.Health.HealthServiceInstance,Microsoft.Health.Authentication.Credential)
  commentId: M:Microsoft.Health.AuthenticatedConnection.#ctor(System.Guid,Microsoft.Health.HealthServiceInstance,Microsoft.Health.Authentication.Credential)
  id: '#ctor(System.Guid,Microsoft.Health.HealthServiceInstance,Microsoft.Health.Authentication.Credential)'
  parent: Microsoft.Health.AuthenticatedConnection
  langs:
  - csharp
  - vb
  name: AuthenticatedConnection(Guid, HealthServiceInstance, Credential)
  nameWithType: AuthenticatedConnection.AuthenticatedConnection(Guid, HealthServiceInstance, Credential)
  fullName: Microsoft.Health.AuthenticatedConnection.AuthenticatedConnection(System.Guid, Microsoft.Health.HealthServiceInstance, Microsoft.Health.Authentication.Credential)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health/AuthenticatedConnection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: AuthenticatedConnection.cs
    startLine: 649
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nCreates an instance of the <xref href=\"Microsoft.Health.AuthenticatedConnection\" data-throw-if-not-resolved=\"false\"></xref>\nclass with the specified application identifier, HealthVault web-service instance,\nand credential.\n"
  remarks: "\nIf <span class=\"paramref\">serviceInstance</span> is <strong>null</strong>, the URL for the configured\ndefault HealthVault web-service instance is used.\n"
  example: []
  syntax:
    content: public AuthenticatedConnection(Guid callingApplicationId, HealthServiceInstance serviceInstance, Credential credential)
    content.vb: Public Sub New(callingApplicationId As Guid, serviceInstance As HealthServiceInstance, credential As Credential)
    parameters:
    - id: callingApplicationId
      type: System.Guid
      description: "\nThe HealthVault application identifier.\n"
    - id: serviceInstance
      type: Microsoft.Health.HealthServiceInstance
      description: "\nThe HealthVault web-service instance.\n"
    - id: credential
      type: Microsoft.Health.Authentication.Credential
      description: "\nThe credential of the user to authenticate for access to HealthVault.\n"
  overload: Microsoft.Health.AuthenticatedConnection.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <span class=\"paramref\">credential</span> parameter is <strong>null</strong>.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.AuthenticatedConnection.#ctor(System.Guid,System.Uri,Microsoft.Health.Authentication.Credential)
  commentId: M:Microsoft.Health.AuthenticatedConnection.#ctor(System.Guid,System.Uri,Microsoft.Health.Authentication.Credential)
  id: '#ctor(System.Guid,System.Uri,Microsoft.Health.Authentication.Credential)'
  parent: Microsoft.Health.AuthenticatedConnection
  langs:
  - csharp
  - vb
  name: AuthenticatedConnection(Guid, Uri, Credential)
  nameWithType: AuthenticatedConnection.AuthenticatedConnection(Guid, Uri, Credential)
  fullName: Microsoft.Health.AuthenticatedConnection.AuthenticatedConnection(System.Guid, System.Uri, Microsoft.Health.Authentication.Credential)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health/AuthenticatedConnection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: AuthenticatedConnection.cs
    startLine: 684
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nCreates an instance of the <xref href=\"Microsoft.Health.AuthenticatedConnection\" data-throw-if-not-resolved=\"false\"></xref>\nclass with the specified application identifier, URL, and \ncredential.\n"
  example: []
  syntax:
    content: public AuthenticatedConnection(Guid callingApplicationId, Uri healthServiceUrl, Credential credential)
    content.vb: Public Sub New(callingApplicationId As Guid, healthServiceUrl As Uri, credential As Credential)
    parameters:
    - id: callingApplicationId
      type: System.Guid
      description: "\nThe HealthVault application identifier.\n"
    - id: healthServiceUrl
      type: System.Uri
      description: "\nThe URL of the HealthVault web service.\n"
    - id: credential
      type: Microsoft.Health.Authentication.Credential
      description: "\nThe credential of the user to authenticate for access to HealthVault.\n"
  overload: Microsoft.Health.AuthenticatedConnection.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <span class=\"paramref\">healthServiceUrl</span> or \n<span class=\"paramref\">credential</span> parameter is <strong>null</strong>.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.AuthenticatedConnection.#ctor(System.Guid,System.String,Microsoft.Health.Authentication.Credential)
  commentId: M:Microsoft.Health.AuthenticatedConnection.#ctor(System.Guid,System.String,Microsoft.Health.Authentication.Credential)
  id: '#ctor(System.Guid,System.String,Microsoft.Health.Authentication.Credential)'
  parent: Microsoft.Health.AuthenticatedConnection
  langs:
  - csharp
  - vb
  name: AuthenticatedConnection(Guid, String, Credential)
  nameWithType: AuthenticatedConnection.AuthenticatedConnection(Guid, String, Credential)
  fullName: Microsoft.Health.AuthenticatedConnection.AuthenticatedConnection(System.Guid, System.String, Microsoft.Health.Authentication.Credential)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health/AuthenticatedConnection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: AuthenticatedConnection.cs
    startLine: 719
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nCreates an instance of the <xref href=\"Microsoft.Health.AuthenticatedConnection\" data-throw-if-not-resolved=\"false\"></xref>\nclass with the specified application identifier, a string \nrepresenting the URL, and credential.\n"
  example: []
  syntax:
    content: public AuthenticatedConnection(Guid callingApplicationId, string healthServiceUrl, Credential credential)
    content.vb: Public Sub New(callingApplicationId As Guid, healthServiceUrl As String, credential As Credential)
    parameters:
    - id: callingApplicationId
      type: System.Guid
      description: "\nThe HealthVault application identifier.\n"
    - id: healthServiceUrl
      type: System.String
      description: "\nA string representing the URL of the HealthVault web service.\n"
    - id: credential
      type: Microsoft.Health.Authentication.Credential
      description: "\nThe credential of the user to authenticate for access to HealthVault.\n"
  overload: Microsoft.Health.AuthenticatedConnection.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <span class=\"paramref\">healthServiceUrl</span> or \n<span class=\"paramref\">credential</span> parameter is <strong>null</strong>.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.AuthenticatedConnection.Authenticate
  commentId: M:Microsoft.Health.AuthenticatedConnection.Authenticate
  id: Authenticate
  parent: Microsoft.Health.AuthenticatedConnection
  langs:
  - csharp
  - vb
  name: Authenticate()
  nameWithType: AuthenticatedConnection.Authenticate()
  fullName: Microsoft.Health.AuthenticatedConnection.Authenticate()
  type: Method
  source:
    remote:
      path: Microsoft.Health/AuthenticatedConnection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Authenticate
    path: AuthenticatedConnection.cs
    startLine: 761
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nLogs on to the HealthVault service using the username and password.\n"
  remarks: "\nIt is not necessary to explicitly call this method before calling\nany of the methods that access the service. Those methods will \ncall this method if the user has not already been authenticated. \nThis method is provided as a convenience to allow for separate \nerror handling for authorization errors.\n"
  example: []
  syntax:
    content: public void Authenticate()
    content.vb: Public Sub Authenticate
  overload: Microsoft.Health.AuthenticatedConnection.Authenticate*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\nThe caller does not have permission to connect to the requested\nURI or a URI to which the request is redirected.\n"
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "\nThe authorization URL specified to the constructor is not a \nvalid URI.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe authorization was not returned in the response from the \nserver.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.AuthenticatedConnection.Impersonate(System.Guid)
  commentId: M:Microsoft.Health.AuthenticatedConnection.Impersonate(System.Guid)
  id: Impersonate(System.Guid)
  parent: Microsoft.Health.AuthenticatedConnection
  langs:
  - csharp
  - vb
  name: Impersonate(Guid)
  nameWithType: AuthenticatedConnection.Impersonate(Guid)
  fullName: Microsoft.Health.AuthenticatedConnection.Impersonate(System.Guid)
  type: Method
  source:
    remote:
      path: Microsoft.Health/AuthenticatedConnection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Impersonate
    path: AuthenticatedConnection.cs
    startLine: 801
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nSets the identifier for the person being impersonated.\n"
  remarks: "\nImpersonation occurs when the authenticated person wants to make\na request to the HealthVault service on behalf of another person. This\nshould not occur in most applications.\n<br /><br />\nThe authenticated person must have the rights to call the requested\nmethod for the person being impersonated. If that right exists, all\nsecurity processing occurs using the impersonated person's \nidentity. If the right does not exist, the caller receives an\n<xref href=\"Microsoft.Health.HealthServiceAccessDeniedException\" data-throw-if-not-resolved=\"false\"></xref> upon the first \ninvocation of a method that accesses the HealthVault service.\n<br /><br />\nTo start impersonating, call the <xref href=\"Microsoft.Health.AuthenticatedConnection.Impersonate(System.Guid)\" data-throw-if-not-resolved=\"false\"></xref> method.\nTo stop impersonating, call the <xref href=\"Microsoft.Health.AuthenticatedConnection.StopImpersonating\" data-throw-if-not-resolved=\"false\"></xref>\nmethod.\n"
  example: []
  syntax:
    content: public void Impersonate(Guid targetPersonId)
    content.vb: Public Sub Impersonate(targetPersonId As Guid)
    parameters:
    - id: targetPersonId
      type: System.Guid
      description: "\nThe unique identifier for the person to impersonate.\n"
  overload: Microsoft.Health.AuthenticatedConnection.Impersonate*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">targetPersonId</span> parameter is Guid.Empty.\n"
  seealso:
  - linkId: Microsoft.Health.AuthenticatedConnection.StopImpersonating
    commentId: M:Microsoft.Health.AuthenticatedConnection.StopImpersonating
  - linkId: Microsoft.Health.AuthenticatedConnection.IsImpersonating
    commentId: P:Microsoft.Health.AuthenticatedConnection.IsImpersonating
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.AuthenticatedConnection.StopImpersonating
  commentId: M:Microsoft.Health.AuthenticatedConnection.StopImpersonating
  id: StopImpersonating
  parent: Microsoft.Health.AuthenticatedConnection
  langs:
  - csharp
  - vb
  name: StopImpersonating()
  nameWithType: AuthenticatedConnection.StopImpersonating()
  fullName: Microsoft.Health.AuthenticatedConnection.StopImpersonating()
  type: Method
  source:
    remote:
      path: Microsoft.Health/AuthenticatedConnection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: StopImpersonating
    path: AuthenticatedConnection.cs
    startLine: 842
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nUnsets the target person identifier for all requests.\n"
  remarks: "\nAll future requests will act as the authenticated person.\n<br /><br />\nNote, to change the person that is being impersonated,\nStopImpersonating does not have to be called. \n<xref href=\"Microsoft.Health.AuthenticatedConnection.Impersonate(System.Guid)\" data-throw-if-not-resolved=\"false\"></xref> can be called directly with a\nnew target person identifier.\n<br /><br />\nImpersonation occurs when the authenticated person wants to make\na request to the HealthVault service on behalf of another person. This\nshould not occur in most applications.\n<br /><br />\nThe authenticated person must have the rights to call the requested\nmethod for the person being impersonated. If that right exists, all\nsecurity processing occurs using the impersonated person's \nidentity. If the right does not exist, the caller receives a\n<xref href=\"Microsoft.Health.HealthServiceAccessDeniedException\" data-throw-if-not-resolved=\"false\"></xref> upon the first \ninvocation of a method that accesses the HealthVault service.\n<br /><br />\nTo start impersonating, call the <xref href=\"Microsoft.Health.AuthenticatedConnection.Impersonate(System.Guid)\" data-throw-if-not-resolved=\"false\"></xref> method.\nTo stop impersonating, call the <xref href=\"Microsoft.Health.AuthenticatedConnection.StopImpersonating\" data-throw-if-not-resolved=\"false\"></xref>\nmethod.\n"
  example: []
  syntax:
    content: public void StopImpersonating()
    content.vb: Public Sub StopImpersonating
  overload: Microsoft.Health.AuthenticatedConnection.StopImpersonating*
  seealso:
  - linkId: Microsoft.Health.AuthenticatedConnection.Impersonate(System.Guid)
    commentId: M:Microsoft.Health.AuthenticatedConnection.Impersonate(System.Guid)
  - linkId: Microsoft.Health.AuthenticatedConnection.IsImpersonating
    commentId: P:Microsoft.Health.AuthenticatedConnection.IsImpersonating
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.AuthenticatedConnection.IsImpersonating
  commentId: P:Microsoft.Health.AuthenticatedConnection.IsImpersonating
  id: IsImpersonating
  parent: Microsoft.Health.AuthenticatedConnection
  langs:
  - csharp
  - vb
  name: IsImpersonating
  nameWithType: AuthenticatedConnection.IsImpersonating
  fullName: Microsoft.Health.AuthenticatedConnection.IsImpersonating
  type: Property
  source:
    remote:
      path: Microsoft.Health/AuthenticatedConnection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IsImpersonating
    path: AuthenticatedConnection.cs
    startLine: 878
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the value which states whether or not the current connection\nis impersonating a different user than who is authenticated.\n"
  remarks: "\nImpersonation occurs when the authenticated person wants to make\na request to the HealthVault service on behalf of another person. This\nshould not occur in most applications.\n<br /><br />\nThe authenticated person must have the rights to call the requested\nmethod for the person being impersonated. If that right exists, all\nsecurity processing occurs using the impersonated person's \nidentity. If the right does not exist, the caller receives a\n<xref href=\"Microsoft.Health.HealthServiceAccessDeniedException\" data-throw-if-not-resolved=\"false\"></xref> upon the first \ninvocation of a method that accesses the HealthVault service.\n<br /><br />\nTo start impersonating, call the <xref href=\"Microsoft.Health.AuthenticatedConnection.Impersonate(System.Guid)\" data-throw-if-not-resolved=\"false\"></xref> method.\nTo stop impersonating, call the <xref href=\"Microsoft.Health.AuthenticatedConnection.StopImpersonating\" data-throw-if-not-resolved=\"false\"></xref>\nmethod.\n"
  example: []
  syntax:
    content: public bool IsImpersonating { get; }
    content.vb: Public ReadOnly Property IsImpersonating As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<strong>true</strong> if <xref href=\"Microsoft.Health.AuthenticatedConnection.Impersonate(System.Guid)\" data-throw-if-not-resolved=\"false\"></xref> has been called with a \nvalid target person identifier and <xref href=\"Microsoft.Health.AuthenticatedConnection.StopImpersonating\" data-throw-if-not-resolved=\"false\"></xref> \nhas not been called; otherwise, <strong>false</strong>.\n"
  overload: Microsoft.Health.AuthenticatedConnection.IsImpersonating*
  seealso:
  - linkId: Microsoft.Health.AuthenticatedConnection.Impersonate(System.Guid)
    commentId: M:Microsoft.Health.AuthenticatedConnection.Impersonate(System.Guid)
  - linkId: Microsoft.Health.AuthenticatedConnection.StopImpersonating
    commentId: M:Microsoft.Health.AuthenticatedConnection.StopImpersonating
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.AuthenticatedConnection.GetAllApplicationSettings
  commentId: M:Microsoft.Health.AuthenticatedConnection.GetAllApplicationSettings
  id: GetAllApplicationSettings
  parent: Microsoft.Health.AuthenticatedConnection
  langs:
  - csharp
  - vb
  name: GetAllApplicationSettings()
  nameWithType: AuthenticatedConnection.GetAllApplicationSettings()
  fullName: Microsoft.Health.AuthenticatedConnection.GetAllApplicationSettings()
  type: Method
  source:
    remote:
      path: Microsoft.Health/AuthenticatedConnection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetAllApplicationSettings
    path: AuthenticatedConnection.cs
    startLine: 910
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the application settings for the current application and person.\n"
  example: []
  syntax:
    content: public ApplicationSettings GetAllApplicationSettings()
    content.vb: Public Function GetAllApplicationSettings As ApplicationSettings
    return:
      type: Microsoft.Health.ApplicationSettings
      description: "\nA complete set of application settings including the XML, selected record ID, etc.\n"
  overload: Microsoft.Health.AuthenticatedConnection.GetAllApplicationSettings*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.AuthenticatedConnection.GetApplicationSettings
  commentId: M:Microsoft.Health.AuthenticatedConnection.GetApplicationSettings
  id: GetApplicationSettings
  parent: Microsoft.Health.AuthenticatedConnection
  langs:
  - csharp
  - vb
  name: GetApplicationSettings()
  nameWithType: AuthenticatedConnection.GetApplicationSettings()
  fullName: Microsoft.Health.AuthenticatedConnection.GetApplicationSettings()
  type: Method
  source:
    remote:
      path: Microsoft.Health/AuthenticatedConnection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetApplicationSettings
    path: AuthenticatedConnection.cs
    startLine: 930
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the application settings for the current application and\nperson.\n"
  remarks: "\nThis might be <strong>null</strong> if no application settings have been \nstored for the application or user.\n"
  example: []
  syntax:
    content: public IXPathNavigable GetApplicationSettings()
    content.vb: Public Function GetApplicationSettings As IXPathNavigable
    return:
      type: System.Xml.XPath.IXPathNavigable
      description: "\nThe application settings XML.\n"
  overload: Microsoft.Health.AuthenticatedConnection.GetApplicationSettings*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.AuthenticatedConnection.SetApplicationSettings(System.Xml.XPath.IXPathNavigable)
  commentId: M:Microsoft.Health.AuthenticatedConnection.SetApplicationSettings(System.Xml.XPath.IXPathNavigable)
  id: SetApplicationSettings(System.Xml.XPath.IXPathNavigable)
  parent: Microsoft.Health.AuthenticatedConnection
  langs:
  - csharp
  - vb
  name: SetApplicationSettings(IXPathNavigable)
  nameWithType: AuthenticatedConnection.SetApplicationSettings(IXPathNavigable)
  fullName: Microsoft.Health.AuthenticatedConnection.SetApplicationSettings(System.Xml.XPath.IXPathNavigable)
  type: Method
  source:
    remote:
      path: Microsoft.Health/AuthenticatedConnection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SetApplicationSettings
    path: AuthenticatedConnection.cs
    startLine: 950
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nSets the application settings for the current application and\nperson.\n"
  remarks: "\nThis might be <strong>null</strong> if no application settings have been stored\nfor the application or user.\n"
  example: []
  syntax:
    content: public void SetApplicationSettings(IXPathNavigable applicationSettings)
    content.vb: Public Sub SetApplicationSettings(applicationSettings As IXPathNavigable)
    parameters:
    - id: applicationSettings
      type: System.Xml.XPath.IXPathNavigable
      description: "\nThe application settings XML.\n"
  overload: Microsoft.Health.AuthenticatedConnection.SetApplicationSettings*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Health.AnonymousConnection
  commentId: T:Microsoft.Health.AnonymousConnection
  isExternal: false
  name: AnonymousConnection
  nameWithType: AnonymousConnection
  fullName: Microsoft.Health.AnonymousConnection
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Health.HealthServiceConnection
  commentId: T:Microsoft.Health.HealthServiceConnection
  parent: Microsoft.Health
  isExternal: false
  name: HealthServiceConnection
  nameWithType: HealthServiceConnection
  fullName: Microsoft.Health.HealthServiceConnection
- uid: Microsoft.Health.ApplicationConnection
  commentId: T:Microsoft.Health.ApplicationConnection
  parent: Microsoft.Health
  isExternal: false
  name: ApplicationConnection
  nameWithType: ApplicationConnection
  fullName: Microsoft.Health.ApplicationConnection
- uid: Microsoft.Health.ApplicationConnection.CreateRequest(Microsoft.Health.HealthRecordAccessor,System.String,System.Int32)
  commentId: M:Microsoft.Health.ApplicationConnection.CreateRequest(Microsoft.Health.HealthRecordAccessor,System.String,System.Int32)
  parent: Microsoft.Health.ApplicationConnection
  isExternal: true
  name: CreateRequest(HealthRecordAccessor, String, Int32)
  nameWithType: ApplicationConnection.CreateRequest(HealthRecordAccessor, String, Int32)
  fullName: Microsoft.Health.ApplicationConnection.CreateRequest(Microsoft.Health.HealthRecordAccessor, System.String, System.Int32)
  spec.csharp:
  - uid: Microsoft.Health.ApplicationConnection.CreateRequest(Microsoft.Health.HealthRecordAccessor,System.String,System.Int32)
    name: CreateRequest
    nameWithType: ApplicationConnection.CreateRequest
    fullName: Microsoft.Health.ApplicationConnection.CreateRequest
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.HealthRecordAccessor
    name: HealthRecordAccessor
    nameWithType: HealthRecordAccessor
    fullName: Microsoft.Health.HealthRecordAccessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.ApplicationConnection.CreateRequest(Microsoft.Health.HealthRecordAccessor,System.String,System.Int32)
    name: CreateRequest
    nameWithType: ApplicationConnection.CreateRequest
    fullName: Microsoft.Health.ApplicationConnection.CreateRequest
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.HealthRecordAccessor
    name: HealthRecordAccessor
    nameWithType: HealthRecordAccessor
    fullName: Microsoft.Health.HealthRecordAccessor
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ApplicationConnection.GetVocabulary(System.String)
  commentId: M:Microsoft.Health.ApplicationConnection.GetVocabulary(System.String)
  parent: Microsoft.Health.ApplicationConnection
  isExternal: true
  name: GetVocabulary(String)
  nameWithType: ApplicationConnection.GetVocabulary(String)
  fullName: Microsoft.Health.ApplicationConnection.GetVocabulary(System.String)
  spec.csharp:
  - uid: Microsoft.Health.ApplicationConnection.GetVocabulary(System.String)
    name: GetVocabulary
    nameWithType: ApplicationConnection.GetVocabulary
    fullName: Microsoft.Health.ApplicationConnection.GetVocabulary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.ApplicationConnection.GetVocabulary(System.String)
    name: GetVocabulary
    nameWithType: ApplicationConnection.GetVocabulary
    fullName: Microsoft.Health.ApplicationConnection.GetVocabulary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ApplicationConnection.GetVocabulary(Microsoft.Health.VocabularyKey,System.Boolean)
  commentId: M:Microsoft.Health.ApplicationConnection.GetVocabulary(Microsoft.Health.VocabularyKey,System.Boolean)
  parent: Microsoft.Health.ApplicationConnection
  isExternal: true
  name: GetVocabulary(VocabularyKey, Boolean)
  nameWithType: ApplicationConnection.GetVocabulary(VocabularyKey, Boolean)
  fullName: Microsoft.Health.ApplicationConnection.GetVocabulary(Microsoft.Health.VocabularyKey, System.Boolean)
  spec.csharp:
  - uid: Microsoft.Health.ApplicationConnection.GetVocabulary(Microsoft.Health.VocabularyKey,System.Boolean)
    name: GetVocabulary
    nameWithType: ApplicationConnection.GetVocabulary
    fullName: Microsoft.Health.ApplicationConnection.GetVocabulary
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.VocabularyKey
    name: VocabularyKey
    nameWithType: VocabularyKey
    fullName: Microsoft.Health.VocabularyKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.ApplicationConnection.GetVocabulary(Microsoft.Health.VocabularyKey,System.Boolean)
    name: GetVocabulary
    nameWithType: ApplicationConnection.GetVocabulary
    fullName: Microsoft.Health.ApplicationConnection.GetVocabulary
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.VocabularyKey
    name: VocabularyKey
    nameWithType: VocabularyKey
    fullName: Microsoft.Health.VocabularyKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ApplicationConnection.GetVocabulary(System.Collections.Generic.IList{Microsoft.Health.VocabularyKey},System.Boolean)
  commentId: M:Microsoft.Health.ApplicationConnection.GetVocabulary(System.Collections.Generic.IList{Microsoft.Health.VocabularyKey},System.Boolean)
  parent: Microsoft.Health.ApplicationConnection
  isExternal: true
  name: GetVocabulary(IList<VocabularyKey>, Boolean)
  nameWithType: ApplicationConnection.GetVocabulary(IList<VocabularyKey>, Boolean)
  fullName: Microsoft.Health.ApplicationConnection.GetVocabulary(System.Collections.Generic.IList<Microsoft.Health.VocabularyKey>, System.Boolean)
  nameWithType.vb: ApplicationConnection.GetVocabulary(IList(Of VocabularyKey), Boolean)
  fullName.vb: Microsoft.Health.ApplicationConnection.GetVocabulary(System.Collections.Generic.IList(Of Microsoft.Health.VocabularyKey), System.Boolean)
  name.vb: GetVocabulary(IList(Of VocabularyKey), Boolean)
  spec.csharp:
  - uid: Microsoft.Health.ApplicationConnection.GetVocabulary(System.Collections.Generic.IList{Microsoft.Health.VocabularyKey},System.Boolean)
    name: GetVocabulary
    nameWithType: ApplicationConnection.GetVocabulary
    fullName: Microsoft.Health.ApplicationConnection.GetVocabulary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.VocabularyKey
    name: VocabularyKey
    nameWithType: VocabularyKey
    fullName: Microsoft.Health.VocabularyKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.ApplicationConnection.GetVocabulary(System.Collections.Generic.IList{Microsoft.Health.VocabularyKey},System.Boolean)
    name: GetVocabulary
    nameWithType: ApplicationConnection.GetVocabulary
    fullName: Microsoft.Health.ApplicationConnection.GetVocabulary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.VocabularyKey
    name: VocabularyKey
    nameWithType: VocabularyKey
    fullName: Microsoft.Health.VocabularyKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ApplicationConnection.GetVocabularyKeys
  commentId: M:Microsoft.Health.ApplicationConnection.GetVocabularyKeys
  parent: Microsoft.Health.ApplicationConnection
  isExternal: false
  name: GetVocabularyKeys()
  nameWithType: ApplicationConnection.GetVocabularyKeys()
  fullName: Microsoft.Health.ApplicationConnection.GetVocabularyKeys()
  spec.csharp:
  - uid: Microsoft.Health.ApplicationConnection.GetVocabularyKeys
    name: GetVocabularyKeys
    nameWithType: ApplicationConnection.GetVocabularyKeys
    fullName: Microsoft.Health.ApplicationConnection.GetVocabularyKeys
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.ApplicationConnection.GetVocabularyKeys
    name: GetVocabularyKeys
    nameWithType: ApplicationConnection.GetVocabularyKeys
    fullName: Microsoft.Health.ApplicationConnection.GetVocabularyKeys
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ApplicationConnection.SearchVocabularyKeys(System.String,Microsoft.Health.VocabularySearchType,System.Nullable{System.Int32})
  commentId: M:Microsoft.Health.ApplicationConnection.SearchVocabularyKeys(System.String,Microsoft.Health.VocabularySearchType,System.Nullable{System.Int32})
  parent: Microsoft.Health.ApplicationConnection
  isExternal: true
  name: SearchVocabularyKeys(String, VocabularySearchType, Nullable<Int32>)
  nameWithType: ApplicationConnection.SearchVocabularyKeys(String, VocabularySearchType, Nullable<Int32>)
  fullName: Microsoft.Health.ApplicationConnection.SearchVocabularyKeys(System.String, Microsoft.Health.VocabularySearchType, System.Nullable<System.Int32>)
  nameWithType.vb: ApplicationConnection.SearchVocabularyKeys(String, VocabularySearchType, Nullable(Of Int32))
  fullName.vb: Microsoft.Health.ApplicationConnection.SearchVocabularyKeys(System.String, Microsoft.Health.VocabularySearchType, System.Nullable(Of System.Int32))
  name.vb: SearchVocabularyKeys(String, VocabularySearchType, Nullable(Of Int32))
  spec.csharp:
  - uid: Microsoft.Health.ApplicationConnection.SearchVocabularyKeys(System.String,Microsoft.Health.VocabularySearchType,System.Nullable{System.Int32})
    name: SearchVocabularyKeys
    nameWithType: ApplicationConnection.SearchVocabularyKeys
    fullName: Microsoft.Health.ApplicationConnection.SearchVocabularyKeys
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.VocabularySearchType
    name: VocabularySearchType
    nameWithType: VocabularySearchType
    fullName: Microsoft.Health.VocabularySearchType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.ApplicationConnection.SearchVocabularyKeys(System.String,Microsoft.Health.VocabularySearchType,System.Nullable{System.Int32})
    name: SearchVocabularyKeys
    nameWithType: ApplicationConnection.SearchVocabularyKeys
    fullName: Microsoft.Health.ApplicationConnection.SearchVocabularyKeys
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.VocabularySearchType
    name: VocabularySearchType
    nameWithType: VocabularySearchType
    fullName: Microsoft.Health.VocabularySearchType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ApplicationConnection.SearchVocabulary(Microsoft.Health.VocabularyKey,System.String,Microsoft.Health.VocabularySearchType,System.Nullable{System.Int32})
  commentId: M:Microsoft.Health.ApplicationConnection.SearchVocabulary(Microsoft.Health.VocabularyKey,System.String,Microsoft.Health.VocabularySearchType,System.Nullable{System.Int32})
  parent: Microsoft.Health.ApplicationConnection
  isExternal: true
  name: SearchVocabulary(VocabularyKey, String, VocabularySearchType, Nullable<Int32>)
  nameWithType: ApplicationConnection.SearchVocabulary(VocabularyKey, String, VocabularySearchType, Nullable<Int32>)
  fullName: Microsoft.Health.ApplicationConnection.SearchVocabulary(Microsoft.Health.VocabularyKey, System.String, Microsoft.Health.VocabularySearchType, System.Nullable<System.Int32>)
  nameWithType.vb: ApplicationConnection.SearchVocabulary(VocabularyKey, String, VocabularySearchType, Nullable(Of Int32))
  fullName.vb: Microsoft.Health.ApplicationConnection.SearchVocabulary(Microsoft.Health.VocabularyKey, System.String, Microsoft.Health.VocabularySearchType, System.Nullable(Of System.Int32))
  name.vb: SearchVocabulary(VocabularyKey, String, VocabularySearchType, Nullable(Of Int32))
  spec.csharp:
  - uid: Microsoft.Health.ApplicationConnection.SearchVocabulary(Microsoft.Health.VocabularyKey,System.String,Microsoft.Health.VocabularySearchType,System.Nullable{System.Int32})
    name: SearchVocabulary
    nameWithType: ApplicationConnection.SearchVocabulary
    fullName: Microsoft.Health.ApplicationConnection.SearchVocabulary
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.VocabularyKey
    name: VocabularyKey
    nameWithType: VocabularyKey
    fullName: Microsoft.Health.VocabularyKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.VocabularySearchType
    name: VocabularySearchType
    nameWithType: VocabularySearchType
    fullName: Microsoft.Health.VocabularySearchType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.ApplicationConnection.SearchVocabulary(Microsoft.Health.VocabularyKey,System.String,Microsoft.Health.VocabularySearchType,System.Nullable{System.Int32})
    name: SearchVocabulary
    nameWithType: ApplicationConnection.SearchVocabulary
    fullName: Microsoft.Health.ApplicationConnection.SearchVocabulary
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.VocabularyKey
    name: VocabularyKey
    nameWithType: VocabularyKey
    fullName: Microsoft.Health.VocabularyKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.VocabularySearchType
    name: VocabularySearchType
    nameWithType: VocabularySearchType
    fullName: Microsoft.Health.VocabularySearchType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ApplicationConnection.SendInsecureMessageFromApplication(System.Collections.Generic.IList{Microsoft.Health.MailRecipient},System.String,System.String,System.String,System.String,System.String)
  commentId: M:Microsoft.Health.ApplicationConnection.SendInsecureMessageFromApplication(System.Collections.Generic.IList{Microsoft.Health.MailRecipient},System.String,System.String,System.String,System.String,System.String)
  parent: Microsoft.Health.ApplicationConnection
  isExternal: true
  name: SendInsecureMessageFromApplication(IList<MailRecipient>, String, String, String, String, String)
  nameWithType: ApplicationConnection.SendInsecureMessageFromApplication(IList<MailRecipient>, String, String, String, String, String)
  fullName: Microsoft.Health.ApplicationConnection.SendInsecureMessageFromApplication(System.Collections.Generic.IList<Microsoft.Health.MailRecipient>, System.String, System.String, System.String, System.String, System.String)
  nameWithType.vb: ApplicationConnection.SendInsecureMessageFromApplication(IList(Of MailRecipient), String, String, String, String, String)
  fullName.vb: Microsoft.Health.ApplicationConnection.SendInsecureMessageFromApplication(System.Collections.Generic.IList(Of Microsoft.Health.MailRecipient), System.String, System.String, System.String, System.String, System.String)
  name.vb: SendInsecureMessageFromApplication(IList(Of MailRecipient), String, String, String, String, String)
  spec.csharp:
  - uid: Microsoft.Health.ApplicationConnection.SendInsecureMessageFromApplication(System.Collections.Generic.IList{Microsoft.Health.MailRecipient},System.String,System.String,System.String,System.String,System.String)
    name: SendInsecureMessageFromApplication
    nameWithType: ApplicationConnection.SendInsecureMessageFromApplication
    fullName: Microsoft.Health.ApplicationConnection.SendInsecureMessageFromApplication
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.MailRecipient
    name: MailRecipient
    nameWithType: MailRecipient
    fullName: Microsoft.Health.MailRecipient
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.ApplicationConnection.SendInsecureMessageFromApplication(System.Collections.Generic.IList{Microsoft.Health.MailRecipient},System.String,System.String,System.String,System.String,System.String)
    name: SendInsecureMessageFromApplication
    nameWithType: ApplicationConnection.SendInsecureMessageFromApplication
    fullName: Microsoft.Health.ApplicationConnection.SendInsecureMessageFromApplication
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.MailRecipient
    name: MailRecipient
    nameWithType: MailRecipient
    fullName: Microsoft.Health.MailRecipient
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ApplicationConnection.SendInsecureMessageFromApplication(System.Collections.Generic.IList{System.Guid},System.Boolean,System.String,System.String,System.String,System.String,System.String)
  commentId: M:Microsoft.Health.ApplicationConnection.SendInsecureMessageFromApplication(System.Collections.Generic.IList{System.Guid},System.Boolean,System.String,System.String,System.String,System.String,System.String)
  parent: Microsoft.Health.ApplicationConnection
  isExternal: true
  name: SendInsecureMessageFromApplication(IList<Guid>, Boolean, String, String, String, String, String)
  nameWithType: ApplicationConnection.SendInsecureMessageFromApplication(IList<Guid>, Boolean, String, String, String, String, String)
  fullName: Microsoft.Health.ApplicationConnection.SendInsecureMessageFromApplication(System.Collections.Generic.IList<System.Guid>, System.Boolean, System.String, System.String, System.String, System.String, System.String)
  nameWithType.vb: ApplicationConnection.SendInsecureMessageFromApplication(IList(Of Guid), Boolean, String, String, String, String, String)
  fullName.vb: Microsoft.Health.ApplicationConnection.SendInsecureMessageFromApplication(System.Collections.Generic.IList(Of System.Guid), System.Boolean, System.String, System.String, System.String, System.String, System.String)
  name.vb: SendInsecureMessageFromApplication(IList(Of Guid), Boolean, String, String, String, String, String)
  spec.csharp:
  - uid: Microsoft.Health.ApplicationConnection.SendInsecureMessageFromApplication(System.Collections.Generic.IList{System.Guid},System.Boolean,System.String,System.String,System.String,System.String,System.String)
    name: SendInsecureMessageFromApplication
    nameWithType: ApplicationConnection.SendInsecureMessageFromApplication
    fullName: Microsoft.Health.ApplicationConnection.SendInsecureMessageFromApplication
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.ApplicationConnection.SendInsecureMessageFromApplication(System.Collections.Generic.IList{System.Guid},System.Boolean,System.String,System.String,System.String,System.String,System.String)
    name: SendInsecureMessageFromApplication
    nameWithType: ApplicationConnection.SendInsecureMessageFromApplication
    fullName: Microsoft.Health.ApplicationConnection.SendInsecureMessageFromApplication
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ApplicationConnection.SendInsecureMessageToCustodiansFromApplication(System.Guid,System.Boolean,System.String,System.String,System.String,System.String,System.String)
  commentId: M:Microsoft.Health.ApplicationConnection.SendInsecureMessageToCustodiansFromApplication(System.Guid,System.Boolean,System.String,System.String,System.String,System.String,System.String)
  parent: Microsoft.Health.ApplicationConnection
  isExternal: true
  name: SendInsecureMessageToCustodiansFromApplication(Guid, Boolean, String, String, String, String, String)
  nameWithType: ApplicationConnection.SendInsecureMessageToCustodiansFromApplication(Guid, Boolean, String, String, String, String, String)
  fullName: Microsoft.Health.ApplicationConnection.SendInsecureMessageToCustodiansFromApplication(System.Guid, System.Boolean, System.String, System.String, System.String, System.String, System.String)
  spec.csharp:
  - uid: Microsoft.Health.ApplicationConnection.SendInsecureMessageToCustodiansFromApplication(System.Guid,System.Boolean,System.String,System.String,System.String,System.String,System.String)
    name: SendInsecureMessageToCustodiansFromApplication
    nameWithType: ApplicationConnection.SendInsecureMessageToCustodiansFromApplication
    fullName: Microsoft.Health.ApplicationConnection.SendInsecureMessageToCustodiansFromApplication
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.ApplicationConnection.SendInsecureMessageToCustodiansFromApplication(System.Guid,System.Boolean,System.String,System.String,System.String,System.String,System.String)
    name: SendInsecureMessageToCustodiansFromApplication
    nameWithType: ApplicationConnection.SendInsecureMessageToCustodiansFromApplication
    fullName: Microsoft.Health.ApplicationConnection.SendInsecureMessageToCustodiansFromApplication
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ApplicationConnection.GetPersonInfo
  commentId: M:Microsoft.Health.ApplicationConnection.GetPersonInfo
  parent: Microsoft.Health.ApplicationConnection
  isExternal: false
  name: GetPersonInfo()
  nameWithType: ApplicationConnection.GetPersonInfo()
  fullName: Microsoft.Health.ApplicationConnection.GetPersonInfo()
  spec.csharp:
  - uid: Microsoft.Health.ApplicationConnection.GetPersonInfo
    name: GetPersonInfo
    nameWithType: ApplicationConnection.GetPersonInfo
    fullName: Microsoft.Health.ApplicationConnection.GetPersonInfo
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.ApplicationConnection.GetPersonInfo
    name: GetPersonInfo
    nameWithType: ApplicationConnection.GetPersonInfo
    fullName: Microsoft.Health.ApplicationConnection.GetPersonInfo
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ApplicationConnection.GetAuthorizedPeople
  commentId: M:Microsoft.Health.ApplicationConnection.GetAuthorizedPeople
  parent: Microsoft.Health.ApplicationConnection
  isExternal: false
  name: GetAuthorizedPeople()
  nameWithType: ApplicationConnection.GetAuthorizedPeople()
  fullName: Microsoft.Health.ApplicationConnection.GetAuthorizedPeople()
  spec.csharp:
  - uid: Microsoft.Health.ApplicationConnection.GetAuthorizedPeople
    name: GetAuthorizedPeople
    nameWithType: ApplicationConnection.GetAuthorizedPeople
    fullName: Microsoft.Health.ApplicationConnection.GetAuthorizedPeople
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.ApplicationConnection.GetAuthorizedPeople
    name: GetAuthorizedPeople
    nameWithType: ApplicationConnection.GetAuthorizedPeople
    fullName: Microsoft.Health.ApplicationConnection.GetAuthorizedPeople
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ApplicationConnection.GetAuthorizedPeople(Microsoft.Health.GetAuthorizedPeopleSettings)
  commentId: M:Microsoft.Health.ApplicationConnection.GetAuthorizedPeople(Microsoft.Health.GetAuthorizedPeopleSettings)
  parent: Microsoft.Health.ApplicationConnection
  isExternal: false
  name: GetAuthorizedPeople(GetAuthorizedPeopleSettings)
  nameWithType: ApplicationConnection.GetAuthorizedPeople(GetAuthorizedPeopleSettings)
  fullName: Microsoft.Health.ApplicationConnection.GetAuthorizedPeople(Microsoft.Health.GetAuthorizedPeopleSettings)
  spec.csharp:
  - uid: Microsoft.Health.ApplicationConnection.GetAuthorizedPeople(Microsoft.Health.GetAuthorizedPeopleSettings)
    name: GetAuthorizedPeople
    nameWithType: ApplicationConnection.GetAuthorizedPeople
    fullName: Microsoft.Health.ApplicationConnection.GetAuthorizedPeople
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.GetAuthorizedPeopleSettings
    name: GetAuthorizedPeopleSettings
    nameWithType: GetAuthorizedPeopleSettings
    fullName: Microsoft.Health.GetAuthorizedPeopleSettings
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.ApplicationConnection.GetAuthorizedPeople(Microsoft.Health.GetAuthorizedPeopleSettings)
    name: GetAuthorizedPeople
    nameWithType: ApplicationConnection.GetAuthorizedPeople
    fullName: Microsoft.Health.ApplicationConnection.GetAuthorizedPeople
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.GetAuthorizedPeopleSettings
    name: GetAuthorizedPeopleSettings
    nameWithType: GetAuthorizedPeopleSettings
    fullName: Microsoft.Health.GetAuthorizedPeopleSettings
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ApplicationConnection.GetAuthorizedRecords(System.Collections.Generic.IList{System.Guid})
  commentId: M:Microsoft.Health.ApplicationConnection.GetAuthorizedRecords(System.Collections.Generic.IList{System.Guid})
  parent: Microsoft.Health.ApplicationConnection
  isExternal: true
  name: GetAuthorizedRecords(IList<Guid>)
  nameWithType: ApplicationConnection.GetAuthorizedRecords(IList<Guid>)
  fullName: Microsoft.Health.ApplicationConnection.GetAuthorizedRecords(System.Collections.Generic.IList<System.Guid>)
  nameWithType.vb: ApplicationConnection.GetAuthorizedRecords(IList(Of Guid))
  fullName.vb: Microsoft.Health.ApplicationConnection.GetAuthorizedRecords(System.Collections.Generic.IList(Of System.Guid))
  name.vb: GetAuthorizedRecords(IList(Of Guid))
  spec.csharp:
  - uid: Microsoft.Health.ApplicationConnection.GetAuthorizedRecords(System.Collections.Generic.IList{System.Guid})
    name: GetAuthorizedRecords
    nameWithType: ApplicationConnection.GetAuthorizedRecords
    fullName: Microsoft.Health.ApplicationConnection.GetAuthorizedRecords
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.ApplicationConnection.GetAuthorizedRecords(System.Collections.Generic.IList{System.Guid})
    name: GetAuthorizedRecords
    nameWithType: ApplicationConnection.GetAuthorizedRecords
    fullName: Microsoft.Health.ApplicationConnection.GetAuthorizedRecords
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ApplicationConnection.GetApplicationInfo
  commentId: M:Microsoft.Health.ApplicationConnection.GetApplicationInfo
  parent: Microsoft.Health.ApplicationConnection
  isExternal: false
  name: GetApplicationInfo()
  nameWithType: ApplicationConnection.GetApplicationInfo()
  fullName: Microsoft.Health.ApplicationConnection.GetApplicationInfo()
  spec.csharp:
  - uid: Microsoft.Health.ApplicationConnection.GetApplicationInfo
    name: GetApplicationInfo
    nameWithType: ApplicationConnection.GetApplicationInfo
    fullName: Microsoft.Health.ApplicationConnection.GetApplicationInfo
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.ApplicationConnection.GetApplicationInfo
    name: GetApplicationInfo
    nameWithType: ApplicationConnection.GetApplicationInfo
    fullName: Microsoft.Health.ApplicationConnection.GetApplicationInfo
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ApplicationConnection.GetApplicationInfo(System.Boolean)
  commentId: M:Microsoft.Health.ApplicationConnection.GetApplicationInfo(System.Boolean)
  parent: Microsoft.Health.ApplicationConnection
  isExternal: true
  name: GetApplicationInfo(Boolean)
  nameWithType: ApplicationConnection.GetApplicationInfo(Boolean)
  fullName: Microsoft.Health.ApplicationConnection.GetApplicationInfo(System.Boolean)
  spec.csharp:
  - uid: Microsoft.Health.ApplicationConnection.GetApplicationInfo(System.Boolean)
    name: GetApplicationInfo
    nameWithType: ApplicationConnection.GetApplicationInfo
    fullName: Microsoft.Health.ApplicationConnection.GetApplicationInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.ApplicationConnection.GetApplicationInfo(System.Boolean)
    name: GetApplicationInfo
    nameWithType: ApplicationConnection.GetApplicationInfo
    fullName: Microsoft.Health.ApplicationConnection.GetApplicationInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ApplicationConnection.GetUpdatedRecordsForApplication(System.Nullable{System.DateTime})
  commentId: M:Microsoft.Health.ApplicationConnection.GetUpdatedRecordsForApplication(System.Nullable{System.DateTime})
  parent: Microsoft.Health.ApplicationConnection
  isExternal: true
  name: GetUpdatedRecordsForApplication(Nullable<DateTime>)
  nameWithType: ApplicationConnection.GetUpdatedRecordsForApplication(Nullable<DateTime>)
  fullName: Microsoft.Health.ApplicationConnection.GetUpdatedRecordsForApplication(System.Nullable<System.DateTime>)
  nameWithType.vb: ApplicationConnection.GetUpdatedRecordsForApplication(Nullable(Of DateTime))
  fullName.vb: Microsoft.Health.ApplicationConnection.GetUpdatedRecordsForApplication(System.Nullable(Of System.DateTime))
  name.vb: GetUpdatedRecordsForApplication(Nullable(Of DateTime))
  spec.csharp:
  - uid: Microsoft.Health.ApplicationConnection.GetUpdatedRecordsForApplication(System.Nullable{System.DateTime})
    name: GetUpdatedRecordsForApplication
    nameWithType: ApplicationConnection.GetUpdatedRecordsForApplication
    fullName: Microsoft.Health.ApplicationConnection.GetUpdatedRecordsForApplication
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.ApplicationConnection.GetUpdatedRecordsForApplication(System.Nullable{System.DateTime})
    name: GetUpdatedRecordsForApplication
    nameWithType: ApplicationConnection.GetUpdatedRecordsForApplication
    fullName: Microsoft.Health.ApplicationConnection.GetUpdatedRecordsForApplication
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ApplicationConnection.GetUpdatedRecordInfoForApplication(System.Nullable{System.DateTime})
  commentId: M:Microsoft.Health.ApplicationConnection.GetUpdatedRecordInfoForApplication(System.Nullable{System.DateTime})
  parent: Microsoft.Health.ApplicationConnection
  isExternal: true
  name: GetUpdatedRecordInfoForApplication(Nullable<DateTime>)
  nameWithType: ApplicationConnection.GetUpdatedRecordInfoForApplication(Nullable<DateTime>)
  fullName: Microsoft.Health.ApplicationConnection.GetUpdatedRecordInfoForApplication(System.Nullable<System.DateTime>)
  nameWithType.vb: ApplicationConnection.GetUpdatedRecordInfoForApplication(Nullable(Of DateTime))
  fullName.vb: Microsoft.Health.ApplicationConnection.GetUpdatedRecordInfoForApplication(System.Nullable(Of System.DateTime))
  name.vb: GetUpdatedRecordInfoForApplication(Nullable(Of DateTime))
  spec.csharp:
  - uid: Microsoft.Health.ApplicationConnection.GetUpdatedRecordInfoForApplication(System.Nullable{System.DateTime})
    name: GetUpdatedRecordInfoForApplication
    nameWithType: ApplicationConnection.GetUpdatedRecordInfoForApplication
    fullName: Microsoft.Health.ApplicationConnection.GetUpdatedRecordInfoForApplication
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.ApplicationConnection.GetUpdatedRecordInfoForApplication(System.Nullable{System.DateTime})
    name: GetUpdatedRecordInfoForApplication
    nameWithType: ApplicationConnection.GetUpdatedRecordInfoForApplication
    fullName: Microsoft.Health.ApplicationConnection.GetUpdatedRecordInfoForApplication
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ApplicationConnection.NewSignupCode
  commentId: M:Microsoft.Health.ApplicationConnection.NewSignupCode
  parent: Microsoft.Health.ApplicationConnection
  isExternal: false
  name: NewSignupCode()
  nameWithType: ApplicationConnection.NewSignupCode()
  fullName: Microsoft.Health.ApplicationConnection.NewSignupCode()
  spec.csharp:
  - uid: Microsoft.Health.ApplicationConnection.NewSignupCode
    name: NewSignupCode
    nameWithType: ApplicationConnection.NewSignupCode
    fullName: Microsoft.Health.ApplicationConnection.NewSignupCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.ApplicationConnection.NewSignupCode
    name: NewSignupCode
    nameWithType: ApplicationConnection.NewSignupCode
    fullName: Microsoft.Health.ApplicationConnection.NewSignupCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ApplicationConnection.SelectInstance(Microsoft.Health.Location)
  commentId: M:Microsoft.Health.ApplicationConnection.SelectInstance(Microsoft.Health.Location)
  parent: Microsoft.Health.ApplicationConnection
  isExternal: false
  name: SelectInstance(Location)
  nameWithType: ApplicationConnection.SelectInstance(Location)
  fullName: Microsoft.Health.ApplicationConnection.SelectInstance(Microsoft.Health.Location)
  spec.csharp:
  - uid: Microsoft.Health.ApplicationConnection.SelectInstance(Microsoft.Health.Location)
    name: SelectInstance
    nameWithType: ApplicationConnection.SelectInstance
    fullName: Microsoft.Health.ApplicationConnection.SelectInstance
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.Location
    name: Location
    nameWithType: Location
    fullName: Microsoft.Health.Location
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.ApplicationConnection.SelectInstance(Microsoft.Health.Location)
    name: SelectInstance
    nameWithType: ApplicationConnection.SelectInstance
    fullName: Microsoft.Health.ApplicationConnection.SelectInstance
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.Location
    name: Location
    nameWithType: Location
    fullName: Microsoft.Health.Location
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ApplicationConnection.GetMeaningfulUseVDTReport(Microsoft.Health.DateRange)
  commentId: M:Microsoft.Health.ApplicationConnection.GetMeaningfulUseVDTReport(Microsoft.Health.DateRange)
  parent: Microsoft.Health.ApplicationConnection
  isExternal: false
  name: GetMeaningfulUseVDTReport(DateRange)
  nameWithType: ApplicationConnection.GetMeaningfulUseVDTReport(DateRange)
  fullName: Microsoft.Health.ApplicationConnection.GetMeaningfulUseVDTReport(Microsoft.Health.DateRange)
  spec.csharp:
  - uid: Microsoft.Health.ApplicationConnection.GetMeaningfulUseVDTReport(Microsoft.Health.DateRange)
    name: GetMeaningfulUseVDTReport
    nameWithType: ApplicationConnection.GetMeaningfulUseVDTReport
    fullName: Microsoft.Health.ApplicationConnection.GetMeaningfulUseVDTReport
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.DateRange
    name: DateRange
    nameWithType: DateRange
    fullName: Microsoft.Health.DateRange
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.ApplicationConnection.GetMeaningfulUseVDTReport(Microsoft.Health.DateRange)
    name: GetMeaningfulUseVDTReport
    nameWithType: ApplicationConnection.GetMeaningfulUseVDTReport
    fullName: Microsoft.Health.ApplicationConnection.GetMeaningfulUseVDTReport
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.DateRange
    name: DateRange
    nameWithType: DateRange
    fullName: Microsoft.Health.DateRange
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ApplicationConnection.GetMeaningfulUseTimelyAccessDocumentReport(Microsoft.Health.DateRange)
  commentId: M:Microsoft.Health.ApplicationConnection.GetMeaningfulUseTimelyAccessDocumentReport(Microsoft.Health.DateRange)
  parent: Microsoft.Health.ApplicationConnection
  isExternal: false
  name: GetMeaningfulUseTimelyAccessDocumentReport(DateRange)
  nameWithType: ApplicationConnection.GetMeaningfulUseTimelyAccessDocumentReport(DateRange)
  fullName: Microsoft.Health.ApplicationConnection.GetMeaningfulUseTimelyAccessDocumentReport(Microsoft.Health.DateRange)
  spec.csharp:
  - uid: Microsoft.Health.ApplicationConnection.GetMeaningfulUseTimelyAccessDocumentReport(Microsoft.Health.DateRange)
    name: GetMeaningfulUseTimelyAccessDocumentReport
    nameWithType: ApplicationConnection.GetMeaningfulUseTimelyAccessDocumentReport
    fullName: Microsoft.Health.ApplicationConnection.GetMeaningfulUseTimelyAccessDocumentReport
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.DateRange
    name: DateRange
    nameWithType: DateRange
    fullName: Microsoft.Health.DateRange
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.ApplicationConnection.GetMeaningfulUseTimelyAccessDocumentReport(Microsoft.Health.DateRange)
    name: GetMeaningfulUseTimelyAccessDocumentReport
    nameWithType: ApplicationConnection.GetMeaningfulUseTimelyAccessDocumentReport
    fullName: Microsoft.Health.ApplicationConnection.GetMeaningfulUseTimelyAccessDocumentReport
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.DateRange
    name: DateRange
    nameWithType: DateRange
    fullName: Microsoft.Health.DateRange
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ApplicationConnection.GetMeaningfulUseTimelyAccessDOPUDocumentReport(Microsoft.Health.DateRange)
  commentId: M:Microsoft.Health.ApplicationConnection.GetMeaningfulUseTimelyAccessDOPUDocumentReport(Microsoft.Health.DateRange)
  parent: Microsoft.Health.ApplicationConnection
  isExternal: false
  name: GetMeaningfulUseTimelyAccessDOPUDocumentReport(DateRange)
  nameWithType: ApplicationConnection.GetMeaningfulUseTimelyAccessDOPUDocumentReport(DateRange)
  fullName: Microsoft.Health.ApplicationConnection.GetMeaningfulUseTimelyAccessDOPUDocumentReport(Microsoft.Health.DateRange)
  spec.csharp:
  - uid: Microsoft.Health.ApplicationConnection.GetMeaningfulUseTimelyAccessDOPUDocumentReport(Microsoft.Health.DateRange)
    name: GetMeaningfulUseTimelyAccessDOPUDocumentReport
    nameWithType: ApplicationConnection.GetMeaningfulUseTimelyAccessDOPUDocumentReport
    fullName: Microsoft.Health.ApplicationConnection.GetMeaningfulUseTimelyAccessDOPUDocumentReport
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.DateRange
    name: DateRange
    nameWithType: DateRange
    fullName: Microsoft.Health.DateRange
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.ApplicationConnection.GetMeaningfulUseTimelyAccessDOPUDocumentReport(Microsoft.Health.DateRange)
    name: GetMeaningfulUseTimelyAccessDOPUDocumentReport
    nameWithType: ApplicationConnection.GetMeaningfulUseTimelyAccessDOPUDocumentReport
    fullName: Microsoft.Health.ApplicationConnection.GetMeaningfulUseTimelyAccessDOPUDocumentReport
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.DateRange
    name: DateRange
    nameWithType: DateRange
    fullName: Microsoft.Health.DateRange
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthServiceConnection.CreateRequest(System.String,System.Int32)
  commentId: M:Microsoft.Health.HealthServiceConnection.CreateRequest(System.String,System.Int32)
  parent: Microsoft.Health.HealthServiceConnection
  isExternal: true
  name: CreateRequest(String, Int32)
  nameWithType: HealthServiceConnection.CreateRequest(String, Int32)
  fullName: Microsoft.Health.HealthServiceConnection.CreateRequest(System.String, System.Int32)
  spec.csharp:
  - uid: Microsoft.Health.HealthServiceConnection.CreateRequest(System.String,System.Int32)
    name: CreateRequest
    nameWithType: HealthServiceConnection.CreateRequest
    fullName: Microsoft.Health.HealthServiceConnection.CreateRequest
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.HealthServiceConnection.CreateRequest(System.String,System.Int32)
    name: CreateRequest
    nameWithType: HealthServiceConnection.CreateRequest
    fullName: Microsoft.Health.HealthServiceConnection.CreateRequest
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthServiceConnection.CancelAllRequests
  commentId: P:Microsoft.Health.HealthServiceConnection.CancelAllRequests
  parent: Microsoft.Health.HealthServiceConnection
  isExternal: false
  name: CancelAllRequests
  nameWithType: HealthServiceConnection.CancelAllRequests
  fullName: Microsoft.Health.HealthServiceConnection.CancelAllRequests
- uid: Microsoft.Health.HealthServiceConnection.GetServiceDefinition
  commentId: M:Microsoft.Health.HealthServiceConnection.GetServiceDefinition
  parent: Microsoft.Health.HealthServiceConnection
  isExternal: false
  name: GetServiceDefinition()
  nameWithType: HealthServiceConnection.GetServiceDefinition()
  fullName: Microsoft.Health.HealthServiceConnection.GetServiceDefinition()
  spec.csharp:
  - uid: Microsoft.Health.HealthServiceConnection.GetServiceDefinition
    name: GetServiceDefinition
    nameWithType: HealthServiceConnection.GetServiceDefinition
    fullName: Microsoft.Health.HealthServiceConnection.GetServiceDefinition
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.HealthServiceConnection.GetServiceDefinition
    name: GetServiceDefinition
    nameWithType: HealthServiceConnection.GetServiceDefinition
    fullName: Microsoft.Health.HealthServiceConnection.GetServiceDefinition
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthServiceConnection.GetServiceDefinition(System.DateTime)
  commentId: M:Microsoft.Health.HealthServiceConnection.GetServiceDefinition(System.DateTime)
  parent: Microsoft.Health.HealthServiceConnection
  isExternal: true
  name: GetServiceDefinition(DateTime)
  nameWithType: HealthServiceConnection.GetServiceDefinition(DateTime)
  fullName: Microsoft.Health.HealthServiceConnection.GetServiceDefinition(System.DateTime)
  spec.csharp:
  - uid: Microsoft.Health.HealthServiceConnection.GetServiceDefinition(System.DateTime)
    name: GetServiceDefinition
    nameWithType: HealthServiceConnection.GetServiceDefinition
    fullName: Microsoft.Health.HealthServiceConnection.GetServiceDefinition
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.HealthServiceConnection.GetServiceDefinition(System.DateTime)
    name: GetServiceDefinition
    nameWithType: HealthServiceConnection.GetServiceDefinition
    fullName: Microsoft.Health.HealthServiceConnection.GetServiceDefinition
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthServiceConnection.GetServiceDefinition(Microsoft.Health.ServiceInfoSections)
  commentId: M:Microsoft.Health.HealthServiceConnection.GetServiceDefinition(Microsoft.Health.ServiceInfoSections)
  parent: Microsoft.Health.HealthServiceConnection
  isExternal: false
  name: GetServiceDefinition(ServiceInfoSections)
  nameWithType: HealthServiceConnection.GetServiceDefinition(ServiceInfoSections)
  fullName: Microsoft.Health.HealthServiceConnection.GetServiceDefinition(Microsoft.Health.ServiceInfoSections)
  spec.csharp:
  - uid: Microsoft.Health.HealthServiceConnection.GetServiceDefinition(Microsoft.Health.ServiceInfoSections)
    name: GetServiceDefinition
    nameWithType: HealthServiceConnection.GetServiceDefinition
    fullName: Microsoft.Health.HealthServiceConnection.GetServiceDefinition
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.ServiceInfoSections
    name: ServiceInfoSections
    nameWithType: ServiceInfoSections
    fullName: Microsoft.Health.ServiceInfoSections
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.HealthServiceConnection.GetServiceDefinition(Microsoft.Health.ServiceInfoSections)
    name: GetServiceDefinition
    nameWithType: HealthServiceConnection.GetServiceDefinition
    fullName: Microsoft.Health.HealthServiceConnection.GetServiceDefinition
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.ServiceInfoSections
    name: ServiceInfoSections
    nameWithType: ServiceInfoSections
    fullName: Microsoft.Health.ServiceInfoSections
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthServiceConnection.GetServiceDefinition(Microsoft.Health.ServiceInfoSections,System.DateTime)
  commentId: M:Microsoft.Health.HealthServiceConnection.GetServiceDefinition(Microsoft.Health.ServiceInfoSections,System.DateTime)
  parent: Microsoft.Health.HealthServiceConnection
  isExternal: true
  name: GetServiceDefinition(ServiceInfoSections, DateTime)
  nameWithType: HealthServiceConnection.GetServiceDefinition(ServiceInfoSections, DateTime)
  fullName: Microsoft.Health.HealthServiceConnection.GetServiceDefinition(Microsoft.Health.ServiceInfoSections, System.DateTime)
  spec.csharp:
  - uid: Microsoft.Health.HealthServiceConnection.GetServiceDefinition(Microsoft.Health.ServiceInfoSections,System.DateTime)
    name: GetServiceDefinition
    nameWithType: HealthServiceConnection.GetServiceDefinition
    fullName: Microsoft.Health.HealthServiceConnection.GetServiceDefinition
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.ServiceInfoSections
    name: ServiceInfoSections
    nameWithType: ServiceInfoSections
    fullName: Microsoft.Health.ServiceInfoSections
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.HealthServiceConnection.GetServiceDefinition(Microsoft.Health.ServiceInfoSections,System.DateTime)
    name: GetServiceDefinition
    nameWithType: HealthServiceConnection.GetServiceDefinition
    fullName: Microsoft.Health.HealthServiceConnection.GetServiceDefinition
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.ServiceInfoSections
    name: ServiceInfoSections
    nameWithType: ServiceInfoSections
    fullName: Microsoft.Health.ServiceInfoSections
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthServiceConnection.WebProxy
  commentId: P:Microsoft.Health.HealthServiceConnection.WebProxy
  parent: Microsoft.Health.HealthServiceConnection
  isExternal: false
  name: WebProxy
  nameWithType: HealthServiceConnection.WebProxy
  fullName: Microsoft.Health.HealthServiceConnection.WebProxy
- uid: Microsoft.Health.HealthServiceConnection.ApplicationId
  commentId: P:Microsoft.Health.HealthServiceConnection.ApplicationId
  parent: Microsoft.Health.HealthServiceConnection
  isExternal: false
  name: ApplicationId
  nameWithType: HealthServiceConnection.ApplicationId
  fullName: Microsoft.Health.HealthServiceConnection.ApplicationId
- uid: Microsoft.Health.HealthServiceConnection.RequestUrl
  commentId: P:Microsoft.Health.HealthServiceConnection.RequestUrl
  parent: Microsoft.Health.HealthServiceConnection
  isExternal: false
  name: RequestUrl
  nameWithType: HealthServiceConnection.RequestUrl
  fullName: Microsoft.Health.HealthServiceConnection.RequestUrl
- uid: Microsoft.Health.HealthServiceConnection.ServiceInstance
  commentId: P:Microsoft.Health.HealthServiceConnection.ServiceInstance
  parent: Microsoft.Health.HealthServiceConnection
  isExternal: false
  name: ServiceInstance
  nameWithType: HealthServiceConnection.ServiceInstance
  fullName: Microsoft.Health.HealthServiceConnection.ServiceInstance
- uid: Microsoft.Health.HealthServiceConnection.RequestTimeoutSeconds
  commentId: P:Microsoft.Health.HealthServiceConnection.RequestTimeoutSeconds
  parent: Microsoft.Health.HealthServiceConnection
  isExternal: false
  name: RequestTimeoutSeconds
  nameWithType: HealthServiceConnection.RequestTimeoutSeconds
  fullName: Microsoft.Health.HealthServiceConnection.RequestTimeoutSeconds
- uid: Microsoft.Health.HealthServiceConnection.RequestTimeToLive
  commentId: P:Microsoft.Health.HealthServiceConnection.RequestTimeToLive
  parent: Microsoft.Health.HealthServiceConnection
  isExternal: false
  name: RequestTimeToLive
  nameWithType: HealthServiceConnection.RequestTimeToLive
  fullName: Microsoft.Health.HealthServiceConnection.RequestTimeToLive
- uid: Microsoft.Health.HealthServiceConnection.Culture
  commentId: P:Microsoft.Health.HealthServiceConnection.Culture
  parent: Microsoft.Health.HealthServiceConnection
  isExternal: false
  name: Culture
  nameWithType: HealthServiceConnection.Culture
  fullName: Microsoft.Health.HealthServiceConnection.Culture
- uid: Microsoft.Health.HealthServiceConnection.RequestCompressionMethod
  commentId: P:Microsoft.Health.HealthServiceConnection.RequestCompressionMethod
  parent: Microsoft.Health.HealthServiceConnection
  isExternal: false
  name: RequestCompressionMethod
  nameWithType: HealthServiceConnection.RequestCompressionMethod
  fullName: Microsoft.Health.HealthServiceConnection.RequestCompressionMethod
- uid: Microsoft.Health.HealthServiceConnection.ResponseCompressionMethods
  commentId: P:Microsoft.Health.HealthServiceConnection.ResponseCompressionMethods
  parent: Microsoft.Health.HealthServiceConnection
  isExternal: false
  name: ResponseCompressionMethods
  nameWithType: HealthServiceConnection.ResponseCompressionMethods
  fullName: Microsoft.Health.HealthServiceConnection.ResponseCompressionMethods
- uid: Microsoft.Health.HealthServiceConnection.AuthenticationToken
  commentId: P:Microsoft.Health.HealthServiceConnection.AuthenticationToken
  parent: Microsoft.Health.HealthServiceConnection
  isExternal: false
  name: AuthenticationToken
  nameWithType: HealthServiceConnection.AuthenticationToken
  fullName: Microsoft.Health.HealthServiceConnection.AuthenticationToken
- uid: Microsoft.Health.HealthServiceConnection.Credential
  commentId: P:Microsoft.Health.HealthServiceConnection.Credential
  parent: Microsoft.Health.HealthServiceConnection
  isExternal: false
  name: Credential
  nameWithType: HealthServiceConnection.Credential
  fullName: Microsoft.Health.HealthServiceConnection.Credential
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.AuthenticatedConnection
  commentId: T:Microsoft.Health.AuthenticatedConnection
  parent: Microsoft.Health
  isExternal: false
  name: AuthenticatedConnection
  nameWithType: AuthenticatedConnection
  fullName: Microsoft.Health.AuthenticatedConnection
- uid: Microsoft.Health.AuthenticatedConnection.LogOn*
  commentId: Overload:Microsoft.Health.AuthenticatedConnection.LogOn
  isExternal: false
  name: LogOn
  nameWithType: AuthenticatedConnection.LogOn
  fullName: Microsoft.Health.AuthenticatedConnection.LogOn
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: Microsoft.Health.HealthServiceException
  commentId: T:Microsoft.Health.HealthServiceException
  parent: Microsoft.Health
  isExternal: false
  name: HealthServiceException
  nameWithType: HealthServiceException
  fullName: Microsoft.Health.HealthServiceException
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Health.HealthServiceRequestCancelledException
  commentId: T:Microsoft.Health.HealthServiceRequestCancelledException
  isExternal: false
  name: HealthServiceRequestCancelledException
  nameWithType: HealthServiceRequestCancelledException
  fullName: Microsoft.Health.HealthServiceRequestCancelledException
- uid: System.Net.WebException
  commentId: T:System.Net.WebException
- uid: Microsoft.Health.HealthServiceAccessDeniedException
  commentId: T:Microsoft.Health.HealthServiceAccessDeniedException
  isExternal: false
  name: HealthServiceAccessDeniedException
  nameWithType: HealthServiceAccessDeniedException
  fullName: Microsoft.Health.HealthServiceAccessDeniedException
- uid: Microsoft.Health.InvalidConfigurationException
  commentId: T:Microsoft.Health.InvalidConfigurationException
  isExternal: false
  name: InvalidConfigurationException
  nameWithType: InvalidConfigurationException
  fullName: Microsoft.Health.InvalidConfigurationException
- uid: System.Threading.ManualResetEvent
  commentId: T:System.Threading.ManualResetEvent
  parent: System.Threading
  isExternal: true
  name: ManualResetEvent
  nameWithType: ManualResetEvent
  fullName: System.Threading.ManualResetEvent
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Guid.Empty
  commentId: F:System.Guid.Empty
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: Microsoft.Health.AuthenticatedConnection.#ctor*
  commentId: Overload:Microsoft.Health.AuthenticatedConnection.#ctor
  isExternal: false
  name: AuthenticatedConnection
  nameWithType: AuthenticatedConnection.AuthenticatedConnection
  fullName: Microsoft.Health.AuthenticatedConnection.AuthenticatedConnection
- uid: Microsoft.Health.Authentication.Credential
  commentId: T:Microsoft.Health.Authentication.Credential
  parent: Microsoft.Health.Authentication
  isExternal: false
  name: Credential
  nameWithType: Credential
  fullName: Microsoft.Health.Authentication.Credential
- uid: Microsoft.Health.Authentication
  commentId: N:Microsoft.Health.Authentication
  isExternal: false
  name: Microsoft.Health.Authentication
  nameWithType: Microsoft.Health.Authentication
  fullName: Microsoft.Health.Authentication
- uid: Microsoft.Health.HealthServiceInstance
  commentId: T:Microsoft.Health.HealthServiceInstance
  parent: Microsoft.Health
  isExternal: false
  name: HealthServiceInstance
  nameWithType: HealthServiceInstance
  fullName: Microsoft.Health.HealthServiceInstance
- uid: Microsoft.Health.AuthenticatedConnection.Authenticate*
  commentId: Overload:Microsoft.Health.AuthenticatedConnection.Authenticate
  isExternal: false
  name: Authenticate
  nameWithType: AuthenticatedConnection.Authenticate
  fullName: Microsoft.Health.AuthenticatedConnection.Authenticate
- uid: System.Security.SecurityException
  commentId: T:System.Security.SecurityException
- uid: System.UriFormatException
  commentId: T:System.UriFormatException
- uid: Microsoft.Health.AuthenticatedConnection.Impersonate(System.Guid)
  commentId: M:Microsoft.Health.AuthenticatedConnection.Impersonate(System.Guid)
  parent: Microsoft.Health.AuthenticatedConnection
  isExternal: true
  name: Impersonate(Guid)
  nameWithType: AuthenticatedConnection.Impersonate(Guid)
  fullName: Microsoft.Health.AuthenticatedConnection.Impersonate(System.Guid)
  spec.csharp:
  - uid: Microsoft.Health.AuthenticatedConnection.Impersonate(System.Guid)
    name: Impersonate
    nameWithType: AuthenticatedConnection.Impersonate
    fullName: Microsoft.Health.AuthenticatedConnection.Impersonate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.AuthenticatedConnection.Impersonate(System.Guid)
    name: Impersonate
    nameWithType: AuthenticatedConnection.Impersonate
    fullName: Microsoft.Health.AuthenticatedConnection.Impersonate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.AuthenticatedConnection.StopImpersonating
  commentId: M:Microsoft.Health.AuthenticatedConnection.StopImpersonating
  parent: Microsoft.Health.AuthenticatedConnection
  isExternal: false
  name: StopImpersonating()
  nameWithType: AuthenticatedConnection.StopImpersonating()
  fullName: Microsoft.Health.AuthenticatedConnection.StopImpersonating()
  spec.csharp:
  - uid: Microsoft.Health.AuthenticatedConnection.StopImpersonating
    name: StopImpersonating
    nameWithType: AuthenticatedConnection.StopImpersonating
    fullName: Microsoft.Health.AuthenticatedConnection.StopImpersonating
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.AuthenticatedConnection.StopImpersonating
    name: StopImpersonating
    nameWithType: AuthenticatedConnection.StopImpersonating
    fullName: Microsoft.Health.AuthenticatedConnection.StopImpersonating
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.AuthenticatedConnection.IsImpersonating
  commentId: P:Microsoft.Health.AuthenticatedConnection.IsImpersonating
  parent: Microsoft.Health.AuthenticatedConnection
  isExternal: false
  name: IsImpersonating
  nameWithType: AuthenticatedConnection.IsImpersonating
  fullName: Microsoft.Health.AuthenticatedConnection.IsImpersonating
- uid: Microsoft.Health.AuthenticatedConnection.Impersonate*
  commentId: Overload:Microsoft.Health.AuthenticatedConnection.Impersonate
  isExternal: false
  name: Impersonate
  nameWithType: AuthenticatedConnection.Impersonate
  fullName: Microsoft.Health.AuthenticatedConnection.Impersonate
- uid: Microsoft.Health.AuthenticatedConnection.StopImpersonating*
  commentId: Overload:Microsoft.Health.AuthenticatedConnection.StopImpersonating
  isExternal: false
  name: StopImpersonating
  nameWithType: AuthenticatedConnection.StopImpersonating
  fullName: Microsoft.Health.AuthenticatedConnection.StopImpersonating
- uid: Microsoft.Health.AuthenticatedConnection.IsImpersonating*
  commentId: Overload:Microsoft.Health.AuthenticatedConnection.IsImpersonating
  isExternal: false
  name: IsImpersonating
  nameWithType: AuthenticatedConnection.IsImpersonating
  fullName: Microsoft.Health.AuthenticatedConnection.IsImpersonating
- uid: Microsoft.Health.AuthenticatedConnection.GetAllApplicationSettings*
  commentId: Overload:Microsoft.Health.AuthenticatedConnection.GetAllApplicationSettings
  isExternal: false
  name: GetAllApplicationSettings
  nameWithType: AuthenticatedConnection.GetAllApplicationSettings
  fullName: Microsoft.Health.AuthenticatedConnection.GetAllApplicationSettings
- uid: Microsoft.Health.ApplicationSettings
  commentId: T:Microsoft.Health.ApplicationSettings
  parent: Microsoft.Health
  isExternal: false
  name: ApplicationSettings
  nameWithType: ApplicationSettings
  fullName: Microsoft.Health.ApplicationSettings
- uid: Microsoft.Health.AuthenticatedConnection.GetApplicationSettings*
  commentId: Overload:Microsoft.Health.AuthenticatedConnection.GetApplicationSettings
  isExternal: false
  name: GetApplicationSettings
  nameWithType: AuthenticatedConnection.GetApplicationSettings
  fullName: Microsoft.Health.AuthenticatedConnection.GetApplicationSettings
- uid: System.Xml.XPath.IXPathNavigable
  commentId: T:System.Xml.XPath.IXPathNavigable
  parent: System.Xml.XPath
  isExternal: true
  name: IXPathNavigable
  nameWithType: IXPathNavigable
  fullName: System.Xml.XPath.IXPathNavigable
- uid: System.Xml.XPath
  commentId: N:System.Xml.XPath
  isExternal: false
  name: System.Xml.XPath
  nameWithType: System.Xml.XPath
  fullName: System.Xml.XPath
- uid: Microsoft.Health.AuthenticatedConnection.SetApplicationSettings*
  commentId: Overload:Microsoft.Health.AuthenticatedConnection.SetApplicationSettings
  isExternal: false
  name: SetApplicationSettings
  nameWithType: AuthenticatedConnection.SetApplicationSettings
  fullName: Microsoft.Health.AuthenticatedConnection.SetApplicationSettings
