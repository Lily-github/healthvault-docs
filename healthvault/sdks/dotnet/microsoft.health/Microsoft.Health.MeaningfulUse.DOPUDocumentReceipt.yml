### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt
  commentId: T:Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt
  id: DOPUDocumentReceipt
  parent: Microsoft.Health.MeaningfulUse
  children:
  - Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt.#ctor(System.String)
  - Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt.AvailableDate
  - Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt.PackageId
  - Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt.Source
  langs:
  - csharp
  - vb
  name: DOPUDocumentReceipt
  nameWithType: DOPUDocumentReceipt
  fullName: Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt
  type: Class
  source:
    remote:
      path: Microsoft.Health/MeaningfulUse/DopuDocumentReceipt.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DOPUDocumentReceipt
    path: MeaningfulUse/DopuDocumentReceipt.cs
    startLine: 13
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.MeaningfulUse
  summary: "\nProvides DOPU document receipt information for Meaningful Use Timely Access Report.\n"
  example: []
  syntax:
    content: public class DOPUDocumentReceipt
    content.vb: Public Class DOPUDocumentReceipt
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt.#ctor(System.String)
  commentId: M:Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt
  langs:
  - csharp
  - vb
  name: DOPUDocumentReceipt(String)
  nameWithType: DOPUDocumentReceipt.DOPUDocumentReceipt(String)
  fullName: Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt.DOPUDocumentReceipt(System.String)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health/MeaningfulUse/DopuDocumentReceipt.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: MeaningfulUse/DopuDocumentReceipt.cs
    startLine: 27
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.MeaningfulUse
  summary: "\nConstructor for DOPUDocumentReceipt.\n"
  example: []
  syntax:
    content: public DOPUDocumentReceipt(string source)
    content.vb: Public Sub New(source As String)
    parameters:
    - id: source
      type: System.String
      description: "\nThe source that added the DOPU package to HealthVault.\nThis is either the application id or domain of the email sender if data came from Direct channel.\n"
  overload: Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">source</span> is <strong>null</strong>.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt.Source
  commentId: P:Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt.Source
  id: Source
  parent: Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt
  langs:
  - csharp
  - vb
  name: Source
  nameWithType: DOPUDocumentReceipt.Source
  fullName: Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt.Source
  type: Property
  source:
    remote:
      path: Microsoft.Health/MeaningfulUse/DopuDocumentReceipt.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Source
    path: MeaningfulUse/DopuDocumentReceipt.cs
    startLine: 42
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.MeaningfulUse
  summary: "\nGets or sets the contributing source of this package.\n"
  example: []
  syntax:
    content: public string Source { get; }
    content.vb: Public ReadOnly Property Source As String
    parameters: []
    return:
      type: System.String
      description: "\nA string representing the unique identifier of the application that added the data\nor the domain of the sender if data was contributed via Direct channel.\n"
  overload: Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt.Source*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt.PackageId
  commentId: P:Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt.PackageId
  id: PackageId
  parent: Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt
  langs:
  - csharp
  - vb
  name: PackageId
  nameWithType: DOPUDocumentReceipt.PackageId
  fullName: Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt.PackageId
  type: Property
  source:
    remote:
      path: Microsoft.Health/MeaningfulUse/DopuDocumentReceipt.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: PackageId
    path: MeaningfulUse/DopuDocumentReceipt.cs
    startLine: 53
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.MeaningfulUse
  summary: "\nGets the identifier of the DOPU package associated with this report entry.\n"
  example: []
  syntax:
    content: public string PackageId { get; }
    content.vb: Public ReadOnly Property PackageId As String
    parameters: []
    return:
      type: System.String
      description: "\nA string representing the identifier of the package which\nis returned to the application from the call to CreateConnectPackage.\n"
  overload: Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt.PackageId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt.AvailableDate
  commentId: P:Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt.AvailableDate
  id: AvailableDate
  parent: Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt
  langs:
  - csharp
  - vb
  name: AvailableDate
  nameWithType: DOPUDocumentReceipt.AvailableDate
  fullName: Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt.AvailableDate
  type: Property
  source:
    remote:
      path: Microsoft.Health/MeaningfulUse/DopuDocumentReceipt.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: AvailableDate
    path: MeaningfulUse/DopuDocumentReceipt.cs
    startLine: 63
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.MeaningfulUse
  summary: "\nGets the date the DOPU package associated with this report entry was made available in HealthVault.\n"
  example: []
  syntax:
    content: public DateTime AvailableDate { get; }
    content.vb: Public ReadOnly Property AvailableDate As Date
    parameters: []
    return:
      type: System.DateTime
      description: "\nThe date the DOPU package associated with this report entry was made available in HealthVault.\n"
  overload: Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt.AvailableDate*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Microsoft.Health.MeaningfulUse
  commentId: N:Microsoft.Health.MeaningfulUse
  isExternal: false
  name: Microsoft.Health.MeaningfulUse
  nameWithType: Microsoft.Health.MeaningfulUse
  fullName: Microsoft.Health.MeaningfulUse
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt.#ctor*
  commentId: Overload:Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt.#ctor
  isExternal: false
  name: DOPUDocumentReceipt
  nameWithType: DOPUDocumentReceipt.DOPUDocumentReceipt
  fullName: Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt.DOPUDocumentReceipt
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt.Source*
  commentId: Overload:Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt.Source
  isExternal: false
  name: Source
  nameWithType: DOPUDocumentReceipt.Source
  fullName: Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt.Source
- uid: Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt.PackageId*
  commentId: Overload:Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt.PackageId
  isExternal: false
  name: PackageId
  nameWithType: DOPUDocumentReceipt.PackageId
  fullName: Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt.PackageId
- uid: Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt.AvailableDate*
  commentId: Overload:Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt.AvailableDate
  isExternal: false
  name: AvailableDate
  nameWithType: DOPUDocumentReceipt.AvailableDate
  fullName: Microsoft.Health.MeaningfulUse.DOPUDocumentReceipt.AvailableDate
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
