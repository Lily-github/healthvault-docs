### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.HealthServiceMeaningfulUseInfo
  commentId: T:Microsoft.Health.HealthServiceMeaningfulUseInfo
  id: HealthServiceMeaningfulUseInfo
  parent: Microsoft.Health
  children:
  - Microsoft.Health.HealthServiceMeaningfulUseInfo.ConfigurationValues
  - Microsoft.Health.HealthServiceMeaningfulUseInfo.CreateMeaningfulUseInfo(System.Xml.XPath.XPathNavigator)
  - Microsoft.Health.HealthServiceMeaningfulUseInfo.Enabled
  langs:
  - csharp
  - vb
  name: HealthServiceMeaningfulUseInfo
  nameWithType: HealthServiceMeaningfulUseInfo
  fullName: Microsoft.Health.HealthServiceMeaningfulUseInfo
  type: Class
  source:
    remote:
      path: Microsoft.Health/HealthServiceMeaningfulUseInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: HealthServiceMeaningfulUseInfo
    path: HealthServiceMeaningfulUseInfo.cs
    startLine: 15
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nProvides configuration information for Meaningful Use features.\n"
  example: []
  syntax:
    content: public class HealthServiceMeaningfulUseInfo
    content.vb: Public Class HealthServiceMeaningfulUseInfo
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.HealthServiceMeaningfulUseInfo.Enabled
  commentId: P:Microsoft.Health.HealthServiceMeaningfulUseInfo.Enabled
  id: Enabled
  parent: Microsoft.Health.HealthServiceMeaningfulUseInfo
  langs:
  - csharp
  - vb
  name: Enabled
  nameWithType: HealthServiceMeaningfulUseInfo.Enabled
  fullName: Microsoft.Health.HealthServiceMeaningfulUseInfo.Enabled
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthServiceMeaningfulUseInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Enabled
    path: HealthServiceMeaningfulUseInfo.cs
    startLine: 27
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nIndicates whether Meaningful Use features are enabled on this HealthVault instance.\n"
  example: []
  syntax:
    content: public bool Enabled { get; }
    content.vb: Public ReadOnly Property Enabled As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.Health.HealthServiceMeaningfulUseInfo.Enabled*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthServiceMeaningfulUseInfo.ConfigurationValues
  commentId: P:Microsoft.Health.HealthServiceMeaningfulUseInfo.ConfigurationValues
  id: ConfigurationValues
  parent: Microsoft.Health.HealthServiceMeaningfulUseInfo
  langs:
  - csharp
  - vb
  name: ConfigurationValues
  nameWithType: HealthServiceMeaningfulUseInfo.ConfigurationValues
  fullName: Microsoft.Health.HealthServiceMeaningfulUseInfo.ConfigurationValues
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthServiceMeaningfulUseInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ConfigurationValues
    path: HealthServiceMeaningfulUseInfo.cs
    startLine: 42
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the public configuration values for the HealthVault service's\nMeaningful Use features.\n"
  example: []
  syntax:
    content: public Dictionary<string, string> ConfigurationValues { get; }
    content.vb: Public ReadOnly Property ConfigurationValues As Dictionary(Of String, String)
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.String}
      description: "\nThe dictionary returned uses the configuration value name as the key. All entries are\npublic configuration values that the HealthVault service exposes as information to\nHealthVault applications using Meaningful Use features.\nFor example, the MaxMeaningfulUseReportItemsPerRetrieval configuration value specifies the maximum number\nof report entries returned per page for Meaningful Use reports.\n"
  overload: Microsoft.Health.HealthServiceMeaningfulUseInfo.ConfigurationValues*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthServiceMeaningfulUseInfo.CreateMeaningfulUseInfo(System.Xml.XPath.XPathNavigator)
  commentId: M:Microsoft.Health.HealthServiceMeaningfulUseInfo.CreateMeaningfulUseInfo(System.Xml.XPath.XPathNavigator)
  id: CreateMeaningfulUseInfo(System.Xml.XPath.XPathNavigator)
  parent: Microsoft.Health.HealthServiceMeaningfulUseInfo
  langs:
  - csharp
  - vb
  name: CreateMeaningfulUseInfo(XPathNavigator)
  nameWithType: HealthServiceMeaningfulUseInfo.CreateMeaningfulUseInfo(XPathNavigator)
  fullName: Microsoft.Health.HealthServiceMeaningfulUseInfo.CreateMeaningfulUseInfo(System.Xml.XPath.XPathNavigator)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthServiceMeaningfulUseInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CreateMeaningfulUseInfo
    path: HealthServiceMeaningfulUseInfo.cs
    startLine: 67
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nConstructs a <xref href=\"Microsoft.Health.HealthServiceMeaningfulUseInfo\" data-throw-if-not-resolved=\"false\"></xref> object from the  \nsupplied XML.\n"
  example: []
  syntax:
    content: public static HealthServiceMeaningfulUseInfo CreateMeaningfulUseInfo(XPathNavigator nav)
    content.vb: Public Shared Function CreateMeaningfulUseInfo(nav As XPathNavigator) As HealthServiceMeaningfulUseInfo
    parameters:
    - id: nav
      type: System.Xml.XPath.XPathNavigator
      description: "\nAn <xref href=\"System.Xml.XPath.XPathNavigator\" data-throw-if-not-resolved=\"false\"></xref> to access the XML from which the \n<xref href=\"Microsoft.Health.HealthServiceMeaningfulUseInfo\" data-throw-if-not-resolved=\"false\"></xref> object will be constructed.\n"
    return:
      type: Microsoft.Health.HealthServiceMeaningfulUseInfo
      description: "\nA <xref href=\"Microsoft.Health.HealthServiceMeaningfulUseInfo\" data-throw-if-not-resolved=\"false\"></xref> object.\n"
  overload: Microsoft.Health.HealthServiceMeaningfulUseInfo.CreateMeaningfulUseInfo*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.HealthServiceMeaningfulUseInfo.Enabled*
  commentId: Overload:Microsoft.Health.HealthServiceMeaningfulUseInfo.Enabled
  isExternal: false
  name: Enabled
  nameWithType: HealthServiceMeaningfulUseInfo.Enabled
  fullName: Microsoft.Health.HealthServiceMeaningfulUseInfo.Enabled
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Health.HealthServiceMeaningfulUseInfo.ConfigurationValues*
  commentId: Overload:Microsoft.Health.HealthServiceMeaningfulUseInfo.ConfigurationValues
  isExternal: false
  name: ConfigurationValues
  nameWithType: HealthServiceMeaningfulUseInfo.ConfigurationValues
  fullName: Microsoft.Health.HealthServiceMeaningfulUseInfo.ConfigurationValues
- uid: System.Collections.Generic.Dictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, String>
  nameWithType: Dictionary<String, String>
  fullName: System.Collections.Generic.Dictionary<System.String, System.String>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Health.HealthServiceMeaningfulUseInfo
  commentId: T:Microsoft.Health.HealthServiceMeaningfulUseInfo
  parent: Microsoft.Health
  isExternal: false
  name: HealthServiceMeaningfulUseInfo
  nameWithType: HealthServiceMeaningfulUseInfo
  fullName: Microsoft.Health.HealthServiceMeaningfulUseInfo
- uid: System.Xml.XPath.XPathNavigator
  commentId: T:System.Xml.XPath.XPathNavigator
  parent: System.Xml.XPath
  isExternal: true
  name: XPathNavigator
  nameWithType: XPathNavigator
  fullName: System.Xml.XPath.XPathNavigator
- uid: Microsoft.Health.HealthServiceMeaningfulUseInfo.CreateMeaningfulUseInfo*
  commentId: Overload:Microsoft.Health.HealthServiceMeaningfulUseInfo.CreateMeaningfulUseInfo
  isExternal: false
  name: CreateMeaningfulUseInfo
  nameWithType: HealthServiceMeaningfulUseInfo.CreateMeaningfulUseInfo
  fullName: Microsoft.Health.HealthServiceMeaningfulUseInfo.CreateMeaningfulUseInfo
- uid: System.Xml.XPath
  commentId: N:System.Xml.XPath
  isExternal: false
  name: System.Xml.XPath
  nameWithType: System.Xml.XPath
  fullName: System.Xml.XPath
