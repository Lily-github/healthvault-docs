### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect
  commentId: T:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect
  id: HealthVaultPlatformPatientConnect
  parent: Microsoft.Health.PlatformPrimitives
  children:
  - Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.AllocateConnectPackageId(Microsoft.Health.Web.OfflineWebApplicationConnection)
  - Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.CreateConnectPackage(Microsoft.Health.Package.ConnectPackageCreationParameters,Microsoft.Health.ItemTypes.PasswordProtectedPackage)
  - Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.CreateConnectPackage(Microsoft.Health.Package.ConnectPackageCreationParameters,Microsoft.Health.ItemTypes.PasswordProtectedPackage,System.Collections.Generic.IEnumerable{System.Uri})
  - Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.CreatePatientConnection(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,System.Uri,System.String)
  - Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.DeletePendingConnectionPackageForIdentityCode(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String)
  - Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.DeletePendingConnectPackages(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String)
  - Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.DeletePendingPatientConnection(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String)
  - Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.DisableMock
  - Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.EnableMock(Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect)
  - Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.GetValidatedPatientConnections(Microsoft.Health.Web.OfflineWebApplicationConnection,System.DateTime)
  - Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.UpdateConnectPackageApplicationPatientId(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String)
  - Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.UpdateConnectPackageApplicationPatientIdForIdentityCode(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String)
  - Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.UpdatePatientConnectionApplicationPatientId(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String)
  langs:
  - csharp
  - vb
  name: HealthVaultPlatformPatientConnect
  nameWithType: HealthVaultPlatformPatientConnect
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect
  type: Class
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformPatientConnect.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: HealthVaultPlatformPatientConnect
    path: HealthVaultPlatformPatientConnect.cs
    startLine: 28
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nProvides low-level access to the HealthVault patient connect operations.\n"
  remarks: "\n<xref href=\"Microsoft.Health.HealthVaultPlatform\" data-throw-if-not-resolved=\"false\"></xref> uses this class to perform operations. Set \nHealthVaultPlatformPatientConnect.Current to a derived class to intercept all message calls.\n"
  example: []
  syntax:
    content: public class HealthVaultPlatformPatientConnect
    content.vb: Public Class HealthVaultPlatformPatientConnect
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.EnableMock(Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect)
  commentId: M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.EnableMock(Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect)
  id: EnableMock(Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect)
  parent: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect
  langs:
  - csharp
  - vb
  name: EnableMock(HealthVaultPlatformPatientConnect)
  nameWithType: HealthVaultPlatformPatientConnect.EnableMock(HealthVaultPlatformPatientConnect)
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.EnableMock(Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformPatientConnect.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: EnableMock
    path: HealthVaultPlatformPatientConnect.cs
    startLine: 45
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nEnables mocking of calls to this class.\n"
  remarks: "\nThe calling class should pass in a class that derives from this\nclass and overrides the calls to be mocked. \n"
  example: []
  syntax:
    content: public static void EnableMock(HealthVaultPlatformPatientConnect mock)
    content.vb: Public Shared Sub EnableMock(mock As HealthVaultPlatformPatientConnect)
    parameters:
    - id: mock
      type: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect
      description: The mocking class.
  overload: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.EnableMock*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThere is already a mock registered for this class.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.DisableMock
  commentId: M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.DisableMock
  id: DisableMock
  parent: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect
  langs:
  - csharp
  - vb
  name: DisableMock()
  nameWithType: HealthVaultPlatformPatientConnect.DisableMock()
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.DisableMock()
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformPatientConnect.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DisableMock
    path: HealthVaultPlatformPatientConnect.cs
    startLine: 61
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nRemoves mocking of calls to this class.\n"
  example: []
  syntax:
    content: public static void DisableMock()
    content.vb: Public Shared Sub DisableMock
  overload: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.DisableMock*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThere is no mock registered for this class.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.CreatePatientConnection(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,System.Uri,System.String)
  commentId: M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.CreatePatientConnection(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,System.Uri,System.String)
  id: CreatePatientConnection(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,System.Uri,System.String)
  parent: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect
  langs:
  - csharp
  - vb
  name: CreatePatientConnection(OfflineWebApplicationConnection, String, String, String, Uri, String)
  nameWithType: HealthVaultPlatformPatientConnect.CreatePatientConnection(OfflineWebApplicationConnection, String, String, String, Uri, String)
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.CreatePatientConnection(Microsoft.Health.Web.OfflineWebApplicationConnection, System.String, System.String, System.String, System.Uri, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformPatientConnect.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CreatePatientConnection
    path: HealthVaultPlatformPatientConnect.cs
    startLine: 132
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nAsks HealthVault to create a pending patient connection for the application specified\nby the connection with the specified user specific parameters.\n"
  example: []
  syntax:
    content: public virtual string CreatePatientConnection(OfflineWebApplicationConnection connection, string friendlyName, string securityQuestion, string securityAnswer, Uri callbackUrl, string applicationPatientId)
    content.vb: Public Overridable Function CreatePatientConnection(connection As OfflineWebApplicationConnection, friendlyName As String, securityQuestion As String, securityAnswer As String, callbackUrl As Uri, applicationPatientId As String) As String
    parameters:
    - id: connection
      type: Microsoft.Health.Web.OfflineWebApplicationConnection
      description: "\nThe connection to HealthVault. The application ID in the connection is used\nwhen making the patient connection.\n"
    - id: friendlyName
      type: System.String
      description: "\nA friendly name for the patient connection which will be shown to the user when they\ngo to HealthVault Shell to validate the connection.\n"
    - id: securityQuestion
      type: System.String
      description: "\nA question (usually provided by the patient) to which the patient must provide the \nanswer when they go to validate the connection in the HealthVault Shell.\n"
    - id: securityAnswer
      type: System.String
      description: "\nThe answer to the <span class=\"paramref\">securityQuestion</span> which the patient must use\nwhen validating the connection in HealthVault Shell. The answer is case-insensitive but\notherwise must match exactly. In most cases it is recommended that this is a single \nword to prevent entry problems when validating the connection.\n"
    - id: callbackUrl
      type: System.Uri
      description: "\nNot yet implemented. May be null.\n"
    - id: applicationPatientId
      type: System.String
      description: "\nThe application specific identifier for the user. This identifier is used to uniquely\nidentify the user in the application data storage whereas the HealthVault person ID is\nused to identify the person in HealthVault.\n"
    return:
      type: System.String
      description: "\nA token that the application must give to the patient to use when validating the\nconnection request.\n"
  overload: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.CreatePatientConnection*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> is <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">friendlyName</span>, <span class=\"paramref\">securityQuestion</span>,\n<span class=\"paramref\">securityAnswer</span>, or <span class=\"paramref\">applicationPatientId</span> is\n<strong>null</strong> or empty.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf an error occurs when contacting HealthVault.\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.DeletePendingPatientConnection(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String)
  commentId: M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.DeletePendingPatientConnection(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String)
  id: DeletePendingPatientConnection(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String)
  parent: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect
  langs:
  - csharp
  - vb
  name: DeletePendingPatientConnection(OfflineWebApplicationConnection, String)
  nameWithType: HealthVaultPlatformPatientConnect.DeletePendingPatientConnection(OfflineWebApplicationConnection, String)
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.DeletePendingPatientConnection(Microsoft.Health.Web.OfflineWebApplicationConnection, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformPatientConnect.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DeletePendingPatientConnection
    path: HealthVaultPlatformPatientConnect.cs
    startLine: 223
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nDeletes a request for a connection that has been made by the calling application but\nhas not been validated by the user.\n"
  example: []
  syntax:
    content: public virtual void DeletePendingPatientConnection(OfflineWebApplicationConnection connection, string applicationPatientId)
    content.vb: Public Overridable Sub DeletePendingPatientConnection(connection As OfflineWebApplicationConnection, applicationPatientId As String)
    parameters:
    - id: connection
      type: Microsoft.Health.Web.OfflineWebApplicationConnection
      description: "\nThe connection to HealthVault to use for this operation. \n"
    - id: applicationPatientId
      type: System.String
      description: "\nThe application's identifier for the user which was used to create the connection \nrequest.\n"
  overload: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.DeletePendingPatientConnection*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> is <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">applicationPatientId</span> is <strong>null</strong> or empty.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf an error occurs when contacting HealthVault.\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.UpdatePatientConnectionApplicationPatientId(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String)
  commentId: M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.UpdatePatientConnectionApplicationPatientId(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String)
  id: UpdatePatientConnectionApplicationPatientId(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String)
  parent: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect
  langs:
  - csharp
  - vb
  name: UpdatePatientConnectionApplicationPatientId(OfflineWebApplicationConnection, String, String)
  nameWithType: HealthVaultPlatformPatientConnect.UpdatePatientConnectionApplicationPatientId(OfflineWebApplicationConnection, String, String)
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.UpdatePatientConnectionApplicationPatientId(Microsoft.Health.Web.OfflineWebApplicationConnection, System.String, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformPatientConnect.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: UpdatePatientConnectionApplicationPatientId
    path: HealthVaultPlatformPatientConnect.cs
    startLine: 267
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nUpdates an existing pending patient connection with a new application patient identifier.\n"
  example: []
  syntax:
    content: public virtual void UpdatePatientConnectionApplicationPatientId(OfflineWebApplicationConnection connection, string oldApplicationPatientId, string newApplicationPatientId)
    content.vb: Public Overridable Sub UpdatePatientConnectionApplicationPatientId(connection As OfflineWebApplicationConnection, oldApplicationPatientId As String, newApplicationPatientId As String)
    parameters:
    - id: connection
      type: Microsoft.Health.Web.OfflineWebApplicationConnection
      description: "\nThe HealthVault connection to use for the operation.\n"
    - id: oldApplicationPatientId
      type: System.String
      description: "\nThe application patient identifier that was used to make the initial connection request.\n"
    - id: newApplicationPatientId
      type: System.String
      description: "\nThe new application patient identifier.\n"
  overload: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.UpdatePatientConnectionApplicationPatientId*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> is <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">oldApplicationPatientId</span> or <span class=\"paramref\">newApplicationPatientId</span>\nis <strong>null</strong> or empty.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf an error occurs when contacting HealthVault.\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.GetValidatedPatientConnections(Microsoft.Health.Web.OfflineWebApplicationConnection,System.DateTime)
  commentId: M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.GetValidatedPatientConnections(Microsoft.Health.Web.OfflineWebApplicationConnection,System.DateTime)
  id: GetValidatedPatientConnections(Microsoft.Health.Web.OfflineWebApplicationConnection,System.DateTime)
  parent: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect
  langs:
  - csharp
  - vb
  name: GetValidatedPatientConnections(OfflineWebApplicationConnection, DateTime)
  nameWithType: HealthVaultPlatformPatientConnect.GetValidatedPatientConnections(OfflineWebApplicationConnection, DateTime)
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.GetValidatedPatientConnections(Microsoft.Health.Web.OfflineWebApplicationConnection, System.DateTime)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformPatientConnect.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetValidatedPatientConnections
    path: HealthVaultPlatformPatientConnect.cs
    startLine: 320
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nGets the connections for the application that people have accepted since the specified\ndate.\n"
  remarks: "\nValidated connect requests are removed by HealthVault after 90 days. It is advised \nthat applications call <xref href=\"Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.GetValidatedPatientConnections(Microsoft.Health.Web.OfflineWebApplicationConnection%2cSystem.DateTime)\" data-throw-if-not-resolved=\"false\"></xref> \ndaily or weekly to ensure that all validated connect requests are retrieved.\n"
  example: []
  syntax:
    content: public virtual Collection<ValidatedPatientConnection> GetValidatedPatientConnections(OfflineWebApplicationConnection connection, DateTime validatedSince)
    content.vb: Public Overridable Function GetValidatedPatientConnections(connection As OfflineWebApplicationConnection, validatedSince As Date) As Collection(Of ValidatedPatientConnection)
    parameters:
    - id: connection
      type: Microsoft.Health.Web.OfflineWebApplicationConnection
      description: "\nThe application's connection to HealthVault.\n"
    - id: validatedSince
      type: System.DateTime
      description: "\nConnections that have been validated since this date will be returned. The date passed\nshould be in UTC time.\n"
    return:
      type: System.Collections.ObjectModel.Collection{Microsoft.Health.PatientConnect.ValidatedPatientConnection}
      description: "\nA collection of the connections that people have accepted.\n"
  overload: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.GetValidatedPatientConnections*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> is <strong>null</strong>.\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.CreateConnectPackage(Microsoft.Health.Package.ConnectPackageCreationParameters,Microsoft.Health.ItemTypes.PasswordProtectedPackage)
  commentId: M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.CreateConnectPackage(Microsoft.Health.Package.ConnectPackageCreationParameters,Microsoft.Health.ItemTypes.PasswordProtectedPackage)
  id: CreateConnectPackage(Microsoft.Health.Package.ConnectPackageCreationParameters,Microsoft.Health.ItemTypes.PasswordProtectedPackage)
  parent: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect
  langs:
  - csharp
  - vb
  name: CreateConnectPackage(ConnectPackageCreationParameters, PasswordProtectedPackage)
  nameWithType: HealthVaultPlatformPatientConnect.CreateConnectPackage(ConnectPackageCreationParameters, PasswordProtectedPackage)
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.CreateConnectPackage(Microsoft.Health.Package.ConnectPackageCreationParameters, Microsoft.Health.ItemTypes.PasswordProtectedPackage)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformPatientConnect.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CreateConnectPackage
    path: HealthVaultPlatformPatientConnect.cs
    startLine: 421
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nAsks HealthVault to create a pending package for the application specified\nby the connection with the specified user specific parameters and the pre-allocated\nidentity code.\n"
  remarks: "\nThe password protected package supports 2 encryption algorithms, AES256 (recommended)\nand TripleDES. \n<br /><br />\nFor AES256, the supported key size is 256 bits, the blocksize is 256 bits, the IV \nlength is 32 bytes.\n<br /><br />\nFor TripleDES, the supported key size is 192 bits, the blocksize is 64 bits, the IV \nlength is 8 bytes.\n<br /><br />\nThe encryption key should be derived using the answer, the salt, and the number of hash \niterations. The decryption will generate this key via the \n<xref href=\"System.Security.Cryptography.Rfc2898DeriveBytes\" data-throw-if-not-resolved=\"false\"></xref> class, hence, encryption should use a similar or \nidentical process. To ensure case-insensitivity, the answer should be converted to its\nlower cased form using <xref href=\"System.String.ToLowerInvariant\" data-throw-if-not-resolved=\"false\"></xref> (culturally-agnostic) \nprior to generating the derived key.\n<br /><br />\nThe algorithm used has the following parameters:\n<ul>\n<li>Mode = CipherMode.CBC</li>\n<li>Padding = PaddingMode.ISO10126</li>\n</ul>\n<br /><br />\nThe salt supplied is used as the salt to the derived key as well as the key to the \nsupplied HMAC. The salt should be at least 8 bytes long.\n<br /><br />\nIt is recommended that the number of hash iterations be at least 10000.\n"
  example: []
  syntax:
    content: public virtual string CreateConnectPackage(ConnectPackageCreationParameters creationParameters, PasswordProtectedPackage connectPackage)
    content.vb: Public Overridable Function CreateConnectPackage(creationParameters As ConnectPackageCreationParameters, connectPackage As PasswordProtectedPackage) As String
    parameters:
    - id: creationParameters
      type: Microsoft.Health.Package.ConnectPackageCreationParameters
      description: "\nThe parameters to use when creating the package. \n"
    - id: connectPackage
      type: Microsoft.Health.ItemTypes.PasswordProtectedPackage
      description: "\nThe pending connect package that the user will add to his/her record. \nThis package's\n<xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref>'s <xref href=\"Microsoft.Health.BlobStore\" data-throw-if-not-resolved=\"false\"></xref> must be an encrypted \nblob of xml that represents a list of HealthRecordItems. This xml blob\nmust be a sequence of <thing></thing> elements, each wrapping the XML representation of a \nsingle HealthRecordItem. Each <thing></thing> element may be generated by calling \n<xref href=\"Microsoft.Health.HealthRecordItem.GetItemXml\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    return:
      type: System.String
      description: "\nA token that the application must give to the patient to use when validating the\nconnection request.\n"
  overload: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.CreateConnectPackage*
  exceptions:
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf an error occurs when contacting HealthVault.\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.CreateConnectPackage(Microsoft.Health.Package.ConnectPackageCreationParameters,Microsoft.Health.ItemTypes.PasswordProtectedPackage,System.Collections.Generic.IEnumerable{System.Uri})
  commentId: M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.CreateConnectPackage(Microsoft.Health.Package.ConnectPackageCreationParameters,Microsoft.Health.ItemTypes.PasswordProtectedPackage,System.Collections.Generic.IEnumerable{System.Uri})
  id: CreateConnectPackage(Microsoft.Health.Package.ConnectPackageCreationParameters,Microsoft.Health.ItemTypes.PasswordProtectedPackage,System.Collections.Generic.IEnumerable{System.Uri})
  parent: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect
  langs:
  - csharp
  - vb
  name: CreateConnectPackage(ConnectPackageCreationParameters, PasswordProtectedPackage, IEnumerable<Uri>)
  nameWithType: HealthVaultPlatformPatientConnect.CreateConnectPackage(ConnectPackageCreationParameters, PasswordProtectedPackage, IEnumerable<Uri>)
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.CreateConnectPackage(Microsoft.Health.Package.ConnectPackageCreationParameters, Microsoft.Health.ItemTypes.PasswordProtectedPackage, System.Collections.Generic.IEnumerable<System.Uri>)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformPatientConnect.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CreateConnectPackage
    path: HealthVaultPlatformPatientConnect.cs
    startLine: 489
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nAsks HealthVault to create a pending package for the application specified\nby the connection with the specified user specific parameters and the pre-allocated\nidentity code.\n"
  remarks: "\nThe password protected package supports 2 encryption algorithms, AES256 (recommended)\nand TripleDES. \n<br /><br />\nFor AES256, the supported key size is 256 bits, the blocksize is 256 bits, the IV \nlength is 32 bytes.\n<br /><br />\nFor TripleDES, the supported key size is 192 bits, the blocksize is 64 bits, the IV \nlength is 8 bytes.\n<br /><br />\nThe encryption key should be derived using the answer, the salt, and the number of hash \niterations. The decryption will generate this key via the \n<xref href=\"System.Security.Cryptography.Rfc2898DeriveBytes\" data-throw-if-not-resolved=\"false\"></xref> class, hence, encryption should use a similar or \nidentical process. To ensure case-insensitivity, the answer should be converted to its\nlower cased form using <xref href=\"System.String.ToLowerInvariant\" data-throw-if-not-resolved=\"false\"></xref> (culturally-agnostic) \nprior to generating the derived key.\n<br /><br />\nThe algorithm used has the following parameters:\n<ul>\n<li>Mode = CipherMode.CBC</li>\n<li>Padding = PaddingMode.ISO10126</li>\n</ul>\n<br /><br />\nThe salt supplied is used as the salt to the derived key as well as the key to the \nsupplied HMAC. The salt should be at least 8 bytes long.\n<br /><br />\nIt is recommended that the number of hash iterations be at least 10000.\n"
  example: []
  syntax:
    content: public virtual string CreateConnectPackage(ConnectPackageCreationParameters creationParameters, PasswordProtectedPackage connectPackage, IEnumerable<Uri> packageContentsBlobUrls)
    content.vb: Public Overridable Function CreateConnectPackage(creationParameters As ConnectPackageCreationParameters, connectPackage As PasswordProtectedPackage, packageContentsBlobUrls As IEnumerable(Of Uri)) As String
    parameters:
    - id: creationParameters
      type: Microsoft.Health.Package.ConnectPackageCreationParameters
      description: "\nThe parameters to use when creating the package. \n"
    - id: connectPackage
      type: Microsoft.Health.ItemTypes.PasswordProtectedPackage
      description: "\nThe pending connect package that the user will add to his/her record. \nThis package's\n<xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref>'s <xref href=\"Microsoft.Health.BlobStore\" data-throw-if-not-resolved=\"false\"></xref> must be an encrypted \nblob of xml that represents a list of HealthRecordItems. This xml blob\nmust be a sequence of <thing></thing> elements, each wrapping the XML representation of a \nsingle HealthRecordItem. Each <thing></thing> element may be generated by calling \n<xref href=\"Microsoft.Health.HealthRecordItem.GetItemXml\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    - id: packageContentsBlobUrls
      type: System.Collections.Generic.IEnumerable{System.Uri}
      description: "\nURLs of the streamed blobs of the package contents.\n"
    return:
      type: System.String
      description: "\nA token that the application must give to the patient to use when validating the\nconnection request.\n"
  overload: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.CreateConnectPackage*
  exceptions:
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf an error occurs when contacting HealthVault.\n"
  nameWithType.vb: HealthVaultPlatformPatientConnect.CreateConnectPackage(ConnectPackageCreationParameters, PasswordProtectedPackage, IEnumerable(Of Uri))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.CreateConnectPackage(Microsoft.Health.Package.ConnectPackageCreationParameters, Microsoft.Health.ItemTypes.PasswordProtectedPackage, System.Collections.Generic.IEnumerable(Of System.Uri))
  name.vb: CreateConnectPackage(ConnectPackageCreationParameters, PasswordProtectedPackage, IEnumerable(Of Uri))
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.DeletePendingConnectPackages(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String)
  commentId: M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.DeletePendingConnectPackages(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String)
  id: DeletePendingConnectPackages(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String)
  parent: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect
  langs:
  - csharp
  - vb
  name: DeletePendingConnectPackages(OfflineWebApplicationConnection, String)
  nameWithType: HealthVaultPlatformPatientConnect.DeletePendingConnectPackages(OfflineWebApplicationConnection, String)
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.DeletePendingConnectPackages(Microsoft.Health.Web.OfflineWebApplicationConnection, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformPatientConnect.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DeletePendingConnectPackages
    path: HealthVaultPlatformPatientConnect.cs
    startLine: 529
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nDeletes all packages that have been created by the calling application \nfor the applicationPatientId and have not been accepted by the user.\n"
  example: []
  syntax:
    content: public virtual void DeletePendingConnectPackages(OfflineWebApplicationConnection connection, string applicationPatientId)
    content.vb: Public Overridable Sub DeletePendingConnectPackages(connection As OfflineWebApplicationConnection, applicationPatientId As String)
    parameters:
    - id: connection
      type: Microsoft.Health.Web.OfflineWebApplicationConnection
      description: "\nThe connection to HealthVault to use for this operation. \n"
    - id: applicationPatientId
      type: System.String
      description: "\nThe application specific user ID that was used to create the connection \nrequest.\n"
  overload: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.DeletePendingConnectPackages*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> is <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">applicationPatientId</span> is <strong>null</strong> or empty.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf an error occurs when contacting HealthVault.\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.DeletePendingConnectionPackageForIdentityCode(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String)
  commentId: M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.DeletePendingConnectionPackageForIdentityCode(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String)
  id: DeletePendingConnectionPackageForIdentityCode(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String)
  parent: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect
  langs:
  - csharp
  - vb
  name: DeletePendingConnectionPackageForIdentityCode(OfflineWebApplicationConnection, String)
  nameWithType: HealthVaultPlatformPatientConnect.DeletePendingConnectionPackageForIdentityCode(OfflineWebApplicationConnection, String)
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.DeletePendingConnectionPackageForIdentityCode(Microsoft.Health.Web.OfflineWebApplicationConnection, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformPatientConnect.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DeletePendingConnectionPackageForIdentityCode
    path: HealthVaultPlatformPatientConnect.cs
    startLine: 569
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nDeletes a single package that has been created by the calling application but has not been \naccepted by the user.\n"
  example: []
  syntax:
    content: public virtual void DeletePendingConnectionPackageForIdentityCode(OfflineWebApplicationConnection connection, string identityCode)
    content.vb: Public Overridable Sub DeletePendingConnectionPackageForIdentityCode(connection As OfflineWebApplicationConnection, identityCode As String)
    parameters:
    - id: connection
      type: Microsoft.Health.Web.OfflineWebApplicationConnection
      description: "\nThe connection to HealthVault to use for this operation. \n"
    - id: identityCode
      type: System.String
      description: "\nThe unique token that identifies the package.\n"
  overload: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.DeletePendingConnectionPackageForIdentityCode*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> is <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">identityCode</span> is <strong>null</strong> or empty.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf an error occurs when contacting HealthVault.\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.UpdateConnectPackageApplicationPatientId(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String)
  commentId: M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.UpdateConnectPackageApplicationPatientId(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String)
  id: UpdateConnectPackageApplicationPatientId(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String)
  parent: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect
  langs:
  - csharp
  - vb
  name: UpdateConnectPackageApplicationPatientId(OfflineWebApplicationConnection, String, String)
  nameWithType: HealthVaultPlatformPatientConnect.UpdateConnectPackageApplicationPatientId(OfflineWebApplicationConnection, String, String)
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.UpdateConnectPackageApplicationPatientId(Microsoft.Health.Web.OfflineWebApplicationConnection, System.String, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformPatientConnect.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: UpdateConnectPackageApplicationPatientId
    path: HealthVaultPlatformPatientConnect.cs
    startLine: 621
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nUpdates existing pending packages with a new application patient identifier.\n"
  example: []
  syntax:
    content: public virtual void UpdateConnectPackageApplicationPatientId(OfflineWebApplicationConnection connection, string oldApplicationPatientId, string newApplicationPatientId)
    content.vb: Public Overridable Sub UpdateConnectPackageApplicationPatientId(connection As OfflineWebApplicationConnection, oldApplicationPatientId As String, newApplicationPatientId As String)
    parameters:
    - id: connection
      type: Microsoft.Health.Web.OfflineWebApplicationConnection
      description: "\nThe HealthVault connection to use for the operation.\n"
    - id: oldApplicationPatientId
      type: System.String
      description: "\nThe application patient identifier that was used to create the initial package.\n"
    - id: newApplicationPatientId
      type: System.String
      description: "\nThe new application patient identifier.\n"
  overload: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.UpdateConnectPackageApplicationPatientId*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> is <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">oldApplicationPatientId</span> or <span class=\"paramref\">newApplicationPatientId</span>\nis <strong>null</strong> or empty.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf an error occurs when contacting HealthVault.\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.UpdateConnectPackageApplicationPatientIdForIdentityCode(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String)
  commentId: M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.UpdateConnectPackageApplicationPatientIdForIdentityCode(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String)
  id: UpdateConnectPackageApplicationPatientIdForIdentityCode(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String)
  parent: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect
  langs:
  - csharp
  - vb
  name: UpdateConnectPackageApplicationPatientIdForIdentityCode(OfflineWebApplicationConnection, String, String)
  nameWithType: HealthVaultPlatformPatientConnect.UpdateConnectPackageApplicationPatientIdForIdentityCode(OfflineWebApplicationConnection, String, String)
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.UpdateConnectPackageApplicationPatientIdForIdentityCode(Microsoft.Health.Web.OfflineWebApplicationConnection, System.String, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformPatientConnect.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: UpdateConnectPackageApplicationPatientIdForIdentityCode
    path: HealthVaultPlatformPatientConnect.cs
    startLine: 677
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nUpdates an existing pending package with a new application patient identifier.\n"
  example: []
  syntax:
    content: public virtual void UpdateConnectPackageApplicationPatientIdForIdentityCode(OfflineWebApplicationConnection connection, string identityCode, string newApplicationPatientId)
    content.vb: Public Overridable Sub UpdateConnectPackageApplicationPatientIdForIdentityCode(connection As OfflineWebApplicationConnection, identityCode As String, newApplicationPatientId As String)
    parameters:
    - id: connection
      type: Microsoft.Health.Web.OfflineWebApplicationConnection
      description: "\nThe HealthVault connection to use for the operation.\n"
    - id: identityCode
      type: System.String
      description: "\nThe unique token that identifies the package.\n"
    - id: newApplicationPatientId
      type: System.String
      description: "\nThe new application patient identifier.\n"
  overload: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.UpdateConnectPackageApplicationPatientIdForIdentityCode*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> is <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">newApplicationPatientId</span>\nis <strong>null</strong> or empty.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf an error occurs when contacting HealthVault.\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.AllocateConnectPackageId(Microsoft.Health.Web.OfflineWebApplicationConnection)
  commentId: M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.AllocateConnectPackageId(Microsoft.Health.Web.OfflineWebApplicationConnection)
  id: AllocateConnectPackageId(Microsoft.Health.Web.OfflineWebApplicationConnection)
  parent: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect
  langs:
  - csharp
  - vb
  name: AllocateConnectPackageId(OfflineWebApplicationConnection)
  nameWithType: HealthVaultPlatformPatientConnect.AllocateConnectPackageId(OfflineWebApplicationConnection)
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.AllocateConnectPackageId(Microsoft.Health.Web.OfflineWebApplicationConnection)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthVaultPlatformPatientConnect.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: AllocateConnectPackageId
    path: HealthVaultPlatformPatientConnect.cs
    startLine: 739
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.PlatformPrimitives
  summary: "\nAllocates a package ID within HealthVault and returns it.\n"
  remarks: "\n<p>The package ID is allocated as a place holder for information that \nis identifiable but not yet available through the HealthVault service.\nThe returned package ID token should be stored or given to a patient, \nthen used in a call to CreateConnectPackage()\nto send the package data to the HealthVault service.</p>\n<p>The package ID is not a GUID.  It uses a shorter format that is more\nconvenient for offline delivery and manual data entry.  The HealthVault \nservice guarantees that each package ID is unique for the lifetime of the \npackage.  Once the package has been accepted by the patient using the \nHealthVault Shell, or explicitly deleted using the API, the package ID is \ndeallocated and may be reused.</p>\n"
  example: []
  syntax:
    content: public virtual string AllocateConnectPackageId(OfflineWebApplicationConnection connection)
    content.vb: Public Overridable Function AllocateConnectPackageId(connection As OfflineWebApplicationConnection) As String
    parameters:
    - id: connection
      type: Microsoft.Health.Web.OfflineWebApplicationConnection
      description: "\nThe HealthVault connection to use for the operation.\n"
    return:
      type: System.String
      description: "\nA token that the application must give to the patient to use when validating the\nconnection request.\n"
  overload: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.AllocateConnectPackageId*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">connection</span> is <strong>null</strong>.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf an error occurs when contacting HealthVault.\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: Microsoft.Health.HealthVaultPlatform
  commentId: T:Microsoft.Health.HealthVaultPlatform
  isExternal: false
  name: HealthVaultPlatform
  nameWithType: HealthVaultPlatform
  fullName: Microsoft.Health.HealthVaultPlatform
- uid: Microsoft.Health.PlatformPrimitives
  commentId: N:Microsoft.Health.PlatformPrimitives
  isExternal: false
  name: Microsoft.Health.PlatformPrimitives
  nameWithType: Microsoft.Health.PlatformPrimitives
  fullName: Microsoft.Health.PlatformPrimitives
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.EnableMock*
  commentId: Overload:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.EnableMock
  isExternal: false
  name: EnableMock
  nameWithType: HealthVaultPlatformPatientConnect.EnableMock
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.EnableMock
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect
  commentId: T:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect
  parent: Microsoft.Health.PlatformPrimitives
  isExternal: false
  name: HealthVaultPlatformPatientConnect
  nameWithType: HealthVaultPlatformPatientConnect
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.DisableMock*
  commentId: Overload:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.DisableMock
  isExternal: false
  name: DisableMock
  nameWithType: HealthVaultPlatformPatientConnect.DisableMock
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.DisableMock
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.CreatePatientConnection*
  commentId: Overload:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.CreatePatientConnection
  isExternal: false
  name: CreatePatientConnection
  nameWithType: HealthVaultPlatformPatientConnect.CreatePatientConnection
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.CreatePatientConnection
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: Microsoft.Health.HealthServiceException
  commentId: T:Microsoft.Health.HealthServiceException
  parent: Microsoft.Health
  isExternal: false
  name: HealthServiceException
  nameWithType: HealthServiceException
  fullName: Microsoft.Health.HealthServiceException
- uid: Microsoft.Health.Web.OfflineWebApplicationConnection
  commentId: T:Microsoft.Health.Web.OfflineWebApplicationConnection
  parent: Microsoft.Health.Web
  isExternal: false
  name: OfflineWebApplicationConnection
  nameWithType: OfflineWebApplicationConnection
  fullName: Microsoft.Health.Web.OfflineWebApplicationConnection
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: Microsoft.Health.Web
  commentId: N:Microsoft.Health.Web
  isExternal: false
  name: Microsoft.Health.Web
  nameWithType: Microsoft.Health.Web
  fullName: Microsoft.Health.Web
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.DeletePendingPatientConnection*
  commentId: Overload:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.DeletePendingPatientConnection
  isExternal: false
  name: DeletePendingPatientConnection
  nameWithType: HealthVaultPlatformPatientConnect.DeletePendingPatientConnection
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.DeletePendingPatientConnection
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.UpdatePatientConnectionApplicationPatientId*
  commentId: Overload:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.UpdatePatientConnectionApplicationPatientId
  isExternal: false
  name: UpdatePatientConnectionApplicationPatientId
  nameWithType: HealthVaultPlatformPatientConnect.UpdatePatientConnectionApplicationPatientId
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.UpdatePatientConnectionApplicationPatientId
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.GetValidatedPatientConnections(Microsoft.Health.Web.OfflineWebApplicationConnection,System.DateTime)
  commentId: M:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.GetValidatedPatientConnections(Microsoft.Health.Web.OfflineWebApplicationConnection,System.DateTime)
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.GetValidatedPatientConnections*
  commentId: Overload:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.GetValidatedPatientConnections
  isExternal: false
  name: GetValidatedPatientConnections
  nameWithType: HealthVaultPlatformPatientConnect.GetValidatedPatientConnections
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.GetValidatedPatientConnections
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Collections.ObjectModel.Collection{Microsoft.Health.PatientConnect.ValidatedPatientConnection}
  commentId: T:System.Collections.ObjectModel.Collection{Microsoft.Health.PatientConnect.ValidatedPatientConnection}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.Collection`1
  name: Collection<ValidatedPatientConnection>
  nameWithType: Collection<ValidatedPatientConnection>
  fullName: System.Collections.ObjectModel.Collection<Microsoft.Health.PatientConnect.ValidatedPatientConnection>
  nameWithType.vb: Collection(Of ValidatedPatientConnection)
  fullName.vb: System.Collections.ObjectModel.Collection(Of Microsoft.Health.PatientConnect.ValidatedPatientConnection)
  name.vb: Collection(Of ValidatedPatientConnection)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.PatientConnect.ValidatedPatientConnection
    name: ValidatedPatientConnection
    nameWithType: ValidatedPatientConnection
    fullName: Microsoft.Health.PatientConnect.ValidatedPatientConnection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.PatientConnect.ValidatedPatientConnection
    name: ValidatedPatientConnection
    nameWithType: ValidatedPatientConnection
    fullName: Microsoft.Health.PatientConnect.ValidatedPatientConnection
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.Collection`1
  commentId: T:System.Collections.ObjectModel.Collection`1
  isExternal: true
  name: Collection<T>
  nameWithType: Collection<T>
  fullName: System.Collections.ObjectModel.Collection<T>
  nameWithType.vb: Collection(Of T)
  fullName.vb: System.Collections.ObjectModel.Collection(Of T)
  name.vb: Collection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: System.Security.Cryptography.Rfc2898DeriveBytes
  commentId: T:System.Security.Cryptography.Rfc2898DeriveBytes
- uid: System.String.ToLowerInvariant
  commentId: M:System.String.ToLowerInvariant
- uid: Microsoft.Health.HealthRecordItem
  commentId: T:Microsoft.Health.HealthRecordItem
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordItem
  nameWithType: HealthRecordItem
  fullName: Microsoft.Health.HealthRecordItem
- uid: Microsoft.Health.BlobStore
  commentId: T:Microsoft.Health.BlobStore
  parent: Microsoft.Health
  isExternal: false
  name: BlobStore
  nameWithType: BlobStore
  fullName: Microsoft.Health.BlobStore
- uid: Microsoft.Health.HealthRecordItem.GetItemXml
  commentId: M:Microsoft.Health.HealthRecordItem.GetItemXml
  parent: Microsoft.Health.HealthRecordItem
  isExternal: false
  name: GetItemXml()
  nameWithType: HealthRecordItem.GetItemXml()
  fullName: Microsoft.Health.HealthRecordItem.GetItemXml()
  spec.csharp:
  - uid: Microsoft.Health.HealthRecordItem.GetItemXml
    name: GetItemXml
    nameWithType: HealthRecordItem.GetItemXml
    fullName: Microsoft.Health.HealthRecordItem.GetItemXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.HealthRecordItem.GetItemXml
    name: GetItemXml
    nameWithType: HealthRecordItem.GetItemXml
    fullName: Microsoft.Health.HealthRecordItem.GetItemXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.CreateConnectPackage*
  commentId: Overload:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.CreateConnectPackage
  isExternal: false
  name: CreateConnectPackage
  nameWithType: HealthVaultPlatformPatientConnect.CreateConnectPackage
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.CreateConnectPackage
- uid: Microsoft.Health.Package.ConnectPackageCreationParameters
  commentId: T:Microsoft.Health.Package.ConnectPackageCreationParameters
  parent: Microsoft.Health.Package
  isExternal: false
  name: ConnectPackageCreationParameters
  nameWithType: ConnectPackageCreationParameters
  fullName: Microsoft.Health.Package.ConnectPackageCreationParameters
- uid: Microsoft.Health.ItemTypes.PasswordProtectedPackage
  commentId: T:Microsoft.Health.ItemTypes.PasswordProtectedPackage
  parent: Microsoft.Health.ItemTypes
  isExternal: false
  name: PasswordProtectedPackage
  nameWithType: PasswordProtectedPackage
  fullName: Microsoft.Health.ItemTypes.PasswordProtectedPackage
- uid: Microsoft.Health.Package
  commentId: N:Microsoft.Health.Package
  isExternal: false
  name: Microsoft.Health.Package
  nameWithType: Microsoft.Health.Package
  fullName: Microsoft.Health.Package
- uid: Microsoft.Health.ItemTypes
  commentId: N:Microsoft.Health.ItemTypes
  isExternal: false
  name: Microsoft.Health.ItemTypes
  nameWithType: Microsoft.Health.ItemTypes
  fullName: Microsoft.Health.ItemTypes
- uid: System.Collections.Generic.IEnumerable{System.Uri}
  commentId: T:System.Collections.Generic.IEnumerable{System.Uri}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Uri>
  nameWithType: IEnumerable<Uri>
  fullName: System.Collections.Generic.IEnumerable<System.Uri>
  nameWithType.vb: IEnumerable(Of Uri)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Uri)
  name.vb: IEnumerable(Of Uri)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.DeletePendingConnectPackages*
  commentId: Overload:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.DeletePendingConnectPackages
  isExternal: false
  name: DeletePendingConnectPackages
  nameWithType: HealthVaultPlatformPatientConnect.DeletePendingConnectPackages
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.DeletePendingConnectPackages
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.DeletePendingConnectionPackageForIdentityCode*
  commentId: Overload:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.DeletePendingConnectionPackageForIdentityCode
  isExternal: false
  name: DeletePendingConnectionPackageForIdentityCode
  nameWithType: HealthVaultPlatformPatientConnect.DeletePendingConnectionPackageForIdentityCode
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.DeletePendingConnectionPackageForIdentityCode
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.UpdateConnectPackageApplicationPatientId*
  commentId: Overload:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.UpdateConnectPackageApplicationPatientId
  isExternal: false
  name: UpdateConnectPackageApplicationPatientId
  nameWithType: HealthVaultPlatformPatientConnect.UpdateConnectPackageApplicationPatientId
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.UpdateConnectPackageApplicationPatientId
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.UpdateConnectPackageApplicationPatientIdForIdentityCode*
  commentId: Overload:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.UpdateConnectPackageApplicationPatientIdForIdentityCode
  isExternal: false
  name: UpdateConnectPackageApplicationPatientIdForIdentityCode
  nameWithType: HealthVaultPlatformPatientConnect.UpdateConnectPackageApplicationPatientIdForIdentityCode
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.UpdateConnectPackageApplicationPatientIdForIdentityCode
- uid: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.AllocateConnectPackageId*
  commentId: Overload:Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.AllocateConnectPackageId
  isExternal: false
  name: AllocateConnectPackageId
  nameWithType: HealthVaultPlatformPatientConnect.AllocateConnectPackageId
  fullName: Microsoft.Health.PlatformPrimitives.HealthVaultPlatformPatientConnect.AllocateConnectPackageId
