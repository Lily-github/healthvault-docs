### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.HealthServiceErrorContext
  commentId: T:Microsoft.Health.HealthServiceErrorContext
  id: HealthServiceErrorContext
  parent: Microsoft.Health
  children:
  - Microsoft.Health.HealthServiceErrorContext.InnerException
  - Microsoft.Health.HealthServiceErrorContext.ServerIPAddresses
  - Microsoft.Health.HealthServiceErrorContext.ServerName
  - Microsoft.Health.HealthServiceErrorContext.ToString
  langs:
  - csharp
  - vb
  name: HealthServiceErrorContext
  nameWithType: HealthServiceErrorContext
  fullName: Microsoft.Health.HealthServiceErrorContext
  type: Class
  source:
    remote:
      path: Microsoft.Health/HealthServiceErrorContext.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: HealthServiceErrorContext
    path: HealthServiceErrorContext.cs
    startLine: 16
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nContains the error context of the service when the error occurred.\n"
  example: []
  syntax:
    content: public class HealthServiceErrorContext
    content.vb: Public Class HealthServiceErrorContext
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.HealthServiceErrorContext.ServerName
  commentId: P:Microsoft.Health.HealthServiceErrorContext.ServerName
  id: ServerName
  parent: Microsoft.Health.HealthServiceErrorContext
  langs:
  - csharp
  - vb
  name: ServerName
  nameWithType: HealthServiceErrorContext.ServerName
  fullName: Microsoft.Health.HealthServiceErrorContext.ServerName
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthServiceErrorContext.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ServerName
    path: HealthServiceErrorContext.cs
    startLine: 27
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the name of the server that was handling the request when\nthe error occurred.\n"
  example: []
  syntax:
    content: public string ServerName { get; }
    content.vb: Public ReadOnly Property ServerName As String
    parameters: []
    return:
      type: System.String
      description: "\nA string representing the server name.\n"
  overload: Microsoft.Health.HealthServiceErrorContext.ServerName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthServiceErrorContext.ServerIPAddresses
  commentId: P:Microsoft.Health.HealthServiceErrorContext.ServerIPAddresses
  id: ServerIPAddresses
  parent: Microsoft.Health.HealthServiceErrorContext
  langs:
  - csharp
  - vb
  name: ServerIPAddresses
  nameWithType: HealthServiceErrorContext.ServerIPAddresses
  fullName: Microsoft.Health.HealthServiceErrorContext.ServerIPAddresses
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthServiceErrorContext.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ServerIPAddresses
    path: HealthServiceErrorContext.cs
    startLine: 43
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the IP addresses of the server that was handling the request\nwhen the error occurred.\n"
  example: []
  syntax:
    content: public ReadOnlyCollection<IPAddress> ServerIPAddresses { get; }
    content.vb: Public ReadOnly Property ServerIPAddresses As ReadOnlyCollection(Of IPAddress)
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Net.IPAddress}
      description: "\nA read-only collection of IP addresses.\n"
  overload: Microsoft.Health.HealthServiceErrorContext.ServerIPAddresses*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthServiceErrorContext.InnerException
  commentId: P:Microsoft.Health.HealthServiceErrorContext.InnerException
  id: InnerException
  parent: Microsoft.Health.HealthServiceErrorContext
  langs:
  - csharp
  - vb
  name: InnerException
  nameWithType: HealthServiceErrorContext.InnerException
  fullName: Microsoft.Health.HealthServiceErrorContext.InnerException
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthServiceErrorContext.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: InnerException
    path: HealthServiceErrorContext.cs
    startLine: 69
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the exception message and stack trace of the exception\nfrom the server.\n"
  remarks: "\nThis is the ToString() of the exception that occurred while \nhandling the request.\n"
  example: []
  syntax:
    content: public string InnerException { get; }
    content.vb: Public ReadOnly Property InnerException As String
    parameters: []
    return:
      type: System.String
      description: "\nA string representing the exception message and stack trace.\n"
  overload: Microsoft.Health.HealthServiceErrorContext.InnerException*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthServiceErrorContext.ToString
  commentId: M:Microsoft.Health.HealthServiceErrorContext.ToString
  id: ToString
  parent: Microsoft.Health.HealthServiceErrorContext
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: HealthServiceErrorContext.ToString()
  fullName: Microsoft.Health.HealthServiceErrorContext.ToString()
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthServiceErrorContext.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ToString
    path: HealthServiceErrorContext.cs
    startLine: 86
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nRetrieves the string representation of the <xref href=\"Microsoft.Health.HealthServiceErrorContext\" data-throw-if-not-resolved=\"false\"></xref> \nobject.\n"
  example: []
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\nA string representing the contents of the <xref href=\"Microsoft.Health.HealthServiceErrorContext\" data-throw-if-not-resolved=\"false\"></xref>\nobject.\n"
  overridden: System.Object.ToString
  overload: Microsoft.Health.HealthServiceErrorContext.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.HealthServiceErrorContext.ServerName*
  commentId: Overload:Microsoft.Health.HealthServiceErrorContext.ServerName
  isExternal: false
  name: ServerName
  nameWithType: HealthServiceErrorContext.ServerName
  fullName: Microsoft.Health.HealthServiceErrorContext.ServerName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Health.HealthServiceErrorContext.ServerIPAddresses*
  commentId: Overload:Microsoft.Health.HealthServiceErrorContext.ServerIPAddresses
  isExternal: false
  name: ServerIPAddresses
  nameWithType: HealthServiceErrorContext.ServerIPAddresses
  fullName: Microsoft.Health.HealthServiceErrorContext.ServerIPAddresses
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Net.IPAddress}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{System.Net.IPAddress}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<IPAddress>
  nameWithType: ReadOnlyCollection<IPAddress>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Net.IPAddress>
  nameWithType.vb: ReadOnlyCollection(Of IPAddress)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of System.Net.IPAddress)
  name.vb: ReadOnlyCollection(Of IPAddress)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.IPAddress
    name: IPAddress
    nameWithType: IPAddress
    fullName: System.Net.IPAddress
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Net.IPAddress
    name: IPAddress
    nameWithType: IPAddress
    fullName: System.Net.IPAddress
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: true
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  nameWithType.vb: ReadOnlyCollection(Of T)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: Microsoft.Health.HealthServiceErrorContext.InnerException*
  commentId: Overload:Microsoft.Health.HealthServiceErrorContext.InnerException
  isExternal: false
  name: InnerException
  nameWithType: HealthServiceErrorContext.InnerException
  fullName: Microsoft.Health.HealthServiceErrorContext.InnerException
- uid: Microsoft.Health.HealthServiceErrorContext
  commentId: T:Microsoft.Health.HealthServiceErrorContext
  isExternal: false
  name: HealthServiceErrorContext
  nameWithType: HealthServiceErrorContext
  fullName: Microsoft.Health.HealthServiceErrorContext
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthServiceErrorContext.ToString*
  commentId: Overload:Microsoft.Health.HealthServiceErrorContext.ToString
  isExternal: false
  name: ToString
  nameWithType: HealthServiceErrorContext.ToString
  fullName: Microsoft.Health.HealthServiceErrorContext.ToString
