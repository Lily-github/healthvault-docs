### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.Utility.Diagnostics.BaseLogger`1
  commentId: T:Microsoft.Health.Utility.Diagnostics.BaseLogger`1
  id: BaseLogger`1
  parent: Microsoft.Health.Utility.Diagnostics
  children:
  - Microsoft.Health.Utility.Diagnostics.BaseLogger`1.#ctor(Microsoft.Health.Utility.Diagnostics.EventLogger)
  - Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Close
  - Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Dispose
  - Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Dispose(System.Boolean)
  - Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Disposed
  - Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Finalize
  - Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Flush
  - Microsoft.Health.Utility.Diagnostics.BaseLogger`1.IsAvailable
  - Microsoft.Health.Utility.Diagnostics.BaseLogger`1.LogBatchSize
  - Microsoft.Health.Utility.Diagnostics.BaseLogger`1.LogEvent(`0)
  - Microsoft.Health.Utility.Diagnostics.BaseLogger`1.LogEvents(System.Collections.Generic.IEnumerable{`0})
  - Microsoft.Health.Utility.Diagnostics.BaseLogger`1.MaxLogIntervalMilliseconds
  - Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Open
  - Microsoft.Health.Utility.Diagnostics.BaseLogger`1.SafeLogEvent(`0)
  - Microsoft.Health.Utility.Diagnostics.BaseLogger`1.SafeLogEvents(System.Collections.Generic.IEnumerable{`0})
  - Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Sink(System.Collections.Generic.IList{`0})
  langs:
  - csharp
  - vb
  name: BaseLogger<T>
  nameWithType: BaseLogger<T>
  fullName: Microsoft.Health.Utility.Diagnostics.BaseLogger<T>
  type: Class
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/BaseLogger.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: BaseLogger
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/BaseLogger.cs
    startLine: 84
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nBase class for event logger\n"
  example: []
  syntax:
    content: 'public abstract class BaseLogger<T> : IDisposable where T : ILogEntry'
    content.vb: >-
      Public MustInherit Class BaseLogger(Of T As ILogEntry)
          Implements IDisposable
    typeParameters:
    - id: T
  inheritance:
  - System.Object
  derivedClasses:
  - Microsoft.Health.Utility.Diagnostics.DBLogger`1
  - Microsoft.Health.Utility.Diagnostics.FileLogger`1
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  - System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  nameWithType.vb: BaseLogger(Of T)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Microsoft.Health.Utility.Diagnostics.BaseLogger(Of T)
  name.vb: BaseLogger(Of T)
- uid: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.#ctor(Microsoft.Health.Utility.Diagnostics.EventLogger)
  commentId: M:Microsoft.Health.Utility.Diagnostics.BaseLogger`1.#ctor(Microsoft.Health.Utility.Diagnostics.EventLogger)
  id: '#ctor(Microsoft.Health.Utility.Diagnostics.EventLogger)'
  parent: Microsoft.Health.Utility.Diagnostics.BaseLogger`1
  langs:
  - csharp
  - vb
  name: BaseLogger(EventLogger)
  nameWithType: BaseLogger<T>.BaseLogger(EventLogger)
  fullName: Microsoft.Health.Utility.Diagnostics.BaseLogger<T>.BaseLogger(Microsoft.Health.Utility.Diagnostics.EventLogger)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/BaseLogger.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/BaseLogger.cs
    startLine: 95
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nClass constructor.\n"
  example: []
  syntax:
    content: protected BaseLogger(EventLogger eventLogger)
    content.vb: Protected Sub New(eventLogger As EventLogger)
    parameters:
    - id: eventLogger
      type: Microsoft.Health.Utility.Diagnostics.EventLogger
  overload: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.#ctor*
  nameWithType.vb: BaseLogger(Of T).BaseLogger(EventLogger)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.Health.Utility.Diagnostics.BaseLogger(Of T).BaseLogger(Microsoft.Health.Utility.Diagnostics.EventLogger)
- uid: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Open
  commentId: M:Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Open
  id: Open
  parent: Microsoft.Health.Utility.Diagnostics.BaseLogger`1
  langs:
  - csharp
  - vb
  name: Open()
  nameWithType: BaseLogger<T>.Open()
  fullName: Microsoft.Health.Utility.Diagnostics.BaseLogger<T>.Open()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/BaseLogger.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Open
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/BaseLogger.cs
    startLine: 107
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nStart logger\n"
  example: []
  syntax:
    content: public virtual void Open()
    content.vb: Public Overridable Sub Open
  overload: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Open*
  nameWithType.vb: BaseLogger(Of T).Open()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.Health.Utility.Diagnostics.BaseLogger(Of T).Open()
- uid: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Close
  commentId: M:Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Close
  id: Close
  parent: Microsoft.Health.Utility.Diagnostics.BaseLogger`1
  langs:
  - csharp
  - vb
  name: Close()
  nameWithType: BaseLogger<T>.Close()
  fullName: Microsoft.Health.Utility.Diagnostics.BaseLogger<T>.Close()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/BaseLogger.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Close
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/BaseLogger.cs
    startLine: 145
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nStop logger and cleanup\n"
  example: []
  syntax:
    content: protected virtual void Close()
    content.vb: Protected Overridable Sub Close
  overload: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Close*
  nameWithType.vb: BaseLogger(Of T).Close()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.Health.Utility.Diagnostics.BaseLogger(Of T).Close()
- uid: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Flush
  commentId: M:Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Flush
  id: Flush
  parent: Microsoft.Health.Utility.Diagnostics.BaseLogger`1
  langs:
  - csharp
  - vb
  name: Flush()
  nameWithType: BaseLogger<T>.Flush()
  fullName: Microsoft.Health.Utility.Diagnostics.BaseLogger<T>.Flush()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/BaseLogger.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Flush
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/BaseLogger.cs
    startLine: 159
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nFlush entries from memory to the log.\n"
  example: []
  syntax:
    content: public void Flush()
    content.vb: Public Sub Flush
  overload: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Flush*
  nameWithType.vb: BaseLogger(Of T).Flush()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.Utility.Diagnostics.BaseLogger(Of T).Flush()
- uid: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.LogEvent(`0)
  commentId: M:Microsoft.Health.Utility.Diagnostics.BaseLogger`1.LogEvent(`0)
  id: LogEvent(`0)
  parent: Microsoft.Health.Utility.Diagnostics.BaseLogger`1
  langs:
  - csharp
  - vb
  name: LogEvent(T)
  nameWithType: BaseLogger<T>.LogEvent(T)
  fullName: Microsoft.Health.Utility.Diagnostics.BaseLogger<T>.LogEvent(T)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/BaseLogger.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: LogEvent
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/BaseLogger.cs
    startLine: 172
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nLog Event to a target\n"
  example: []
  syntax:
    content: protected virtual bool LogEvent(T logEntry)
    content.vb: Protected Overridable Function LogEvent(logEntry As T) As Boolean
    parameters:
    - id: logEntry
      type: '{T}'
    return:
      type: System.Boolean
  overload: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.LogEvent*
  nameWithType.vb: BaseLogger(Of T).LogEvent(T)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.Health.Utility.Diagnostics.BaseLogger(Of T).LogEvent(T)
- uid: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.LogEvents(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Microsoft.Health.Utility.Diagnostics.BaseLogger`1.LogEvents(System.Collections.Generic.IEnumerable{`0})
  id: LogEvents(System.Collections.Generic.IEnumerable{`0})
  parent: Microsoft.Health.Utility.Diagnostics.BaseLogger`1
  langs:
  - csharp
  - vb
  name: LogEvents(IEnumerable<T>)
  nameWithType: BaseLogger<T>.LogEvents(IEnumerable<T>)
  fullName: Microsoft.Health.Utility.Diagnostics.BaseLogger<T>.LogEvents(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/BaseLogger.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: LogEvents
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/BaseLogger.cs
    startLine: 195
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nLogs a collection of events.\n"
  example: []
  syntax:
    content: protected virtual bool LogEvents(IEnumerable<T> entries)
    content.vb: Protected Overridable Function LogEvents(entries As IEnumerable(Of T)) As Boolean
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{{T}}
    return:
      type: System.Boolean
  overload: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.LogEvents*
  nameWithType.vb: BaseLogger(Of T).LogEvents(IEnumerable(Of T))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.Health.Utility.Diagnostics.BaseLogger(Of T).LogEvents(System.Collections.Generic.IEnumerable(Of T))
  name.vb: LogEvents(IEnumerable(Of T))
- uid: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.SafeLogEvent(`0)
  commentId: M:Microsoft.Health.Utility.Diagnostics.BaseLogger`1.SafeLogEvent(`0)
  id: SafeLogEvent(`0)
  parent: Microsoft.Health.Utility.Diagnostics.BaseLogger`1
  langs:
  - csharp
  - vb
  name: SafeLogEvent(T)
  nameWithType: BaseLogger<T>.SafeLogEvent(T)
  fullName: Microsoft.Health.Utility.Diagnostics.BaseLogger<T>.SafeLogEvent(T)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/BaseLogger.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SafeLogEvent
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/BaseLogger.cs
    startLine: 218
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nLog Event to a target\n"
  example: []
  syntax:
    content: public bool SafeLogEvent(T entry)
    content.vb: Public Function SafeLogEvent(entry As T) As Boolean
    parameters:
    - id: entry
      type: '{T}'
    return:
      type: System.Boolean
  overload: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.SafeLogEvent*
  nameWithType.vb: BaseLogger(Of T).SafeLogEvent(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.Utility.Diagnostics.BaseLogger(Of T).SafeLogEvent(T)
- uid: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.SafeLogEvents(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Microsoft.Health.Utility.Diagnostics.BaseLogger`1.SafeLogEvents(System.Collections.Generic.IEnumerable{`0})
  id: SafeLogEvents(System.Collections.Generic.IEnumerable{`0})
  parent: Microsoft.Health.Utility.Diagnostics.BaseLogger`1
  langs:
  - csharp
  - vb
  name: SafeLogEvents(IEnumerable<T>)
  nameWithType: BaseLogger<T>.SafeLogEvents(IEnumerable<T>)
  fullName: Microsoft.Health.Utility.Diagnostics.BaseLogger<T>.SafeLogEvents(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/BaseLogger.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SafeLogEvents
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/BaseLogger.cs
    startLine: 234
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nLog a collection of events to a target.\n"
  example: []
  syntax:
    content: public bool SafeLogEvents(IEnumerable<T> entries)
    content.vb: Public Function SafeLogEvents(entries As IEnumerable(Of T)) As Boolean
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{{T}}
    return:
      type: System.Boolean
  overload: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.SafeLogEvents*
  nameWithType.vb: BaseLogger(Of T).SafeLogEvents(IEnumerable(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.Utility.Diagnostics.BaseLogger(Of T).SafeLogEvents(System.Collections.Generic.IEnumerable(Of T))
  name.vb: SafeLogEvents(IEnumerable(Of T))
- uid: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Sink(System.Collections.Generic.IList{`0})
  commentId: M:Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Sink(System.Collections.Generic.IList{`0})
  id: Sink(System.Collections.Generic.IList{`0})
  parent: Microsoft.Health.Utility.Diagnostics.BaseLogger`1
  langs:
  - csharp
  - vb
  name: Sink(IList<T>)
  nameWithType: BaseLogger<T>.Sink(IList<T>)
  fullName: Microsoft.Health.Utility.Diagnostics.BaseLogger<T>.Sink(System.Collections.Generic.IList<T>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/BaseLogger.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Sink
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/BaseLogger.cs
    startLine: 313
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nWrite the list of events to the log.\n"
  example: []
  syntax:
    content: protected abstract void Sink(IList<T> events)
    content.vb: Protected MustOverride Sub Sink(events As IList(Of T))
    parameters:
    - id: events
      type: System.Collections.Generic.IList{{T}}
  overload: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Sink*
  nameWithType.vb: BaseLogger(Of T).Sink(IList(Of T))
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Microsoft.Health.Utility.Diagnostics.BaseLogger(Of T).Sink(System.Collections.Generic.IList(Of T))
  name.vb: Sink(IList(Of T))
- uid: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.IsAvailable
  commentId: P:Microsoft.Health.Utility.Diagnostics.BaseLogger`1.IsAvailable
  id: IsAvailable
  parent: Microsoft.Health.Utility.Diagnostics.BaseLogger`1
  langs:
  - csharp
  - vb
  name: IsAvailable
  nameWithType: BaseLogger<T>.IsAvailable
  fullName: Microsoft.Health.Utility.Diagnostics.BaseLogger<T>.IsAvailable
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/BaseLogger.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IsAvailable
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/BaseLogger.cs
    startLine: 319
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nIs logger available\n"
  example: []
  syntax:
    content: public virtual bool IsAvailable { get; set; }
    content.vb: Public Overridable Property IsAvailable As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.IsAvailable*
  nameWithType.vb: BaseLogger(Of T).IsAvailable
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.Health.Utility.Diagnostics.BaseLogger(Of T).IsAvailable
- uid: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.MaxLogIntervalMilliseconds
  commentId: P:Microsoft.Health.Utility.Diagnostics.BaseLogger`1.MaxLogIntervalMilliseconds
  id: MaxLogIntervalMilliseconds
  parent: Microsoft.Health.Utility.Diagnostics.BaseLogger`1
  langs:
  - csharp
  - vb
  name: MaxLogIntervalMilliseconds
  nameWithType: BaseLogger<T>.MaxLogIntervalMilliseconds
  fullName: Microsoft.Health.Utility.Diagnostics.BaseLogger<T>.MaxLogIntervalMilliseconds
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/BaseLogger.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: MaxLogIntervalMilliseconds
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/BaseLogger.cs
    startLine: 329
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nThe maximum time entries will be batched in memory\nbefore they are written out to the log.\n"
  example: []
  syntax:
    content: public int MaxLogIntervalMilliseconds { get; set; }
    content.vb: Public Property MaxLogIntervalMilliseconds As Integer
    parameters: []
    return:
      type: System.Int32
  overload: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.MaxLogIntervalMilliseconds*
  nameWithType.vb: BaseLogger(Of T).MaxLogIntervalMilliseconds
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.Utility.Diagnostics.BaseLogger(Of T).MaxLogIntervalMilliseconds
- uid: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.LogBatchSize
  commentId: P:Microsoft.Health.Utility.Diagnostics.BaseLogger`1.LogBatchSize
  id: LogBatchSize
  parent: Microsoft.Health.Utility.Diagnostics.BaseLogger`1
  langs:
  - csharp
  - vb
  name: LogBatchSize
  nameWithType: BaseLogger<T>.LogBatchSize
  fullName: Microsoft.Health.Utility.Diagnostics.BaseLogger<T>.LogBatchSize
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/BaseLogger.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: LogBatchSize
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/BaseLogger.cs
    startLine: 339
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nThe maximum number of entries that will be batched in memory\nbefore they are written out to the log.\n"
  example: []
  syntax:
    content: public int LogBatchSize { get; set; }
    content.vb: Public Property LogBatchSize As Integer
    parameters: []
    return:
      type: System.Int32
  overload: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.LogBatchSize*
  nameWithType.vb: BaseLogger(Of T).LogBatchSize
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.Utility.Diagnostics.BaseLogger(Of T).LogBatchSize
- uid: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Disposed
  commentId: P:Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Disposed
  id: Disposed
  parent: Microsoft.Health.Utility.Diagnostics.BaseLogger`1
  langs:
  - csharp
  - vb
  name: Disposed
  nameWithType: BaseLogger<T>.Disposed
  fullName: Microsoft.Health.Utility.Diagnostics.BaseLogger<T>.Disposed
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/BaseLogger.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Disposed
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/BaseLogger.cs
    startLine: 357
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nTrue if this object has been disposed.\n"
  example: []
  syntax:
    content: protected bool Disposed { get; }
    content.vb: Protected ReadOnly Property Disposed As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Disposed*
  nameWithType.vb: BaseLogger(Of T).Disposed
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Microsoft.Health.Utility.Diagnostics.BaseLogger(Of T).Disposed
- uid: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Dispose
  commentId: M:Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Dispose
  id: Dispose
  parent: Microsoft.Health.Utility.Diagnostics.BaseLogger`1
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: BaseLogger<T>.Dispose()
  fullName: Microsoft.Health.Utility.Diagnostics.BaseLogger<T>.Dispose()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/BaseLogger.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Dispose
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/BaseLogger.cs
    startLine: 366
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nDispose logger\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Dispose*
  implements:
  - System.IDisposable.Dispose
  nameWithType.vb: BaseLogger(Of T).Dispose()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.Utility.Diagnostics.BaseLogger(Of T).Dispose()
- uid: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Dispose(System.Boolean)
  commentId: M:Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: Microsoft.Health.Utility.Diagnostics.BaseLogger`1
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: BaseLogger<T>.Dispose(Boolean)
  fullName: Microsoft.Health.Utility.Diagnostics.BaseLogger<T>.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/BaseLogger.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Dispose
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/BaseLogger.cs
    startLine: 388
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nDispose(bool disposing) executes in two distinct scenarios.\nIf disposing equals true, the method has been called directly\nor indirectly by a user's code. Managed and unmanaged resources\ncan be disposed.\nIf disposing equals false, the method has been called by the\nruntime from inside the finalizer and you should not reference\nother objects. Only unmanaged resources can be disposed.\n"
  example: []
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: ''
  overload: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Dispose*
  nameWithType.vb: BaseLogger(Of T).Dispose(Boolean)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.Health.Utility.Diagnostics.BaseLogger(Of T).Dispose(System.Boolean)
- uid: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Finalize
  commentId: M:Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Finalize
  id: Finalize
  parent: Microsoft.Health.Utility.Diagnostics.BaseLogger`1
  langs:
  - csharp
  - vb
  name: Finalize()
  nameWithType: BaseLogger<T>.Finalize()
  fullName: Microsoft.Health.Utility.Diagnostics.BaseLogger<T>.Finalize()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/BaseLogger.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Finalize
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/BaseLogger.cs
    startLine: 400
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nUse C# destructor syntax for finalization code.\nThis destructor will run only if the Dispose method\ndoes not get called.\nIt gives your base class the opportunity to finalize.\nDo not provide destructors in types derived from this class.\n"
  example: []
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  overload: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Finalize*
  nameWithType.vb: BaseLogger(Of T).Finalize()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.Health.Utility.Diagnostics.BaseLogger(Of T).Finalize()
references:
- uid: Microsoft.Health.Utility.Diagnostics
  commentId: N:Microsoft.Health.Utility.Diagnostics
  isExternal: false
  name: Microsoft.Health.Utility.Diagnostics
  nameWithType: Microsoft.Health.Utility.Diagnostics
  fullName: Microsoft.Health.Utility.Diagnostics
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  name: SetProperty(String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object())
  name.vb: SetProperty(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  name: InvokeMethod(String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object())
  name.vb: InvokeMethod(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  parent: Microsoft.Health.Utility.InvariantString
  definition: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  name: ToStringInvariant()
  nameWithType: InvariantString.ToStringInvariant()
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant()
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  parent: Microsoft.Health.Utility.TypeHelper
  definition: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  name: ValueOrDbNull<BaseLogger<T>>()
  nameWithType: TypeHelper.ValueOrDbNull<BaseLogger<T>>()
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.Utility.Diagnostics.BaseLogger<T>>()
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of BaseLogger(Of T))()
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.Utility.Diagnostics.BaseLogger(Of T))()
  name.vb: ValueOrDbNull(Of BaseLogger(Of T))()
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull<BaseLogger<T>>
    nameWithType: TypeHelper.ValueOrDbNull<BaseLogger<T>>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.Utility.Diagnostics.BaseLogger<T>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull(Of BaseLogger(Of T))
    nameWithType: TypeHelper.ValueOrDbNull(Of BaseLogger(Of T))
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.Utility.Diagnostics.BaseLogger(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  parent: Microsoft.Health.Utility.WCXmlHelper
  definition: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  name: ToXml()
  nameWithType: WCXmlHelper.ToXml()
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml()
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  isExternal: true
  name: SetProperty(Object, String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object())
  name.vb: SetProperty(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions
  commentId: T:Microsoft.Health.Utility.IDispatchExtensions
  parent: Microsoft.Health.Utility
  isExternal: false
  name: IDispatchExtensions
  nameWithType: IDispatchExtensions
  fullName: Microsoft.Health.Utility.IDispatchExtensions
- uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  isExternal: true
  name: InvokeMethod(Object, String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object())
  name.vb: InvokeMethod(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  isExternal: true
  name: ToStringInvariant(Object)
  nameWithType: InvariantString.ToStringInvariant(Object)
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString
  commentId: T:Microsoft.Health.Utility.InvariantString
  parent: Microsoft.Health.Utility
  isExternal: false
  name: InvariantString
  nameWithType: InvariantString
  fullName: Microsoft.Health.Utility.InvariantString
- uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  isExternal: false
  name: ValueOrDbNull<T>(T)
  nameWithType: TypeHelper.ValueOrDbNull<T>(T)
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>(T)
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of T)(T)
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)(T)
  name.vb: ValueOrDbNull(Of T)(T)
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull<T>
    nameWithType: TypeHelper.ValueOrDbNull<T>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull(Of T)
    nameWithType: TypeHelper.ValueOrDbNull(Of T)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.TypeHelper
  commentId: T:Microsoft.Health.Utility.TypeHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: TypeHelper
  nameWithType: TypeHelper
  fullName: Microsoft.Health.Utility.TypeHelper
- uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  isExternal: true
  name: ToXml(Object)
  nameWithType: WCXmlHelper.ToXml(Object)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.WCXmlHelper
  commentId: T:Microsoft.Health.Utility.WCXmlHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: WCXmlHelper
  nameWithType: WCXmlHelper
  fullName: Microsoft.Health.Utility.WCXmlHelper
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.#ctor*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.BaseLogger`1.#ctor
  isExternal: false
  name: BaseLogger
  nameWithType: BaseLogger<T>.BaseLogger
  fullName: Microsoft.Health.Utility.Diagnostics.BaseLogger<T>.BaseLogger
  nameWithType.vb: BaseLogger(Of T).BaseLogger
  fullName.vb: Microsoft.Health.Utility.Diagnostics.BaseLogger(Of T).BaseLogger
- uid: Microsoft.Health.Utility.Diagnostics.EventLogger
  commentId: T:Microsoft.Health.Utility.Diagnostics.EventLogger
  parent: Microsoft.Health.Utility.Diagnostics
  isExternal: false
  name: EventLogger
  nameWithType: EventLogger
  fullName: Microsoft.Health.Utility.Diagnostics.EventLogger
- uid: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Open*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Open
  isExternal: false
  name: Open
  nameWithType: BaseLogger<T>.Open
  fullName: Microsoft.Health.Utility.Diagnostics.BaseLogger<T>.Open
  nameWithType.vb: BaseLogger(Of T).Open
  fullName.vb: Microsoft.Health.Utility.Diagnostics.BaseLogger(Of T).Open
- uid: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Close*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Close
  isExternal: false
  name: Close
  nameWithType: BaseLogger<T>.Close
  fullName: Microsoft.Health.Utility.Diagnostics.BaseLogger<T>.Close
  nameWithType.vb: BaseLogger(Of T).Close
  fullName.vb: Microsoft.Health.Utility.Diagnostics.BaseLogger(Of T).Close
- uid: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Flush*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Flush
  isExternal: false
  name: Flush
  nameWithType: BaseLogger<T>.Flush
  fullName: Microsoft.Health.Utility.Diagnostics.BaseLogger<T>.Flush
  nameWithType.vb: BaseLogger(Of T).Flush
  fullName.vb: Microsoft.Health.Utility.Diagnostics.BaseLogger(Of T).Flush
- uid: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.LogEvent*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.BaseLogger`1.LogEvent
  isExternal: false
  name: LogEvent
  nameWithType: BaseLogger<T>.LogEvent
  fullName: Microsoft.Health.Utility.Diagnostics.BaseLogger<T>.LogEvent
  nameWithType.vb: BaseLogger(Of T).LogEvent
  fullName.vb: Microsoft.Health.Utility.Diagnostics.BaseLogger(Of T).LogEvent
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.LogEvents*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.BaseLogger`1.LogEvents
  isExternal: false
  name: LogEvents
  nameWithType: BaseLogger<T>.LogEvents
  fullName: Microsoft.Health.Utility.Diagnostics.BaseLogger<T>.LogEvents
  nameWithType.vb: BaseLogger(Of T).LogEvents
  fullName.vb: Microsoft.Health.Utility.Diagnostics.BaseLogger(Of T).LogEvents
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.SafeLogEvent*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.BaseLogger`1.SafeLogEvent
  isExternal: false
  name: SafeLogEvent
  nameWithType: BaseLogger<T>.SafeLogEvent
  fullName: Microsoft.Health.Utility.Diagnostics.BaseLogger<T>.SafeLogEvent
  nameWithType.vb: BaseLogger(Of T).SafeLogEvent
  fullName.vb: Microsoft.Health.Utility.Diagnostics.BaseLogger(Of T).SafeLogEvent
- uid: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.SafeLogEvents*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.BaseLogger`1.SafeLogEvents
  isExternal: false
  name: SafeLogEvents
  nameWithType: BaseLogger<T>.SafeLogEvents
  fullName: Microsoft.Health.Utility.Diagnostics.BaseLogger<T>.SafeLogEvents
  nameWithType.vb: BaseLogger(Of T).SafeLogEvents
  fullName.vb: Microsoft.Health.Utility.Diagnostics.BaseLogger(Of T).SafeLogEvents
- uid: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Sink*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Sink
  isExternal: false
  name: Sink
  nameWithType: BaseLogger<T>.Sink
  fullName: Microsoft.Health.Utility.Diagnostics.BaseLogger<T>.Sink
  nameWithType.vb: BaseLogger(Of T).Sink
  fullName.vb: Microsoft.Health.Utility.Diagnostics.BaseLogger(Of T).Sink
- uid: System.Collections.Generic.IList{{T}}
  commentId: T:System.Collections.Generic.IList{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.IsAvailable*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.BaseLogger`1.IsAvailable
  isExternal: false
  name: IsAvailable
  nameWithType: BaseLogger<T>.IsAvailable
  fullName: Microsoft.Health.Utility.Diagnostics.BaseLogger<T>.IsAvailable
  nameWithType.vb: BaseLogger(Of T).IsAvailable
  fullName.vb: Microsoft.Health.Utility.Diagnostics.BaseLogger(Of T).IsAvailable
- uid: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.MaxLogIntervalMilliseconds*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.BaseLogger`1.MaxLogIntervalMilliseconds
  isExternal: false
  name: MaxLogIntervalMilliseconds
  nameWithType: BaseLogger<T>.MaxLogIntervalMilliseconds
  fullName: Microsoft.Health.Utility.Diagnostics.BaseLogger<T>.MaxLogIntervalMilliseconds
  nameWithType.vb: BaseLogger(Of T).MaxLogIntervalMilliseconds
  fullName.vb: Microsoft.Health.Utility.Diagnostics.BaseLogger(Of T).MaxLogIntervalMilliseconds
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.LogBatchSize*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.BaseLogger`1.LogBatchSize
  isExternal: false
  name: LogBatchSize
  nameWithType: BaseLogger<T>.LogBatchSize
  fullName: Microsoft.Health.Utility.Diagnostics.BaseLogger<T>.LogBatchSize
  nameWithType.vb: BaseLogger(Of T).LogBatchSize
  fullName.vb: Microsoft.Health.Utility.Diagnostics.BaseLogger(Of T).LogBatchSize
- uid: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Disposed*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Disposed
  isExternal: false
  name: Disposed
  nameWithType: BaseLogger<T>.Disposed
  fullName: Microsoft.Health.Utility.Diagnostics.BaseLogger<T>.Disposed
  nameWithType.vb: BaseLogger(Of T).Disposed
  fullName.vb: Microsoft.Health.Utility.Diagnostics.BaseLogger(Of T).Disposed
- uid: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Dispose*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Dispose
  isExternal: false
  name: Dispose
  nameWithType: BaseLogger<T>.Dispose
  fullName: Microsoft.Health.Utility.Diagnostics.BaseLogger<T>.Dispose
  nameWithType.vb: BaseLogger(Of T).Dispose
  fullName.vb: Microsoft.Health.Utility.Diagnostics.BaseLogger(Of T).Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Finalize*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.BaseLogger`1.Finalize
  isExternal: false
  name: Finalize
  nameWithType: BaseLogger<T>.Finalize
  fullName: Microsoft.Health.Utility.Diagnostics.BaseLogger<T>.Finalize
  nameWithType.vb: BaseLogger(Of T).Finalize
  fullName.vb: Microsoft.Health.Utility.Diagnostics.BaseLogger(Of T).Finalize
