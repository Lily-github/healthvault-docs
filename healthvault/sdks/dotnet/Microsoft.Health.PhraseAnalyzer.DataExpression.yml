### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.PhraseAnalyzer.DataExpression
  commentId: T:Microsoft.Health.PhraseAnalyzer.DataExpression
  id: DataExpression
  parent: Microsoft.Health.PhraseAnalyzer
  children:
  - Microsoft.Health.PhraseAnalyzer.DataExpression.#ctor
  - Microsoft.Health.PhraseAnalyzer.DataExpression.#ctor(Microsoft.Health.PhraseAnalyzer.ExpressionAttributes)
  - Microsoft.Health.PhraseAnalyzer.DataExpression.BaseFilePath
  - Microsoft.Health.PhraseAnalyzer.DataExpression.EquivalenceSets
  - Microsoft.Health.PhraseAnalyzer.DataExpression.Load(System.IO.TextReader,System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[])
  - Microsoft.Health.PhraseAnalyzer.DataExpression.Load(System.String,System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[])
  - Microsoft.Health.PhraseAnalyzer.DataExpression.Maps
  - Microsoft.Health.PhraseAnalyzer.DataExpression.Matchers
  - Microsoft.Health.PhraseAnalyzer.DataExpression.PhraseSets
  - Microsoft.Health.PhraseAnalyzer.DataExpression.XmlSet
  langs:
  - csharp
  - vb
  name: DataExpression
  nameWithType: DataExpression
  fullName: Microsoft.Health.PhraseAnalyzer.DataExpression
  type: Class
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/DataExpression.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DataExpression
    path: ../Microsoft.Health.Utility/search/PhraseAnalyzer/DataExpression.cs
    startLine: 18
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: 'public class DataExpression : Expression'
    content.vb: >-
      Public Class DataExpression
          Inherits Expression
  inheritance:
  - System.Object
  - Microsoft.Health.PhraseAnalyzer.Expression
  inheritedMembers:
  - Microsoft.Health.PhraseAnalyzer.Expression.Type
  - Microsoft.Health.PhraseAnalyzer.Expression.Name
  - Microsoft.Health.PhraseAnalyzer.Expression.Attributes
  - Microsoft.Health.PhraseAnalyzer.Expression.HasAttributes
  - Microsoft.Health.PhraseAnalyzer.Expression.HasName
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - Microsoft.Health.PhraseAnalyzer.DataExpression.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  - System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.PhraseAnalyzer.DataExpression.#ctor
  commentId: M:Microsoft.Health.PhraseAnalyzer.DataExpression.#ctor
  id: '#ctor'
  parent: Microsoft.Health.PhraseAnalyzer.DataExpression
  langs:
  - csharp
  - vb
  name: DataExpression()
  nameWithType: DataExpression.DataExpression()
  fullName: Microsoft.Health.PhraseAnalyzer.DataExpression.DataExpression()
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/DataExpression.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health.Utility/search/PhraseAnalyzer/DataExpression.cs
    startLine: 33
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public DataExpression()
    content.vb: Public Sub New
  overload: Microsoft.Health.PhraseAnalyzer.DataExpression.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.PhraseAnalyzer.DataExpression.#ctor(Microsoft.Health.PhraseAnalyzer.ExpressionAttributes)
  commentId: M:Microsoft.Health.PhraseAnalyzer.DataExpression.#ctor(Microsoft.Health.PhraseAnalyzer.ExpressionAttributes)
  id: '#ctor(Microsoft.Health.PhraseAnalyzer.ExpressionAttributes)'
  parent: Microsoft.Health.PhraseAnalyzer.DataExpression
  langs:
  - csharp
  - vb
  name: DataExpression(ExpressionAttributes)
  nameWithType: DataExpression.DataExpression(ExpressionAttributes)
  fullName: Microsoft.Health.PhraseAnalyzer.DataExpression.DataExpression(Microsoft.Health.PhraseAnalyzer.ExpressionAttributes)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/DataExpression.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health.Utility/search/PhraseAnalyzer/DataExpression.cs
    startLine: 41
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public DataExpression(ExpressionAttributes attibutes)
    content.vb: Public Sub New(attibutes As ExpressionAttributes)
    parameters:
    - id: attibutes
      type: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
      description: ''
  overload: Microsoft.Health.PhraseAnalyzer.DataExpression.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.PhraseAnalyzer.DataExpression.PhraseSets
  commentId: P:Microsoft.Health.PhraseAnalyzer.DataExpression.PhraseSets
  id: PhraseSets
  parent: Microsoft.Health.PhraseAnalyzer.DataExpression
  langs:
  - csharp
  - vb
  name: PhraseSets
  nameWithType: DataExpression.PhraseSets
  fullName: Microsoft.Health.PhraseAnalyzer.DataExpression.PhraseSets
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/DataExpression.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: PhraseSets
    path: ../Microsoft.Health.Utility/search/PhraseAnalyzer/DataExpression.cs
    startLine: 49
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public List<PhraseSetExpression> PhraseSets { get; set; }
    content.vb: Public Property PhraseSets As List(Of PhraseSetExpression)
    parameters: []
    return:
      type: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.PhraseSetExpression}
  overload: Microsoft.Health.PhraseAnalyzer.DataExpression.PhraseSets*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.PhraseAnalyzer.DataExpression.XmlSet
  commentId: P:Microsoft.Health.PhraseAnalyzer.DataExpression.XmlSet
  id: XmlSet
  parent: Microsoft.Health.PhraseAnalyzer.DataExpression
  langs:
  - csharp
  - vb
  name: XmlSet
  nameWithType: DataExpression.XmlSet
  fullName: Microsoft.Health.PhraseAnalyzer.DataExpression.XmlSet
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/DataExpression.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: XmlSet
    path: ../Microsoft.Health.Utility/search/PhraseAnalyzer/DataExpression.cs
    startLine: 76
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public List<YieldXmlExpression> XmlSet { get; set; }
    content.vb: Public Property XmlSet As List(Of YieldXmlExpression)
    parameters: []
    return:
      type: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.YieldXmlExpression}
  overload: Microsoft.Health.PhraseAnalyzer.DataExpression.XmlSet*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.PhraseAnalyzer.DataExpression.Maps
  commentId: P:Microsoft.Health.PhraseAnalyzer.DataExpression.Maps
  id: Maps
  parent: Microsoft.Health.PhraseAnalyzer.DataExpression
  langs:
  - csharp
  - vb
  name: Maps
  nameWithType: DataExpression.Maps
  fullName: Microsoft.Health.PhraseAnalyzer.DataExpression.Maps
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/DataExpression.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Maps
    path: ../Microsoft.Health.Utility/search/PhraseAnalyzer/DataExpression.cs
    startLine: 102
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public List<MapSetExpression> Maps { get; set; }
    content.vb: Public Property Maps As List(Of MapSetExpression)
    parameters: []
    return:
      type: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.MapSetExpression}
  overload: Microsoft.Health.PhraseAnalyzer.DataExpression.Maps*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.PhraseAnalyzer.DataExpression.EquivalenceSets
  commentId: P:Microsoft.Health.PhraseAnalyzer.DataExpression.EquivalenceSets
  id: EquivalenceSets
  parent: Microsoft.Health.PhraseAnalyzer.DataExpression
  langs:
  - csharp
  - vb
  name: EquivalenceSets
  nameWithType: DataExpression.EquivalenceSets
  fullName: Microsoft.Health.PhraseAnalyzer.DataExpression.EquivalenceSets
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/DataExpression.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: EquivalenceSets
    path: ../Microsoft.Health.Utility/search/PhraseAnalyzer/DataExpression.cs
    startLine: 129
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public List<EquivalenceSetExpression> EquivalenceSets { get; set; }
    content.vb: Public Property EquivalenceSets As List(Of EquivalenceSetExpression)
    parameters: []
    return:
      type: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.EquivalenceSetExpression}
  overload: Microsoft.Health.PhraseAnalyzer.DataExpression.EquivalenceSets*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.PhraseAnalyzer.DataExpression.BaseFilePath
  commentId: P:Microsoft.Health.PhraseAnalyzer.DataExpression.BaseFilePath
  id: BaseFilePath
  parent: Microsoft.Health.PhraseAnalyzer.DataExpression
  langs:
  - csharp
  - vb
  name: BaseFilePath
  nameWithType: DataExpression.BaseFilePath
  fullName: Microsoft.Health.PhraseAnalyzer.DataExpression.BaseFilePath
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/DataExpression.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: BaseFilePath
    path: ../Microsoft.Health.Utility/search/PhraseAnalyzer/DataExpression.cs
    startLine: 159
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public string BaseFilePath { get; set; }
    content.vb: Public Property BaseFilePath As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Health.PhraseAnalyzer.DataExpression.BaseFilePath*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.PhraseAnalyzer.DataExpression.Matchers
  commentId: P:Microsoft.Health.PhraseAnalyzer.DataExpression.Matchers
  id: Matchers
  parent: Microsoft.Health.PhraseAnalyzer.DataExpression
  langs:
  - csharp
  - vb
  name: Matchers
  nameWithType: DataExpression.Matchers
  fullName: Microsoft.Health.PhraseAnalyzer.DataExpression.Matchers
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/DataExpression.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Matchers
    path: ../Microsoft.Health.Utility/search/PhraseAnalyzer/DataExpression.cs
    startLine: 175
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public IDictionary<string, IMatcher> Matchers { get; }
    content.vb: Public ReadOnly Property Matchers As IDictionary(Of String, IMatcher)
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}
  overload: Microsoft.Health.PhraseAnalyzer.DataExpression.Matchers*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.PhraseAnalyzer.DataExpression.Load(System.IO.TextReader,System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[])
  commentId: M:Microsoft.Health.PhraseAnalyzer.DataExpression.Load(System.IO.TextReader,System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[])
  id: Load(System.IO.TextReader,System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[])
  parent: Microsoft.Health.PhraseAnalyzer.DataExpression
  langs:
  - csharp
  - vb
  name: Load(TextReader, KeyValuePair<String, IMatcher>[])
  nameWithType: DataExpression.Load(TextReader, KeyValuePair<String, IMatcher>[])
  fullName: Microsoft.Health.PhraseAnalyzer.DataExpression.Load(System.IO.TextReader, System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.PhraseAnalyzer.IMatcher>[])
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/DataExpression.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Load
    path: ../Microsoft.Health.Utility/search/PhraseAnalyzer/DataExpression.cs
    startLine: 401
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  syntax:
    content: public static DataExpression Load(TextReader input, params KeyValuePair<string, IMatcher>[] matchers)
    content.vb: Public Shared Function Load(input As TextReader, ParamArray matchers As KeyValuePair(Of String, IMatcher)()) As DataExpression
    parameters:
    - id: input
      type: System.IO.TextReader
    - id: matchers
      type: System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[]
    return:
      type: Microsoft.Health.PhraseAnalyzer.DataExpression
  overload: Microsoft.Health.PhraseAnalyzer.DataExpression.Load*
  nameWithType.vb: DataExpression.Load(TextReader, KeyValuePair(Of String, IMatcher)())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.PhraseAnalyzer.DataExpression.Load(System.IO.TextReader, System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.PhraseAnalyzer.IMatcher)())
  name.vb: Load(TextReader, KeyValuePair(Of String, IMatcher)())
- uid: Microsoft.Health.PhraseAnalyzer.DataExpression.Load(System.String,System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[])
  commentId: M:Microsoft.Health.PhraseAnalyzer.DataExpression.Load(System.String,System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[])
  id: Load(System.String,System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[])
  parent: Microsoft.Health.PhraseAnalyzer.DataExpression
  langs:
  - csharp
  - vb
  name: Load(String, KeyValuePair<String, IMatcher>[])
  nameWithType: DataExpression.Load(String, KeyValuePair<String, IMatcher>[])
  fullName: Microsoft.Health.PhraseAnalyzer.DataExpression.Load(System.String, System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.PhraseAnalyzer.IMatcher>[])
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/DataExpression.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Load
    path: ../Microsoft.Health.Utility/search/PhraseAnalyzer/DataExpression.cs
    startLine: 427
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public static DataExpression Load(string filePath, params KeyValuePair<string, IMatcher>[] matchers)
    content.vb: Public Shared Function Load(filePath As String, ParamArray matchers As KeyValuePair(Of String, IMatcher)()) As DataExpression
    parameters:
    - id: filePath
      type: System.String
      description: ''
    - id: matchers
      type: System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[]
      description: ''
    return:
      type: Microsoft.Health.PhraseAnalyzer.DataExpression
      description: ''
  overload: Microsoft.Health.PhraseAnalyzer.DataExpression.Load*
  nameWithType.vb: DataExpression.Load(String, KeyValuePair(Of String, IMatcher)())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.PhraseAnalyzer.DataExpression.Load(System.String, System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.PhraseAnalyzer.IMatcher)())
  name.vb: Load(String, KeyValuePair(Of String, IMatcher)())
references:
- uid: Microsoft.Health.PhraseAnalyzer
  commentId: N:Microsoft.Health.PhraseAnalyzer
  isExternal: false
  name: Microsoft.Health.PhraseAnalyzer
  nameWithType: Microsoft.Health.PhraseAnalyzer
  fullName: Microsoft.Health.PhraseAnalyzer
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Health.PhraseAnalyzer.Expression
  commentId: T:Microsoft.Health.PhraseAnalyzer.Expression
  parent: Microsoft.Health.PhraseAnalyzer
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: Microsoft.Health.PhraseAnalyzer.Expression
- uid: Microsoft.Health.PhraseAnalyzer.Expression.Type
  commentId: P:Microsoft.Health.PhraseAnalyzer.Expression.Type
  parent: Microsoft.Health.PhraseAnalyzer.Expression
  isExternal: false
  name: Type
  nameWithType: Expression.Type
  fullName: Microsoft.Health.PhraseAnalyzer.Expression.Type
- uid: Microsoft.Health.PhraseAnalyzer.Expression.Name
  commentId: P:Microsoft.Health.PhraseAnalyzer.Expression.Name
  parent: Microsoft.Health.PhraseAnalyzer.Expression
  isExternal: false
  name: Name
  nameWithType: Expression.Name
  fullName: Microsoft.Health.PhraseAnalyzer.Expression.Name
- uid: Microsoft.Health.PhraseAnalyzer.Expression.Attributes
  commentId: P:Microsoft.Health.PhraseAnalyzer.Expression.Attributes
  parent: Microsoft.Health.PhraseAnalyzer.Expression
  isExternal: false
  name: Attributes
  nameWithType: Expression.Attributes
  fullName: Microsoft.Health.PhraseAnalyzer.Expression.Attributes
- uid: Microsoft.Health.PhraseAnalyzer.Expression.HasAttributes
  commentId: P:Microsoft.Health.PhraseAnalyzer.Expression.HasAttributes
  parent: Microsoft.Health.PhraseAnalyzer.Expression
  isExternal: false
  name: HasAttributes
  nameWithType: Expression.HasAttributes
  fullName: Microsoft.Health.PhraseAnalyzer.Expression.HasAttributes
- uid: Microsoft.Health.PhraseAnalyzer.Expression.HasName
  commentId: P:Microsoft.Health.PhraseAnalyzer.Expression.HasName
  parent: Microsoft.Health.PhraseAnalyzer.Expression
  isExternal: false
  name: HasName
  nameWithType: Expression.HasName
  fullName: Microsoft.Health.PhraseAnalyzer.Expression.HasName
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  name: SetProperty(String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object())
  name.vb: SetProperty(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  name: InvokeMethod(String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object())
  name.vb: InvokeMethod(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  parent: Microsoft.Health.Utility.InvariantString
  definition: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  name: ToStringInvariant()
  nameWithType: InvariantString.ToStringInvariant()
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant()
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.DataExpression.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  parent: Microsoft.Health.Utility.TypeHelper
  definition: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  name: ValueOrDbNull<DataExpression>()
  nameWithType: TypeHelper.ValueOrDbNull<DataExpression>()
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.PhraseAnalyzer.DataExpression>()
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of DataExpression)()
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.PhraseAnalyzer.DataExpression)()
  name.vb: ValueOrDbNull(Of DataExpression)()
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull<DataExpression>
    nameWithType: TypeHelper.ValueOrDbNull<DataExpression>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.PhraseAnalyzer.DataExpression>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull(Of DataExpression)
    nameWithType: TypeHelper.ValueOrDbNull(Of DataExpression)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.PhraseAnalyzer.DataExpression)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  parent: Microsoft.Health.Utility.WCXmlHelper
  definition: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  name: ToXml()
  nameWithType: WCXmlHelper.ToXml()
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml()
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  isExternal: true
  name: SetProperty(Object, String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object())
  name.vb: SetProperty(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions
  commentId: T:Microsoft.Health.Utility.IDispatchExtensions
  parent: Microsoft.Health.Utility
  isExternal: false
  name: IDispatchExtensions
  nameWithType: IDispatchExtensions
  fullName: Microsoft.Health.Utility.IDispatchExtensions
- uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  isExternal: true
  name: InvokeMethod(Object, String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object())
  name.vb: InvokeMethod(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  isExternal: true
  name: ToStringInvariant(Object)
  nameWithType: InvariantString.ToStringInvariant(Object)
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString
  commentId: T:Microsoft.Health.Utility.InvariantString
  parent: Microsoft.Health.Utility
  isExternal: false
  name: InvariantString
  nameWithType: InvariantString
  fullName: Microsoft.Health.Utility.InvariantString
- uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  isExternal: false
  name: ValueOrDbNull<T>(T)
  nameWithType: TypeHelper.ValueOrDbNull<T>(T)
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>(T)
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of T)(T)
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)(T)
  name.vb: ValueOrDbNull(Of T)(T)
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull<T>
    nameWithType: TypeHelper.ValueOrDbNull<T>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull(Of T)
    nameWithType: TypeHelper.ValueOrDbNull(Of T)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.TypeHelper
  commentId: T:Microsoft.Health.Utility.TypeHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: TypeHelper
  nameWithType: TypeHelper
  fullName: Microsoft.Health.Utility.TypeHelper
- uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  isExternal: true
  name: ToXml(Object)
  nameWithType: WCXmlHelper.ToXml(Object)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.WCXmlHelper
  commentId: T:Microsoft.Health.Utility.WCXmlHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: WCXmlHelper
  nameWithType: WCXmlHelper
  fullName: Microsoft.Health.Utility.WCXmlHelper
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: Microsoft.Health.PhraseAnalyzer.DataExpression.#ctor*
  commentId: Overload:Microsoft.Health.PhraseAnalyzer.DataExpression.#ctor
  isExternal: false
  name: DataExpression
  nameWithType: DataExpression.DataExpression
  fullName: Microsoft.Health.PhraseAnalyzer.DataExpression.DataExpression
- uid: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
  commentId: T:Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
  parent: Microsoft.Health.PhraseAnalyzer
  isExternal: false
  name: ExpressionAttributes
  nameWithType: ExpressionAttributes
  fullName: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
- uid: Microsoft.Health.PhraseAnalyzer.DataExpression.PhraseSets*
  commentId: Overload:Microsoft.Health.PhraseAnalyzer.DataExpression.PhraseSets
  isExternal: false
  name: PhraseSets
  nameWithType: DataExpression.PhraseSets
  fullName: Microsoft.Health.PhraseAnalyzer.DataExpression.PhraseSets
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.PhraseSetExpression}
  commentId: T:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.PhraseSetExpression}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<PhraseSetExpression>
  nameWithType: List<PhraseSetExpression>
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.PhraseSetExpression>
  nameWithType.vb: List(Of PhraseSetExpression)
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.PhraseSetExpression)
  name.vb: List(Of PhraseSetExpression)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseSetExpression
    name: PhraseSetExpression
    nameWithType: PhraseSetExpression
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseSetExpression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseSetExpression
    name: PhraseSetExpression
    nameWithType: PhraseSetExpression
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseSetExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Health.PhraseAnalyzer.DataExpression.XmlSet*
  commentId: Overload:Microsoft.Health.PhraseAnalyzer.DataExpression.XmlSet
  isExternal: false
  name: XmlSet
  nameWithType: DataExpression.XmlSet
  fullName: Microsoft.Health.PhraseAnalyzer.DataExpression.XmlSet
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.YieldXmlExpression}
  commentId: T:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.YieldXmlExpression}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<YieldXmlExpression>
  nameWithType: List<YieldXmlExpression>
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.YieldXmlExpression>
  nameWithType.vb: List(Of YieldXmlExpression)
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.YieldXmlExpression)
  name.vb: List(Of YieldXmlExpression)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.PhraseAnalyzer.YieldXmlExpression
    name: YieldXmlExpression
    nameWithType: YieldXmlExpression
    fullName: Microsoft.Health.PhraseAnalyzer.YieldXmlExpression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.PhraseAnalyzer.YieldXmlExpression
    name: YieldXmlExpression
    nameWithType: YieldXmlExpression
    fullName: Microsoft.Health.PhraseAnalyzer.YieldXmlExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.DataExpression.Maps*
  commentId: Overload:Microsoft.Health.PhraseAnalyzer.DataExpression.Maps
  isExternal: false
  name: Maps
  nameWithType: DataExpression.Maps
  fullName: Microsoft.Health.PhraseAnalyzer.DataExpression.Maps
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.MapSetExpression}
  commentId: T:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.MapSetExpression}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<MapSetExpression>
  nameWithType: List<MapSetExpression>
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.MapSetExpression>
  nameWithType.vb: List(Of MapSetExpression)
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.MapSetExpression)
  name.vb: List(Of MapSetExpression)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.PhraseAnalyzer.MapSetExpression
    name: MapSetExpression
    nameWithType: MapSetExpression
    fullName: Microsoft.Health.PhraseAnalyzer.MapSetExpression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.PhraseAnalyzer.MapSetExpression
    name: MapSetExpression
    nameWithType: MapSetExpression
    fullName: Microsoft.Health.PhraseAnalyzer.MapSetExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.DataExpression.EquivalenceSets*
  commentId: Overload:Microsoft.Health.PhraseAnalyzer.DataExpression.EquivalenceSets
  isExternal: false
  name: EquivalenceSets
  nameWithType: DataExpression.EquivalenceSets
  fullName: Microsoft.Health.PhraseAnalyzer.DataExpression.EquivalenceSets
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.EquivalenceSetExpression}
  commentId: T:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.EquivalenceSetExpression}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<EquivalenceSetExpression>
  nameWithType: List<EquivalenceSetExpression>
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.EquivalenceSetExpression>
  nameWithType.vb: List(Of EquivalenceSetExpression)
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.EquivalenceSetExpression)
  name.vb: List(Of EquivalenceSetExpression)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.PhraseAnalyzer.EquivalenceSetExpression
    name: EquivalenceSetExpression
    nameWithType: EquivalenceSetExpression
    fullName: Microsoft.Health.PhraseAnalyzer.EquivalenceSetExpression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.PhraseAnalyzer.EquivalenceSetExpression
    name: EquivalenceSetExpression
    nameWithType: EquivalenceSetExpression
    fullName: Microsoft.Health.PhraseAnalyzer.EquivalenceSetExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.DataExpression.BaseFilePath*
  commentId: Overload:Microsoft.Health.PhraseAnalyzer.DataExpression.BaseFilePath
  isExternal: false
  name: BaseFilePath
  nameWithType: DataExpression.BaseFilePath
  fullName: Microsoft.Health.PhraseAnalyzer.DataExpression.BaseFilePath
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Health.PhraseAnalyzer.DataExpression.Matchers*
  commentId: Overload:Microsoft.Health.PhraseAnalyzer.DataExpression.Matchers
  isExternal: false
  name: Matchers
  nameWithType: DataExpression.Matchers
  fullName: Microsoft.Health.PhraseAnalyzer.DataExpression.Matchers
- uid: System.Collections.Generic.IDictionary{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}
  commentId: T:System.Collections.Generic.IDictionary{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, IMatcher>
  nameWithType: IDictionary<String, IMatcher>
  fullName: System.Collections.Generic.IDictionary<System.String, Microsoft.Health.PhraseAnalyzer.IMatcher>
  nameWithType.vb: IDictionary(Of String, IMatcher)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, Microsoft.Health.PhraseAnalyzer.IMatcher)
  name.vb: IDictionary(Of String, IMatcher)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.IMatcher
    name: IMatcher
    nameWithType: IMatcher
    fullName: Microsoft.Health.PhraseAnalyzer.IMatcher
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.IMatcher
    name: IMatcher
    nameWithType: IMatcher
    fullName: Microsoft.Health.PhraseAnalyzer.IMatcher
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.DataExpression.Load*
  commentId: Overload:Microsoft.Health.PhraseAnalyzer.DataExpression.Load
  isExternal: false
  name: Load
  nameWithType: DataExpression.Load
  fullName: Microsoft.Health.PhraseAnalyzer.DataExpression.Load
- uid: System.IO.TextReader
  commentId: T:System.IO.TextReader
  parent: System.IO
  isExternal: true
  name: TextReader
  nameWithType: TextReader
  fullName: System.IO.TextReader
- uid: System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.IMatcher}[]
  name: KeyValuePair<String, IMatcher>[]
  nameWithType: KeyValuePair<String, IMatcher>[]
  fullName: System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.PhraseAnalyzer.IMatcher>[]
  nameWithType.vb: KeyValuePair(Of String, IMatcher)()
  fullName.vb: System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.PhraseAnalyzer.IMatcher)()
  name.vb: KeyValuePair(Of String, IMatcher)()
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.IMatcher
    name: IMatcher
    nameWithType: IMatcher
    fullName: Microsoft.Health.PhraseAnalyzer.IMatcher
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.IMatcher
    name: IMatcher
    nameWithType: IMatcher
    fullName: Microsoft.Health.PhraseAnalyzer.IMatcher
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.Health.PhraseAnalyzer.DataExpression
  commentId: T:Microsoft.Health.PhraseAnalyzer.DataExpression
  parent: Microsoft.Health.PhraseAnalyzer
  isExternal: false
  name: DataExpression
  nameWithType: DataExpression
  fullName: Microsoft.Health.PhraseAnalyzer.DataExpression
- uid: System.IO
  commentId: N:System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
