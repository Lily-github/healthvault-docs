### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.Utility.XmlFactoryHelper
  commentId: T:Microsoft.Health.Utility.XmlFactoryHelper
  id: XmlFactoryHelper
  parent: Microsoft.Health.Utility
  children:
  - Microsoft.Health.Utility.XmlFactoryHelper.GetFactoryXml(System.Object,System.String,System.Collections.Generic.IDictionary{System.Type,System.String})
  - Microsoft.Health.Utility.XmlFactoryHelper.LoadFactory``1(System.String,System.Xml.Linq.XElement)
  - Microsoft.Health.Utility.XmlFactoryHelper.LoadFactory``1(System.Type,System.Xml.Linq.XElement)
  - Microsoft.Health.Utility.XmlFactoryHelper.WriteFactoryXml(System.Xml.XmlWriter,System.Object,System.String,System.Collections.Generic.IDictionary{System.Type,System.String})
  langs:
  - csharp
  - vb
  name: XmlFactoryHelper
  nameWithType: XmlFactoryHelper
  fullName: Microsoft.Health.Utility.XmlFactoryHelper
  type: Class
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlFactoryHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: XmlFactoryHelper
    path: ../Microsoft.Health.Utility/utilities/XmlFactoryHelper.cs
    startLine: 20
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nDependency injection helper that uses XML to specify and configure\nfactory types.\n"
  example: []
  syntax:
    content: public static class XmlFactoryHelper
    content.vb: Public Module XmlFactoryHelper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Health.Utility.XmlFactoryHelper.LoadFactory``1(System.String,System.Xml.Linq.XElement)
  commentId: M:Microsoft.Health.Utility.XmlFactoryHelper.LoadFactory``1(System.String,System.Xml.Linq.XElement)
  id: LoadFactory``1(System.String,System.Xml.Linq.XElement)
  parent: Microsoft.Health.Utility.XmlFactoryHelper
  langs:
  - csharp
  - vb
  name: LoadFactory<TFactoryInterface>(String, XElement)
  nameWithType: XmlFactoryHelper.LoadFactory<TFactoryInterface>(String, XElement)
  fullName: Microsoft.Health.Utility.XmlFactoryHelper.LoadFactory<TFactoryInterface>(System.String, System.Xml.Linq.XElement)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlFactoryHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: LoadFactory
    path: ../Microsoft.Health.Utility/utilities/XmlFactoryHelper.cs
    startLine: 26
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nInstantiates a factory type from the XML, where the\nfactory implements the specified factory interface.\n"
  example: []
  syntax:
    content: public static TFactoryInterface LoadFactory<TFactoryInterface>(string typeName, XElement factoryNode)
    content.vb: Public Shared Function LoadFactory(Of TFactoryInterface)(typeName As String, factoryNode As XElement) As TFactoryInterface
    parameters:
    - id: typeName
      type: System.String
    - id: factoryNode
      type: System.Xml.Linq.XElement
    typeParameters:
    - id: TFactoryInterface
    return:
      type: '{TFactoryInterface}'
  overload: Microsoft.Health.Utility.XmlFactoryHelper.LoadFactory*
  nameWithType.vb: XmlFactoryHelper.LoadFactory(Of TFactoryInterface)(String, XElement)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.XmlFactoryHelper.LoadFactory(Of TFactoryInterface)(System.String, System.Xml.Linq.XElement)
  name.vb: LoadFactory(Of TFactoryInterface)(String, XElement)
- uid: Microsoft.Health.Utility.XmlFactoryHelper.LoadFactory``1(System.Type,System.Xml.Linq.XElement)
  commentId: M:Microsoft.Health.Utility.XmlFactoryHelper.LoadFactory``1(System.Type,System.Xml.Linq.XElement)
  id: LoadFactory``1(System.Type,System.Xml.Linq.XElement)
  parent: Microsoft.Health.Utility.XmlFactoryHelper
  langs:
  - csharp
  - vb
  name: LoadFactory<TFactoryInterface>(Type, XElement)
  nameWithType: XmlFactoryHelper.LoadFactory<TFactoryInterface>(Type, XElement)
  fullName: Microsoft.Health.Utility.XmlFactoryHelper.LoadFactory<TFactoryInterface>(System.Type, System.Xml.Linq.XElement)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlFactoryHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: LoadFactory
    path: ../Microsoft.Health.Utility/utilities/XmlFactoryHelper.cs
    startLine: 33
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  syntax:
    content: public static TFactoryInterface LoadFactory<TFactoryInterface>(Type factoryType, XElement factoryNode)
    content.vb: Public Shared Function LoadFactory(Of TFactoryInterface)(factoryType As Type, factoryNode As XElement) As TFactoryInterface
    parameters:
    - id: factoryType
      type: System.Type
    - id: factoryNode
      type: System.Xml.Linq.XElement
    typeParameters:
    - id: TFactoryInterface
    return:
      type: '{TFactoryInterface}'
  overload: Microsoft.Health.Utility.XmlFactoryHelper.LoadFactory*
  nameWithType.vb: XmlFactoryHelper.LoadFactory(Of TFactoryInterface)(Type, XElement)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.XmlFactoryHelper.LoadFactory(Of TFactoryInterface)(System.Type, System.Xml.Linq.XElement)
  name.vb: LoadFactory(Of TFactoryInterface)(Type, XElement)
- uid: Microsoft.Health.Utility.XmlFactoryHelper.WriteFactoryXml(System.Xml.XmlWriter,System.Object,System.String,System.Collections.Generic.IDictionary{System.Type,System.String})
  commentId: M:Microsoft.Health.Utility.XmlFactoryHelper.WriteFactoryXml(System.Xml.XmlWriter,System.Object,System.String,System.Collections.Generic.IDictionary{System.Type,System.String})
  id: WriteFactoryXml(System.Xml.XmlWriter,System.Object,System.String,System.Collections.Generic.IDictionary{System.Type,System.String})
  parent: Microsoft.Health.Utility.XmlFactoryHelper
  langs:
  - csharp
  - vb
  name: WriteFactoryXml(XmlWriter, Object, String, IDictionary<Type, String>)
  nameWithType: XmlFactoryHelper.WriteFactoryXml(XmlWriter, Object, String, IDictionary<Type, String>)
  fullName: Microsoft.Health.Utility.XmlFactoryHelper.WriteFactoryXml(System.Xml.XmlWriter, System.Object, System.String, System.Collections.Generic.IDictionary<System.Type, System.String>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlFactoryHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: WriteFactoryXml
    path: ../Microsoft.Health.Utility/utilities/XmlFactoryHelper.cs
    startLine: 66
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  syntax:
    content: public static void WriteFactoryXml(XmlWriter writer, object factory, string rootNodeName, IDictionary<Type, string> builtInTypeNames = null)
    content.vb: Public Shared Sub WriteFactoryXml(writer As XmlWriter, factory As Object, rootNodeName As String, builtInTypeNames As IDictionary(Of Type, String) = Nothing)
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
    - id: factory
      type: System.Object
    - id: rootNodeName
      type: System.String
    - id: builtInTypeNames
      type: System.Collections.Generic.IDictionary{System.Type,System.String}
  overload: Microsoft.Health.Utility.XmlFactoryHelper.WriteFactoryXml*
  nameWithType.vb: XmlFactoryHelper.WriteFactoryXml(XmlWriter, Object, String, IDictionary(Of Type, String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.XmlFactoryHelper.WriteFactoryXml(System.Xml.XmlWriter, System.Object, System.String, System.Collections.Generic.IDictionary(Of System.Type, System.String))
  name.vb: WriteFactoryXml(XmlWriter, Object, String, IDictionary(Of Type, String))
- uid: Microsoft.Health.Utility.XmlFactoryHelper.GetFactoryXml(System.Object,System.String,System.Collections.Generic.IDictionary{System.Type,System.String})
  commentId: M:Microsoft.Health.Utility.XmlFactoryHelper.GetFactoryXml(System.Object,System.String,System.Collections.Generic.IDictionary{System.Type,System.String})
  id: GetFactoryXml(System.Object,System.String,System.Collections.Generic.IDictionary{System.Type,System.String})
  parent: Microsoft.Health.Utility.XmlFactoryHelper
  langs:
  - csharp
  - vb
  name: GetFactoryXml(Object, String, IDictionary<Type, String>)
  nameWithType: XmlFactoryHelper.GetFactoryXml(Object, String, IDictionary<Type, String>)
  fullName: Microsoft.Health.Utility.XmlFactoryHelper.GetFactoryXml(System.Object, System.String, System.Collections.Generic.IDictionary<System.Type, System.String>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/XmlFactoryHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetFactoryXml
    path: ../Microsoft.Health.Utility/utilities/XmlFactoryHelper.cs
    startLine: 75
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  syntax:
    content: public static XElement GetFactoryXml(object factory, string rootNodeName, IDictionary<Type, string> builtInTypeNames = null)
    content.vb: Public Shared Function GetFactoryXml(factory As Object, rootNodeName As String, builtInTypeNames As IDictionary(Of Type, String) = Nothing) As XElement
    parameters:
    - id: factory
      type: System.Object
    - id: rootNodeName
      type: System.String
    - id: builtInTypeNames
      type: System.Collections.Generic.IDictionary{System.Type,System.String}
    return:
      type: System.Xml.Linq.XElement
  overload: Microsoft.Health.Utility.XmlFactoryHelper.GetFactoryXml*
  nameWithType.vb: XmlFactoryHelper.GetFactoryXml(Object, String, IDictionary(Of Type, String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.XmlFactoryHelper.GetFactoryXml(System.Object, System.String, System.Collections.Generic.IDictionary(Of System.Type, System.String))
  name.vb: GetFactoryXml(Object, String, IDictionary(Of Type, String))
references:
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Utility.XmlFactoryHelper.LoadFactory*
  commentId: Overload:Microsoft.Health.Utility.XmlFactoryHelper.LoadFactory
  isExternal: false
  name: LoadFactory
  nameWithType: XmlFactoryHelper.LoadFactory
  fullName: Microsoft.Health.Utility.XmlFactoryHelper.LoadFactory
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.Linq.XElement
  commentId: T:System.Xml.Linq.XElement
  parent: System.Xml.Linq
  isExternal: true
  name: XElement
  nameWithType: XElement
  fullName: System.Xml.Linq.XElement
- uid: '{TFactoryInterface}'
  commentId: '!:TFactoryInterface'
  definition: TFactoryInterface
  name: TFactoryInterface
  nameWithType: TFactoryInterface
  fullName: TFactoryInterface
- uid: System.Xml.Linq
  commentId: N:System.Xml.Linq
  isExternal: false
  name: System.Xml.Linq
  nameWithType: System.Xml.Linq
  fullName: System.Xml.Linq
- uid: TFactoryInterface
  isExternal: false
  name: TFactoryInterface
  nameWithType: TFactoryInterface
  fullName: TFactoryInterface
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Microsoft.Health.Utility.XmlFactoryHelper.WriteFactoryXml*
  commentId: Overload:Microsoft.Health.Utility.XmlFactoryHelper.WriteFactoryXml
  isExternal: false
  name: WriteFactoryXml
  nameWithType: XmlFactoryHelper.WriteFactoryXml
  fullName: Microsoft.Health.Utility.XmlFactoryHelper.WriteFactoryXml
- uid: System.Xml.XmlWriter
  commentId: T:System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Collections.Generic.IDictionary{System.Type,System.String}
  commentId: T:System.Collections.Generic.IDictionary{System.Type,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<Type, String>
  nameWithType: IDictionary<Type, String>
  fullName: System.Collections.Generic.IDictionary<System.Type, System.String>
  nameWithType.vb: IDictionary(Of Type, String)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.Type, System.String)
  name.vb: IDictionary(Of Type, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: false
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Health.Utility.XmlFactoryHelper.GetFactoryXml*
  commentId: Overload:Microsoft.Health.Utility.XmlFactoryHelper.GetFactoryXml
  isExternal: false
  name: GetFactoryXml
  nameWithType: XmlFactoryHelper.GetFactoryXml
  fullName: Microsoft.Health.Utility.XmlFactoryHelper.GetFactoryXml
