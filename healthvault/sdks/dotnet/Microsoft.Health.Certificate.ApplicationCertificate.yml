### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.Certificate.ApplicationCertificate
  commentId: T:Microsoft.Health.Certificate.ApplicationCertificate
  id: ApplicationCertificate
  parent: Microsoft.Health.Certificate
  children:
  - Microsoft.Health.Certificate.ApplicationCertificate.Certificate
  - Microsoft.Health.Certificate.ApplicationCertificate.CreateCertificate(System.Guid,System.Boolean,System.Boolean,System.Security.Cryptography.X509Certificates.StoreLocation)
  - Microsoft.Health.Certificate.ApplicationCertificate.CreateCertificate(System.String)
  - Microsoft.Health.Certificate.ApplicationCertificate.CreateCertificate(System.String,System.Boolean,System.Boolean,System.Security.Cryptography.X509Certificates.StoreLocation)
  - Microsoft.Health.Certificate.ApplicationCertificate.CreateCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation)
  - Microsoft.Health.Certificate.ApplicationCertificate.CreatePersistedCertificate(System.Guid)
  - Microsoft.Health.Certificate.ApplicationCertificate.CreatePersistedCertificate(System.Guid,System.Security.Cryptography.X509Certificates.StoreLocation)
  - Microsoft.Health.Certificate.ApplicationCertificate.DeleteCertificate(System.Guid)
  - Microsoft.Health.Certificate.ApplicationCertificate.DeleteCertificate(System.Guid,System.Security.Cryptography.X509Certificates.StoreLocation)
  - Microsoft.Health.Certificate.ApplicationCertificate.DeleteCertificate(System.String)
  - Microsoft.Health.Certificate.ApplicationCertificate.DeleteCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation)
  - Microsoft.Health.Certificate.ApplicationCertificate.DeleteKeyContainer(System.Guid)
  - Microsoft.Health.Certificate.ApplicationCertificate.DeleteKeyContainer(System.String)
  langs:
  - csharp
  - vb
  name: ApplicationCertificate
  nameWithType: ApplicationCertificate
  fullName: Microsoft.Health.Certificate.ApplicationCertificate
  type: Class
  source:
    remote:
      path: Microsoft.Health/Certificate/ApplicationCertificate.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ApplicationCertificate
    path: ../Microsoft.Health/Certificate/ApplicationCertificate.cs
    startLine: 24
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Certificate
  summary: "\nGenerates a new HealthVault application certificate.\n"
  remarks: "\nThis certificate is typically used by HealthVaultClientApplication.\n"
  example: []
  syntax:
    content: public class ApplicationCertificate
    content.vb: Public Class ApplicationCertificate
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - Microsoft.Health.Certificate.ApplicationCertificate.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  - System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.Certificate.ApplicationCertificate.CreateCertificate(System.String)
  commentId: M:Microsoft.Health.Certificate.ApplicationCertificate.CreateCertificate(System.String)
  id: CreateCertificate(System.String)
  parent: Microsoft.Health.Certificate.ApplicationCertificate
  langs:
  - csharp
  - vb
  name: CreateCertificate(String)
  nameWithType: ApplicationCertificate.CreateCertificate(String)
  fullName: Microsoft.Health.Certificate.ApplicationCertificate.CreateCertificate(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/Certificate/ApplicationCertificate.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CreateCertificate
    path: ../Microsoft.Health/Certificate/ApplicationCertificate.cs
    startLine: 58
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Certificate
  summary: "\nGenerate an X509 certificate that works with the HealthVault SDK using the\nspecified name.\n"
  example: []
  syntax:
    content: >-
      [SecurityCritical]

      public static ApplicationCertificate CreateCertificate(string certificateName)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function CreateCertificate(certificateName As String) As ApplicationCertificate
    parameters:
    - id: certificateName
      type: System.String
    return:
      type: Microsoft.Health.Certificate.ApplicationCertificate
  overload: Microsoft.Health.Certificate.ApplicationCertificate.CreateCertificate*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">certificateName</span> is <strong>null</strong>, empty, or all whitespace.\n"
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Certificate.ApplicationCertificate.CreateCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation)
  commentId: M:Microsoft.Health.Certificate.ApplicationCertificate.CreateCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation)
  id: CreateCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation)
  parent: Microsoft.Health.Certificate.ApplicationCertificate
  langs:
  - csharp
  - vb
  name: CreateCertificate(String, StoreLocation)
  nameWithType: ApplicationCertificate.CreateCertificate(String, StoreLocation)
  fullName: Microsoft.Health.Certificate.ApplicationCertificate.CreateCertificate(System.String, System.Security.Cryptography.X509Certificates.StoreLocation)
  type: Method
  source:
    remote:
      path: Microsoft.Health/Certificate/ApplicationCertificate.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CreateCertificate
    path: ../Microsoft.Health/Certificate/ApplicationCertificate.cs
    startLine: 81
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Certificate
  summary: "\nGenerate an X509 certificate that works with the HealthVault SDK using the\nspecified name.\n"
  example: []
  syntax:
    content: >-
      [SecurityCritical]

      public static ApplicationCertificate CreateCertificate(string certificateName, StoreLocation storeLocation)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function CreateCertificate(certificateName As String, storeLocation As StoreLocation) As ApplicationCertificate
    parameters:
    - id: certificateName
      type: System.String
    - id: storeLocation
      type: System.Security.Cryptography.X509Certificates.StoreLocation
    return:
      type: Microsoft.Health.Certificate.ApplicationCertificate
  overload: Microsoft.Health.Certificate.ApplicationCertificate.CreateCertificate*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">certificateName</span> is <strong>null</strong>, empty, or all whitespace.\n"
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Certificate.ApplicationCertificate.CreatePersistedCertificate(System.Guid)
  commentId: M:Microsoft.Health.Certificate.ApplicationCertificate.CreatePersistedCertificate(System.Guid)
  id: CreatePersistedCertificate(System.Guid)
  parent: Microsoft.Health.Certificate.ApplicationCertificate
  langs:
  - csharp
  - vb
  name: CreatePersistedCertificate(Guid)
  nameWithType: ApplicationCertificate.CreatePersistedCertificate(Guid)
  fullName: Microsoft.Health.Certificate.ApplicationCertificate.CreatePersistedCertificate(System.Guid)
  type: Method
  source:
    remote:
      path: Microsoft.Health/Certificate/ApplicationCertificate.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CreatePersistedCertificate
    path: ../Microsoft.Health/Certificate/ApplicationCertificate.cs
    startLine: 113
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Certificate
  summary: "\nGenerate or fetch a persisted certificate in the specified certificate store.\n"
  example: []
  syntax:
    content: >-
      [SecurityCritical]

      public static ApplicationCertificate CreatePersistedCertificate(Guid applicationId)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function CreatePersistedCertificate(applicationId As Guid) As ApplicationCertificate
    parameters:
    - id: applicationId
      type: System.Guid
      description: "\nThe unique identifier of the application to create the certificate for.\n"
    return:
      type: Microsoft.Health.Certificate.ApplicationCertificate
      description: "\nAn ApplicationCertificate instance containing the certificate for the \nspecified application.\n"
  overload: Microsoft.Health.Certificate.ApplicationCertificate.CreatePersistedCertificate*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">applicationId</span> is Guid.Empty.\n"
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Certificate.ApplicationCertificate.CreatePersistedCertificate(System.Guid,System.Security.Cryptography.X509Certificates.StoreLocation)
  commentId: M:Microsoft.Health.Certificate.ApplicationCertificate.CreatePersistedCertificate(System.Guid,System.Security.Cryptography.X509Certificates.StoreLocation)
  id: CreatePersistedCertificate(System.Guid,System.Security.Cryptography.X509Certificates.StoreLocation)
  parent: Microsoft.Health.Certificate.ApplicationCertificate
  langs:
  - csharp
  - vb
  name: CreatePersistedCertificate(Guid, StoreLocation)
  nameWithType: ApplicationCertificate.CreatePersistedCertificate(Guid, StoreLocation)
  fullName: Microsoft.Health.Certificate.ApplicationCertificate.CreatePersistedCertificate(System.Guid, System.Security.Cryptography.X509Certificates.StoreLocation)
  type: Method
  source:
    remote:
      path: Microsoft.Health/Certificate/ApplicationCertificate.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CreatePersistedCertificate
    path: ../Microsoft.Health/Certificate/ApplicationCertificate.cs
    startLine: 141
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Certificate
  summary: "\nGenerate or fetch a persisted certificate in the specified certificate store.\n"
  example: []
  syntax:
    content: >-
      [SecurityCritical]

      public static ApplicationCertificate CreatePersistedCertificate(Guid applicationId, StoreLocation storeLocation)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function CreatePersistedCertificate(applicationId As Guid, storeLocation As StoreLocation) As ApplicationCertificate
    parameters:
    - id: applicationId
      type: System.Guid
      description: "\nThe unique identifier of the application to create the certificate for.\n"
    - id: storeLocation
      type: System.Security.Cryptography.X509Certificates.StoreLocation
      description: "\nThe store location to fetch or create the certificate in.\n"
    return:
      type: Microsoft.Health.Certificate.ApplicationCertificate
      description: "\nAn ApplicationCertificate instance containing the certificate for the \nspecified application.\n"
  overload: Microsoft.Health.Certificate.ApplicationCertificate.CreatePersistedCertificate*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">applicationId</span> is Guid.Empty.\n"
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Certificate.ApplicationCertificate.CreateCertificate(System.Guid,System.Boolean,System.Boolean,System.Security.Cryptography.X509Certificates.StoreLocation)
  commentId: M:Microsoft.Health.Certificate.ApplicationCertificate.CreateCertificate(System.Guid,System.Boolean,System.Boolean,System.Security.Cryptography.X509Certificates.StoreLocation)
  id: CreateCertificate(System.Guid,System.Boolean,System.Boolean,System.Security.Cryptography.X509Certificates.StoreLocation)
  parent: Microsoft.Health.Certificate.ApplicationCertificate
  langs:
  - csharp
  - vb
  name: CreateCertificate(Guid, Boolean, Boolean, StoreLocation)
  nameWithType: ApplicationCertificate.CreateCertificate(Guid, Boolean, Boolean, StoreLocation)
  fullName: Microsoft.Health.Certificate.ApplicationCertificate.CreateCertificate(System.Guid, System.Boolean, System.Boolean, System.Security.Cryptography.X509Certificates.StoreLocation)
  type: Method
  source:
    remote:
      path: Microsoft.Health/Certificate/ApplicationCertificate.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CreateCertificate
    path: ../Microsoft.Health/Certificate/ApplicationCertificate.cs
    startLine: 189
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Certificate
  summary: "\nGenerate or fetch a persisted certificate in the specified certificate store.\n"
  example: []
  syntax:
    content: >-
      [SecurityCritical]

      public static ApplicationCertificate CreateCertificate(Guid applicationId, bool alwaysCreate, bool persist, StoreLocation storeLocation)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function CreateCertificate(applicationId As Guid, alwaysCreate As Boolean, persist As Boolean, storeLocation As StoreLocation) As ApplicationCertificate
    parameters:
    - id: applicationId
      type: System.Guid
      description: "\nThe unique identifier of the application to create the certificate for.\n"
    - id: alwaysCreate
      type: System.Boolean
      description: "\nIf true, a new certificate will be created even if it already exists in\nthe specified certificate store.\n"
    - id: persist
      type: System.Boolean
      description: "\nIf true, the certificate is persisted in the specified certificate store, otherwise\nthe key container is deleted.\n"
    - id: storeLocation
      type: System.Security.Cryptography.X509Certificates.StoreLocation
      description: "\nThe store location to fetch or create the certificate in.\n"
    return:
      type: Microsoft.Health.Certificate.ApplicationCertificate
      description: "\nAn ApplicationCertificate instance containing the certificate for the \nspecified application.\n"
  overload: Microsoft.Health.Certificate.ApplicationCertificate.CreateCertificate*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">applicationId</span> is Guid.Empty.\n"
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Certificate.ApplicationCertificate.CreateCertificate(System.String,System.Boolean,System.Boolean,System.Security.Cryptography.X509Certificates.StoreLocation)
  commentId: M:Microsoft.Health.Certificate.ApplicationCertificate.CreateCertificate(System.String,System.Boolean,System.Boolean,System.Security.Cryptography.X509Certificates.StoreLocation)
  id: CreateCertificate(System.String,System.Boolean,System.Boolean,System.Security.Cryptography.X509Certificates.StoreLocation)
  parent: Microsoft.Health.Certificate.ApplicationCertificate
  langs:
  - csharp
  - vb
  name: CreateCertificate(String, Boolean, Boolean, StoreLocation)
  nameWithType: ApplicationCertificate.CreateCertificate(String, Boolean, Boolean, StoreLocation)
  fullName: Microsoft.Health.Certificate.ApplicationCertificate.CreateCertificate(System.String, System.Boolean, System.Boolean, System.Security.Cryptography.X509Certificates.StoreLocation)
  type: Method
  source:
    remote:
      path: Microsoft.Health/Certificate/ApplicationCertificate.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CreateCertificate
    path: ../Microsoft.Health/Certificate/ApplicationCertificate.cs
    startLine: 235
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Certificate
  summary: "\nGenerate or fetch a persisted certificate in the specified certificate store.\n"
  example: []
  syntax:
    content: >-
      [SecurityCritical]

      public static ApplicationCertificate CreateCertificate(string certificateName, bool alwaysCreate, bool persist, StoreLocation storeLocation)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function CreateCertificate(certificateName As String, alwaysCreate As Boolean, persist As Boolean, storeLocation As StoreLocation) As ApplicationCertificate
    parameters:
    - id: certificateName
      type: System.String
      description: "\nThe name to use when creating the certificate.\n"
    - id: alwaysCreate
      type: System.Boolean
      description: "\nIf true a new certificate will be created even if it already exists in\nthe specified certificate store.\n"
    - id: persist
      type: System.Boolean
      description: "\nIf true, the certificate is persisted in the specified certificate store, otherwise\nthe key container is deleted.\n"
    - id: storeLocation
      type: System.Security.Cryptography.X509Certificates.StoreLocation
      description: "\nThe store location to fetch or create the certificate in.\n"
    return:
      type: Microsoft.Health.Certificate.ApplicationCertificate
      description: "\nAn ApplicationCertificate instance containing the certificate for the \nspecified application.\n"
  overload: Microsoft.Health.Certificate.ApplicationCertificate.CreateCertificate*
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Certificate.ApplicationCertificate.Certificate
  commentId: P:Microsoft.Health.Certificate.ApplicationCertificate.Certificate
  id: Certificate
  parent: Microsoft.Health.Certificate.ApplicationCertificate
  langs:
  - csharp
  - vb
  name: Certificate
  nameWithType: ApplicationCertificate.Certificate
  fullName: Microsoft.Health.Certificate.ApplicationCertificate.Certificate
  type: Property
  source:
    remote:
      path: Microsoft.Health/Certificate/ApplicationCertificate.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Certificate
    path: ../Microsoft.Health/Certificate/ApplicationCertificate.cs
    startLine: 283
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Certificate
  summary: "\nGets the certificate.\n"
  example: []
  syntax:
    content: public X509Certificate2 Certificate { get; }
    content.vb: Public ReadOnly Property Certificate As X509Certificate2
    parameters: []
    return:
      type: System.Security.Cryptography.X509Certificates.X509Certificate2
  overload: Microsoft.Health.Certificate.ApplicationCertificate.Certificate*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.Certificate.ApplicationCertificate.DeleteCertificate(System.Guid)
  commentId: M:Microsoft.Health.Certificate.ApplicationCertificate.DeleteCertificate(System.Guid)
  id: DeleteCertificate(System.Guid)
  parent: Microsoft.Health.Certificate.ApplicationCertificate
  langs:
  - csharp
  - vb
  name: DeleteCertificate(Guid)
  nameWithType: ApplicationCertificate.DeleteCertificate(Guid)
  fullName: Microsoft.Health.Certificate.ApplicationCertificate.DeleteCertificate(System.Guid)
  type: Method
  source:
    remote:
      path: Microsoft.Health/Certificate/ApplicationCertificate.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DeleteCertificate
    path: ../Microsoft.Health/Certificate/ApplicationCertificate.cs
    startLine: 554
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Certificate
  summary: "\nRemoves the certificate for the specified application identifier\nfrom the certificate store and deletes the key container.\n"
  example: []
  syntax:
    content: >-
      [SecurityCritical]

      public static void DeleteCertificate(Guid applicationId)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub DeleteCertificate(applicationId As Guid)
    parameters:
    - id: applicationId
      type: System.Guid
      description: "\nThe unique identifier of the application for which to remove the certificate from the current\nuser store.\n"
  overload: Microsoft.Health.Certificate.ApplicationCertificate.DeleteCertificate*
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Certificate.ApplicationCertificate.DeleteCertificate(System.Guid,System.Security.Cryptography.X509Certificates.StoreLocation)
  commentId: M:Microsoft.Health.Certificate.ApplicationCertificate.DeleteCertificate(System.Guid,System.Security.Cryptography.X509Certificates.StoreLocation)
  id: DeleteCertificate(System.Guid,System.Security.Cryptography.X509Certificates.StoreLocation)
  parent: Microsoft.Health.Certificate.ApplicationCertificate
  langs:
  - csharp
  - vb
  name: DeleteCertificate(Guid, StoreLocation)
  nameWithType: ApplicationCertificate.DeleteCertificate(Guid, StoreLocation)
  fullName: Microsoft.Health.Certificate.ApplicationCertificate.DeleteCertificate(System.Guid, System.Security.Cryptography.X509Certificates.StoreLocation)
  type: Method
  source:
    remote:
      path: Microsoft.Health/Certificate/ApplicationCertificate.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DeleteCertificate
    path: ../Microsoft.Health/Certificate/ApplicationCertificate.cs
    startLine: 573
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Certificate
  summary: "\nRemoves the certificate for the specified application identifier\nfrom the certificate store and deletes the key container.\n"
  example: []
  syntax:
    content: >-
      [SecurityCritical]

      public static void DeleteCertificate(Guid applicationId, StoreLocation storeLocation)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub DeleteCertificate(applicationId As Guid, storeLocation As StoreLocation)
    parameters:
    - id: applicationId
      type: System.Guid
      description: "\nThe unique identifier of the application for which to remove the certificate from the \nspecified store.\n"
    - id: storeLocation
      type: System.Security.Cryptography.X509Certificates.StoreLocation
      description: "\nThe certificate store from which to remove the certificate.\n"
  overload: Microsoft.Health.Certificate.ApplicationCertificate.DeleteCertificate*
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Certificate.ApplicationCertificate.DeleteCertificate(System.String)
  commentId: M:Microsoft.Health.Certificate.ApplicationCertificate.DeleteCertificate(System.String)
  id: DeleteCertificate(System.String)
  parent: Microsoft.Health.Certificate.ApplicationCertificate
  langs:
  - csharp
  - vb
  name: DeleteCertificate(String)
  nameWithType: ApplicationCertificate.DeleteCertificate(String)
  fullName: Microsoft.Health.Certificate.ApplicationCertificate.DeleteCertificate(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/Certificate/ApplicationCertificate.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DeleteCertificate
    path: ../Microsoft.Health/Certificate/ApplicationCertificate.cs
    startLine: 592
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Certificate
  summary: "\nRemoves the certificate with the specified certificate name\nfrom the certificate store and deletes the key container.\n"
  example: []
  syntax:
    content: >-
      [SecurityCritical]

      public static void DeleteCertificate(string certificateName)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub DeleteCertificate(certificateName As String)
    parameters:
    - id: certificateName
      type: System.String
      description: "\nThe name of the certificate to delete.\n"
  overload: Microsoft.Health.Certificate.ApplicationCertificate.DeleteCertificate*
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Certificate.ApplicationCertificate.DeleteCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation)
  commentId: M:Microsoft.Health.Certificate.ApplicationCertificate.DeleteCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation)
  id: DeleteCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation)
  parent: Microsoft.Health.Certificate.ApplicationCertificate
  langs:
  - csharp
  - vb
  name: DeleteCertificate(String, StoreLocation)
  nameWithType: ApplicationCertificate.DeleteCertificate(String, StoreLocation)
  fullName: Microsoft.Health.Certificate.ApplicationCertificate.DeleteCertificate(System.String, System.Security.Cryptography.X509Certificates.StoreLocation)
  type: Method
  source:
    remote:
      path: Microsoft.Health/Certificate/ApplicationCertificate.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DeleteCertificate
    path: ../Microsoft.Health/Certificate/ApplicationCertificate.cs
    startLine: 610
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Certificate
  summary: "\nRemoves the certificate with the specified certificate name\nfrom the certificate store and deletes the key container.\n"
  example: []
  syntax:
    content: >-
      [SecurityCritical]

      public static void DeleteCertificate(string certificateName, StoreLocation storeLocation)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub DeleteCertificate(certificateName As String, storeLocation As StoreLocation)
    parameters:
    - id: certificateName
      type: System.String
      description: "\nThe name of the certificate to delete.\n"
    - id: storeLocation
      type: System.Security.Cryptography.X509Certificates.StoreLocation
      description: "\nThe certificate store from which to remove the certificate.\n"
  overload: Microsoft.Health.Certificate.ApplicationCertificate.DeleteCertificate*
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Certificate.ApplicationCertificate.DeleteKeyContainer(System.Guid)
  commentId: M:Microsoft.Health.Certificate.ApplicationCertificate.DeleteKeyContainer(System.Guid)
  id: DeleteKeyContainer(System.Guid)
  parent: Microsoft.Health.Certificate.ApplicationCertificate
  langs:
  - csharp
  - vb
  name: DeleteKeyContainer(Guid)
  nameWithType: ApplicationCertificate.DeleteKeyContainer(Guid)
  fullName: Microsoft.Health.Certificate.ApplicationCertificate.DeleteKeyContainer(System.Guid)
  type: Method
  source:
    remote:
      path: Microsoft.Health/Certificate/ApplicationCertificate.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DeleteKeyContainer
    path: ../Microsoft.Health/Certificate/ApplicationCertificate.cs
    startLine: 633
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Certificate
  summary: "\nRemoves the key container for the specified application identifier.\n"
  example: []
  syntax:
    content: >-
      [SecurityCritical]

      public static void DeleteKeyContainer(Guid applicationId)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub DeleteKeyContainer(applicationId As Guid)
    parameters:
    - id: applicationId
      type: System.Guid
      description: "\nThe unique identifier for the HealthVault application which was used in creating\nthe key container.\n"
  overload: Microsoft.Health.Certificate.ApplicationCertificate.DeleteKeyContainer*
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Certificate.ApplicationCertificate.DeleteKeyContainer(System.String)
  commentId: M:Microsoft.Health.Certificate.ApplicationCertificate.DeleteKeyContainer(System.String)
  id: DeleteKeyContainer(System.String)
  parent: Microsoft.Health.Certificate.ApplicationCertificate
  langs:
  - csharp
  - vb
  name: DeleteKeyContainer(String)
  nameWithType: ApplicationCertificate.DeleteKeyContainer(String)
  fullName: Microsoft.Health.Certificate.ApplicationCertificate.DeleteKeyContainer(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/Certificate/ApplicationCertificate.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DeleteKeyContainer
    path: ../Microsoft.Health/Certificate/ApplicationCertificate.cs
    startLine: 651
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Certificate
  summary: "\nRemoves the key container for the specified certificate name.\n"
  example: []
  syntax:
    content: >-
      [SecurityCritical]

      public static void DeleteKeyContainer(string certificateName)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub DeleteKeyContainer(certificateName As String)
    parameters:
    - id: certificateName
      type: System.String
      description: "\nThe certificate name which was used in creating\nthe key container.\n"
  overload: Microsoft.Health.Certificate.ApplicationCertificate.DeleteKeyContainer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">certificateName</span> is <strong>null</strong>, empty, or all whitespace.\n"
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Health.Certificate
  commentId: N:Microsoft.Health.Certificate
  isExternal: false
  name: Microsoft.Health.Certificate
  nameWithType: Microsoft.Health.Certificate
  fullName: Microsoft.Health.Certificate
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  name: SetProperty(String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object())
  name.vb: SetProperty(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  name: InvokeMethod(String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object())
  name.vb: InvokeMethod(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  parent: Microsoft.Health.Utility.InvariantString
  definition: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  name: ToStringInvariant()
  nameWithType: InvariantString.ToStringInvariant()
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant()
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Certificate.ApplicationCertificate.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  parent: Microsoft.Health.Utility.TypeHelper
  definition: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  name: ValueOrDbNull<ApplicationCertificate>()
  nameWithType: TypeHelper.ValueOrDbNull<ApplicationCertificate>()
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.Certificate.ApplicationCertificate>()
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of ApplicationCertificate)()
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.Certificate.ApplicationCertificate)()
  name.vb: ValueOrDbNull(Of ApplicationCertificate)()
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull<ApplicationCertificate>
    nameWithType: TypeHelper.ValueOrDbNull<ApplicationCertificate>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.Certificate.ApplicationCertificate>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull(Of ApplicationCertificate)
    nameWithType: TypeHelper.ValueOrDbNull(Of ApplicationCertificate)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.Certificate.ApplicationCertificate)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  parent: Microsoft.Health.Utility.WCXmlHelper
  definition: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  name: ToXml()
  nameWithType: WCXmlHelper.ToXml()
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml()
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  isExternal: true
  name: SetProperty(Object, String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object())
  name.vb: SetProperty(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions
  commentId: T:Microsoft.Health.Utility.IDispatchExtensions
  parent: Microsoft.Health.Utility
  isExternal: false
  name: IDispatchExtensions
  nameWithType: IDispatchExtensions
  fullName: Microsoft.Health.Utility.IDispatchExtensions
- uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  isExternal: true
  name: InvokeMethod(Object, String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object())
  name.vb: InvokeMethod(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  isExternal: true
  name: ToStringInvariant(Object)
  nameWithType: InvariantString.ToStringInvariant(Object)
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString
  commentId: T:Microsoft.Health.Utility.InvariantString
  parent: Microsoft.Health.Utility
  isExternal: false
  name: InvariantString
  nameWithType: InvariantString
  fullName: Microsoft.Health.Utility.InvariantString
- uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  isExternal: false
  name: ValueOrDbNull<T>(T)
  nameWithType: TypeHelper.ValueOrDbNull<T>(T)
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>(T)
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of T)(T)
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)(T)
  name.vb: ValueOrDbNull(Of T)(T)
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull<T>
    nameWithType: TypeHelper.ValueOrDbNull<T>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull(Of T)
    nameWithType: TypeHelper.ValueOrDbNull(Of T)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.TypeHelper
  commentId: T:Microsoft.Health.Utility.TypeHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: TypeHelper
  nameWithType: TypeHelper
  fullName: Microsoft.Health.Utility.TypeHelper
- uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  isExternal: true
  name: ToXml(Object)
  nameWithType: WCXmlHelper.ToXml(Object)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.WCXmlHelper
  commentId: T:Microsoft.Health.Utility.WCXmlHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: WCXmlHelper
  nameWithType: WCXmlHelper
  fullName: Microsoft.Health.Utility.WCXmlHelper
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: Microsoft.Health.Certificate.ApplicationCertificate.CreateCertificate*
  commentId: Overload:Microsoft.Health.Certificate.ApplicationCertificate.CreateCertificate
  isExternal: false
  name: CreateCertificate
  nameWithType: ApplicationCertificate.CreateCertificate
  fullName: Microsoft.Health.Certificate.ApplicationCertificate.CreateCertificate
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Health.Certificate.ApplicationCertificate
  commentId: T:Microsoft.Health.Certificate.ApplicationCertificate
  parent: Microsoft.Health.Certificate
  isExternal: false
  name: ApplicationCertificate
  nameWithType: ApplicationCertificate
  fullName: Microsoft.Health.Certificate.ApplicationCertificate
- uid: System.Security.Cryptography.X509Certificates.StoreLocation
  commentId: T:System.Security.Cryptography.X509Certificates.StoreLocation
  parent: System.Security.Cryptography.X509Certificates
  isExternal: true
  name: StoreLocation
  nameWithType: StoreLocation
  fullName: System.Security.Cryptography.X509Certificates.StoreLocation
- uid: System.Security.Cryptography.X509Certificates
  commentId: N:System.Security.Cryptography.X509Certificates
  isExternal: false
  name: System.Security.Cryptography.X509Certificates
  nameWithType: System.Security.Cryptography.X509Certificates
  fullName: System.Security.Cryptography.X509Certificates
- uid: Microsoft.Health.Certificate.ApplicationCertificate.CreatePersistedCertificate*
  commentId: Overload:Microsoft.Health.Certificate.ApplicationCertificate.CreatePersistedCertificate
  isExternal: false
  name: CreatePersistedCertificate
  nameWithType: ApplicationCertificate.CreatePersistedCertificate
  fullName: Microsoft.Health.Certificate.ApplicationCertificate.CreatePersistedCertificate
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Health.Certificate.ApplicationCertificate.Certificate*
  commentId: Overload:Microsoft.Health.Certificate.ApplicationCertificate.Certificate
  isExternal: false
  name: Certificate
  nameWithType: ApplicationCertificate.Certificate
  fullName: Microsoft.Health.Certificate.ApplicationCertificate.Certificate
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2
  commentId: T:System.Security.Cryptography.X509Certificates.X509Certificate2
  parent: System.Security.Cryptography.X509Certificates
  isExternal: true
  name: X509Certificate2
  nameWithType: X509Certificate2
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2
- uid: Microsoft.Health.Certificate.ApplicationCertificate.DeleteCertificate*
  commentId: Overload:Microsoft.Health.Certificate.ApplicationCertificate.DeleteCertificate
  isExternal: false
  name: DeleteCertificate
  nameWithType: ApplicationCertificate.DeleteCertificate
  fullName: Microsoft.Health.Certificate.ApplicationCertificate.DeleteCertificate
- uid: Microsoft.Health.Certificate.ApplicationCertificate.DeleteKeyContainer*
  commentId: Overload:Microsoft.Health.Certificate.ApplicationCertificate.DeleteKeyContainer
  isExternal: false
  name: DeleteKeyContainer
  nameWithType: ApplicationCertificate.DeleteKeyContainer
  fullName: Microsoft.Health.Certificate.ApplicationCertificate.DeleteKeyContainer
