### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.HealthRecordItemCollection
  commentId: T:Microsoft.Health.HealthRecordItemCollection
  id: HealthRecordItemCollection
  parent: Microsoft.Health
  children:
  - Microsoft.Health.HealthRecordItemCollection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Health.HealthRecordItem})
  - Microsoft.Health.HealthRecordItemCollection.Add(Microsoft.Health.HealthRecordItem)
  - Microsoft.Health.HealthRecordItemCollection.Clear
  - Microsoft.Health.HealthRecordItemCollection.Contains(Microsoft.Health.HealthRecordItem)
  - Microsoft.Health.HealthRecordItemCollection.Contains(Microsoft.Health.HealthRecordItemKey)
  - Microsoft.Health.HealthRecordItemCollection.CopyTo(Microsoft.Health.HealthRecordItem[],System.Int32)
  - Microsoft.Health.HealthRecordItemCollection.Count
  - Microsoft.Health.HealthRecordItemCollection.GetEnumerator
  - Microsoft.Health.HealthRecordItemCollection.GetRange(System.Int32,System.Int32)
  - Microsoft.Health.HealthRecordItemCollection.IndexOf(Microsoft.Health.HealthRecordItem)
  - Microsoft.Health.HealthRecordItemCollection.IndexOf(Microsoft.Health.HealthRecordItemKey)
  - Microsoft.Health.HealthRecordItemCollection.Insert(System.Int32,Microsoft.Health.HealthRecordItem)
  - Microsoft.Health.HealthRecordItemCollection.IsFixedSize
  - Microsoft.Health.HealthRecordItemCollection.IsReadOnly
  - Microsoft.Health.HealthRecordItemCollection.IsSynchronized
  - Microsoft.Health.HealthRecordItemCollection.Item(System.Int32)
  - Microsoft.Health.HealthRecordItemCollection.Name
  - Microsoft.Health.HealthRecordItemCollection.OrderByCulture
  - Microsoft.Health.HealthRecordItemCollection.Remove(Microsoft.Health.HealthRecordItem)
  - Microsoft.Health.HealthRecordItemCollection.RemoveAt(System.Int32)
  - Microsoft.Health.HealthRecordItemCollection.Sort(System.Collections.Generic.IComparer{Microsoft.Health.HealthRecordItem})
  - Microsoft.Health.HealthRecordItemCollection.Sort(System.Comparison{Microsoft.Health.HealthRecordItem})
  - Microsoft.Health.HealthRecordItemCollection.SyncRoot
  - Microsoft.Health.HealthRecordItemCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - Microsoft.Health.HealthRecordItemCollection.System#Collections#IEnumerable#GetEnumerator
  - Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#Add(System.Object)
  - Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#Contains(System.Object)
  - Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#IndexOf(System.Object)
  - Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  - Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#Item(System.Int32)
  - Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#Remove(System.Object)
  - Microsoft.Health.HealthRecordItemCollection.WasFiltered
  langs:
  - csharp
  - vb
  name: HealthRecordItemCollection
  nameWithType: HealthRecordItemCollection
  fullName: Microsoft.Health.HealthRecordItemCollection
  type: Class
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: HealthRecordItemCollection
    path: ../Microsoft.Health/HealthRecordItemCollection.cs
    startLine: 24
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nDefines a group of results that gets returned from the \n<xref href=\"Microsoft.Health.HealthRecordSearcher\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nThis collection is read-only.\n"
  example: []
  syntax:
    content: 'public class HealthRecordItemCollection : IList<HealthRecordItem>, ICollection<HealthRecordItem>, IEnumerable<HealthRecordItem>, IList, ICollection, IEnumerable'
    content.vb: >-
      Public Class HealthRecordItemCollection
          Implements IList(Of HealthRecordItem), ICollection(Of HealthRecordItem), IEnumerable(Of HealthRecordItem), IList, ICollection, IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem}
  - System.Collections.Generic.ICollection{Microsoft.Health.HealthRecordItem}
  - System.Collections.Generic.IEnumerable{Microsoft.Health.HealthRecordItem}
  - System.Collections.IList
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - Microsoft.Health.HealthRecordItemCollection.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  - System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.HealthRecordItemCollection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Health.HealthRecordItem})
  commentId: M:Microsoft.Health.HealthRecordItemCollection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Health.HealthRecordItem})
  id: '#ctor(System.Collections.Generic.IEnumerable{Microsoft.Health.HealthRecordItem})'
  parent: Microsoft.Health.HealthRecordItemCollection
  langs:
  - csharp
  - vb
  name: HealthRecordItemCollection(IEnumerable<HealthRecordItem>)
  nameWithType: HealthRecordItemCollection.HealthRecordItemCollection(IEnumerable<HealthRecordItem>)
  fullName: Microsoft.Health.HealthRecordItemCollection.HealthRecordItemCollection(System.Collections.Generic.IEnumerable<Microsoft.Health.HealthRecordItem>)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health/HealthRecordItemCollection.cs
    startLine: 198
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nCreate an instance of the <xref href=\"Microsoft.Health.HealthRecordItemCollection\" data-throw-if-not-resolved=\"false\"></xref> class with a specific set of items.\n"
  remarks: "\nThis constructor is intended for testing purposes. \n"
  example: []
  syntax:
    content: public HealthRecordItemCollection(IEnumerable<HealthRecordItem> items)
    content.vb: Public Sub New(items As IEnumerable(Of HealthRecordItem))
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{Microsoft.Health.HealthRecordItem}
      description: The items to put into the collection.
  overload: Microsoft.Health.HealthRecordItemCollection.#ctor*
  nameWithType.vb: HealthRecordItemCollection.HealthRecordItemCollection(IEnumerable(Of HealthRecordItem))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.HealthRecordItemCollection.HealthRecordItemCollection(System.Collections.Generic.IEnumerable(Of Microsoft.Health.HealthRecordItem))
  name.vb: HealthRecordItemCollection(IEnumerable(Of HealthRecordItem))
- uid: Microsoft.Health.HealthRecordItemCollection.Name
  commentId: P:Microsoft.Health.HealthRecordItemCollection.Name
  id: Name
  parent: Microsoft.Health.HealthRecordItemCollection
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: HealthRecordItemCollection.Name
  fullName: Microsoft.Health.HealthRecordItemCollection.Name
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Name
    path: ../Microsoft.Health/HealthRecordItemCollection.cs
    startLine: 233
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the name of the filter group.\n"
  remarks: "\nThis name is used to distinguish the responses for the filter\ngroup that was specified in the search.\n"
  example: []
  syntax:
    content: public string Name { get; }
    content.vb: Public ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\nA string containing the name of the filter to which the results\nin this group apply.\n"
  overload: Microsoft.Health.HealthRecordItemCollection.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthRecordItemCollection.WasFiltered
  commentId: P:Microsoft.Health.HealthRecordItemCollection.WasFiltered
  id: WasFiltered
  parent: Microsoft.Health.HealthRecordItemCollection
  langs:
  - csharp
  - vb
  name: WasFiltered
  nameWithType: HealthRecordItemCollection.WasFiltered
  fullName: Microsoft.Health.HealthRecordItemCollection.WasFiltered
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: WasFiltered
    path: ../Microsoft.Health/HealthRecordItemCollection.cs
    startLine: 249
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets a value indicating whether the result set of health record \nitems was filtered.\n"
  example: []
  syntax:
    content: public bool WasFiltered { get; }
    content.vb: Public ReadOnly Property WasFiltered As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<strong>true</strong> if the result set of health record items was filtered due \nto the callers permissions; otherwise, <strong>false</strong>.\n"
  overload: Microsoft.Health.HealthRecordItemCollection.WasFiltered*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthRecordItemCollection.OrderByCulture
  commentId: P:Microsoft.Health.HealthRecordItemCollection.OrderByCulture
  id: OrderByCulture
  parent: Microsoft.Health.HealthRecordItemCollection
  langs:
  - csharp
  - vb
  name: OrderByCulture
  nameWithType: HealthRecordItemCollection.OrderByCulture
  fullName: Microsoft.Health.HealthRecordItemCollection.OrderByCulture
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: OrderByCulture
    path: ../Microsoft.Health/HealthRecordItemCollection.cs
    startLine: 264
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the value indicating the culture that order by values were sorted in.\n"
  remarks: "\nThe culture may not be the same culture as requested in request header.  It is the closest match HealthVault supports.\n"
  example: []
  syntax:
    content: public string OrderByCulture { get; }
    content.vb: Public ReadOnly Property OrderByCulture As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Health.HealthRecordItemCollection.OrderByCulture*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthRecordItemCollection.Count
  commentId: P:Microsoft.Health.HealthRecordItemCollection.Count
  id: Count
  parent: Microsoft.Health.HealthRecordItemCollection
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: HealthRecordItemCollection.Count
  fullName: Microsoft.Health.HealthRecordItemCollection.Count
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Count
    path: ../Microsoft.Health/HealthRecordItemCollection.cs
    startLine: 317
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the number of items in the result group.\n"
  remarks: "\nThis number can include partial results returned from the server\nif the maximum number of items returned is reached. If accessed,\nthe partial items are retrieved automatically from the server.\n"
  example: []
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
  overload: Microsoft.Health.HealthRecordItemCollection.Count*
  implements:
  - System.Collections.Generic.ICollection{Microsoft.Health.HealthRecordItem}.Count
  - System.Collections.ICollection.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthRecordItemCollection.IsReadOnly
  commentId: P:Microsoft.Health.HealthRecordItemCollection.IsReadOnly
  id: IsReadOnly
  parent: Microsoft.Health.HealthRecordItemCollection
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: HealthRecordItemCollection.IsReadOnly
  fullName: Microsoft.Health.HealthRecordItemCollection.IsReadOnly
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IsReadOnly
    path: ../Microsoft.Health/HealthRecordItemCollection.cs
    startLine: 330
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets a value indicating that this collection is read-only.\n"
  example: []
  syntax:
    content: public bool IsReadOnly { get; }
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\nThis property always returns <strong>true</strong>.\n"
  overload: Microsoft.Health.HealthRecordItemCollection.IsReadOnly*
  implements:
  - System.Collections.Generic.ICollection{Microsoft.Health.HealthRecordItem}.IsReadOnly
  - System.Collections.IList.IsReadOnly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthRecordItemCollection.IsSynchronized
  commentId: P:Microsoft.Health.HealthRecordItemCollection.IsSynchronized
  id: IsSynchronized
  parent: Microsoft.Health.HealthRecordItemCollection
  langs:
  - csharp
  - vb
  name: IsSynchronized
  nameWithType: HealthRecordItemCollection.IsSynchronized
  fullName: Microsoft.Health.HealthRecordItemCollection.IsSynchronized
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IsSynchronized
    path: ../Microsoft.Health/HealthRecordItemCollection.cs
    startLine: 349
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets a value indicating that this collection is thread-safe \nwhen the <xref href=\"Microsoft.Health.HealthRecordItemCollection.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> is used.\n"
  remarks: "\n<xref href=\"Microsoft.Health.HealthRecordItemCollection.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> returns an object that can be used to \nsynchronize access to the ICollection.\n"
  example: []
  syntax:
    content: public bool IsSynchronized { get; }
    content.vb: Public ReadOnly Property IsSynchronized As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\nThis property always returns <strong>true</strong>.\n"
  overload: Microsoft.Health.HealthRecordItemCollection.IsSynchronized*
  implements:
  - System.Collections.ICollection.IsSynchronized
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthRecordItemCollection.SyncRoot
  commentId: P:Microsoft.Health.HealthRecordItemCollection.SyncRoot
  id: SyncRoot
  parent: Microsoft.Health.HealthRecordItemCollection
  langs:
  - csharp
  - vb
  name: SyncRoot
  nameWithType: HealthRecordItemCollection.SyncRoot
  fullName: Microsoft.Health.HealthRecordItemCollection.SyncRoot
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SyncRoot
    path: ../Microsoft.Health/HealthRecordItemCollection.cs
    startLine: 372
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets an object that can be used to synchronize access to the \nICollection. \n"
  remarks: "\nFor collections whose underlying store is not publicly available, \nthe expected implementation is to return the current instance. \nNote that the pointer to the current instance might be \ninsufficient for collections that wrap other collections; those \nshould return the underlying collection's SyncRoot property.\n"
  example: []
  syntax:
    content: public object SyncRoot { get; }
    content.vb: Public ReadOnly Property SyncRoot As Object
    parameters: []
    return:
      type: System.Object
      description: "\nAn object that can be used to synchronize access to the \nICollection.\n"
  overload: Microsoft.Health.HealthRecordItemCollection.SyncRoot*
  implements:
  - System.Collections.ICollection.SyncRoot
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthRecordItemCollection.Add(Microsoft.Health.HealthRecordItem)
  commentId: M:Microsoft.Health.HealthRecordItemCollection.Add(Microsoft.Health.HealthRecordItem)
  id: Add(Microsoft.Health.HealthRecordItem)
  parent: Microsoft.Health.HealthRecordItemCollection
  langs:
  - csharp
  - vb
  name: Add(HealthRecordItem)
  nameWithType: HealthRecordItemCollection.Add(HealthRecordItem)
  fullName: Microsoft.Health.HealthRecordItemCollection.Add(Microsoft.Health.HealthRecordItem)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Add
    path: ../Microsoft.Health/HealthRecordItemCollection.cs
    startLine: 390
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nThis method is not used, because the collection is read-only and\nyou cannot add items to it.\n"
  example: []
  syntax:
    content: public void Add(HealthRecordItem item)
    content.vb: Public Sub Add(item As HealthRecordItem)
    parameters:
    - id: item
      type: Microsoft.Health.HealthRecordItem
      description: "\nThis parameter is ignored, because items cannot be added.\n"
  overload: Microsoft.Health.HealthRecordItemCollection.Add*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\nThis exception is always thrown.\n"
  implements:
  - System.Collections.Generic.ICollection{Microsoft.Health.HealthRecordItem}.Add(Microsoft.Health.HealthRecordItem)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#Add(System.Object)
  commentId: M:Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  isEii: true
  parent: Microsoft.Health.HealthRecordItemCollection
  langs:
  - csharp
  - vb
  name: IList.Add(Object)
  nameWithType: HealthRecordItemCollection.IList.Add(Object)
  fullName: Microsoft.Health.HealthRecordItemCollection.System.Collections.IList.Add(System.Object)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: System.Collections.IList.Add
    path: ../Microsoft.Health/HealthRecordItemCollection.cs
    startLine: 408
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nThis method is not used, because the collection is read-only \nyou cannot add items to it.\n"
  example: []
  syntax:
    content: int IList.Add(object value)
    content.vb: Function System.Collections.IList.Add(value As Object) As Integer Implements IList.Add
    parameters:
    - id: value
      type: System.Object
      description: "\nThis parameter is ignored, because items cannot be added.\n"
    return:
      type: System.Int32
  overload: Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#Add*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\nThis exception is always thrown.\n"
  implements:
  - System.Collections.IList.Add(System.Object)
  nameWithType.vb: HealthRecordItemCollection.System.Collections.IList.Add(Object)
  name.vb: System.Collections.IList.Add(Object)
- uid: Microsoft.Health.HealthRecordItemCollection.Clear
  commentId: M:Microsoft.Health.HealthRecordItemCollection.Clear
  id: Clear
  parent: Microsoft.Health.HealthRecordItemCollection
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: HealthRecordItemCollection.Clear()
  fullName: Microsoft.Health.HealthRecordItemCollection.Clear()
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Clear
    path: ../Microsoft.Health/HealthRecordItemCollection.cs
    startLine: 422
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nThis method is not used, because the result group is read-only, \nand you cannot clear items from it.\n"
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: Microsoft.Health.HealthRecordItemCollection.Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\nThis exception is always thrown.\n"
  implements:
  - System.Collections.Generic.ICollection{Microsoft.Health.HealthRecordItem}.Clear
  - System.Collections.IList.Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordItemCollection.Contains(Microsoft.Health.HealthRecordItem)
  commentId: M:Microsoft.Health.HealthRecordItemCollection.Contains(Microsoft.Health.HealthRecordItem)
  id: Contains(Microsoft.Health.HealthRecordItem)
  parent: Microsoft.Health.HealthRecordItemCollection
  langs:
  - csharp
  - vb
  name: Contains(HealthRecordItem)
  nameWithType: HealthRecordItemCollection.Contains(HealthRecordItem)
  fullName: Microsoft.Health.HealthRecordItemCollection.Contains(Microsoft.Health.HealthRecordItem)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Contains
    path: ../Microsoft.Health/HealthRecordItemCollection.cs
    startLine: 442
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets a value indicating whether the collection contains the \nspecified <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool Contains(HealthRecordItem item)
    content.vb: Public Function Contains(item As HealthRecordItem) As Boolean
    parameters:
    - id: item
      type: Microsoft.Health.HealthRecordItem
      description: "\nThe <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref> to locate in the collection.\n"
    return:
      type: System.Boolean
      description: "\n<strong>true</strong> if a matching <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref> is found; \notherwise, <strong>false</strong>.\n"
  overload: Microsoft.Health.HealthRecordItemCollection.Contains*
  implements:
  - System.Collections.Generic.ICollection{Microsoft.Health.HealthRecordItem}.Contains(Microsoft.Health.HealthRecordItem)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#Contains(System.Object)
  commentId: M:Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  isEii: true
  parent: Microsoft.Health.HealthRecordItemCollection
  langs:
  - csharp
  - vb
  name: IList.Contains(Object)
  nameWithType: HealthRecordItemCollection.IList.Contains(Object)
  fullName: Microsoft.Health.HealthRecordItemCollection.System.Collections.IList.Contains(System.Object)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: System.Collections.IList.Contains
    path: ../Microsoft.Health/HealthRecordItemCollection.cs
    startLine: 464
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets a value indicating whether the collection contains the object\nhaving the specified value.\n"
  example: []
  syntax:
    content: bool IList.Contains(object value)
    content.vb: Function System.Collections.IList.Contains(value As Object) As Boolean Implements IList.Contains
    parameters:
    - id: value
      type: System.Object
      description: "\nThe health record item to locate in the collection.\n"
    return:
      type: System.Boolean
      description: "\n<strong>true</strong> if a matching object is found; otherwise, <strong>false</strong>.\n"
  overload: Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#Contains*
  implements:
  - System.Collections.IList.Contains(System.Object)
  nameWithType.vb: HealthRecordItemCollection.System.Collections.IList.Contains(Object)
  name.vb: System.Collections.IList.Contains(Object)
- uid: Microsoft.Health.HealthRecordItemCollection.Contains(Microsoft.Health.HealthRecordItemKey)
  commentId: M:Microsoft.Health.HealthRecordItemCollection.Contains(Microsoft.Health.HealthRecordItemKey)
  id: Contains(Microsoft.Health.HealthRecordItemKey)
  parent: Microsoft.Health.HealthRecordItemCollection
  langs:
  - csharp
  - vb
  name: Contains(HealthRecordItemKey)
  nameWithType: HealthRecordItemCollection.Contains(HealthRecordItemKey)
  fullName: Microsoft.Health.HealthRecordItemCollection.Contains(Microsoft.Health.HealthRecordItemKey)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Contains
    path: ../Microsoft.Health/HealthRecordItemCollection.cs
    startLine: 498
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets a value indicating whether the collection contains a \n<xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref> with the specified \n<xref href=\"Microsoft.Health.HealthRecordItemKey\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool Contains(HealthRecordItemKey itemKey)
    content.vb: Public Function Contains(itemKey As HealthRecordItemKey) As Boolean
    parameters:
    - id: itemKey
      type: Microsoft.Health.HealthRecordItemKey
      description: "\nThe unique <xref href=\"Microsoft.Health.HealthRecordItemKey\" data-throw-if-not-resolved=\"false\"></xref> used to locate the \n<xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref>item in the collection. The key \ncontains a unique identifier for the <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref> \nand a unique version stamp identifying the version of \nthe <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    return:
      type: System.Boolean
      description: "\n<strong>true</strong> if a matching object is found; otherwise, <strong>false</strong>.\n"
  overload: Microsoft.Health.HealthRecordItemCollection.Contains*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordItemCollection.CopyTo(Microsoft.Health.HealthRecordItem[],System.Int32)
  commentId: M:Microsoft.Health.HealthRecordItemCollection.CopyTo(Microsoft.Health.HealthRecordItem[],System.Int32)
  id: CopyTo(Microsoft.Health.HealthRecordItem[],System.Int32)
  parent: Microsoft.Health.HealthRecordItemCollection
  langs:
  - csharp
  - vb
  name: CopyTo(HealthRecordItem[], Int32)
  nameWithType: HealthRecordItemCollection.CopyTo(HealthRecordItem[], Int32)
  fullName: Microsoft.Health.HealthRecordItemCollection.CopyTo(Microsoft.Health.HealthRecordItem[], System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CopyTo
    path: ../Microsoft.Health/HealthRecordItemCollection.cs
    startLine: 545
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nThis method is not used, because copying the result group might \ncause unexpected network access.\n"
  example: []
  syntax:
    content: public void CopyTo(HealthRecordItem[] array, int arrayIndex)
    content.vb: Public Sub CopyTo(array As HealthRecordItem(), arrayIndex As Integer)
    parameters:
    - id: array
      type: Microsoft.Health.HealthRecordItem[]
      description: "\nThis parameter is ignored, since the result group cannot be copied.\n"
    - id: arrayIndex
      type: System.Int32
      description: "\nThis parameter is ignored, since the result group cannot be copied.\n"
  overload: Microsoft.Health.HealthRecordItemCollection.CopyTo*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\nThis exception is always thrown.\n"
  implements:
  - System.Collections.Generic.ICollection{Microsoft.Health.HealthRecordItem}.CopyTo(Microsoft.Health.HealthRecordItem[],System.Int32)
  nameWithType.vb: HealthRecordItemCollection.CopyTo(HealthRecordItem(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.HealthRecordItemCollection.CopyTo(Microsoft.Health.HealthRecordItem(), System.Int32)
  name.vb: CopyTo(HealthRecordItem(), Int32)
- uid: Microsoft.Health.HealthRecordItemCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:Microsoft.Health.HealthRecordItemCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: Microsoft.Health.HealthRecordItemCollection
  langs:
  - csharp
  - vb
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: HealthRecordItemCollection.ICollection.CopyTo(Array, Int32)
  fullName: Microsoft.Health.HealthRecordItemCollection.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: System.Collections.ICollection.CopyTo
    path: ../Microsoft.Health/HealthRecordItemCollection.cs
    startLine: 567
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nThis method is not used, because copying the result group might \ncause unexpected network access.\n"
  example: []
  syntax:
    content: void ICollection.CopyTo(Array array, int index)
    content.vb: Sub System.Collections.ICollection.CopyTo(array As Array, index As Integer) Implements ICollection.CopyTo
    parameters:
    - id: array
      type: System.Array
      description: "\nThis parameter is ignored, since the result group cannot be copied.\n"
    - id: index
      type: System.Int32
      description: "\nThis parameter is ignored, since the result group cannot be copied.\n"
  overload: Microsoft.Health.HealthRecordItemCollection.System#Collections#ICollection#CopyTo*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\nThis exception is always thrown.\n"
  implements:
  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  nameWithType.vb: HealthRecordItemCollection.System.Collections.ICollection.CopyTo(Array, Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
- uid: Microsoft.Health.HealthRecordItemCollection.Remove(Microsoft.Health.HealthRecordItem)
  commentId: M:Microsoft.Health.HealthRecordItemCollection.Remove(Microsoft.Health.HealthRecordItem)
  id: Remove(Microsoft.Health.HealthRecordItem)
  parent: Microsoft.Health.HealthRecordItemCollection
  langs:
  - csharp
  - vb
  name: Remove(HealthRecordItem)
  nameWithType: HealthRecordItemCollection.Remove(HealthRecordItem)
  fullName: Microsoft.Health.HealthRecordItemCollection.Remove(Microsoft.Health.HealthRecordItem)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Remove
    path: ../Microsoft.Health/HealthRecordItemCollection.cs
    startLine: 585
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nThis method is not used, because items cannot be removed from a \nread-only result group.\n"
  example: []
  syntax:
    content: public bool Remove(HealthRecordItem item)
    content.vb: Public Function Remove(item As HealthRecordItem) As Boolean
    parameters:
    - id: item
      type: Microsoft.Health.HealthRecordItem
      description: "\nThis parameter is ignored, since items cannot be removed.\n"
    return:
      type: System.Boolean
  overload: Microsoft.Health.HealthRecordItemCollection.Remove*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\nThis exception is always thrown.\n"
  implements:
  - System.Collections.Generic.ICollection{Microsoft.Health.HealthRecordItem}.Remove(Microsoft.Health.HealthRecordItem)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordItemCollection.Item(System.Int32)
  commentId: P:Microsoft.Health.HealthRecordItemCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: Microsoft.Health.HealthRecordItemCollection
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: HealthRecordItemCollection.Item[Int32]
  fullName: Microsoft.Health.HealthRecordItemCollection.Item[System.Int32]
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: this[]
    path: ../Microsoft.Health/HealthRecordItemCollection.cs
    startLine: 615
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nRetrieves the <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref> at the specified index.\n"
  example: []
  syntax:
    content: public HealthRecordItem this[int index] { get; set; }
    content.vb: Public Property Item(index As Integer) As HealthRecordItem
    parameters:
    - id: index
      type: System.Int32
      description: "\nThe zero-based index of the item.\n"
    return:
      type: Microsoft.Health.HealthRecordItem
      description: "\nThe item at the specified index.\n"
  overload: Microsoft.Health.HealthRecordItemCollection.Item*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\nSet is called on a read-only collection.\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\nThe <span class=\"paramref\">index</span> parameter is less than zero or \ngreater than the value of <xref href=\"Microsoft.Health.HealthRecordItemCollection.Count\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  implements:
  - System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem}.Item(System.Int32)
  nameWithType.vb: HealthRecordItemCollection.Item(Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.HealthRecordItemCollection.Item(System.Int32)
  name.vb: Item(Int32)
- uid: Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#Item(System.Int32)
  commentId: P:Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#Item(System.Int32)
  id: System#Collections#IList#Item(System.Int32)
  isEii: true
  parent: Microsoft.Health.HealthRecordItemCollection
  langs:
  - csharp
  - vb
  name: IList.Item[Int32]
  nameWithType: HealthRecordItemCollection.IList.Item[Int32]
  fullName: Microsoft.Health.HealthRecordItemCollection.System.Collections.IList.Item[System.Int32]
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: System.Collections.IList.this[]
    path: ../Microsoft.Health/HealthRecordItemCollection.cs
    startLine: 658
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nRetrieves the object at the specified index.\n"
  example: []
  syntax:
    content: object IList.this[int index] { get; set; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IList.Item(index As Integer) As Object Implements IList.this
    parameters:
    - id: index
      type: System.Int32
      description: "\nThe zero-based index at which to get the object.\n"
    return:
      type: System.Object
      description: "\nThe object at the specified index.\n"
  overload: Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#Item*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\nSet is called on a read-only collection.\n"
  implements:
  - System.Collections.IList.Item(System.Int32)
  nameWithType.vb: HealthRecordItemCollection.System.Collections.IList.Item(Int32)
  modifiers.csharp:
  - get
  - set
  fullName.vb: Microsoft.Health.HealthRecordItemCollection.System.Collections.IList.Item(System.Int32)
  name.vb: System.Collections.IList.Item(Int32)
- uid: Microsoft.Health.HealthRecordItemCollection.IndexOf(Microsoft.Health.HealthRecordItem)
  commentId: M:Microsoft.Health.HealthRecordItemCollection.IndexOf(Microsoft.Health.HealthRecordItem)
  id: IndexOf(Microsoft.Health.HealthRecordItem)
  parent: Microsoft.Health.HealthRecordItemCollection
  langs:
  - csharp
  - vb
  name: IndexOf(HealthRecordItem)
  nameWithType: HealthRecordItemCollection.IndexOf(HealthRecordItem)
  fullName: Microsoft.Health.HealthRecordItemCollection.IndexOf(Microsoft.Health.HealthRecordItem)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IndexOf
    path: ../Microsoft.Health/HealthRecordItemCollection.cs
    startLine: 684
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nDetermines the index of the specific <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref> \nin the list.\n"
  example: []
  syntax:
    content: public int IndexOf(HealthRecordItem item)
    content.vb: Public Function IndexOf(item As HealthRecordItem) As Integer
    parameters:
    - id: item
      type: Microsoft.Health.HealthRecordItem
      description: "\nThe <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref> to locate in the list.\n"
    return:
      type: System.Int32
      description: "\nThe index of the <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref>, if found; \notherwise, -1.\n"
  overload: Microsoft.Health.HealthRecordItemCollection.IndexOf*
  implements:
  - System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem}.IndexOf(Microsoft.Health.HealthRecordItem)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#IndexOf(System.Object)
  commentId: M:Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  isEii: true
  parent: Microsoft.Health.HealthRecordItemCollection
  langs:
  - csharp
  - vb
  name: IList.IndexOf(Object)
  nameWithType: HealthRecordItemCollection.IList.IndexOf(Object)
  fullName: Microsoft.Health.HealthRecordItemCollection.System.Collections.IList.IndexOf(System.Object)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: System.Collections.IList.IndexOf
    path: ../Microsoft.Health/HealthRecordItemCollection.cs
    startLine: 705
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nDetermines the index of the specific item in the list.\n"
  example: []
  syntax:
    content: int IList.IndexOf(object value)
    content.vb: Function System.Collections.IList.IndexOf(value As Object) As Integer Implements IList.IndexOf
    parameters:
    - id: value
      type: System.Object
      description: "\nThe object to locate in the list.\n"
    return:
      type: System.Int32
      description: "\nThe index of the item, if found in the list; otherwise, -1.\n"
  overload: Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#IndexOf*
  implements:
  - System.Collections.IList.IndexOf(System.Object)
  nameWithType.vb: HealthRecordItemCollection.System.Collections.IList.IndexOf(Object)
  name.vb: System.Collections.IList.IndexOf(Object)
- uid: Microsoft.Health.HealthRecordItemCollection.IndexOf(Microsoft.Health.HealthRecordItemKey)
  commentId: M:Microsoft.Health.HealthRecordItemCollection.IndexOf(Microsoft.Health.HealthRecordItemKey)
  id: IndexOf(Microsoft.Health.HealthRecordItemKey)
  parent: Microsoft.Health.HealthRecordItemCollection
  langs:
  - csharp
  - vb
  name: IndexOf(HealthRecordItemKey)
  nameWithType: HealthRecordItemCollection.IndexOf(HealthRecordItemKey)
  fullName: Microsoft.Health.HealthRecordItemCollection.IndexOf(Microsoft.Health.HealthRecordItemKey)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IndexOf
    path: ../Microsoft.Health/HealthRecordItemCollection.cs
    startLine: 735
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nDetermines the index of the specific item in the list using the\nunique health record item identifier.\n"
  example: []
  syntax:
    content: public int IndexOf(HealthRecordItemKey key)
    content.vb: Public Function IndexOf(key As HealthRecordItemKey) As Integer
    parameters:
    - id: key
      type: Microsoft.Health.HealthRecordItemKey
      description: "\nThe unique health record item key used to locate the \nitem in the list.\n"
    return:
      type: System.Int32
      description: "\nThe index of item, if found in the list; otherwise, -1.\n"
  overload: Microsoft.Health.HealthRecordItemCollection.IndexOf*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordItemCollection.Insert(System.Int32,Microsoft.Health.HealthRecordItem)
  commentId: M:Microsoft.Health.HealthRecordItemCollection.Insert(System.Int32,Microsoft.Health.HealthRecordItem)
  id: Insert(System.Int32,Microsoft.Health.HealthRecordItem)
  parent: Microsoft.Health.HealthRecordItemCollection
  langs:
  - csharp
  - vb
  name: Insert(Int32, HealthRecordItem)
  nameWithType: HealthRecordItemCollection.Insert(Int32, HealthRecordItem)
  fullName: Microsoft.Health.HealthRecordItemCollection.Insert(System.Int32, Microsoft.Health.HealthRecordItem)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Insert
    path: ../Microsoft.Health/HealthRecordItemCollection.cs
    startLine: 780
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nThis method is not used, because items cannot be inserted into a\nread-only collection.\n"
  example: []
  syntax:
    content: public void Insert(int index, HealthRecordItem item)
    content.vb: Public Sub Insert(index As Integer, item As HealthRecordItem)
    parameters:
    - id: index
      type: System.Int32
      description: "\nThis parameter is ignored because the collection is read-only.\n"
    - id: item
      type: Microsoft.Health.HealthRecordItem
      description: "\nThis parameter is ignored because the collection is read-only.\n"
  overload: Microsoft.Health.HealthRecordItemCollection.Insert*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\nThe collection is read-only and does not support insertion.\n"
  implements:
  - System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem}.Insert(System.Int32,Microsoft.Health.HealthRecordItem)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  commentId: M:Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  isEii: true
  parent: Microsoft.Health.HealthRecordItemCollection
  langs:
  - csharp
  - vb
  name: IList.Insert(Int32, Object)
  nameWithType: HealthRecordItemCollection.IList.Insert(Int32, Object)
  fullName: Microsoft.Health.HealthRecordItemCollection.System.Collections.IList.Insert(System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: System.Collections.IList.Insert
    path: ../Microsoft.Health/HealthRecordItemCollection.cs
    startLine: 802
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nThis method is not used, because items cannot be inserted into a\nread-only collection.\n"
  example: []
  syntax:
    content: void IList.Insert(int index, object value)
    content.vb: Sub System.Collections.IList.Insert(index As Integer, value As Object) Implements IList.Insert
    parameters:
    - id: index
      type: System.Int32
      description: "\nThis parameter is ignored because the collection is read-only.\n"
    - id: value
      type: System.Object
      description: "\nThis parameter is ignored because the collection is read-only.\n"
  overload: Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#Insert*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\nThe collection is read-only and does not support insertion.\n"
  implements:
  - System.Collections.IList.Insert(System.Int32,System.Object)
  nameWithType.vb: HealthRecordItemCollection.System.Collections.IList.Insert(Int32, Object)
  name.vb: System.Collections.IList.Insert(Int32, Object)
- uid: Microsoft.Health.HealthRecordItemCollection.RemoveAt(System.Int32)
  commentId: M:Microsoft.Health.HealthRecordItemCollection.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: Microsoft.Health.HealthRecordItemCollection
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  nameWithType: HealthRecordItemCollection.RemoveAt(Int32)
  fullName: Microsoft.Health.HealthRecordItemCollection.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: RemoveAt
    path: ../Microsoft.Health/HealthRecordItemCollection.cs
    startLine: 821
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nThis method is not used, because items cannot be removed from a\nread-only collection.\n"
  example: []
  syntax:
    content: public void RemoveAt(int index)
    content.vb: Public Sub RemoveAt(index As Integer)
    parameters:
    - id: index
      type: System.Int32
      description: "\nThis parameter is ignored because the collection is read-only.\n"
  overload: Microsoft.Health.HealthRecordItemCollection.RemoveAt*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\nThe collection is read-only and does not support the removal of\nitems.\n"
  implements:
  - System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem}.RemoveAt(System.Int32)
  - System.Collections.IList.RemoveAt(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#Remove(System.Object)
  commentId: M:Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: Microsoft.Health.HealthRecordItemCollection
  langs:
  - csharp
  - vb
  name: IList.Remove(Object)
  nameWithType: HealthRecordItemCollection.IList.Remove(Object)
  fullName: Microsoft.Health.HealthRecordItemCollection.System.Collections.IList.Remove(System.Object)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: System.Collections.IList.Remove
    path: ../Microsoft.Health/HealthRecordItemCollection.cs
    startLine: 840
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nThis method is not used, because items cannot be removed from a\nread-only collection.\n"
  example: []
  syntax:
    content: void IList.Remove(object value)
    content.vb: Sub System.Collections.IList.Remove(value As Object) Implements IList.Remove
    parameters:
    - id: value
      type: System.Object
      description: "\nThis parameter is ignored because the collection is read-only.\n"
  overload: Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#Remove*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\nThe collection is read-only and does not support the removal of\nitems.\n"
  implements:
  - System.Collections.IList.Remove(System.Object)
  nameWithType.vb: HealthRecordItemCollection.System.Collections.IList.Remove(Object)
  name.vb: System.Collections.IList.Remove(Object)
- uid: Microsoft.Health.HealthRecordItemCollection.IsFixedSize
  commentId: P:Microsoft.Health.HealthRecordItemCollection.IsFixedSize
  id: IsFixedSize
  parent: Microsoft.Health.HealthRecordItemCollection
  langs:
  - csharp
  - vb
  name: IsFixedSize
  nameWithType: HealthRecordItemCollection.IsFixedSize
  fullName: Microsoft.Health.HealthRecordItemCollection.IsFixedSize
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IsFixedSize
    path: ../Microsoft.Health/HealthRecordItemCollection.cs
    startLine: 859
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets a value indicating that the IList has a fixed size. \n"
  remarks: "\nA collection with a fixed size does not allow the addition or \nremoval of elements after the collection is created, but it \nmight allow the modification of existing elements.\n"
  example: []
  syntax:
    content: public bool IsFixedSize { get; }
    content.vb: Public ReadOnly Property IsFixedSize As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\nThis property always returns <strong>true</strong>.\n"
  overload: Microsoft.Health.HealthRecordItemCollection.IsFixedSize*
  implements:
  - System.Collections.IList.IsFixedSize
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthRecordItemCollection.GetEnumerator
  commentId: M:Microsoft.Health.HealthRecordItemCollection.GetEnumerator
  id: GetEnumerator
  parent: Microsoft.Health.HealthRecordItemCollection
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: HealthRecordItemCollection.GetEnumerator()
  fullName: Microsoft.Health.HealthRecordItemCollection.GetEnumerator()
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetEnumerator
    path: ../Microsoft.Health/HealthRecordItemCollection.cs
    startLine: 884
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nReturns an enumerator that iterates through the collection.\n"
  remarks: "\nThis enumerator might cause network requests to the HealthVault service\nas it enumerates the results. The HealthVault service limits the\nnumber of results with each request, therefore, it might be \nnecessary to make multiple requests to fill in the result data as the \ncollection is enumerated.\n"
  example: []
  syntax:
    content: public IEnumerator<HealthRecordItem> GetEnumerator()
    content.vb: Public Function GetEnumerator As IEnumerator(Of HealthRecordItem)
    return:
      type: System.Collections.Generic.IEnumerator{Microsoft.Health.HealthRecordItem}
      description: "\nA IEnumerator that iterates through the collection.\n"
  overload: Microsoft.Health.HealthRecordItemCollection.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{Microsoft.Health.HealthRecordItem}.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordItemCollection.System#Collections#IEnumerable#GetEnumerator
  commentId: M:Microsoft.Health.HealthRecordItemCollection.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: Microsoft.Health.HealthRecordItemCollection
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: HealthRecordItemCollection.IEnumerable.GetEnumerator()
  fullName: Microsoft.Health.HealthRecordItemCollection.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: System.Collections.IEnumerable.GetEnumerator
    path: ../Microsoft.Health/HealthRecordItemCollection.cs
    startLine: 905
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nReturns an enumerator that iterates through the collection.\n"
  remarks: "\nThis enumerator may cause network requests to the HealthVault service\nas it enumerates the results. The HealthVault service limits the\nnumber of results with each request so it may be necessary to \nmake multiple requests to fill in the result data as the \ncollection is enumerated.\n"
  example: []
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
      description: "\nA IEnumerator that iterates through the collection.\n"
  overload: Microsoft.Health.HealthRecordItemCollection.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: HealthRecordItemCollection.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: Microsoft.Health.HealthRecordItemCollection.Sort(System.Comparison{Microsoft.Health.HealthRecordItem})
  commentId: M:Microsoft.Health.HealthRecordItemCollection.Sort(System.Comparison{Microsoft.Health.HealthRecordItem})
  id: Sort(System.Comparison{Microsoft.Health.HealthRecordItem})
  parent: Microsoft.Health.HealthRecordItemCollection
  langs:
  - csharp
  - vb
  name: Sort(Comparison<HealthRecordItem>)
  nameWithType: HealthRecordItemCollection.Sort(Comparison<HealthRecordItem>)
  fullName: Microsoft.Health.HealthRecordItemCollection.Sort(System.Comparison<Microsoft.Health.HealthRecordItem>)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Sort
    path: ../Microsoft.Health/HealthRecordItemCollection.cs
    startLine: 1106
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nSorts the HealthRecordItems in the collection using the specified comparison\nmethod.\n"
  remarks: "\nThis method will cause all results to be retrieved from HealthVault.<br />\nWhen a query results in many matches, HealthVault will return a fixed number\nof \"full\" results (all data requested is returned) and the remaining matches\nas \"partial\" (only identifying information is returned). HealthRecordItemCollection\nautomatically retrieves the full information for the partial results as the \ncollection gets enumerated. In order to sort the results, HealthRecordItemCollection\nmust retrieve the full set of data for all the results. This may cause several\nrequests to HealthVault to retrieve all the data.\n"
  example: []
  syntax:
    content: public void Sort(Comparison<HealthRecordItem> comparison)
    content.vb: Public Sub Sort(comparison As Comparison(Of HealthRecordItem))
    parameters:
    - id: comparison
      type: System.Comparison{Microsoft.Health.HealthRecordItem}
      description: "\nThe comparison method to use when sorting the collection.\n"
  overload: Microsoft.Health.HealthRecordItemCollection.Sort*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<span class=\"paramref\">comparison</span> is <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe implementation of <span class=\"paramref\">comparison</span> caused an error during the sort.\nFor example, <span class=\"paramref\">comparison</span> might not return 0 when comparing an item \nwith itself.\n"
  nameWithType.vb: HealthRecordItemCollection.Sort(Comparison(Of HealthRecordItem))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.HealthRecordItemCollection.Sort(System.Comparison(Of Microsoft.Health.HealthRecordItem))
  name.vb: Sort(Comparison(Of HealthRecordItem))
- uid: Microsoft.Health.HealthRecordItemCollection.Sort(System.Collections.Generic.IComparer{Microsoft.Health.HealthRecordItem})
  commentId: M:Microsoft.Health.HealthRecordItemCollection.Sort(System.Collections.Generic.IComparer{Microsoft.Health.HealthRecordItem})
  id: Sort(System.Collections.Generic.IComparer{Microsoft.Health.HealthRecordItem})
  parent: Microsoft.Health.HealthRecordItemCollection
  langs:
  - csharp
  - vb
  name: Sort(IComparer<HealthRecordItem>)
  nameWithType: HealthRecordItemCollection.Sort(IComparer<HealthRecordItem>)
  fullName: Microsoft.Health.HealthRecordItemCollection.Sort(System.Collections.Generic.IComparer<Microsoft.Health.HealthRecordItem>)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Sort
    path: ../Microsoft.Health/HealthRecordItemCollection.cs
    startLine: 1146
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nSorts the HealthRecordItems in the collection using the specified comparer.\n"
  remarks: "\nThis method will cause all result to be retrieved from HealthVault.<br />\nWhen a query results in many matches, HealthVault will return a fixed number\nof \"full\" results (all data requested is returned) and the remaining matches\nas \"partial\" (only identifying information is returned). HealthRecordItemCollection\nautomatically pages down the full information for the partial results as the \ncollection gets enumerated. In order to sort the results, HealthRecordItemCollection\nmust retrieve the full set of data for all the results. This may cause several\nrequests to HealthVault to retrieve all the data.\n"
  example: []
  syntax:
    content: public void Sort(IComparer<HealthRecordItem> comparer)
    content.vb: Public Sub Sort(comparer As IComparer(Of HealthRecordItem))
    parameters:
    - id: comparer
      type: System.Collections.Generic.IComparer{Microsoft.Health.HealthRecordItem}
      description: "\nThe <xref href=\"System.Collections.Generic.IComparer%601\" data-throw-if-not-resolved=\"false\"></xref> implementation to use when comparing elements,\nor <strong>null</strong> to use the defalt comparer <xref href=\"System.Collections.Generic.Comparer%601.Default\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  overload: Microsoft.Health.HealthRecordItemCollection.Sort*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<span class=\"paramref\">comparer</span> is <strong>null</strong>, and the default comparer \n<xref href=\"System.Collections.Generic.Comparer%601.Default\" data-throw-if-not-resolved=\"false\"></xref> cannot find implementation of the\n<xref href=\"System.IComparable%601\" data-throw-if-not-resolved=\"false\"></xref> generic interface.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe implementation of <span class=\"paramref\">comparer</span> caused an error during the sort.\nFor example, <span class=\"paramref\">comparer</span> might not return 0 when \ncomparing an item with itself.\n"
  nameWithType.vb: HealthRecordItemCollection.Sort(IComparer(Of HealthRecordItem))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.HealthRecordItemCollection.Sort(System.Collections.Generic.IComparer(Of Microsoft.Health.HealthRecordItem))
  name.vb: Sort(IComparer(Of HealthRecordItem))
- uid: Microsoft.Health.HealthRecordItemCollection.GetRange(System.Int32,System.Int32)
  commentId: M:Microsoft.Health.HealthRecordItemCollection.GetRange(System.Int32,System.Int32)
  id: GetRange(System.Int32,System.Int32)
  parent: Microsoft.Health.HealthRecordItemCollection
  langs:
  - csharp
  - vb
  name: GetRange(Int32, Int32)
  nameWithType: HealthRecordItemCollection.GetRange(Int32, Int32)
  fullName: Microsoft.Health.HealthRecordItemCollection.GetRange(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordItemCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetRange
    path: ../Microsoft.Health/HealthRecordItemCollection.cs
    startLine: 1204
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nRetrieves the <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref> from the result group in the \nspecified range of indexes, including the specified indexes.\n"
  example: []
  syntax:
    content: public Collection<HealthRecordItem> GetRange(int minIndex, int maxIndex)
    content.vb: Public Function GetRange(minIndex As Integer, maxIndex As Integer) As Collection(Of HealthRecordItem)
    parameters:
    - id: minIndex
      type: System.Int32
      description: "\nThe starting point for retrieving items.\n"
    - id: maxIndex
      type: System.Int32
      description: "\nThe stopping point for retrieving items.\n"
    return:
      type: System.Collections.ObjectModel.Collection{Microsoft.Health.HealthRecordItem}
      description: "\nA collection of items in the specified index range.\n"
  overload: Microsoft.Health.HealthRecordItemCollection.GetRange*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">minIndex</span> parameter is greater than the\n<span class=\"paramref\">maxIndex</span> parameter.\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\nEither the <span class=\"paramref\">minIndex</span> parameter or the\n<span class=\"paramref\">maxIndex</span> parameter is less than zero, or the\n<span class=\"paramref\">maxIndex</span> parameter is greater than\n<xref href=\"Microsoft.Health.HealthRecordItemCollection.Count\" data-throw-if-not-resolved=\"false\"></xref> -1.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Health.HealthRecordSearcher
  commentId: T:Microsoft.Health.HealthRecordSearcher
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordSearcher
  nameWithType: HealthRecordSearcher
  fullName: Microsoft.Health.HealthRecordSearcher
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem}
  commentId: T:System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<HealthRecordItem>
  nameWithType: IList<HealthRecordItem>
  fullName: System.Collections.Generic.IList<Microsoft.Health.HealthRecordItem>
  nameWithType.vb: IList(Of HealthRecordItem)
  fullName.vb: System.Collections.Generic.IList(Of Microsoft.Health.HealthRecordItem)
  name.vb: IList(Of HealthRecordItem)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{Microsoft.Health.HealthRecordItem}
  commentId: T:System.Collections.Generic.ICollection{Microsoft.Health.HealthRecordItem}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<HealthRecordItem>
  nameWithType: ICollection<HealthRecordItem>
  fullName: System.Collections.Generic.ICollection<Microsoft.Health.HealthRecordItem>
  nameWithType.vb: ICollection(Of HealthRecordItem)
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Health.HealthRecordItem)
  name.vb: ICollection(Of HealthRecordItem)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Microsoft.Health.HealthRecordItem}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Health.HealthRecordItem}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<HealthRecordItem>
  nameWithType: IEnumerable<HealthRecordItem>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Health.HealthRecordItem>
  nameWithType.vb: IEnumerable(Of HealthRecordItem)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Health.HealthRecordItem)
  name.vb: IEnumerable(Of HealthRecordItem)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList
  commentId: T:System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  name: SetProperty(String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object())
  name.vb: SetProperty(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  name: InvokeMethod(String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object())
  name.vb: InvokeMethod(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  parent: Microsoft.Health.Utility.InvariantString
  definition: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  name: ToStringInvariant()
  nameWithType: InvariantString.ToStringInvariant()
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant()
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthRecordItemCollection.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  parent: Microsoft.Health.Utility.TypeHelper
  definition: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  name: ValueOrDbNull<HealthRecordItemCollection>()
  nameWithType: TypeHelper.ValueOrDbNull<HealthRecordItemCollection>()
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.HealthRecordItemCollection>()
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of HealthRecordItemCollection)()
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.HealthRecordItemCollection)()
  name.vb: ValueOrDbNull(Of HealthRecordItemCollection)()
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull<HealthRecordItemCollection>
    nameWithType: TypeHelper.ValueOrDbNull<HealthRecordItemCollection>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.HealthRecordItemCollection>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull(Of HealthRecordItemCollection)
    nameWithType: TypeHelper.ValueOrDbNull(Of HealthRecordItemCollection)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.HealthRecordItemCollection)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  parent: Microsoft.Health.Utility.WCXmlHelper
  definition: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  name: ToXml()
  nameWithType: WCXmlHelper.ToXml()
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml()
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  isExternal: true
  name: SetProperty(Object, String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object())
  name.vb: SetProperty(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions
  commentId: T:Microsoft.Health.Utility.IDispatchExtensions
  parent: Microsoft.Health.Utility
  isExternal: false
  name: IDispatchExtensions
  nameWithType: IDispatchExtensions
  fullName: Microsoft.Health.Utility.IDispatchExtensions
- uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  isExternal: true
  name: InvokeMethod(Object, String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object())
  name.vb: InvokeMethod(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  isExternal: true
  name: ToStringInvariant(Object)
  nameWithType: InvariantString.ToStringInvariant(Object)
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString
  commentId: T:Microsoft.Health.Utility.InvariantString
  parent: Microsoft.Health.Utility
  isExternal: false
  name: InvariantString
  nameWithType: InvariantString
  fullName: Microsoft.Health.Utility.InvariantString
- uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  isExternal: false
  name: ValueOrDbNull<T>(T)
  nameWithType: TypeHelper.ValueOrDbNull<T>(T)
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>(T)
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of T)(T)
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)(T)
  name.vb: ValueOrDbNull(Of T)(T)
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull<T>
    nameWithType: TypeHelper.ValueOrDbNull<T>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull(Of T)
    nameWithType: TypeHelper.ValueOrDbNull(Of T)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.TypeHelper
  commentId: T:Microsoft.Health.Utility.TypeHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: TypeHelper
  nameWithType: TypeHelper
  fullName: Microsoft.Health.Utility.TypeHelper
- uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  isExternal: true
  name: ToXml(Object)
  nameWithType: WCXmlHelper.ToXml(Object)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.WCXmlHelper
  commentId: T:Microsoft.Health.Utility.WCXmlHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: WCXmlHelper
  nameWithType: WCXmlHelper
  fullName: Microsoft.Health.Utility.WCXmlHelper
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: Microsoft.Health.HealthRecordItemCollection
  commentId: T:Microsoft.Health.HealthRecordItemCollection
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordItemCollection
  nameWithType: HealthRecordItemCollection
  fullName: Microsoft.Health.HealthRecordItemCollection
- uid: Microsoft.Health.HealthRecordItemCollection.#ctor*
  commentId: Overload:Microsoft.Health.HealthRecordItemCollection.#ctor
  isExternal: false
  name: HealthRecordItemCollection
  nameWithType: HealthRecordItemCollection.HealthRecordItemCollection
  fullName: Microsoft.Health.HealthRecordItemCollection.HealthRecordItemCollection
- uid: Microsoft.Health.HealthRecordItemCollection.Name*
  commentId: Overload:Microsoft.Health.HealthRecordItemCollection.Name
  isExternal: false
  name: Name
  nameWithType: HealthRecordItemCollection.Name
  fullName: Microsoft.Health.HealthRecordItemCollection.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Health.HealthRecordItemCollection.WasFiltered*
  commentId: Overload:Microsoft.Health.HealthRecordItemCollection.WasFiltered
  isExternal: false
  name: WasFiltered
  nameWithType: HealthRecordItemCollection.WasFiltered
  fullName: Microsoft.Health.HealthRecordItemCollection.WasFiltered
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Health.HealthRecordItemCollection.OrderByCulture*
  commentId: Overload:Microsoft.Health.HealthRecordItemCollection.OrderByCulture
  isExternal: false
  name: OrderByCulture
  nameWithType: HealthRecordItemCollection.OrderByCulture
  fullName: Microsoft.Health.HealthRecordItemCollection.OrderByCulture
- uid: Microsoft.Health.HealthRecordItemCollection.Count*
  commentId: Overload:Microsoft.Health.HealthRecordItemCollection.Count
  isExternal: false
  name: Count
  nameWithType: HealthRecordItemCollection.Count
  fullName: Microsoft.Health.HealthRecordItemCollection.Count
- uid: System.Collections.Generic.ICollection{Microsoft.Health.HealthRecordItem}.Count
  commentId: P:System.Collections.Generic.ICollection{Microsoft.Health.HealthRecordItem}.Count
  parent: System.Collections.Generic.ICollection{Microsoft.Health.HealthRecordItem}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<HealthRecordItem>.Count
  fullName: System.Collections.Generic.ICollection<Microsoft.Health.HealthRecordItem>.Count
  nameWithType.vb: ICollection(Of HealthRecordItem).Count
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Health.HealthRecordItem).Count
- uid: System.Collections.ICollection.Count
  commentId: P:System.Collections.ICollection.Count
  parent: System.Collections.ICollection
  isExternal: true
  name: Count
  nameWithType: ICollection.Count
  fullName: System.Collections.ICollection.Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: Microsoft.Health.HealthRecordItemCollection.IsReadOnly*
  commentId: Overload:Microsoft.Health.HealthRecordItemCollection.IsReadOnly
  isExternal: false
  name: IsReadOnly
  nameWithType: HealthRecordItemCollection.IsReadOnly
  fullName: Microsoft.Health.HealthRecordItemCollection.IsReadOnly
- uid: System.Collections.Generic.ICollection{Microsoft.Health.HealthRecordItem}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{Microsoft.Health.HealthRecordItem}.IsReadOnly
  parent: System.Collections.Generic.ICollection{Microsoft.Health.HealthRecordItem}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ICollection<HealthRecordItem>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<Microsoft.Health.HealthRecordItem>.IsReadOnly
  nameWithType.vb: ICollection(Of HealthRecordItem).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Health.HealthRecordItem).IsReadOnly
- uid: System.Collections.IList.IsReadOnly
  commentId: P:System.Collections.IList.IsReadOnly
  parent: System.Collections.IList
  isExternal: true
  name: IsReadOnly
  nameWithType: IList.IsReadOnly
  fullName: System.Collections.IList.IsReadOnly
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: Microsoft.Health.HealthRecordItemCollection.SyncRoot
  commentId: P:Microsoft.Health.HealthRecordItemCollection.SyncRoot
- uid: Microsoft.Health.HealthRecordItemCollection.IsSynchronized*
  commentId: Overload:Microsoft.Health.HealthRecordItemCollection.IsSynchronized
  isExternal: false
  name: IsSynchronized
  nameWithType: HealthRecordItemCollection.IsSynchronized
  fullName: Microsoft.Health.HealthRecordItemCollection.IsSynchronized
- uid: System.Collections.ICollection.IsSynchronized
  commentId: P:System.Collections.ICollection.IsSynchronized
  parent: System.Collections.ICollection
  isExternal: true
  name: IsSynchronized
  nameWithType: ICollection.IsSynchronized
  fullName: System.Collections.ICollection.IsSynchronized
- uid: Microsoft.Health.HealthRecordItemCollection.SyncRoot*
  commentId: Overload:Microsoft.Health.HealthRecordItemCollection.SyncRoot
  isExternal: false
  name: SyncRoot
  nameWithType: HealthRecordItemCollection.SyncRoot
  fullName: Microsoft.Health.HealthRecordItemCollection.SyncRoot
- uid: System.Collections.ICollection.SyncRoot
  commentId: P:System.Collections.ICollection.SyncRoot
  parent: System.Collections.ICollection
  isExternal: true
  name: SyncRoot
  nameWithType: ICollection.SyncRoot
  fullName: System.Collections.ICollection.SyncRoot
- uid: Microsoft.Health.HealthRecordItemCollection.Add*
  commentId: Overload:Microsoft.Health.HealthRecordItemCollection.Add
  isExternal: false
  name: Add
  nameWithType: HealthRecordItemCollection.Add
  fullName: Microsoft.Health.HealthRecordItemCollection.Add
- uid: System.Collections.Generic.ICollection{Microsoft.Health.HealthRecordItem}.Add(Microsoft.Health.HealthRecordItem)
  commentId: M:System.Collections.Generic.ICollection{Microsoft.Health.HealthRecordItem}.Add(Microsoft.Health.HealthRecordItem)
  parent: System.Collections.Generic.ICollection{Microsoft.Health.HealthRecordItem}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(HealthRecordItem)
  nameWithType: ICollection<HealthRecordItem>.Add(HealthRecordItem)
  fullName: System.Collections.Generic.ICollection<Microsoft.Health.HealthRecordItem>.Add(Microsoft.Health.HealthRecordItem)
  nameWithType.vb: ICollection(Of HealthRecordItem).Add(HealthRecordItem)
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Health.HealthRecordItem).Add(Microsoft.Health.HealthRecordItem)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<HealthRecordItem>.Add
    fullName: System.Collections.Generic.ICollection<Microsoft.Health.HealthRecordItem>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of HealthRecordItem).Add
    fullName: System.Collections.Generic.ICollection(Of Microsoft.Health.HealthRecordItem).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.NotSupportedException
  commentId: T:System.NotSupportedException
- uid: Microsoft.Health.HealthRecordItem
  commentId: T:Microsoft.Health.HealthRecordItem
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordItem
  nameWithType: HealthRecordItem
  fullName: Microsoft.Health.HealthRecordItem
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#Add*
  commentId: Overload:Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#Add
  isExternal: false
  name: IList.Add
  nameWithType: HealthRecordItemCollection.IList.Add
  fullName: Microsoft.Health.HealthRecordItemCollection.System.Collections.IList.Add
  nameWithType.vb: HealthRecordItemCollection.System.Collections.IList.Add
  name.vb: System.Collections.IList.Add
- uid: System.Collections.IList.Add(System.Object)
  commentId: M:System.Collections.IList.Add(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Add(Object)
  nameWithType: IList.Add(Object)
  fullName: System.Collections.IList.Add(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Add(System.Object)
    name: Add
    nameWithType: IList.Add
    fullName: System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Add(System.Object)
    name: Add
    nameWithType: IList.Add
    fullName: System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthRecordItemCollection.Clear*
  commentId: Overload:Microsoft.Health.HealthRecordItemCollection.Clear
  isExternal: false
  name: Clear
  nameWithType: HealthRecordItemCollection.Clear
  fullName: Microsoft.Health.HealthRecordItemCollection.Clear
- uid: System.Collections.Generic.ICollection{Microsoft.Health.HealthRecordItem}.Clear
  commentId: M:System.Collections.Generic.ICollection{Microsoft.Health.HealthRecordItem}.Clear
  parent: System.Collections.Generic.ICollection{Microsoft.Health.HealthRecordItem}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<HealthRecordItem>.Clear()
  fullName: System.Collections.Generic.ICollection<Microsoft.Health.HealthRecordItem>.Clear()
  nameWithType.vb: ICollection(Of HealthRecordItem).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Health.HealthRecordItem).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<HealthRecordItem>.Clear
    fullName: System.Collections.Generic.ICollection<Microsoft.Health.HealthRecordItem>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of HealthRecordItem).Clear
    fullName: System.Collections.Generic.ICollection(Of Microsoft.Health.HealthRecordItem).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList.Clear
  commentId: M:System.Collections.IList.Clear
  parent: System.Collections.IList
  isExternal: true
  name: Clear()
  nameWithType: IList.Clear()
  fullName: System.Collections.IList.Clear()
  spec.csharp:
  - uid: System.Collections.IList.Clear
    name: Clear
    nameWithType: IList.Clear
    fullName: System.Collections.IList.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Clear
    name: Clear
    nameWithType: IList.Clear
    fullName: System.Collections.IList.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthRecordItemCollection.Contains*
  commentId: Overload:Microsoft.Health.HealthRecordItemCollection.Contains
  isExternal: false
  name: Contains
  nameWithType: HealthRecordItemCollection.Contains
  fullName: Microsoft.Health.HealthRecordItemCollection.Contains
- uid: System.Collections.Generic.ICollection{Microsoft.Health.HealthRecordItem}.Contains(Microsoft.Health.HealthRecordItem)
  commentId: M:System.Collections.Generic.ICollection{Microsoft.Health.HealthRecordItem}.Contains(Microsoft.Health.HealthRecordItem)
  parent: System.Collections.Generic.ICollection{Microsoft.Health.HealthRecordItem}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(HealthRecordItem)
  nameWithType: ICollection<HealthRecordItem>.Contains(HealthRecordItem)
  fullName: System.Collections.Generic.ICollection<Microsoft.Health.HealthRecordItem>.Contains(Microsoft.Health.HealthRecordItem)
  nameWithType.vb: ICollection(Of HealthRecordItem).Contains(HealthRecordItem)
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Health.HealthRecordItem).Contains(Microsoft.Health.HealthRecordItem)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<HealthRecordItem>.Contains
    fullName: System.Collections.Generic.ICollection<Microsoft.Health.HealthRecordItem>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of HealthRecordItem).Contains
    fullName: System.Collections.Generic.ICollection(Of Microsoft.Health.HealthRecordItem).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#Contains*
  commentId: Overload:Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#Contains
  isExternal: false
  name: IList.Contains
  nameWithType: HealthRecordItemCollection.IList.Contains
  fullName: Microsoft.Health.HealthRecordItemCollection.System.Collections.IList.Contains
  nameWithType.vb: HealthRecordItemCollection.System.Collections.IList.Contains
  name.vb: System.Collections.IList.Contains
- uid: System.Collections.IList.Contains(System.Object)
  commentId: M:System.Collections.IList.Contains(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Contains(Object)
  nameWithType: IList.Contains(Object)
  fullName: System.Collections.IList.Contains(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Contains(System.Object)
    name: Contains
    nameWithType: IList.Contains
    fullName: System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Contains(System.Object)
    name: Contains
    nameWithType: IList.Contains
    fullName: System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthRecordItemKey
  commentId: T:Microsoft.Health.HealthRecordItemKey
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordItemKey
  nameWithType: HealthRecordItemKey
  fullName: Microsoft.Health.HealthRecordItemKey
- uid: Microsoft.Health.HealthRecordItemCollection.CopyTo*
  commentId: Overload:Microsoft.Health.HealthRecordItemCollection.CopyTo
  isExternal: false
  name: CopyTo
  nameWithType: HealthRecordItemCollection.CopyTo
  fullName: Microsoft.Health.HealthRecordItemCollection.CopyTo
- uid: System.Collections.Generic.ICollection{Microsoft.Health.HealthRecordItem}.CopyTo(Microsoft.Health.HealthRecordItem[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{Microsoft.Health.HealthRecordItem}.CopyTo(Microsoft.Health.HealthRecordItem[],System.Int32)
  parent: System.Collections.Generic.ICollection{Microsoft.Health.HealthRecordItem}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(HealthRecordItem[], Int32)
  nameWithType: ICollection<HealthRecordItem>.CopyTo(HealthRecordItem[], Int32)
  fullName: System.Collections.Generic.ICollection<Microsoft.Health.HealthRecordItem>.CopyTo(Microsoft.Health.HealthRecordItem[], System.Int32)
  nameWithType.vb: ICollection(Of HealthRecordItem).CopyTo(HealthRecordItem(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Health.HealthRecordItem).CopyTo(Microsoft.Health.HealthRecordItem(), System.Int32)
  name.vb: CopyTo(HealthRecordItem(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<HealthRecordItem>.CopyTo
    fullName: System.Collections.Generic.ICollection<Microsoft.Health.HealthRecordItem>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of HealthRecordItem).CopyTo
    fullName: System.Collections.Generic.ICollection(Of Microsoft.Health.HealthRecordItem).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthRecordItem[]
  name: HealthRecordItem[]
  nameWithType: HealthRecordItem[]
  fullName: Microsoft.Health.HealthRecordItem[]
  nameWithType.vb: HealthRecordItem()
  fullName.vb: Microsoft.Health.HealthRecordItem()
  name.vb: HealthRecordItem()
  spec.csharp:
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthRecordItemCollection.System#Collections#ICollection#CopyTo*
  commentId: Overload:Microsoft.Health.HealthRecordItemCollection.System#Collections#ICollection#CopyTo
  isExternal: false
  name: ICollection.CopyTo
  nameWithType: HealthRecordItemCollection.ICollection.CopyTo
  fullName: Microsoft.Health.HealthRecordItemCollection.System.Collections.ICollection.CopyTo
  nameWithType.vb: HealthRecordItemCollection.System.Collections.ICollection.CopyTo
  name.vb: System.Collections.ICollection.CopyTo
- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ICollection
  isExternal: true
  name: CopyTo(Array, Int32)
  nameWithType: ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  spec.csharp:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    nameWithType: ICollection.CopyTo
    fullName: System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    nameWithType: ICollection.CopyTo
    fullName: System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Array
  commentId: T:System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: Microsoft.Health.HealthRecordItemCollection.Remove*
  commentId: Overload:Microsoft.Health.HealthRecordItemCollection.Remove
  isExternal: false
  name: Remove
  nameWithType: HealthRecordItemCollection.Remove
  fullName: Microsoft.Health.HealthRecordItemCollection.Remove
- uid: System.Collections.Generic.ICollection{Microsoft.Health.HealthRecordItem}.Remove(Microsoft.Health.HealthRecordItem)
  commentId: M:System.Collections.Generic.ICollection{Microsoft.Health.HealthRecordItem}.Remove(Microsoft.Health.HealthRecordItem)
  parent: System.Collections.Generic.ICollection{Microsoft.Health.HealthRecordItem}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(HealthRecordItem)
  nameWithType: ICollection<HealthRecordItem>.Remove(HealthRecordItem)
  fullName: System.Collections.Generic.ICollection<Microsoft.Health.HealthRecordItem>.Remove(Microsoft.Health.HealthRecordItem)
  nameWithType.vb: ICollection(Of HealthRecordItem).Remove(HealthRecordItem)
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Health.HealthRecordItem).Remove(Microsoft.Health.HealthRecordItem)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<HealthRecordItem>.Remove
    fullName: System.Collections.Generic.ICollection<Microsoft.Health.HealthRecordItem>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of HealthRecordItem).Remove
    fullName: System.Collections.Generic.ICollection(Of Microsoft.Health.HealthRecordItem).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthRecordItemCollection.Count
  commentId: P:Microsoft.Health.HealthRecordItemCollection.Count
- uid: Microsoft.Health.HealthRecordItemCollection.Item*
  commentId: Overload:Microsoft.Health.HealthRecordItemCollection.Item
  isExternal: false
  name: Item
  nameWithType: HealthRecordItemCollection.Item
  fullName: Microsoft.Health.HealthRecordItemCollection.Item
- uid: System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem}.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem}.Item(System.Int32)
  parent: System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem}
  definition: System.Collections.Generic.IList`1.Item(System.Int32)
  name: Item[Int32]
  nameWithType: IList<HealthRecordItem>.Item[Int32]
  fullName: System.Collections.Generic.IList<Microsoft.Health.HealthRecordItem>.Item[System.Int32]
  nameWithType.vb: IList(Of HealthRecordItem).Item(Int32)
  fullName.vb: System.Collections.Generic.IList(Of Microsoft.Health.HealthRecordItem).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<HealthRecordItem>.Item
    fullName: System.Collections.Generic.IList<Microsoft.Health.HealthRecordItem>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of HealthRecordItem).Item
    fullName: System.Collections.Generic.IList(Of Microsoft.Health.HealthRecordItem).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
- uid: System.Collections.Generic.IList`1.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList`1.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: IList<T>.Item[Int32]
  fullName: System.Collections.Generic.IList<T>.Item[System.Int32]
  nameWithType.vb: IList(Of T).Item(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<T>.Item
    fullName: System.Collections.Generic.IList<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of T).Item
    fullName: System.Collections.Generic.IList(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#Item*
  commentId: Overload:Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#Item
  isExternal: false
  name: IList.Item
  nameWithType: HealthRecordItemCollection.IList.Item
  fullName: Microsoft.Health.HealthRecordItemCollection.System.Collections.IList.Item
  nameWithType.vb: HealthRecordItemCollection.System.Collections.IList.Item
  name.vb: System.Collections.IList.Item
- uid: System.Collections.IList.Item(System.Int32)
  commentId: P:System.Collections.IList.Item(System.Int32)
  parent: System.Collections.IList
  isExternal: true
  name: Item[Int32]
  nameWithType: IList.Item[Int32]
  fullName: System.Collections.IList.Item[System.Int32]
  nameWithType.vb: IList.Item(Int32)
  fullName.vb: System.Collections.IList.Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.IList.Item(System.Int32)
    name: Item
    nameWithType: IList.Item
    fullName: System.Collections.IList.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.IList.Item(System.Int32)
    name: Item
    nameWithType: IList.Item
    fullName: System.Collections.IList.Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthRecordItemCollection.IndexOf*
  commentId: Overload:Microsoft.Health.HealthRecordItemCollection.IndexOf
  isExternal: false
  name: IndexOf
  nameWithType: HealthRecordItemCollection.IndexOf
  fullName: Microsoft.Health.HealthRecordItemCollection.IndexOf
- uid: System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem}.IndexOf(Microsoft.Health.HealthRecordItem)
  commentId: M:System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem}.IndexOf(Microsoft.Health.HealthRecordItem)
  parent: System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem}
  definition: System.Collections.Generic.IList`1.IndexOf(`0)
  name: IndexOf(HealthRecordItem)
  nameWithType: IList<HealthRecordItem>.IndexOf(HealthRecordItem)
  fullName: System.Collections.Generic.IList<Microsoft.Health.HealthRecordItem>.IndexOf(Microsoft.Health.HealthRecordItem)
  nameWithType.vb: IList(Of HealthRecordItem).IndexOf(HealthRecordItem)
  fullName.vb: System.Collections.Generic.IList(Of Microsoft.Health.HealthRecordItem).IndexOf(Microsoft.Health.HealthRecordItem)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<HealthRecordItem>.IndexOf
    fullName: System.Collections.Generic.IList<Microsoft.Health.HealthRecordItem>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of HealthRecordItem).IndexOf
    fullName: System.Collections.Generic.IList(Of Microsoft.Health.HealthRecordItem).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.IndexOf(`0)
  commentId: M:System.Collections.Generic.IList`1.IndexOf(`0)
  isExternal: true
  name: IndexOf(T)
  nameWithType: IList<T>.IndexOf(T)
  fullName: System.Collections.Generic.IList<T>.IndexOf(T)
  nameWithType.vb: IList(Of T).IndexOf(T)
  fullName.vb: System.Collections.Generic.IList(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<T>.IndexOf
    fullName: System.Collections.Generic.IList<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of T).IndexOf
    fullName: System.Collections.Generic.IList(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#IndexOf*
  commentId: Overload:Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#IndexOf
  isExternal: false
  name: IList.IndexOf
  nameWithType: HealthRecordItemCollection.IList.IndexOf
  fullName: Microsoft.Health.HealthRecordItemCollection.System.Collections.IList.IndexOf
  nameWithType.vb: HealthRecordItemCollection.System.Collections.IList.IndexOf
  name.vb: System.Collections.IList.IndexOf
- uid: System.Collections.IList.IndexOf(System.Object)
  commentId: M:System.Collections.IList.IndexOf(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: IndexOf(Object)
  nameWithType: IList.IndexOf(Object)
  fullName: System.Collections.IList.IndexOf(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.IndexOf(System.Object)
    name: IndexOf
    nameWithType: IList.IndexOf
    fullName: System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.IndexOf(System.Object)
    name: IndexOf
    nameWithType: IList.IndexOf
    fullName: System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthRecordItemCollection.Insert*
  commentId: Overload:Microsoft.Health.HealthRecordItemCollection.Insert
  isExternal: false
  name: Insert
  nameWithType: HealthRecordItemCollection.Insert
  fullName: Microsoft.Health.HealthRecordItemCollection.Insert
- uid: System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem}.Insert(System.Int32,Microsoft.Health.HealthRecordItem)
  commentId: M:System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem}.Insert(System.Int32,Microsoft.Health.HealthRecordItem)
  parent: System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem}
  definition: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  name: Insert(Int32, HealthRecordItem)
  nameWithType: IList<HealthRecordItem>.Insert(Int32, HealthRecordItem)
  fullName: System.Collections.Generic.IList<Microsoft.Health.HealthRecordItem>.Insert(System.Int32, Microsoft.Health.HealthRecordItem)
  nameWithType.vb: IList(Of HealthRecordItem).Insert(Int32, HealthRecordItem)
  fullName.vb: System.Collections.Generic.IList(Of Microsoft.Health.HealthRecordItem).Insert(System.Int32, Microsoft.Health.HealthRecordItem)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<HealthRecordItem>.Insert
    fullName: System.Collections.Generic.IList<Microsoft.Health.HealthRecordItem>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of HealthRecordItem).Insert
    fullName: System.Collections.Generic.IList(Of Microsoft.Health.HealthRecordItem).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  commentId: M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  isExternal: true
  name: Insert(Int32, T)
  nameWithType: IList<T>.Insert(Int32, T)
  fullName: System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  nameWithType.vb: IList(Of T).Insert(Int32, T)
  fullName.vb: System.Collections.Generic.IList(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<T>.Insert
    fullName: System.Collections.Generic.IList<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of T).Insert
    fullName: System.Collections.Generic.IList(Of T).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#Insert*
  commentId: Overload:Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#Insert
  isExternal: false
  name: IList.Insert
  nameWithType: HealthRecordItemCollection.IList.Insert
  fullName: Microsoft.Health.HealthRecordItemCollection.System.Collections.IList.Insert
  nameWithType.vb: HealthRecordItemCollection.System.Collections.IList.Insert
  name.vb: System.Collections.IList.Insert
- uid: System.Collections.IList.Insert(System.Int32,System.Object)
  commentId: M:System.Collections.IList.Insert(System.Int32,System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Insert(Int32, Object)
  nameWithType: IList.Insert(Int32, Object)
  fullName: System.Collections.IList.Insert(System.Int32, System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Insert(System.Int32,System.Object)
    name: Insert
    nameWithType: IList.Insert
    fullName: System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Insert(System.Int32,System.Object)
    name: Insert
    nameWithType: IList.Insert
    fullName: System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthRecordItemCollection.RemoveAt*
  commentId: Overload:Microsoft.Health.HealthRecordItemCollection.RemoveAt
  isExternal: false
  name: RemoveAt
  nameWithType: HealthRecordItemCollection.RemoveAt
  fullName: Microsoft.Health.HealthRecordItemCollection.RemoveAt
- uid: System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem}.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem}.RemoveAt(System.Int32)
  parent: System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem}
  definition: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  name: RemoveAt(Int32)
  nameWithType: IList<HealthRecordItem>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<Microsoft.Health.HealthRecordItem>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of HealthRecordItem).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.IList(Of Microsoft.Health.HealthRecordItem).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<HealthRecordItem>.RemoveAt
    fullName: System.Collections.Generic.IList<Microsoft.Health.HealthRecordItem>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of HealthRecordItem).RemoveAt
    fullName: System.Collections.Generic.IList(Of Microsoft.Health.HealthRecordItem).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList.RemoveAt(System.Int32)
  commentId: M:System.Collections.IList.RemoveAt(System.Int32)
  parent: System.Collections.IList
  isExternal: true
  name: RemoveAt(Int32)
  nameWithType: IList.RemoveAt(Int32)
  fullName: System.Collections.IList.RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.IList.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList.RemoveAt
    fullName: System.Collections.IList.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList.RemoveAt
    fullName: System.Collections.IList.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  isExternal: true
  name: RemoveAt(Int32)
  nameWithType: IList<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of T).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<T>.RemoveAt
    fullName: System.Collections.Generic.IList<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of T).RemoveAt
    fullName: System.Collections.Generic.IList(Of T).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#Remove*
  commentId: Overload:Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#Remove
  isExternal: false
  name: IList.Remove
  nameWithType: HealthRecordItemCollection.IList.Remove
  fullName: Microsoft.Health.HealthRecordItemCollection.System.Collections.IList.Remove
  nameWithType.vb: HealthRecordItemCollection.System.Collections.IList.Remove
  name.vb: System.Collections.IList.Remove
- uid: System.Collections.IList.Remove(System.Object)
  commentId: M:System.Collections.IList.Remove(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Remove(Object)
  nameWithType: IList.Remove(Object)
  fullName: System.Collections.IList.Remove(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Remove(System.Object)
    name: Remove
    nameWithType: IList.Remove
    fullName: System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Remove(System.Object)
    name: Remove
    nameWithType: IList.Remove
    fullName: System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthRecordItemCollection.IsFixedSize*
  commentId: Overload:Microsoft.Health.HealthRecordItemCollection.IsFixedSize
  isExternal: false
  name: IsFixedSize
  nameWithType: HealthRecordItemCollection.IsFixedSize
  fullName: Microsoft.Health.HealthRecordItemCollection.IsFixedSize
- uid: System.Collections.IList.IsFixedSize
  commentId: P:System.Collections.IList.IsFixedSize
  parent: System.Collections.IList
  isExternal: true
  name: IsFixedSize
  nameWithType: IList.IsFixedSize
  fullName: System.Collections.IList.IsFixedSize
- uid: Microsoft.Health.HealthRecordItemCollection.GetEnumerator*
  commentId: Overload:Microsoft.Health.HealthRecordItemCollection.GetEnumerator
  isExternal: false
  name: GetEnumerator
  nameWithType: HealthRecordItemCollection.GetEnumerator
  fullName: Microsoft.Health.HealthRecordItemCollection.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{Microsoft.Health.HealthRecordItem}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{Microsoft.Health.HealthRecordItem}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{Microsoft.Health.HealthRecordItem}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<HealthRecordItem>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Health.HealthRecordItem>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of HealthRecordItem).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Health.HealthRecordItem).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<HealthRecordItem>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<Microsoft.Health.HealthRecordItem>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of HealthRecordItem).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of Microsoft.Health.HealthRecordItem).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{Microsoft.Health.HealthRecordItem}
  commentId: T:System.Collections.Generic.IEnumerator{Microsoft.Health.HealthRecordItem}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<HealthRecordItem>
  nameWithType: IEnumerator<HealthRecordItem>
  fullName: System.Collections.Generic.IEnumerator<Microsoft.Health.HealthRecordItem>
  nameWithType.vb: IEnumerator(Of HealthRecordItem)
  fullName.vb: System.Collections.Generic.IEnumerator(Of Microsoft.Health.HealthRecordItem)
  name.vb: IEnumerator(Of HealthRecordItem)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthRecordItemCollection.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:Microsoft.Health.HealthRecordItemCollection.System#Collections#IEnumerable#GetEnumerator
  isExternal: false
  name: IEnumerable.GetEnumerator
  nameWithType: HealthRecordItemCollection.IEnumerable.GetEnumerator
  fullName: Microsoft.Health.HealthRecordItemCollection.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: HealthRecordItemCollection.System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: Microsoft.Health.HealthRecordItemCollection.Sort*
  commentId: Overload:Microsoft.Health.HealthRecordItemCollection.Sort
  isExternal: false
  name: Sort
  nameWithType: HealthRecordItemCollection.Sort
  fullName: Microsoft.Health.HealthRecordItemCollection.Sort
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: System.Comparison{Microsoft.Health.HealthRecordItem}
  commentId: T:System.Comparison{Microsoft.Health.HealthRecordItem}
  parent: System
  definition: System.Comparison`1
  name: Comparison<HealthRecordItem>
  nameWithType: Comparison<HealthRecordItem>
  fullName: System.Comparison<Microsoft.Health.HealthRecordItem>
  nameWithType.vb: Comparison(Of HealthRecordItem)
  fullName.vb: System.Comparison(Of Microsoft.Health.HealthRecordItem)
  name.vb: Comparison(Of HealthRecordItem)
  spec.csharp:
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Comparison`1
  commentId: T:System.Comparison`1
  isExternal: true
  name: Comparison<T>
  nameWithType: Comparison<T>
  fullName: System.Comparison<T>
  nameWithType.vb: Comparison(Of T)
  fullName.vb: System.Comparison(Of T)
  name.vb: Comparison(Of T)
  spec.csharp:
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IComparer`1
  commentId: T:System.Collections.Generic.IComparer`1
  isExternal: true
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Comparer`1.Default
  commentId: P:System.Collections.Generic.Comparer`1.Default
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
- uid: System.Collections.Generic.IComparer{Microsoft.Health.HealthRecordItem}
  commentId: T:System.Collections.Generic.IComparer{Microsoft.Health.HealthRecordItem}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<HealthRecordItem>
  nameWithType: IComparer<HealthRecordItem>
  fullName: System.Collections.Generic.IComparer<Microsoft.Health.HealthRecordItem>
  nameWithType.vb: IComparer(Of HealthRecordItem)
  fullName.vb: System.Collections.Generic.IComparer(Of Microsoft.Health.HealthRecordItem)
  name.vb: IComparer(Of HealthRecordItem)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthRecordItemCollection.GetRange*
  commentId: Overload:Microsoft.Health.HealthRecordItemCollection.GetRange
  isExternal: false
  name: GetRange
  nameWithType: HealthRecordItemCollection.GetRange
  fullName: Microsoft.Health.HealthRecordItemCollection.GetRange
- uid: System.Collections.ObjectModel.Collection{Microsoft.Health.HealthRecordItem}
  commentId: T:System.Collections.ObjectModel.Collection{Microsoft.Health.HealthRecordItem}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.Collection`1
  name: Collection<HealthRecordItem>
  nameWithType: Collection<HealthRecordItem>
  fullName: System.Collections.ObjectModel.Collection<Microsoft.Health.HealthRecordItem>
  nameWithType.vb: Collection(Of HealthRecordItem)
  fullName.vb: System.Collections.ObjectModel.Collection(Of Microsoft.Health.HealthRecordItem)
  name.vb: Collection(Of HealthRecordItem)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.Collection`1
  commentId: T:System.Collections.ObjectModel.Collection`1
  isExternal: true
  name: Collection<T>
  nameWithType: Collection<T>
  fullName: System.Collections.ObjectModel.Collection<T>
  nameWithType.vb: Collection(Of T)
  fullName.vb: System.Collections.ObjectModel.Collection(Of T)
  name.vb: Collection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
