### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.InvertedIndex.SpellChecker
  commentId: T:Microsoft.Health.InvertedIndex.SpellChecker
  id: SpellChecker
  parent: Microsoft.Health.InvertedIndex
  children:
  - Microsoft.Health.InvertedIndex.SpellChecker.#ctor(System.Byte)
  - Microsoft.Health.InvertedIndex.SpellChecker.SpellCheck(System.String,System.Int32)
  - Microsoft.Health.InvertedIndex.SpellChecker.Words
  langs:
  - csharp
  - vb
  name: SpellChecker
  nameWithType: SpellChecker
  fullName: Microsoft.Health.InvertedIndex.SpellChecker
  type: Class
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/SpellChecker.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SpellChecker
    path: ../Microsoft.Health.Utility/search/InvertedIndex/SpellChecker.cs
    startLine: 10
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: 'public class SpellChecker : NgramIndex, ITrieIndex<char, IRecordPropertyList<byte>>, ISearchIndex<IEnumerable<char>, IRecordPropertyList<byte>>'
    content.vb: >-
      Public Class SpellChecker
          Inherits NgramIndex
          Implements ITrieIndex(Of Char, IRecordPropertyList(Of Byte)), ISearchIndex(Of IEnumerable(Of Char), IRecordPropertyList(Of Byte))
  inheritance:
  - System.Object
  - Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}
  - Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}
  - Microsoft.Health.InvertedIndex.NgramIndex
  implements:
  - Microsoft.Health.InvertedIndex.ITrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}
  - Microsoft.Health.InvertedIndex.ISearchIndex{System.Collections.Generic.IEnumerable{System.Char},Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}
  inheritedMembers:
  - Microsoft.Health.InvertedIndex.NgramIndex.NgramLength
  - Microsoft.Health.InvertedIndex.NgramIndex.WordNgramCounts
  - Microsoft.Health.InvertedIndex.NgramIndex.CreateQuery(Microsoft.Health.PhraseAnalyzer.NgramReader)
  - Microsoft.Health.InvertedIndex.NgramIndex.Search(Microsoft.Health.PhraseAnalyzer.NgramReader,System.Int32)
  - Microsoft.Health.InvertedIndex.NgramIndex.Search(System.String,System.Int32)
  - Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Item(System.Collections.Generic.IEnumerable{System.Char})
  - Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Item(System.Collections.Generic.IList{System.Char})
  - Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Item(System.Collections.Generic.IList{System.Char},System.Int32,System.Int32)
  - Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Resolve(System.Collections.Generic.IList{System.Char})
  - Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Resolve(System.Collections.Generic.IList{System.Char},System.Int32,System.Int32)
  - Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Resolve(System.Collections.Generic.IEnumerable{System.Char})
  - Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{System.Char}})
  - Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{System.Char}},System.Int32,System.Int32)
  - Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Resolve(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Char}})
  - Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{System.Char}},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  - Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{System.Char}},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  - Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.IgnoreDuplicates
  - Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.MaxLinearScanItemLength
  - Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.TryFind(System.Collections.Generic.IEnumerable{System.Char},Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}@)
  - Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.TryFind(System.Collections.Generic.IEnumerable{System.Char},Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}@,System.Int32@)
  - Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.TryFind(System.Collections.Generic.IList{System.Char},Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}@)
  - Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.TryFind(System.Collections.Generic.IList{System.Char},System.Int32,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}@)
  - Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.TryFind(System.Collections.Generic.IList{System.Char},System.Int32,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}@,System.Int32@)
  - Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.TryFind(System.Collections.Generic.IList{System.Char},System.Int32,System.Int32,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}@,System.Int32@)
  - Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.TryFindExact(System.Collections.Generic.IList{System.Char},System.Int32,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}@)
  - Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.GetChildren(System.Collections.Generic.IList{System.Char},System.Int32)
  - Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.GetChildren(System.Collections.Generic.IEnumerable{System.Char})
  - Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.GetAllValues
  - Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Add(System.Collections.Generic.IList{System.Char},Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte})
  - Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Add(System.Collections.Generic.IList{System.Char},System.Int32,System.Int32,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte})
  - Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Add(System.Collections.Generic.IEnumerable{System.Char},Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte})
  - Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Trim
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - Microsoft.Health.InvertedIndex.SpellChecker.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  - System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.InvertedIndex.SpellChecker.#ctor(System.Byte)
  commentId: M:Microsoft.Health.InvertedIndex.SpellChecker.#ctor(System.Byte)
  id: '#ctor(System.Byte)'
  parent: Microsoft.Health.InvertedIndex.SpellChecker
  langs:
  - csharp
  - vb
  name: SpellChecker(Byte)
  nameWithType: SpellChecker.SpellChecker(Byte)
  fullName: Microsoft.Health.InvertedIndex.SpellChecker.SpellChecker(System.Byte)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/SpellChecker.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health.Utility/search/InvertedIndex/SpellChecker.cs
    startLine: 18
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public SpellChecker(byte ngramLength)
    content.vb: Public Sub New(ngramLength As Byte)
    parameters:
    - id: ngramLength
      type: System.Byte
      description: ''
  overload: Microsoft.Health.InvertedIndex.SpellChecker.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.InvertedIndex.SpellChecker.Words
  commentId: P:Microsoft.Health.InvertedIndex.SpellChecker.Words
  id: Words
  parent: Microsoft.Health.InvertedIndex.SpellChecker
  langs:
  - csharp
  - vb
  name: Words
  nameWithType: SpellChecker.Words
  fullName: Microsoft.Health.InvertedIndex.SpellChecker.Words
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/SpellChecker.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Words
    path: ../Microsoft.Health.Utility/search/InvertedIndex/SpellChecker.cs
    startLine: 27
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public IList<string> Words { get; }
    content.vb: Public ReadOnly Property Words As IList(Of String)
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.String}
  overload: Microsoft.Health.InvertedIndex.SpellChecker.Words*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.InvertedIndex.SpellChecker.SpellCheck(System.String,System.Int32)
  commentId: M:Microsoft.Health.InvertedIndex.SpellChecker.SpellCheck(System.String,System.Int32)
  id: SpellCheck(System.String,System.Int32)
  parent: Microsoft.Health.InvertedIndex.SpellChecker
  langs:
  - csharp
  - vb
  name: SpellCheck(String, Int32)
  nameWithType: SpellChecker.SpellCheck(String, Int32)
  fullName: Microsoft.Health.InvertedIndex.SpellChecker.SpellCheck(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/SpellChecker.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SpellCheck
    path: ../Microsoft.Health.Utility/search/InvertedIndex/SpellChecker.cs
    startLine: 45
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public IEnumerable<Match<SpellCheckRank>> SpellCheck(string word, int maxResults)
    content.vb: Public Function SpellCheck(word As String, maxResults As Integer) As IEnumerable(Of Match(Of SpellCheckRank))
    parameters:
    - id: word
      type: System.String
      description: ''
    - id: maxResults
      type: System.Int32
      description: ''
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Health.InvertedIndex.Match{Microsoft.Health.InvertedIndex.SpellCheckRank}}
      description: ''
  overload: Microsoft.Health.InvertedIndex.SpellChecker.SpellCheck*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Health.InvertedIndex
  commentId: N:Microsoft.Health.InvertedIndex
  isExternal: false
  name: Microsoft.Health.InvertedIndex
  nameWithType: Microsoft.Health.InvertedIndex
  fullName: Microsoft.Health.InvertedIndex
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}
  commentId: T:Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}
  parent: Microsoft.Health.PhraseAnalyzer
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2
  name: Trie<Char, IRecordPropertyList<Byte>>
  nameWithType: Trie<Char, IRecordPropertyList<Byte>>
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>
  nameWithType.vb: Trie(Of Char, IRecordPropertyList(Of Byte))
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte))
  name.vb: Trie(Of Char, IRecordPropertyList(Of Byte))
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2
    name: Trie
    nameWithType: Trie
    fullName: Microsoft.Health.PhraseAnalyzer.Trie
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.InvertedIndex.IRecordPropertyList`1
    name: IRecordPropertyList
    nameWithType: IRecordPropertyList
    fullName: Microsoft.Health.InvertedIndex.IRecordPropertyList
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2
    name: Trie
    nameWithType: Trie
    fullName: Microsoft.Health.PhraseAnalyzer.Trie
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.InvertedIndex.IRecordPropertyList`1
    name: IRecordPropertyList
    nameWithType: IRecordPropertyList
    fullName: Microsoft.Health.InvertedIndex.IRecordPropertyList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}
  commentId: T:Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}
  parent: Microsoft.Health.InvertedIndex
  definition: Microsoft.Health.InvertedIndex.TrieIndex`2
  name: TrieIndex<Char, IRecordPropertyList<Byte>>
  nameWithType: TrieIndex<Char, IRecordPropertyList<Byte>>
  fullName: Microsoft.Health.InvertedIndex.TrieIndex<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>
  nameWithType.vb: TrieIndex(Of Char, IRecordPropertyList(Of Byte))
  fullName.vb: Microsoft.Health.InvertedIndex.TrieIndex(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte))
  name.vb: TrieIndex(Of Char, IRecordPropertyList(Of Byte))
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2
    name: TrieIndex
    nameWithType: TrieIndex
    fullName: Microsoft.Health.InvertedIndex.TrieIndex
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.InvertedIndex.IRecordPropertyList`1
    name: IRecordPropertyList
    nameWithType: IRecordPropertyList
    fullName: Microsoft.Health.InvertedIndex.IRecordPropertyList
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2
    name: TrieIndex
    nameWithType: TrieIndex
    fullName: Microsoft.Health.InvertedIndex.TrieIndex
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.InvertedIndex.IRecordPropertyList`1
    name: IRecordPropertyList
    nameWithType: IRecordPropertyList
    fullName: Microsoft.Health.InvertedIndex.IRecordPropertyList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.NgramIndex
  commentId: T:Microsoft.Health.InvertedIndex.NgramIndex
  parent: Microsoft.Health.InvertedIndex
  isExternal: false
  name: NgramIndex
  nameWithType: NgramIndex
  fullName: Microsoft.Health.InvertedIndex.NgramIndex
- uid: Microsoft.Health.InvertedIndex.ITrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}
  commentId: T:Microsoft.Health.InvertedIndex.ITrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}
  parent: Microsoft.Health.InvertedIndex
  definition: Microsoft.Health.InvertedIndex.ITrieIndex`2
  name: ITrieIndex<Char, IRecordPropertyList<Byte>>
  nameWithType: ITrieIndex<Char, IRecordPropertyList<Byte>>
  fullName: Microsoft.Health.InvertedIndex.ITrieIndex<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>
  nameWithType.vb: ITrieIndex(Of Char, IRecordPropertyList(Of Byte))
  fullName.vb: Microsoft.Health.InvertedIndex.ITrieIndex(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte))
  name.vb: ITrieIndex(Of Char, IRecordPropertyList(Of Byte))
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ITrieIndex`2
    name: ITrieIndex
    nameWithType: ITrieIndex
    fullName: Microsoft.Health.InvertedIndex.ITrieIndex
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.InvertedIndex.IRecordPropertyList`1
    name: IRecordPropertyList
    nameWithType: IRecordPropertyList
    fullName: Microsoft.Health.InvertedIndex.IRecordPropertyList
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ITrieIndex`2
    name: ITrieIndex
    nameWithType: ITrieIndex
    fullName: Microsoft.Health.InvertedIndex.ITrieIndex
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.InvertedIndex.IRecordPropertyList`1
    name: IRecordPropertyList
    nameWithType: IRecordPropertyList
    fullName: Microsoft.Health.InvertedIndex.IRecordPropertyList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.ISearchIndex{System.Collections.Generic.IEnumerable{System.Char},Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}
  commentId: T:Microsoft.Health.InvertedIndex.ISearchIndex{System.Collections.Generic.IEnumerable{System.Char},Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}
  parent: Microsoft.Health.InvertedIndex
  definition: Microsoft.Health.InvertedIndex.ISearchIndex`2
  name: ISearchIndex<IEnumerable<Char>, IRecordPropertyList<Byte>>
  nameWithType: ISearchIndex<IEnumerable<Char>, IRecordPropertyList<Byte>>
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<System.Collections.Generic.IEnumerable<System.Char>, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>
  nameWithType.vb: ISearchIndex(Of IEnumerable(Of Char), IRecordPropertyList(Of Byte))
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of System.Collections.Generic.IEnumerable(Of System.Char), Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte))
  name.vb: ISearchIndex(Of IEnumerable(Of Char), IRecordPropertyList(Of Byte))
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2
    name: ISearchIndex
    nameWithType: ISearchIndex
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.InvertedIndex.IRecordPropertyList`1
    name: IRecordPropertyList
    nameWithType: IRecordPropertyList
    fullName: Microsoft.Health.InvertedIndex.IRecordPropertyList
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2
    name: ISearchIndex
    nameWithType: ISearchIndex
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.InvertedIndex.IRecordPropertyList`1
    name: IRecordPropertyList
    nameWithType: IRecordPropertyList
    fullName: Microsoft.Health.InvertedIndex.IRecordPropertyList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.NgramIndex.NgramLength
  commentId: P:Microsoft.Health.InvertedIndex.NgramIndex.NgramLength
  parent: Microsoft.Health.InvertedIndex.NgramIndex
  isExternal: false
  name: NgramLength
  nameWithType: NgramIndex.NgramLength
  fullName: Microsoft.Health.InvertedIndex.NgramIndex.NgramLength
- uid: Microsoft.Health.InvertedIndex.NgramIndex.WordNgramCounts
  commentId: P:Microsoft.Health.InvertedIndex.NgramIndex.WordNgramCounts
  parent: Microsoft.Health.InvertedIndex.NgramIndex
  isExternal: false
  name: WordNgramCounts
  nameWithType: NgramIndex.WordNgramCounts
  fullName: Microsoft.Health.InvertedIndex.NgramIndex.WordNgramCounts
- uid: Microsoft.Health.InvertedIndex.NgramIndex.CreateQuery(Microsoft.Health.PhraseAnalyzer.NgramReader)
  commentId: M:Microsoft.Health.InvertedIndex.NgramIndex.CreateQuery(Microsoft.Health.PhraseAnalyzer.NgramReader)
  parent: Microsoft.Health.InvertedIndex.NgramIndex
  isExternal: false
  name: CreateQuery(NgramReader)
  nameWithType: NgramIndex.CreateQuery(NgramReader)
  fullName: Microsoft.Health.InvertedIndex.NgramIndex.CreateQuery(Microsoft.Health.PhraseAnalyzer.NgramReader)
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.NgramIndex.CreateQuery(Microsoft.Health.PhraseAnalyzer.NgramReader)
    name: CreateQuery
    nameWithType: NgramIndex.CreateQuery
    fullName: Microsoft.Health.InvertedIndex.NgramIndex.CreateQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.PhraseAnalyzer.NgramReader
    name: NgramReader
    nameWithType: NgramReader
    fullName: Microsoft.Health.PhraseAnalyzer.NgramReader
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.NgramIndex.CreateQuery(Microsoft.Health.PhraseAnalyzer.NgramReader)
    name: CreateQuery
    nameWithType: NgramIndex.CreateQuery
    fullName: Microsoft.Health.InvertedIndex.NgramIndex.CreateQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.PhraseAnalyzer.NgramReader
    name: NgramReader
    nameWithType: NgramReader
    fullName: Microsoft.Health.PhraseAnalyzer.NgramReader
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.NgramIndex.Search(Microsoft.Health.PhraseAnalyzer.NgramReader,System.Int32)
  commentId: M:Microsoft.Health.InvertedIndex.NgramIndex.Search(Microsoft.Health.PhraseAnalyzer.NgramReader,System.Int32)
  parent: Microsoft.Health.InvertedIndex.NgramIndex
  isExternal: true
  name: Search(NgramReader, Int32)
  nameWithType: NgramIndex.Search(NgramReader, Int32)
  fullName: Microsoft.Health.InvertedIndex.NgramIndex.Search(Microsoft.Health.PhraseAnalyzer.NgramReader, System.Int32)
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.NgramIndex.Search(Microsoft.Health.PhraseAnalyzer.NgramReader,System.Int32)
    name: Search
    nameWithType: NgramIndex.Search
    fullName: Microsoft.Health.InvertedIndex.NgramIndex.Search
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.PhraseAnalyzer.NgramReader
    name: NgramReader
    nameWithType: NgramReader
    fullName: Microsoft.Health.PhraseAnalyzer.NgramReader
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.NgramIndex.Search(Microsoft.Health.PhraseAnalyzer.NgramReader,System.Int32)
    name: Search
    nameWithType: NgramIndex.Search
    fullName: Microsoft.Health.InvertedIndex.NgramIndex.Search
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.PhraseAnalyzer.NgramReader
    name: NgramReader
    nameWithType: NgramReader
    fullName: Microsoft.Health.PhraseAnalyzer.NgramReader
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.NgramIndex.Search(System.String,System.Int32)
  commentId: M:Microsoft.Health.InvertedIndex.NgramIndex.Search(System.String,System.Int32)
  parent: Microsoft.Health.InvertedIndex.NgramIndex
  isExternal: true
  name: Search(String, Int32)
  nameWithType: NgramIndex.Search(String, Int32)
  fullName: Microsoft.Health.InvertedIndex.NgramIndex.Search(System.String, System.Int32)
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.NgramIndex.Search(System.String,System.Int32)
    name: Search
    nameWithType: NgramIndex.Search
    fullName: Microsoft.Health.InvertedIndex.NgramIndex.Search
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.NgramIndex.Search(System.String,System.Int32)
    name: Search
    nameWithType: NgramIndex.Search
    fullName: Microsoft.Health.InvertedIndex.NgramIndex.Search
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Item(System.Collections.Generic.IEnumerable{System.Char})
  commentId: P:Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Item(System.Collections.Generic.IEnumerable{System.Char})
  parent: Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}
  definition: Microsoft.Health.InvertedIndex.TrieIndex`2.Item(System.Collections.Generic.IEnumerable{`0})
  name: Item[IEnumerable<Char>]
  nameWithType: TrieIndex<Char, IRecordPropertyList<Byte>>.Item[IEnumerable<Char>]
  fullName: Microsoft.Health.InvertedIndex.TrieIndex<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.Item[System.Collections.Generic.IEnumerable<System.Char>]
  nameWithType.vb: TrieIndex(Of Char, IRecordPropertyList(Of Byte)).Item(IEnumerable(Of Char))
  fullName.vb: Microsoft.Health.InvertedIndex.TrieIndex(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).Item(System.Collections.Generic.IEnumerable(Of System.Char))
  name.vb: Item(IEnumerable(Of Char))
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Item(System.Collections.Generic.IEnumerable{`0})
    name: Item
    nameWithType: TrieIndex<Char, IRecordPropertyList<Byte>>.Item
    fullName: Microsoft.Health.InvertedIndex.TrieIndex<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Item(System.Collections.Generic.IEnumerable{`0})
    name: Item
    nameWithType: TrieIndex(Of Char, IRecordPropertyList(Of Byte)).Item
    fullName: Microsoft.Health.InvertedIndex.TrieIndex(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Item(System.Collections.Generic.IList{System.Char})
  commentId: P:Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Item(System.Collections.Generic.IList{System.Char})
  parent: Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}
  definition: Microsoft.Health.InvertedIndex.TrieIndex`2.Item(System.Collections.Generic.IList{`0})
  name: Item[IList<Char>]
  nameWithType: TrieIndex<Char, IRecordPropertyList<Byte>>.Item[IList<Char>]
  fullName: Microsoft.Health.InvertedIndex.TrieIndex<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.Item[System.Collections.Generic.IList<System.Char>]
  nameWithType.vb: TrieIndex(Of Char, IRecordPropertyList(Of Byte)).Item(IList(Of Char))
  fullName.vb: Microsoft.Health.InvertedIndex.TrieIndex(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).Item(System.Collections.Generic.IList(Of System.Char))
  name.vb: Item(IList(Of Char))
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Item(System.Collections.Generic.IList{`0})
    name: Item
    nameWithType: TrieIndex<Char, IRecordPropertyList<Byte>>.Item
    fullName: Microsoft.Health.InvertedIndex.TrieIndex<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Item(System.Collections.Generic.IList{`0})
    name: Item
    nameWithType: TrieIndex(Of Char, IRecordPropertyList(Of Byte)).Item
    fullName: Microsoft.Health.InvertedIndex.TrieIndex(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Item(System.Collections.Generic.IList{System.Char},System.Int32,System.Int32)
  commentId: P:Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Item(System.Collections.Generic.IList{System.Char},System.Int32,System.Int32)
  parent: Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}
  definition: Microsoft.Health.InvertedIndex.TrieIndex`2.Item(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
  name: Item[IList<Char>, Int32, Int32]
  nameWithType: TrieIndex<Char, IRecordPropertyList<Byte>>.Item[IList<Char>, Int32, Int32]
  fullName: Microsoft.Health.InvertedIndex.TrieIndex<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.Item[System.Collections.Generic.IList<System.Char>, System.Int32, System.Int32]
  nameWithType.vb: TrieIndex(Of Char, IRecordPropertyList(Of Byte)).Item(IList(Of Char), Int32, Int32)
  fullName.vb: Microsoft.Health.InvertedIndex.TrieIndex(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).Item(System.Collections.Generic.IList(Of System.Char), System.Int32, System.Int32)
  name.vb: Item(IList(Of Char), Int32, Int32)
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Item(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
    name: Item
    nameWithType: TrieIndex<Char, IRecordPropertyList<Byte>>.Item
    fullName: Microsoft.Health.InvertedIndex.TrieIndex<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Item(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
    name: Item
    nameWithType: TrieIndex(Of Char, IRecordPropertyList(Of Byte)).Item
    fullName: Microsoft.Health.InvertedIndex.TrieIndex(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Resolve(System.Collections.Generic.IList{System.Char})
  commentId: M:Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Resolve(System.Collections.Generic.IList{System.Char})
  parent: Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}
  definition: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{`0})
  name: Resolve(IList<Char>)
  nameWithType: TrieIndex<Char, IRecordPropertyList<Byte>>.Resolve(IList<Char>)
  fullName: Microsoft.Health.InvertedIndex.TrieIndex<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.Resolve(System.Collections.Generic.IList<System.Char>)
  nameWithType.vb: TrieIndex(Of Char, IRecordPropertyList(Of Byte)).Resolve(IList(Of Char))
  fullName.vb: Microsoft.Health.InvertedIndex.TrieIndex(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).Resolve(System.Collections.Generic.IList(Of System.Char))
  name.vb: Resolve(IList(Of Char))
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{`0})
    name: Resolve
    nameWithType: TrieIndex<Char, IRecordPropertyList<Byte>>.Resolve
    fullName: Microsoft.Health.InvertedIndex.TrieIndex<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{`0})
    name: Resolve
    nameWithType: TrieIndex(Of Char, IRecordPropertyList(Of Byte)).Resolve
    fullName: Microsoft.Health.InvertedIndex.TrieIndex(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Resolve(System.Collections.Generic.IList{System.Char},System.Int32,System.Int32)
  commentId: M:Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Resolve(System.Collections.Generic.IList{System.Char},System.Int32,System.Int32)
  parent: Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}
  definition: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
  name: Resolve(IList<Char>, Int32, Int32)
  nameWithType: TrieIndex<Char, IRecordPropertyList<Byte>>.Resolve(IList<Char>, Int32, Int32)
  fullName: Microsoft.Health.InvertedIndex.TrieIndex<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.Resolve(System.Collections.Generic.IList<System.Char>, System.Int32, System.Int32)
  nameWithType.vb: TrieIndex(Of Char, IRecordPropertyList(Of Byte)).Resolve(IList(Of Char), Int32, Int32)
  fullName.vb: Microsoft.Health.InvertedIndex.TrieIndex(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).Resolve(System.Collections.Generic.IList(Of System.Char), System.Int32, System.Int32)
  name.vb: Resolve(IList(Of Char), Int32, Int32)
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
    name: Resolve
    nameWithType: TrieIndex<Char, IRecordPropertyList<Byte>>.Resolve
    fullName: Microsoft.Health.InvertedIndex.TrieIndex<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
    name: Resolve
    nameWithType: TrieIndex(Of Char, IRecordPropertyList(Of Byte)).Resolve
    fullName: Microsoft.Health.InvertedIndex.TrieIndex(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Resolve(System.Collections.Generic.IEnumerable{System.Char})
  commentId: M:Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Resolve(System.Collections.Generic.IEnumerable{System.Char})
  parent: Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}
  definition: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IEnumerable{`0})
  name: Resolve(IEnumerable<Char>)
  nameWithType: TrieIndex<Char, IRecordPropertyList<Byte>>.Resolve(IEnumerable<Char>)
  fullName: Microsoft.Health.InvertedIndex.TrieIndex<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.Resolve(System.Collections.Generic.IEnumerable<System.Char>)
  nameWithType.vb: TrieIndex(Of Char, IRecordPropertyList(Of Byte)).Resolve(IEnumerable(Of Char))
  fullName.vb: Microsoft.Health.InvertedIndex.TrieIndex(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).Resolve(System.Collections.Generic.IEnumerable(Of System.Char))
  name.vb: Resolve(IEnumerable(Of Char))
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IEnumerable{`0})
    name: Resolve
    nameWithType: TrieIndex<Char, IRecordPropertyList<Byte>>.Resolve
    fullName: Microsoft.Health.InvertedIndex.TrieIndex<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IEnumerable{`0})
    name: Resolve
    nameWithType: TrieIndex(Of Char, IRecordPropertyList(Of Byte)).Resolve
    fullName: Microsoft.Health.InvertedIndex.TrieIndex(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{System.Char}})
  commentId: M:Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{System.Char}})
  parent: Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}
  definition: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}})
  name: Resolve(IList<IEnumerable<Char>>)
  nameWithType: TrieIndex<Char, IRecordPropertyList<Byte>>.Resolve(IList<IEnumerable<Char>>)
  fullName: Microsoft.Health.InvertedIndex.TrieIndex<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.Resolve(System.Collections.Generic.IList<System.Collections.Generic.IEnumerable<System.Char>>)
  nameWithType.vb: TrieIndex(Of Char, IRecordPropertyList(Of Byte)).Resolve(IList(Of IEnumerable(Of Char)))
  fullName.vb: Microsoft.Health.InvertedIndex.TrieIndex(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).Resolve(System.Collections.Generic.IList(Of System.Collections.Generic.IEnumerable(Of System.Char)))
  name.vb: Resolve(IList(Of IEnumerable(Of Char)))
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}})
    name: Resolve
    nameWithType: TrieIndex<Char, IRecordPropertyList<Byte>>.Resolve
    fullName: Microsoft.Health.InvertedIndex.TrieIndex<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}})
    name: Resolve
    nameWithType: TrieIndex(Of Char, IRecordPropertyList(Of Byte)).Resolve
    fullName: Microsoft.Health.InvertedIndex.TrieIndex(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{System.Char}},System.Int32,System.Int32)
  commentId: M:Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{System.Char}},System.Int32,System.Int32)
  parent: Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}
  definition: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}},System.Int32,System.Int32)
  name: Resolve(IList<IEnumerable<Char>>, Int32, Int32)
  nameWithType: TrieIndex<Char, IRecordPropertyList<Byte>>.Resolve(IList<IEnumerable<Char>>, Int32, Int32)
  fullName: Microsoft.Health.InvertedIndex.TrieIndex<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.Resolve(System.Collections.Generic.IList<System.Collections.Generic.IEnumerable<System.Char>>, System.Int32, System.Int32)
  nameWithType.vb: TrieIndex(Of Char, IRecordPropertyList(Of Byte)).Resolve(IList(Of IEnumerable(Of Char)), Int32, Int32)
  fullName.vb: Microsoft.Health.InvertedIndex.TrieIndex(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).Resolve(System.Collections.Generic.IList(Of System.Collections.Generic.IEnumerable(Of System.Char)), System.Int32, System.Int32)
  name.vb: Resolve(IList(Of IEnumerable(Of Char)), Int32, Int32)
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}},System.Int32,System.Int32)
    name: Resolve
    nameWithType: TrieIndex<Char, IRecordPropertyList<Byte>>.Resolve
    fullName: Microsoft.Health.InvertedIndex.TrieIndex<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}},System.Int32,System.Int32)
    name: Resolve
    nameWithType: TrieIndex(Of Char, IRecordPropertyList(Of Byte)).Resolve
    fullName: Microsoft.Health.InvertedIndex.TrieIndex(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Resolve(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Char}})
  commentId: M:Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Resolve(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Char}})
  parent: Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}
  definition: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{`0}})
  name: Resolve(IEnumerable<IEnumerable<Char>>)
  nameWithType: TrieIndex<Char, IRecordPropertyList<Byte>>.Resolve(IEnumerable<IEnumerable<Char>>)
  fullName: Microsoft.Health.InvertedIndex.TrieIndex<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.Resolve(System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<System.Char>>)
  nameWithType.vb: TrieIndex(Of Char, IRecordPropertyList(Of Byte)).Resolve(IEnumerable(Of IEnumerable(Of Char)))
  fullName.vb: Microsoft.Health.InvertedIndex.TrieIndex(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).Resolve(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IEnumerable(Of System.Char)))
  name.vb: Resolve(IEnumerable(Of IEnumerable(Of Char)))
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{`0}})
    name: Resolve
    nameWithType: TrieIndex<Char, IRecordPropertyList<Byte>>.Resolve
    fullName: Microsoft.Health.InvertedIndex.TrieIndex<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{`0}})
    name: Resolve
    nameWithType: TrieIndex(Of Char, IRecordPropertyList(Of Byte)).Resolve
    fullName: Microsoft.Health.InvertedIndex.TrieIndex(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{System.Char}},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  commentId: M:Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{System.Char}},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  parent: Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}
  definition: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  name: Resolve(IList<IEnumerable<Char>>, StructList<RecordIDEnumerator>)
  nameWithType: TrieIndex<Char, IRecordPropertyList<Byte>>.Resolve(IList<IEnumerable<Char>>, StructList<RecordIDEnumerator>)
  fullName: Microsoft.Health.InvertedIndex.TrieIndex<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.Resolve(System.Collections.Generic.IList<System.Collections.Generic.IEnumerable<System.Char>>, Microsoft.Health.StructList<Microsoft.Health.InvertedIndex.RecordIDEnumerator>)
  nameWithType.vb: TrieIndex(Of Char, IRecordPropertyList(Of Byte)).Resolve(IList(Of IEnumerable(Of Char)), StructList(Of RecordIDEnumerator))
  fullName.vb: Microsoft.Health.InvertedIndex.TrieIndex(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).Resolve(System.Collections.Generic.IList(Of System.Collections.Generic.IEnumerable(Of System.Char)), Microsoft.Health.StructList(Of Microsoft.Health.InvertedIndex.RecordIDEnumerator))
  name.vb: Resolve(IList(Of IEnumerable(Of Char)), StructList(Of RecordIDEnumerator))
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
    name: Resolve
    nameWithType: TrieIndex<Char, IRecordPropertyList<Byte>>.Resolve
    fullName: Microsoft.Health.InvertedIndex.TrieIndex<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.StructList`1
    name: StructList
    nameWithType: StructList
    fullName: Microsoft.Health.StructList
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
    name: Resolve
    nameWithType: TrieIndex(Of Char, IRecordPropertyList(Of Byte)).Resolve
    fullName: Microsoft.Health.InvertedIndex.TrieIndex(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.StructList`1
    name: StructList
    nameWithType: StructList
    fullName: Microsoft.Health.StructList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{System.Char}},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  commentId: M:Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{System.Char}},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  parent: Microsoft.Health.InvertedIndex.TrieIndex{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}
  definition: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  name: Resolve(IList<IEnumerable<Char>>, Int32, Int32, StructList<RecordIDEnumerator>)
  nameWithType: TrieIndex<Char, IRecordPropertyList<Byte>>.Resolve(IList<IEnumerable<Char>>, Int32, Int32, StructList<RecordIDEnumerator>)
  fullName: Microsoft.Health.InvertedIndex.TrieIndex<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.Resolve(System.Collections.Generic.IList<System.Collections.Generic.IEnumerable<System.Char>>, System.Int32, System.Int32, Microsoft.Health.StructList<Microsoft.Health.InvertedIndex.RecordIDEnumerator>)
  nameWithType.vb: TrieIndex(Of Char, IRecordPropertyList(Of Byte)).Resolve(IList(Of IEnumerable(Of Char)), Int32, Int32, StructList(Of RecordIDEnumerator))
  fullName.vb: Microsoft.Health.InvertedIndex.TrieIndex(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).Resolve(System.Collections.Generic.IList(Of System.Collections.Generic.IEnumerable(Of System.Char)), System.Int32, System.Int32, Microsoft.Health.StructList(Of Microsoft.Health.InvertedIndex.RecordIDEnumerator))
  name.vb: Resolve(IList(Of IEnumerable(Of Char)), Int32, Int32, StructList(Of RecordIDEnumerator))
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
    name: Resolve
    nameWithType: TrieIndex<Char, IRecordPropertyList<Byte>>.Resolve
    fullName: Microsoft.Health.InvertedIndex.TrieIndex<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.StructList`1
    name: StructList
    nameWithType: StructList
    fullName: Microsoft.Health.StructList
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
    name: Resolve
    nameWithType: TrieIndex(Of Char, IRecordPropertyList(Of Byte)).Resolve
    fullName: Microsoft.Health.InvertedIndex.TrieIndex(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.StructList`1
    name: StructList
    nameWithType: StructList
    fullName: Microsoft.Health.StructList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.IgnoreDuplicates
  commentId: P:Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.IgnoreDuplicates
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.IgnoreDuplicates
  name: IgnoreDuplicates
  nameWithType: Trie<Char, IRecordPropertyList<Byte>>.IgnoreDuplicates
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.IgnoreDuplicates
  nameWithType.vb: Trie(Of Char, IRecordPropertyList(Of Byte)).IgnoreDuplicates
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).IgnoreDuplicates
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.MaxLinearScanItemLength
  commentId: P:Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.MaxLinearScanItemLength
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.MaxLinearScanItemLength
  name: MaxLinearScanItemLength
  nameWithType: Trie<Char, IRecordPropertyList<Byte>>.MaxLinearScanItemLength
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.MaxLinearScanItemLength
  nameWithType.vb: Trie(Of Char, IRecordPropertyList(Of Byte)).MaxLinearScanItemLength
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).MaxLinearScanItemLength
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.TryFind(System.Collections.Generic.IEnumerable{System.Char},Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.TryFind(System.Collections.Generic.IEnumerable{System.Char},Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}@)
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@)
  name: TryFind(IEnumerable<Char>, IRecordPropertyList<Byte>)
  nameWithType: Trie<Char, IRecordPropertyList<Byte>>.TryFind(IEnumerable<Char>, IRecordPropertyList<Byte>)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.TryFind(System.Collections.Generic.IEnumerable<System.Char>, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>)
  nameWithType.vb: Trie(Of Char, IRecordPropertyList(Of Byte)).TryFind(IEnumerable(Of Char), IRecordPropertyList(Of Byte))
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).TryFind(System.Collections.Generic.IEnumerable(Of System.Char), Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte))
  name.vb: TryFind(IEnumerable(Of Char), IRecordPropertyList(Of Byte))
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@)
    name: TryFind
    nameWithType: Trie<Char, IRecordPropertyList<Byte>>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.InvertedIndex.IRecordPropertyList`1
    name: IRecordPropertyList
    nameWithType: IRecordPropertyList
    fullName: Microsoft.Health.InvertedIndex.IRecordPropertyList
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@)
    name: TryFind
    nameWithType: Trie(Of Char, IRecordPropertyList(Of Byte)).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.InvertedIndex.IRecordPropertyList`1
    name: IRecordPropertyList
    nameWithType: IRecordPropertyList
    fullName: Microsoft.Health.InvertedIndex.IRecordPropertyList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.TryFind(System.Collections.Generic.IEnumerable{System.Char},Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}@,System.Int32@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.TryFind(System.Collections.Generic.IEnumerable{System.Char},Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}@,System.Int32@)
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@,System.Int32@)
  name: TryFind(IEnumerable<Char>, IRecordPropertyList<Byte>, Int32)
  nameWithType: Trie<Char, IRecordPropertyList<Byte>>.TryFind(IEnumerable<Char>, IRecordPropertyList<Byte>, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.TryFind(System.Collections.Generic.IEnumerable<System.Char>, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>, System.Int32)
  nameWithType.vb: Trie(Of Char, IRecordPropertyList(Of Byte)).TryFind(IEnumerable(Of Char), IRecordPropertyList(Of Byte), Int32)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).TryFind(System.Collections.Generic.IEnumerable(Of System.Char), Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte), System.Int32)
  name.vb: TryFind(IEnumerable(Of Char), IRecordPropertyList(Of Byte), Int32)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie<Char, IRecordPropertyList<Byte>>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.InvertedIndex.IRecordPropertyList`1
    name: IRecordPropertyList
    nameWithType: IRecordPropertyList
    fullName: Microsoft.Health.InvertedIndex.IRecordPropertyList
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie(Of Char, IRecordPropertyList(Of Byte)).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.InvertedIndex.IRecordPropertyList`1
    name: IRecordPropertyList
    nameWithType: IRecordPropertyList
    fullName: Microsoft.Health.InvertedIndex.IRecordPropertyList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.TryFind(System.Collections.Generic.IList{System.Char},Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.TryFind(System.Collections.Generic.IList{System.Char},Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}@)
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},`1@)
  name: TryFind(IList<Char>, IRecordPropertyList<Byte>)
  nameWithType: Trie<Char, IRecordPropertyList<Byte>>.TryFind(IList<Char>, IRecordPropertyList<Byte>)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.TryFind(System.Collections.Generic.IList<System.Char>, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>)
  nameWithType.vb: Trie(Of Char, IRecordPropertyList(Of Byte)).TryFind(IList(Of Char), IRecordPropertyList(Of Byte))
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).TryFind(System.Collections.Generic.IList(Of System.Char), Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte))
  name.vb: TryFind(IList(Of Char), IRecordPropertyList(Of Byte))
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},`1@)
    name: TryFind
    nameWithType: Trie<Char, IRecordPropertyList<Byte>>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.InvertedIndex.IRecordPropertyList`1
    name: IRecordPropertyList
    nameWithType: IRecordPropertyList
    fullName: Microsoft.Health.InvertedIndex.IRecordPropertyList
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},`1@)
    name: TryFind
    nameWithType: Trie(Of Char, IRecordPropertyList(Of Byte)).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.InvertedIndex.IRecordPropertyList`1
    name: IRecordPropertyList
    nameWithType: IRecordPropertyList
    fullName: Microsoft.Health.InvertedIndex.IRecordPropertyList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.TryFind(System.Collections.Generic.IList{System.Char},System.Int32,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.TryFind(System.Collections.Generic.IList{System.Char},System.Int32,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}@)
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@)
  name: TryFind(IList<Char>, Int32, IRecordPropertyList<Byte>)
  nameWithType: Trie<Char, IRecordPropertyList<Byte>>.TryFind(IList<Char>, Int32, IRecordPropertyList<Byte>)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.TryFind(System.Collections.Generic.IList<System.Char>, System.Int32, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>)
  nameWithType.vb: Trie(Of Char, IRecordPropertyList(Of Byte)).TryFind(IList(Of Char), Int32, IRecordPropertyList(Of Byte))
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).TryFind(System.Collections.Generic.IList(Of System.Char), System.Int32, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte))
  name.vb: TryFind(IList(Of Char), Int32, IRecordPropertyList(Of Byte))
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@)
    name: TryFind
    nameWithType: Trie<Char, IRecordPropertyList<Byte>>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.InvertedIndex.IRecordPropertyList`1
    name: IRecordPropertyList
    nameWithType: IRecordPropertyList
    fullName: Microsoft.Health.InvertedIndex.IRecordPropertyList
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@)
    name: TryFind
    nameWithType: Trie(Of Char, IRecordPropertyList(Of Byte)).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.InvertedIndex.IRecordPropertyList`1
    name: IRecordPropertyList
    nameWithType: IRecordPropertyList
    fullName: Microsoft.Health.InvertedIndex.IRecordPropertyList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.TryFind(System.Collections.Generic.IList{System.Char},System.Int32,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}@,System.Int32@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.TryFind(System.Collections.Generic.IList{System.Char},System.Int32,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}@,System.Int32@)
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@,System.Int32@)
  name: TryFind(IList<Char>, Int32, IRecordPropertyList<Byte>, Int32)
  nameWithType: Trie<Char, IRecordPropertyList<Byte>>.TryFind(IList<Char>, Int32, IRecordPropertyList<Byte>, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.TryFind(System.Collections.Generic.IList<System.Char>, System.Int32, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>, System.Int32)
  nameWithType.vb: Trie(Of Char, IRecordPropertyList(Of Byte)).TryFind(IList(Of Char), Int32, IRecordPropertyList(Of Byte), Int32)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).TryFind(System.Collections.Generic.IList(Of System.Char), System.Int32, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte), System.Int32)
  name.vb: TryFind(IList(Of Char), Int32, IRecordPropertyList(Of Byte), Int32)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie<Char, IRecordPropertyList<Byte>>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.InvertedIndex.IRecordPropertyList`1
    name: IRecordPropertyList
    nameWithType: IRecordPropertyList
    fullName: Microsoft.Health.InvertedIndex.IRecordPropertyList
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie(Of Char, IRecordPropertyList(Of Byte)).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.InvertedIndex.IRecordPropertyList`1
    name: IRecordPropertyList
    nameWithType: IRecordPropertyList
    fullName: Microsoft.Health.InvertedIndex.IRecordPropertyList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.TryFind(System.Collections.Generic.IList{System.Char},System.Int32,System.Int32,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}@,System.Int32@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.TryFind(System.Collections.Generic.IList{System.Char},System.Int32,System.Int32,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}@,System.Int32@)
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1@,System.Int32@)
  name: TryFind(IList<Char>, Int32, Int32, IRecordPropertyList<Byte>, Int32)
  nameWithType: Trie<Char, IRecordPropertyList<Byte>>.TryFind(IList<Char>, Int32, Int32, IRecordPropertyList<Byte>, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.TryFind(System.Collections.Generic.IList<System.Char>, System.Int32, System.Int32, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>, System.Int32)
  nameWithType.vb: Trie(Of Char, IRecordPropertyList(Of Byte)).TryFind(IList(Of Char), Int32, Int32, IRecordPropertyList(Of Byte), Int32)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).TryFind(System.Collections.Generic.IList(Of System.Char), System.Int32, System.Int32, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte), System.Int32)
  name.vb: TryFind(IList(Of Char), Int32, Int32, IRecordPropertyList(Of Byte), Int32)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie<Char, IRecordPropertyList<Byte>>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.InvertedIndex.IRecordPropertyList`1
    name: IRecordPropertyList
    nameWithType: IRecordPropertyList
    fullName: Microsoft.Health.InvertedIndex.IRecordPropertyList
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie(Of Char, IRecordPropertyList(Of Byte)).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.InvertedIndex.IRecordPropertyList`1
    name: IRecordPropertyList
    nameWithType: IRecordPropertyList
    fullName: Microsoft.Health.InvertedIndex.IRecordPropertyList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.TryFindExact(System.Collections.Generic.IList{System.Char},System.Int32,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.TryFindExact(System.Collections.Generic.IList{System.Char},System.Int32,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}@)
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFindExact(System.Collections.Generic.IList{`0},System.Int32,`1@)
  name: TryFindExact(IList<Char>, Int32, IRecordPropertyList<Byte>)
  nameWithType: Trie<Char, IRecordPropertyList<Byte>>.TryFindExact(IList<Char>, Int32, IRecordPropertyList<Byte>)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.TryFindExact(System.Collections.Generic.IList<System.Char>, System.Int32, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>)
  nameWithType.vb: Trie(Of Char, IRecordPropertyList(Of Byte)).TryFindExact(IList(Of Char), Int32, IRecordPropertyList(Of Byte))
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).TryFindExact(System.Collections.Generic.IList(Of System.Char), System.Int32, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte))
  name.vb: TryFindExact(IList(Of Char), Int32, IRecordPropertyList(Of Byte))
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFindExact(System.Collections.Generic.IList{`0},System.Int32,`1@)
    name: TryFindExact
    nameWithType: Trie<Char, IRecordPropertyList<Byte>>.TryFindExact
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.TryFindExact
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.InvertedIndex.IRecordPropertyList`1
    name: IRecordPropertyList
    nameWithType: IRecordPropertyList
    fullName: Microsoft.Health.InvertedIndex.IRecordPropertyList
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFindExact(System.Collections.Generic.IList{`0},System.Int32,`1@)
    name: TryFindExact
    nameWithType: Trie(Of Char, IRecordPropertyList(Of Byte)).TryFindExact
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).TryFindExact
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.InvertedIndex.IRecordPropertyList`1
    name: IRecordPropertyList
    nameWithType: IRecordPropertyList
    fullName: Microsoft.Health.InvertedIndex.IRecordPropertyList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.GetChildren(System.Collections.Generic.IList{System.Char},System.Int32)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.GetChildren(System.Collections.Generic.IList{System.Char},System.Int32)
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IList{`0},System.Int32)
  name: GetChildren(IList<Char>, Int32)
  nameWithType: Trie<Char, IRecordPropertyList<Byte>>.GetChildren(IList<Char>, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.GetChildren(System.Collections.Generic.IList<System.Char>, System.Int32)
  nameWithType.vb: Trie(Of Char, IRecordPropertyList(Of Byte)).GetChildren(IList(Of Char), Int32)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).GetChildren(System.Collections.Generic.IList(Of System.Char), System.Int32)
  name.vb: GetChildren(IList(Of Char), Int32)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IList{`0},System.Int32)
    name: GetChildren
    nameWithType: Trie<Char, IRecordPropertyList<Byte>>.GetChildren
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IList{`0},System.Int32)
    name: GetChildren
    nameWithType: Trie(Of Char, IRecordPropertyList(Of Byte)).GetChildren
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.GetChildren(System.Collections.Generic.IEnumerable{System.Char})
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.GetChildren(System.Collections.Generic.IEnumerable{System.Char})
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IEnumerable{`0})
  name: GetChildren(IEnumerable<Char>)
  nameWithType: Trie<Char, IRecordPropertyList<Byte>>.GetChildren(IEnumerable<Char>)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.GetChildren(System.Collections.Generic.IEnumerable<System.Char>)
  nameWithType.vb: Trie(Of Char, IRecordPropertyList(Of Byte)).GetChildren(IEnumerable(Of Char))
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).GetChildren(System.Collections.Generic.IEnumerable(Of System.Char))
  name.vb: GetChildren(IEnumerable(Of Char))
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IEnumerable{`0})
    name: GetChildren
    nameWithType: Trie<Char, IRecordPropertyList<Byte>>.GetChildren
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IEnumerable{`0})
    name: GetChildren
    nameWithType: Trie(Of Char, IRecordPropertyList(Of Byte)).GetChildren
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.GetAllValues
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.GetAllValues
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.GetAllValues
  name: GetAllValues()
  nameWithType: Trie<Char, IRecordPropertyList<Byte>>.GetAllValues()
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.GetAllValues()
  nameWithType.vb: Trie(Of Char, IRecordPropertyList(Of Byte)).GetAllValues()
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).GetAllValues()
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetAllValues
    name: GetAllValues
    nameWithType: Trie<Char, IRecordPropertyList<Byte>>.GetAllValues
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.GetAllValues
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetAllValues
    name: GetAllValues
    nameWithType: Trie(Of Char, IRecordPropertyList(Of Byte)).GetAllValues
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).GetAllValues
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Add(System.Collections.Generic.IList{System.Char},Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte})
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Add(System.Collections.Generic.IList{System.Char},Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte})
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},`1)
  name: Add(IList<Char>, IRecordPropertyList<Byte>)
  nameWithType: Trie<Char, IRecordPropertyList<Byte>>.Add(IList<Char>, IRecordPropertyList<Byte>)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.Add(System.Collections.Generic.IList<System.Char>, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>)
  nameWithType.vb: Trie(Of Char, IRecordPropertyList(Of Byte)).Add(IList(Of Char), IRecordPropertyList(Of Byte))
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).Add(System.Collections.Generic.IList(Of System.Char), Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte))
  name.vb: Add(IList(Of Char), IRecordPropertyList(Of Byte))
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},`1)
    name: Add
    nameWithType: Trie<Char, IRecordPropertyList<Byte>>.Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.InvertedIndex.IRecordPropertyList`1
    name: IRecordPropertyList
    nameWithType: IRecordPropertyList
    fullName: Microsoft.Health.InvertedIndex.IRecordPropertyList
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},`1)
    name: Add
    nameWithType: Trie(Of Char, IRecordPropertyList(Of Byte)).Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.InvertedIndex.IRecordPropertyList`1
    name: IRecordPropertyList
    nameWithType: IRecordPropertyList
    fullName: Microsoft.Health.InvertedIndex.IRecordPropertyList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Add(System.Collections.Generic.IList{System.Char},System.Int32,System.Int32,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte})
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Add(System.Collections.Generic.IList{System.Char},System.Int32,System.Int32,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte})
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1)
  name: Add(IList<Char>, Int32, Int32, IRecordPropertyList<Byte>)
  nameWithType: Trie<Char, IRecordPropertyList<Byte>>.Add(IList<Char>, Int32, Int32, IRecordPropertyList<Byte>)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.Add(System.Collections.Generic.IList<System.Char>, System.Int32, System.Int32, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>)
  nameWithType.vb: Trie(Of Char, IRecordPropertyList(Of Byte)).Add(IList(Of Char), Int32, Int32, IRecordPropertyList(Of Byte))
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).Add(System.Collections.Generic.IList(Of System.Char), System.Int32, System.Int32, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte))
  name.vb: Add(IList(Of Char), Int32, Int32, IRecordPropertyList(Of Byte))
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1)
    name: Add
    nameWithType: Trie<Char, IRecordPropertyList<Byte>>.Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.InvertedIndex.IRecordPropertyList`1
    name: IRecordPropertyList
    nameWithType: IRecordPropertyList
    fullName: Microsoft.Health.InvertedIndex.IRecordPropertyList
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1)
    name: Add
    nameWithType: Trie(Of Char, IRecordPropertyList(Of Byte)).Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.InvertedIndex.IRecordPropertyList`1
    name: IRecordPropertyList
    nameWithType: IRecordPropertyList
    fullName: Microsoft.Health.InvertedIndex.IRecordPropertyList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Add(System.Collections.Generic.IEnumerable{System.Char},Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte})
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Add(System.Collections.Generic.IEnumerable{System.Char},Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte})
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IEnumerable{`0},`1)
  name: Add(IEnumerable<Char>, IRecordPropertyList<Byte>)
  nameWithType: Trie<Char, IRecordPropertyList<Byte>>.Add(IEnumerable<Char>, IRecordPropertyList<Byte>)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.Add(System.Collections.Generic.IEnumerable<System.Char>, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>)
  nameWithType.vb: Trie(Of Char, IRecordPropertyList(Of Byte)).Add(IEnumerable(Of Char), IRecordPropertyList(Of Byte))
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).Add(System.Collections.Generic.IEnumerable(Of System.Char), Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte))
  name.vb: Add(IEnumerable(Of Char), IRecordPropertyList(Of Byte))
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IEnumerable{`0},`1)
    name: Add
    nameWithType: Trie<Char, IRecordPropertyList<Byte>>.Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.InvertedIndex.IRecordPropertyList`1
    name: IRecordPropertyList
    nameWithType: IRecordPropertyList
    fullName: Microsoft.Health.InvertedIndex.IRecordPropertyList
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IEnumerable{`0},`1)
    name: Add
    nameWithType: Trie(Of Char, IRecordPropertyList(Of Byte)).Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.InvertedIndex.IRecordPropertyList`1
    name: IRecordPropertyList
    nameWithType: IRecordPropertyList
    fullName: Microsoft.Health.InvertedIndex.IRecordPropertyList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Trim
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}.Trim
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.Char,Microsoft.Health.InvertedIndex.IRecordPropertyList{System.Byte}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.Trim
  name: Trim()
  nameWithType: Trie<Char, IRecordPropertyList<Byte>>.Trim()
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.Trim()
  nameWithType.vb: Trie(Of Char, IRecordPropertyList(Of Byte)).Trim()
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).Trim()
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Trim
    name: Trim
    nameWithType: Trie<Char, IRecordPropertyList<Byte>>.Trim
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList<System.Byte>>.Trim
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Trim
    name: Trim
    nameWithType: Trie(Of Char, IRecordPropertyList(Of Byte)).Trim
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.Char, Microsoft.Health.InvertedIndex.IRecordPropertyList(Of System.Byte)).Trim
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  name: SetProperty(String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object())
  name.vb: SetProperty(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  name: InvokeMethod(String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object())
  name.vb: InvokeMethod(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  parent: Microsoft.Health.Utility.InvariantString
  definition: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  name: ToStringInvariant()
  nameWithType: InvariantString.ToStringInvariant()
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant()
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.SpellChecker.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  parent: Microsoft.Health.Utility.TypeHelper
  definition: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  name: ValueOrDbNull<SpellChecker>()
  nameWithType: TypeHelper.ValueOrDbNull<SpellChecker>()
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.InvertedIndex.SpellChecker>()
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of SpellChecker)()
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.InvertedIndex.SpellChecker)()
  name.vb: ValueOrDbNull(Of SpellChecker)()
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull<SpellChecker>
    nameWithType: TypeHelper.ValueOrDbNull<SpellChecker>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.InvertedIndex.SpellChecker>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull(Of SpellChecker)
    nameWithType: TypeHelper.ValueOrDbNull(Of SpellChecker)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.InvertedIndex.SpellChecker)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  parent: Microsoft.Health.Utility.WCXmlHelper
  definition: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  name: ToXml()
  nameWithType: WCXmlHelper.ToXml()
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml()
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2
  commentId: T:Microsoft.Health.PhraseAnalyzer.Trie`2
  isExternal: false
  name: Trie<K, V>
  nameWithType: Trie<K, V>
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>
  nameWithType.vb: Trie(Of K, V)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V)
  name.vb: Trie(Of K, V)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2
    name: Trie
    nameWithType: Trie
    fullName: Microsoft.Health.PhraseAnalyzer.Trie
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2
    name: Trie
    nameWithType: Trie
    fullName: Microsoft.Health.PhraseAnalyzer.Trie
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer
  commentId: N:Microsoft.Health.PhraseAnalyzer
  isExternal: false
  name: Microsoft.Health.PhraseAnalyzer
  nameWithType: Microsoft.Health.PhraseAnalyzer
  fullName: Microsoft.Health.PhraseAnalyzer
- uid: Microsoft.Health.InvertedIndex.TrieIndex`2
  commentId: T:Microsoft.Health.InvertedIndex.TrieIndex`2
  isExternal: false
  name: TrieIndex<T, TRecordIDList>
  nameWithType: TrieIndex<T, TRecordIDList>
  fullName: Microsoft.Health.InvertedIndex.TrieIndex<T, TRecordIDList>
  nameWithType.vb: TrieIndex(Of T, TRecordIDList)
  fullName.vb: Microsoft.Health.InvertedIndex.TrieIndex(Of T, TRecordIDList)
  name.vb: TrieIndex(Of T, TRecordIDList)
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2
    name: TrieIndex
    nameWithType: TrieIndex
    fullName: Microsoft.Health.InvertedIndex.TrieIndex
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2
    name: TrieIndex
    nameWithType: TrieIndex
    fullName: Microsoft.Health.InvertedIndex.TrieIndex
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.ITrieIndex`2
  commentId: T:Microsoft.Health.InvertedIndex.ITrieIndex`2
  isExternal: false
  name: ITrieIndex<T, TRecordIDList>
  nameWithType: ITrieIndex<T, TRecordIDList>
  fullName: Microsoft.Health.InvertedIndex.ITrieIndex<T, TRecordIDList>
  nameWithType.vb: ITrieIndex(Of T, TRecordIDList)
  fullName.vb: Microsoft.Health.InvertedIndex.ITrieIndex(Of T, TRecordIDList)
  name.vb: ITrieIndex(Of T, TRecordIDList)
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ITrieIndex`2
    name: ITrieIndex
    nameWithType: ITrieIndex
    fullName: Microsoft.Health.InvertedIndex.ITrieIndex
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ITrieIndex`2
    name: ITrieIndex
    nameWithType: ITrieIndex
    fullName: Microsoft.Health.InvertedIndex.ITrieIndex
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.ISearchIndex`2
  commentId: T:Microsoft.Health.InvertedIndex.ISearchIndex`2
  isExternal: false
  name: ISearchIndex<T, TRecordIDList>
  nameWithType: ISearchIndex<T, TRecordIDList>
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>
  nameWithType.vb: ISearchIndex(Of T, TRecordIDList)
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList)
  name.vb: ISearchIndex(Of T, TRecordIDList)
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2
    name: ISearchIndex
    nameWithType: ISearchIndex
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2
    name: ISearchIndex
    nameWithType: ISearchIndex
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Item(System.Collections.Generic.IEnumerable{`0})
  commentId: P:Microsoft.Health.InvertedIndex.TrieIndex`2.Item(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: Item[IEnumerable<T>]
  nameWithType: TrieIndex<T, TRecordIDList>.Item[IEnumerable<T>]
  fullName: Microsoft.Health.InvertedIndex.TrieIndex<T, TRecordIDList>.Item[System.Collections.Generic.IEnumerable<T>]
  nameWithType.vb: TrieIndex(Of T, TRecordIDList).Item(IEnumerable(Of T))
  fullName.vb: Microsoft.Health.InvertedIndex.TrieIndex(Of T, TRecordIDList).Item(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Item(IEnumerable(Of T))
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Item(System.Collections.Generic.IEnumerable{`0})
    name: Item
    nameWithType: TrieIndex<T, TRecordIDList>.Item
    fullName: Microsoft.Health.InvertedIndex.TrieIndex<T, TRecordIDList>.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Item(System.Collections.Generic.IEnumerable{`0})
    name: Item
    nameWithType: TrieIndex(Of T, TRecordIDList).Item
    fullName: Microsoft.Health.InvertedIndex.TrieIndex(Of T, TRecordIDList).Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Item(System.Collections.Generic.IList{`0})
  commentId: P:Microsoft.Health.InvertedIndex.TrieIndex`2.Item(System.Collections.Generic.IList{`0})
  isExternal: true
  name: Item[IList<T>]
  nameWithType: TrieIndex<T, TRecordIDList>.Item[IList<T>]
  fullName: Microsoft.Health.InvertedIndex.TrieIndex<T, TRecordIDList>.Item[System.Collections.Generic.IList<T>]
  nameWithType.vb: TrieIndex(Of T, TRecordIDList).Item(IList(Of T))
  fullName.vb: Microsoft.Health.InvertedIndex.TrieIndex(Of T, TRecordIDList).Item(System.Collections.Generic.IList(Of T))
  name.vb: Item(IList(Of T))
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Item(System.Collections.Generic.IList{`0})
    name: Item
    nameWithType: TrieIndex<T, TRecordIDList>.Item
    fullName: Microsoft.Health.InvertedIndex.TrieIndex<T, TRecordIDList>.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Item(System.Collections.Generic.IList{`0})
    name: Item
    nameWithType: TrieIndex(Of T, TRecordIDList).Item
    fullName: Microsoft.Health.InvertedIndex.TrieIndex(Of T, TRecordIDList).Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Item(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
  commentId: P:Microsoft.Health.InvertedIndex.TrieIndex`2.Item(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
  isExternal: true
  name: Item[IList<T>, Int32, Int32]
  nameWithType: TrieIndex<T, TRecordIDList>.Item[IList<T>, Int32, Int32]
  fullName: Microsoft.Health.InvertedIndex.TrieIndex<T, TRecordIDList>.Item[System.Collections.Generic.IList<T>, System.Int32, System.Int32]
  nameWithType.vb: TrieIndex(Of T, TRecordIDList).Item(IList(Of T), Int32, Int32)
  fullName.vb: Microsoft.Health.InvertedIndex.TrieIndex(Of T, TRecordIDList).Item(System.Collections.Generic.IList(Of T), System.Int32, System.Int32)
  name.vb: Item(IList(Of T), Int32, Int32)
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Item(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
    name: Item
    nameWithType: TrieIndex<T, TRecordIDList>.Item
    fullName: Microsoft.Health.InvertedIndex.TrieIndex<T, TRecordIDList>.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Item(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
    name: Item
    nameWithType: TrieIndex(Of T, TRecordIDList).Item
    fullName: Microsoft.Health.InvertedIndex.TrieIndex(Of T, TRecordIDList).Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{`0})
  commentId: M:Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{`0})
  isExternal: true
  name: Resolve(IList<T>)
  nameWithType: TrieIndex<T, TRecordIDList>.Resolve(IList<T>)
  fullName: Microsoft.Health.InvertedIndex.TrieIndex<T, TRecordIDList>.Resolve(System.Collections.Generic.IList<T>)
  nameWithType.vb: TrieIndex(Of T, TRecordIDList).Resolve(IList(Of T))
  fullName.vb: Microsoft.Health.InvertedIndex.TrieIndex(Of T, TRecordIDList).Resolve(System.Collections.Generic.IList(Of T))
  name.vb: Resolve(IList(Of T))
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{`0})
    name: Resolve
    nameWithType: TrieIndex<T, TRecordIDList>.Resolve
    fullName: Microsoft.Health.InvertedIndex.TrieIndex<T, TRecordIDList>.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{`0})
    name: Resolve
    nameWithType: TrieIndex(Of T, TRecordIDList).Resolve
    fullName: Microsoft.Health.InvertedIndex.TrieIndex(Of T, TRecordIDList).Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
  commentId: M:Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
  isExternal: true
  name: Resolve(IList<T>, Int32, Int32)
  nameWithType: TrieIndex<T, TRecordIDList>.Resolve(IList<T>, Int32, Int32)
  fullName: Microsoft.Health.InvertedIndex.TrieIndex<T, TRecordIDList>.Resolve(System.Collections.Generic.IList<T>, System.Int32, System.Int32)
  nameWithType.vb: TrieIndex(Of T, TRecordIDList).Resolve(IList(Of T), Int32, Int32)
  fullName.vb: Microsoft.Health.InvertedIndex.TrieIndex(Of T, TRecordIDList).Resolve(System.Collections.Generic.IList(Of T), System.Int32, System.Int32)
  name.vb: Resolve(IList(Of T), Int32, Int32)
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
    name: Resolve
    nameWithType: TrieIndex<T, TRecordIDList>.Resolve
    fullName: Microsoft.Health.InvertedIndex.TrieIndex<T, TRecordIDList>.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
    name: Resolve
    nameWithType: TrieIndex(Of T, TRecordIDList).Resolve
    fullName: Microsoft.Health.InvertedIndex.TrieIndex(Of T, TRecordIDList).Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: Resolve(IEnumerable<T>)
  nameWithType: TrieIndex<T, TRecordIDList>.Resolve(IEnumerable<T>)
  fullName: Microsoft.Health.InvertedIndex.TrieIndex<T, TRecordIDList>.Resolve(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: TrieIndex(Of T, TRecordIDList).Resolve(IEnumerable(Of T))
  fullName.vb: Microsoft.Health.InvertedIndex.TrieIndex(Of T, TRecordIDList).Resolve(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Resolve(IEnumerable(Of T))
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IEnumerable{`0})
    name: Resolve
    nameWithType: TrieIndex<T, TRecordIDList>.Resolve
    fullName: Microsoft.Health.InvertedIndex.TrieIndex<T, TRecordIDList>.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IEnumerable{`0})
    name: Resolve
    nameWithType: TrieIndex(Of T, TRecordIDList).Resolve
    fullName: Microsoft.Health.InvertedIndex.TrieIndex(Of T, TRecordIDList).Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}})
  commentId: M:Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}})
  isExternal: true
  name: Resolve(IList<IEnumerable<T>>)
  nameWithType: TrieIndex<T, TRecordIDList>.Resolve(IList<IEnumerable<T>>)
  fullName: Microsoft.Health.InvertedIndex.TrieIndex<T, TRecordIDList>.Resolve(System.Collections.Generic.IList<System.Collections.Generic.IEnumerable<T>>)
  nameWithType.vb: TrieIndex(Of T, TRecordIDList).Resolve(IList(Of IEnumerable(Of T)))
  fullName.vb: Microsoft.Health.InvertedIndex.TrieIndex(Of T, TRecordIDList).Resolve(System.Collections.Generic.IList(Of System.Collections.Generic.IEnumerable(Of T)))
  name.vb: Resolve(IList(Of IEnumerable(Of T)))
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}})
    name: Resolve
    nameWithType: TrieIndex<T, TRecordIDList>.Resolve
    fullName: Microsoft.Health.InvertedIndex.TrieIndex<T, TRecordIDList>.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}})
    name: Resolve
    nameWithType: TrieIndex(Of T, TRecordIDList).Resolve
    fullName: Microsoft.Health.InvertedIndex.TrieIndex(Of T, TRecordIDList).Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}},System.Int32,System.Int32)
  commentId: M:Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}},System.Int32,System.Int32)
  isExternal: true
  name: Resolve(IList<IEnumerable<T>>, Int32, Int32)
  nameWithType: TrieIndex<T, TRecordIDList>.Resolve(IList<IEnumerable<T>>, Int32, Int32)
  fullName: Microsoft.Health.InvertedIndex.TrieIndex<T, TRecordIDList>.Resolve(System.Collections.Generic.IList<System.Collections.Generic.IEnumerable<T>>, System.Int32, System.Int32)
  nameWithType.vb: TrieIndex(Of T, TRecordIDList).Resolve(IList(Of IEnumerable(Of T)), Int32, Int32)
  fullName.vb: Microsoft.Health.InvertedIndex.TrieIndex(Of T, TRecordIDList).Resolve(System.Collections.Generic.IList(Of System.Collections.Generic.IEnumerable(Of T)), System.Int32, System.Int32)
  name.vb: Resolve(IList(Of IEnumerable(Of T)), Int32, Int32)
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}},System.Int32,System.Int32)
    name: Resolve
    nameWithType: TrieIndex<T, TRecordIDList>.Resolve
    fullName: Microsoft.Health.InvertedIndex.TrieIndex<T, TRecordIDList>.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}},System.Int32,System.Int32)
    name: Resolve
    nameWithType: TrieIndex(Of T, TRecordIDList).Resolve
    fullName: Microsoft.Health.InvertedIndex.TrieIndex(Of T, TRecordIDList).Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{`0}})
  commentId: M:Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{`0}})
  isExternal: true
  name: Resolve(IEnumerable<IEnumerable<T>>)
  nameWithType: TrieIndex<T, TRecordIDList>.Resolve(IEnumerable<IEnumerable<T>>)
  fullName: Microsoft.Health.InvertedIndex.TrieIndex<T, TRecordIDList>.Resolve(System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<T>>)
  nameWithType.vb: TrieIndex(Of T, TRecordIDList).Resolve(IEnumerable(Of IEnumerable(Of T)))
  fullName.vb: Microsoft.Health.InvertedIndex.TrieIndex(Of T, TRecordIDList).Resolve(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IEnumerable(Of T)))
  name.vb: Resolve(IEnumerable(Of IEnumerable(Of T)))
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{`0}})
    name: Resolve
    nameWithType: TrieIndex<T, TRecordIDList>.Resolve
    fullName: Microsoft.Health.InvertedIndex.TrieIndex<T, TRecordIDList>.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{`0}})
    name: Resolve
    nameWithType: TrieIndex(Of T, TRecordIDList).Resolve
    fullName: Microsoft.Health.InvertedIndex.TrieIndex(Of T, TRecordIDList).Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  commentId: M:Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  isExternal: true
  name: Resolve(IList<IEnumerable<T>>, StructList<RecordIDEnumerator>)
  nameWithType: TrieIndex<T, TRecordIDList>.Resolve(IList<IEnumerable<T>>, StructList<RecordIDEnumerator>)
  fullName: Microsoft.Health.InvertedIndex.TrieIndex<T, TRecordIDList>.Resolve(System.Collections.Generic.IList<System.Collections.Generic.IEnumerable<T>>, Microsoft.Health.StructList<Microsoft.Health.InvertedIndex.RecordIDEnumerator>)
  nameWithType.vb: TrieIndex(Of T, TRecordIDList).Resolve(IList(Of IEnumerable(Of T)), StructList(Of RecordIDEnumerator))
  fullName.vb: Microsoft.Health.InvertedIndex.TrieIndex(Of T, TRecordIDList).Resolve(System.Collections.Generic.IList(Of System.Collections.Generic.IEnumerable(Of T)), Microsoft.Health.StructList(Of Microsoft.Health.InvertedIndex.RecordIDEnumerator))
  name.vb: Resolve(IList(Of IEnumerable(Of T)), StructList(Of RecordIDEnumerator))
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
    name: Resolve
    nameWithType: TrieIndex<T, TRecordIDList>.Resolve
    fullName: Microsoft.Health.InvertedIndex.TrieIndex<T, TRecordIDList>.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.StructList`1
    name: StructList
    nameWithType: StructList
    fullName: Microsoft.Health.StructList
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
    name: Resolve
    nameWithType: TrieIndex(Of T, TRecordIDList).Resolve
    fullName: Microsoft.Health.InvertedIndex.TrieIndex(Of T, TRecordIDList).Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.StructList`1
    name: StructList
    nameWithType: StructList
    fullName: Microsoft.Health.StructList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  commentId: M:Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  isExternal: true
  name: Resolve(IList<IEnumerable<T>>, Int32, Int32, StructList<RecordIDEnumerator>)
  nameWithType: TrieIndex<T, TRecordIDList>.Resolve(IList<IEnumerable<T>>, Int32, Int32, StructList<RecordIDEnumerator>)
  fullName: Microsoft.Health.InvertedIndex.TrieIndex<T, TRecordIDList>.Resolve(System.Collections.Generic.IList<System.Collections.Generic.IEnumerable<T>>, System.Int32, System.Int32, Microsoft.Health.StructList<Microsoft.Health.InvertedIndex.RecordIDEnumerator>)
  nameWithType.vb: TrieIndex(Of T, TRecordIDList).Resolve(IList(Of IEnumerable(Of T)), Int32, Int32, StructList(Of RecordIDEnumerator))
  fullName.vb: Microsoft.Health.InvertedIndex.TrieIndex(Of T, TRecordIDList).Resolve(System.Collections.Generic.IList(Of System.Collections.Generic.IEnumerable(Of T)), System.Int32, System.Int32, Microsoft.Health.StructList(Of Microsoft.Health.InvertedIndex.RecordIDEnumerator))
  name.vb: Resolve(IList(Of IEnumerable(Of T)), Int32, Int32, StructList(Of RecordIDEnumerator))
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
    name: Resolve
    nameWithType: TrieIndex<T, TRecordIDList>.Resolve
    fullName: Microsoft.Health.InvertedIndex.TrieIndex<T, TRecordIDList>.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.StructList`1
    name: StructList
    nameWithType: StructList
    fullName: Microsoft.Health.StructList
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
    name: Resolve
    nameWithType: TrieIndex(Of T, TRecordIDList).Resolve
    fullName: Microsoft.Health.InvertedIndex.TrieIndex(Of T, TRecordIDList).Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.StructList`1
    name: StructList
    nameWithType: StructList
    fullName: Microsoft.Health.StructList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.IgnoreDuplicates
  commentId: P:Microsoft.Health.PhraseAnalyzer.Trie`2.IgnoreDuplicates
  isExternal: false
  name: IgnoreDuplicates
  nameWithType: Trie<K, V>.IgnoreDuplicates
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.IgnoreDuplicates
  nameWithType.vb: Trie(Of K, V).IgnoreDuplicates
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).IgnoreDuplicates
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.MaxLinearScanItemLength
  commentId: P:Microsoft.Health.PhraseAnalyzer.Trie`2.MaxLinearScanItemLength
  isExternal: false
  name: MaxLinearScanItemLength
  nameWithType: Trie<K, V>.MaxLinearScanItemLength
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.MaxLinearScanItemLength
  nameWithType.vb: Trie(Of K, V).MaxLinearScanItemLength
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).MaxLinearScanItemLength
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@)
  isExternal: true
  name: TryFind(IEnumerable<K>, V)
  nameWithType: Trie<K, V>.TryFind(IEnumerable<K>, V)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind(System.Collections.Generic.IEnumerable<K>, V)
  nameWithType.vb: Trie(Of K, V).TryFind(IEnumerable(Of K), V)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind(System.Collections.Generic.IEnumerable(Of K), V)
  name.vb: TryFind(IEnumerable(Of K), V)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@)
    name: TryFind
    nameWithType: Trie<K, V>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@)
    name: TryFind
    nameWithType: Trie(Of K, V).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@,System.Int32@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@,System.Int32@)
  isExternal: true
  name: TryFind(IEnumerable<K>, V, Int32)
  nameWithType: Trie<K, V>.TryFind(IEnumerable<K>, V, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind(System.Collections.Generic.IEnumerable<K>, V, System.Int32)
  nameWithType.vb: Trie(Of K, V).TryFind(IEnumerable(Of K), V, Int32)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind(System.Collections.Generic.IEnumerable(Of K), V, System.Int32)
  name.vb: TryFind(IEnumerable(Of K), V, Int32)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie<K, V>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie(Of K, V).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},`1@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},`1@)
  isExternal: true
  name: TryFind(IList<K>, V)
  nameWithType: Trie<K, V>.TryFind(IList<K>, V)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind(System.Collections.Generic.IList<K>, V)
  nameWithType.vb: Trie(Of K, V).TryFind(IList(Of K), V)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind(System.Collections.Generic.IList(Of K), V)
  name.vb: TryFind(IList(Of K), V)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},`1@)
    name: TryFind
    nameWithType: Trie<K, V>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},`1@)
    name: TryFind
    nameWithType: Trie(Of K, V).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@)
  isExternal: true
  name: TryFind(IList<K>, Int32, V)
  nameWithType: Trie<K, V>.TryFind(IList<K>, Int32, V)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind(System.Collections.Generic.IList<K>, System.Int32, V)
  nameWithType.vb: Trie(Of K, V).TryFind(IList(Of K), Int32, V)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind(System.Collections.Generic.IList(Of K), System.Int32, V)
  name.vb: TryFind(IList(Of K), Int32, V)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@)
    name: TryFind
    nameWithType: Trie<K, V>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@)
    name: TryFind
    nameWithType: Trie(Of K, V).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@,System.Int32@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@,System.Int32@)
  isExternal: true
  name: TryFind(IList<K>, Int32, V, Int32)
  nameWithType: Trie<K, V>.TryFind(IList<K>, Int32, V, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind(System.Collections.Generic.IList<K>, System.Int32, V, System.Int32)
  nameWithType.vb: Trie(Of K, V).TryFind(IList(Of K), Int32, V, Int32)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind(System.Collections.Generic.IList(Of K), System.Int32, V, System.Int32)
  name.vb: TryFind(IList(Of K), Int32, V, Int32)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie<K, V>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie(Of K, V).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1@,System.Int32@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1@,System.Int32@)
  isExternal: true
  name: TryFind(IList<K>, Int32, Int32, V, Int32)
  nameWithType: Trie<K, V>.TryFind(IList<K>, Int32, Int32, V, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind(System.Collections.Generic.IList<K>, System.Int32, System.Int32, V, System.Int32)
  nameWithType.vb: Trie(Of K, V).TryFind(IList(Of K), Int32, Int32, V, Int32)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind(System.Collections.Generic.IList(Of K), System.Int32, System.Int32, V, System.Int32)
  name.vb: TryFind(IList(Of K), Int32, Int32, V, Int32)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie<K, V>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie(Of K, V).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFindExact(System.Collections.Generic.IList{`0},System.Int32,`1@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.TryFindExact(System.Collections.Generic.IList{`0},System.Int32,`1@)
  isExternal: true
  name: TryFindExact(IList<K>, Int32, V)
  nameWithType: Trie<K, V>.TryFindExact(IList<K>, Int32, V)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFindExact(System.Collections.Generic.IList<K>, System.Int32, V)
  nameWithType.vb: Trie(Of K, V).TryFindExact(IList(Of K), Int32, V)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFindExact(System.Collections.Generic.IList(Of K), System.Int32, V)
  name.vb: TryFindExact(IList(Of K), Int32, V)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFindExact(System.Collections.Generic.IList{`0},System.Int32,`1@)
    name: TryFindExact
    nameWithType: Trie<K, V>.TryFindExact
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFindExact
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFindExact(System.Collections.Generic.IList{`0},System.Int32,`1@)
    name: TryFindExact
    nameWithType: Trie(Of K, V).TryFindExact
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFindExact
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IList{`0},System.Int32)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IList{`0},System.Int32)
  isExternal: true
  name: GetChildren(IList<K>, Int32)
  nameWithType: Trie<K, V>.GetChildren(IList<K>, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.GetChildren(System.Collections.Generic.IList<K>, System.Int32)
  nameWithType.vb: Trie(Of K, V).GetChildren(IList(Of K), Int32)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).GetChildren(System.Collections.Generic.IList(Of K), System.Int32)
  name.vb: GetChildren(IList(Of K), Int32)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IList{`0},System.Int32)
    name: GetChildren
    nameWithType: Trie<K, V>.GetChildren
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IList{`0},System.Int32)
    name: GetChildren
    nameWithType: Trie(Of K, V).GetChildren
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: GetChildren(IEnumerable<K>)
  nameWithType: Trie<K, V>.GetChildren(IEnumerable<K>)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.GetChildren(System.Collections.Generic.IEnumerable<K>)
  nameWithType.vb: Trie(Of K, V).GetChildren(IEnumerable(Of K))
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).GetChildren(System.Collections.Generic.IEnumerable(Of K))
  name.vb: GetChildren(IEnumerable(Of K))
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IEnumerable{`0})
    name: GetChildren
    nameWithType: Trie<K, V>.GetChildren
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IEnumerable{`0})
    name: GetChildren
    nameWithType: Trie(Of K, V).GetChildren
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetAllValues
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.GetAllValues
  isExternal: false
  name: GetAllValues()
  nameWithType: Trie<K, V>.GetAllValues()
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.GetAllValues()
  nameWithType.vb: Trie(Of K, V).GetAllValues()
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).GetAllValues()
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetAllValues
    name: GetAllValues
    nameWithType: Trie<K, V>.GetAllValues
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.GetAllValues
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetAllValues
    name: GetAllValues
    nameWithType: Trie(Of K, V).GetAllValues
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).GetAllValues
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},`1)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},`1)
  isExternal: true
  name: Add(IList<K>, V)
  nameWithType: Trie<K, V>.Add(IList<K>, V)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.Add(System.Collections.Generic.IList<K>, V)
  nameWithType.vb: Trie(Of K, V).Add(IList(Of K), V)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).Add(System.Collections.Generic.IList(Of K), V)
  name.vb: Add(IList(Of K), V)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},`1)
    name: Add
    nameWithType: Trie<K, V>.Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},`1)
    name: Add
    nameWithType: Trie(Of K, V).Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1)
  isExternal: true
  name: Add(IList<K>, Int32, Int32, V)
  nameWithType: Trie<K, V>.Add(IList<K>, Int32, Int32, V)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.Add(System.Collections.Generic.IList<K>, System.Int32, System.Int32, V)
  nameWithType.vb: Trie(Of K, V).Add(IList(Of K), Int32, Int32, V)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).Add(System.Collections.Generic.IList(Of K), System.Int32, System.Int32, V)
  name.vb: Add(IList(Of K), Int32, Int32, V)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1)
    name: Add
    nameWithType: Trie<K, V>.Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1)
    name: Add
    nameWithType: Trie(Of K, V).Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IEnumerable{`0},`1)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IEnumerable{`0},`1)
  isExternal: true
  name: Add(IEnumerable<K>, V)
  nameWithType: Trie<K, V>.Add(IEnumerable<K>, V)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.Add(System.Collections.Generic.IEnumerable<K>, V)
  nameWithType.vb: Trie(Of K, V).Add(IEnumerable(Of K), V)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).Add(System.Collections.Generic.IEnumerable(Of K), V)
  name.vb: Add(IEnumerable(Of K), V)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IEnumerable{`0},`1)
    name: Add
    nameWithType: Trie<K, V>.Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IEnumerable{`0},`1)
    name: Add
    nameWithType: Trie(Of K, V).Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Trim
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.Trim
  isExternal: false
  name: Trim()
  nameWithType: Trie<K, V>.Trim()
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.Trim()
  nameWithType.vb: Trie(Of K, V).Trim()
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).Trim()
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Trim
    name: Trim
    nameWithType: Trie<K, V>.Trim
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.Trim
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Trim
    name: Trim
    nameWithType: Trie(Of K, V).Trim
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).Trim
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  isExternal: true
  name: SetProperty(Object, String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object())
  name.vb: SetProperty(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions
  commentId: T:Microsoft.Health.Utility.IDispatchExtensions
  parent: Microsoft.Health.Utility
  isExternal: false
  name: IDispatchExtensions
  nameWithType: IDispatchExtensions
  fullName: Microsoft.Health.Utility.IDispatchExtensions
- uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  isExternal: true
  name: InvokeMethod(Object, String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object())
  name.vb: InvokeMethod(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  isExternal: true
  name: ToStringInvariant(Object)
  nameWithType: InvariantString.ToStringInvariant(Object)
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString
  commentId: T:Microsoft.Health.Utility.InvariantString
  parent: Microsoft.Health.Utility
  isExternal: false
  name: InvariantString
  nameWithType: InvariantString
  fullName: Microsoft.Health.Utility.InvariantString
- uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  isExternal: false
  name: ValueOrDbNull<T>(T)
  nameWithType: TypeHelper.ValueOrDbNull<T>(T)
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>(T)
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of T)(T)
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)(T)
  name.vb: ValueOrDbNull(Of T)(T)
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull<T>
    nameWithType: TypeHelper.ValueOrDbNull<T>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull(Of T)
    nameWithType: TypeHelper.ValueOrDbNull(Of T)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.TypeHelper
  commentId: T:Microsoft.Health.Utility.TypeHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: TypeHelper
  nameWithType: TypeHelper
  fullName: Microsoft.Health.Utility.TypeHelper
- uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  isExternal: true
  name: ToXml(Object)
  nameWithType: WCXmlHelper.ToXml(Object)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.WCXmlHelper
  commentId: T:Microsoft.Health.Utility.WCXmlHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: WCXmlHelper
  nameWithType: WCXmlHelper
  fullName: Microsoft.Health.Utility.WCXmlHelper
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: Microsoft.Health.InvertedIndex.SpellChecker.#ctor*
  commentId: Overload:Microsoft.Health.InvertedIndex.SpellChecker.#ctor
  isExternal: false
  name: SpellChecker
  nameWithType: SpellChecker.SpellChecker
  fullName: Microsoft.Health.InvertedIndex.SpellChecker.SpellChecker
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: Microsoft.Health.InvertedIndex.SpellChecker.Words*
  commentId: Overload:Microsoft.Health.InvertedIndex.SpellChecker.Words
  isExternal: false
  name: Words
  nameWithType: SpellChecker.Words
  fullName: Microsoft.Health.InvertedIndex.SpellChecker.Words
- uid: System.Collections.Generic.IList{System.String}
  commentId: T:System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  nameWithType.vb: IList(Of String)
  fullName.vb: System.Collections.Generic.IList(Of System.String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Health.InvertedIndex.SpellChecker.SpellCheck*
  commentId: Overload:Microsoft.Health.InvertedIndex.SpellChecker.SpellCheck
  isExternal: false
  name: SpellCheck
  nameWithType: SpellChecker.SpellCheck
  fullName: Microsoft.Health.InvertedIndex.SpellChecker.SpellCheck
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IEnumerable{Microsoft.Health.InvertedIndex.Match{Microsoft.Health.InvertedIndex.SpellCheckRank}}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Health.InvertedIndex.Match{Microsoft.Health.InvertedIndex.SpellCheckRank}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Match<SpellCheckRank>>
  nameWithType: IEnumerable<Match<SpellCheckRank>>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Health.InvertedIndex.Match<Microsoft.Health.InvertedIndex.SpellCheckRank>>
  nameWithType.vb: IEnumerable(Of Match(Of SpellCheckRank))
  fullName.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Health.InvertedIndex.Match(Of Microsoft.Health.InvertedIndex.SpellCheckRank))
  name.vb: IEnumerable(Of Match(Of SpellCheckRank))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.InvertedIndex.Match`1
    name: Match
    nameWithType: Match
    fullName: Microsoft.Health.InvertedIndex.Match
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.InvertedIndex.SpellCheckRank
    name: SpellCheckRank
    nameWithType: SpellCheckRank
    fullName: Microsoft.Health.InvertedIndex.SpellCheckRank
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.InvertedIndex.Match`1
    name: Match
    nameWithType: Match
    fullName: Microsoft.Health.InvertedIndex.Match
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.InvertedIndex.SpellCheckRank
    name: SpellCheckRank
    nameWithType: SpellCheckRank
    fullName: Microsoft.Health.InvertedIndex.SpellCheckRank
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
