### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.BlobStore
  commentId: T:Microsoft.Health.BlobStore
  id: BlobStore
  parent: Microsoft.Health
  children:
  - Microsoft.Health.BlobStore.Add(Microsoft.Health.Blob)
  - Microsoft.Health.BlobStore.Add(System.String,Microsoft.Health.Blob)
  - Microsoft.Health.BlobStore.Clear
  - Microsoft.Health.BlobStore.Contains(Microsoft.Health.Blob)
  - Microsoft.Health.BlobStore.ContainsKey(System.String)
  - Microsoft.Health.BlobStore.Count
  - Microsoft.Health.BlobStore.Item(System.String)
  - Microsoft.Health.BlobStore.Keys
  - Microsoft.Health.BlobStore.NewBlob(System.String,System.String)
  - Microsoft.Health.BlobStore.NewBlob(System.String,System.String,Microsoft.Health.BlobHashInfo,System.Uri)
  - Microsoft.Health.BlobStore.Remove(System.String)
  - Microsoft.Health.BlobStore.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#Add(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob})
  - Microsoft.Health.BlobStore.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#Contains(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob})
  - Microsoft.Health.BlobStore.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}[],System.Int32)
  - Microsoft.Health.BlobStore.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#IsReadOnly
  - Microsoft.Health.BlobStore.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#Remove(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob})
  - Microsoft.Health.BlobStore.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#GetEnumerator
  - Microsoft.Health.BlobStore.System#Collections#IEnumerable#GetEnumerator
  - Microsoft.Health.BlobStore.TryGetValue(System.String,Microsoft.Health.Blob@)
  - Microsoft.Health.BlobStore.Values
  - Microsoft.Health.BlobStore.Write(System.String,System.String,System.IO.Stream)
  - Microsoft.Health.BlobStore.WriteInline(System.String,System.String,System.Byte[])
  langs:
  - csharp
  - vb
  name: BlobStore
  nameWithType: BlobStore
  fullName: Microsoft.Health.BlobStore
  type: Class
  source:
    remote:
      path: Microsoft.Health/BlobStore.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: BlobStore
    path: ../Microsoft.Health/BlobStore.cs
    startLine: 27
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nA collection of the BLOBs associated with a health record item.\n"
  remarks: "\nThe <xref href=\"Microsoft.Health.BlobStore\" data-throw-if-not-resolved=\"false\"></xref> is a dictionary that is read-only but allows removal of \n<xref href=\"Microsoft.Health.Blob\" data-throw-if-not-resolved=\"false\"></xref> instances. \nTo add <xref href=\"Microsoft.Health.Blob\" data-throw-if-not-resolved=\"false\"></xref> instances to the dictionary use the \n<xref href=\"Microsoft.Health.BlobStore.NewBlob(System.String%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref> method.\n"
  example: []
  syntax:
    content: 'public class BlobStore : IDictionary<string, Blob>, ICollection<KeyValuePair<string, Blob>>, IEnumerable<KeyValuePair<string, Blob>>, IEnumerable'
    content.vb: >-
      Public Class BlobStore
          Implements IDictionary(Of String, Blob), ICollection(Of KeyValuePair(Of String, Blob)), IEnumerable(Of KeyValuePair(Of String, Blob)), IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IDictionary{System.String,Microsoft.Health.Blob}
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}}
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - Microsoft.Health.BlobStore.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  - System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.BlobStore.Count
  commentId: P:Microsoft.Health.BlobStore.Count
  id: Count
  parent: Microsoft.Health.BlobStore
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: BlobStore.Count
  fullName: Microsoft.Health.BlobStore.Count
  type: Property
  source:
    remote:
      path: Microsoft.Health/BlobStore.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Count
    path: ../Microsoft.Health/BlobStore.cs
    startLine: 66
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the count of BLOBs associated with the health record item.\n"
  example: []
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
  overload: Microsoft.Health.BlobStore.Count*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}}.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.BlobStore.Add(Microsoft.Health.Blob)
  commentId: M:Microsoft.Health.BlobStore.Add(Microsoft.Health.Blob)
  id: Add(Microsoft.Health.Blob)
  parent: Microsoft.Health.BlobStore
  langs:
  - csharp
  - vb
  name: Add(Blob)
  nameWithType: BlobStore.Add(Blob)
  fullName: Microsoft.Health.BlobStore.Add(Microsoft.Health.Blob)
  type: Method
  source:
    remote:
      path: Microsoft.Health/BlobStore.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Add
    path: ../Microsoft.Health/BlobStore.cs
    startLine: 79
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nNot supported.\n"
  remarks: "\nUse the <xref href=\"Microsoft.Health.BlobStore.NewBlob(System.String%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref> method instead.\n"
  example: []
  syntax:
    content: public void Add(Blob blob)
    content.vb: Public Sub Add(blob As Blob)
    parameters:
    - id: blob
      type: Microsoft.Health.Blob
  overload: Microsoft.Health.BlobStore.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.BlobStore.Add(System.String,Microsoft.Health.Blob)
  commentId: M:Microsoft.Health.BlobStore.Add(System.String,Microsoft.Health.Blob)
  id: Add(System.String,Microsoft.Health.Blob)
  parent: Microsoft.Health.BlobStore
  langs:
  - csharp
  - vb
  name: Add(String, Blob)
  nameWithType: BlobStore.Add(String, Blob)
  fullName: Microsoft.Health.BlobStore.Add(System.String, Microsoft.Health.Blob)
  type: Method
  source:
    remote:
      path: Microsoft.Health/BlobStore.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Add
    path: ../Microsoft.Health/BlobStore.cs
    startLine: 92
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nNot supported.\n"
  remarks: "\nUse the <xref href=\"Microsoft.Health.BlobStore.NewBlob(System.String%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref> method instead.\n"
  example: []
  syntax:
    content: public void Add(string key, Blob blob)
    content.vb: Public Sub Add(key As String, blob As Blob)
    parameters:
    - id: key
      type: System.String
    - id: blob
      type: Microsoft.Health.Blob
  overload: Microsoft.Health.BlobStore.Add*
  implements:
  - System.Collections.Generic.IDictionary{System.String,Microsoft.Health.Blob}.Add(System.String,Microsoft.Health.Blob)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.BlobStore.Clear
  commentId: M:Microsoft.Health.BlobStore.Clear
  id: Clear
  parent: Microsoft.Health.BlobStore
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: BlobStore.Clear()
  fullName: Microsoft.Health.BlobStore.Clear()
  type: Method
  source:
    remote:
      path: Microsoft.Health/BlobStore.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Clear
    path: ../Microsoft.Health/BlobStore.cs
    startLine: 101
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nClears all Blob instances from the BlobStore.\n"
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: Microsoft.Health.BlobStore.Clear*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}}.Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.BlobStore.Contains(Microsoft.Health.Blob)
  commentId: M:Microsoft.Health.BlobStore.Contains(Microsoft.Health.Blob)
  id: Contains(Microsoft.Health.Blob)
  parent: Microsoft.Health.BlobStore
  langs:
  - csharp
  - vb
  name: Contains(Blob)
  nameWithType: BlobStore.Contains(Blob)
  fullName: Microsoft.Health.BlobStore.Contains(Microsoft.Health.Blob)
  type: Method
  source:
    remote:
      path: Microsoft.Health/BlobStore.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Contains
    path: ../Microsoft.Health/BlobStore.cs
    startLine: 123
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nDetermines whether the BlobStore contains the specified Blob instance.\n"
  remarks: "\nThis implementation is a reference comparison and does not equate Blob instances\nwith the same name.\n"
  example: []
  syntax:
    content: public bool Contains(Blob blob)
    content.vb: Public Function Contains(blob As Blob) As Boolean
    parameters:
    - id: blob
      type: Microsoft.Health.Blob
      description: "\nThe Blob instance to locate in the BlobStore.\n"
    return:
      type: System.Boolean
      description: "\nTrue if the Blob instance is in the store or false otherwise.\n"
  overload: Microsoft.Health.BlobStore.Contains*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.BlobStore.ContainsKey(System.String)
  commentId: M:Microsoft.Health.BlobStore.ContainsKey(System.String)
  id: ContainsKey(System.String)
  parent: Microsoft.Health.BlobStore
  langs:
  - csharp
  - vb
  name: ContainsKey(String)
  nameWithType: BlobStore.ContainsKey(String)
  fullName: Microsoft.Health.BlobStore.ContainsKey(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/BlobStore.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ContainsKey
    path: ../Microsoft.Health/BlobStore.cs
    startLine: 144
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nDetermines whether the BlobStore contains a Blob with the specified key.\n"
  remarks: "\nThis is a case-sensitive comparison.\n"
  example: []
  syntax:
    content: public bool ContainsKey(string key)
    content.vb: Public Function ContainsKey(key As String) As Boolean
    parameters:
    - id: key
      type: System.String
      description: "\nThe key to locate in the BlobStore.\n"
    return:
      type: System.Boolean
      description: "\nTrue if the BlobStore contains a Blob with the key; otherwise, false.\n"
  overload: Microsoft.Health.BlobStore.ContainsKey*
  implements:
  - System.Collections.Generic.IDictionary{System.String,Microsoft.Health.Blob}.ContainsKey(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.BlobStore.System#Collections#IEnumerable#GetEnumerator
  commentId: M:Microsoft.Health.BlobStore.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: Microsoft.Health.BlobStore
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: BlobStore.IEnumerable.GetEnumerator()
  fullName: Microsoft.Health.BlobStore.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: Microsoft.Health/BlobStore.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: System.Collections.IEnumerable.GetEnumerator
    path: ../Microsoft.Health/BlobStore.cs
    startLine: 158
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nReturns an enumerator that iterates through a collection.\n"
  example: []
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
      description: "\nAn <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> object that can be used to iterate through the collection.\n"
  overload: Microsoft.Health.BlobStore.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: BlobStore.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: Microsoft.Health.BlobStore.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#GetEnumerator
  commentId: M:Microsoft.Health.BlobStore.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#GetEnumerator
  isEii: true
  parent: Microsoft.Health.BlobStore
  langs:
  - csharp
  - vb
  name: IEnumerable<KeyValuePair<String, Blob>>.GetEnumerator()
  nameWithType: BlobStore.IEnumerable<KeyValuePair<String, Blob>>.GetEnumerator()
  fullName: Microsoft.Health.BlobStore.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.Blob>>.GetEnumerator()
  type: Method
  source:
    remote:
      path: Microsoft.Health/BlobStore.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.GetEnumerator
    path: ../Microsoft.Health/BlobStore.cs
    startLine: 171
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nReturns an enumerator that iterates through a collection.\n"
  example: []
  syntax:
    content: IEnumerator<KeyValuePair<string, Blob>> IEnumerable<KeyValuePair<string, Blob>>.GetEnumerator()
    content.vb: Function System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.GetEnumerator As IEnumerator(Of KeyValuePair(Of String, Blob)) Implements IEnumerable(Of KeyValuePair(Of String, Blob)).GetEnumerator
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}}
      description: "\nAn <xref href=\"System.Collections.Generic.IEnumerator%601\" data-throw-if-not-resolved=\"false\"></xref> object that can be used to iterate through the collection.\n"
  overload: Microsoft.Health.BlobStore.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}}.GetEnumerator
  nameWithType.vb: BlobStore.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.GetEnumerator()
  fullName.vb: Microsoft.Health.BlobStore.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.GetEnumerator()
- uid: Microsoft.Health.BlobStore.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#IsReadOnly
  commentId: P:Microsoft.Health.BlobStore.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#IsReadOnly
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#IsReadOnly
  isEii: true
  parent: Microsoft.Health.BlobStore
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<String, Blob>>.IsReadOnly
  nameWithType: BlobStore.ICollection<KeyValuePair<String, Blob>>.IsReadOnly
  fullName: Microsoft.Health.BlobStore.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.Blob>>.IsReadOnly
  type: Property
  source:
    remote:
      path: Microsoft.Health/BlobStore.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.IsReadOnly
    path: ../Microsoft.Health/BlobStore.cs
    startLine: 185
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets a value indicating whether the BlobStore is read-only.\n"
  remarks: "\nThe BlobStore cannot be added to through the Add methods. Instead the\n<xref href=\"Microsoft.Health.BlobStore.NewBlob(System.String%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref> method must be used. However, the <xref href=\"Microsoft.Health.BlobStore.Clear\" data-throw-if-not-resolved=\"false\"></xref> and \n<xref href=\"Microsoft.Health.BlobStore.Remove(System.String)\" data-throw-if-not-resolved=\"false\"></xref> methods are available.\n"
  example: []
  syntax:
    content: bool ICollection<KeyValuePair<string, Blob>>.IsReadOnly { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.IsReadOnly As Boolean Implements ICollection(Of KeyValuePair(Of String, Blob)).IsReadOnly
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.Health.BlobStore.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#IsReadOnly*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}}.IsReadOnly
  nameWithType.vb: BlobStore.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.IsReadOnly
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: Microsoft.Health.BlobStore.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.IsReadOnly
- uid: Microsoft.Health.BlobStore.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#Remove(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob})
  commentId: M:Microsoft.Health.BlobStore.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#Remove(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob})
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#Remove(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob})
  isEii: true
  parent: Microsoft.Health.BlobStore
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<String, Blob>>.Remove(KeyValuePair<String, Blob>)
  nameWithType: BlobStore.ICollection<KeyValuePair<String, Blob>>.Remove(KeyValuePair<String, Blob>)
  fullName: Microsoft.Health.BlobStore.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.Blob>>.Remove(System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.Blob>)
  type: Method
  source:
    remote:
      path: Microsoft.Health/BlobStore.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.Remove
    path: ../Microsoft.Health/BlobStore.cs
    startLine: 198
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nRemoves the first occurrence of a specific Blob from the BlobStore.\n"
  example: []
  syntax:
    content: bool ICollection<KeyValuePair<string, Blob>>.Remove(KeyValuePair<string, Blob> item)
    content.vb: Function System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.Remove(item As KeyValuePair(Of String, Blob)) As Boolean Implements ICollection(Of KeyValuePair(Of String, Blob)).Remove
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}
      description: "\nThe Blob instance to remove.\n"
    return:
      type: System.Boolean
  overload: Microsoft.Health.BlobStore.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#Remove*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}}.Remove(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob})
  nameWithType.vb: BlobStore.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.Remove(KeyValuePair(Of String, Blob))
  fullName.vb: Microsoft.Health.BlobStore.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.Remove(System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.Blob))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.Remove(KeyValuePair(Of String, Blob))
- uid: Microsoft.Health.BlobStore.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}[],System.Int32)
  commentId: M:Microsoft.Health.BlobStore.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}[],System.Int32)
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}[],System.Int32)
  isEii: true
  parent: Microsoft.Health.BlobStore
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<String, Blob>>.CopyTo(KeyValuePair<String, Blob>[], Int32)
  nameWithType: BlobStore.ICollection<KeyValuePair<String, Blob>>.CopyTo(KeyValuePair<String, Blob>[], Int32)
  fullName: Microsoft.Health.BlobStore.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.Blob>>.CopyTo(System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.Blob>[], System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health/BlobStore.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.CopyTo
    path: ../Microsoft.Health/BlobStore.cs
    startLine: 222
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nCopies the elements of the BlobStore to an <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>, starting at a \nparticular <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> index.\n"
  example: []
  syntax:
    content: void ICollection<KeyValuePair<string, Blob>>.CopyTo(KeyValuePair<string, Blob>[] array, int arrayIndex)
    content.vb: Sub System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.CopyTo(array As KeyValuePair(Of String, Blob)(), arrayIndex As Integer) Implements ICollection(Of KeyValuePair(Of String, Blob)).CopyTo
    parameters:
    - id: array
      type: System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}[]
      description: "\nThe one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that is the destination of the Blobs copied from\nthe BlobStore. The <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> must have zero-based indexing.\n"
    - id: arrayIndex
      type: System.Int32
      description: "\nThe zero-based index in <span class=\"paramref\">array</span> at which copying begins.\n"
  overload: Microsoft.Health.BlobStore.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#CopyTo*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}}.CopyTo(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}[],System.Int32)
  nameWithType.vb: BlobStore.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.CopyTo(KeyValuePair(Of String, Blob)(), Int32)
  fullName.vb: Microsoft.Health.BlobStore.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.CopyTo(System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.Blob)(), System.Int32)
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.CopyTo(KeyValuePair(Of String, Blob)(), Int32)
- uid: Microsoft.Health.BlobStore.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#Contains(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob})
  commentId: M:Microsoft.Health.BlobStore.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#Contains(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob})
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#Contains(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob})
  isEii: true
  parent: Microsoft.Health.BlobStore
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<String, Blob>>.Contains(KeyValuePair<String, Blob>)
  nameWithType: BlobStore.ICollection<KeyValuePair<String, Blob>>.Contains(KeyValuePair<String, Blob>)
  fullName: Microsoft.Health.BlobStore.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.Blob>>.Contains(System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.Blob>)
  type: Method
  source:
    remote:
      path: Microsoft.Health/BlobStore.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.Contains
    path: ../Microsoft.Health/BlobStore.cs
    startLine: 241
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nDetermines whether the BlobStore contains the specified item.\n"
  example: []
  syntax:
    content: bool ICollection<KeyValuePair<string, Blob>>.Contains(KeyValuePair<string, Blob> item)
    content.vb: Function System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.Contains(item As KeyValuePair(Of String, Blob)) As Boolean Implements ICollection(Of KeyValuePair(Of String, Blob)).Contains
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}
      description: "\nThe Blob to locate in the BlobStore.\n"
    return:
      type: System.Boolean
      description: "\nTrue if <span class=\"paramref\">item</span> is found in the BlobStore; otherwise, false.\n"
  overload: Microsoft.Health.BlobStore.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#Contains*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}}.Contains(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob})
  nameWithType.vb: BlobStore.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.Contains(KeyValuePair(Of String, Blob))
  fullName.vb: Microsoft.Health.BlobStore.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.Contains(System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.Blob))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.Contains(KeyValuePair(Of String, Blob))
- uid: Microsoft.Health.BlobStore.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#Add(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob})
  commentId: M:Microsoft.Health.BlobStore.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#Add(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob})
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#Add(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob})
  isEii: true
  parent: Microsoft.Health.BlobStore
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<String, Blob>>.Add(KeyValuePair<String, Blob>)
  nameWithType: BlobStore.ICollection<KeyValuePair<String, Blob>>.Add(KeyValuePair<String, Blob>)
  fullName: Microsoft.Health.BlobStore.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.Blob>>.Add(System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.Blob>)
  type: Method
  source:
    remote:
      path: Microsoft.Health/BlobStore.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.Add
    path: ../Microsoft.Health/BlobStore.cs
    startLine: 250
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nNot supported.\n"
  example: []
  syntax:
    content: void ICollection<KeyValuePair<string, Blob>>.Add(KeyValuePair<string, Blob> item)
    content.vb: Sub System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.Add(item As KeyValuePair(Of String, Blob)) Implements ICollection(Of KeyValuePair(Of String, Blob)).Add
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}
      description: ''
  overload: Microsoft.Health.BlobStore.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#Add*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}}.Add(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob})
  nameWithType.vb: BlobStore.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.Add(KeyValuePair(Of String, Blob))
  fullName.vb: Microsoft.Health.BlobStore.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.Add(System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.Blob))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.Add(KeyValuePair(Of String, Blob))
- uid: Microsoft.Health.BlobStore.Values
  commentId: P:Microsoft.Health.BlobStore.Values
  id: Values
  parent: Microsoft.Health.BlobStore
  langs:
  - csharp
  - vb
  name: Values
  nameWithType: BlobStore.Values
  fullName: Microsoft.Health.BlobStore.Values
  type: Property
  source:
    remote:
      path: Microsoft.Health/BlobStore.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Values
    path: ../Microsoft.Health/BlobStore.cs
    startLine: 259
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets an ICollection&lt;Blob&gt; containing the values in the BlobStore.\n"
  example: []
  syntax:
    content: public ICollection<Blob> Values { get; }
    content.vb: Public ReadOnly Property Values As ICollection(Of Blob)
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{Microsoft.Health.Blob}
  overload: Microsoft.Health.BlobStore.Values*
  implements:
  - System.Collections.Generic.IDictionary{System.String,Microsoft.Health.Blob}.Values
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.BlobStore.Keys
  commentId: P:Microsoft.Health.BlobStore.Keys
  id: Keys
  parent: Microsoft.Health.BlobStore
  langs:
  - csharp
  - vb
  name: Keys
  nameWithType: BlobStore.Keys
  fullName: Microsoft.Health.BlobStore.Keys
  type: Property
  source:
    remote:
      path: Microsoft.Health/BlobStore.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Keys
    path: ../Microsoft.Health/BlobStore.cs
    startLine: 268
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets an ICollection&lt;string&gt; containing the Blob names in the BlobStore.\n"
  example: []
  syntax:
    content: public ICollection<string> Keys { get; }
    content.vb: Public ReadOnly Property Keys As ICollection(Of String)
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{System.String}
  overload: Microsoft.Health.BlobStore.Keys*
  implements:
  - System.Collections.Generic.IDictionary{System.String,Microsoft.Health.Blob}.Keys
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.BlobStore.TryGetValue(System.String,Microsoft.Health.Blob@)
  commentId: M:Microsoft.Health.BlobStore.TryGetValue(System.String,Microsoft.Health.Blob@)
  id: TryGetValue(System.String,Microsoft.Health.Blob@)
  parent: Microsoft.Health.BlobStore
  langs:
  - csharp
  - vb
  name: TryGetValue(String, out Blob)
  nameWithType: BlobStore.TryGetValue(String, out Blob)
  fullName: Microsoft.Health.BlobStore.TryGetValue(System.String, out Microsoft.Health.Blob)
  type: Method
  source:
    remote:
      path: Microsoft.Health/BlobStore.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: TryGetValue
    path: ../Microsoft.Health/BlobStore.cs
    startLine: 291
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the value associated with the specified key.\n"
  example: []
  syntax:
    content: public bool TryGetValue(string key, out Blob value)
    content.vb: Public Function TryGetValue(key As String, ByRef value As Blob) As Boolean
    parameters:
    - id: key
      type: System.String
      description: "\nThe key whose value to get.\n"
    - id: value
      type: Microsoft.Health.Blob
      description: "\nWhen this method returns, the value associated with the specified key, if the key is found;\notherwise, the default value for the type of the value parameter. This parameter is passed\nuninitialized.\n"
    return:
      type: System.Boolean
      description: "\nTrue if a Blob with the specified name exists in the BlobStore; otherwise, false.\n"
  overload: Microsoft.Health.BlobStore.TryGetValue*
  implements:
  - System.Collections.Generic.IDictionary{System.String,Microsoft.Health.Blob}.TryGetValue(System.String,Microsoft.Health.Blob@)
  nameWithType.vb: BlobStore.TryGetValue(String, ByRef Blob)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.BlobStore.TryGetValue(System.String, ByRef Microsoft.Health.Blob)
  name.vb: TryGetValue(String, ByRef Blob)
- uid: Microsoft.Health.BlobStore.Remove(System.String)
  commentId: M:Microsoft.Health.BlobStore.Remove(System.String)
  id: Remove(System.String)
  parent: Microsoft.Health.BlobStore
  langs:
  - csharp
  - vb
  name: Remove(String)
  nameWithType: BlobStore.Remove(String)
  fullName: Microsoft.Health.BlobStore.Remove(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/BlobStore.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Remove
    path: ../Microsoft.Health/BlobStore.cs
    startLine: 309
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nRemoves the Blob with the specified name from the BlobStore.\n"
  example: []
  syntax:
    content: public bool Remove(string key)
    content.vb: Public Function Remove(key As String) As Boolean
    parameters:
    - id: key
      type: System.String
      description: "\nThe name of the Blob to remove.\n"
    return:
      type: System.Boolean
      description: "\nTrue if the Blob is successfully removed; otherwise, false.\n"
  overload: Microsoft.Health.BlobStore.Remove*
  implements:
  - System.Collections.Generic.IDictionary{System.String,Microsoft.Health.Blob}.Remove(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.BlobStore.Item(System.String)
  commentId: P:Microsoft.Health.BlobStore.Item(System.String)
  id: Item(System.String)
  parent: Microsoft.Health.BlobStore
  langs:
  - csharp
  - vb
  name: Item[String]
  nameWithType: BlobStore.Item[String]
  fullName: Microsoft.Health.BlobStore.Item[System.String]
  type: Property
  source:
    remote:
      path: Microsoft.Health/BlobStore.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: this[]
    path: ../Microsoft.Health/BlobStore.cs
    startLine: 335
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the BLOB with the specified name.\n"
  example: []
  syntax:
    content: public Blob this[string name] { get; set; }
    content.vb: Public Property Item(name As String) As Blob
    parameters:
    - id: name
      type: System.String
      description: "\nThe name of the BLOB to retrieve for the item. A null key indicates the \"default\" BLOB.\n"
    return:
      type: Microsoft.Health.Blob
      description: "\nThe BLOB with the specified name or <strong>null</strong> if no BLOB with the specified name \nexists.\n"
  overload: Microsoft.Health.BlobStore.Item*
  implements:
  - System.Collections.Generic.IDictionary{System.String,Microsoft.Health.Blob}.Item(System.String)
  nameWithType.vb: BlobStore.Item(String)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.BlobStore.Item(System.String)
  name.vb: Item(String)
- uid: Microsoft.Health.BlobStore.WriteInline(System.String,System.String,System.Byte[])
  commentId: M:Microsoft.Health.BlobStore.WriteInline(System.String,System.String,System.Byte[])
  id: WriteInline(System.String,System.String,System.Byte[])
  parent: Microsoft.Health.BlobStore
  langs:
  - csharp
  - vb
  name: WriteInline(String, String, Byte[])
  nameWithType: BlobStore.WriteInline(String, String, Byte[])
  fullName: Microsoft.Health.BlobStore.WriteInline(System.String, System.String, System.Byte[])
  type: Method
  source:
    remote:
      path: Microsoft.Health/BlobStore.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: WriteInline
    path: ../Microsoft.Health/BlobStore.cs
    startLine: 390
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nWrites the specified bytes to the blob.\n"
  remarks: "\nThis is limited to about 3.5MB of data. Use <xref href=\"Microsoft.Health.Blob.GetWriterStream\" data-throw-if-not-resolved=\"false\"></xref> to write\nmore data.\n"
  example: []
  syntax:
    content: public void WriteInline(string blobName, string contentType, byte[] bytes)
    content.vb: Public Sub WriteInline(blobName As String, contentType As String, bytes As Byte())
    parameters:
    - id: blobName
      type: System.String
      description: "\nThe name of the BLOB. It can be <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> but cannot be <strong>null</strong>.\n"
    - id: contentType
      type: System.String
      description: "\nThe content type of the BLOB.\n"
    - id: bytes
      type: System.Byte[]
      description: "\nThe bytes to write to the blob.\n"
  overload: Microsoft.Health.BlobStore.WriteInline*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">contentType</span> is <strong>null</strong> or empty.\n"
  nameWithType.vb: BlobStore.WriteInline(String, String, Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.BlobStore.WriteInline(System.String, System.String, System.Byte())
  name.vb: WriteInline(String, String, Byte())
- uid: Microsoft.Health.BlobStore.Write(System.String,System.String,System.IO.Stream)
  commentId: M:Microsoft.Health.BlobStore.Write(System.String,System.String,System.IO.Stream)
  id: Write(System.String,System.String,System.IO.Stream)
  parent: Microsoft.Health.BlobStore
  langs:
  - csharp
  - vb
  name: Write(String, String, Stream)
  nameWithType: BlobStore.Write(String, String, Stream)
  fullName: Microsoft.Health.BlobStore.Write(System.String, System.String, System.IO.Stream)
  type: Method
  source:
    remote:
      path: Microsoft.Health/BlobStore.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Write
    path: ../Microsoft.Health/BlobStore.cs
    startLine: 425
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nWrites the bytes from the specified stream.\n"
  example: []
  syntax:
    content: public void Write(string blobName, string contentType, Stream stream)
    content.vb: Public Sub Write(blobName As String, contentType As String, stream As Stream)
    parameters:
    - id: blobName
      type: System.String
      description: "\nThe name of the BLOB. It can be <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> but cannot be <strong>null</strong>.\n"
    - id: contentType
      type: System.String
      description: "\nThe content type of the BLOB.\n"
    - id: stream
      type: System.IO.Stream
      description: "\nThe stream to get the bytes from to write to the blob.\n"
  overload: Microsoft.Health.BlobStore.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">contentType</span> is <strong>null</strong> or empty.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf there is an error writing the data to HealthVault.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.BlobStore.NewBlob(System.String,System.String)
  commentId: M:Microsoft.Health.BlobStore.NewBlob(System.String,System.String)
  id: NewBlob(System.String,System.String)
  parent: Microsoft.Health.BlobStore
  langs:
  - csharp
  - vb
  name: NewBlob(String, String)
  nameWithType: BlobStore.NewBlob(String, String)
  fullName: Microsoft.Health.BlobStore.NewBlob(System.String, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/BlobStore.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: NewBlob
    path: ../Microsoft.Health/BlobStore.cs
    startLine: 459
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nCreates a BLOB in the store with the specified name, content type, and encoding.\n"
  example: []
  syntax:
    content: public Blob NewBlob(string blobName, string contentType)
    content.vb: Public Function NewBlob(blobName As String, contentType As String) As Blob
    parameters:
    - id: blobName
      type: System.String
      description: "\nThe name of the BLOB. It can be <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> but cannot be <strong>null</strong>.\n"
    - id: contentType
      type: System.String
      description: "\nThe content type of the BLOB.\n"
    return:
      type: Microsoft.Health.Blob
      description: "\nThe <xref href=\"Microsoft.Health.Blob\" data-throw-if-not-resolved=\"false\"></xref> instance that was created in the store.\n"
  overload: Microsoft.Health.BlobStore.NewBlob*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">blobName</span> or <span class=\"paramref\">contentType</span> is <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf a Blob with the same name already exists in the store. To update an existing Blob,\nremove the existing Blob and create a new one.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.BlobStore.NewBlob(System.String,System.String,Microsoft.Health.BlobHashInfo,System.Uri)
  commentId: M:Microsoft.Health.BlobStore.NewBlob(System.String,System.String,Microsoft.Health.BlobHashInfo,System.Uri)
  id: NewBlob(System.String,System.String,Microsoft.Health.BlobHashInfo,System.Uri)
  parent: Microsoft.Health.BlobStore
  langs:
  - csharp
  - vb
  name: NewBlob(String, String, BlobHashInfo, Uri)
  nameWithType: BlobStore.NewBlob(String, String, BlobHashInfo, Uri)
  fullName: Microsoft.Health.BlobStore.NewBlob(System.String, System.String, Microsoft.Health.BlobHashInfo, System.Uri)
  type: Method
  source:
    remote:
      path: Microsoft.Health/BlobStore.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: NewBlob
    path: ../Microsoft.Health/BlobStore.cs
    startLine: 512
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nRecreates a BLOB in the store to allow for restarting multiple BLOB uploads on a\n<xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nThis overload is intended to allow the caller to recover from issues that may arise \nwhile uploading large BLOBs or many BLOBs for a <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref>.\nIf you have a large amount of data to upload, you can periodically save the state of\nthe Blob instance (and BlobStream if necessary) and then use this method to recreate\nthat same Blob instance in the store.\n"
  example: []
  syntax:
    content: public Blob NewBlob(string blobName, string contentType, BlobHashInfo hashInfo, Uri blobUrl)
    content.vb: Public Function NewBlob(blobName As String, contentType As String, hashInfo As BlobHashInfo, blobUrl As Uri) As Blob
    parameters:
    - id: blobName
      type: System.String
      description: "\nThe name of the BLOB. It can be <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> but cannot be <strong>null</strong>.\n"
    - id: contentType
      type: System.String
      description: "\nThe content type of the BLOB.\n"
    - id: hashInfo
      type: Microsoft.Health.BlobHashInfo
      description: "\nThe hash information for the BLOB.\n"
    - id: blobUrl
      type: System.Uri
      description: "\nThe HealthVault URL of the BLOB.\n"
    return:
      type: Microsoft.Health.Blob
      description: "\nThe <xref href=\"Microsoft.Health.Blob\" data-throw-if-not-resolved=\"false\"></xref> instance that was recreated in the store.\n"
  overload: Microsoft.Health.BlobStore.NewBlob*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">blobName</span> or <span class=\"paramref\">contentType</span> is <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf a Blob with the same name already exists in the store. To update an existing Blob,\nremove the existing Blob and create a new one.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Health.BlobStore
  commentId: T:Microsoft.Health.BlobStore
  parent: Microsoft.Health
  isExternal: false
  name: BlobStore
  nameWithType: BlobStore
  fullName: Microsoft.Health.BlobStore
- uid: Microsoft.Health.Blob
  commentId: T:Microsoft.Health.Blob
  parent: Microsoft.Health
  isExternal: false
  name: Blob
  nameWithType: Blob
  fullName: Microsoft.Health.Blob
- uid: Microsoft.Health.BlobStore.NewBlob(System.String,System.String)
  commentId: M:Microsoft.Health.BlobStore.NewBlob(System.String,System.String)
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IDictionary{System.String,Microsoft.Health.Blob}
  commentId: T:System.Collections.Generic.IDictionary{System.String,Microsoft.Health.Blob}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, Blob>
  nameWithType: IDictionary<String, Blob>
  fullName: System.Collections.Generic.IDictionary<System.String, Microsoft.Health.Blob>
  nameWithType.vb: IDictionary(Of String, Blob)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, Microsoft.Health.Blob)
  name.vb: IDictionary(Of String, Blob)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.Blob
    name: Blob
    nameWithType: Blob
    fullName: Microsoft.Health.Blob
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.Blob
    name: Blob
    nameWithType: Blob
    fullName: Microsoft.Health.Blob
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}}
  commentId: T:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<KeyValuePair<String, Blob>>
  nameWithType: ICollection<KeyValuePair<String, Blob>>
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.Blob>>
  nameWithType.vb: ICollection(Of KeyValuePair(Of String, Blob))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.Blob))
  name.vb: ICollection(Of KeyValuePair(Of String, Blob))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.Blob
    name: Blob
    nameWithType: Blob
    fullName: Microsoft.Health.Blob
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.Blob
    name: Blob
    nameWithType: Blob
    fullName: Microsoft.Health.Blob
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<String, Blob>>
  nameWithType: IEnumerable<KeyValuePair<String, Blob>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.Blob>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of String, Blob))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.Blob))
  name.vb: IEnumerable(Of KeyValuePair(Of String, Blob))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.Blob
    name: Blob
    nameWithType: Blob
    fullName: Microsoft.Health.Blob
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.Blob
    name: Blob
    nameWithType: Blob
    fullName: Microsoft.Health.Blob
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  name: SetProperty(String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object())
  name.vb: SetProperty(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  name: InvokeMethod(String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object())
  name.vb: InvokeMethod(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  parent: Microsoft.Health.Utility.InvariantString
  definition: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  name: ToStringInvariant()
  nameWithType: InvariantString.ToStringInvariant()
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant()
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.BlobStore.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  parent: Microsoft.Health.Utility.TypeHelper
  definition: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  name: ValueOrDbNull<BlobStore>()
  nameWithType: TypeHelper.ValueOrDbNull<BlobStore>()
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.BlobStore>()
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of BlobStore)()
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.BlobStore)()
  name.vb: ValueOrDbNull(Of BlobStore)()
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull<BlobStore>
    nameWithType: TypeHelper.ValueOrDbNull<BlobStore>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.BlobStore>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull(Of BlobStore)
    nameWithType: TypeHelper.ValueOrDbNull(Of BlobStore)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.BlobStore)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  parent: Microsoft.Health.Utility.WCXmlHelper
  definition: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  name: ToXml()
  nameWithType: WCXmlHelper.ToXml()
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml()
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  isExternal: true
  name: SetProperty(Object, String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object())
  name.vb: SetProperty(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions
  commentId: T:Microsoft.Health.Utility.IDispatchExtensions
  parent: Microsoft.Health.Utility
  isExternal: false
  name: IDispatchExtensions
  nameWithType: IDispatchExtensions
  fullName: Microsoft.Health.Utility.IDispatchExtensions
- uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  isExternal: true
  name: InvokeMethod(Object, String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object())
  name.vb: InvokeMethod(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  isExternal: true
  name: ToStringInvariant(Object)
  nameWithType: InvariantString.ToStringInvariant(Object)
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString
  commentId: T:Microsoft.Health.Utility.InvariantString
  parent: Microsoft.Health.Utility
  isExternal: false
  name: InvariantString
  nameWithType: InvariantString
  fullName: Microsoft.Health.Utility.InvariantString
- uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  isExternal: false
  name: ValueOrDbNull<T>(T)
  nameWithType: TypeHelper.ValueOrDbNull<T>(T)
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>(T)
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of T)(T)
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)(T)
  name.vb: ValueOrDbNull(Of T)(T)
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull<T>
    nameWithType: TypeHelper.ValueOrDbNull<T>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull(Of T)
    nameWithType: TypeHelper.ValueOrDbNull(Of T)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.TypeHelper
  commentId: T:Microsoft.Health.Utility.TypeHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: TypeHelper
  nameWithType: TypeHelper
  fullName: Microsoft.Health.Utility.TypeHelper
- uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  isExternal: true
  name: ToXml(Object)
  nameWithType: WCXmlHelper.ToXml(Object)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.WCXmlHelper
  commentId: T:Microsoft.Health.Utility.WCXmlHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: WCXmlHelper
  nameWithType: WCXmlHelper
  fullName: Microsoft.Health.Utility.WCXmlHelper
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: Microsoft.Health.BlobStore.Count*
  commentId: Overload:Microsoft.Health.BlobStore.Count
  isExternal: false
  name: Count
  nameWithType: BlobStore.Count
  fullName: Microsoft.Health.BlobStore.Count
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}}.Count
  commentId: P:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}}.Count
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<KeyValuePair<String, Blob>>.Count
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.Blob>>.Count
  nameWithType.vb: ICollection(Of KeyValuePair(Of String, Blob)).Count
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.Blob)).Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: Microsoft.Health.BlobStore.Add*
  commentId: Overload:Microsoft.Health.BlobStore.Add
  isExternal: false
  name: Add
  nameWithType: BlobStore.Add
  fullName: Microsoft.Health.BlobStore.Add
- uid: System.Collections.Generic.IDictionary{System.String,Microsoft.Health.Blob}.Add(System.String,Microsoft.Health.Blob)
  commentId: M:System.Collections.Generic.IDictionary{System.String,Microsoft.Health.Blob}.Add(System.String,Microsoft.Health.Blob)
  parent: System.Collections.Generic.IDictionary{System.String,Microsoft.Health.Blob}
  definition: System.Collections.Generic.IDictionary`2.Add(`0,`1)
  name: Add(String, Blob)
  nameWithType: IDictionary<String, Blob>.Add(String, Blob)
  fullName: System.Collections.Generic.IDictionary<System.String, Microsoft.Health.Blob>.Add(System.String, Microsoft.Health.Blob)
  nameWithType.vb: IDictionary(Of String, Blob).Add(String, Blob)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, Microsoft.Health.Blob).Add(System.String, Microsoft.Health.Blob)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    nameWithType: IDictionary<String, Blob>.Add
    fullName: System.Collections.Generic.IDictionary<System.String, Microsoft.Health.Blob>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.Blob
    name: Blob
    nameWithType: Blob
    fullName: Microsoft.Health.Blob
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    nameWithType: IDictionary(Of String, Blob).Add
    fullName: System.Collections.Generic.IDictionary(Of System.String, Microsoft.Health.Blob).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.Blob
    name: Blob
    nameWithType: Blob
    fullName: Microsoft.Health.Blob
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
  commentId: M:System.Collections.Generic.IDictionary`2.Add(`0,`1)
  isExternal: true
  name: Add(TKey, TValue)
  nameWithType: IDictionary<TKey, TValue>.Add(TKey, TValue)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)
  nameWithType.vb: IDictionary(Of TKey, TValue).Add(TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Add(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    nameWithType: IDictionary<TKey, TValue>.Add
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    nameWithType: IDictionary(Of TKey, TValue).Add
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.BlobStore.Clear*
  commentId: Overload:Microsoft.Health.BlobStore.Clear
  isExternal: false
  name: Clear
  nameWithType: BlobStore.Clear
  fullName: Microsoft.Health.BlobStore.Clear
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}}.Clear
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}}.Clear
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<KeyValuePair<String, Blob>>.Clear()
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.Blob>>.Clear()
  nameWithType.vb: ICollection(Of KeyValuePair(Of String, Blob)).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.Blob)).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<KeyValuePair<String, Blob>>.Clear
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.Blob>>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of KeyValuePair(Of String, Blob)).Clear
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.Blob)).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.BlobStore.Contains*
  commentId: Overload:Microsoft.Health.BlobStore.Contains
  isExternal: false
  name: Contains
  nameWithType: BlobStore.Contains
  fullName: Microsoft.Health.BlobStore.Contains
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Health.BlobStore.ContainsKey*
  commentId: Overload:Microsoft.Health.BlobStore.ContainsKey
  isExternal: false
  name: ContainsKey
  nameWithType: BlobStore.ContainsKey
  fullName: Microsoft.Health.BlobStore.ContainsKey
- uid: System.Collections.Generic.IDictionary{System.String,Microsoft.Health.Blob}.ContainsKey(System.String)
  commentId: M:System.Collections.Generic.IDictionary{System.String,Microsoft.Health.Blob}.ContainsKey(System.String)
  parent: System.Collections.Generic.IDictionary{System.String,Microsoft.Health.Blob}
  definition: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  name: ContainsKey(String)
  nameWithType: IDictionary<String, Blob>.ContainsKey(String)
  fullName: System.Collections.Generic.IDictionary<System.String, Microsoft.Health.Blob>.ContainsKey(System.String)
  nameWithType.vb: IDictionary(Of String, Blob).ContainsKey(String)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, Microsoft.Health.Blob).ContainsKey(System.String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IDictionary<String, Blob>.ContainsKey
    fullName: System.Collections.Generic.IDictionary<System.String, Microsoft.Health.Blob>.ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IDictionary(Of String, Blob).ContainsKey
    fullName: System.Collections.Generic.IDictionary(Of System.String, Microsoft.Health.Blob).ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  commentId: M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  isExternal: true
  name: ContainsKey(TKey)
  nameWithType: IDictionary<TKey, TValue>.ContainsKey(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)
  nameWithType.vb: IDictionary(Of TKey, TValue).ContainsKey(TKey)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).ContainsKey(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IDictionary<TKey, TValue>.ContainsKey
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IDictionary(Of TKey, TValue).ContainsKey
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: Microsoft.Health.BlobStore.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:Microsoft.Health.BlobStore.System#Collections#IEnumerable#GetEnumerator
  isExternal: false
  name: IEnumerable.GetEnumerator
  nameWithType: BlobStore.IEnumerable.GetEnumerator
  fullName: Microsoft.Health.BlobStore.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: BlobStore.System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.BlobStore.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#GetEnumerator*
  commentId: Overload:Microsoft.Health.BlobStore.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#GetEnumerator
  isExternal: false
  name: IEnumerable<KeyValuePair<String, Blob>>.GetEnumerator
  nameWithType: BlobStore.IEnumerable<KeyValuePair<String, Blob>>.GetEnumerator
  fullName: Microsoft.Health.BlobStore.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.Blob>>.GetEnumerator
  nameWithType.vb: BlobStore.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.GetEnumerator
  fullName.vb: Microsoft.Health.BlobStore.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.GetEnumerator
  name.vb: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<KeyValuePair<String, Blob>>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.Blob>>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of String, Blob)).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.Blob)).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<KeyValuePair<String, Blob>>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.Blob>>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of KeyValuePair(Of String, Blob)).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.Blob)).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}}
  commentId: T:System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<KeyValuePair<String, Blob>>
  nameWithType: IEnumerator<KeyValuePair<String, Blob>>
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.Blob>>
  nameWithType.vb: IEnumerator(Of KeyValuePair(Of String, Blob))
  fullName.vb: System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.Blob))
  name.vb: IEnumerator(Of KeyValuePair(Of String, Blob))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.Blob
    name: Blob
    nameWithType: Blob
    fullName: Microsoft.Health.Blob
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.Blob
    name: Blob
    nameWithType: Blob
    fullName: Microsoft.Health.Blob
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.BlobStore.Clear
  commentId: M:Microsoft.Health.BlobStore.Clear
- uid: Microsoft.Health.BlobStore.Remove(System.String)
  commentId: M:Microsoft.Health.BlobStore.Remove(System.String)
- uid: Microsoft.Health.BlobStore.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#IsReadOnly*
  commentId: Overload:Microsoft.Health.BlobStore.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#IsReadOnly
  isExternal: false
  name: ICollection<KeyValuePair<String, Blob>>.IsReadOnly
  nameWithType: BlobStore.ICollection<KeyValuePair<String, Blob>>.IsReadOnly
  fullName: Microsoft.Health.BlobStore.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.Blob>>.IsReadOnly
  nameWithType.vb: BlobStore.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.IsReadOnly
  fullName.vb: Microsoft.Health.BlobStore.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.IsReadOnly
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}}.IsReadOnly
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ICollection<KeyValuePair<String, Blob>>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.Blob>>.IsReadOnly
  nameWithType.vb: ICollection(Of KeyValuePair(Of String, Blob)).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.Blob)).IsReadOnly
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: Microsoft.Health.BlobStore.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#Remove*
  commentId: Overload:Microsoft.Health.BlobStore.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#Remove
  isExternal: false
  name: ICollection<KeyValuePair<String, Blob>>.Remove
  nameWithType: BlobStore.ICollection<KeyValuePair<String, Blob>>.Remove
  fullName: Microsoft.Health.BlobStore.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.Blob>>.Remove
  nameWithType.vb: BlobStore.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.Remove
  fullName.vb: Microsoft.Health.BlobStore.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.Remove
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.Remove
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}}.Remove(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob})
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}}.Remove(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(KeyValuePair<String, Blob>)
  nameWithType: ICollection<KeyValuePair<String, Blob>>.Remove(KeyValuePair<String, Blob>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.Blob>>.Remove(System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.Blob>)
  nameWithType.vb: ICollection(Of KeyValuePair(Of String, Blob)).Remove(KeyValuePair(Of String, Blob))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.Blob)).Remove(System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.Blob))
  name.vb: Remove(KeyValuePair(Of String, Blob))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<KeyValuePair<String, Blob>>.Remove
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.Blob>>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.Blob
    name: Blob
    nameWithType: Blob
    fullName: Microsoft.Health.Blob
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of KeyValuePair(Of String, Blob)).Remove
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.Blob)).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.Blob
    name: Blob
    nameWithType: Blob
    fullName: Microsoft.Health.Blob
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}
  commentId: T:System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.KeyValuePair`2
  name: KeyValuePair<String, Blob>
  nameWithType: KeyValuePair<String, Blob>
  fullName: System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.Blob>
  nameWithType.vb: KeyValuePair(Of String, Blob)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.Blob)
  name.vb: KeyValuePair(Of String, Blob)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.Blob
    name: Blob
    nameWithType: Blob
    fullName: Microsoft.Health.Blob
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.Blob
    name: Blob
    nameWithType: Blob
    fullName: Microsoft.Health.Blob
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair`2
  commentId: T:System.Collections.Generic.KeyValuePair`2
  isExternal: true
  name: KeyValuePair<TKey, TValue>
  nameWithType: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  nameWithType.vb: KeyValuePair(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Array
  commentId: T:System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: Microsoft.Health.BlobStore.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#CopyTo*
  commentId: Overload:Microsoft.Health.BlobStore.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#CopyTo
  isExternal: false
  name: ICollection<KeyValuePair<String, Blob>>.CopyTo
  nameWithType: BlobStore.ICollection<KeyValuePair<String, Blob>>.CopyTo
  fullName: Microsoft.Health.BlobStore.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.Blob>>.CopyTo
  nameWithType.vb: BlobStore.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.CopyTo
  fullName.vb: Microsoft.Health.BlobStore.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.CopyTo
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.CopyTo
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}}.CopyTo(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}}.CopyTo(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}[],System.Int32)
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(KeyValuePair<String, Blob>[], Int32)
  nameWithType: ICollection<KeyValuePair<String, Blob>>.CopyTo(KeyValuePair<String, Blob>[], Int32)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.Blob>>.CopyTo(System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.Blob>[], System.Int32)
  nameWithType.vb: ICollection(Of KeyValuePair(Of String, Blob)).CopyTo(KeyValuePair(Of String, Blob)(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.Blob)).CopyTo(System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.Blob)(), System.Int32)
  name.vb: CopyTo(KeyValuePair(Of String, Blob)(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<KeyValuePair<String, Blob>>.CopyTo
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.Blob>>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.Blob
    name: Blob
    nameWithType: Blob
    fullName: Microsoft.Health.Blob
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of KeyValuePair(Of String, Blob)).CopyTo
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.Blob)).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.Blob
    name: Blob
    nameWithType: Blob
    fullName: Microsoft.Health.Blob
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}[]
  name: KeyValuePair<String, Blob>[]
  nameWithType: KeyValuePair<String, Blob>[]
  fullName: System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.Blob>[]
  nameWithType.vb: KeyValuePair(Of String, Blob)()
  fullName.vb: System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.Blob)()
  name.vb: KeyValuePair(Of String, Blob)()
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.Blob
    name: Blob
    nameWithType: Blob
    fullName: Microsoft.Health.Blob
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.Blob
    name: Blob
    nameWithType: Blob
    fullName: Microsoft.Health.Blob
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.BlobStore.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#Contains*
  commentId: Overload:Microsoft.Health.BlobStore.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#Contains
  isExternal: false
  name: ICollection<KeyValuePair<String, Blob>>.Contains
  nameWithType: BlobStore.ICollection<KeyValuePair<String, Blob>>.Contains
  fullName: Microsoft.Health.BlobStore.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.Blob>>.Contains
  nameWithType.vb: BlobStore.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.Contains
  fullName.vb: Microsoft.Health.BlobStore.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.Contains
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.Contains
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}}.Contains(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob})
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}}.Contains(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(KeyValuePair<String, Blob>)
  nameWithType: ICollection<KeyValuePair<String, Blob>>.Contains(KeyValuePair<String, Blob>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.Blob>>.Contains(System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.Blob>)
  nameWithType.vb: ICollection(Of KeyValuePair(Of String, Blob)).Contains(KeyValuePair(Of String, Blob))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.Blob)).Contains(System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.Blob))
  name.vb: Contains(KeyValuePair(Of String, Blob))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<KeyValuePair<String, Blob>>.Contains
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.Blob>>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.Blob
    name: Blob
    nameWithType: Blob
    fullName: Microsoft.Health.Blob
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of KeyValuePair(Of String, Blob)).Contains
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.Blob)).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.Blob
    name: Blob
    nameWithType: Blob
    fullName: Microsoft.Health.Blob
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.BlobStore.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#Add*
  commentId: Overload:Microsoft.Health.BlobStore.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Health#Blob}}#Add
  isExternal: false
  name: ICollection<KeyValuePair<String, Blob>>.Add
  nameWithType: BlobStore.ICollection<KeyValuePair<String, Blob>>.Add
  fullName: Microsoft.Health.BlobStore.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.Blob>>.Add
  nameWithType.vb: BlobStore.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.Add
  fullName.vb: Microsoft.Health.BlobStore.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.Add
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Health.Blob>>.Add
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}}.Add(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob})
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}}.Add(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(KeyValuePair<String, Blob>)
  nameWithType: ICollection<KeyValuePair<String, Blob>>.Add(KeyValuePair<String, Blob>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.Blob>>.Add(System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.Blob>)
  nameWithType.vb: ICollection(Of KeyValuePair(Of String, Blob)).Add(KeyValuePair(Of String, Blob))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.Blob)).Add(System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.Blob))
  name.vb: Add(KeyValuePair(Of String, Blob))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<KeyValuePair<String, Blob>>.Add
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.Blob>>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.Blob
    name: Blob
    nameWithType: Blob
    fullName: Microsoft.Health.Blob
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of KeyValuePair(Of String, Blob)).Add
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.Blob)).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.Blob
    name: Blob
    nameWithType: Blob
    fullName: Microsoft.Health.Blob
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.BlobStore.Values*
  commentId: Overload:Microsoft.Health.BlobStore.Values
  isExternal: false
  name: Values
  nameWithType: BlobStore.Values
  fullName: Microsoft.Health.BlobStore.Values
- uid: System.Collections.Generic.IDictionary{System.String,Microsoft.Health.Blob}.Values
  commentId: P:System.Collections.Generic.IDictionary{System.String,Microsoft.Health.Blob}.Values
  parent: System.Collections.Generic.IDictionary{System.String,Microsoft.Health.Blob}
  definition: System.Collections.Generic.IDictionary`2.Values
  name: Values
  nameWithType: IDictionary<String, Blob>.Values
  fullName: System.Collections.Generic.IDictionary<System.String, Microsoft.Health.Blob>.Values
  nameWithType.vb: IDictionary(Of String, Blob).Values
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, Microsoft.Health.Blob).Values
- uid: System.Collections.Generic.ICollection{Microsoft.Health.Blob}
  commentId: T:System.Collections.Generic.ICollection{Microsoft.Health.Blob}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<Blob>
  nameWithType: ICollection<Blob>
  fullName: System.Collections.Generic.ICollection<Microsoft.Health.Blob>
  nameWithType.vb: ICollection(Of Blob)
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Health.Blob)
  name.vb: ICollection(Of Blob)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.Blob
    name: Blob
    nameWithType: Blob
    fullName: Microsoft.Health.Blob
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.Blob
    name: Blob
    nameWithType: Blob
    fullName: Microsoft.Health.Blob
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.Values
  commentId: P:System.Collections.Generic.IDictionary`2.Values
  isExternal: true
  name: Values
  nameWithType: IDictionary<TKey, TValue>.Values
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Values
  nameWithType.vb: IDictionary(Of TKey, TValue).Values
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Values
- uid: Microsoft.Health.BlobStore.Keys*
  commentId: Overload:Microsoft.Health.BlobStore.Keys
  isExternal: false
  name: Keys
  nameWithType: BlobStore.Keys
  fullName: Microsoft.Health.BlobStore.Keys
- uid: System.Collections.Generic.IDictionary{System.String,Microsoft.Health.Blob}.Keys
  commentId: P:System.Collections.Generic.IDictionary{System.String,Microsoft.Health.Blob}.Keys
  parent: System.Collections.Generic.IDictionary{System.String,Microsoft.Health.Blob}
  definition: System.Collections.Generic.IDictionary`2.Keys
  name: Keys
  nameWithType: IDictionary<String, Blob>.Keys
  fullName: System.Collections.Generic.IDictionary<System.String, Microsoft.Health.Blob>.Keys
  nameWithType.vb: IDictionary(Of String, Blob).Keys
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, Microsoft.Health.Blob).Keys
- uid: System.Collections.Generic.ICollection{System.String}
  commentId: T:System.Collections.Generic.ICollection{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<String>
  nameWithType: ICollection<String>
  fullName: System.Collections.Generic.ICollection<System.String>
  nameWithType.vb: ICollection(Of String)
  fullName.vb: System.Collections.Generic.ICollection(Of System.String)
  name.vb: ICollection(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.Keys
  commentId: P:System.Collections.Generic.IDictionary`2.Keys
  isExternal: true
  name: Keys
  nameWithType: IDictionary<TKey, TValue>.Keys
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Keys
  nameWithType.vb: IDictionary(Of TKey, TValue).Keys
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Keys
- uid: Microsoft.Health.BlobStore.TryGetValue*
  commentId: Overload:Microsoft.Health.BlobStore.TryGetValue
  isExternal: false
  name: TryGetValue
  nameWithType: BlobStore.TryGetValue
  fullName: Microsoft.Health.BlobStore.TryGetValue
- uid: System.Collections.Generic.IDictionary{System.String,Microsoft.Health.Blob}.TryGetValue(System.String,Microsoft.Health.Blob@)
  commentId: M:System.Collections.Generic.IDictionary{System.String,Microsoft.Health.Blob}.TryGetValue(System.String,Microsoft.Health.Blob@)
  parent: System.Collections.Generic.IDictionary{System.String,Microsoft.Health.Blob}
  definition: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  name: TryGetValue(String, Blob)
  nameWithType: IDictionary<String, Blob>.TryGetValue(String, Blob)
  fullName: System.Collections.Generic.IDictionary<System.String, Microsoft.Health.Blob>.TryGetValue(System.String, Microsoft.Health.Blob)
  nameWithType.vb: IDictionary(Of String, Blob).TryGetValue(String, Blob)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, Microsoft.Health.Blob).TryGetValue(System.String, Microsoft.Health.Blob)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: IDictionary<String, Blob>.TryGetValue
    fullName: System.Collections.Generic.IDictionary<System.String, Microsoft.Health.Blob>.TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.Blob
    name: Blob
    nameWithType: Blob
    fullName: Microsoft.Health.Blob
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: IDictionary(Of String, Blob).TryGetValue
    fullName: System.Collections.Generic.IDictionary(Of System.String, Microsoft.Health.Blob).TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.Blob
    name: Blob
    nameWithType: Blob
    fullName: Microsoft.Health.Blob
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  commentId: M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  isExternal: true
  name: TryGetValue(TKey, TValue)
  nameWithType: IDictionary<TKey, TValue>.TryGetValue(TKey, TValue)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.TryGetValue(TKey, TValue)
  nameWithType.vb: IDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: IDictionary<TKey, TValue>.TryGetValue
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: IDictionary(Of TKey, TValue).TryGetValue
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.BlobStore.Remove*
  commentId: Overload:Microsoft.Health.BlobStore.Remove
  isExternal: false
  name: Remove
  nameWithType: BlobStore.Remove
  fullName: Microsoft.Health.BlobStore.Remove
- uid: System.Collections.Generic.IDictionary{System.String,Microsoft.Health.Blob}.Remove(System.String)
  commentId: M:System.Collections.Generic.IDictionary{System.String,Microsoft.Health.Blob}.Remove(System.String)
  parent: System.Collections.Generic.IDictionary{System.String,Microsoft.Health.Blob}
  definition: System.Collections.Generic.IDictionary`2.Remove(`0)
  name: Remove(String)
  nameWithType: IDictionary<String, Blob>.Remove(String)
  fullName: System.Collections.Generic.IDictionary<System.String, Microsoft.Health.Blob>.Remove(System.String)
  nameWithType.vb: IDictionary(Of String, Blob).Remove(String)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, Microsoft.Health.Blob).Remove(System.String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    nameWithType: IDictionary<String, Blob>.Remove
    fullName: System.Collections.Generic.IDictionary<System.String, Microsoft.Health.Blob>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    nameWithType: IDictionary(Of String, Blob).Remove
    fullName: System.Collections.Generic.IDictionary(Of System.String, Microsoft.Health.Blob).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.Remove(`0)
  commentId: M:System.Collections.Generic.IDictionary`2.Remove(`0)
  isExternal: true
  name: Remove(TKey)
  nameWithType: IDictionary<TKey, TValue>.Remove(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Remove(TKey)
  nameWithType.vb: IDictionary(Of TKey, TValue).Remove(TKey)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Remove(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    nameWithType: IDictionary<TKey, TValue>.Remove
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    nameWithType: IDictionary(Of TKey, TValue).Remove
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.BlobStore.Item*
  commentId: Overload:Microsoft.Health.BlobStore.Item
  isExternal: false
  name: Item
  nameWithType: BlobStore.Item
  fullName: Microsoft.Health.BlobStore.Item
- uid: System.Collections.Generic.IDictionary{System.String,Microsoft.Health.Blob}.Item(System.String)
  commentId: P:System.Collections.Generic.IDictionary{System.String,Microsoft.Health.Blob}.Item(System.String)
  parent: System.Collections.Generic.IDictionary{System.String,Microsoft.Health.Blob}
  definition: System.Collections.Generic.IDictionary`2.Item(`0)
  name: Item[String]
  nameWithType: IDictionary<String, Blob>.Item[String]
  fullName: System.Collections.Generic.IDictionary<System.String, Microsoft.Health.Blob>.Item[System.String]
  nameWithType.vb: IDictionary(Of String, Blob).Item(String)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, Microsoft.Health.Blob).Item(System.String)
  name.vb: Item(String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    nameWithType: IDictionary<String, Blob>.Item
    fullName: System.Collections.Generic.IDictionary<System.String, Microsoft.Health.Blob>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    nameWithType: IDictionary(Of String, Blob).Item
    fullName: System.Collections.Generic.IDictionary(Of System.String, Microsoft.Health.Blob).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.Item(`0)
  commentId: P:System.Collections.Generic.IDictionary`2.Item(`0)
  isExternal: true
  name: Item[TKey]
  nameWithType: IDictionary<TKey, TValue>.Item[TKey]
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Item[TKey]
  nameWithType.vb: IDictionary(Of TKey, TValue).Item(TKey)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Item(TKey)
  name.vb: Item(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    nameWithType: IDictionary<TKey, TValue>.Item
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    nameWithType: IDictionary(Of TKey, TValue).Item
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String.Empty
  commentId: F:System.String.Empty
- uid: Microsoft.Health.Blob.GetWriterStream
  commentId: M:Microsoft.Health.Blob.GetWriterStream
- uid: Microsoft.Health.BlobStore.WriteInline*
  commentId: Overload:Microsoft.Health.BlobStore.WriteInline
  isExternal: false
  name: WriteInline
  nameWithType: BlobStore.WriteInline
  fullName: Microsoft.Health.BlobStore.WriteInline
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.Health.BlobStore.Write*
  commentId: Overload:Microsoft.Health.BlobStore.Write
  isExternal: false
  name: Write
  nameWithType: BlobStore.Write
  fullName: Microsoft.Health.BlobStore.Write
- uid: Microsoft.Health.HealthServiceException
  commentId: T:Microsoft.Health.HealthServiceException
  parent: Microsoft.Health
  isExternal: false
  name: HealthServiceException
  nameWithType: HealthServiceException
  fullName: Microsoft.Health.HealthServiceException
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO
  commentId: N:System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: Microsoft.Health.BlobStore.NewBlob*
  commentId: Overload:Microsoft.Health.BlobStore.NewBlob
  isExternal: false
  name: NewBlob
  nameWithType: BlobStore.NewBlob
  fullName: Microsoft.Health.BlobStore.NewBlob
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: Microsoft.Health.HealthRecordItem
  commentId: T:Microsoft.Health.HealthRecordItem
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordItem
  nameWithType: HealthRecordItem
  fullName: Microsoft.Health.HealthRecordItem
- uid: Microsoft.Health.BlobHashInfo
  commentId: T:Microsoft.Health.BlobHashInfo
  parent: Microsoft.Health
  isExternal: false
  name: BlobHashInfo
  nameWithType: BlobHashInfo
  fullName: Microsoft.Health.BlobHashInfo
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
