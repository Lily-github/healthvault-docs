### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.Authentication.CryptoConfiguration
  commentId: T:Microsoft.Health.Authentication.CryptoConfiguration
  id: CryptoConfiguration
  parent: Microsoft.Health.Authentication
  children:
  - Microsoft.Health.Authentication.CryptoConfiguration.CreateHashAlgorithm
  - Microsoft.Health.Authentication.CryptoConfiguration.CreateHashAlgorithm(System.String)
  - Microsoft.Health.Authentication.CryptoConfiguration.CreateHmac(System.Byte[])
  - Microsoft.Health.Authentication.CryptoConfiguration.CreateHmac(System.String)
  - Microsoft.Health.Authentication.CryptoConfiguration.CreateHmac(System.String,System.Byte[])
  - Microsoft.Health.Authentication.CryptoConfiguration.CreateSymmetricAlgorithm(System.String,System.Byte[])
  - Microsoft.Health.Authentication.CryptoConfiguration.CryptoServiceProviderName
  - Microsoft.Health.Authentication.CryptoConfiguration.GenerateHmacSharedSecret
  - Microsoft.Health.Authentication.CryptoConfiguration.HashAlgorithmName
  - Microsoft.Health.Authentication.CryptoConfiguration.HmacAlgorithmName
  - Microsoft.Health.Authentication.CryptoConfiguration.SignatureAlgorithmName
  - Microsoft.Health.Authentication.CryptoConfiguration.SignatureHashAlgorithmName
  - Microsoft.Health.Authentication.CryptoConfiguration.SymmetricAlgorithmName
  langs:
  - csharp
  - vb
  name: CryptoConfiguration
  nameWithType: CryptoConfiguration
  fullName: Microsoft.Health.Authentication.CryptoConfiguration
  type: Class
  source:
    remote:
      path: Microsoft.Health/Authentication/CryptoConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CryptoConfiguration
    path: ../Microsoft.Health/Authentication/CryptoConfiguration.cs
    startLine: 16
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Authentication
  summary: "\nProvides access to both application-level settings and \nmethods to both specify and construct cryptographic primitives.\n"
  example: []
  syntax:
    content: public static class CryptoConfiguration
    content.vb: Public Module CryptoConfiguration
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Health.Authentication.CryptoConfiguration.HmacAlgorithmName
  commentId: P:Microsoft.Health.Authentication.CryptoConfiguration.HmacAlgorithmName
  id: HmacAlgorithmName
  parent: Microsoft.Health.Authentication.CryptoConfiguration
  langs:
  - csharp
  - vb
  name: HmacAlgorithmName
  nameWithType: CryptoConfiguration.HmacAlgorithmName
  fullName: Microsoft.Health.Authentication.CryptoConfiguration.HmacAlgorithmName
  type: Property
  source:
    remote:
      path: Microsoft.Health/Authentication/CryptoConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: HmacAlgorithmName
    path: ../Microsoft.Health/Authentication/CryptoConfiguration.cs
    startLine: 36
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Authentication
  summary: "\nGets the preferred application-wide Hash Message Authentication Code \n(HMAC) algorithm name.\n"
  remarks: "\nThe application-wide algorithm name may be specified in the \nconfiguration, but if it is not, then a default value is used.  \nThis algorithm name can be used to construct an HMAC primitive \nusing <xref href=\"Microsoft.Health.Authentication.CryptoConfiguration.CreateHmac(System.String)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static string HmacAlgorithmName { get; }
    content.vb: Public Shared ReadOnly Property HmacAlgorithmName As String
    parameters: []
    return:
      type: System.String
      description: "\nThe HMAC algorithm name.\n"
  overload: Microsoft.Health.Authentication.CryptoConfiguration.HmacAlgorithmName*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Health.Authentication.CryptoConfiguration.GenerateHmacSharedSecret
  commentId: M:Microsoft.Health.Authentication.CryptoConfiguration.GenerateHmacSharedSecret
  id: GenerateHmacSharedSecret
  parent: Microsoft.Health.Authentication.CryptoConfiguration
  langs:
  - csharp
  - vb
  name: GenerateHmacSharedSecret()
  nameWithType: CryptoConfiguration.GenerateHmacSharedSecret()
  fullName: Microsoft.Health.Authentication.CryptoConfiguration.GenerateHmacSharedSecret()
  type: Method
  source:
    remote:
      path: Microsoft.Health/Authentication/CryptoConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GenerateHmacSharedSecret
    path: ../Microsoft.Health/Authentication/CryptoConfiguration.cs
    startLine: 51
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Authentication
  summary: "\nGenerates an HMAC shared secret for the default HMAC algorithm.\n"
  example: []
  syntax:
    content: public static byte[] GenerateHmacSharedSecret()
    content.vb: Public Shared Function GenerateHmacSharedSecret As Byte()
    return:
      type: System.Byte[]
      description: "\nA byte array representing the HMAC shared secret.\n"
  overload: Microsoft.Health.Authentication.CryptoConfiguration.GenerateHmacSharedSecret*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Authentication.CryptoConfiguration.HashAlgorithmName
  commentId: P:Microsoft.Health.Authentication.CryptoConfiguration.HashAlgorithmName
  id: HashAlgorithmName
  parent: Microsoft.Health.Authentication.CryptoConfiguration
  langs:
  - csharp
  - vb
  name: HashAlgorithmName
  nameWithType: CryptoConfiguration.HashAlgorithmName
  fullName: Microsoft.Health.Authentication.CryptoConfiguration.HashAlgorithmName
  type: Property
  source:
    remote:
      path: Microsoft.Health/Authentication/CryptoConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: HashAlgorithmName
    path: ../Microsoft.Health/Authentication/CryptoConfiguration.cs
    startLine: 73
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Authentication
  summary: "\nGets the preferred application-wide hash algorithm name.\n"
  remarks: "\nThe application-wide algorithm name can be specified in the \nconfiguration, but if it is not, then a default value is used.  \nThis algorithm name can be used to construct a hash primitive using\n<xref href=\"Microsoft.Health.Authentication.CryptoConfiguration.CreateHashAlgorithm(System.String)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static string HashAlgorithmName { get; }
    content.vb: Public Shared ReadOnly Property HashAlgorithmName As String
    parameters: []
    return:
      type: System.String
      description: "\nA string representing the algorithm name.\n"
  overload: Microsoft.Health.Authentication.CryptoConfiguration.HashAlgorithmName*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Health.Authentication.CryptoConfiguration.SignatureHashAlgorithmName
  commentId: P:Microsoft.Health.Authentication.CryptoConfiguration.SignatureHashAlgorithmName
  id: SignatureHashAlgorithmName
  parent: Microsoft.Health.Authentication.CryptoConfiguration
  langs:
  - csharp
  - vb
  name: SignatureHashAlgorithmName
  nameWithType: CryptoConfiguration.SignatureHashAlgorithmName
  fullName: Microsoft.Health.Authentication.CryptoConfiguration.SignatureHashAlgorithmName
  type: Property
  source:
    remote:
      path: Microsoft.Health/Authentication/CryptoConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SignatureHashAlgorithmName
    path: ../Microsoft.Health/Authentication/CryptoConfiguration.cs
    startLine: 96
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Authentication
  summary: "\nGets the preferred application-wide hash algorithm name for \ncomputing digests to be used for signature generation.\n"
  remarks: "\nThe application-wide algorithm name can be specified in the \nconfiguration, but if it is not, then a default value is used.  \nThis algorithm name can be used to construct a hash primitive using\n<xref href=\"Microsoft.Health.Authentication.CryptoConfiguration.CreateHashAlgorithm(System.String)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static string SignatureHashAlgorithmName { get; }
    content.vb: Public Shared ReadOnly Property SignatureHashAlgorithmName As String
    parameters: []
    return:
      type: System.String
      description: "\nA string representing the algorithm name.\n"
  overload: Microsoft.Health.Authentication.CryptoConfiguration.SignatureHashAlgorithmName*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Health.Authentication.CryptoConfiguration.SignatureAlgorithmName
  commentId: P:Microsoft.Health.Authentication.CryptoConfiguration.SignatureAlgorithmName
  id: SignatureAlgorithmName
  parent: Microsoft.Health.Authentication.CryptoConfiguration
  langs:
  - csharp
  - vb
  name: SignatureAlgorithmName
  nameWithType: CryptoConfiguration.SignatureAlgorithmName
  fullName: Microsoft.Health.Authentication.CryptoConfiguration.SignatureAlgorithmName
  type: Property
  source:
    remote:
      path: Microsoft.Health/Authentication/CryptoConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SignatureAlgorithmName
    path: ../Microsoft.Health/Authentication/CryptoConfiguration.cs
    startLine: 120
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Authentication
  summary: "\nGets the preferred application-wide signature algorithm name.\n"
  remarks: "\nThe application-wide algorithm name can be specified in the \nconfiguration, but if it is not, then a default value is used.  \nThe signature signing algorithm is currently RSA. The RSA algorithm\nname is prepended to the default \n<xref href=\"Microsoft.Health.Authentication.CryptoConfiguration.SignatureHashAlgorithmName\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static string SignatureAlgorithmName { get; }
    content.vb: Public Shared ReadOnly Property SignatureAlgorithmName As String
    parameters: []
    return:
      type: System.String
      description: "\nA string representing the signature algorithm name.\n"
  overload: Microsoft.Health.Authentication.CryptoConfiguration.SignatureAlgorithmName*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Health.Authentication.CryptoConfiguration.SymmetricAlgorithmName
  commentId: P:Microsoft.Health.Authentication.CryptoConfiguration.SymmetricAlgorithmName
  id: SymmetricAlgorithmName
  parent: Microsoft.Health.Authentication.CryptoConfiguration
  langs:
  - csharp
  - vb
  name: SymmetricAlgorithmName
  nameWithType: CryptoConfiguration.SymmetricAlgorithmName
  fullName: Microsoft.Health.Authentication.CryptoConfiguration.SymmetricAlgorithmName
  type: Property
  source:
    remote:
      path: Microsoft.Health/Authentication/CryptoConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SymmetricAlgorithmName
    path: ../Microsoft.Health/Authentication/CryptoConfiguration.cs
    startLine: 143
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Authentication
  summary: "\nGets the preferred application-wide symmetric algorithm name.\n"
  remarks: "\nThe application-wide algorithm name can be specified in the \nconfiguration, but if it is not, then a default value is used.  \nThe symmetric algorithm name can be used to construct a\nsymmetric algorithm via <xref href=\"Microsoft.Health.Authentication.CryptoConfiguration.CreateSymmetricAlgorithm(System.String%2cSystem.Byte%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static string SymmetricAlgorithmName { get; }
    content.vb: Public Shared ReadOnly Property SymmetricAlgorithmName As String
    parameters: []
    return:
      type: System.String
      description: "\nA string representing the default symmetric algorithm name.\n"
  overload: Microsoft.Health.Authentication.CryptoConfiguration.SymmetricAlgorithmName*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Health.Authentication.CryptoConfiguration.CreateHmac(System.String,System.Byte[])
  commentId: M:Microsoft.Health.Authentication.CryptoConfiguration.CreateHmac(System.String,System.Byte[])
  id: CreateHmac(System.String,System.Byte[])
  parent: Microsoft.Health.Authentication.CryptoConfiguration
  langs:
  - csharp
  - vb
  name: CreateHmac(String, Byte[])
  nameWithType: CryptoConfiguration.CreateHmac(String, Byte[])
  fullName: Microsoft.Health.Authentication.CryptoConfiguration.CreateHmac(System.String, System.Byte[])
  type: Method
  source:
    remote:
      path: Microsoft.Health/Authentication/CryptoConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CreateHmac
    path: ../Microsoft.Health/Authentication/CryptoConfiguration.cs
    startLine: 178
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Authentication
  summary: "\nCreates a new Hash Message Authentication Code (HMAC) instance \nusing the specified <span class=\"paramref\">algorithmName</span> and \n<span class=\"paramref\">keyMaterial</span>.\n"
  example: []
  syntax:
    content: public static HMAC CreateHmac(string algorithmName, byte[] keyMaterial)
    content.vb: Public Shared Function CreateHmac(algorithmName As String, keyMaterial As Byte()) As HMAC
    parameters:
    - id: algorithmName
      type: System.String
      description: "\nThe well-known algorithm name that specifies the HMAC primitive.\n"
    - id: keyMaterial
      type: System.Byte[]
      description: "\nThe provided key material to be used as the HMAC key.\n"
    return:
      type: System.Security.Cryptography.HMAC
      description: "\nA new HMAC instance.\n"
  overload: Microsoft.Health.Authentication.CryptoConfiguration.CreateHmac*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">algorithmName</span> parameter is <strong>null</strong> or empty.\nThe <span class=\"paramref\">algorithmName</span> parameter is not of type HMAC.\nThe <span class=\"paramref\">keyMaterial</span> parameter is <strong>null</strong> or empty.\n"
  nameWithType.vb: CryptoConfiguration.CreateHmac(String, Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Authentication.CryptoConfiguration.CreateHmac(System.String, System.Byte())
  name.vb: CreateHmac(String, Byte())
- uid: Microsoft.Health.Authentication.CryptoConfiguration.CreateHmac(System.String)
  commentId: M:Microsoft.Health.Authentication.CryptoConfiguration.CreateHmac(System.String)
  id: CreateHmac(System.String)
  parent: Microsoft.Health.Authentication.CryptoConfiguration
  langs:
  - csharp
  - vb
  name: CreateHmac(String)
  nameWithType: CryptoConfiguration.CreateHmac(String)
  fullName: Microsoft.Health.Authentication.CryptoConfiguration.CreateHmac(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/Authentication/CryptoConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CreateHmac
    path: ../Microsoft.Health/Authentication/CryptoConfiguration.cs
    startLine: 233
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Authentication
  summary: "\nCreates a new Hash Message Authentication Code (HMAC) instance \nbased on the specified <span class=\"paramref\">algorithmName</span>.\n"
  remarks: "\nSince this method does not take user-specified keyMaterial,\nthe caller must set the key after this call and before using the \nHMAC algorithm.\n"
  example: []
  syntax:
    content: public static HMAC CreateHmac(string algorithmName)
    content.vb: Public Shared Function CreateHmac(algorithmName As String) As HMAC
    parameters:
    - id: algorithmName
      type: System.String
      description: "\nThe well-known algorithm name which specifies the HMAC primitive.\n"
    return:
      type: System.Security.Cryptography.HMAC
      description: "\nA new HMAC instance of type <span class=\"paramref\">algorithmName</span>.\n"
  overload: Microsoft.Health.Authentication.CryptoConfiguration.CreateHmac*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">algorithmName</span> parameter is <strong>null</strong> or empty.\nThe <span class=\"paramref\">algorithmName</span> parameter is not of type HMAC.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Authentication.CryptoConfiguration.CreateHmac(System.Byte[])
  commentId: M:Microsoft.Health.Authentication.CryptoConfiguration.CreateHmac(System.Byte[])
  id: CreateHmac(System.Byte[])
  parent: Microsoft.Health.Authentication.CryptoConfiguration
  langs:
  - csharp
  - vb
  name: CreateHmac(Byte[])
  nameWithType: CryptoConfiguration.CreateHmac(Byte[])
  fullName: Microsoft.Health.Authentication.CryptoConfiguration.CreateHmac(System.Byte[])
  type: Method
  source:
    remote:
      path: Microsoft.Health/Authentication/CryptoConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CreateHmac
    path: ../Microsoft.Health/Authentication/CryptoConfiguration.cs
    startLine: 268
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Authentication
  summary: "\nCreates a new Hash Message Authentication Code (HMAC) based on \nthe current key.\n"
  example: []
  syntax:
    content: public static HMAC CreateHmac(byte[] keyMaterial)
    content.vb: Public Shared Function CreateHmac(keyMaterial As Byte()) As HMAC
    parameters:
    - id: keyMaterial
      type: System.Byte[]
      description: "\nThe provided key material to be used as the HMAC key.\n"
    return:
      type: System.Security.Cryptography.HMAC
      description: "\nA new HMAC instance using <xref href=\"Microsoft.Health.Authentication.CryptoConfiguration.HmacAlgorithmName\" data-throw-if-not-resolved=\"false\"></xref> \nand the provided <span class=\"paramref\">keyMaterial</span>.  \n"
  overload: Microsoft.Health.Authentication.CryptoConfiguration.CreateHmac*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">keyMaterial</span> parameter is <strong>null</strong> or empty.\n"
  seealso:
  - linkId: Microsoft.Health.Authentication.CryptoConfiguration.HmacAlgorithmName
    commentId: P:Microsoft.Health.Authentication.CryptoConfiguration.HmacAlgorithmName
  nameWithType.vb: CryptoConfiguration.CreateHmac(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Authentication.CryptoConfiguration.CreateHmac(System.Byte())
  name.vb: CreateHmac(Byte())
- uid: Microsoft.Health.Authentication.CryptoConfiguration.CreateHashAlgorithm(System.String)
  commentId: M:Microsoft.Health.Authentication.CryptoConfiguration.CreateHashAlgorithm(System.String)
  id: CreateHashAlgorithm(System.String)
  parent: Microsoft.Health.Authentication.CryptoConfiguration
  langs:
  - csharp
  - vb
  name: CreateHashAlgorithm(String)
  nameWithType: CryptoConfiguration.CreateHashAlgorithm(String)
  fullName: Microsoft.Health.Authentication.CryptoConfiguration.CreateHashAlgorithm(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/Authentication/CryptoConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CreateHashAlgorithm
    path: ../Microsoft.Health/Authentication/CryptoConfiguration.cs
    startLine: 295
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Authentication
  summary: "\nCreates a new hash algorithm based on the specified \n<span class=\"paramref\">algorithmName</span>.\n"
  example: []
  syntax:
    content: public static HashAlgorithm CreateHashAlgorithm(string algorithmName)
    content.vb: Public Shared Function CreateHashAlgorithm(algorithmName As String) As HashAlgorithm
    parameters:
    - id: algorithmName
      type: System.String
      description: "\nThe well-known algorithm name that specifies the Hash Message \nAuthentication Code (HMAC) primitive.\n"
    return:
      type: System.Security.Cryptography.HashAlgorithm
      description: "\nA new hash algorithm of type <span class=\"paramref\">algorithmName</span>.\n"
  overload: Microsoft.Health.Authentication.CryptoConfiguration.CreateHashAlgorithm*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">algorithmName</span> parameter is not supported.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Authentication.CryptoConfiguration.CreateHashAlgorithm
  commentId: M:Microsoft.Health.Authentication.CryptoConfiguration.CreateHashAlgorithm
  id: CreateHashAlgorithm
  parent: Microsoft.Health.Authentication.CryptoConfiguration
  langs:
  - csharp
  - vb
  name: CreateHashAlgorithm()
  nameWithType: CryptoConfiguration.CreateHashAlgorithm()
  fullName: Microsoft.Health.Authentication.CryptoConfiguration.CreateHashAlgorithm()
  type: Method
  source:
    remote:
      path: Microsoft.Health/Authentication/CryptoConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CreateHashAlgorithm
    path: ../Microsoft.Health/Authentication/CryptoConfiguration.cs
    startLine: 351
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Authentication
  summary: "\nCreates a new hash algorithm with default values.\n"
  example: []
  syntax:
    content: public static HashAlgorithm CreateHashAlgorithm()
    content.vb: Public Shared Function CreateHashAlgorithm As HashAlgorithm
    return:
      type: System.Security.Cryptography.HashAlgorithm
      description: "\nAn instance of <xref href=\"Microsoft.Health.Authentication.CryptoConfiguration.HashAlgorithmName\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  overload: Microsoft.Health.Authentication.CryptoConfiguration.CreateHashAlgorithm*
  seealso:
  - linkId: Microsoft.Health.Authentication.CryptoConfiguration.HashAlgorithmName
    commentId: P:Microsoft.Health.Authentication.CryptoConfiguration.HashAlgorithmName
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Authentication.CryptoConfiguration.CreateSymmetricAlgorithm(System.String,System.Byte[])
  commentId: M:Microsoft.Health.Authentication.CryptoConfiguration.CreateSymmetricAlgorithm(System.String,System.Byte[])
  id: CreateSymmetricAlgorithm(System.String,System.Byte[])
  parent: Microsoft.Health.Authentication.CryptoConfiguration
  langs:
  - csharp
  - vb
  name: CreateSymmetricAlgorithm(String, Byte[])
  nameWithType: CryptoConfiguration.CreateSymmetricAlgorithm(String, Byte[])
  fullName: Microsoft.Health.Authentication.CryptoConfiguration.CreateSymmetricAlgorithm(System.String, System.Byte[])
  type: Method
  source:
    remote:
      path: Microsoft.Health/Authentication/CryptoConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CreateSymmetricAlgorithm
    path: ../Microsoft.Health/Authentication/CryptoConfiguration.cs
    startLine: 380
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Authentication
  summary: "\nConstructs a symmetric key algorithm based on the specified \n<span class=\"paramref\">algorithmName</span> and <span class=\"paramref\">keyMaterial</span>.\n"
  example: []
  syntax:
    content: public static SymmetricAlgorithm CreateSymmetricAlgorithm(string algorithmName, byte[] keyMaterial)
    content.vb: Public Shared Function CreateSymmetricAlgorithm(algorithmName As String, keyMaterial As Byte()) As SymmetricAlgorithm
    parameters:
    - id: algorithmName
      type: System.String
      description: "\nThe well-known algorithm name that specifies the symmetric \nalgorithm primitive.\n"
    - id: keyMaterial
      type: System.Byte[]
      description: "\nThe provided key material to be used as the Hash Message \nAuthentication Code (HMAC) key.\n"
    return:
      type: System.Security.Cryptography.SymmetricAlgorithm
      description: "\nA new symmetric key of type <span class=\"paramref\">algorithmName</span>.\n"
  overload: Microsoft.Health.Authentication.CryptoConfiguration.CreateSymmetricAlgorithm*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">algorithmName</span> parameter is not supported,\nor the <span class=\"paramref\">keyMaterial</span> parameter is invalid.\n"
  nameWithType.vb: CryptoConfiguration.CreateSymmetricAlgorithm(String, Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Authentication.CryptoConfiguration.CreateSymmetricAlgorithm(System.String, System.Byte())
  name.vb: CreateSymmetricAlgorithm(String, Byte())
- uid: Microsoft.Health.Authentication.CryptoConfiguration.CryptoServiceProviderName
  commentId: P:Microsoft.Health.Authentication.CryptoConfiguration.CryptoServiceProviderName
  id: CryptoServiceProviderName
  parent: Microsoft.Health.Authentication.CryptoConfiguration
  langs:
  - csharp
  - vb
  name: CryptoServiceProviderName
  nameWithType: CryptoConfiguration.CryptoServiceProviderName
  fullName: Microsoft.Health.Authentication.CryptoConfiguration.CryptoServiceProviderName
  type: Property
  source:
    remote:
      path: Microsoft.Health/Authentication/CryptoConfiguration.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CryptoServiceProviderName
    path: ../Microsoft.Health/Authentication/CryptoConfiguration.cs
    startLine: 465
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Authentication
  summary: "\nGets the name of the crypto service provider for the currently\nrunning operating system version.\n\n"
  example: []
  syntax:
    content: public static string CryptoServiceProviderName { get; }
    content.vb: Public Shared ReadOnly Property CryptoServiceProviderName As String
    parameters: []
    return:
      type: System.String
      description: ''
  overload: Microsoft.Health.Authentication.CryptoConfiguration.CryptoServiceProviderName*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
references:
- uid: Microsoft.Health.Authentication
  commentId: N:Microsoft.Health.Authentication
  isExternal: false
  name: Microsoft.Health.Authentication
  nameWithType: Microsoft.Health.Authentication
  fullName: Microsoft.Health.Authentication
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Authentication.CryptoConfiguration.CreateHmac(System.String)
  commentId: M:Microsoft.Health.Authentication.CryptoConfiguration.CreateHmac(System.String)
- uid: Microsoft.Health.Authentication.CryptoConfiguration.HmacAlgorithmName*
  commentId: Overload:Microsoft.Health.Authentication.CryptoConfiguration.HmacAlgorithmName
  isExternal: false
  name: HmacAlgorithmName
  nameWithType: CryptoConfiguration.HmacAlgorithmName
  fullName: Microsoft.Health.Authentication.CryptoConfiguration.HmacAlgorithmName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Health.Authentication.CryptoConfiguration.GenerateHmacSharedSecret*
  commentId: Overload:Microsoft.Health.Authentication.CryptoConfiguration.GenerateHmacSharedSecret
  isExternal: false
  name: GenerateHmacSharedSecret
  nameWithType: CryptoConfiguration.GenerateHmacSharedSecret
  fullName: Microsoft.Health.Authentication.CryptoConfiguration.GenerateHmacSharedSecret
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.Health.Authentication.CryptoConfiguration.CreateHashAlgorithm(System.String)
  commentId: M:Microsoft.Health.Authentication.CryptoConfiguration.CreateHashAlgorithm(System.String)
- uid: Microsoft.Health.Authentication.CryptoConfiguration.HashAlgorithmName*
  commentId: Overload:Microsoft.Health.Authentication.CryptoConfiguration.HashAlgorithmName
  isExternal: false
  name: HashAlgorithmName
  nameWithType: CryptoConfiguration.HashAlgorithmName
  fullName: Microsoft.Health.Authentication.CryptoConfiguration.HashAlgorithmName
- uid: Microsoft.Health.Authentication.CryptoConfiguration.SignatureHashAlgorithmName*
  commentId: Overload:Microsoft.Health.Authentication.CryptoConfiguration.SignatureHashAlgorithmName
  isExternal: false
  name: SignatureHashAlgorithmName
  nameWithType: CryptoConfiguration.SignatureHashAlgorithmName
  fullName: Microsoft.Health.Authentication.CryptoConfiguration.SignatureHashAlgorithmName
- uid: Microsoft.Health.Authentication.CryptoConfiguration.SignatureHashAlgorithmName
  commentId: P:Microsoft.Health.Authentication.CryptoConfiguration.SignatureHashAlgorithmName
- uid: Microsoft.Health.Authentication.CryptoConfiguration.SignatureAlgorithmName*
  commentId: Overload:Microsoft.Health.Authentication.CryptoConfiguration.SignatureAlgorithmName
  isExternal: false
  name: SignatureAlgorithmName
  nameWithType: CryptoConfiguration.SignatureAlgorithmName
  fullName: Microsoft.Health.Authentication.CryptoConfiguration.SignatureAlgorithmName
- uid: Microsoft.Health.Authentication.CryptoConfiguration.CreateSymmetricAlgorithm(System.String,System.Byte[])
  commentId: M:Microsoft.Health.Authentication.CryptoConfiguration.CreateSymmetricAlgorithm(System.String,System.Byte[])
- uid: Microsoft.Health.Authentication.CryptoConfiguration.SymmetricAlgorithmName*
  commentId: Overload:Microsoft.Health.Authentication.CryptoConfiguration.SymmetricAlgorithmName
  isExternal: false
  name: SymmetricAlgorithmName
  nameWithType: CryptoConfiguration.SymmetricAlgorithmName
  fullName: Microsoft.Health.Authentication.CryptoConfiguration.SymmetricAlgorithmName
- uid: Microsoft.Health.Authentication.CryptoConfiguration.CreateHmac*
  commentId: Overload:Microsoft.Health.Authentication.CryptoConfiguration.CreateHmac
  isExternal: false
  name: CreateHmac
  nameWithType: CryptoConfiguration.CreateHmac
  fullName: Microsoft.Health.Authentication.CryptoConfiguration.CreateHmac
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: System.Security.Cryptography.HMAC
  commentId: T:System.Security.Cryptography.HMAC
  parent: System.Security.Cryptography
  isExternal: true
  name: HMAC
  nameWithType: HMAC
  fullName: System.Security.Cryptography.HMAC
- uid: System.Security.Cryptography
  commentId: N:System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  nameWithType: System.Security.Cryptography
  fullName: System.Security.Cryptography
- uid: Microsoft.Health.Authentication.CryptoConfiguration.HmacAlgorithmName
  commentId: P:Microsoft.Health.Authentication.CryptoConfiguration.HmacAlgorithmName
- uid: Microsoft.Health.Authentication.CryptoConfiguration.CreateHashAlgorithm*
  commentId: Overload:Microsoft.Health.Authentication.CryptoConfiguration.CreateHashAlgorithm
  isExternal: false
  name: CreateHashAlgorithm
  nameWithType: CryptoConfiguration.CreateHashAlgorithm
  fullName: Microsoft.Health.Authentication.CryptoConfiguration.CreateHashAlgorithm
- uid: System.Security.Cryptography.HashAlgorithm
  commentId: T:System.Security.Cryptography.HashAlgorithm
  parent: System.Security.Cryptography
  isExternal: true
  name: HashAlgorithm
  nameWithType: HashAlgorithm
  fullName: System.Security.Cryptography.HashAlgorithm
- uid: Microsoft.Health.Authentication.CryptoConfiguration.HashAlgorithmName
  commentId: P:Microsoft.Health.Authentication.CryptoConfiguration.HashAlgorithmName
- uid: Microsoft.Health.Authentication.CryptoConfiguration.CreateSymmetricAlgorithm*
  commentId: Overload:Microsoft.Health.Authentication.CryptoConfiguration.CreateSymmetricAlgorithm
  isExternal: false
  name: CreateSymmetricAlgorithm
  nameWithType: CryptoConfiguration.CreateSymmetricAlgorithm
  fullName: Microsoft.Health.Authentication.CryptoConfiguration.CreateSymmetricAlgorithm
- uid: System.Security.Cryptography.SymmetricAlgorithm
  commentId: T:System.Security.Cryptography.SymmetricAlgorithm
  parent: System.Security.Cryptography
  isExternal: true
  name: SymmetricAlgorithm
  nameWithType: SymmetricAlgorithm
  fullName: System.Security.Cryptography.SymmetricAlgorithm
- uid: Microsoft.Health.Authentication.CryptoConfiguration.CryptoServiceProviderName*
  commentId: Overload:Microsoft.Health.Authentication.CryptoConfiguration.CryptoServiceProviderName
  isExternal: false
  name: CryptoServiceProviderName
  nameWithType: CryptoConfiguration.CryptoServiceProviderName
  fullName: Microsoft.Health.Authentication.CryptoConfiguration.CryptoServiceProviderName
