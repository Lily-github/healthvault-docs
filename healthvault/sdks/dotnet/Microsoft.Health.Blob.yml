### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.Blob
  commentId: T:Microsoft.Health.Blob
  id: Blob
  parent: Microsoft.Health
  children:
  - Microsoft.Health.Blob.ContentEncoding
  - Microsoft.Health.Blob.ContentLength
  - Microsoft.Health.Blob.ContentType
  - Microsoft.Health.Blob.GetReaderStream
  - Microsoft.Health.Blob.GetWriterStream
  - Microsoft.Health.Blob.HashInfo
  - Microsoft.Health.Blob.IsDirty
  - Microsoft.Health.Blob.Name
  - Microsoft.Health.Blob.ReadAllBytes
  - Microsoft.Health.Blob.ReadAsString
  - Microsoft.Health.Blob.ReadAsString(System.Text.Encoding)
  - Microsoft.Health.Blob.SaveToFile(System.String)
  - Microsoft.Health.Blob.SaveToFile(System.String,System.IO.FileMode)
  - Microsoft.Health.Blob.SaveToStream(System.IO.Stream)
  - Microsoft.Health.Blob.Url
  - Microsoft.Health.Blob.Write(System.IO.Stream)
  - Microsoft.Health.Blob.WriteInline(System.Byte[])
  - Microsoft.Health.Blob.WriteInline(System.String)
  - Microsoft.Health.Blob.WriteInline(System.String,System.Text.Encoding)
  langs:
  - csharp
  - vb
  name: Blob
  nameWithType: Blob
  fullName: Microsoft.Health.Blob
  type: Class
  source:
    remote:
      path: Microsoft.Health/Blob.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Blob
    path: ../Microsoft.Health/Blob.cs
    startLine: 17
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nRepresents binary data that can be associated with a person's health record.\n"
  example: []
  syntax:
    content: public class Blob
    content.vb: Public Class Blob
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - Microsoft.Health.Blob.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  - System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.Blob.Name
  commentId: P:Microsoft.Health.Blob.Name
  id: Name
  parent: Microsoft.Health.Blob
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Blob.Name
  fullName: Microsoft.Health.Blob.Name
  type: Property
  source:
    remote:
      path: Microsoft.Health/Blob.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Name
    path: ../Microsoft.Health/Blob.cs
    startLine: 166
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the name of the BLOB.\n"
  example: []
  syntax:
    content: public string Name { get; }
    content.vb: Public ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Health.Blob.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.Blob.ContentType
  commentId: P:Microsoft.Health.Blob.ContentType
  id: ContentType
  parent: Microsoft.Health.Blob
  langs:
  - csharp
  - vb
  name: ContentType
  nameWithType: Blob.ContentType
  fullName: Microsoft.Health.Blob.ContentType
  type: Property
  source:
    remote:
      path: Microsoft.Health/Blob.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ContentType
    path: ../Microsoft.Health/Blob.cs
    startLine: 175
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the content type of the BLOB.\n"
  example: []
  syntax:
    content: public string ContentType { get; }
    content.vb: Public ReadOnly Property ContentType As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Health.Blob.ContentType*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.Blob.HashInfo
  commentId: P:Microsoft.Health.Blob.HashInfo
  id: HashInfo
  parent: Microsoft.Health.Blob
  langs:
  - csharp
  - vb
  name: HashInfo
  nameWithType: Blob.HashInfo
  fullName: Microsoft.Health.Blob.HashInfo
  type: Property
  source:
    remote:
      path: Microsoft.Health/Blob.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: HashInfo
    path: ../Microsoft.Health/Blob.cs
    startLine: 184
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the hash information for the BLOB.\n"
  example: []
  syntax:
    content: public BlobHashInfo HashInfo { get; }
    content.vb: Public ReadOnly Property HashInfo As BlobHashInfo
    parameters: []
    return:
      type: Microsoft.Health.BlobHashInfo
  overload: Microsoft.Health.Blob.HashInfo*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.Blob.ContentEncoding
  commentId: P:Microsoft.Health.Blob.ContentEncoding
  id: ContentEncoding
  parent: Microsoft.Health.Blob
  langs:
  - csharp
  - vb
  name: ContentEncoding
  nameWithType: Blob.ContentEncoding
  fullName: Microsoft.Health.Blob.ContentEncoding
  type: Property
  source:
    remote:
      path: Microsoft.Health/Blob.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ContentEncoding
    path: ../Microsoft.Health/Blob.cs
    startLine: 204
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the content encoding of the BLOB.\n"
  remarks: "\nThis is only available for BLOBs that were added to HealthVault prior to streaming\nsupport being added.\n"
  example: []
  syntax:
    content: public string ContentEncoding { get; }
    content.vb: Public ReadOnly Property ContentEncoding As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Health.Blob.ContentEncoding*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.Blob.ContentLength
  commentId: P:Microsoft.Health.Blob.ContentLength
  id: ContentLength
  parent: Microsoft.Health.Blob
  langs:
  - csharp
  - vb
  name: ContentLength
  nameWithType: Blob.ContentLength
  fullName: Microsoft.Health.Blob.ContentLength
  type: Property
  source:
    remote:
      path: Microsoft.Health/Blob.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ContentLength
    path: ../Microsoft.Health/Blob.cs
    startLine: 229
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the length of the content of the BLOB.\n"
  remarks: "\nIn some cases the content length can't be determined by \nHealthVault until the data is retrieved. In this case, the property\nwill be null. For instance, when the Blob represents data that was \nstreamed to HealthVault for a <xref href=\"Microsoft.Health.Package.ConnectPackage\" data-throw-if-not-resolved=\"false\"></xref> \nthe data is encrypted so the true size of the Blob is not known.\n"
  example: []
  syntax:
    content: public long ? ContentLength { get; }
    content.vb: Public ReadOnly Property ContentLength As Long?
    parameters: []
    return:
      type: System.Nullable{System.Int64}
  overload: Microsoft.Health.Blob.ContentLength*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.Blob.GetWriterStream
  commentId: M:Microsoft.Health.Blob.GetWriterStream
  id: GetWriterStream
  parent: Microsoft.Health.Blob
  langs:
  - csharp
  - vb
  name: GetWriterStream()
  nameWithType: Blob.GetWriterStream()
  fullName: Microsoft.Health.Blob.GetWriterStream()
  type: Method
  source:
    remote:
      path: Microsoft.Health/Blob.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetWriterStream
    path: ../Microsoft.Health/Blob.cs
    startLine: 250
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets a stream for writing data to a HealthVault BLOB.\n"
  example: []
  syntax:
    content: public BlobStream GetWriterStream()
    content.vb: Public Function GetWriterStream As BlobStream
    return:
      type: Microsoft.Health.BlobStream
      description: "\nA <xref href=\"Microsoft.Health.BlobStream\" data-throw-if-not-resolved=\"false\"></xref> instance to write data to.\n"
  overload: Microsoft.Health.Blob.GetWriterStream*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\nIf the Blob already has data that was retrieved from HealthVault.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Blob.WriteInline(System.String)
  commentId: M:Microsoft.Health.Blob.WriteInline(System.String)
  id: WriteInline(System.String)
  parent: Microsoft.Health.Blob
  langs:
  - csharp
  - vb
  name: WriteInline(String)
  nameWithType: Blob.WriteInline(String)
  fullName: Microsoft.Health.Blob.WriteInline(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/Blob.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: WriteInline
    path: ../Microsoft.Health/Blob.cs
    startLine: 283
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nWrites the specified string to the blob with UTF-8 encoding.\n"
  remarks: "\nThe BLOB data is written into the XML request during the \n<xref href=\"Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Microsoft.Health.HealthRecordAccessor.UpdateItem(Microsoft.Health.HealthRecordItem)\" data-throw-if-not-resolved=\"false\"></xref>\nrather than being streamed to HealthVault. This is limited to about 3.5MB of data.\nUse <xref href=\"Microsoft.Health.Blob.GetWriterStream\" data-throw-if-not-resolved=\"false\"></xref> to write more data.\n"
  example: []
  syntax:
    content: public void WriteInline(string data)
    content.vb: Public Sub WriteInline(data As String)
    parameters:
    - id: data
      type: System.String
      description: "\nThe data to write to the blob.\n"
  overload: Microsoft.Health.Blob.WriteInline*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Blob.WriteInline(System.String,System.Text.Encoding)
  commentId: M:Microsoft.Health.Blob.WriteInline(System.String,System.Text.Encoding)
  id: WriteInline(System.String,System.Text.Encoding)
  parent: Microsoft.Health.Blob
  langs:
  - csharp
  - vb
  name: WriteInline(String, Encoding)
  nameWithType: Blob.WriteInline(String, Encoding)
  fullName: Microsoft.Health.Blob.WriteInline(System.String, System.Text.Encoding)
  type: Method
  source:
    remote:
      path: Microsoft.Health/Blob.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: WriteInline
    path: ../Microsoft.Health/Blob.cs
    startLine: 313
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nWrites the specified string to the blob with the specified encoding.\n"
  remarks: "\nThe BLOB data is written into the XML request during the \n<xref href=\"Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Microsoft.Health.HealthRecordAccessor.UpdateItem(Microsoft.Health.HealthRecordItem)\" data-throw-if-not-resolved=\"false\"></xref>\nrather than being streamed to HealthVault. This is limited to about 3.5MB of data.\nUse <xref href=\"Microsoft.Health.Blob.GetWriterStream\" data-throw-if-not-resolved=\"false\"></xref> to write more data.\n"
  example: []
  syntax:
    content: public void WriteInline(string data, Encoding encoding)
    content.vb: Public Sub WriteInline(data As String, encoding As Encoding)
    parameters:
    - id: data
      type: System.String
      description: "\nThe data to write to the blob.\n"
    - id: encoding
      type: System.Text.Encoding
      description: "\nThe encoding to use when writing the data.\n"
  overload: Microsoft.Health.Blob.WriteInline*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Blob.WriteInline(System.Byte[])
  commentId: M:Microsoft.Health.Blob.WriteInline(System.Byte[])
  id: WriteInline(System.Byte[])
  parent: Microsoft.Health.Blob
  langs:
  - csharp
  - vb
  name: WriteInline(Byte[])
  nameWithType: Blob.WriteInline(Byte[])
  fullName: Microsoft.Health.Blob.WriteInline(System.Byte[])
  type: Method
  source:
    remote:
      path: Microsoft.Health/Blob.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: WriteInline
    path: ../Microsoft.Health/Blob.cs
    startLine: 340
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nWrites the specified bytes to the blob inline with the data XML of the type.\n"
  remarks: "\nThe BLOB data is written into the XML request during the \n<xref href=\"Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Microsoft.Health.HealthRecordAccessor.UpdateItem(Microsoft.Health.HealthRecordItem)\" data-throw-if-not-resolved=\"false\"></xref>\nrather than being streamed to HealthVault. This is limited to about 3.5MB of data.\nUse <xref href=\"Microsoft.Health.Blob.GetWriterStream\" data-throw-if-not-resolved=\"false\"></xref> to write more data.\n"
  example: []
  syntax:
    content: public void WriteInline(byte[] bytes)
    content.vb: Public Sub WriteInline(bytes As Byte())
    parameters:
    - id: bytes
      type: System.Byte[]
      description: "\nThe bytes to write to the blob.\n"
  overload: Microsoft.Health.Blob.WriteInline*
  nameWithType.vb: Blob.WriteInline(Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.Blob.WriteInline(System.Byte())
  name.vb: WriteInline(Byte())
- uid: Microsoft.Health.Blob.Write(System.IO.Stream)
  commentId: M:Microsoft.Health.Blob.Write(System.IO.Stream)
  id: Write(System.IO.Stream)
  parent: Microsoft.Health.Blob
  langs:
  - csharp
  - vb
  name: Write(Stream)
  nameWithType: Blob.Write(Stream)
  fullName: Microsoft.Health.Blob.Write(System.IO.Stream)
  type: Method
  source:
    remote:
      path: Microsoft.Health/Blob.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Write
    path: ../Microsoft.Health/Blob.cs
    startLine: 381
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nWrites the bytes from the specified stream.\n"
  example: []
  syntax:
    content: public void Write(Stream stream)
    content.vb: Public Sub Write(stream As Stream)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "\nThe stream to get the bytes from to write to the blob.\n"
  overload: Microsoft.Health.Blob.Write*
  exceptions:
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "\nIf there is an error writing the data to HealthVault.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Blob.GetReaderStream
  commentId: M:Microsoft.Health.Blob.GetReaderStream
  id: GetReaderStream
  parent: Microsoft.Health.Blob
  langs:
  - csharp
  - vb
  name: GetReaderStream()
  nameWithType: Blob.GetReaderStream()
  fullName: Microsoft.Health.Blob.GetReaderStream()
  type: Method
  source:
    remote:
      path: Microsoft.Health/Blob.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetReaderStream
    path: ../Microsoft.Health/Blob.cs
    startLine: 420
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets a stream for reading data from a HealthVault BLOB.\n"
  example: []
  syntax:
    content: public BlobStream GetReaderStream()
    content.vb: Public Function GetReaderStream As BlobStream
    return:
      type: Microsoft.Health.BlobStream
      description: "\nA <xref href=\"Microsoft.Health.BlobStream\" data-throw-if-not-resolved=\"false\"></xref> instance to read data from.\n"
  overload: Microsoft.Health.Blob.GetReaderStream*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\nIf there is no data to read from the BLOB.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Blob.SaveToFile(System.String)
  commentId: M:Microsoft.Health.Blob.SaveToFile(System.String)
  id: SaveToFile(System.String)
  parent: Microsoft.Health.Blob
  langs:
  - csharp
  - vb
  name: SaveToFile(String)
  nameWithType: Blob.SaveToFile(String)
  fullName: Microsoft.Health.Blob.SaveToFile(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/Blob.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SaveToFile
    path: ../Microsoft.Health/Blob.cs
    startLine: 464
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nSaves the BLOB data to the specified file.\n"
  remarks: "\nThis method will not overwrite an existing file.\nExceptions that can occur by calling <xref href=\"System.IO.File.Open(System.String%2cSystem.IO.FileMode%2cSystem.IO.FileAccess)\" data-throw-if-not-resolved=\"false\"></xref> may also be \nthrown by this method.\n"
  example: []
  syntax:
    content: public void SaveToFile(string fileName)
    content.vb: Public Sub SaveToFile(fileName As String)
    parameters:
    - id: fileName
      type: System.String
      description: "\nThe path to the file to save the data to.\n"
  overload: Microsoft.Health.Blob.SaveToFile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<span class=\"paramref\">fileName</span> is <strong>null</strong> or empty.\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\nIf the Blob doesn't have data that was retrieved from HealthVault.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf there is a failure reading the data from HealthVault.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Blob.SaveToFile(System.String,System.IO.FileMode)
  commentId: M:Microsoft.Health.Blob.SaveToFile(System.String,System.IO.FileMode)
  id: SaveToFile(System.String,System.IO.FileMode)
  parent: Microsoft.Health.Blob
  langs:
  - csharp
  - vb
  name: SaveToFile(String, FileMode)
  nameWithType: Blob.SaveToFile(String, FileMode)
  fullName: Microsoft.Health.Blob.SaveToFile(System.String, System.IO.FileMode)
  type: Method
  source:
    remote:
      path: Microsoft.Health/Blob.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SaveToFile
    path: ../Microsoft.Health/Blob.cs
    startLine: 499
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nSaves the BLOB data to the specified file.\n"
  remarks: "\nExceptions that can occur by calling <xref href=\"System.IO.File.Open(System.String%2cSystem.IO.FileMode%2cSystem.IO.FileAccess)\" data-throw-if-not-resolved=\"false\"></xref> may also be \nthrown by this method.\n"
  example: []
  syntax:
    content: public void SaveToFile(string fileName, FileMode mode)
    content.vb: Public Sub SaveToFile(fileName As String, mode As FileMode)
    parameters:
    - id: fileName
      type: System.String
      description: "\nThe path to the file to save the data to.\n"
    - id: mode
      type: System.IO.FileMode
      description: "\nA <xref href=\"System.IO.FileMode\" data-throw-if-not-resolved=\"false\"></xref> value that specifies whether a file is created if one does not exist,\nand determines whether the contents of existing files are retained or overwritten.\n"
  overload: Microsoft.Health.Blob.SaveToFile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<span class=\"paramref\">fileName</span> is <strong>null</strong> or empty.\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\nIf the Blob doesn't have data that was retrieved from HealthVault.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf there is a failure reading the data from HealthVault.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Blob.SaveToStream(System.IO.Stream)
  commentId: M:Microsoft.Health.Blob.SaveToStream(System.IO.Stream)
  id: SaveToStream(System.IO.Stream)
  parent: Microsoft.Health.Blob
  langs:
  - csharp
  - vb
  name: SaveToStream(Stream)
  nameWithType: Blob.SaveToStream(Stream)
  fullName: Microsoft.Health.Blob.SaveToStream(System.IO.Stream)
  type: Method
  source:
    remote:
      path: Microsoft.Health/Blob.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SaveToStream
    path: ../Microsoft.Health/Blob.cs
    startLine: 533
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nSaves the BLOB data to the specified file.\n"
  remarks: "\nThe stream will not be closed by this method.\n"
  example: []
  syntax:
    content: public void SaveToStream(Stream stream)
    content.vb: Public Sub SaveToStream(stream As Stream)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "\nThe stream to save the data to.\n"
  overload: Microsoft.Health.Blob.SaveToStream*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<span class=\"paramref\">stream</span> is <strong>null</strong>.\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\nIf the Blob doesn't have data that was retrieved from HealthVault.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf there is a failure reading the data from HealthVault.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Blob.ReadAsString
  commentId: M:Microsoft.Health.Blob.ReadAsString
  id: ReadAsString
  parent: Microsoft.Health.Blob
  langs:
  - csharp
  - vb
  name: ReadAsString()
  nameWithType: Blob.ReadAsString()
  fullName: Microsoft.Health.Blob.ReadAsString()
  type: Method
  source:
    remote:
      path: Microsoft.Health/Blob.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ReadAsString
    path: ../Microsoft.Health/Blob.cs
    startLine: 563
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nFetches the BLOB as a UTF-8 string.\n"
  example: []
  syntax:
    content: public string ReadAsString()
    content.vb: Public Function ReadAsString As String
    return:
      type: System.String
  overload: Microsoft.Health.Blob.ReadAsString*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\nIf the Blob doesn't have data that was retrieved from HealthVault.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf there is a failure reading the data from HealthVault.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Blob.ReadAsString(System.Text.Encoding)
  commentId: M:Microsoft.Health.Blob.ReadAsString(System.Text.Encoding)
  id: ReadAsString(System.Text.Encoding)
  parent: Microsoft.Health.Blob
  langs:
  - csharp
  - vb
  name: ReadAsString(Encoding)
  nameWithType: Blob.ReadAsString(Encoding)
  fullName: Microsoft.Health.Blob.ReadAsString(System.Text.Encoding)
  type: Method
  source:
    remote:
      path: Microsoft.Health/Blob.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ReadAsString
    path: ../Microsoft.Health/Blob.cs
    startLine: 588
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nFetches the BLOB as a string with the specified encoding.\n"
  example: []
  syntax:
    content: public string ReadAsString(Encoding encoding)
    content.vb: Public Function ReadAsString(encoding As Encoding) As String
    parameters:
    - id: encoding
      type: System.Text.Encoding
      description: "\nThe encoding used to convert the BLOB to a string.\n"
    return:
      type: System.String
      description: "\nA string representation of the BLOB.\n"
  overload: Microsoft.Health.Blob.ReadAsString*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\nIf the Blob doesn't have data that was retrieved from HealthVault.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf there is a failure reading the data from HealthVault.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Blob.ReadAllBytes
  commentId: M:Microsoft.Health.Blob.ReadAllBytes
  id: ReadAllBytes
  parent: Microsoft.Health.Blob
  langs:
  - csharp
  - vb
  name: ReadAllBytes()
  nameWithType: Blob.ReadAllBytes()
  fullName: Microsoft.Health.Blob.ReadAllBytes()
  type: Method
  source:
    remote:
      path: Microsoft.Health/Blob.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ReadAllBytes
    path: ../Microsoft.Health/Blob.cs
    startLine: 619
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets all the bytes of the BLOB.\n"
  example: []
  syntax:
    content: public byte[] ReadAllBytes()
    content.vb: Public Function ReadAllBytes As Byte()
    return:
      type: System.Byte[]
      description: "\nAll the bytes of the BLOB.\n"
  overload: Microsoft.Health.Blob.ReadAllBytes*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\nIf the Blob doesn't have data that was retrieved from HealthVault.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf there is a failure reading the data from HealthVault.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Blob.Url
  commentId: P:Microsoft.Health.Blob.Url
  id: Url
  parent: Microsoft.Health.Blob
  langs:
  - csharp
  - vb
  name: Url
  nameWithType: Blob.Url
  fullName: Microsoft.Health.Blob.Url
  type: Property
  source:
    remote:
      path: Microsoft.Health/Blob.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Url
    path: ../Microsoft.Health/Blob.cs
    startLine: 658
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets a URL that can be used to read or write the Blob data directly using HTTP GET and PUT.\n"
  remarks: "\nThe token used on the URL is short-lived so the URL is only valid for a short period\nof time.<br />\nAn application storing this URL, whether in a cookie or by other means, should encrypt\nit to avoid tampering.\n"
  example: []
  syntax:
    content: public Uri Url { get; }
    content.vb: Public ReadOnly Property Url As Uri
    parameters: []
    return:
      type: System.Uri
      description: "\nA URL for direct access to the Blob data.\n"
  overload: Microsoft.Health.Blob.Url*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\nIf the Blob was retieved inline or the Blob was created for writing.\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.Blob.IsDirty
  commentId: P:Microsoft.Health.Blob.IsDirty
  id: IsDirty
  parent: Microsoft.Health.Blob
  langs:
  - csharp
  - vb
  name: IsDirty
  nameWithType: Blob.IsDirty
  fullName: Microsoft.Health.Blob.IsDirty
  type: Property
  source:
    remote:
      path: Microsoft.Health/Blob.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IsDirty
    path: ../Microsoft.Health/Blob.cs
    startLine: 685
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets or sets if the Blob instance has been modified.\n"
  remarks: "\nNormally this property is maintained by the members of the class, however,\nif <xref href=\"Microsoft.Health.HealthRecordItem.GetItemXml\" data-throw-if-not-resolved=\"false\"></xref> is used to serialize an item\nthat contains this Blob before the item is committed to HealthVault, you will\nneed to mark the Blob as dirty before trying to commit the item to HealthVault.\n"
  example: []
  syntax:
    content: public bool IsDirty { get; set; }
    content.vb: Public Property IsDirty As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.Health.Blob.IsDirty*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  name: SetProperty(String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object())
  name.vb: SetProperty(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  name: InvokeMethod(String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object())
  name.vb: InvokeMethod(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  parent: Microsoft.Health.Utility.InvariantString
  definition: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  name: ToStringInvariant()
  nameWithType: InvariantString.ToStringInvariant()
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant()
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Blob.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  parent: Microsoft.Health.Utility.TypeHelper
  definition: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  name: ValueOrDbNull<Blob>()
  nameWithType: TypeHelper.ValueOrDbNull<Blob>()
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.Blob>()
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of Blob)()
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.Blob)()
  name.vb: ValueOrDbNull(Of Blob)()
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull<Blob>
    nameWithType: TypeHelper.ValueOrDbNull<Blob>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.Blob>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull(Of Blob)
    nameWithType: TypeHelper.ValueOrDbNull(Of Blob)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.Blob)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  parent: Microsoft.Health.Utility.WCXmlHelper
  definition: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  name: ToXml()
  nameWithType: WCXmlHelper.ToXml()
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml()
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  isExternal: true
  name: SetProperty(Object, String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object())
  name.vb: SetProperty(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions
  commentId: T:Microsoft.Health.Utility.IDispatchExtensions
  parent: Microsoft.Health.Utility
  isExternal: false
  name: IDispatchExtensions
  nameWithType: IDispatchExtensions
  fullName: Microsoft.Health.Utility.IDispatchExtensions
- uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  isExternal: true
  name: InvokeMethod(Object, String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object())
  name.vb: InvokeMethod(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  isExternal: true
  name: ToStringInvariant(Object)
  nameWithType: InvariantString.ToStringInvariant(Object)
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString
  commentId: T:Microsoft.Health.Utility.InvariantString
  parent: Microsoft.Health.Utility
  isExternal: false
  name: InvariantString
  nameWithType: InvariantString
  fullName: Microsoft.Health.Utility.InvariantString
- uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  isExternal: false
  name: ValueOrDbNull<T>(T)
  nameWithType: TypeHelper.ValueOrDbNull<T>(T)
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>(T)
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of T)(T)
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)(T)
  name.vb: ValueOrDbNull(Of T)(T)
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull<T>
    nameWithType: TypeHelper.ValueOrDbNull<T>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull(Of T)
    nameWithType: TypeHelper.ValueOrDbNull(Of T)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.TypeHelper
  commentId: T:Microsoft.Health.Utility.TypeHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: TypeHelper
  nameWithType: TypeHelper
  fullName: Microsoft.Health.Utility.TypeHelper
- uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  isExternal: true
  name: ToXml(Object)
  nameWithType: WCXmlHelper.ToXml(Object)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.WCXmlHelper
  commentId: T:Microsoft.Health.Utility.WCXmlHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: WCXmlHelper
  nameWithType: WCXmlHelper
  fullName: Microsoft.Health.Utility.WCXmlHelper
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: Microsoft.Health.Blob.Name*
  commentId: Overload:Microsoft.Health.Blob.Name
  isExternal: false
  name: Name
  nameWithType: Blob.Name
  fullName: Microsoft.Health.Blob.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Health.Blob.ContentType*
  commentId: Overload:Microsoft.Health.Blob.ContentType
  isExternal: false
  name: ContentType
  nameWithType: Blob.ContentType
  fullName: Microsoft.Health.Blob.ContentType
- uid: Microsoft.Health.Blob.HashInfo*
  commentId: Overload:Microsoft.Health.Blob.HashInfo
  isExternal: false
  name: HashInfo
  nameWithType: Blob.HashInfo
  fullName: Microsoft.Health.Blob.HashInfo
- uid: Microsoft.Health.BlobHashInfo
  commentId: T:Microsoft.Health.BlobHashInfo
  parent: Microsoft.Health
  isExternal: false
  name: BlobHashInfo
  nameWithType: BlobHashInfo
  fullName: Microsoft.Health.BlobHashInfo
- uid: Microsoft.Health.Blob.ContentEncoding*
  commentId: Overload:Microsoft.Health.Blob.ContentEncoding
  isExternal: false
  name: ContentEncoding
  nameWithType: Blob.ContentEncoding
  fullName: Microsoft.Health.Blob.ContentEncoding
- uid: Microsoft.Health.Package.ConnectPackage
  commentId: T:Microsoft.Health.Package.ConnectPackage
  isExternal: false
  name: ConnectPackage
  nameWithType: ConnectPackage
  fullName: Microsoft.Health.Package.ConnectPackage
- uid: Microsoft.Health.Blob.ContentLength*
  commentId: Overload:Microsoft.Health.Blob.ContentLength
  isExternal: false
  name: ContentLength
  nameWithType: Blob.ContentLength
  fullName: Microsoft.Health.Blob.ContentLength
- uid: System.Nullable{System.Int64}
  commentId: T:System.Nullable{System.Int64}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  nameWithType.vb: Nullable(Of Int64)
  fullName.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.BlobStream
  commentId: T:Microsoft.Health.BlobStream
  parent: Microsoft.Health
  isExternal: false
  name: BlobStream
  nameWithType: BlobStream
  fullName: Microsoft.Health.BlobStream
- uid: Microsoft.Health.Blob.GetWriterStream*
  commentId: Overload:Microsoft.Health.Blob.GetWriterStream
  isExternal: false
  name: GetWriterStream
  nameWithType: Blob.GetWriterStream
  fullName: Microsoft.Health.Blob.GetWriterStream
- uid: System.NotSupportedException
  commentId: T:System.NotSupportedException
- uid: Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)
  commentId: M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)
  parent: Microsoft.Health.HealthRecordAccessor
  isExternal: false
  name: NewItem(HealthRecordItem)
  nameWithType: HealthRecordAccessor.NewItem(HealthRecordItem)
  fullName: Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)
  spec.csharp:
  - uid: Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)
    name: NewItem
    nameWithType: HealthRecordAccessor.NewItem
    fullName: Microsoft.Health.HealthRecordAccessor.NewItem
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)
    name: NewItem
    nameWithType: HealthRecordAccessor.NewItem
    fullName: Microsoft.Health.HealthRecordAccessor.NewItem
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthRecordAccessor.UpdateItem(Microsoft.Health.HealthRecordItem)
  commentId: M:Microsoft.Health.HealthRecordAccessor.UpdateItem(Microsoft.Health.HealthRecordItem)
  parent: Microsoft.Health.HealthRecordAccessor
  isExternal: false
  name: UpdateItem(HealthRecordItem)
  nameWithType: HealthRecordAccessor.UpdateItem(HealthRecordItem)
  fullName: Microsoft.Health.HealthRecordAccessor.UpdateItem(Microsoft.Health.HealthRecordItem)
  spec.csharp:
  - uid: Microsoft.Health.HealthRecordAccessor.UpdateItem(Microsoft.Health.HealthRecordItem)
    name: UpdateItem
    nameWithType: HealthRecordAccessor.UpdateItem
    fullName: Microsoft.Health.HealthRecordAccessor.UpdateItem
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.HealthRecordAccessor.UpdateItem(Microsoft.Health.HealthRecordItem)
    name: UpdateItem
    nameWithType: HealthRecordAccessor.UpdateItem
    fullName: Microsoft.Health.HealthRecordAccessor.UpdateItem
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Blob.GetWriterStream
  commentId: M:Microsoft.Health.Blob.GetWriterStream
- uid: Microsoft.Health.Blob.WriteInline*
  commentId: Overload:Microsoft.Health.Blob.WriteInline
  isExternal: false
  name: WriteInline
  nameWithType: Blob.WriteInline
  fullName: Microsoft.Health.Blob.WriteInline
- uid: Microsoft.Health.HealthRecordAccessor
  commentId: T:Microsoft.Health.HealthRecordAccessor
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordAccessor
  nameWithType: HealthRecordAccessor
  fullName: Microsoft.Health.HealthRecordAccessor
- uid: System.Text.Encoding
  commentId: T:System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.Text
  commentId: N:System.Text
  isExternal: false
  name: System.Text
  nameWithType: System.Text
  fullName: System.Text
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.Health.Blob.Write*
  commentId: Overload:Microsoft.Health.Blob.Write
  isExternal: false
  name: Write
  nameWithType: Blob.Write
  fullName: Microsoft.Health.Blob.Write
- uid: System.Net.WebException
  commentId: T:System.Net.WebException
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO
  commentId: N:System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: Microsoft.Health.Blob.GetReaderStream*
  commentId: Overload:Microsoft.Health.Blob.GetReaderStream
  isExternal: false
  name: GetReaderStream
  nameWithType: Blob.GetReaderStream
  fullName: Microsoft.Health.Blob.GetReaderStream
- uid: System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess)
  commentId: M:System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess)
- uid: Microsoft.Health.Blob.SaveToFile*
  commentId: Overload:Microsoft.Health.Blob.SaveToFile
  isExternal: false
  name: SaveToFile
  nameWithType: Blob.SaveToFile
  fullName: Microsoft.Health.Blob.SaveToFile
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: Microsoft.Health.HealthServiceException
  commentId: T:Microsoft.Health.HealthServiceException
  parent: Microsoft.Health
  isExternal: false
  name: HealthServiceException
  nameWithType: HealthServiceException
  fullName: Microsoft.Health.HealthServiceException
- uid: System.IO.FileMode
  commentId: T:System.IO.FileMode
  parent: System.IO
  isExternal: true
  name: FileMode
  nameWithType: FileMode
  fullName: System.IO.FileMode
- uid: Microsoft.Health.Blob.SaveToStream*
  commentId: Overload:Microsoft.Health.Blob.SaveToStream
  isExternal: false
  name: SaveToStream
  nameWithType: Blob.SaveToStream
  fullName: Microsoft.Health.Blob.SaveToStream
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: Microsoft.Health.Blob.ReadAsString*
  commentId: Overload:Microsoft.Health.Blob.ReadAsString
  isExternal: false
  name: ReadAsString
  nameWithType: Blob.ReadAsString
  fullName: Microsoft.Health.Blob.ReadAsString
- uid: Microsoft.Health.Blob.ReadAllBytes*
  commentId: Overload:Microsoft.Health.Blob.ReadAllBytes
  isExternal: false
  name: ReadAllBytes
  nameWithType: Blob.ReadAllBytes
  fullName: Microsoft.Health.Blob.ReadAllBytes
- uid: Microsoft.Health.Blob.Url*
  commentId: Overload:Microsoft.Health.Blob.Url
  isExternal: false
  name: Url
  nameWithType: Blob.Url
  fullName: Microsoft.Health.Blob.Url
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: Microsoft.Health.HealthRecordItem.GetItemXml
  commentId: M:Microsoft.Health.HealthRecordItem.GetItemXml
  parent: Microsoft.Health.HealthRecordItem
  isExternal: false
  name: GetItemXml()
  nameWithType: HealthRecordItem.GetItemXml()
  fullName: Microsoft.Health.HealthRecordItem.GetItemXml()
  spec.csharp:
  - uid: Microsoft.Health.HealthRecordItem.GetItemXml
    name: GetItemXml
    nameWithType: HealthRecordItem.GetItemXml
    fullName: Microsoft.Health.HealthRecordItem.GetItemXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.HealthRecordItem.GetItemXml
    name: GetItemXml
    nameWithType: HealthRecordItem.GetItemXml
    fullName: Microsoft.Health.HealthRecordItem.GetItemXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Blob.IsDirty*
  commentId: Overload:Microsoft.Health.Blob.IsDirty
  isExternal: false
  name: IsDirty
  nameWithType: Blob.IsDirty
  fullName: Microsoft.Health.Blob.IsDirty
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Health.HealthRecordItem
  commentId: T:Microsoft.Health.HealthRecordItem
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordItem
  nameWithType: HealthRecordItem
  fullName: Microsoft.Health.HealthRecordItem
