### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  commentId: T:Microsoft.Health.InvertedIndex.RecordIDEnumerator
  id: RecordIDEnumerator
  parent: Microsoft.Health.InvertedIndex
  children:
  - Microsoft.Health.InvertedIndex.RecordIDEnumerator.#ctor
  - Microsoft.Health.InvertedIndex.RecordIDEnumerator.CompareTo(Microsoft.Health.InvertedIndex.RecordIDEnumerator)
  - Microsoft.Health.InvertedIndex.RecordIDEnumerator.Cost
  - Microsoft.Health.InvertedIndex.RecordIDEnumerator.Current
  - Microsoft.Health.InvertedIndex.RecordIDEnumerator.CurrentID
  - Microsoft.Health.InvertedIndex.RecordIDEnumerator.Dispose
  - Microsoft.Health.InvertedIndex.RecordIDEnumerator.Dispose(System.Boolean)
  - Microsoft.Health.InvertedIndex.RecordIDEnumerator.Done
  - Microsoft.Health.InvertedIndex.RecordIDEnumerator.IsDone
  - Microsoft.Health.InvertedIndex.RecordIDEnumerator.IsNotDone
  - Microsoft.Health.InvertedIndex.RecordIDEnumerator.MaxRecordID
  - Microsoft.Health.InvertedIndex.RecordIDEnumerator.MoveNext
  - Microsoft.Health.InvertedIndex.RecordIDEnumerator.MoveNextID
  - Microsoft.Health.InvertedIndex.RecordIDEnumerator.Null
  - Microsoft.Health.InvertedIndex.RecordIDEnumerator.NullRecordID
  - Microsoft.Health.InvertedIndex.RecordIDEnumerator.OnCost
  - Microsoft.Health.InvertedIndex.RecordIDEnumerator.OnMoveNext
  - Microsoft.Health.InvertedIndex.RecordIDEnumerator.OnScore
  - Microsoft.Health.InvertedIndex.RecordIDEnumerator.OnSkipTo(System.UInt32)
  - Microsoft.Health.InvertedIndex.RecordIDEnumerator.RawScore
  - Microsoft.Health.InvertedIndex.RecordIDEnumerator.Reset
  - Microsoft.Health.InvertedIndex.RecordIDEnumerator.Score
  - Microsoft.Health.InvertedIndex.RecordIDEnumerator.ScoreMultiplier
  - Microsoft.Health.InvertedIndex.RecordIDEnumerator.SkipTo(System.UInt32)
  - Microsoft.Health.InvertedIndex.RecordIDEnumerator.SkipToID(System.UInt32)
  - Microsoft.Health.InvertedIndex.RecordIDEnumerator.System#Collections#IEnumerator#Current
  langs:
  - csharp
  - vb
  name: RecordIDEnumerator
  nameWithType: RecordIDEnumerator
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  type: Class
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: RecordIDEnumerator
    path: ../Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
    startLine: 13
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  syntax:
    content: 'public class RecordIDEnumerator : ISkipEnumerator<uint>, IEnumerator<uint>, IDisposable, IEnumerator, IComparable<RecordIDEnumerator>'
    content.vb: >-
      Public Class RecordIDEnumerator
          Implements ISkipEnumerator(Of UInteger), IEnumerator(Of UInteger), IDisposable, IEnumerator, IComparable(Of RecordIDEnumerator)
  inheritance:
  - System.Object
  derivedClasses:
  - Microsoft.Health.InvertedIndex.BinaryContainer
  - Microsoft.Health.InvertedIndex.LargeVectorUnion
  - Microsoft.Health.InvertedIndex.RecordPropertyEnumerator`1
  - Microsoft.Health.InvertedIndex.ScoreCutoff
  - Microsoft.Health.InvertedIndex.UnaryContainer
  - Microsoft.Health.InvertedIndex.VectorContainer
  - Microsoft.Health.InvertedIndex.VectorUnion
  implements:
  - Microsoft.Health.InvertedIndex.ISkipEnumerator{System.UInt32}
  - System.Collections.Generic.IEnumerator{System.UInt32}
  - System.IDisposable
  - System.Collections.IEnumerator
  - System.IComparable{Microsoft.Health.InvertedIndex.RecordIDEnumerator}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - Microsoft.Health.InvertedIndex.RecordIDEnumerator.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  - System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.Null
  commentId: F:Microsoft.Health.InvertedIndex.RecordIDEnumerator.Null
  id: "Null"
  parent: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  langs:
  - csharp
  - vb
  name: "Null"
  nameWithType: RecordIDEnumerator.Null
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.Null
  type: Field
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: "Null"
    path: ../Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
    startLine: 22
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public static readonly RecordIDEnumerator Null
    content.vb: Public Shared ReadOnly Null As RecordIDEnumerator
    return:
      type: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.Done
  commentId: F:Microsoft.Health.InvertedIndex.RecordIDEnumerator.Done
  id: Done
  parent: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  langs:
  - csharp
  - vb
  name: Done
  nameWithType: RecordIDEnumerator.Done
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.Done
  type: Field
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Done
    path: ../Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
    startLine: 32
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public static readonly RecordIDEnumerator Done
    content.vb: Public Shared ReadOnly Done As RecordIDEnumerator
    return:
      type: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.NullRecordID
  commentId: F:Microsoft.Health.InvertedIndex.RecordIDEnumerator.NullRecordID
  id: NullRecordID
  parent: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  langs:
  - csharp
  - vb
  name: NullRecordID
  nameWithType: RecordIDEnumerator.NullRecordID
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.NullRecordID
  type: Field
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: NullRecordID
    path: ../Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
    startLine: 38
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public const uint NullRecordID = 0U
    content.vb: Public Const NullRecordID As UInteger = 0UI
    return:
      type: System.UInt32
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.MaxRecordID
  commentId: F:Microsoft.Health.InvertedIndex.RecordIDEnumerator.MaxRecordID
  id: MaxRecordID
  parent: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  langs:
  - csharp
  - vb
  name: MaxRecordID
  nameWithType: RecordIDEnumerator.MaxRecordID
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.MaxRecordID
  type: Field
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: MaxRecordID
    path: ../Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
    startLine: 43
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public const uint MaxRecordID = 4294967295U
    content.vb: Public Const MaxRecordID As UInteger = 4294967295UI
    return:
      type: System.UInt32
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.#ctor
  commentId: M:Microsoft.Health.InvertedIndex.RecordIDEnumerator.#ctor
  id: '#ctor'
  parent: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  langs:
  - csharp
  - vb
  name: RecordIDEnumerator()
  nameWithType: RecordIDEnumerator.RecordIDEnumerator()
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.RecordIDEnumerator()
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
    startLine: 51
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public RecordIDEnumerator()
    content.vb: Public Sub New
  overload: Microsoft.Health.InvertedIndex.RecordIDEnumerator.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.Current
  commentId: P:Microsoft.Health.InvertedIndex.RecordIDEnumerator.Current
  id: Current
  parent: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  langs:
  - csharp
  - vb
  name: Current
  nameWithType: RecordIDEnumerator.Current
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.Current
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Current
    path: ../Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
    startLine: 58
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public virtual uint Current { get; }
    content.vb: Public Overridable ReadOnly Property Current As UInteger
    parameters: []
    return:
      type: System.UInt32
  overload: Microsoft.Health.InvertedIndex.RecordIDEnumerator.Current*
  implements:
  - System.Collections.Generic.IEnumerator{System.UInt32}.Current
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.CurrentID
  commentId: F:Microsoft.Health.InvertedIndex.RecordIDEnumerator.CurrentID
  id: CurrentID
  parent: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  langs:
  - csharp
  - vb
  name: CurrentID
  nameWithType: RecordIDEnumerator.CurrentID
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.CurrentID
  type: Field
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CurrentID
    path: ../Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
    startLine: 69
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public uint CurrentID
    content.vb: Public CurrentID As UInteger
    return:
      type: System.UInt32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.ScoreMultiplier
  commentId: P:Microsoft.Health.InvertedIndex.RecordIDEnumerator.ScoreMultiplier
  id: ScoreMultiplier
  parent: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  langs:
  - csharp
  - vb
  name: ScoreMultiplier
  nameWithType: RecordIDEnumerator.ScoreMultiplier
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.ScoreMultiplier
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ScoreMultiplier
    path: ../Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
    startLine: 74
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public float ScoreMultiplier { get; set; }
    content.vb: Public Property ScoreMultiplier As Single
    parameters: []
    return:
      type: System.Single
  overload: Microsoft.Health.InvertedIndex.RecordIDEnumerator.ScoreMultiplier*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.IsDone
  commentId: P:Microsoft.Health.InvertedIndex.RecordIDEnumerator.IsDone
  id: IsDone
  parent: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  langs:
  - csharp
  - vb
  name: IsDone
  nameWithType: RecordIDEnumerator.IsDone
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.IsDone
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IsDone
    path: ../Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
    startLine: 89
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public bool IsDone { get; }
    content.vb: Public ReadOnly Property IsDone As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.Health.InvertedIndex.RecordIDEnumerator.IsDone*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.IsNotDone
  commentId: P:Microsoft.Health.InvertedIndex.RecordIDEnumerator.IsNotDone
  id: IsNotDone
  parent: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  langs:
  - csharp
  - vb
  name: IsNotDone
  nameWithType: RecordIDEnumerator.IsNotDone
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.IsNotDone
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IsNotDone
    path: ../Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
    startLine: 100
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public bool IsNotDone { get; }
    content.vb: Public ReadOnly Property IsNotDone As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.Health.InvertedIndex.RecordIDEnumerator.IsNotDone*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.Cost
  commentId: P:Microsoft.Health.InvertedIndex.RecordIDEnumerator.Cost
  id: Cost
  parent: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  langs:
  - csharp
  - vb
  name: Cost
  nameWithType: RecordIDEnumerator.Cost
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.Cost
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Cost
    path: ../Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
    startLine: 111
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\nReturn an estimate of how much this enumeration will cost. Used by the optimizer\n"
  example: []
  syntax:
    content: public float Cost { get; }
    content.vb: Public ReadOnly Property Cost As Single
    parameters: []
    return:
      type: System.Single
  overload: Microsoft.Health.InvertedIndex.RecordIDEnumerator.Cost*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.MoveNext
  commentId: M:Microsoft.Health.InvertedIndex.RecordIDEnumerator.MoveNext
  id: MoveNext
  parent: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  langs:
  - csharp
  - vb
  name: MoveNext()
  nameWithType: RecordIDEnumerator.MoveNext()
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.MoveNext()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: MoveNext
    path: ../Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
    startLine: 128
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public bool MoveNext()
    content.vb: Public Function MoveNext As Boolean
    return:
      type: System.Boolean
      description: ''
  overload: Microsoft.Health.InvertedIndex.RecordIDEnumerator.MoveNext*
  implements:
  - System.Collections.IEnumerator.MoveNext
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.MoveNextID
  commentId: M:Microsoft.Health.InvertedIndex.RecordIDEnumerator.MoveNextID
  id: MoveNextID
  parent: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  langs:
  - csharp
  - vb
  name: MoveNextID()
  nameWithType: RecordIDEnumerator.MoveNextID()
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.MoveNextID()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: MoveNextID
    path: ../Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
    startLine: 137
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public uint MoveNextID()
    content.vb: Public Function MoveNextID As UInteger
    return:
      type: System.UInt32
      description: ''
  overload: Microsoft.Health.InvertedIndex.RecordIDEnumerator.MoveNextID*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.SkipTo(System.UInt32)
  commentId: M:Microsoft.Health.InvertedIndex.RecordIDEnumerator.SkipTo(System.UInt32)
  id: SkipTo(System.UInt32)
  parent: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  langs:
  - csharp
  - vb
  name: SkipTo(UInt32)
  nameWithType: RecordIDEnumerator.SkipTo(UInt32)
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.SkipTo(System.UInt32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SkipTo
    path: ../Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
    startLine: 152
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public bool SkipTo(uint value)
    content.vb: Public Function SkipTo(value As UInteger) As Boolean
    parameters:
    - id: value
      type: System.UInt32
      description: ''
    return:
      type: System.Boolean
      description: ''
  overload: Microsoft.Health.InvertedIndex.RecordIDEnumerator.SkipTo*
  implements:
  - Microsoft.Health.InvertedIndex.ISkipEnumerator{System.UInt32}.SkipTo(System.UInt32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.SkipToID(System.UInt32)
  commentId: M:Microsoft.Health.InvertedIndex.RecordIDEnumerator.SkipToID(System.UInt32)
  id: SkipToID(System.UInt32)
  parent: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  langs:
  - csharp
  - vb
  name: SkipToID(UInt32)
  nameWithType: RecordIDEnumerator.SkipToID(UInt32)
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.SkipToID(System.UInt32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SkipToID
    path: ../Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
    startLine: 162
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public uint SkipToID(uint value)
    content.vb: Public Function SkipToID(value As UInteger) As UInteger
    parameters:
    - id: value
      type: System.UInt32
      description: ''
    return:
      type: System.UInt32
      description: ''
  overload: Microsoft.Health.InvertedIndex.RecordIDEnumerator.SkipToID*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.Score
  commentId: M:Microsoft.Health.InvertedIndex.RecordIDEnumerator.Score
  id: Score
  parent: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  langs:
  - csharp
  - vb
  name: Score()
  nameWithType: RecordIDEnumerator.Score()
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.Score()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Score
    path: ../Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
    startLine: 176
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public float Score()
    content.vb: Public Function Score As Single
    return:
      type: System.Single
      description: ''
  overload: Microsoft.Health.InvertedIndex.RecordIDEnumerator.Score*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.RawScore
  commentId: M:Microsoft.Health.InvertedIndex.RecordIDEnumerator.RawScore
  id: RawScore
  parent: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  langs:
  - csharp
  - vb
  name: RawScore()
  nameWithType: RecordIDEnumerator.RawScore()
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.RawScore()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: RawScore
    path: ../Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
    startLine: 185
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public float RawScore()
    content.vb: Public Function RawScore As Single
    return:
      type: System.Single
      description: ''
  overload: Microsoft.Health.InvertedIndex.RecordIDEnumerator.RawScore*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.CompareTo(Microsoft.Health.InvertedIndex.RecordIDEnumerator)
  commentId: M:Microsoft.Health.InvertedIndex.RecordIDEnumerator.CompareTo(Microsoft.Health.InvertedIndex.RecordIDEnumerator)
  id: CompareTo(Microsoft.Health.InvertedIndex.RecordIDEnumerator)
  parent: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  langs:
  - csharp
  - vb
  name: CompareTo(RecordIDEnumerator)
  nameWithType: RecordIDEnumerator.CompareTo(RecordIDEnumerator)
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.CompareTo(Microsoft.Health.InvertedIndex.RecordIDEnumerator)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CompareTo
    path: ../Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
    startLine: 195
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public int CompareTo(RecordIDEnumerator other)
    content.vb: Public Function CompareTo(other As RecordIDEnumerator) As Integer
    parameters:
    - id: other
      type: Microsoft.Health.InvertedIndex.RecordIDEnumerator
      description: ''
    return:
      type: System.Int32
      description: ''
  overload: Microsoft.Health.InvertedIndex.RecordIDEnumerator.CompareTo*
  implements:
  - System.IComparable{Microsoft.Health.InvertedIndex.RecordIDEnumerator}.CompareTo(Microsoft.Health.InvertedIndex.RecordIDEnumerator)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.OnMoveNext
  commentId: M:Microsoft.Health.InvertedIndex.RecordIDEnumerator.OnMoveNext
  id: OnMoveNext
  parent: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  langs:
  - csharp
  - vb
  name: OnMoveNext()
  nameWithType: RecordIDEnumerator.OnMoveNext()
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.OnMoveNext()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: OnMoveNext
    path: ../Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
    startLine: 229
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\nIndividual Operators Override These\n"
  example: []
  syntax:
    content: protected virtual void OnMoveNext()
    content.vb: Protected Overridable Sub OnMoveNext
  overload: Microsoft.Health.InvertedIndex.RecordIDEnumerator.OnMoveNext*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.OnSkipTo(System.UInt32)
  commentId: M:Microsoft.Health.InvertedIndex.RecordIDEnumerator.OnSkipTo(System.UInt32)
  id: OnSkipTo(System.UInt32)
  parent: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  langs:
  - csharp
  - vb
  name: OnSkipTo(UInt32)
  nameWithType: RecordIDEnumerator.OnSkipTo(UInt32)
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.OnSkipTo(System.UInt32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: OnSkipTo
    path: ../Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
    startLine: 239
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\nThe default implementation merely advances the enumerator until it reaches the desired\nitem. Other more efficient implementations can used skip lists or binary search\n"
  example: []
  syntax:
    content: protected virtual void OnSkipTo(uint value)
    content.vb: Protected Overridable Sub OnSkipTo(value As UInteger)
    parameters:
    - id: value
      type: System.UInt32
      description: ''
  overload: Microsoft.Health.InvertedIndex.RecordIDEnumerator.OnSkipTo*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.OnScore
  commentId: M:Microsoft.Health.InvertedIndex.RecordIDEnumerator.OnScore
  id: OnScore
  parent: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  langs:
  - csharp
  - vb
  name: OnScore()
  nameWithType: RecordIDEnumerator.OnScore()
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.OnScore()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: OnScore
    path: ../Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
    startLine: 251
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: protected virtual float OnScore()
    content.vb: Protected Overridable Function OnScore As Single
    return:
      type: System.Single
      description: ''
  overload: Microsoft.Health.InvertedIndex.RecordIDEnumerator.OnScore*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.OnCost
  commentId: M:Microsoft.Health.InvertedIndex.RecordIDEnumerator.OnCost
  id: OnCost
  parent: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  langs:
  - csharp
  - vb
  name: OnCost()
  nameWithType: RecordIDEnumerator.OnCost()
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.OnCost()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: OnCost
    path: ../Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
    startLine: 260
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: protected virtual float OnCost()
    content.vb: Protected Overridable Function OnCost As Single
    return:
      type: System.Single
      description: ''
  overload: Microsoft.Health.InvertedIndex.RecordIDEnumerator.OnCost*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.System#Collections#IEnumerator#Current
  commentId: P:Microsoft.Health.InvertedIndex.RecordIDEnumerator.System#Collections#IEnumerator#Current
  id: System#Collections#IEnumerator#Current
  isEii: true
  parent: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  langs:
  - csharp
  - vb
  name: IEnumerator.Current
  nameWithType: RecordIDEnumerator.IEnumerator.Current
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.System.Collections.IEnumerator.Current
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: System.Collections.IEnumerator.Current
    path: ../Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
    startLine: 269
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  syntax:
    content: object IEnumerator.Current { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IEnumerator.Current As Object Implements IEnumerator.Current
    parameters: []
    return:
      type: System.Object
  overload: Microsoft.Health.InvertedIndex.RecordIDEnumerator.System#Collections#IEnumerator#Current*
  implements:
  - System.Collections.IEnumerator.Current
  nameWithType.vb: RecordIDEnumerator.System.Collections.IEnumerator.Current
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.IEnumerator.Current
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.Dispose
  commentId: M:Microsoft.Health.InvertedIndex.RecordIDEnumerator.Dispose
  id: Dispose
  parent: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: RecordIDEnumerator.Dispose()
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.Dispose()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Dispose
    path: ../Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
    startLine: 280
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Microsoft.Health.InvertedIndex.RecordIDEnumerator.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.Dispose(System.Boolean)
  commentId: M:Microsoft.Health.InvertedIndex.RecordIDEnumerator.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: RecordIDEnumerator.Dispose(Boolean)
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Dispose
    path: ../Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
    startLine: 286
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  syntax:
    content: protected virtual void Dispose(bool isExplicitDisposal)
    content.vb: Protected Overridable Sub Dispose(isExplicitDisposal As Boolean)
    parameters:
    - id: isExplicitDisposal
      type: System.Boolean
  overload: Microsoft.Health.InvertedIndex.RecordIDEnumerator.Dispose*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.Reset
  commentId: M:Microsoft.Health.InvertedIndex.RecordIDEnumerator.Reset
  id: Reset
  parent: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  langs:
  - csharp
  - vb
  name: Reset()
  nameWithType: RecordIDEnumerator.Reset()
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.Reset()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Reset
    path: ../Microsoft.Health.Utility/search/InvertedIndex/RecordIDEnumerator.cs
    startLine: 293
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public virtual void Reset()
    content.vb: Public Overridable Sub Reset
  overload: Microsoft.Health.InvertedIndex.RecordIDEnumerator.Reset*
  implements:
  - System.Collections.IEnumerator.Reset
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: Microsoft.Health.InvertedIndex
  commentId: N:Microsoft.Health.InvertedIndex
  isExternal: false
  name: Microsoft.Health.InvertedIndex
  nameWithType: Microsoft.Health.InvertedIndex
  fullName: Microsoft.Health.InvertedIndex
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Health.InvertedIndex.ISkipEnumerator{System.UInt32}
  commentId: T:Microsoft.Health.InvertedIndex.ISkipEnumerator{System.UInt32}
  parent: Microsoft.Health.InvertedIndex
  definition: Microsoft.Health.InvertedIndex.ISkipEnumerator`1
  name: ISkipEnumerator<UInt32>
  nameWithType: ISkipEnumerator<UInt32>
  fullName: Microsoft.Health.InvertedIndex.ISkipEnumerator<System.UInt32>
  nameWithType.vb: ISkipEnumerator(Of UInt32)
  fullName.vb: Microsoft.Health.InvertedIndex.ISkipEnumerator(Of System.UInt32)
  name.vb: ISkipEnumerator(Of UInt32)
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ISkipEnumerator`1
    name: ISkipEnumerator
    nameWithType: ISkipEnumerator
    fullName: Microsoft.Health.InvertedIndex.ISkipEnumerator
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ISkipEnumerator`1
    name: ISkipEnumerator
    nameWithType: ISkipEnumerator
    fullName: Microsoft.Health.InvertedIndex.ISkipEnumerator
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{System.UInt32}
  commentId: T:System.Collections.Generic.IEnumerator{System.UInt32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<UInt32>
  nameWithType: IEnumerator<UInt32>
  fullName: System.Collections.Generic.IEnumerator<System.UInt32>
  nameWithType.vb: IEnumerator(Of UInt32)
  fullName.vb: System.Collections.Generic.IEnumerator(Of System.UInt32)
  name.vb: IEnumerator(Of UInt32)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.IComparable{Microsoft.Health.InvertedIndex.RecordIDEnumerator}
  commentId: T:System.IComparable{Microsoft.Health.InvertedIndex.RecordIDEnumerator}
  parent: System
  definition: System.IComparable`1
  name: IComparable<RecordIDEnumerator>
  nameWithType: IComparable<RecordIDEnumerator>
  fullName: System.IComparable<Microsoft.Health.InvertedIndex.RecordIDEnumerator>
  nameWithType.vb: IComparable(Of RecordIDEnumerator)
  fullName.vb: System.IComparable(Of Microsoft.Health.InvertedIndex.RecordIDEnumerator)
  name.vb: IComparable(Of RecordIDEnumerator)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  name: SetProperty(String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object())
  name.vb: SetProperty(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  name: InvokeMethod(String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object())
  name.vb: InvokeMethod(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  parent: Microsoft.Health.Utility.InvariantString
  definition: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  name: ToStringInvariant()
  nameWithType: InvariantString.ToStringInvariant()
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant()
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  parent: Microsoft.Health.Utility.TypeHelper
  definition: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  name: ValueOrDbNull<RecordIDEnumerator>()
  nameWithType: TypeHelper.ValueOrDbNull<RecordIDEnumerator>()
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.InvertedIndex.RecordIDEnumerator>()
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of RecordIDEnumerator)()
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.InvertedIndex.RecordIDEnumerator)()
  name.vb: ValueOrDbNull(Of RecordIDEnumerator)()
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull<RecordIDEnumerator>
    nameWithType: TypeHelper.ValueOrDbNull<RecordIDEnumerator>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.InvertedIndex.RecordIDEnumerator>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull(Of RecordIDEnumerator)
    nameWithType: TypeHelper.ValueOrDbNull(Of RecordIDEnumerator)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.InvertedIndex.RecordIDEnumerator)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  parent: Microsoft.Health.Utility.WCXmlHelper
  definition: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  name: ToXml()
  nameWithType: WCXmlHelper.ToXml()
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml()
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.InvertedIndex.ISkipEnumerator`1
  commentId: T:Microsoft.Health.InvertedIndex.ISkipEnumerator`1
  isExternal: false
  name: ISkipEnumerator<T>
  nameWithType: ISkipEnumerator<T>
  fullName: Microsoft.Health.InvertedIndex.ISkipEnumerator<T>
  nameWithType.vb: ISkipEnumerator(Of T)
  fullName.vb: Microsoft.Health.InvertedIndex.ISkipEnumerator(Of T)
  name.vb: ISkipEnumerator(Of T)
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ISkipEnumerator`1
    name: ISkipEnumerator
    nameWithType: ISkipEnumerator
    fullName: Microsoft.Health.InvertedIndex.ISkipEnumerator
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ISkipEnumerator`1
    name: ISkipEnumerator
    nameWithType: ISkipEnumerator
    fullName: Microsoft.Health.InvertedIndex.ISkipEnumerator
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  isExternal: true
  name: SetProperty(Object, String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object())
  name.vb: SetProperty(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions
  commentId: T:Microsoft.Health.Utility.IDispatchExtensions
  parent: Microsoft.Health.Utility
  isExternal: false
  name: IDispatchExtensions
  nameWithType: IDispatchExtensions
  fullName: Microsoft.Health.Utility.IDispatchExtensions
- uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  isExternal: true
  name: InvokeMethod(Object, String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object())
  name.vb: InvokeMethod(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  isExternal: true
  name: ToStringInvariant(Object)
  nameWithType: InvariantString.ToStringInvariant(Object)
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString
  commentId: T:Microsoft.Health.Utility.InvariantString
  parent: Microsoft.Health.Utility
  isExternal: false
  name: InvariantString
  nameWithType: InvariantString
  fullName: Microsoft.Health.Utility.InvariantString
- uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  isExternal: false
  name: ValueOrDbNull<T>(T)
  nameWithType: TypeHelper.ValueOrDbNull<T>(T)
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>(T)
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of T)(T)
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)(T)
  name.vb: ValueOrDbNull(Of T)(T)
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull<T>
    nameWithType: TypeHelper.ValueOrDbNull<T>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull(Of T)
    nameWithType: TypeHelper.ValueOrDbNull(Of T)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.TypeHelper
  commentId: T:Microsoft.Health.Utility.TypeHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: TypeHelper
  nameWithType: TypeHelper
  fullName: Microsoft.Health.Utility.TypeHelper
- uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  isExternal: true
  name: ToXml(Object)
  nameWithType: WCXmlHelper.ToXml(Object)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.WCXmlHelper
  commentId: T:Microsoft.Health.Utility.WCXmlHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: WCXmlHelper
  nameWithType: WCXmlHelper
  fullName: Microsoft.Health.Utility.WCXmlHelper
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  commentId: T:Microsoft.Health.InvertedIndex.RecordIDEnumerator
  parent: Microsoft.Health.InvertedIndex
  isExternal: false
  name: RecordIDEnumerator
  nameWithType: RecordIDEnumerator
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.#ctor*
  commentId: Overload:Microsoft.Health.InvertedIndex.RecordIDEnumerator.#ctor
  isExternal: false
  name: RecordIDEnumerator
  nameWithType: RecordIDEnumerator.RecordIDEnumerator
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.RecordIDEnumerator
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.Current*
  commentId: Overload:Microsoft.Health.InvertedIndex.RecordIDEnumerator.Current
  isExternal: false
  name: Current
  nameWithType: RecordIDEnumerator.Current
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.Current
- uid: System.Collections.Generic.IEnumerator{System.UInt32}.Current
  commentId: P:System.Collections.Generic.IEnumerator{System.UInt32}.Current
  parent: System.Collections.Generic.IEnumerator{System.UInt32}
  definition: System.Collections.Generic.IEnumerator`1.Current
  name: Current
  nameWithType: IEnumerator<UInt32>.Current
  fullName: System.Collections.Generic.IEnumerator<System.UInt32>.Current
  nameWithType.vb: IEnumerator(Of UInt32).Current
  fullName.vb: System.Collections.Generic.IEnumerator(Of System.UInt32).Current
- uid: System.Collections.Generic.IEnumerator`1.Current
  commentId: P:System.Collections.Generic.IEnumerator`1.Current
  isExternal: true
  name: Current
  nameWithType: IEnumerator<T>.Current
  fullName: System.Collections.Generic.IEnumerator<T>.Current
  nameWithType.vb: IEnumerator(Of T).Current
  fullName.vb: System.Collections.Generic.IEnumerator(Of T).Current
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.ScoreMultiplier*
  commentId: Overload:Microsoft.Health.InvertedIndex.RecordIDEnumerator.ScoreMultiplier
  isExternal: false
  name: ScoreMultiplier
  nameWithType: RecordIDEnumerator.ScoreMultiplier
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.ScoreMultiplier
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.IsDone*
  commentId: Overload:Microsoft.Health.InvertedIndex.RecordIDEnumerator.IsDone
  isExternal: false
  name: IsDone
  nameWithType: RecordIDEnumerator.IsDone
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.IsDone
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.IsNotDone*
  commentId: Overload:Microsoft.Health.InvertedIndex.RecordIDEnumerator.IsNotDone
  isExternal: false
  name: IsNotDone
  nameWithType: RecordIDEnumerator.IsNotDone
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.IsNotDone
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.Cost*
  commentId: Overload:Microsoft.Health.InvertedIndex.RecordIDEnumerator.Cost
  isExternal: false
  name: Cost
  nameWithType: RecordIDEnumerator.Cost
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.Cost
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.MoveNext*
  commentId: Overload:Microsoft.Health.InvertedIndex.RecordIDEnumerator.MoveNext
  isExternal: false
  name: MoveNext
  nameWithType: RecordIDEnumerator.MoveNext
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.MoveNext
- uid: System.Collections.IEnumerator.MoveNext
  commentId: M:System.Collections.IEnumerator.MoveNext
  parent: System.Collections.IEnumerator
  isExternal: true
  name: MoveNext()
  nameWithType: IEnumerator.MoveNext()
  fullName: System.Collections.IEnumerator.MoveNext()
  spec.csharp:
  - uid: System.Collections.IEnumerator.MoveNext
    name: MoveNext
    nameWithType: IEnumerator.MoveNext
    fullName: System.Collections.IEnumerator.MoveNext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerator.MoveNext
    name: MoveNext
    nameWithType: IEnumerator.MoveNext
    fullName: System.Collections.IEnumerator.MoveNext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.MoveNextID*
  commentId: Overload:Microsoft.Health.InvertedIndex.RecordIDEnumerator.MoveNextID
  isExternal: false
  name: MoveNextID
  nameWithType: RecordIDEnumerator.MoveNextID
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.MoveNextID
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.SkipTo*
  commentId: Overload:Microsoft.Health.InvertedIndex.RecordIDEnumerator.SkipTo
  isExternal: false
  name: SkipTo
  nameWithType: RecordIDEnumerator.SkipTo
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.SkipTo
- uid: Microsoft.Health.InvertedIndex.ISkipEnumerator{System.UInt32}.SkipTo(System.UInt32)
  commentId: M:Microsoft.Health.InvertedIndex.ISkipEnumerator{System.UInt32}.SkipTo(System.UInt32)
  parent: Microsoft.Health.InvertedIndex.ISkipEnumerator{System.UInt32}
  definition: Microsoft.Health.InvertedIndex.ISkipEnumerator`1.SkipTo(`0)
  name: SkipTo(UInt32)
  nameWithType: ISkipEnumerator<UInt32>.SkipTo(UInt32)
  fullName: Microsoft.Health.InvertedIndex.ISkipEnumerator<System.UInt32>.SkipTo(System.UInt32)
  nameWithType.vb: ISkipEnumerator(Of UInt32).SkipTo(UInt32)
  fullName.vb: Microsoft.Health.InvertedIndex.ISkipEnumerator(Of System.UInt32).SkipTo(System.UInt32)
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ISkipEnumerator`1.SkipTo(`0)
    name: SkipTo
    nameWithType: ISkipEnumerator<UInt32>.SkipTo
    fullName: Microsoft.Health.InvertedIndex.ISkipEnumerator<System.UInt32>.SkipTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ISkipEnumerator`1.SkipTo(`0)
    name: SkipTo
    nameWithType: ISkipEnumerator(Of UInt32).SkipTo
    fullName: Microsoft.Health.InvertedIndex.ISkipEnumerator(Of System.UInt32).SkipTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.ISkipEnumerator`1.SkipTo(`0)
  commentId: M:Microsoft.Health.InvertedIndex.ISkipEnumerator`1.SkipTo(`0)
  isExternal: false
  name: SkipTo(T)
  nameWithType: ISkipEnumerator<T>.SkipTo(T)
  fullName: Microsoft.Health.InvertedIndex.ISkipEnumerator<T>.SkipTo(T)
  nameWithType.vb: ISkipEnumerator(Of T).SkipTo(T)
  fullName.vb: Microsoft.Health.InvertedIndex.ISkipEnumerator(Of T).SkipTo(T)
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ISkipEnumerator`1.SkipTo(`0)
    name: SkipTo
    nameWithType: ISkipEnumerator<T>.SkipTo
    fullName: Microsoft.Health.InvertedIndex.ISkipEnumerator<T>.SkipTo
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ISkipEnumerator`1.SkipTo(`0)
    name: SkipTo
    nameWithType: ISkipEnumerator(Of T).SkipTo
    fullName: Microsoft.Health.InvertedIndex.ISkipEnumerator(Of T).SkipTo
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.SkipToID*
  commentId: Overload:Microsoft.Health.InvertedIndex.RecordIDEnumerator.SkipToID
  isExternal: false
  name: SkipToID
  nameWithType: RecordIDEnumerator.SkipToID
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.SkipToID
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.Score*
  commentId: Overload:Microsoft.Health.InvertedIndex.RecordIDEnumerator.Score
  isExternal: false
  name: Score
  nameWithType: RecordIDEnumerator.Score
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.Score
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.RawScore*
  commentId: Overload:Microsoft.Health.InvertedIndex.RecordIDEnumerator.RawScore
  isExternal: false
  name: RawScore
  nameWithType: RecordIDEnumerator.RawScore
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.RawScore
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.CompareTo*
  commentId: Overload:Microsoft.Health.InvertedIndex.RecordIDEnumerator.CompareTo
  isExternal: false
  name: CompareTo
  nameWithType: RecordIDEnumerator.CompareTo
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.CompareTo
- uid: System.IComparable{Microsoft.Health.InvertedIndex.RecordIDEnumerator}.CompareTo(Microsoft.Health.InvertedIndex.RecordIDEnumerator)
  commentId: M:System.IComparable{Microsoft.Health.InvertedIndex.RecordIDEnumerator}.CompareTo(Microsoft.Health.InvertedIndex.RecordIDEnumerator)
  parent: System.IComparable{Microsoft.Health.InvertedIndex.RecordIDEnumerator}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(RecordIDEnumerator)
  nameWithType: IComparable<RecordIDEnumerator>.CompareTo(RecordIDEnumerator)
  fullName: System.IComparable<Microsoft.Health.InvertedIndex.RecordIDEnumerator>.CompareTo(Microsoft.Health.InvertedIndex.RecordIDEnumerator)
  nameWithType.vb: IComparable(Of RecordIDEnumerator).CompareTo(RecordIDEnumerator)
  fullName.vb: System.IComparable(Of Microsoft.Health.InvertedIndex.RecordIDEnumerator).CompareTo(Microsoft.Health.InvertedIndex.RecordIDEnumerator)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<RecordIDEnumerator>.CompareTo
    fullName: System.IComparable<Microsoft.Health.InvertedIndex.RecordIDEnumerator>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of RecordIDEnumerator).CompareTo
    fullName: System.IComparable(Of Microsoft.Health.InvertedIndex.RecordIDEnumerator).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.OnMoveNext*
  commentId: Overload:Microsoft.Health.InvertedIndex.RecordIDEnumerator.OnMoveNext
  isExternal: false
  name: OnMoveNext
  nameWithType: RecordIDEnumerator.OnMoveNext
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.OnMoveNext
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.OnSkipTo*
  commentId: Overload:Microsoft.Health.InvertedIndex.RecordIDEnumerator.OnSkipTo
  isExternal: false
  name: OnSkipTo
  nameWithType: RecordIDEnumerator.OnSkipTo
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.OnSkipTo
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.OnScore*
  commentId: Overload:Microsoft.Health.InvertedIndex.RecordIDEnumerator.OnScore
  isExternal: false
  name: OnScore
  nameWithType: RecordIDEnumerator.OnScore
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.OnScore
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.OnCost*
  commentId: Overload:Microsoft.Health.InvertedIndex.RecordIDEnumerator.OnCost
  isExternal: false
  name: OnCost
  nameWithType: RecordIDEnumerator.OnCost
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.OnCost
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.System#Collections#IEnumerator#Current*
  commentId: Overload:Microsoft.Health.InvertedIndex.RecordIDEnumerator.System#Collections#IEnumerator#Current
  isExternal: false
  name: IEnumerator.Current
  nameWithType: RecordIDEnumerator.IEnumerator.Current
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.System.Collections.IEnumerator.Current
  nameWithType.vb: RecordIDEnumerator.System.Collections.IEnumerator.Current
  name.vb: System.Collections.IEnumerator.Current
- uid: System.Collections.IEnumerator.Current
  commentId: P:System.Collections.IEnumerator.Current
  parent: System.Collections.IEnumerator
  isExternal: true
  name: Current
  nameWithType: IEnumerator.Current
  fullName: System.Collections.IEnumerator.Current
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.Dispose*
  commentId: Overload:Microsoft.Health.InvertedIndex.RecordIDEnumerator.Dispose
  isExternal: false
  name: Dispose
  nameWithType: RecordIDEnumerator.Dispose
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator.Reset*
  commentId: Overload:Microsoft.Health.InvertedIndex.RecordIDEnumerator.Reset
  isExternal: false
  name: Reset
  nameWithType: RecordIDEnumerator.Reset
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator.Reset
- uid: System.Collections.IEnumerator.Reset
  commentId: M:System.Collections.IEnumerator.Reset
  parent: System.Collections.IEnumerator
  isExternal: true
  name: Reset()
  nameWithType: IEnumerator.Reset()
  fullName: System.Collections.IEnumerator.Reset()
  spec.csharp:
  - uid: System.Collections.IEnumerator.Reset
    name: Reset
    nameWithType: IEnumerator.Reset
    fullName: System.Collections.IEnumerator.Reset
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerator.Reset
    name: Reset
    nameWithType: IEnumerator.Reset
    fullName: System.Collections.IEnumerator.Reset
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
