### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.HealthRecordAccessor
  commentId: T:Microsoft.Health.HealthRecordAccessor
  id: HealthRecordAccessor
  parent: Microsoft.Health
  children:
  - Microsoft.Health.HealthRecordAccessor.#ctor(Microsoft.Health.ApplicationConnection,System.Guid)
  - Microsoft.Health.HealthRecordAccessor.AssociateAlternateId(System.String)
  - Microsoft.Health.HealthRecordAccessor.Connection
  - Microsoft.Health.HealthRecordAccessor.CreateFromXml(Microsoft.Health.ApplicationConnection,System.Xml.XPath.XPathNavigator)
  - Microsoft.Health.HealthRecordAccessor.CreateSearcher
  - Microsoft.Health.HealthRecordAccessor.CreateSearcher(System.Guid[])
  - Microsoft.Health.HealthRecordAccessor.DisassociateAlternateId(System.String)
  - Microsoft.Health.HealthRecordAccessor.GetAlternateIds
  - Microsoft.Health.HealthRecordAccessor.GetItem(System.Guid)
  - Microsoft.Health.HealthRecordAccessor.GetItem(System.Guid,Microsoft.Health.HealthRecordItemSections)
  - Microsoft.Health.HealthRecordAccessor.GetItemsByType(System.Guid)
  - Microsoft.Health.HealthRecordAccessor.GetItemsByType(System.Guid,Microsoft.Health.HealthRecordItemSections)
  - Microsoft.Health.HealthRecordAccessor.GetItemsByType(System.Guid,Microsoft.Health.HealthRecordView)
  - Microsoft.Health.HealthRecordAccessor.GetValidGroupMembership(System.Collections.Generic.IList{System.Guid})
  - Microsoft.Health.HealthRecordAccessor.GetXml
  - Microsoft.Health.HealthRecordAccessor.Id
  - Microsoft.Health.HealthRecordAccessor.Location
  - Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)
  - Microsoft.Health.HealthRecordAccessor.NewItems(System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})
  - Microsoft.Health.HealthRecordAccessor.QueryPermissions(System.Collections.Generic.IList{Microsoft.Health.HealthRecordItemTypeDefinition})
  - Microsoft.Health.HealthRecordAccessor.QueryPermissions(System.Collections.Generic.IList{System.Guid})
  - Microsoft.Health.HealthRecordAccessor.QueryPermissionsByTypes(System.Collections.Generic.IList{System.Guid})
  - Microsoft.Health.HealthRecordAccessor.QueryRecordPermissions(System.Collections.Generic.IList{System.Guid})
  - Microsoft.Health.HealthRecordAccessor.RemoveApplicationAuthorization
  - Microsoft.Health.HealthRecordAccessor.RemoveItem(Microsoft.Health.HealthRecordItem)
  - Microsoft.Health.HealthRecordAccessor.RemoveItem(Microsoft.Health.HealthRecordItemKey)
  - Microsoft.Health.HealthRecordAccessor.RemoveItems(System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})
  - Microsoft.Health.HealthRecordAccessor.RemoveItems(System.Collections.Generic.IList{Microsoft.Health.HealthRecordItemKey})
  - Microsoft.Health.HealthRecordAccessor.SendMessageToCustodiansFromApplication(System.Boolean,System.String,System.String,System.String,System.String,System.String)
  - Microsoft.Health.HealthRecordAccessor.UpdateItem(Microsoft.Health.HealthRecordItem)
  - Microsoft.Health.HealthRecordAccessor.UpdateItems(System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})
  langs:
  - csharp
  - vb
  name: HealthRecordAccessor
  nameWithType: HealthRecordAccessor
  fullName: Microsoft.Health.HealthRecordAccessor
  type: Class
  source:
    remote:
      path: Microsoft.Health/HealthRecordAccessor.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: HealthRecordAccessor
    path: ../Microsoft.Health/HealthRecordAccessor.cs
    startLine: 28
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nRepresents the API set used to access a health record for an individual. \n"
  remarks: "\nA HealthRecordAccessor represents a person's view of a health record.\nThis view can vary based upon the access rights the person has to the\nrecord. More than one person might have access to the same record but have\ndifferent views. For instance, a husband might have a HealthRecordAccessor\ninstance for himself and another for his wife's health record to which \nshe granted him access.\n"
  example: []
  syntax:
    content: public class HealthRecordAccessor
    content.vb: Public Class HealthRecordAccessor
  inheritance:
  - System.Object
  derivedClasses:
  - Microsoft.Health.HealthRecordInfo
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - Microsoft.Health.HealthRecordAccessor.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  - System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.HealthRecordAccessor.CreateFromXml(Microsoft.Health.ApplicationConnection,System.Xml.XPath.XPathNavigator)
  commentId: M:Microsoft.Health.HealthRecordAccessor.CreateFromXml(Microsoft.Health.ApplicationConnection,System.Xml.XPath.XPathNavigator)
  id: CreateFromXml(Microsoft.Health.ApplicationConnection,System.Xml.XPath.XPathNavigator)
  parent: Microsoft.Health.HealthRecordAccessor
  langs:
  - csharp
  - vb
  name: CreateFromXml(ApplicationConnection, XPathNavigator)
  nameWithType: HealthRecordAccessor.CreateFromXml(ApplicationConnection, XPathNavigator)
  fullName: Microsoft.Health.HealthRecordAccessor.CreateFromXml(Microsoft.Health.ApplicationConnection, System.Xml.XPath.XPathNavigator)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordAccessor.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CreateFromXml
    path: ../Microsoft.Health/HealthRecordAccessor.cs
    startLine: 53
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nCreates an instance of a HealthRecordAccessor object using\nthe specified XML.\n"
  example: []
  syntax:
    content: public static HealthRecordAccessor CreateFromXml(ApplicationConnection connection, XPathNavigator navigator)
    content.vb: Public Shared Function CreateFromXml(connection As ApplicationConnection, navigator As XPathNavigator) As HealthRecordAccessor
    parameters:
    - id: connection
      type: Microsoft.Health.ApplicationConnection
      description: "\nA connection for the current user.\n"
    - id: navigator
      type: System.Xml.XPath.XPathNavigator
      description: "\nThe XML containing the record information.\n"
    return:
      type: Microsoft.Health.HealthRecordAccessor
      description: "\nA new instance of a HealthRecordAccessor object containing the\nrecord information.\n"
  overload: Microsoft.Health.HealthRecordAccessor.CreateFromXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <span class=\"paramref\">connection</span> or <span class=\"paramref\">navigator</span> \nparameter is <strong>null</strong>.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthRecordAccessor.GetXml
  commentId: M:Microsoft.Health.HealthRecordAccessor.GetXml
  id: GetXml
  parent: Microsoft.Health.HealthRecordAccessor
  langs:
  - csharp
  - vb
  name: GetXml()
  nameWithType: HealthRecordAccessor.GetXml()
  fullName: Microsoft.Health.HealthRecordAccessor.GetXml()
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordAccessor.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetXml
    path: ../Microsoft.Health/HealthRecordAccessor.cs
    startLine: 97
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nRetrieves the XML representation of the <xref href=\"Microsoft.Health.HealthRecordAccessor\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual string GetXml()
    content.vb: Public Overridable Function GetXml As String
    return:
      type: System.String
      description: "\nA string containing the XML representation of the \n<xref href=\"Microsoft.Health.HealthRecordAccessor\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  overload: Microsoft.Health.HealthRecordAccessor.GetXml*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.Health.HealthRecordAccessor.SendMessageToCustodiansFromApplication(System.Boolean,System.String,System.String,System.String,System.String,System.String)
  commentId: M:Microsoft.Health.HealthRecordAccessor.SendMessageToCustodiansFromApplication(System.Boolean,System.String,System.String,System.String,System.String,System.String)
  id: SendMessageToCustodiansFromApplication(System.Boolean,System.String,System.String,System.String,System.String,System.String)
  parent: Microsoft.Health.HealthRecordAccessor
  langs:
  - csharp
  - vb
  name: SendMessageToCustodiansFromApplication(Boolean, String, String, String, String, String)
  nameWithType: HealthRecordAccessor.SendMessageToCustodiansFromApplication(Boolean, String, String, String, String, String)
  fullName: Microsoft.Health.HealthRecordAccessor.SendMessageToCustodiansFromApplication(System.Boolean, System.String, System.String, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordAccessor.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SendMessageToCustodiansFromApplication
    path: ../Microsoft.Health/HealthRecordAccessor.cs
    startLine: 199
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nSends an insecure message originating from the application \nto custodians of the health record.\n"
  remarks: "\nIf both the <span class=\"paramref\">textBody</span> and \n<span class=\"paramref\">htmlBody</span> of the message is specified then a\nmulti-part message will be sent so that the html body will be used\nand fallback to text if not supported by the client.\n\nIf the domain name of the application has not been previously \nset (usually through app registration), this method will throw \na <xref href=\"Microsoft.Health.HealthServiceException\" data-throw-if-not-resolved=\"false\"></xref>.      \n\nThe calling application and the person through which authorization to the \nrecord was obtained must be authorized for the record. \nThe person must be either authenticated, or if the person is offline,\ntheir person Id specified as the offline person Id.\nSee <xref href=\"Microsoft.Health.Web.OfflineWebApplicationConnection\" data-throw-if-not-resolved=\"false\"></xref> \nfor more information.\n"
  example: []
  syntax:
    content: public void SendMessageToCustodiansFromApplication(bool addressMustBeValidated, string senderMailboxName, string senderDisplayName, string subject, string textBody, string htmlBody)
    content.vb: Public Sub SendMessageToCustodiansFromApplication(addressMustBeValidated As Boolean, senderMailboxName As String, senderDisplayName As String, subject As String, textBody As String, htmlBody As String)
    parameters:
    - id: addressMustBeValidated
      type: System.Boolean
      description: "\nIf true, HealthVault will only send the message to custodians with \nvalidated e-mail addresses. If false, the message will\nbe sent even if the custodians' addresses have not been validated.\n"
    - id: senderMailboxName
      type: System.String
      description: "\nAn application specified mailbox name that's sending the message.\nThe mailbox name is appended to the application's domain name to \nform the From email address of the message. This parameter should\nonly contain the characters before the @ symbol of the email \naddress.\n"
    - id: senderDisplayName
      type: System.String
      description: "\nThe message sender's display name.\n"
    - id: subject
      type: System.String
      description: "\nThe subject of the message.\n"
    - id: textBody
      type: System.String
      description: "\nThe text body of the message.\n"
    - id: htmlBody
      type: System.String
      description: "\nThe HTML body of the message.\n"
  overload: Microsoft.Health.HealthRecordAccessor.SendMessageToCustodiansFromApplication*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nif <span class=\"paramref\">senderMailboxName</span> is null or empty,\n-or-\nif <span class=\"paramref\">senderDisplayName</span> is null or empty,\n-or-\nif <span class=\"paramref\">subject</span> is null or empty,\n-or-\nif <span class=\"paramref\">textBody</span> and <span class=\"paramref\">htmlBody</span>\nare both null or empty.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf the server returned a failure when making the request.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordAccessor.#ctor(Microsoft.Health.ApplicationConnection,System.Guid)
  commentId: M:Microsoft.Health.HealthRecordAccessor.#ctor(Microsoft.Health.ApplicationConnection,System.Guid)
  id: '#ctor(Microsoft.Health.ApplicationConnection,System.Guid)'
  parent: Microsoft.Health.HealthRecordAccessor
  langs:
  - csharp
  - vb
  name: HealthRecordAccessor(ApplicationConnection, Guid)
  nameWithType: HealthRecordAccessor.HealthRecordAccessor(ApplicationConnection, Guid)
  fullName: Microsoft.Health.HealthRecordAccessor.HealthRecordAccessor(Microsoft.Health.ApplicationConnection, System.Guid)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health/HealthRecordAccessor.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health/HealthRecordAccessor.cs
    startLine: 242
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nCreates a new instance of the <xref href=\"Microsoft.Health.HealthRecordAccessor\" data-throw-if-not-resolved=\"false\"></xref>\nclass. \n"
  remarks: "\nThis constructor creates a view of a personal health record.\n"
  example: []
  syntax:
    content: public HealthRecordAccessor(ApplicationConnection connection, Guid id)
    content.vb: Public Sub New(connection As ApplicationConnection, id As Guid)
    parameters:
    - id: connection
      type: Microsoft.Health.ApplicationConnection
      description: "\nAn instance of a connection to which the record \noperations will be directed.\n"
    - id: id
      type: System.Guid
      description: "\nThe unique identifier for the record.\n"
  overload: Microsoft.Health.HealthRecordAccessor.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <span class=\"paramref\">connection</span> parameter is <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">id</span> parameter is Guid.Empty.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordAccessor.Id
  commentId: P:Microsoft.Health.HealthRecordAccessor.Id
  id: Id
  parent: Microsoft.Health.HealthRecordAccessor
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: HealthRecordAccessor.Id
  fullName: Microsoft.Health.HealthRecordAccessor.Id
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordAccessor.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Id
    path: ../Microsoft.Health/HealthRecordAccessor.cs
    startLine: 294
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the record identifier.\n"
  remarks: "\nThe record identifier is issued when the record is created. Creating\nthe account automatically creates a self record as well.\n"
  example: []
  syntax:
    content: public Guid Id { get; }
    content.vb: Public ReadOnly Property Id As Guid
    parameters: []
    return:
      type: System.Guid
      description: "\nA globally unique identifier (GUID) for the record.\n"
  overload: Microsoft.Health.HealthRecordAccessor.Id*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthRecordAccessor.Location
  commentId: P:Microsoft.Health.HealthRecordAccessor.Location
  id: Location
  parent: Microsoft.Health.HealthRecordAccessor
  langs:
  - csharp
  - vb
  name: Location
  nameWithType: HealthRecordAccessor.Location
  fullName: Microsoft.Health.HealthRecordAccessor.Location
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordAccessor.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Location
    path: ../Microsoft.Health/HealthRecordAccessor.cs
    startLine: 304
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the location of the person that this record is for.\n"
  example: []
  syntax:
    content: public Location Location { get; protected set; }
    content.vb: Public Property Location As Location
    parameters: []
    return:
      type: Microsoft.Health.Location
  overload: Microsoft.Health.HealthRecordAccessor.Location*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Microsoft.Health.HealthRecordAccessor.Connection
  commentId: P:Microsoft.Health.HealthRecordAccessor.Connection
  id: Connection
  parent: Microsoft.Health.HealthRecordAccessor
  langs:
  - csharp
  - vb
  name: Connection
  nameWithType: HealthRecordAccessor.Connection
  fullName: Microsoft.Health.HealthRecordAccessor.Connection
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthRecordAccessor.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Connection
    path: ../Microsoft.Health/HealthRecordAccessor.cs
    startLine: 311
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets a reference to the HealthVault service that\ncreated this <xref href=\"Microsoft.Health.HealthRecordAccessor\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ApplicationConnection Connection { get; }
    content.vb: Public ReadOnly Property Connection As ApplicationConnection
    parameters: []
    return:
      type: Microsoft.Health.ApplicationConnection
  overload: Microsoft.Health.HealthRecordAccessor.Connection*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthRecordAccessor.CreateSearcher
  commentId: M:Microsoft.Health.HealthRecordAccessor.CreateSearcher
  id: CreateSearcher
  parent: Microsoft.Health.HealthRecordAccessor
  langs:
  - csharp
  - vb
  name: CreateSearcher()
  nameWithType: HealthRecordAccessor.CreateSearcher()
  fullName: Microsoft.Health.HealthRecordAccessor.CreateSearcher()
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordAccessor.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CreateSearcher
    path: ../Microsoft.Health/HealthRecordAccessor.cs
    startLine: 336
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nCreates a new HealthRecordSearcher for this record.\n"
  remarks: "\nYou can also call the <xref href=\"Microsoft.Health.HealthRecordSearcher\" data-throw-if-not-resolved=\"false\"></xref> constructor \ndirectly and pass in a reference to this \n<xref href=\"Microsoft.Health.HealthRecordAccessor\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public HealthRecordSearcher CreateSearcher()
    content.vb: Public Function CreateSearcher As HealthRecordSearcher
    return:
      type: Microsoft.Health.HealthRecordSearcher
      description: "\nA HealthRecordSearcher that searches for items associated\nwith this record.\n"
  overload: Microsoft.Health.HealthRecordAccessor.CreateSearcher*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordAccessor.CreateSearcher(System.Guid[])
  commentId: M:Microsoft.Health.HealthRecordAccessor.CreateSearcher(System.Guid[])
  id: CreateSearcher(System.Guid[])
  parent: Microsoft.Health.HealthRecordAccessor
  langs:
  - csharp
  - vb
  name: CreateSearcher(Guid[])
  nameWithType: HealthRecordAccessor.CreateSearcher(Guid[])
  fullName: Microsoft.Health.HealthRecordAccessor.CreateSearcher(System.Guid[])
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordAccessor.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CreateSearcher
    path: ../Microsoft.Health/HealthRecordAccessor.cs
    startLine: 364
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nCreates a new HealthRecordSearcher for a list of specific types.\n"
  remarks: "\nThe method adds a filter to the <xref href=\"Microsoft.Health.HealthRecordSearcher\" data-throw-if-not-resolved=\"false\"></xref> that only returns\nitems of the specified type IDs. That filter may be accessed through the\nreturned searcher using searcher.Filters[0].\n\nYou can also call the <xref href=\"Microsoft.Health.HealthRecordSearcher\" data-throw-if-not-resolved=\"false\"></xref> constructor \ndirectly and pass in a reference to this \n<xref href=\"Microsoft.Health.HealthRecordAccessor\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public HealthRecordSearcher CreateSearcher(params Guid[] typeIds)
    content.vb: Public Function CreateSearcher(ParamArray typeIds As Guid()) As HealthRecordSearcher
    parameters:
    - id: typeIds
      type: System.Guid[]
      description: "\nA list of unique type ids to filter on.\n"
    return:
      type: Microsoft.Health.HealthRecordSearcher
      description: "\nA <xref href=\"Microsoft.Health.HealthRecordSearcher\" data-throw-if-not-resolved=\"false\"></xref> that searches for items with specific type IDs\nwithin this record.\n"
  overload: Microsoft.Health.HealthRecordAccessor.CreateSearcher*
  nameWithType.vb: HealthRecordAccessor.CreateSearcher(Guid())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.HealthRecordAccessor.CreateSearcher(System.Guid())
  name.vb: CreateSearcher(Guid())
- uid: Microsoft.Health.HealthRecordAccessor.GetItem(System.Guid,Microsoft.Health.HealthRecordItemSections)
  commentId: M:Microsoft.Health.HealthRecordAccessor.GetItem(System.Guid,Microsoft.Health.HealthRecordItemSections)
  id: GetItem(System.Guid,Microsoft.Health.HealthRecordItemSections)
  parent: Microsoft.Health.HealthRecordAccessor
  langs:
  - csharp
  - vb
  name: GetItem(Guid, HealthRecordItemSections)
  nameWithType: HealthRecordAccessor.GetItem(Guid, HealthRecordItemSections)
  fullName: Microsoft.Health.HealthRecordAccessor.GetItem(System.Guid, Microsoft.Health.HealthRecordItemSections)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordAccessor.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetItem
    path: ../Microsoft.Health/HealthRecordAccessor.cs
    startLine: 398
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the health record item specified by its ID.\n"
  remarks: "\nThis method accesses the HealthVault service across the network.\n"
  example: []
  syntax:
    content: public HealthRecordItem GetItem(Guid itemId, HealthRecordItemSections sections)
    content.vb: Public Function GetItem(itemId As Guid, sections As HealthRecordItemSections) As HealthRecordItem
    parameters:
    - id: itemId
      type: System.Guid
      description: "\nThe ID of the health record item to retrieve.\n"
    - id: sections
      type: Microsoft.Health.HealthRecordItemSections
      description: "\nThe data sections of the health record item to retrieve.\n"
    return:
      type: Microsoft.Health.HealthRecordItem
      description: "\nA <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref> with the specified data sections \nfilled out.\n"
  overload: Microsoft.Health.HealthRecordAccessor.GetItem*
  exceptions:
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe HealthVault service returned an error.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordAccessor.GetItem(System.Guid)
  commentId: M:Microsoft.Health.HealthRecordAccessor.GetItem(System.Guid)
  id: GetItem(System.Guid)
  parent: Microsoft.Health.HealthRecordAccessor
  langs:
  - csharp
  - vb
  name: GetItem(Guid)
  nameWithType: HealthRecordAccessor.GetItem(Guid)
  fullName: Microsoft.Health.HealthRecordAccessor.GetItem(System.Guid)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordAccessor.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetItem
    path: ../Microsoft.Health/HealthRecordAccessor.cs
    startLine: 427
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the health record item specified by its ID.\n"
  remarks: "\nThis method accesses the HealthVault service across the network.\n"
  example: []
  syntax:
    content: public HealthRecordItem GetItem(Guid itemId)
    content.vb: Public Function GetItem(itemId As Guid) As HealthRecordItem
    parameters:
    - id: itemId
      type: System.Guid
      description: "\nThe ID of the health record item to retrieve.\n"
    return:
      type: Microsoft.Health.HealthRecordItem
      description: "\nA <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref> with the default data sections (Core and XML) \nfilled out.\n"
  overload: Microsoft.Health.HealthRecordAccessor.GetItem*
  exceptions:
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe HealthVault service returned an error.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordAccessor.GetItemsByType(System.Guid,Microsoft.Health.HealthRecordItemSections)
  commentId: M:Microsoft.Health.HealthRecordAccessor.GetItemsByType(System.Guid,Microsoft.Health.HealthRecordItemSections)
  id: GetItemsByType(System.Guid,Microsoft.Health.HealthRecordItemSections)
  parent: Microsoft.Health.HealthRecordAccessor
  langs:
  - csharp
  - vb
  name: GetItemsByType(Guid, HealthRecordItemSections)
  nameWithType: HealthRecordAccessor.GetItemsByType(Guid, HealthRecordItemSections)
  fullName: Microsoft.Health.HealthRecordAccessor.GetItemsByType(System.Guid, Microsoft.Health.HealthRecordItemSections)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordAccessor.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetItemsByType
    path: ../Microsoft.Health/HealthRecordAccessor.cs
    startLine: 460
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the health record items related to this record filtered on the\nspecified type.\n"
  remarks: "\nThis method accesses the HealthVault service across the network.\n"
  example: []
  syntax:
    content: public HealthRecordItemCollection GetItemsByType(Guid typeId, HealthRecordItemSections sections)
    content.vb: Public Function GetItemsByType(typeId As Guid, sections As HealthRecordItemSections) As HealthRecordItemCollection
    parameters:
    - id: typeId
      type: System.Guid
      description: "\nA unique identifier for the type of health record item to filter \non.\n"
    - id: sections
      type: Microsoft.Health.HealthRecordItemSections
      description: "\nThe data sections of the health record item to retrieve.\n"
    return:
      type: Microsoft.Health.HealthRecordItemCollection
      description: "\nA collection of the health record items related to this record\nthat match the specified type identifier.\n"
  overload: Microsoft.Health.HealthRecordAccessor.GetItemsByType*
  exceptions:
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe HealthVault service returned an error.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordAccessor.GetItemsByType(System.Guid,Microsoft.Health.HealthRecordView)
  commentId: M:Microsoft.Health.HealthRecordAccessor.GetItemsByType(System.Guid,Microsoft.Health.HealthRecordView)
  id: GetItemsByType(System.Guid,Microsoft.Health.HealthRecordView)
  parent: Microsoft.Health.HealthRecordAccessor
  langs:
  - csharp
  - vb
  name: GetItemsByType(Guid, HealthRecordView)
  nameWithType: HealthRecordAccessor.GetItemsByType(Guid, HealthRecordView)
  fullName: Microsoft.Health.HealthRecordAccessor.GetItemsByType(System.Guid, Microsoft.Health.HealthRecordView)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordAccessor.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetItemsByType
    path: ../Microsoft.Health/HealthRecordAccessor.cs
    startLine: 503
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the health record items related to this record filtered on the\nspecified type.\n"
  remarks: "\nThis method accesses the HealthVault service across the network.\n"
  example: []
  syntax:
    content: public HealthRecordItemCollection GetItemsByType(Guid typeId, HealthRecordView view)
    content.vb: Public Function GetItemsByType(typeId As Guid, view As HealthRecordView) As HealthRecordItemCollection
    parameters:
    - id: typeId
      type: System.Guid
      description: "\nA unique identifier for the type of health record item to filter \non.\n"
    - id: view
      type: Microsoft.Health.HealthRecordView
      description: "\nThe view to use when retrieving the data.\n"
    return:
      type: Microsoft.Health.HealthRecordItemCollection
      description: "\nA collection of the health record items related to this record\nthat match the specified type identifier.\n"
  overload: Microsoft.Health.HealthRecordAccessor.GetItemsByType*
  exceptions:
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe HealthVault service returned an error.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordAccessor.GetItemsByType(System.Guid)
  commentId: M:Microsoft.Health.HealthRecordAccessor.GetItemsByType(System.Guid)
  id: GetItemsByType(System.Guid)
  parent: Microsoft.Health.HealthRecordAccessor
  langs:
  - csharp
  - vb
  name: GetItemsByType(Guid)
  nameWithType: HealthRecordAccessor.GetItemsByType(Guid)
  fullName: Microsoft.Health.HealthRecordAccessor.GetItemsByType(System.Guid)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordAccessor.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetItemsByType
    path: ../Microsoft.Health/HealthRecordAccessor.cs
    startLine: 542
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the health record items related to this record filtered on the\nspecified type.\n"
  remarks: "\nThis method accesses the HealthVault service across the network.\n"
  example: []
  syntax:
    content: public HealthRecordItemCollection GetItemsByType(Guid typeId)
    content.vb: Public Function GetItemsByType(typeId As Guid) As HealthRecordItemCollection
    parameters:
    - id: typeId
      type: System.Guid
      description: "\nA unique identifier for the type of health record item to filter \non.\n"
    return:
      type: Microsoft.Health.HealthRecordItemCollection
      description: "\nA collection of the health record items related to this record\nthat match the specified type identifier.\n"
  overload: Microsoft.Health.HealthRecordAccessor.GetItemsByType*
  exceptions:
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe HealthVault service returned an error.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)
  commentId: M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)
  id: NewItem(Microsoft.Health.HealthRecordItem)
  parent: Microsoft.Health.HealthRecordAccessor
  langs:
  - csharp
  - vb
  name: NewItem(HealthRecordItem)
  nameWithType: HealthRecordAccessor.NewItem(HealthRecordItem)
  fullName: Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordAccessor.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: NewItem
    path: ../Microsoft.Health/HealthRecordAccessor.cs
    startLine: 573
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nCreates a new health record item associated with this record in the \nHealthVault service.\n"
  remarks: "\nThis method accesses the HealthVault service across the network.\n"
  example: []
  syntax:
    content: public void NewItem(HealthRecordItem item)
    content.vb: Public Sub NewItem(item As HealthRecordItem)
    parameters:
    - id: item
      type: Microsoft.Health.HealthRecordItem
      description: "\nThe health record item to be created in the HealthVault service.\n"
  overload: Microsoft.Health.HealthRecordAccessor.NewItem*
  exceptions:
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe HealthVault service returned an error.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe HealthRecordItem supplied was null.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordAccessor.NewItems(System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})
  commentId: M:Microsoft.Health.HealthRecordAccessor.NewItems(System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})
  id: NewItems(System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})
  parent: Microsoft.Health.HealthRecordAccessor
  langs:
  - csharp
  - vb
  name: NewItems(IList<HealthRecordItem>)
  nameWithType: HealthRecordAccessor.NewItems(IList<HealthRecordItem>)
  fullName: Microsoft.Health.HealthRecordAccessor.NewItems(System.Collections.Generic.IList<Microsoft.Health.HealthRecordItem>)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordAccessor.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: NewItems
    path: ../Microsoft.Health/HealthRecordAccessor.cs
    startLine: 603
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nCreates new health record items associated with the record.\n"
  remarks: "\nThis method accesses the HealthVault service across the network.\n"
  example: []
  syntax:
    content: public void NewItems(IList<HealthRecordItem> items)
    content.vb: Public Sub NewItems(items As IList(Of HealthRecordItem))
    parameters:
    - id: items
      type: System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem}
      description: "\nThe health record items from which to create new instances.\n"
  overload: Microsoft.Health.HealthRecordAccessor.NewItems*
  exceptions:
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe HealthVault service returned an error. \nThe exception's Error property will contain the index of the\nitem on which the failure occurred in the ErrorInfo property. If any failures occur, \nno items will have been created.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nAt least one HealthRecordItem in the supplied list was null.\n"
  nameWithType.vb: HealthRecordAccessor.NewItems(IList(Of HealthRecordItem))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.HealthRecordAccessor.NewItems(System.Collections.Generic.IList(Of Microsoft.Health.HealthRecordItem))
  name.vb: NewItems(IList(Of HealthRecordItem))
- uid: Microsoft.Health.HealthRecordAccessor.UpdateItem(Microsoft.Health.HealthRecordItem)
  commentId: M:Microsoft.Health.HealthRecordAccessor.UpdateItem(Microsoft.Health.HealthRecordItem)
  id: UpdateItem(Microsoft.Health.HealthRecordItem)
  parent: Microsoft.Health.HealthRecordAccessor
  langs:
  - csharp
  - vb
  name: UpdateItem(HealthRecordItem)
  nameWithType: HealthRecordAccessor.UpdateItem(HealthRecordItem)
  fullName: Microsoft.Health.HealthRecordAccessor.UpdateItem(Microsoft.Health.HealthRecordItem)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordAccessor.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: UpdateItem
    path: ../Microsoft.Health/HealthRecordAccessor.cs
    startLine: 635
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nUpdates the specified health record item.\n"
  remarks: "\nOnly new items are updated with the appropriate unique identifier. \nAll other sections must be updated manually.\n<br /><br />\nThis method accesses the HealthVault service across the network.\n"
  example: []
  syntax:
    content: public void UpdateItem(HealthRecordItem item)
    content.vb: Public Sub UpdateItem(item As HealthRecordItem)
    parameters:
    - id: item
      type: Microsoft.Health.HealthRecordItem
      description: "\nThe health record item to be updated.\n"
  overload: Microsoft.Health.HealthRecordAccessor.UpdateItem*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <span class=\"paramref\">item</span> parameter is <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">item</span> parameter does not have an ID.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe HealthVault service returned an error.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordAccessor.UpdateItems(System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})
  commentId: M:Microsoft.Health.HealthRecordAccessor.UpdateItems(System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})
  id: UpdateItems(System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})
  parent: Microsoft.Health.HealthRecordAccessor
  langs:
  - csharp
  - vb
  name: UpdateItems(IList<HealthRecordItem>)
  nameWithType: HealthRecordAccessor.UpdateItems(IList<HealthRecordItem>)
  fullName: Microsoft.Health.HealthRecordAccessor.UpdateItems(System.Collections.Generic.IList<Microsoft.Health.HealthRecordItem>)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordAccessor.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: UpdateItems
    path: ../Microsoft.Health/HealthRecordAccessor.cs
    startLine: 674
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nUpdates the specified health record items in one batch call to \nthe service.\n"
  remarks: "\nOnly new items are updated with the appropriate unique identifier. \nAll other sections must be updated manually.\n<br /><br />\nThis method accesses the HealthVault service across the network.\n"
  example: []
  syntax:
    content: public void UpdateItems(IList<HealthRecordItem> itemsToUpdate)
    content.vb: Public Sub UpdateItems(itemsToUpdate As IList(Of HealthRecordItem))
    parameters:
    - id: itemsToUpdate
      type: System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem}
      description: "\nThe health record items to be updated.\n"
  overload: Microsoft.Health.HealthRecordAccessor.UpdateItems*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <span class=\"paramref\">itemsToUpdate</span> parameter is <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">itemsToUpdate</span> contains a <strong>null</strong> member or\na <xref href=\"Microsoft.Health.HealthRecordItem\" data-throw-if-not-resolved=\"false\"></xref> instance that does not have an ID.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe HealthVault service returned an error.\nThe exception's Error property will contain the index of the\nitem on which the failure occurred in the ErrorInfo property. If any failures occur, \nno items will have been updated.\n"
  nameWithType.vb: HealthRecordAccessor.UpdateItems(IList(Of HealthRecordItem))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.HealthRecordAccessor.UpdateItems(System.Collections.Generic.IList(Of Microsoft.Health.HealthRecordItem))
  name.vb: UpdateItems(IList(Of HealthRecordItem))
- uid: Microsoft.Health.HealthRecordAccessor.RemoveItem(Microsoft.Health.HealthRecordItem)
  commentId: M:Microsoft.Health.HealthRecordAccessor.RemoveItem(Microsoft.Health.HealthRecordItem)
  id: RemoveItem(Microsoft.Health.HealthRecordItem)
  parent: Microsoft.Health.HealthRecordAccessor
  langs:
  - csharp
  - vb
  name: RemoveItem(HealthRecordItem)
  nameWithType: HealthRecordAccessor.RemoveItem(HealthRecordItem)
  fullName: Microsoft.Health.HealthRecordAccessor.RemoveItem(Microsoft.Health.HealthRecordItem)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordAccessor.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: RemoveItem
    path: ../Microsoft.Health/HealthRecordAccessor.cs
    startLine: 709
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nMarks the specified health record item as deleted.\n"
  remarks: "\nThis method accesses the HealthVault service across the network.\n<br /><br />\nHealth record items are never completely deleted. Instead, they \nare marked as deleted and are ignored for most normal operations. \nItems can be undeleted by contacting customer service.\n"
  example: []
  syntax:
    content: public void RemoveItem(HealthRecordItem item)
    content.vb: Public Sub RemoveItem(item As HealthRecordItem)
    parameters:
    - id: item
      type: Microsoft.Health.HealthRecordItem
      description: "\nThe health record item to remove.\n"
  overload: Microsoft.Health.HealthRecordAccessor.RemoveItem*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <span class=\"paramref\">item</span> parameter is <strong>null</strong>.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThere are errors that remove the health record item from \nthe server.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordAccessor.RemoveItems(System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})
  commentId: M:Microsoft.Health.HealthRecordAccessor.RemoveItems(System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})
  id: RemoveItems(System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})
  parent: Microsoft.Health.HealthRecordAccessor
  langs:
  - csharp
  - vb
  name: RemoveItems(IList<HealthRecordItem>)
  nameWithType: HealthRecordAccessor.RemoveItems(IList<HealthRecordItem>)
  fullName: Microsoft.Health.HealthRecordAccessor.RemoveItems(System.Collections.Generic.IList<Microsoft.Health.HealthRecordItem>)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordAccessor.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: RemoveItems
    path: ../Microsoft.Health/HealthRecordAccessor.cs
    startLine: 743
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nMarks the specified health record item as deleted.\n"
  remarks: "\nThis method accesses the HealthVault service across the network.\n<br /><br />\nHealth record items are never completely deleted. They are marked\nas deleted and are ignored for most normal operations. Items can \nbe undeleted by contacting customer service.\n"
  example: []
  syntax:
    content: public void RemoveItems(IList<HealthRecordItem> itemsToRemove)
    content.vb: Public Sub RemoveItems(itemsToRemove As IList(Of HealthRecordItem))
    parameters:
    - id: itemsToRemove
      type: System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem}
      description: "\nA list of the health record items to remove.\n"
  overload: Microsoft.Health.HealthRecordAccessor.RemoveItems*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">itemsToRemove</span> parameter is <strong>null</strong> or empty.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nErrors removed the health record items from the server.\nThe exception's Error property will contain the index of the\nitem on which the failure occurred in the ErrorInfo property. If any failures occur, \nno items will have been removed.\n"
  nameWithType.vb: HealthRecordAccessor.RemoveItems(IList(Of HealthRecordItem))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.HealthRecordAccessor.RemoveItems(System.Collections.Generic.IList(Of Microsoft.Health.HealthRecordItem))
  name.vb: RemoveItems(IList(Of HealthRecordItem))
- uid: Microsoft.Health.HealthRecordAccessor.RemoveItems(System.Collections.Generic.IList{Microsoft.Health.HealthRecordItemKey})
  commentId: M:Microsoft.Health.HealthRecordAccessor.RemoveItems(System.Collections.Generic.IList{Microsoft.Health.HealthRecordItemKey})
  id: RemoveItems(System.Collections.Generic.IList{Microsoft.Health.HealthRecordItemKey})
  parent: Microsoft.Health.HealthRecordAccessor
  langs:
  - csharp
  - vb
  name: RemoveItems(IList<HealthRecordItemKey>)
  nameWithType: HealthRecordAccessor.RemoveItems(IList<HealthRecordItemKey>)
  fullName: Microsoft.Health.HealthRecordAccessor.RemoveItems(System.Collections.Generic.IList<Microsoft.Health.HealthRecordItemKey>)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordAccessor.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: RemoveItems
    path: ../Microsoft.Health/HealthRecordAccessor.cs
    startLine: 792
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nMarks the specified health record item as deleted.\n"
  remarks: "\nThis method accesses the HealthVault service across the network.\n<br /><br />\nHealth record items are never completely deleted. They are marked \nas deleted and are ignored for most normal operations. Items can \nbe undeleted by contacting customer service.\n"
  example: []
  syntax:
    content: public void RemoveItems(IList<HealthRecordItemKey> itemsToRemove)
    content.vb: Public Sub RemoveItems(itemsToRemove As IList(Of HealthRecordItemKey))
    parameters:
    - id: itemsToRemove
      type: System.Collections.Generic.IList{Microsoft.Health.HealthRecordItemKey}
      description: "\nThe unique item identifiers of the items to remove.\n"
  overload: Microsoft.Health.HealthRecordAccessor.RemoveItems*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">itemsToRemove</span> parameter is empty.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nErrors removed the health record items from the server.\nThe exception's Error property will contain the index of the\nitem on which the failure occurred in the ErrorInfo property. If any failures occur, \nno items will have been removed.\n"
  nameWithType.vb: HealthRecordAccessor.RemoveItems(IList(Of HealthRecordItemKey))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.HealthRecordAccessor.RemoveItems(System.Collections.Generic.IList(Of Microsoft.Health.HealthRecordItemKey))
  name.vb: RemoveItems(IList(Of HealthRecordItemKey))
- uid: Microsoft.Health.HealthRecordAccessor.RemoveItem(Microsoft.Health.HealthRecordItemKey)
  commentId: M:Microsoft.Health.HealthRecordAccessor.RemoveItem(Microsoft.Health.HealthRecordItemKey)
  id: RemoveItem(Microsoft.Health.HealthRecordItemKey)
  parent: Microsoft.Health.HealthRecordAccessor
  langs:
  - csharp
  - vb
  name: RemoveItem(HealthRecordItemKey)
  nameWithType: HealthRecordAccessor.RemoveItem(HealthRecordItemKey)
  fullName: Microsoft.Health.HealthRecordAccessor.RemoveItem(Microsoft.Health.HealthRecordItemKey)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordAccessor.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: RemoveItem
    path: ../Microsoft.Health/HealthRecordAccessor.cs
    startLine: 822
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nMarks the specified health record item as deleted.\n"
  remarks: "\nThis method accesses the HealthVault service across the network.\n<br /><br />\nHealth record items are never completely deleted. They are marked \nas deleted and are ignored for most normal operations. Items can \nbe undeleted by contacting customer service.\n"
  example: []
  syntax:
    content: public void RemoveItem(HealthRecordItemKey itemId)
    content.vb: Public Sub RemoveItem(itemId As HealthRecordItemKey)
    parameters:
    - id: itemId
      type: Microsoft.Health.HealthRecordItemKey
      description: "\nThe unique item identifier to remove.\n"
  overload: Microsoft.Health.HealthRecordAccessor.RemoveItem*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">itemId</span> parameter is Guid.Empty.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nErrors removed the health record items from the server.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordAccessor.RemoveApplicationAuthorization
  commentId: M:Microsoft.Health.HealthRecordAccessor.RemoveApplicationAuthorization
  id: RemoveApplicationAuthorization
  parent: Microsoft.Health.HealthRecordAccessor
  langs:
  - csharp
  - vb
  name: RemoveApplicationAuthorization()
  nameWithType: HealthRecordAccessor.RemoveApplicationAuthorization()
  fullName: Microsoft.Health.HealthRecordAccessor.RemoveApplicationAuthorization()
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordAccessor.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: RemoveApplicationAuthorization
    path: ../Microsoft.Health/HealthRecordAccessor.cs
    startLine: 846
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nReleases the authorization of the application on the health record.\n"
  remarks: "\nOnce the application releases the authorization to the health record, \ncalling any methods of this <xref href=\"Microsoft.Health.HealthRecordAccessor\" data-throw-if-not-resolved=\"false\"></xref> will result \nin a <xref href=\"Microsoft.Health.HealthServiceAccessDeniedException\" data-throw-if-not-resolved=\"false\"></xref>.\"\n"
  example: []
  syntax:
    content: public void RemoveApplicationAuthorization()
    content.vb: Public Sub RemoveApplicationAuthorization
  overload: Microsoft.Health.HealthRecordAccessor.RemoveApplicationAuthorization*
  exceptions:
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nErrors during the authorization release.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordAccessor.QueryPermissions(System.Collections.Generic.IList{Microsoft.Health.HealthRecordItemTypeDefinition})
  commentId: M:Microsoft.Health.HealthRecordAccessor.QueryPermissions(System.Collections.Generic.IList{Microsoft.Health.HealthRecordItemTypeDefinition})
  id: QueryPermissions(System.Collections.Generic.IList{Microsoft.Health.HealthRecordItemTypeDefinition})
  parent: Microsoft.Health.HealthRecordAccessor
  langs:
  - csharp
  - vb
  name: QueryPermissions(IList<HealthRecordItemTypeDefinition>)
  nameWithType: HealthRecordAccessor.QueryPermissions(IList<HealthRecordItemTypeDefinition>)
  fullName: Microsoft.Health.HealthRecordAccessor.QueryPermissions(System.Collections.Generic.IList<Microsoft.Health.HealthRecordItemTypeDefinition>)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordAccessor.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: QueryPermissions
    path: ../Microsoft.Health/HealthRecordAccessor.cs
    startLine: 881
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nReturns a list of <xref href=\"Microsoft.Health.HealthRecordItemTypePermission\" data-throw-if-not-resolved=\"false\"></xref> \nobjects which represent the permissions that the current\nauthenticated person has for the HealthRecordItemTypes specified\nin the current health record when using the current application.\n"
  remarks: "\nIf the list of health record item types is empty, an empty list is \nreturned. If for a health record item type, the person has \nneither online access nor offline access permissions, \nHealthRecordItemTypePermission object is not returned for that\nhealth record item type. \n"
  example: []
  syntax:
    content: public Collection<HealthRecordItemTypePermission> QueryPermissions(IList<HealthRecordItemTypeDefinition> healthRecordItemTypes)
    content.vb: Public Function QueryPermissions(healthRecordItemTypes As IList(Of HealthRecordItemTypeDefinition)) As Collection(Of HealthRecordItemTypePermission)
    parameters:
    - id: healthRecordItemTypes
      type: System.Collections.Generic.IList{Microsoft.Health.HealthRecordItemTypeDefinition}
      description: "\nA collection of <xref href=\"Microsoft.Health.HealthRecordItemTypeDefinition\" data-throw-if-not-resolved=\"false\"></xref> \nrepresenting the health record item types \nfor which the permissions are being queried. \n"
    return:
      type: System.Collections.ObjectModel.Collection{Microsoft.Health.HealthRecordItemTypePermission}
      description: "\nA list of <xref href=\"Microsoft.Health.HealthRecordItemTypePermission\" data-throw-if-not-resolved=\"false\"></xref> \nobjects which represent the permissions that the current\nauthenticated person has for the HealthRecordItemTypes specified\nin the current health record when using the current application.\n"
  overload: Microsoft.Health.HealthRecordAccessor.QueryPermissions*
  nameWithType.vb: HealthRecordAccessor.QueryPermissions(IList(Of HealthRecordItemTypeDefinition))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.HealthRecordAccessor.QueryPermissions(System.Collections.Generic.IList(Of Microsoft.Health.HealthRecordItemTypeDefinition))
  name.vb: QueryPermissions(IList(Of HealthRecordItemTypeDefinition))
- uid: Microsoft.Health.HealthRecordAccessor.QueryPermissionsByTypes(System.Collections.Generic.IList{System.Guid})
  commentId: M:Microsoft.Health.HealthRecordAccessor.QueryPermissionsByTypes(System.Collections.Generic.IList{System.Guid})
  id: QueryPermissionsByTypes(System.Collections.Generic.IList{System.Guid})
  parent: Microsoft.Health.HealthRecordAccessor
  langs:
  - csharp
  - vb
  name: QueryPermissionsByTypes(IList<Guid>)
  nameWithType: HealthRecordAccessor.QueryPermissionsByTypes(IList<Guid>)
  fullName: Microsoft.Health.HealthRecordAccessor.QueryPermissionsByTypes(System.Collections.Generic.IList<System.Guid>)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordAccessor.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: QueryPermissionsByTypes
    path: ../Microsoft.Health/HealthRecordAccessor.cs
    startLine: 925
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the permissions which the authenticated person \nhas when using the calling application for the specified item types\nin this  record.\n"
  remarks: "\nIf the list of health record item types is empty, an empty dictionary is \nreturned. If for a health record item type, the person has \nneither online access nor offline access permissions, \n<strong> null </strong> will be returned for that type in the dictionary.\n"
  example: []
  syntax:
    content: public IDictionary<Guid, HealthRecordItemTypePermission> QueryPermissionsByTypes(IList<Guid> healthRecordItemTypeIds)
    content.vb: Public Function QueryPermissionsByTypes(healthRecordItemTypeIds As IList(Of Guid)) As IDictionary(Of Guid, HealthRecordItemTypePermission)
    parameters:
    - id: healthRecordItemTypeIds
      type: System.Collections.Generic.IList{System.Guid}
      description: "\nA collection of unique identifiers to identify the health record  \nitem types, for which the permissions are being queried. \n"
    return:
      type: System.Collections.Generic.IDictionary{System.Guid,Microsoft.Health.HealthRecordItemTypePermission}
      description: "\nReturns a dictionary of <xref href=\"Microsoft.Health.HealthRecordItemTypePermission\" data-throw-if-not-resolved=\"false\"></xref> \nwith health record item types as the keys. \n"
  overload: Microsoft.Health.HealthRecordAccessor.QueryPermissionsByTypes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">healthRecordItemTypeIds</span> is <strong>null</strong>.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf there is an exception during executing the request to HealthVault. \n"
  nameWithType.vb: HealthRecordAccessor.QueryPermissionsByTypes(IList(Of Guid))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.HealthRecordAccessor.QueryPermissionsByTypes(System.Collections.Generic.IList(Of System.Guid))
  name.vb: QueryPermissionsByTypes(IList(Of Guid))
- uid: Microsoft.Health.HealthRecordAccessor.QueryPermissions(System.Collections.Generic.IList{System.Guid})
  commentId: M:Microsoft.Health.HealthRecordAccessor.QueryPermissions(System.Collections.Generic.IList{System.Guid})
  id: QueryPermissions(System.Collections.Generic.IList{System.Guid})
  parent: Microsoft.Health.HealthRecordAccessor
  langs:
  - csharp
  - vb
  name: QueryPermissions(IList<Guid>)
  nameWithType: HealthRecordAccessor.QueryPermissions(IList<Guid>)
  fullName: Microsoft.Health.HealthRecordAccessor.QueryPermissions(System.Collections.Generic.IList<System.Guid>)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordAccessor.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: QueryPermissions
    path: ../Microsoft.Health/HealthRecordAccessor.cs
    startLine: 965
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the permissions which the authenticated person \nhas when using the calling application for the specified item types \nin this health record.\n"
  remarks: "\nIf the list of health record item types is empty, an empty list is \nreturned. If for a health record item type, the person has \nneither online access nor offline access permissions, \nHealthRecordItemTypePermission object is not returned for that\nhealth record item type. \n"
  example: []
  syntax:
    content: public Collection<HealthRecordItemTypePermission> QueryPermissions(IList<Guid> healthRecordItemTypeIds)
    content.vb: Public Function QueryPermissions(healthRecordItemTypeIds As IList(Of Guid)) As Collection(Of HealthRecordItemTypePermission)
    parameters:
    - id: healthRecordItemTypeIds
      type: System.Collections.Generic.IList{System.Guid}
      description: "\nA collection of uniqueidentifiers to identify the health record  \nitem types, for which the permissions are being queried. \n"
    return:
      type: System.Collections.ObjectModel.Collection{Microsoft.Health.HealthRecordItemTypePermission}
      description: "\nA list of <xref href=\"Microsoft.Health.HealthRecordItemTypePermission\" data-throw-if-not-resolved=\"false\"></xref> \nobjects which represent the permissions that the current\nauthenticated person has for the HealthRecordItemTypes specified\nin the current health record when using the current application.\n"
  overload: Microsoft.Health.HealthRecordAccessor.QueryPermissions*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">healthRecordItemTypeIds</span> is <strong>null</strong>.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf there is an exception during executing the request to HealthVault. \n"
  nameWithType.vb: HealthRecordAccessor.QueryPermissions(IList(Of Guid))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.HealthRecordAccessor.QueryPermissions(System.Collections.Generic.IList(Of System.Guid))
  name.vb: QueryPermissions(IList(Of Guid))
- uid: Microsoft.Health.HealthRecordAccessor.QueryRecordPermissions(System.Collections.Generic.IList{System.Guid})
  commentId: M:Microsoft.Health.HealthRecordAccessor.QueryRecordPermissions(System.Collections.Generic.IList{System.Guid})
  id: QueryRecordPermissions(System.Collections.Generic.IList{System.Guid})
  parent: Microsoft.Health.HealthRecordAccessor
  langs:
  - csharp
  - vb
  name: QueryRecordPermissions(IList<Guid>)
  nameWithType: HealthRecordAccessor.QueryRecordPermissions(IList<Guid>)
  fullName: Microsoft.Health.HealthRecordAccessor.QueryRecordPermissions(System.Collections.Generic.IList<System.Guid>)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordAccessor.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: QueryRecordPermissions
    path: ../Microsoft.Health/HealthRecordAccessor.cs
    startLine: 1005
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the permissions which the authenticated person \nhas when using the calling application for the specified item types \nin this health record as well as the other permission settings such as <xref href=\"Microsoft.Health.HealthRecordPermissions.MeaningfulUseOptIn\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nIf the list of health record item types is empty, an empty list is \nreturned for <xref href=\"Microsoft.Health.HealthRecordPermissions\" data-throw-if-not-resolved=\"false\"></xref> object's ItemTypePermissions property.\nIf for a health record item type, the person has \nneither online access nor offline access permissions, \nHealthRecordItemTypePermission object is not returned for that\nhealth record item type. \n"
  example: []
  syntax:
    content: public HealthRecordPermissions QueryRecordPermissions(IList<Guid> healthRecordItemTypeIds)
    content.vb: Public Function QueryRecordPermissions(healthRecordItemTypeIds As IList(Of Guid)) As HealthRecordPermissions
    parameters:
    - id: healthRecordItemTypeIds
      type: System.Collections.Generic.IList{System.Guid}
      description: "\nA collection of uniqueidentifiers to identify the health record  \nitem types, for which the permissions are being queried. \n"
    return:
      type: Microsoft.Health.HealthRecordPermissions
      description: "\nA <xref href=\"Microsoft.Health.HealthRecordPermissions\" data-throw-if-not-resolved=\"false\"></xref> object\nwhich contains a collection of <xref href=\"Microsoft.Health.HealthRecordItemTypePermission\" data-throw-if-not-resolved=\"false\"></xref> objects and\nother permission settings.\n"
  overload: Microsoft.Health.HealthRecordAccessor.QueryRecordPermissions*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">healthRecordItemTypeIds</span> is <strong>null</strong>.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThere is an error in the server request.\n"
  nameWithType.vb: HealthRecordAccessor.QueryRecordPermissions(IList(Of Guid))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.HealthRecordAccessor.QueryRecordPermissions(System.Collections.Generic.IList(Of System.Guid))
  name.vb: QueryRecordPermissions(IList(Of Guid))
- uid: Microsoft.Health.HealthRecordAccessor.GetValidGroupMembership(System.Collections.Generic.IList{System.Guid})
  commentId: M:Microsoft.Health.HealthRecordAccessor.GetValidGroupMembership(System.Collections.Generic.IList{System.Guid})
  id: GetValidGroupMembership(System.Collections.Generic.IList{System.Guid})
  parent: Microsoft.Health.HealthRecordAccessor
  langs:
  - csharp
  - vb
  name: GetValidGroupMembership(IList<Guid>)
  nameWithType: HealthRecordAccessor.GetValidGroupMembership(IList<Guid>)
  fullName: Microsoft.Health.HealthRecordAccessor.GetValidGroupMembership(System.Collections.Generic.IList<System.Guid>)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordAccessor.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetValidGroupMembership
    path: ../Microsoft.Health/HealthRecordAccessor.cs
    startLine: 1040
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets valid group memberships for a record.\n"
  remarks: "\nGroup membership thing types allow an application to signify that the\nrecord belongs to an application defined group.  A record in the group may be \neligible for special programs offered by other applications, for example.  \nApplications then need a away to query for valid group memberships.\n<br />\nValid group memberships are those memberships which are not expired, and whose\nlast updating application is authorized by the the last updating person to \nread and delete the membership.\n"
  example: []
  syntax:
    content: public Collection<HealthRecordItem> GetValidGroupMembership(IList<Guid> applicationIds)
    content.vb: Public Function GetValidGroupMembership(applicationIds As IList(Of Guid)) As Collection(Of HealthRecordItem)
    parameters:
    - id: applicationIds
      type: System.Collections.Generic.IList{System.Guid}
      description: "\nA collection of unique application identifiers for which to \nsearch for group memberships.  For a null or empty application identifier \nlist, return all valid group memberships for the record.  Otherwise, \nreturn only those group memberships last updated by one of the \nsupplied application identifiers.\n"
    return:
      type: System.Collections.ObjectModel.Collection{Microsoft.Health.HealthRecordItem}
      description: "\nA List of HealthRecordItems representing the valid group memberships.\n"
  overload: Microsoft.Health.HealthRecordAccessor.GetValidGroupMembership*
  exceptions:
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nIf an error occurs while contacting the HealthVault service.\n"
  nameWithType.vb: HealthRecordAccessor.GetValidGroupMembership(IList(Of Guid))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.HealthRecordAccessor.GetValidGroupMembership(System.Collections.Generic.IList(Of System.Guid))
  name.vb: GetValidGroupMembership(IList(Of Guid))
- uid: Microsoft.Health.HealthRecordAccessor.AssociateAlternateId(System.String)
  commentId: M:Microsoft.Health.HealthRecordAccessor.AssociateAlternateId(System.String)
  id: AssociateAlternateId(System.String)
  parent: Microsoft.Health.HealthRecordAccessor
  langs:
  - csharp
  - vb
  name: AssociateAlternateId(String)
  nameWithType: HealthRecordAccessor.AssociateAlternateId(String)
  fullName: Microsoft.Health.HealthRecordAccessor.AssociateAlternateId(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordAccessor.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: AssociateAlternateId
    path: ../Microsoft.Health/HealthRecordAccessor.cs
    startLine: 1075
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nAssociates an alternate ID with this record.\n"
  remarks: "\nAn alternate ID can be used to store an association between an ID that the\napplication understands and the person and record IDs used by HealthVault.\n\nThe alternate id string must be from 1-255 characters in length. \n"
  example: []
  syntax:
    content: public void AssociateAlternateId(string alternateId)
    content.vb: Public Sub AssociateAlternateId(alternateId As String)
    parameters:
    - id: alternateId
      type: System.String
      description: "\nThe alternate ID.\n"
  overload: Microsoft.Health.HealthRecordAccessor.AssociateAlternateId*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe alternateId parameter is null.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe alternateId parameter is empty, all whitespace, or more than 255 characters in length.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe HealthVault service returned an error. \nThe exception's Error property will contain the index of the\nitem on which the failure occurred in the ErrorInfo property. If any failures occur, \nno items will have been created.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordAccessor.DisassociateAlternateId(System.String)
  commentId: M:Microsoft.Health.HealthRecordAccessor.DisassociateAlternateId(System.String)
  id: DisassociateAlternateId(System.String)
  parent: Microsoft.Health.HealthRecordAccessor
  langs:
  - csharp
  - vb
  name: DisassociateAlternateId(String)
  nameWithType: HealthRecordAccessor.DisassociateAlternateId(String)
  fullName: Microsoft.Health.HealthRecordAccessor.DisassociateAlternateId(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordAccessor.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DisassociateAlternateId
    path: ../Microsoft.Health/HealthRecordAccessor.cs
    startLine: 1107
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nDisassociates an alternate ID with a record.\n"
  remarks: "\nRemoves the association between the alternate ID and the record/person.\n"
  example: []
  syntax:
    content: public void DisassociateAlternateId(string alternateId)
    content.vb: Public Sub DisassociateAlternateId(alternateId As String)
    parameters:
    - id: alternateId
      type: System.String
      description: "\nThe alternate ID.\n"
  overload: Microsoft.Health.HealthRecordAccessor.DisassociateAlternateId*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe alternateId parameter is null.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe alternateId parameter is empty, all whitespace, or more than 255 characters in length.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe HealthVault service returned an error. \nIf the alternate Id is not associated with a person and record id, the ErrorCode property\nwill be set to AlternateIdNotFound.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthRecordAccessor.GetAlternateIds
  commentId: M:Microsoft.Health.HealthRecordAccessor.GetAlternateIds
  id: GetAlternateIds
  parent: Microsoft.Health.HealthRecordAccessor
  langs:
  - csharp
  - vb
  name: GetAlternateIds()
  nameWithType: HealthRecordAccessor.GetAlternateIds()
  fullName: Microsoft.Health.HealthRecordAccessor.GetAlternateIds()
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthRecordAccessor.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetAlternateIds
    path: ../Microsoft.Health/HealthRecordAccessor.cs
    startLine: 1128
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the list of alternate IDs that are associated with a record.\n"
  remarks: "\nIf there are no associated alternate IDs, this method will return an\nempty list. \n"
  example: []
  syntax:
    content: public Collection<string> GetAlternateIds()
    content.vb: Public Function GetAlternateIds As Collection(Of String)
    return:
      type: System.Collections.ObjectModel.Collection{System.String}
  overload: Microsoft.Health.HealthRecordAccessor.GetAlternateIds*
  exceptions:
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe HealthVault service returned an error. \nIf the alternate Id is not associated with a person and record id, the ErrorCode property\nwill be set to AlternateIdNotFound.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  name: SetProperty(String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object())
  name.vb: SetProperty(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  name: InvokeMethod(String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object())
  name.vb: InvokeMethod(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  parent: Microsoft.Health.Utility.InvariantString
  definition: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  name: ToStringInvariant()
  nameWithType: InvariantString.ToStringInvariant()
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant()
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthRecordAccessor.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  parent: Microsoft.Health.Utility.TypeHelper
  definition: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  name: ValueOrDbNull<HealthRecordAccessor>()
  nameWithType: TypeHelper.ValueOrDbNull<HealthRecordAccessor>()
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.HealthRecordAccessor>()
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of HealthRecordAccessor)()
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.HealthRecordAccessor)()
  name.vb: ValueOrDbNull(Of HealthRecordAccessor)()
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull<HealthRecordAccessor>
    nameWithType: TypeHelper.ValueOrDbNull<HealthRecordAccessor>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.HealthRecordAccessor>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull(Of HealthRecordAccessor)
    nameWithType: TypeHelper.ValueOrDbNull(Of HealthRecordAccessor)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.HealthRecordAccessor)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  parent: Microsoft.Health.Utility.WCXmlHelper
  definition: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  name: ToXml()
  nameWithType: WCXmlHelper.ToXml()
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml()
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  isExternal: true
  name: SetProperty(Object, String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object())
  name.vb: SetProperty(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions
  commentId: T:Microsoft.Health.Utility.IDispatchExtensions
  parent: Microsoft.Health.Utility
  isExternal: false
  name: IDispatchExtensions
  nameWithType: IDispatchExtensions
  fullName: Microsoft.Health.Utility.IDispatchExtensions
- uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  isExternal: true
  name: InvokeMethod(Object, String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object())
  name.vb: InvokeMethod(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  isExternal: true
  name: ToStringInvariant(Object)
  nameWithType: InvariantString.ToStringInvariant(Object)
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString
  commentId: T:Microsoft.Health.Utility.InvariantString
  parent: Microsoft.Health.Utility
  isExternal: false
  name: InvariantString
  nameWithType: InvariantString
  fullName: Microsoft.Health.Utility.InvariantString
- uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  isExternal: false
  name: ValueOrDbNull<T>(T)
  nameWithType: TypeHelper.ValueOrDbNull<T>(T)
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>(T)
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of T)(T)
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)(T)
  name.vb: ValueOrDbNull(Of T)(T)
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull<T>
    nameWithType: TypeHelper.ValueOrDbNull<T>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull(Of T)
    nameWithType: TypeHelper.ValueOrDbNull(Of T)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.TypeHelper
  commentId: T:Microsoft.Health.Utility.TypeHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: TypeHelper
  nameWithType: TypeHelper
  fullName: Microsoft.Health.Utility.TypeHelper
- uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  isExternal: true
  name: ToXml(Object)
  nameWithType: WCXmlHelper.ToXml(Object)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.WCXmlHelper
  commentId: T:Microsoft.Health.Utility.WCXmlHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: WCXmlHelper
  nameWithType: WCXmlHelper
  fullName: Microsoft.Health.Utility.WCXmlHelper
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: Microsoft.Health.HealthRecordAccessor.CreateFromXml*
  commentId: Overload:Microsoft.Health.HealthRecordAccessor.CreateFromXml
  isExternal: false
  name: CreateFromXml
  nameWithType: HealthRecordAccessor.CreateFromXml
  fullName: Microsoft.Health.HealthRecordAccessor.CreateFromXml
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: Microsoft.Health.ApplicationConnection
  commentId: T:Microsoft.Health.ApplicationConnection
  parent: Microsoft.Health
  isExternal: false
  name: ApplicationConnection
  nameWithType: ApplicationConnection
  fullName: Microsoft.Health.ApplicationConnection
- uid: System.Xml.XPath.XPathNavigator
  commentId: T:System.Xml.XPath.XPathNavigator
  parent: System.Xml.XPath
  isExternal: true
  name: XPathNavigator
  nameWithType: XPathNavigator
  fullName: System.Xml.XPath.XPathNavigator
- uid: Microsoft.Health.HealthRecordAccessor
  commentId: T:Microsoft.Health.HealthRecordAccessor
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordAccessor
  nameWithType: HealthRecordAccessor
  fullName: Microsoft.Health.HealthRecordAccessor
- uid: System.Xml.XPath
  commentId: N:System.Xml.XPath
  isExternal: false
  name: System.Xml.XPath
  nameWithType: System.Xml.XPath
  fullName: System.Xml.XPath
- uid: Microsoft.Health.HealthRecordAccessor.GetXml*
  commentId: Overload:Microsoft.Health.HealthRecordAccessor.GetXml
  isExternal: false
  name: GetXml
  nameWithType: HealthRecordAccessor.GetXml
  fullName: Microsoft.Health.HealthRecordAccessor.GetXml
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Health.HealthServiceException
  commentId: T:Microsoft.Health.HealthServiceException
  parent: Microsoft.Health
  isExternal: false
  name: HealthServiceException
  nameWithType: HealthServiceException
  fullName: Microsoft.Health.HealthServiceException
- uid: Microsoft.Health.Web.OfflineWebApplicationConnection
  commentId: T:Microsoft.Health.Web.OfflineWebApplicationConnection
  parent: Microsoft.Health.Web
  isExternal: false
  name: OfflineWebApplicationConnection
  nameWithType: OfflineWebApplicationConnection
  fullName: Microsoft.Health.Web.OfflineWebApplicationConnection
- uid: Microsoft.Health.HealthRecordAccessor.SendMessageToCustodiansFromApplication*
  commentId: Overload:Microsoft.Health.HealthRecordAccessor.SendMessageToCustodiansFromApplication
  isExternal: false
  name: SendMessageToCustodiansFromApplication
  nameWithType: HealthRecordAccessor.SendMessageToCustodiansFromApplication
  fullName: Microsoft.Health.HealthRecordAccessor.SendMessageToCustodiansFromApplication
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Health.Web
  commentId: N:Microsoft.Health.Web
  isExternal: false
  name: Microsoft.Health.Web
  nameWithType: Microsoft.Health.Web
  fullName: Microsoft.Health.Web
- uid: Microsoft.Health.HealthRecordAccessor.#ctor*
  commentId: Overload:Microsoft.Health.HealthRecordAccessor.#ctor
  isExternal: false
  name: HealthRecordAccessor
  nameWithType: HealthRecordAccessor.HealthRecordAccessor
  fullName: Microsoft.Health.HealthRecordAccessor.HealthRecordAccessor
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: Microsoft.Health.HealthRecordAccessor.Id*
  commentId: Overload:Microsoft.Health.HealthRecordAccessor.Id
  isExternal: false
  name: Id
  nameWithType: HealthRecordAccessor.Id
  fullName: Microsoft.Health.HealthRecordAccessor.Id
- uid: Microsoft.Health.HealthRecordAccessor.Location*
  commentId: Overload:Microsoft.Health.HealthRecordAccessor.Location
  isExternal: false
  name: Location
  nameWithType: HealthRecordAccessor.Location
  fullName: Microsoft.Health.HealthRecordAccessor.Location
- uid: Microsoft.Health.Location
  commentId: T:Microsoft.Health.Location
  parent: Microsoft.Health
  isExternal: false
  name: Location
  nameWithType: Location
  fullName: Microsoft.Health.Location
- uid: Microsoft.Health.HealthRecordAccessor.Connection*
  commentId: Overload:Microsoft.Health.HealthRecordAccessor.Connection
  isExternal: false
  name: Connection
  nameWithType: HealthRecordAccessor.Connection
  fullName: Microsoft.Health.HealthRecordAccessor.Connection
- uid: Microsoft.Health.HealthRecordSearcher
  commentId: T:Microsoft.Health.HealthRecordSearcher
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordSearcher
  nameWithType: HealthRecordSearcher
  fullName: Microsoft.Health.HealthRecordSearcher
- uid: Microsoft.Health.HealthRecordAccessor.CreateSearcher*
  commentId: Overload:Microsoft.Health.HealthRecordAccessor.CreateSearcher
  isExternal: false
  name: CreateSearcher
  nameWithType: HealthRecordAccessor.CreateSearcher
  fullName: Microsoft.Health.HealthRecordAccessor.CreateSearcher
- uid: System.Guid[]
  name: Guid[]
  nameWithType: Guid[]
  fullName: System.Guid[]
  nameWithType.vb: Guid()
  fullName.vb: System.Guid()
  name.vb: Guid()
  spec.csharp:
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.Health.HealthRecordItem
  commentId: T:Microsoft.Health.HealthRecordItem
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordItem
  nameWithType: HealthRecordItem
  fullName: Microsoft.Health.HealthRecordItem
- uid: Microsoft.Health.HealthRecordAccessor.GetItem*
  commentId: Overload:Microsoft.Health.HealthRecordAccessor.GetItem
  isExternal: false
  name: GetItem
  nameWithType: HealthRecordAccessor.GetItem
  fullName: Microsoft.Health.HealthRecordAccessor.GetItem
- uid: Microsoft.Health.HealthRecordItemSections
  commentId: T:Microsoft.Health.HealthRecordItemSections
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordItemSections
  nameWithType: HealthRecordItemSections
  fullName: Microsoft.Health.HealthRecordItemSections
- uid: Microsoft.Health.HealthRecordAccessor.GetItemsByType*
  commentId: Overload:Microsoft.Health.HealthRecordAccessor.GetItemsByType
  isExternal: false
  name: GetItemsByType
  nameWithType: HealthRecordAccessor.GetItemsByType
  fullName: Microsoft.Health.HealthRecordAccessor.GetItemsByType
- uid: Microsoft.Health.HealthRecordItemCollection
  commentId: T:Microsoft.Health.HealthRecordItemCollection
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordItemCollection
  nameWithType: HealthRecordItemCollection
  fullName: Microsoft.Health.HealthRecordItemCollection
- uid: Microsoft.Health.HealthRecordView
  commentId: T:Microsoft.Health.HealthRecordView
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordView
  nameWithType: HealthRecordView
  fullName: Microsoft.Health.HealthRecordView
- uid: Microsoft.Health.HealthRecordAccessor.NewItem*
  commentId: Overload:Microsoft.Health.HealthRecordAccessor.NewItem
  isExternal: false
  name: NewItem
  nameWithType: HealthRecordAccessor.NewItem
  fullName: Microsoft.Health.HealthRecordAccessor.NewItem
- uid: Microsoft.Health.HealthRecordAccessor.NewItems*
  commentId: Overload:Microsoft.Health.HealthRecordAccessor.NewItems
  isExternal: false
  name: NewItems
  nameWithType: HealthRecordAccessor.NewItems
  fullName: Microsoft.Health.HealthRecordAccessor.NewItems
- uid: System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem}
  commentId: T:System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<HealthRecordItem>
  nameWithType: IList<HealthRecordItem>
  fullName: System.Collections.Generic.IList<Microsoft.Health.HealthRecordItem>
  nameWithType.vb: IList(Of HealthRecordItem)
  fullName.vb: System.Collections.Generic.IList(Of Microsoft.Health.HealthRecordItem)
  name.vb: IList(Of HealthRecordItem)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Health.HealthRecordAccessor.UpdateItem*
  commentId: Overload:Microsoft.Health.HealthRecordAccessor.UpdateItem
  isExternal: false
  name: UpdateItem
  nameWithType: HealthRecordAccessor.UpdateItem
  fullName: Microsoft.Health.HealthRecordAccessor.UpdateItem
- uid: Microsoft.Health.HealthRecordAccessor.UpdateItems*
  commentId: Overload:Microsoft.Health.HealthRecordAccessor.UpdateItems
  isExternal: false
  name: UpdateItems
  nameWithType: HealthRecordAccessor.UpdateItems
  fullName: Microsoft.Health.HealthRecordAccessor.UpdateItems
- uid: Microsoft.Health.HealthRecordAccessor.RemoveItem*
  commentId: Overload:Microsoft.Health.HealthRecordAccessor.RemoveItem
  isExternal: false
  name: RemoveItem
  nameWithType: HealthRecordAccessor.RemoveItem
  fullName: Microsoft.Health.HealthRecordAccessor.RemoveItem
- uid: Microsoft.Health.HealthRecordAccessor.RemoveItems*
  commentId: Overload:Microsoft.Health.HealthRecordAccessor.RemoveItems
  isExternal: false
  name: RemoveItems
  nameWithType: HealthRecordAccessor.RemoveItems
  fullName: Microsoft.Health.HealthRecordAccessor.RemoveItems
- uid: System.Collections.Generic.IList{Microsoft.Health.HealthRecordItemKey}
  commentId: T:System.Collections.Generic.IList{Microsoft.Health.HealthRecordItemKey}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<HealthRecordItemKey>
  nameWithType: IList<HealthRecordItemKey>
  fullName: System.Collections.Generic.IList<Microsoft.Health.HealthRecordItemKey>
  nameWithType.vb: IList(Of HealthRecordItemKey)
  fullName.vb: System.Collections.Generic.IList(Of Microsoft.Health.HealthRecordItemKey)
  name.vb: IList(Of HealthRecordItemKey)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.HealthRecordItemKey
    name: HealthRecordItemKey
    nameWithType: HealthRecordItemKey
    fullName: Microsoft.Health.HealthRecordItemKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.HealthRecordItemKey
    name: HealthRecordItemKey
    nameWithType: HealthRecordItemKey
    fullName: Microsoft.Health.HealthRecordItemKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthRecordItemKey
  commentId: T:Microsoft.Health.HealthRecordItemKey
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordItemKey
  nameWithType: HealthRecordItemKey
  fullName: Microsoft.Health.HealthRecordItemKey
- uid: Microsoft.Health.HealthServiceAccessDeniedException
  commentId: T:Microsoft.Health.HealthServiceAccessDeniedException
  isExternal: false
  name: HealthServiceAccessDeniedException
  nameWithType: HealthServiceAccessDeniedException
  fullName: Microsoft.Health.HealthServiceAccessDeniedException
- uid: Microsoft.Health.HealthRecordAccessor.RemoveApplicationAuthorization*
  commentId: Overload:Microsoft.Health.HealthRecordAccessor.RemoveApplicationAuthorization
  isExternal: false
  name: RemoveApplicationAuthorization
  nameWithType: HealthRecordAccessor.RemoveApplicationAuthorization
  fullName: Microsoft.Health.HealthRecordAccessor.RemoveApplicationAuthorization
- uid: Microsoft.Health.HealthRecordItemTypePermission
  commentId: T:Microsoft.Health.HealthRecordItemTypePermission
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordItemTypePermission
  nameWithType: HealthRecordItemTypePermission
  fullName: Microsoft.Health.HealthRecordItemTypePermission
- uid: Microsoft.Health.HealthRecordItemTypeDefinition
  commentId: T:Microsoft.Health.HealthRecordItemTypeDefinition
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordItemTypeDefinition
  nameWithType: HealthRecordItemTypeDefinition
  fullName: Microsoft.Health.HealthRecordItemTypeDefinition
- uid: Microsoft.Health.HealthRecordAccessor.QueryPermissions*
  commentId: Overload:Microsoft.Health.HealthRecordAccessor.QueryPermissions
  isExternal: false
  name: QueryPermissions
  nameWithType: HealthRecordAccessor.QueryPermissions
  fullName: Microsoft.Health.HealthRecordAccessor.QueryPermissions
- uid: System.Collections.Generic.IList{Microsoft.Health.HealthRecordItemTypeDefinition}
  commentId: T:System.Collections.Generic.IList{Microsoft.Health.HealthRecordItemTypeDefinition}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<HealthRecordItemTypeDefinition>
  nameWithType: IList<HealthRecordItemTypeDefinition>
  fullName: System.Collections.Generic.IList<Microsoft.Health.HealthRecordItemTypeDefinition>
  nameWithType.vb: IList(Of HealthRecordItemTypeDefinition)
  fullName.vb: System.Collections.Generic.IList(Of Microsoft.Health.HealthRecordItemTypeDefinition)
  name.vb: IList(Of HealthRecordItemTypeDefinition)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.HealthRecordItemTypeDefinition
    name: HealthRecordItemTypeDefinition
    nameWithType: HealthRecordItemTypeDefinition
    fullName: Microsoft.Health.HealthRecordItemTypeDefinition
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.HealthRecordItemTypeDefinition
    name: HealthRecordItemTypeDefinition
    nameWithType: HealthRecordItemTypeDefinition
    fullName: Microsoft.Health.HealthRecordItemTypeDefinition
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.Collection{Microsoft.Health.HealthRecordItemTypePermission}
  commentId: T:System.Collections.ObjectModel.Collection{Microsoft.Health.HealthRecordItemTypePermission}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.Collection`1
  name: Collection<HealthRecordItemTypePermission>
  nameWithType: Collection<HealthRecordItemTypePermission>
  fullName: System.Collections.ObjectModel.Collection<Microsoft.Health.HealthRecordItemTypePermission>
  nameWithType.vb: Collection(Of HealthRecordItemTypePermission)
  fullName.vb: System.Collections.ObjectModel.Collection(Of Microsoft.Health.HealthRecordItemTypePermission)
  name.vb: Collection(Of HealthRecordItemTypePermission)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.HealthRecordItemTypePermission
    name: HealthRecordItemTypePermission
    nameWithType: HealthRecordItemTypePermission
    fullName: Microsoft.Health.HealthRecordItemTypePermission
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.HealthRecordItemTypePermission
    name: HealthRecordItemTypePermission
    nameWithType: HealthRecordItemTypePermission
    fullName: Microsoft.Health.HealthRecordItemTypePermission
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.Collection`1
  commentId: T:System.Collections.ObjectModel.Collection`1
  isExternal: true
  name: Collection<T>
  nameWithType: Collection<T>
  fullName: System.Collections.ObjectModel.Collection<T>
  nameWithType.vb: Collection(Of T)
  fullName.vb: System.Collections.ObjectModel.Collection(Of T)
  name.vb: Collection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: Microsoft.Health.HealthRecordAccessor.QueryPermissionsByTypes*
  commentId: Overload:Microsoft.Health.HealthRecordAccessor.QueryPermissionsByTypes
  isExternal: false
  name: QueryPermissionsByTypes
  nameWithType: HealthRecordAccessor.QueryPermissionsByTypes
  fullName: Microsoft.Health.HealthRecordAccessor.QueryPermissionsByTypes
- uid: System.Collections.Generic.IList{System.Guid}
  commentId: T:System.Collections.Generic.IList{System.Guid}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Guid>
  nameWithType: IList<Guid>
  fullName: System.Collections.Generic.IList<System.Guid>
  nameWithType.vb: IList(Of Guid)
  fullName.vb: System.Collections.Generic.IList(Of System.Guid)
  name.vb: IList(Of Guid)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.Guid,Microsoft.Health.HealthRecordItemTypePermission}
  commentId: T:System.Collections.Generic.IDictionary{System.Guid,Microsoft.Health.HealthRecordItemTypePermission}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<Guid, HealthRecordItemTypePermission>
  nameWithType: IDictionary<Guid, HealthRecordItemTypePermission>
  fullName: System.Collections.Generic.IDictionary<System.Guid, Microsoft.Health.HealthRecordItemTypePermission>
  nameWithType.vb: IDictionary(Of Guid, HealthRecordItemTypePermission)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.Guid, Microsoft.Health.HealthRecordItemTypePermission)
  name.vb: IDictionary(Of Guid, HealthRecordItemTypePermission)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.HealthRecordItemTypePermission
    name: HealthRecordItemTypePermission
    nameWithType: HealthRecordItemTypePermission
    fullName: Microsoft.Health.HealthRecordItemTypePermission
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.HealthRecordItemTypePermission
    name: HealthRecordItemTypePermission
    nameWithType: HealthRecordItemTypePermission
    fullName: Microsoft.Health.HealthRecordItemTypePermission
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthRecordPermissions.MeaningfulUseOptIn
  commentId: P:Microsoft.Health.HealthRecordPermissions.MeaningfulUseOptIn
- uid: Microsoft.Health.HealthRecordPermissions
  commentId: T:Microsoft.Health.HealthRecordPermissions
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordPermissions
  nameWithType: HealthRecordPermissions
  fullName: Microsoft.Health.HealthRecordPermissions
- uid: Microsoft.Health.HealthRecordAccessor.QueryRecordPermissions*
  commentId: Overload:Microsoft.Health.HealthRecordAccessor.QueryRecordPermissions
  isExternal: false
  name: QueryRecordPermissions
  nameWithType: HealthRecordAccessor.QueryRecordPermissions
  fullName: Microsoft.Health.HealthRecordAccessor.QueryRecordPermissions
- uid: Microsoft.Health.HealthRecordAccessor.GetValidGroupMembership*
  commentId: Overload:Microsoft.Health.HealthRecordAccessor.GetValidGroupMembership
  isExternal: false
  name: GetValidGroupMembership
  nameWithType: HealthRecordAccessor.GetValidGroupMembership
  fullName: Microsoft.Health.HealthRecordAccessor.GetValidGroupMembership
- uid: System.Collections.ObjectModel.Collection{Microsoft.Health.HealthRecordItem}
  commentId: T:System.Collections.ObjectModel.Collection{Microsoft.Health.HealthRecordItem}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.Collection`1
  name: Collection<HealthRecordItem>
  nameWithType: Collection<HealthRecordItem>
  fullName: System.Collections.ObjectModel.Collection<Microsoft.Health.HealthRecordItem>
  nameWithType.vb: Collection(Of HealthRecordItem)
  fullName.vb: System.Collections.ObjectModel.Collection(Of Microsoft.Health.HealthRecordItem)
  name.vb: Collection(Of HealthRecordItem)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.HealthRecordItem
    name: HealthRecordItem
    nameWithType: HealthRecordItem
    fullName: Microsoft.Health.HealthRecordItem
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthRecordAccessor.AssociateAlternateId*
  commentId: Overload:Microsoft.Health.HealthRecordAccessor.AssociateAlternateId
  isExternal: false
  name: AssociateAlternateId
  nameWithType: HealthRecordAccessor.AssociateAlternateId
  fullName: Microsoft.Health.HealthRecordAccessor.AssociateAlternateId
- uid: Microsoft.Health.HealthRecordAccessor.DisassociateAlternateId*
  commentId: Overload:Microsoft.Health.HealthRecordAccessor.DisassociateAlternateId
  isExternal: false
  name: DisassociateAlternateId
  nameWithType: HealthRecordAccessor.DisassociateAlternateId
  fullName: Microsoft.Health.HealthRecordAccessor.DisassociateAlternateId
- uid: Microsoft.Health.HealthRecordAccessor.GetAlternateIds*
  commentId: Overload:Microsoft.Health.HealthRecordAccessor.GetAlternateIds
  isExternal: false
  name: GetAlternateIds
  nameWithType: HealthRecordAccessor.GetAlternateIds
  fullName: Microsoft.Health.HealthRecordAccessor.GetAlternateIds
- uid: System.Collections.ObjectModel.Collection{System.String}
  commentId: T:System.Collections.ObjectModel.Collection{System.String}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.Collection`1
  name: Collection<String>
  nameWithType: Collection<String>
  fullName: System.Collections.ObjectModel.Collection<System.String>
  nameWithType.vb: Collection(Of String)
  fullName.vb: System.Collections.ObjectModel.Collection(Of System.String)
  name.vb: Collection(Of String)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
