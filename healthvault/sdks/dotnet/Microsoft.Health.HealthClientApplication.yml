### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.HealthClientApplication
  commentId: T:Microsoft.Health.HealthClientApplication
  id: HealthClientApplication
  parent: Microsoft.Health
  children:
  - Microsoft.Health.HealthClientApplication.ApplicationConnection
  - Microsoft.Health.HealthClientApplication.ApplicationId
  - Microsoft.Health.HealthClientApplication.Create(System.Guid,System.Guid)
  - Microsoft.Health.HealthClientApplication.Create(System.Guid,System.Guid,Microsoft.Health.HealthServiceInstance)
  - Microsoft.Health.HealthClientApplication.Create(System.Guid,System.Guid,System.Uri,System.Uri)
  - Microsoft.Health.HealthClientApplication.CreateAuthorizedConnection(System.Guid)
  - Microsoft.Health.HealthClientApplication.DeleteCertificate
  - Microsoft.Health.HealthClientApplication.Dispose
  - Microsoft.Health.HealthClientApplication.Dispose(System.Boolean)
  - Microsoft.Health.HealthClientApplication.GetApplicationCreationUrl
  - Microsoft.Health.HealthClientApplication.GetApplicationCreationUrl(System.String)
  - Microsoft.Health.HealthClientApplication.GetApplicationCreationUrl(System.String,System.String)
  - Microsoft.Health.HealthClientApplication.GetApplicationInfo
  - Microsoft.Health.HealthClientApplication.GetUserAuthorizationUrl
  - Microsoft.Health.HealthClientApplication.GetUserAuthorizationUrl(System.String)
  - Microsoft.Health.HealthClientApplication.HealthServiceUrl
  - Microsoft.Health.HealthClientApplication.MasterApplicationId
  - Microsoft.Health.HealthClientApplication.ServiceInstance
  - Microsoft.Health.HealthClientApplication.ShellUrl
  - Microsoft.Health.HealthClientApplication.StartApplicationCreationProcess
  - Microsoft.Health.HealthClientApplication.StartApplicationCreationProcess(System.String)
  - Microsoft.Health.HealthClientApplication.StartUserAuthorizationProcess
  - Microsoft.Health.HealthClientApplication.StartUserAuthorizationProcess(System.String)
  langs:
  - csharp
  - vb
  name: HealthClientApplication
  nameWithType: HealthClientApplication
  fullName: Microsoft.Health.HealthClientApplication
  type: Class
  source:
    remote:
      path: Microsoft.Health/HealthClientApplication.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: HealthClientApplication
    path: ../Microsoft.Health/HealthClientApplication.cs
    startLine: 25
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nRepresents a HealthVault client application.\n"
  remarks: "\nUse this class for creating a Windows client application\nfor connecting to HealthVault. \n"
  example: []
  syntax:
    content: 'public class HealthClientApplication : IDisposable'
    content.vb: >-
      Public Class HealthClientApplication
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - Microsoft.Health.HealthClientApplication.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  - System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.HealthClientApplication.Create(System.Guid,System.Guid)
  commentId: M:Microsoft.Health.HealthClientApplication.Create(System.Guid,System.Guid)
  id: Create(System.Guid,System.Guid)
  parent: Microsoft.Health.HealthClientApplication
  langs:
  - csharp
  - vb
  name: Create(Guid, Guid)
  nameWithType: HealthClientApplication.Create(Guid, Guid)
  fullName: Microsoft.Health.HealthClientApplication.Create(System.Guid, System.Guid)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthClientApplication.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Create
    path: ../Microsoft.Health/HealthClientApplication.cs
    startLine: 91
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nCreate the application using values stored in the app.config file.\n"
  remarks: "\nApp.config entries are as follows:\nShellUrl - The url of the HealthVault shell\nHealthServiceUrl - the url of the HealthVault platform\n"
  example: []
  syntax:
    content: public static HealthClientApplication Create(Guid applicationId, Guid masterApplicationId)
    content.vb: Public Shared Function Create(applicationId As Guid, masterApplicationId As Guid) As HealthClientApplication
    parameters:
    - id: applicationId
      type: System.Guid
      description: "\nUnique identifier of the new local client application.\n"
    - id: masterApplicationId
      type: System.Guid
      description: "\nUnique identifier of an existing HealthVault master application.\nThe client application will be created as a child application using\nthe specified application as a parent.\n"
    return:
      type: Microsoft.Health.HealthClientApplication
  overload: Microsoft.Health.HealthClientApplication.Create*
  exceptions:
  - type: Microsoft.Health.InvalidConfigurationException
    commentId: T:Microsoft.Health.InvalidConfigurationException
    description: "\nThe configuration file does not \ncontain an entry for either ShellUrl or HealthServiceUrl.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nEither the <span class=\"paramref\">applicationId </span> or\n<span class=\"paramref\">masterApplicationId</span> parameter is <xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref>. \n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthClientApplication.Create(System.Guid,System.Guid,System.Uri,System.Uri)
  commentId: M:Microsoft.Health.HealthClientApplication.Create(System.Guid,System.Guid,System.Uri,System.Uri)
  id: Create(System.Guid,System.Guid,System.Uri,System.Uri)
  parent: Microsoft.Health.HealthClientApplication
  langs:
  - csharp
  - vb
  name: Create(Guid, Guid, Uri, Uri)
  nameWithType: HealthClientApplication.Create(Guid, Guid, Uri, Uri)
  fullName: Microsoft.Health.HealthClientApplication.Create(System.Guid, System.Guid, System.Uri, System.Uri)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthClientApplication.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Create
    path: ../Microsoft.Health/HealthClientApplication.cs
    startLine: 151
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nCreate an application based on the passed-in values.\n"
  remarks: "\nThis method looks up the certificate in the\nuser certificate store using applicationId. If the\ncertificate does not exist, then it will create\na new certificate.\n"
  example: []
  syntax:
    content: public static HealthClientApplication Create(Guid applicationId, Guid masterApplicationId, Uri shellUrl, Uri healthServiceUrl)
    content.vb: Public Shared Function Create(applicationId As Guid, masterApplicationId As Guid, shellUrl As Uri, healthServiceUrl As Uri) As HealthClientApplication
    parameters:
    - id: applicationId
      type: System.Guid
      description: "\nUnique identifier of the new local client application.\n"
    - id: masterApplicationId
      type: System.Guid
      description: "\nUnique identifier of an existing HealthVault master application.\nThe client application will be created as a child application using\nthe specified application as a parent.\n"
    - id: shellUrl
      type: System.Uri
      description: "\nThe URL of the HealthVault shell service.\n"
    - id: healthServiceUrl
      type: System.Uri
      description: "\nThe URL of the HealthVault platform service.\n"
    return:
      type: Microsoft.Health.HealthClientApplication
  overload: Microsoft.Health.HealthClientApplication.Create*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe value of <span class=\"paramref\">shellUrl</span> or \n<span class=\"paramref\">healthServiceUrl</span> is \n<strong>null</strong>, or the value of <span class=\"paramref\">applicationId</span> or \n<span class=\"paramref\">masterApplicationId</span> is <xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthClientApplication.Create(System.Guid,System.Guid,Microsoft.Health.HealthServiceInstance)
  commentId: M:Microsoft.Health.HealthClientApplication.Create(System.Guid,System.Guid,Microsoft.Health.HealthServiceInstance)
  id: Create(System.Guid,System.Guid,Microsoft.Health.HealthServiceInstance)
  parent: Microsoft.Health.HealthClientApplication
  langs:
  - csharp
  - vb
  name: Create(Guid, Guid, HealthServiceInstance)
  nameWithType: HealthClientApplication.Create(Guid, Guid, HealthServiceInstance)
  fullName: Microsoft.Health.HealthClientApplication.Create(System.Guid, System.Guid, Microsoft.Health.HealthServiceInstance)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthClientApplication.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Create
    path: ../Microsoft.Health/HealthClientApplication.cs
    startLine: 245
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nCreate an application based on the passed-in values.\n"
  remarks: "\nThis method looks up the certificate in the\nuser certificate store using applicationId. If the\ncertificate does not exist, then it will create\na new certificate.\n"
  example: []
  syntax:
    content: public static HealthClientApplication Create(Guid applicationId, Guid masterApplicationId, HealthServiceInstance serviceInstance)
    content.vb: Public Shared Function Create(applicationId As Guid, masterApplicationId As Guid, serviceInstance As HealthServiceInstance) As HealthClientApplication
    parameters:
    - id: applicationId
      type: System.Guid
      description: "\nUnique identifier of the new local client application.\n"
    - id: masterApplicationId
      type: System.Guid
      description: "\nUnique identifier of an existing HealthVault master application.\nThe client application will be created as a child application using\nthe specified application as a parent.\n"
    - id: serviceInstance
      type: Microsoft.Health.HealthServiceInstance
      description: "\nThe HealthVault web-service instance.\n"
    return:
      type: Microsoft.Health.HealthClientApplication
  overload: Microsoft.Health.HealthClientApplication.Create*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<span class=\"paramref\">serviceInstance</span> is <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<xref href=\"Microsoft.Health.HealthServiceInstance.HealthServiceUrl\" data-throw-if-not-resolved=\"false\"></xref> or\n<xref href=\"Microsoft.Health.HealthServiceInstance.ShellUrl\" data-throw-if-not-resolved=\"false\"></xref> for the specified\n<span class=\"paramref\">serviceInstance</span> is null;\nor the value of <span class=\"paramref\">applicationId</span> or \n<span class=\"paramref\">masterApplicationId</span> is <xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.HealthClientApplication.ApplicationId
  commentId: P:Microsoft.Health.HealthClientApplication.ApplicationId
  id: ApplicationId
  parent: Microsoft.Health.HealthClientApplication
  langs:
  - csharp
  - vb
  name: ApplicationId
  nameWithType: HealthClientApplication.ApplicationId
  fullName: Microsoft.Health.HealthClientApplication.ApplicationId
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthClientApplication.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ApplicationId
    path: ../Microsoft.Health/HealthClientApplication.cs
    startLine: 275
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the ID of the local client application.\n"
  example: []
  syntax:
    content: public Guid ApplicationId { get; }
    content.vb: Public ReadOnly Property ApplicationId As Guid
    parameters: []
    return:
      type: System.Guid
  overload: Microsoft.Health.HealthClientApplication.ApplicationId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthClientApplication.ShellUrl
  commentId: P:Microsoft.Health.HealthClientApplication.ShellUrl
  id: ShellUrl
  parent: Microsoft.Health.HealthClientApplication
  langs:
  - csharp
  - vb
  name: ShellUrl
  nameWithType: HealthClientApplication.ShellUrl
  fullName: Microsoft.Health.HealthClientApplication.ShellUrl
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthClientApplication.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ShellUrl
    path: ../Microsoft.Health/HealthClientApplication.cs
    startLine: 287
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the URL of the HealthVault shell service.\n"
  example: []
  syntax:
    content: public Uri ShellUrl { get; }
    content.vb: Public ReadOnly Property ShellUrl As Uri
    parameters: []
    return:
      type: System.Uri
  overload: Microsoft.Health.HealthClientApplication.ShellUrl*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthClientApplication.HealthServiceUrl
  commentId: P:Microsoft.Health.HealthClientApplication.HealthServiceUrl
  id: HealthServiceUrl
  parent: Microsoft.Health.HealthClientApplication
  langs:
  - csharp
  - vb
  name: HealthServiceUrl
  nameWithType: HealthClientApplication.HealthServiceUrl
  fullName: Microsoft.Health.HealthClientApplication.HealthServiceUrl
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthClientApplication.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: HealthServiceUrl
    path: ../Microsoft.Health/HealthClientApplication.cs
    startLine: 297
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the URL of the HealthVault platform service.\n"
  example: []
  syntax:
    content: public Uri HealthServiceUrl { get; }
    content.vb: Public ReadOnly Property HealthServiceUrl As Uri
    parameters: []
    return:
      type: System.Uri
  overload: Microsoft.Health.HealthClientApplication.HealthServiceUrl*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthClientApplication.ServiceInstance
  commentId: P:Microsoft.Health.HealthClientApplication.ServiceInstance
  id: ServiceInstance
  parent: Microsoft.Health.HealthClientApplication
  langs:
  - csharp
  - vb
  name: ServiceInstance
  nameWithType: HealthClientApplication.ServiceInstance
  fullName: Microsoft.Health.HealthClientApplication.ServiceInstance
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthClientApplication.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ServiceInstance
    path: ../Microsoft.Health/HealthClientApplication.cs
    startLine: 312
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the HealthVault web-service instance that this\nclient application instance connects to, if it is specified\nduring construction.\n"
  example: []
  syntax:
    content: public HealthServiceInstance ServiceInstance { get; }
    content.vb: Public ReadOnly Property ServiceInstance As HealthServiceInstance
    parameters: []
    return:
      type: Microsoft.Health.HealthServiceInstance
  overload: Microsoft.Health.HealthClientApplication.ServiceInstance*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthClientApplication.MasterApplicationId
  commentId: P:Microsoft.Health.HealthClientApplication.MasterApplicationId
  id: MasterApplicationId
  parent: Microsoft.Health.HealthClientApplication
  langs:
  - csharp
  - vb
  name: MasterApplicationId
  nameWithType: HealthClientApplication.MasterApplicationId
  fullName: Microsoft.Health.HealthClientApplication.MasterApplicationId
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthClientApplication.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: MasterApplicationId
    path: ../Microsoft.Health/HealthClientApplication.cs
    startLine: 325
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the ID of the master application.\n"
  example: []
  syntax:
    content: public Guid MasterApplicationId { get; }
    content.vb: Public ReadOnly Property MasterApplicationId As Guid
    parameters: []
    return:
      type: System.Guid
  overload: Microsoft.Health.HealthClientApplication.MasterApplicationId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthClientApplication.ApplicationConnection
  commentId: P:Microsoft.Health.HealthClientApplication.ApplicationConnection
  id: ApplicationConnection
  parent: Microsoft.Health.HealthClientApplication
  langs:
  - csharp
  - vb
  name: ApplicationConnection
  nameWithType: HealthClientApplication.ApplicationConnection
  fullName: Microsoft.Health.HealthClientApplication.ApplicationConnection
  type: Property
  source:
    remote:
      path: Microsoft.Health/HealthClientApplication.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ApplicationConnection
    path: ../Microsoft.Health/HealthClientApplication.cs
    startLine: 355
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets an <xref href=\"Microsoft.Health.HealthClientApplication.ApplicationConnection\" data-throw-if-not-resolved=\"false\"></xref> that represents the connection to HealthVault.\n"
  remarks: "\nThis method could cause a request to the network to retrieve the \ncryptographic object identifier of the certificate used by the \napplication. For example in case the hosting machine is joined to \na domain, resolving or retrieving the cryptographic object \nidentifier could result in an LDAP query.\n"
  example: []
  syntax:
    content: public ApplicationConnection ApplicationConnection { get; }
    content.vb: Public ReadOnly Property ApplicationConnection As ApplicationConnection
    parameters: []
    return:
      type: Microsoft.Health.ApplicationConnection
  overload: Microsoft.Health.HealthClientApplication.ApplicationConnection*
  exceptions:
  - type: Microsoft.Health.InvalidConfigurationException
    commentId: T:Microsoft.Health.InvalidConfigurationException
    description: "\nThe application Id or the certificate, or the healthServiceUrl\nare incorrect.\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.HealthClientApplication.GetApplicationInfo
  commentId: M:Microsoft.Health.HealthClientApplication.GetApplicationInfo
  id: GetApplicationInfo
  parent: Microsoft.Health.HealthClientApplication
  langs:
  - csharp
  - vb
  name: GetApplicationInfo()
  nameWithType: HealthClientApplication.GetApplicationInfo()
  fullName: Microsoft.Health.HealthClientApplication.GetApplicationInfo()
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthClientApplication.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetApplicationInfo
    path: ../Microsoft.Health/HealthClientApplication.cs
    startLine: 397
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets an <xref href=\"Microsoft.Health.ApplicationInfo\" data-throw-if-not-resolved=\"false\"></xref> from the HealthVault server that\ndescribes the client application.\n"
  remarks: "\n<p>This method makes a call to HealthVault to get the ApplicationInfo.\nIf the application exists, then the ApplicationInfo is created and returned.</p>\n<p>If application does not exist, the method returns <strong>null</strong>.\nTo create the application on the server, \ncall <xref href=\"Microsoft.Health.HealthClientApplication.StartApplicationCreationProcess\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public ApplicationInfo GetApplicationInfo()
    content.vb: Public Function GetApplicationInfo As ApplicationInfo
    return:
      type: Microsoft.Health.ApplicationInfo
      description: "\nAn <xref href=\"Microsoft.Health.ApplicationInfo\" data-throw-if-not-resolved=\"false\"></xref> that describes the application,\nor <strong>null</strong> if the application does not exist on the server.\n"
  overload: Microsoft.Health.HealthClientApplication.GetApplicationInfo*
  exceptions:
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe HealthVault service returned an error. This exception does not indicate\nthat the application does not exist on the server: the method returns <strong>null</strong>\nin that case and no exception is thrown.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthClientApplication.GetApplicationCreationUrl
  commentId: M:Microsoft.Health.HealthClientApplication.GetApplicationCreationUrl
  id: GetApplicationCreationUrl
  parent: Microsoft.Health.HealthClientApplication
  langs:
  - csharp
  - vb
  name: GetApplicationCreationUrl()
  nameWithType: HealthClientApplication.GetApplicationCreationUrl()
  fullName: Microsoft.Health.HealthClientApplication.GetApplicationCreationUrl()
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthClientApplication.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetApplicationCreationUrl
    path: ../Microsoft.Health/HealthClientApplication.cs
    startLine: 438
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the URL of a web page that will direct the user to create the application.\n"
  remarks: "\nOpen this URL in a browser window to allow the user to create the application.\nBy default, the client name will be set to the local machine name. \n"
  example: []
  syntax:
    content: public Uri GetApplicationCreationUrl()
    content.vb: Public Function GetApplicationCreationUrl As Uri
    return:
      type: System.Uri
      description: "\nThe URL of the application creation web page.\n"
  overload: Microsoft.Health.HealthClientApplication.GetApplicationCreationUrl*
  exceptions:
  - type: Microsoft.Health.InvalidConfigurationException
    commentId: T:Microsoft.Health.InvalidConfigurationException
    description: "\nThe value of <xref href=\"Microsoft.Health.HealthClientApplication.ShellUrl\" data-throw-if-not-resolved=\"false\"></xref> or \n<xref href=\"Microsoft.Health.HealthClientApplication.HealthServiceUrl\" data-throw-if-not-resolved=\"false\"></xref> is \n<strong>null</strong>, or the value of <xref href=\"Microsoft.Health.HealthClientApplication.ApplicationId\" data-throw-if-not-resolved=\"false\"></xref> or \n<xref href=\"Microsoft.Health.HealthClientApplication.MasterApplicationId\" data-throw-if-not-resolved=\"false\"></xref> is <xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref> or\nthe required application-specific certificate is not found.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthClientApplication.GetApplicationCreationUrl(System.String)
  commentId: M:Microsoft.Health.HealthClientApplication.GetApplicationCreationUrl(System.String)
  id: GetApplicationCreationUrl(System.String)
  parent: Microsoft.Health.HealthClientApplication
  langs:
  - csharp
  - vb
  name: GetApplicationCreationUrl(String)
  nameWithType: HealthClientApplication.GetApplicationCreationUrl(String)
  fullName: Microsoft.Health.HealthClientApplication.GetApplicationCreationUrl(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthClientApplication.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetApplicationCreationUrl
    path: ../Microsoft.Health/HealthClientApplication.cs
    startLine: 469
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the URL of a web page that will direct the user to create the application.\n"
  remarks: "\nOpen this URL in a browser window to allow the user to create the application.\n"
  example: []
  syntax:
    content: public Uri GetApplicationCreationUrl(string clientName)
    content.vb: Public Function GetApplicationCreationUrl(clientName As String) As Uri
    parameters:
    - id: clientName
      type: System.String
      description: The client name to use.
    return:
      type: System.Uri
      description: "\nThe URL of the application creation web page.\n"
  overload: Microsoft.Health.HealthClientApplication.GetApplicationCreationUrl*
  exceptions:
  - type: Microsoft.Health.InvalidConfigurationException
    commentId: T:Microsoft.Health.InvalidConfigurationException
    description: "\nThe value of <xref href=\"Microsoft.Health.HealthClientApplication.ShellUrl\" data-throw-if-not-resolved=\"false\"></xref> or \n<xref href=\"Microsoft.Health.HealthClientApplication.HealthServiceUrl\" data-throw-if-not-resolved=\"false\"></xref> is \n<strong>null</strong>, or the value of <xref href=\"Microsoft.Health.HealthClientApplication.ApplicationId\" data-throw-if-not-resolved=\"false\"></xref> or \n<xref href=\"Microsoft.Health.HealthClientApplication.MasterApplicationId\" data-throw-if-not-resolved=\"false\"></xref> is <xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref> or\nthe required application-specific certificate is not found.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<span class=\"paramref\">clientName</span> is empty or <strong>null</strong>.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthClientApplication.GetApplicationCreationUrl(System.String,System.String)
  commentId: M:Microsoft.Health.HealthClientApplication.GetApplicationCreationUrl(System.String,System.String)
  id: GetApplicationCreationUrl(System.String,System.String)
  parent: Microsoft.Health.HealthClientApplication
  langs:
  - csharp
  - vb
  name: GetApplicationCreationUrl(String, String)
  nameWithType: HealthClientApplication.GetApplicationCreationUrl(String, String)
  fullName: Microsoft.Health.HealthClientApplication.GetApplicationCreationUrl(System.String, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthClientApplication.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetApplicationCreationUrl
    path: ../Microsoft.Health/HealthClientApplication.cs
    startLine: 512
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the URL of a web page that will direct the user to create the application.\n"
  remarks: "\nOpen this URL in a browser window to allow the user to create the application.\n"
  example: []
  syntax:
    content: public Uri GetApplicationCreationUrl(string clientName, string optionalQueryParameters)
    content.vb: Public Function GetApplicationCreationUrl(clientName As String, optionalQueryParameters As String) As Uri
    parameters:
    - id: clientName
      type: System.String
      description: The client name to use.
    - id: optionalQueryParameters
      type: System.String
      description: "\nOptional parameters to be added to the creation URL:\n\n<ul>\n<li>ismra - the application can use multiple records for the same user at one time.</li>\n<li>extrecordid - record identifier.</li>\n<li>forceappauth - force redirect to APPAUTH target once user is authenticated.</li>\n<li>onopt# - A sequence of online optional authorization rule names\n            identifying which rules to present.  The sequence begins with 1.</li>\n<li>offopt# - A sequence of offline optional authorization rule names  \n            identifying which rules to present.  The sequence begins with 1.</li>\n</ul>\n"
    return:
      type: System.Uri
      description: "\nThe URL of the application creation web page.\n"
  overload: Microsoft.Health.HealthClientApplication.GetApplicationCreationUrl*
  exceptions:
  - type: Microsoft.Health.InvalidConfigurationException
    commentId: T:Microsoft.Health.InvalidConfigurationException
    description: "\nThe value of <xref href=\"Microsoft.Health.HealthClientApplication.ShellUrl\" data-throw-if-not-resolved=\"false\"></xref> or \n<xref href=\"Microsoft.Health.HealthClientApplication.HealthServiceUrl\" data-throw-if-not-resolved=\"false\"></xref> is \n<strong>null</strong>, or the value of <xref href=\"Microsoft.Health.HealthClientApplication.ApplicationId\" data-throw-if-not-resolved=\"false\"></xref> or \n<xref href=\"Microsoft.Health.HealthClientApplication.MasterApplicationId\" data-throw-if-not-resolved=\"false\"></xref> is <xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref> or\nthe required application-specific certificate is not found.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<span class=\"paramref\">clientName</span> is empty or <strong>null</strong>.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthClientApplication.GetUserAuthorizationUrl
  commentId: M:Microsoft.Health.HealthClientApplication.GetUserAuthorizationUrl
  id: GetUserAuthorizationUrl
  parent: Microsoft.Health.HealthClientApplication
  langs:
  - csharp
  - vb
  name: GetUserAuthorizationUrl()
  nameWithType: HealthClientApplication.GetUserAuthorizationUrl()
  fullName: Microsoft.Health.HealthClientApplication.GetUserAuthorizationUrl()
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthClientApplication.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetUserAuthorizationUrl
    path: ../Microsoft.Health/HealthClientApplication.cs
    startLine: 574
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the URL of a web page that will direct the user to authorize the application.\n"
  remarks: "\nOpen this URL in a browser window to allow the user to authorize the application.\n"
  example: []
  syntax:
    content: public Uri GetUserAuthorizationUrl()
    content.vb: Public Function GetUserAuthorizationUrl As Uri
    return:
      type: System.Uri
      description: "\nThe URL of the application authorization web page.\n"
  overload: Microsoft.Health.HealthClientApplication.GetUserAuthorizationUrl*
  exceptions:
  - type: Microsoft.Health.InvalidConfigurationException
    commentId: T:Microsoft.Health.InvalidConfigurationException
    description: "\nThe value of <xref href=\"Microsoft.Health.HealthClientApplication.ShellUrl\" data-throw-if-not-resolved=\"false\"></xref> is <strong>null</strong>, \nor the value of <xref href=\"Microsoft.Health.HealthClientApplication.ApplicationId\" data-throw-if-not-resolved=\"false\"></xref> is \n<xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthClientApplication.GetUserAuthorizationUrl(System.String)
  commentId: M:Microsoft.Health.HealthClientApplication.GetUserAuthorizationUrl(System.String)
  id: GetUserAuthorizationUrl(System.String)
  parent: Microsoft.Health.HealthClientApplication
  langs:
  - csharp
  - vb
  name: GetUserAuthorizationUrl(String)
  nameWithType: HealthClientApplication.GetUserAuthorizationUrl(String)
  fullName: Microsoft.Health.HealthClientApplication.GetUserAuthorizationUrl(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthClientApplication.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetUserAuthorizationUrl
    path: ../Microsoft.Health/HealthClientApplication.cs
    startLine: 611
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the URL of a web page that will direct the user to authorize the application, \nincluding optional APPAUTH parameters.\n"
  remarks: "\nOpen this URL in a browser window to allow the user to authorize the application.\n"
  example: []
  syntax:
    content: public Uri GetUserAuthorizationUrl(string optionalQueryParameters)
    content.vb: Public Function GetUserAuthorizationUrl(optionalQueryParameters As String) As Uri
    parameters:
    - id: optionalQueryParameters
      type: System.String
      description: "\nOptional parameters to be added to the authorization URL:\n\n<ul>\n<li>ismra - the application can use multiple records for the same user at one time.</li>\n<li>extrecordid - record identifier.</li>\n<li>forceappauth - force redirect to APPAUTH target once user is authenticated.</li>\n<li>onopt# - A sequence of online optional authorization rule names\n            identifying which rules to present.  The sequence begins with 1.</li>\n<li>offopt# - A sequence of offline optional authorization rule names  \n            identifying which rules to present.  The sequence begins with 1.</li>\n</ul>\n"
    return:
      type: System.Uri
      description: "\nThe URL of the application authorization web page.\n"
  overload: Microsoft.Health.HealthClientApplication.GetUserAuthorizationUrl*
  exceptions:
  - type: Microsoft.Health.InvalidConfigurationException
    commentId: T:Microsoft.Health.InvalidConfigurationException
    description: "\nThe value of <xref href=\"Microsoft.Health.HealthClientApplication.ShellUrl\" data-throw-if-not-resolved=\"false\"></xref> is <strong>null</strong>, \nor the value of <xref href=\"Microsoft.Health.HealthClientApplication.ApplicationId\" data-throw-if-not-resolved=\"false\"></xref> is \n<xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthClientApplication.StartUserAuthorizationProcess
  commentId: M:Microsoft.Health.HealthClientApplication.StartUserAuthorizationProcess
  id: StartUserAuthorizationProcess
  parent: Microsoft.Health.HealthClientApplication
  langs:
  - csharp
  - vb
  name: StartUserAuthorizationProcess()
  nameWithType: HealthClientApplication.StartUserAuthorizationProcess()
  fullName: Microsoft.Health.HealthClientApplication.StartUserAuthorizationProcess()
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthClientApplication.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: StartUserAuthorizationProcess
    path: ../Microsoft.Health/HealthClientApplication.cs
    startLine: 650
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nStart the authorization process.\n"
  remarks: "\nStarts the authorization process by opening an authorization page in the \nuser's default browser.\nAfter this call, the application is responsible for waiting \nuntil the authorization process is completed before continuing.  A typical \nimplementation will create a UI element that allows the user to indicate that\nauthorization is complete.\n"
  example: []
  syntax:
    content: >-
      [SecurityCritical]

      public void StartUserAuthorizationProcess()
    content.vb: >-
      <SecurityCritical>

      Public Sub StartUserAuthorizationProcess
  overload: Microsoft.Health.HealthClientApplication.StartUserAuthorizationProcess*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\nThere was an error opening the authorization URL.\n"
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthClientApplication.StartUserAuthorizationProcess(System.String)
  commentId: M:Microsoft.Health.HealthClientApplication.StartUserAuthorizationProcess(System.String)
  id: StartUserAuthorizationProcess(System.String)
  parent: Microsoft.Health.HealthClientApplication
  langs:
  - csharp
  - vb
  name: StartUserAuthorizationProcess(String)
  nameWithType: HealthClientApplication.StartUserAuthorizationProcess(String)
  fullName: Microsoft.Health.HealthClientApplication.StartUserAuthorizationProcess(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthClientApplication.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: StartUserAuthorizationProcess
    path: ../Microsoft.Health/HealthClientApplication.cs
    startLine: 688
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nStart the authorization process with optional APPAUTH parameters.\n"
  remarks: "\nStarts the authorization process by opening an authorization page in the \nuser's default browser with optional APPAUTH parameters.\nAfter this call, the application is responsible for waiting \nuntil the authorization process is completed before continuing.  A typical \nimplementation will create a UI element that allows the user to indicate that\nauthorization is complete.\n"
  example: []
  syntax:
    content: >-
      [SecurityCritical]

      public void StartUserAuthorizationProcess(string optionalQueryParameters)
    content.vb: >-
      <SecurityCritical>

      Public Sub StartUserAuthorizationProcess(optionalQueryParameters As String)
    parameters:
    - id: optionalQueryParameters
      type: System.String
      description: "\nOptional parameters to be added to the authorization URL:\n\n<ul>\n<li>ismra - the application can use multiple records for the same user at one time.</li>\n<li>extrecordid - record identifier.</li>\n<li>forceappauth - force redirect to APPAUTH target once user is authenticated.</li>\n<li>onopt# - A sequence of online optional authorization rule names\n            identifying which rules to present.  The sequence begins with 1.</li>\n<li>offopt# - A sequence of offline optional authorization rule names  \n            identifying which rules to present.  The sequence begins with 1.</li>\n</ul>\n"
  overload: Microsoft.Health.HealthClientApplication.StartUserAuthorizationProcess*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\nThere was an error opening the uri.\n"
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthClientApplication.StartApplicationCreationProcess
  commentId: M:Microsoft.Health.HealthClientApplication.StartApplicationCreationProcess
  id: StartApplicationCreationProcess
  parent: Microsoft.Health.HealthClientApplication
  langs:
  - csharp
  - vb
  name: StartApplicationCreationProcess()
  nameWithType: HealthClientApplication.StartApplicationCreationProcess()
  fullName: Microsoft.Health.HealthClientApplication.StartApplicationCreationProcess()
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthClientApplication.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: StartApplicationCreationProcess
    path: ../Microsoft.Health/HealthClientApplication.cs
    startLine: 720
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nStart the application creation process with a default application name.\n"
  remarks: "\nStarts the application creation process by opening a URL in the \nuser's default browser.\nAfter this call, the application is responsible for waiting \nuntil the authorization process is completed before continuing.  A typical \nimplementation will create a UI element that allows the user to indicate that\napplication creation is complete.\nThe name of the child application is set to the local machine name.\n"
  example: []
  syntax:
    content: >-
      [SecurityCritical]

      public void StartApplicationCreationProcess()
    content.vb: >-
      <SecurityCritical>

      Public Sub StartApplicationCreationProcess
  overload: Microsoft.Health.HealthClientApplication.StartApplicationCreationProcess*
  exceptions:
  - type: Microsoft.Health.InvalidConfigurationException
    commentId: T:Microsoft.Health.InvalidConfigurationException
    description: "\nThe value of <xref href=\"Microsoft.Health.HealthClientApplication.ShellUrl\" data-throw-if-not-resolved=\"false\"></xref> or \n<xref href=\"Microsoft.Health.HealthClientApplication.HealthServiceUrl\" data-throw-if-not-resolved=\"false\"></xref> is \n<strong>null</strong>, or the value of <xref href=\"Microsoft.Health.HealthClientApplication.ApplicationId\" data-throw-if-not-resolved=\"false\"></xref> or \n<xref href=\"Microsoft.Health.HealthClientApplication.MasterApplicationId\" data-throw-if-not-resolved=\"false\"></xref> is <xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\nThere was an error opening the URL.\n"
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthClientApplication.StartApplicationCreationProcess(System.String)
  commentId: M:Microsoft.Health.HealthClientApplication.StartApplicationCreationProcess(System.String)
  id: StartApplicationCreationProcess(System.String)
  parent: Microsoft.Health.HealthClientApplication
  langs:
  - csharp
  - vb
  name: StartApplicationCreationProcess(String)
  nameWithType: HealthClientApplication.StartApplicationCreationProcess(String)
  fullName: Microsoft.Health.HealthClientApplication.StartApplicationCreationProcess(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthClientApplication.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: StartApplicationCreationProcess
    path: ../Microsoft.Health/HealthClientApplication.cs
    startLine: 757
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nStart the application creation process with a specified application name.\n"
  remarks: "\nStarts the application creation process by opening a URL in the \nuser's default browser.\nAfter this call, the application is responsible for waiting \nuntil the authorization process is completed before continuing.  A typical \nimplementation will create a UI element that allows the user to indicate that\napplication creation is complete.\n"
  example: []
  syntax:
    content: >-
      [SecurityCritical]

      public void StartApplicationCreationProcess(string clientName)
    content.vb: >-
      <SecurityCritical>

      Public Sub StartApplicationCreationProcess(clientName As String)
    parameters:
    - id: clientName
      type: System.String
      description: "\nThe unique client name to use. The client name specifies the instance name\nof the application.\n"
  overload: Microsoft.Health.HealthClientApplication.StartApplicationCreationProcess*
  exceptions:
  - type: Microsoft.Health.InvalidConfigurationException
    commentId: T:Microsoft.Health.InvalidConfigurationException
    description: "\nThe value of <xref href=\"Microsoft.Health.HealthClientApplication.ShellUrl\" data-throw-if-not-resolved=\"false\"></xref> or \n<xref href=\"Microsoft.Health.HealthClientApplication.HealthServiceUrl\" data-throw-if-not-resolved=\"false\"></xref> is \n<strong>null</strong>, or the value of <xref href=\"Microsoft.Health.HealthClientApplication.ApplicationId\" data-throw-if-not-resolved=\"false\"></xref> or \n<xref href=\"Microsoft.Health.HealthClientApplication.MasterApplicationId\" data-throw-if-not-resolved=\"false\"></xref> is <xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<span class=\"paramref\">clientName</span> is empty or <strong>null</strong>.\n"
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\nThere was an error opening the URL.\n"
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthClientApplication.CreateAuthorizedConnection(System.Guid)
  commentId: M:Microsoft.Health.HealthClientApplication.CreateAuthorizedConnection(System.Guid)
  id: CreateAuthorizedConnection(System.Guid)
  parent: Microsoft.Health.HealthClientApplication
  langs:
  - csharp
  - vb
  name: CreateAuthorizedConnection(Guid)
  nameWithType: HealthClientApplication.CreateAuthorizedConnection(Guid)
  fullName: Microsoft.Health.HealthClientApplication.CreateAuthorizedConnection(System.Guid)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthClientApplication.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CreateAuthorizedConnection
    path: ../Microsoft.Health/HealthClientApplication.cs
    startLine: 793
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nCreates an authorized client connection to the application.\n"
  example: []
  syntax:
    content: public HealthClientAuthorizedConnection CreateAuthorizedConnection(Guid personId)
    content.vb: Public Function CreateAuthorizedConnection(personId As Guid) As HealthClientAuthorizedConnection
    parameters:
    - id: personId
      type: System.Guid
      description: "\nID of the person for the connection.\n"
    return:
      type: Microsoft.Health.HealthClientAuthorizedConnection
      description: "\nA <xref href=\"Microsoft.Health.HealthClientAuthorizedConnection\" data-throw-if-not-resolved=\"false\"></xref> instance.\n"
  overload: Microsoft.Health.HealthClientApplication.CreateAuthorizedConnection*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">personId</span> parameter is empty.\n"
  - type: Microsoft.Health.InvalidConfigurationException
    commentId: T:Microsoft.Health.InvalidConfigurationException
    description: "\nThe required application-specific certificate is not found,\nthe value of <xref href=\"Microsoft.Health.HealthClientApplication.HealthServiceUrl\" data-throw-if-not-resolved=\"false\"></xref> is \n<strong>null</strong>, or the value of <xref href=\"Microsoft.Health.HealthClientApplication.ApplicationId\" data-throw-if-not-resolved=\"false\"></xref>\nis <xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthClientApplication.DeleteCertificate
  commentId: M:Microsoft.Health.HealthClientApplication.DeleteCertificate
  id: DeleteCertificate
  parent: Microsoft.Health.HealthClientApplication
  langs:
  - csharp
  - vb
  name: DeleteCertificate()
  nameWithType: HealthClientApplication.DeleteCertificate()
  fullName: Microsoft.Health.HealthClientApplication.DeleteCertificate()
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthClientApplication.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DeleteCertificate
    path: ../Microsoft.Health/HealthClientApplication.cs
    startLine: 832
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nDeletes the certificate created as part of application creation\n"
  example: []
  syntax:
    content: public void DeleteCertificate()
    content.vb: Public Sub DeleteCertificate
  overload: Microsoft.Health.HealthClientApplication.DeleteCertificate*
  exceptions:
  - type: Microsoft.Health.InvalidConfigurationException
    commentId: T:Microsoft.Health.InvalidConfigurationException
    description: "\nThe required application-specific certificate is not found,\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthClientApplication.Dispose
  commentId: M:Microsoft.Health.HealthClientApplication.Dispose
  id: Dispose
  parent: Microsoft.Health.HealthClientApplication
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: HealthClientApplication.Dispose()
  fullName: Microsoft.Health.HealthClientApplication.Dispose()
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthClientApplication.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Dispose
    path: ../Microsoft.Health/HealthClientApplication.cs
    startLine: 856
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nDisposes the request.\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Microsoft.Health.HealthClientApplication.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.HealthClientApplication.Dispose(System.Boolean)
  commentId: M:Microsoft.Health.HealthClientApplication.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: Microsoft.Health.HealthClientApplication
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: HealthClientApplication.Dispose(Boolean)
  fullName: Microsoft.Health.HealthClientApplication.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: Microsoft.Health/HealthClientApplication.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Dispose
    path: ../Microsoft.Health/HealthClientApplication.cs
    startLine: 868
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nCleans up the cancel request trigger.\n"
  example: []
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: ''
  overload: Microsoft.Health.HealthClientApplication.Dispose*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  name: SetProperty(String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object())
  name.vb: SetProperty(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  name: InvokeMethod(String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object())
  name.vb: InvokeMethod(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  parent: Microsoft.Health.Utility.InvariantString
  definition: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  name: ToStringInvariant()
  nameWithType: InvariantString.ToStringInvariant()
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant()
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.HealthClientApplication.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  parent: Microsoft.Health.Utility.TypeHelper
  definition: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  name: ValueOrDbNull<HealthClientApplication>()
  nameWithType: TypeHelper.ValueOrDbNull<HealthClientApplication>()
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.HealthClientApplication>()
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of HealthClientApplication)()
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.HealthClientApplication)()
  name.vb: ValueOrDbNull(Of HealthClientApplication)()
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull<HealthClientApplication>
    nameWithType: TypeHelper.ValueOrDbNull<HealthClientApplication>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.HealthClientApplication>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull(Of HealthClientApplication)
    nameWithType: TypeHelper.ValueOrDbNull(Of HealthClientApplication)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.HealthClientApplication)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  parent: Microsoft.Health.Utility.WCXmlHelper
  definition: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  name: ToXml()
  nameWithType: WCXmlHelper.ToXml()
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml()
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  isExternal: true
  name: SetProperty(Object, String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object())
  name.vb: SetProperty(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions
  commentId: T:Microsoft.Health.Utility.IDispatchExtensions
  parent: Microsoft.Health.Utility
  isExternal: false
  name: IDispatchExtensions
  nameWithType: IDispatchExtensions
  fullName: Microsoft.Health.Utility.IDispatchExtensions
- uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  isExternal: true
  name: InvokeMethod(Object, String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object())
  name.vb: InvokeMethod(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  isExternal: true
  name: ToStringInvariant(Object)
  nameWithType: InvariantString.ToStringInvariant(Object)
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString
  commentId: T:Microsoft.Health.Utility.InvariantString
  parent: Microsoft.Health.Utility
  isExternal: false
  name: InvariantString
  nameWithType: InvariantString
  fullName: Microsoft.Health.Utility.InvariantString
- uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  isExternal: false
  name: ValueOrDbNull<T>(T)
  nameWithType: TypeHelper.ValueOrDbNull<T>(T)
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>(T)
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of T)(T)
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)(T)
  name.vb: ValueOrDbNull(Of T)(T)
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull<T>
    nameWithType: TypeHelper.ValueOrDbNull<T>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull(Of T)
    nameWithType: TypeHelper.ValueOrDbNull(Of T)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.TypeHelper
  commentId: T:Microsoft.Health.Utility.TypeHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: TypeHelper
  nameWithType: TypeHelper
  fullName: Microsoft.Health.Utility.TypeHelper
- uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  isExternal: true
  name: ToXml(Object)
  nameWithType: WCXmlHelper.ToXml(Object)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.WCXmlHelper
  commentId: T:Microsoft.Health.Utility.WCXmlHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: WCXmlHelper
  nameWithType: WCXmlHelper
  fullName: Microsoft.Health.Utility.WCXmlHelper
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: System.Guid.Empty
  commentId: F:System.Guid.Empty
- uid: Microsoft.Health.HealthClientApplication.Create*
  commentId: Overload:Microsoft.Health.HealthClientApplication.Create
  isExternal: false
  name: Create
  nameWithType: HealthClientApplication.Create
  fullName: Microsoft.Health.HealthClientApplication.Create
- uid: Microsoft.Health.InvalidConfigurationException
  commentId: T:Microsoft.Health.InvalidConfigurationException
  isExternal: false
  name: InvalidConfigurationException
  nameWithType: InvalidConfigurationException
  fullName: Microsoft.Health.InvalidConfigurationException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: Microsoft.Health.HealthClientApplication
  commentId: T:Microsoft.Health.HealthClientApplication
  parent: Microsoft.Health
  isExternal: false
  name: HealthClientApplication
  nameWithType: HealthClientApplication
  fullName: Microsoft.Health.HealthClientApplication
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: Microsoft.Health.HealthServiceInstance.HealthServiceUrl
  commentId: P:Microsoft.Health.HealthServiceInstance.HealthServiceUrl
- uid: Microsoft.Health.HealthServiceInstance.ShellUrl
  commentId: P:Microsoft.Health.HealthServiceInstance.ShellUrl
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: Microsoft.Health.HealthServiceInstance
  commentId: T:Microsoft.Health.HealthServiceInstance
  parent: Microsoft.Health
  isExternal: false
  name: HealthServiceInstance
  nameWithType: HealthServiceInstance
  fullName: Microsoft.Health.HealthServiceInstance
- uid: Microsoft.Health.HealthClientApplication.ApplicationId*
  commentId: Overload:Microsoft.Health.HealthClientApplication.ApplicationId
  isExternal: false
  name: ApplicationId
  nameWithType: HealthClientApplication.ApplicationId
  fullName: Microsoft.Health.HealthClientApplication.ApplicationId
- uid: Microsoft.Health.HealthClientApplication.ShellUrl*
  commentId: Overload:Microsoft.Health.HealthClientApplication.ShellUrl
  isExternal: false
  name: ShellUrl
  nameWithType: HealthClientApplication.ShellUrl
  fullName: Microsoft.Health.HealthClientApplication.ShellUrl
- uid: Microsoft.Health.HealthClientApplication.HealthServiceUrl*
  commentId: Overload:Microsoft.Health.HealthClientApplication.HealthServiceUrl
  isExternal: false
  name: HealthServiceUrl
  nameWithType: HealthClientApplication.HealthServiceUrl
  fullName: Microsoft.Health.HealthClientApplication.HealthServiceUrl
- uid: Microsoft.Health.HealthClientApplication.ServiceInstance*
  commentId: Overload:Microsoft.Health.HealthClientApplication.ServiceInstance
  isExternal: false
  name: ServiceInstance
  nameWithType: HealthClientApplication.ServiceInstance
  fullName: Microsoft.Health.HealthClientApplication.ServiceInstance
- uid: Microsoft.Health.HealthClientApplication.MasterApplicationId*
  commentId: Overload:Microsoft.Health.HealthClientApplication.MasterApplicationId
  isExternal: false
  name: MasterApplicationId
  nameWithType: HealthClientApplication.MasterApplicationId
  fullName: Microsoft.Health.HealthClientApplication.MasterApplicationId
- uid: Microsoft.Health.HealthClientApplication.ApplicationConnection
  commentId: P:Microsoft.Health.HealthClientApplication.ApplicationConnection
- uid: Microsoft.Health.HealthClientApplication.ApplicationConnection*
  commentId: Overload:Microsoft.Health.HealthClientApplication.ApplicationConnection
  isExternal: false
  name: ApplicationConnection
  nameWithType: HealthClientApplication.ApplicationConnection
  fullName: Microsoft.Health.HealthClientApplication.ApplicationConnection
- uid: Microsoft.Health.ApplicationConnection
  commentId: T:Microsoft.Health.ApplicationConnection
  parent: Microsoft.Health
  isExternal: false
  name: ApplicationConnection
  nameWithType: ApplicationConnection
  fullName: Microsoft.Health.ApplicationConnection
- uid: Microsoft.Health.ApplicationInfo
  commentId: T:Microsoft.Health.ApplicationInfo
  parent: Microsoft.Health
  isExternal: false
  name: ApplicationInfo
  nameWithType: ApplicationInfo
  fullName: Microsoft.Health.ApplicationInfo
- uid: Microsoft.Health.HealthClientApplication.StartApplicationCreationProcess
  commentId: M:Microsoft.Health.HealthClientApplication.StartApplicationCreationProcess
- uid: Microsoft.Health.HealthClientApplication.GetApplicationInfo*
  commentId: Overload:Microsoft.Health.HealthClientApplication.GetApplicationInfo
  isExternal: false
  name: GetApplicationInfo
  nameWithType: HealthClientApplication.GetApplicationInfo
  fullName: Microsoft.Health.HealthClientApplication.GetApplicationInfo
- uid: Microsoft.Health.HealthServiceException
  commentId: T:Microsoft.Health.HealthServiceException
  parent: Microsoft.Health
  isExternal: false
  name: HealthServiceException
  nameWithType: HealthServiceException
  fullName: Microsoft.Health.HealthServiceException
- uid: Microsoft.Health.HealthClientApplication.ShellUrl
  commentId: P:Microsoft.Health.HealthClientApplication.ShellUrl
- uid: Microsoft.Health.HealthClientApplication.HealthServiceUrl
  commentId: P:Microsoft.Health.HealthClientApplication.HealthServiceUrl
- uid: Microsoft.Health.HealthClientApplication.ApplicationId
  commentId: P:Microsoft.Health.HealthClientApplication.ApplicationId
- uid: Microsoft.Health.HealthClientApplication.MasterApplicationId
  commentId: P:Microsoft.Health.HealthClientApplication.MasterApplicationId
- uid: Microsoft.Health.HealthClientApplication.GetApplicationCreationUrl*
  commentId: Overload:Microsoft.Health.HealthClientApplication.GetApplicationCreationUrl
  isExternal: false
  name: GetApplicationCreationUrl
  nameWithType: HealthClientApplication.GetApplicationCreationUrl
  fullName: Microsoft.Health.HealthClientApplication.GetApplicationCreationUrl
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Health.HealthClientApplication.GetUserAuthorizationUrl*
  commentId: Overload:Microsoft.Health.HealthClientApplication.GetUserAuthorizationUrl
  isExternal: false
  name: GetUserAuthorizationUrl
  nameWithType: HealthClientApplication.GetUserAuthorizationUrl
  fullName: Microsoft.Health.HealthClientApplication.GetUserAuthorizationUrl
- uid: Microsoft.Health.HealthClientApplication.StartUserAuthorizationProcess*
  commentId: Overload:Microsoft.Health.HealthClientApplication.StartUserAuthorizationProcess
  isExternal: false
  name: StartUserAuthorizationProcess
  nameWithType: HealthClientApplication.StartUserAuthorizationProcess
  fullName: Microsoft.Health.HealthClientApplication.StartUserAuthorizationProcess
- uid: System.ComponentModel.Win32Exception
  commentId: T:System.ComponentModel.Win32Exception
- uid: Microsoft.Health.HealthClientApplication.StartApplicationCreationProcess*
  commentId: Overload:Microsoft.Health.HealthClientApplication.StartApplicationCreationProcess
  isExternal: false
  name: StartApplicationCreationProcess
  nameWithType: HealthClientApplication.StartApplicationCreationProcess
  fullName: Microsoft.Health.HealthClientApplication.StartApplicationCreationProcess
- uid: Microsoft.Health.HealthClientAuthorizedConnection
  commentId: T:Microsoft.Health.HealthClientAuthorizedConnection
  parent: Microsoft.Health
  isExternal: false
  name: HealthClientAuthorizedConnection
  nameWithType: HealthClientAuthorizedConnection
  fullName: Microsoft.Health.HealthClientAuthorizedConnection
- uid: Microsoft.Health.HealthClientApplication.CreateAuthorizedConnection*
  commentId: Overload:Microsoft.Health.HealthClientApplication.CreateAuthorizedConnection
  isExternal: false
  name: CreateAuthorizedConnection
  nameWithType: HealthClientApplication.CreateAuthorizedConnection
  fullName: Microsoft.Health.HealthClientApplication.CreateAuthorizedConnection
- uid: Microsoft.Health.HealthClientApplication.DeleteCertificate*
  commentId: Overload:Microsoft.Health.HealthClientApplication.DeleteCertificate
  isExternal: false
  name: DeleteCertificate
  nameWithType: HealthClientApplication.DeleteCertificate
  fullName: Microsoft.Health.HealthClientApplication.DeleteCertificate
- uid: Microsoft.Health.HealthClientApplication.Dispose*
  commentId: Overload:Microsoft.Health.HealthClientApplication.Dispose
  isExternal: false
  name: Dispose
  nameWithType: HealthClientApplication.Dispose
  fullName: Microsoft.Health.HealthClientApplication.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
