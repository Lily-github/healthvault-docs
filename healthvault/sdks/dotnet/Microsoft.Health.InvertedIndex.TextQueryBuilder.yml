### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.InvertedIndex.TextQueryBuilder
  commentId: T:Microsoft.Health.InvertedIndex.TextQueryBuilder
  id: TextQueryBuilder
  parent: Microsoft.Health.InvertedIndex
  children:
  - Microsoft.Health.InvertedIndex.TextQueryBuilder.#ctor(Microsoft.Health.InvertedIndex.TextIndex)
  - Microsoft.Health.InvertedIndex.TextQueryBuilder.#ctor(Microsoft.Health.InvertedIndex.TextIndex,Microsoft.Health.PhraseAnalyzer.Analyzer)
  - Microsoft.Health.InvertedIndex.TextQueryBuilder.#ctor(Microsoft.Health.InvertedIndex.TextIndex,Microsoft.Health.PhraseAnalyzer.Analyzer,Microsoft.Health.InvertedIndex.TermBoosts)
  - Microsoft.Health.InvertedIndex.TextQueryBuilder.AddRelated(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String[])
  - Microsoft.Health.InvertedIndex.TextQueryBuilder.AddSpelling(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String)
  - Microsoft.Health.InvertedIndex.TextQueryBuilder.AddStem(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String)
  - Microsoft.Health.InvertedIndex.TextQueryBuilder.AddString(System.String)
  - Microsoft.Health.InvertedIndex.TextQueryBuilder.AddSynonyms(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String[])
  - Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildAndQuery(System.Collections.Generic.IList{System.String})
  - Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildExactQuery(System.Collections.Generic.IList{System.String},Microsoft.Health.InvertedIndex.ICorpusStatistics)
  - Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildOrQuery(System.Collections.Generic.IList{System.String})
  - Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildQuery(System.Collections.Generic.IList{System.String})
  - Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildQueryTree(System.Collections.Generic.IList{System.String})
  - Microsoft.Health.InvertedIndex.TextQueryBuilder.m_boosts
  - Microsoft.Health.InvertedIndex.TextQueryBuilder.m_maxTerms
  - Microsoft.Health.InvertedIndex.TextQueryBuilder.m_resolvedTerms
  - Microsoft.Health.InvertedIndex.TextQueryBuilder.MaxTerms
  - Microsoft.Health.InvertedIndex.TextQueryBuilder.PushTerm(Microsoft.Health.InvertedIndex.RecordIDEnumerator)
  langs:
  - csharp
  - vb
  name: TextQueryBuilder
  nameWithType: TextQueryBuilder
  fullName: Microsoft.Health.InvertedIndex.TextQueryBuilder
  type: Class
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/TextQueryBuilder.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: TextQueryBuilder
    path: ../Microsoft.Health.Utility/search/InvertedIndex/TextQueryBuilder.cs
    startLine: 13
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  syntax:
    content: 'public abstract class TextQueryBuilder : PhraseNormalizer'
    content.vb: >-
      Public MustInherit Class TextQueryBuilder
          Inherits PhraseNormalizer
  inheritance:
  - System.Object
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  derivedClasses:
  - Microsoft.Health.InvertedIndex.VectorQueryBuilder
  inheritedMembers:
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.BlockType
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.RemoveType
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.ReplaceType
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.SynonymType
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.RelatedType
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.SpellType
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.StemmerType
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.PhoneticType
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.SubjectType
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.IndicatorType
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.ConceptType
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.Analyzer
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.Build(System.Collections.Generic.IList{System.String})
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.GetBuilder
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.BuildPhrase(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddWords(System.Collections.Generic.IList{System.String},System.Int32,System.Int32)
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSegment(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSubject(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddIndicator(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  - Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddConcept(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - Microsoft.Health.InvertedIndex.TextQueryBuilder.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  - System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.Health.InvertedIndex.TextQueryBuilder.m_boosts
  commentId: F:Microsoft.Health.InvertedIndex.TextQueryBuilder.m_boosts
  id: m_boosts
  parent: Microsoft.Health.InvertedIndex.TextQueryBuilder
  langs:
  - csharp
  - vb
  name: m_boosts
  nameWithType: TextQueryBuilder.m_boosts
  fullName: Microsoft.Health.InvertedIndex.TextQueryBuilder.m_boosts
  type: Field
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/TextQueryBuilder.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: m_boosts
    path: ../Microsoft.Health.Utility/search/InvertedIndex/TextQueryBuilder.cs
    startLine: 18
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: protected TermBoosts m_boosts
    content.vb: Protected m_boosts As TermBoosts
    return:
      type: Microsoft.Health.InvertedIndex.TermBoosts
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.Health.InvertedIndex.TextQueryBuilder.m_maxTerms
  commentId: F:Microsoft.Health.InvertedIndex.TextQueryBuilder.m_maxTerms
  id: m_maxTerms
  parent: Microsoft.Health.InvertedIndex.TextQueryBuilder
  langs:
  - csharp
  - vb
  name: m_maxTerms
  nameWithType: TextQueryBuilder.m_maxTerms
  fullName: Microsoft.Health.InvertedIndex.TextQueryBuilder.m_maxTerms
  type: Field
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/TextQueryBuilder.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: m_maxTerms
    path: ../Microsoft.Health.Utility/search/InvertedIndex/TextQueryBuilder.cs
    startLine: 23
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: protected int m_maxTerms
    content.vb: Protected m_maxTerms As Integer
    return:
      type: System.Int32
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.Health.InvertedIndex.TextQueryBuilder.m_resolvedTerms
  commentId: F:Microsoft.Health.InvertedIndex.TextQueryBuilder.m_resolvedTerms
  id: m_resolvedTerms
  parent: Microsoft.Health.InvertedIndex.TextQueryBuilder
  langs:
  - csharp
  - vb
  name: m_resolvedTerms
  nameWithType: TextQueryBuilder.m_resolvedTerms
  fullName: Microsoft.Health.InvertedIndex.TextQueryBuilder.m_resolvedTerms
  type: Field
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/TextQueryBuilder.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: m_resolvedTerms
    path: ../Microsoft.Health.Utility/search/InvertedIndex/TextQueryBuilder.cs
    startLine: 28
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: protected StructList<RecordIDEnumerator> m_resolvedTerms
    content.vb: Protected m_resolvedTerms As StructList(Of RecordIDEnumerator)
    return:
      type: Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.Health.InvertedIndex.TextQueryBuilder.#ctor(Microsoft.Health.InvertedIndex.TextIndex)
  commentId: M:Microsoft.Health.InvertedIndex.TextQueryBuilder.#ctor(Microsoft.Health.InvertedIndex.TextIndex)
  id: '#ctor(Microsoft.Health.InvertedIndex.TextIndex)'
  parent: Microsoft.Health.InvertedIndex.TextQueryBuilder
  langs:
  - csharp
  - vb
  name: TextQueryBuilder(TextIndex)
  nameWithType: TextQueryBuilder.TextQueryBuilder(TextIndex)
  fullName: Microsoft.Health.InvertedIndex.TextQueryBuilder.TextQueryBuilder(Microsoft.Health.InvertedIndex.TextIndex)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/TextQueryBuilder.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health.Utility/search/InvertedIndex/TextQueryBuilder.cs
    startLine: 36
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: protected TextQueryBuilder(TextIndex index)
    content.vb: Protected Sub New(index As TextIndex)
    parameters:
    - id: index
      type: Microsoft.Health.InvertedIndex.TextIndex
      description: ''
  overload: Microsoft.Health.InvertedIndex.TextQueryBuilder.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.Health.InvertedIndex.TextQueryBuilder.#ctor(Microsoft.Health.InvertedIndex.TextIndex,Microsoft.Health.PhraseAnalyzer.Analyzer)
  commentId: M:Microsoft.Health.InvertedIndex.TextQueryBuilder.#ctor(Microsoft.Health.InvertedIndex.TextIndex,Microsoft.Health.PhraseAnalyzer.Analyzer)
  id: '#ctor(Microsoft.Health.InvertedIndex.TextIndex,Microsoft.Health.PhraseAnalyzer.Analyzer)'
  parent: Microsoft.Health.InvertedIndex.TextQueryBuilder
  langs:
  - csharp
  - vb
  name: TextQueryBuilder(TextIndex, Analyzer)
  nameWithType: TextQueryBuilder.TextQueryBuilder(TextIndex, Analyzer)
  fullName: Microsoft.Health.InvertedIndex.TextQueryBuilder.TextQueryBuilder(Microsoft.Health.InvertedIndex.TextIndex, Microsoft.Health.PhraseAnalyzer.Analyzer)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/TextQueryBuilder.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health.Utility/search/InvertedIndex/TextQueryBuilder.cs
    startLine: 46
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: protected TextQueryBuilder(TextIndex index, Analyzer analyzer)
    content.vb: Protected Sub New(index As TextIndex, analyzer As Analyzer)
    parameters:
    - id: index
      type: Microsoft.Health.InvertedIndex.TextIndex
      description: ''
    - id: analyzer
      type: Microsoft.Health.PhraseAnalyzer.Analyzer
      description: ''
  overload: Microsoft.Health.InvertedIndex.TextQueryBuilder.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.Health.InvertedIndex.TextQueryBuilder.#ctor(Microsoft.Health.InvertedIndex.TextIndex,Microsoft.Health.PhraseAnalyzer.Analyzer,Microsoft.Health.InvertedIndex.TermBoosts)
  commentId: M:Microsoft.Health.InvertedIndex.TextQueryBuilder.#ctor(Microsoft.Health.InvertedIndex.TextIndex,Microsoft.Health.PhraseAnalyzer.Analyzer,Microsoft.Health.InvertedIndex.TermBoosts)
  id: '#ctor(Microsoft.Health.InvertedIndex.TextIndex,Microsoft.Health.PhraseAnalyzer.Analyzer,Microsoft.Health.InvertedIndex.TermBoosts)'
  parent: Microsoft.Health.InvertedIndex.TextQueryBuilder
  langs:
  - csharp
  - vb
  name: TextQueryBuilder(TextIndex, Analyzer, TermBoosts)
  nameWithType: TextQueryBuilder.TextQueryBuilder(TextIndex, Analyzer, TermBoosts)
  fullName: Microsoft.Health.InvertedIndex.TextQueryBuilder.TextQueryBuilder(Microsoft.Health.InvertedIndex.TextIndex, Microsoft.Health.PhraseAnalyzer.Analyzer, Microsoft.Health.InvertedIndex.TermBoosts)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/TextQueryBuilder.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health.Utility/search/InvertedIndex/TextQueryBuilder.cs
    startLine: 57
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: protected TextQueryBuilder(TextIndex index, Analyzer analyzer, TermBoosts boosts)
    content.vb: Protected Sub New(index As TextIndex, analyzer As Analyzer, boosts As TermBoosts)
    parameters:
    - id: index
      type: Microsoft.Health.InvertedIndex.TextIndex
      description: ''
    - id: analyzer
      type: Microsoft.Health.PhraseAnalyzer.Analyzer
      description: ''
    - id: boosts
      type: Microsoft.Health.InvertedIndex.TermBoosts
      description: ''
  overload: Microsoft.Health.InvertedIndex.TextQueryBuilder.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.Health.InvertedIndex.TextQueryBuilder.MaxTerms
  commentId: P:Microsoft.Health.InvertedIndex.TextQueryBuilder.MaxTerms
  id: MaxTerms
  parent: Microsoft.Health.InvertedIndex.TextQueryBuilder
  langs:
  - csharp
  - vb
  name: MaxTerms
  nameWithType: TextQueryBuilder.MaxTerms
  fullName: Microsoft.Health.InvertedIndex.TextQueryBuilder.MaxTerms
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/TextQueryBuilder.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: MaxTerms
    path: ../Microsoft.Health.Utility/search/InvertedIndex/TextQueryBuilder.cs
    startLine: 72
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public int MaxTerms { get; set; }
    content.vb: Public Property MaxTerms As Integer
    parameters: []
    return:
      type: System.Int32
  overload: Microsoft.Health.InvertedIndex.TextQueryBuilder.MaxTerms*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildQuery(System.Collections.Generic.IList{System.String})
  commentId: M:Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildQuery(System.Collections.Generic.IList{System.String})
  id: BuildQuery(System.Collections.Generic.IList{System.String})
  parent: Microsoft.Health.InvertedIndex.TextQueryBuilder
  langs:
  - csharp
  - vb
  name: BuildQuery(IList<String>)
  nameWithType: TextQueryBuilder.BuildQuery(IList<String>)
  fullName: Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildQuery(System.Collections.Generic.IList<System.String>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/TextQueryBuilder.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: BuildQuery
    path: ../Microsoft.Health.Utility/search/InvertedIndex/TextQueryBuilder.cs
    startLine: 110
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\nBy default, builds an 'and' query .\n"
  example: []
  syntax:
    content: public virtual RecordIDEnumerator BuildQuery(IList<string> terms)
    content.vb: Public Overridable Function BuildQuery(terms As IList(Of String)) As RecordIDEnumerator
    parameters:
    - id: terms
      type: System.Collections.Generic.IList{System.String}
      description: ''
    return:
      type: Microsoft.Health.InvertedIndex.RecordIDEnumerator
      description: ''
  overload: Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildQuery*
  nameWithType.vb: TextQueryBuilder.BuildQuery(IList(Of String))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildQuery(System.Collections.Generic.IList(Of System.String))
  name.vb: BuildQuery(IList(Of String))
- uid: Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildOrQuery(System.Collections.Generic.IList{System.String})
  commentId: M:Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildOrQuery(System.Collections.Generic.IList{System.String})
  id: BuildOrQuery(System.Collections.Generic.IList{System.String})
  parent: Microsoft.Health.InvertedIndex.TextQueryBuilder
  langs:
  - csharp
  - vb
  name: BuildOrQuery(IList<String>)
  nameWithType: TextQueryBuilder.BuildOrQuery(IList<String>)
  fullName: Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildOrQuery(System.Collections.Generic.IList<System.String>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/TextQueryBuilder.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: BuildOrQuery
    path: ../Microsoft.Health.Utility/search/InvertedIndex/TextQueryBuilder.cs
    startLine: 120
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public RecordIDEnumerator BuildOrQuery(IList<string> terms)
    content.vb: Public Function BuildOrQuery(terms As IList(Of String)) As RecordIDEnumerator
    parameters:
    - id: terms
      type: System.Collections.Generic.IList{System.String}
      description: ''
    return:
      type: Microsoft.Health.InvertedIndex.RecordIDEnumerator
      description: ''
  overload: Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildOrQuery*
  nameWithType.vb: TextQueryBuilder.BuildOrQuery(IList(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildOrQuery(System.Collections.Generic.IList(Of System.String))
  name.vb: BuildOrQuery(IList(Of String))
- uid: Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildAndQuery(System.Collections.Generic.IList{System.String})
  commentId: M:Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildAndQuery(System.Collections.Generic.IList{System.String})
  id: BuildAndQuery(System.Collections.Generic.IList{System.String})
  parent: Microsoft.Health.InvertedIndex.TextQueryBuilder
  langs:
  - csharp
  - vb
  name: BuildAndQuery(IList<String>)
  nameWithType: TextQueryBuilder.BuildAndQuery(IList<String>)
  fullName: Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildAndQuery(System.Collections.Generic.IList<System.String>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/TextQueryBuilder.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: BuildAndQuery
    path: ../Microsoft.Health.Utility/search/InvertedIndex/TextQueryBuilder.cs
    startLine: 135
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public RecordIDEnumerator BuildAndQuery(IList<string> terms)
    content.vb: Public Function BuildAndQuery(terms As IList(Of String)) As RecordIDEnumerator
    parameters:
    - id: terms
      type: System.Collections.Generic.IList{System.String}
      description: ''
    return:
      type: Microsoft.Health.InvertedIndex.RecordIDEnumerator
      description: ''
  overload: Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildAndQuery*
  nameWithType.vb: TextQueryBuilder.BuildAndQuery(IList(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildAndQuery(System.Collections.Generic.IList(Of System.String))
  name.vb: BuildAndQuery(IList(Of String))
- uid: Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildExactQuery(System.Collections.Generic.IList{System.String},Microsoft.Health.InvertedIndex.ICorpusStatistics)
  commentId: M:Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildExactQuery(System.Collections.Generic.IList{System.String},Microsoft.Health.InvertedIndex.ICorpusStatistics)
  id: BuildExactQuery(System.Collections.Generic.IList{System.String},Microsoft.Health.InvertedIndex.ICorpusStatistics)
  parent: Microsoft.Health.InvertedIndex.TextQueryBuilder
  langs:
  - csharp
  - vb
  name: BuildExactQuery(IList<String>, ICorpusStatistics)
  nameWithType: TextQueryBuilder.BuildExactQuery(IList<String>, ICorpusStatistics)
  fullName: Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildExactQuery(System.Collections.Generic.IList<System.String>, Microsoft.Health.InvertedIndex.ICorpusStatistics)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/TextQueryBuilder.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: BuildExactQuery
    path: ../Microsoft.Health.Utility/search/InvertedIndex/TextQueryBuilder.cs
    startLine: 151
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public RecordIDEnumerator BuildExactQuery(IList<string> terms, ICorpusStatistics corpus)
    content.vb: Public Function BuildExactQuery(terms As IList(Of String), corpus As ICorpusStatistics) As RecordIDEnumerator
    parameters:
    - id: terms
      type: System.Collections.Generic.IList{System.String}
      description: ''
    - id: corpus
      type: Microsoft.Health.InvertedIndex.ICorpusStatistics
      description: ''
    return:
      type: Microsoft.Health.InvertedIndex.RecordIDEnumerator
      description: ''
  overload: Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildExactQuery*
  nameWithType.vb: TextQueryBuilder.BuildExactQuery(IList(Of String), ICorpusStatistics)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildExactQuery(System.Collections.Generic.IList(Of System.String), Microsoft.Health.InvertedIndex.ICorpusStatistics)
  name.vb: BuildExactQuery(IList(Of String), ICorpusStatistics)
- uid: Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildQueryTree(System.Collections.Generic.IList{System.String})
  commentId: M:Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildQueryTree(System.Collections.Generic.IList{System.String})
  id: BuildQueryTree(System.Collections.Generic.IList{System.String})
  parent: Microsoft.Health.InvertedIndex.TextQueryBuilder
  langs:
  - csharp
  - vb
  name: BuildQueryTree(IList<String>)
  nameWithType: TextQueryBuilder.BuildQueryTree(IList<String>)
  fullName: Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildQueryTree(System.Collections.Generic.IList<System.String>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/TextQueryBuilder.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: BuildQueryTree
    path: ../Microsoft.Health.Utility/search/InvertedIndex/TextQueryBuilder.cs
    startLine: 183
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: protected bool BuildQueryTree(IList<string> query)
    content.vb: Protected Function BuildQueryTree(query As IList(Of String)) As Boolean
    parameters:
    - id: query
      type: System.Collections.Generic.IList{System.String}
      description: ''
    return:
      type: System.Boolean
      description: ''
  overload: Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildQueryTree*
  nameWithType.vb: TextQueryBuilder.BuildQueryTree(IList(Of String))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildQueryTree(System.Collections.Generic.IList(Of System.String))
  name.vb: BuildQueryTree(IList(Of String))
- uid: Microsoft.Health.InvertedIndex.TextQueryBuilder.PushTerm(Microsoft.Health.InvertedIndex.RecordIDEnumerator)
  commentId: M:Microsoft.Health.InvertedIndex.TextQueryBuilder.PushTerm(Microsoft.Health.InvertedIndex.RecordIDEnumerator)
  id: PushTerm(Microsoft.Health.InvertedIndex.RecordIDEnumerator)
  parent: Microsoft.Health.InvertedIndex.TextQueryBuilder
  langs:
  - csharp
  - vb
  name: PushTerm(RecordIDEnumerator)
  nameWithType: TextQueryBuilder.PushTerm(RecordIDEnumerator)
  fullName: Microsoft.Health.InvertedIndex.TextQueryBuilder.PushTerm(Microsoft.Health.InvertedIndex.RecordIDEnumerator)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/TextQueryBuilder.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: PushTerm
    path: ../Microsoft.Health.Utility/search/InvertedIndex/TextQueryBuilder.cs
    startLine: 199
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public void PushTerm(RecordIDEnumerator term)
    content.vb: Public Sub PushTerm(term As RecordIDEnumerator)
    parameters:
    - id: term
      type: Microsoft.Health.InvertedIndex.RecordIDEnumerator
      description: ''
  overload: Microsoft.Health.InvertedIndex.TextQueryBuilder.PushTerm*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.InvertedIndex.TextQueryBuilder.AddString(System.String)
  commentId: M:Microsoft.Health.InvertedIndex.TextQueryBuilder.AddString(System.String)
  id: AddString(System.String)
  parent: Microsoft.Health.InvertedIndex.TextQueryBuilder
  langs:
  - csharp
  - vb
  name: AddString(String)
  nameWithType: TextQueryBuilder.AddString(String)
  fullName: Microsoft.Health.InvertedIndex.TextQueryBuilder.AddString(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/TextQueryBuilder.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: AddString
    path: ../Microsoft.Health.Utility/search/InvertedIndex/TextQueryBuilder.cs
    startLine: 320
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: protected override void AddString(string value)
    content.vb: Protected Overrides Sub AddString(value As String)
    parameters:
    - id: value
      type: System.String
      description: ''
  overridden: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddString(System.String)
  overload: Microsoft.Health.InvertedIndex.TextQueryBuilder.AddString*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.Health.InvertedIndex.TextQueryBuilder.AddSynonyms(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String[])
  commentId: M:Microsoft.Health.InvertedIndex.TextQueryBuilder.AddSynonyms(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String[])
  id: AddSynonyms(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String[])
  parent: Microsoft.Health.InvertedIndex.TextQueryBuilder
  langs:
  - csharp
  - vb
  name: AddSynonyms(IList<String>, AnalyzerMatch, String[])
  nameWithType: TextQueryBuilder.AddSynonyms(IList<String>, AnalyzerMatch, String[])
  fullName: Microsoft.Health.InvertedIndex.TextQueryBuilder.AddSynonyms(System.Collections.Generic.IList<System.String>, Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.String[])
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/TextQueryBuilder.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: AddSynonyms
    path: ../Microsoft.Health.Utility/search/InvertedIndex/TextQueryBuilder.cs
    startLine: 331
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: protected override void AddSynonyms(IList<string> words, AnalyzerMatch segment, string[] synonymSet)
    content.vb: Protected Overrides Sub AddSynonyms(words As IList(Of String), segment As AnalyzerMatch, synonymSet As String())
    parameters:
    - id: words
      type: System.Collections.Generic.IList{System.String}
      description: ''
    - id: segment
      type: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
      description: ''
    - id: synonymSet
      type: System.String[]
      description: ''
  overridden: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSynonyms(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String[])
  overload: Microsoft.Health.InvertedIndex.TextQueryBuilder.AddSynonyms*
  nameWithType.vb: TextQueryBuilder.AddSynonyms(IList(Of String), AnalyzerMatch, String())
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: Microsoft.Health.InvertedIndex.TextQueryBuilder.AddSynonyms(System.Collections.Generic.IList(Of System.String), Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.String())
  name.vb: AddSynonyms(IList(Of String), AnalyzerMatch, String())
- uid: Microsoft.Health.InvertedIndex.TextQueryBuilder.AddStem(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String)
  commentId: M:Microsoft.Health.InvertedIndex.TextQueryBuilder.AddStem(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String)
  id: AddStem(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String)
  parent: Microsoft.Health.InvertedIndex.TextQueryBuilder
  langs:
  - csharp
  - vb
  name: AddStem(IList<String>, AnalyzerMatch, String)
  nameWithType: TextQueryBuilder.AddStem(IList<String>, AnalyzerMatch, String)
  fullName: Microsoft.Health.InvertedIndex.TextQueryBuilder.AddStem(System.Collections.Generic.IList<System.String>, Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/TextQueryBuilder.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: AddStem
    path: ../Microsoft.Health.Utility/search/InvertedIndex/TextQueryBuilder.cs
    startLine: 365
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: protected override void AddStem(IList<string> words, AnalyzerMatch segment, string stem)
    content.vb: Protected Overrides Sub AddStem(words As IList(Of String), segment As AnalyzerMatch, stem As String)
    parameters:
    - id: words
      type: System.Collections.Generic.IList{System.String}
      description: ''
    - id: segment
      type: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
      description: ''
    - id: stem
      type: System.String
      description: ''
  overridden: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddStem(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String)
  overload: Microsoft.Health.InvertedIndex.TextQueryBuilder.AddStem*
  nameWithType.vb: TextQueryBuilder.AddStem(IList(Of String), AnalyzerMatch, String)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: Microsoft.Health.InvertedIndex.TextQueryBuilder.AddStem(System.Collections.Generic.IList(Of System.String), Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.String)
  name.vb: AddStem(IList(Of String), AnalyzerMatch, String)
- uid: Microsoft.Health.InvertedIndex.TextQueryBuilder.AddSpelling(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String)
  commentId: M:Microsoft.Health.InvertedIndex.TextQueryBuilder.AddSpelling(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String)
  id: AddSpelling(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String)
  parent: Microsoft.Health.InvertedIndex.TextQueryBuilder
  langs:
  - csharp
  - vb
  name: AddSpelling(IList<String>, AnalyzerMatch, String)
  nameWithType: TextQueryBuilder.AddSpelling(IList<String>, AnalyzerMatch, String)
  fullName: Microsoft.Health.InvertedIndex.TextQueryBuilder.AddSpelling(System.Collections.Generic.IList<System.String>, Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/TextQueryBuilder.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: AddSpelling
    path: ../Microsoft.Health.Utility/search/InvertedIndex/TextQueryBuilder.cs
    startLine: 376
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: protected override void AddSpelling(IList<string> words, AnalyzerMatch segment, string spelling)
    content.vb: Protected Overrides Sub AddSpelling(words As IList(Of String), segment As AnalyzerMatch, spelling As String)
    parameters:
    - id: words
      type: System.Collections.Generic.IList{System.String}
      description: ''
    - id: segment
      type: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
      description: ''
    - id: spelling
      type: System.String
      description: ''
  overridden: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSpelling(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String)
  overload: Microsoft.Health.InvertedIndex.TextQueryBuilder.AddSpelling*
  nameWithType.vb: TextQueryBuilder.AddSpelling(IList(Of String), AnalyzerMatch, String)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: Microsoft.Health.InvertedIndex.TextQueryBuilder.AddSpelling(System.Collections.Generic.IList(Of System.String), Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.String)
  name.vb: AddSpelling(IList(Of String), AnalyzerMatch, String)
- uid: Microsoft.Health.InvertedIndex.TextQueryBuilder.AddRelated(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String[])
  commentId: M:Microsoft.Health.InvertedIndex.TextQueryBuilder.AddRelated(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String[])
  id: AddRelated(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String[])
  parent: Microsoft.Health.InvertedIndex.TextQueryBuilder
  langs:
  - csharp
  - vb
  name: AddRelated(IList<String>, AnalyzerMatch, String[])
  nameWithType: TextQueryBuilder.AddRelated(IList<String>, AnalyzerMatch, String[])
  fullName: Microsoft.Health.InvertedIndex.TextQueryBuilder.AddRelated(System.Collections.Generic.IList<System.String>, Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.String[])
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/TextQueryBuilder.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: AddRelated
    path: ../Microsoft.Health.Utility/search/InvertedIndex/TextQueryBuilder.cs
    startLine: 388
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: protected override void AddRelated(IList<string> words, AnalyzerMatch segment, string[] relatedSet)
    content.vb: Protected Overrides Sub AddRelated(words As IList(Of String), segment As AnalyzerMatch, relatedSet As String())
    parameters:
    - id: words
      type: System.Collections.Generic.IList{System.String}
      description: ''
    - id: segment
      type: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
      description: ''
    - id: relatedSet
      type: System.String[]
      description: ''
  overridden: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddRelated(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String[])
  overload: Microsoft.Health.InvertedIndex.TextQueryBuilder.AddRelated*
  nameWithType.vb: TextQueryBuilder.AddRelated(IList(Of String), AnalyzerMatch, String())
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: Microsoft.Health.InvertedIndex.TextQueryBuilder.AddRelated(System.Collections.Generic.IList(Of System.String), Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.String())
  name.vb: AddRelated(IList(Of String), AnalyzerMatch, String())
references:
- uid: Microsoft.Health.InvertedIndex
  commentId: N:Microsoft.Health.InvertedIndex
  isExternal: false
  name: Microsoft.Health.InvertedIndex
  nameWithType: Microsoft.Health.InvertedIndex
  fullName: Microsoft.Health.InvertedIndex
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  commentId: T:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  parent: Microsoft.Health.PhraseAnalyzer
  isExternal: false
  name: PhraseNormalizer
  nameWithType: PhraseNormalizer
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.BlockType
  commentId: F:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.BlockType
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: false
  name: BlockType
  nameWithType: PhraseNormalizer.BlockType
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.BlockType
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.RemoveType
  commentId: F:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.RemoveType
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: false
  name: RemoveType
  nameWithType: PhraseNormalizer.RemoveType
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.RemoveType
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.ReplaceType
  commentId: F:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.ReplaceType
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: false
  name: ReplaceType
  nameWithType: PhraseNormalizer.ReplaceType
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.ReplaceType
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.SynonymType
  commentId: F:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.SynonymType
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: false
  name: SynonymType
  nameWithType: PhraseNormalizer.SynonymType
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.SynonymType
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.RelatedType
  commentId: F:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.RelatedType
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: false
  name: RelatedType
  nameWithType: PhraseNormalizer.RelatedType
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.RelatedType
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.SpellType
  commentId: F:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.SpellType
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: false
  name: SpellType
  nameWithType: PhraseNormalizer.SpellType
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.SpellType
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.StemmerType
  commentId: F:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.StemmerType
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: false
  name: StemmerType
  nameWithType: PhraseNormalizer.StemmerType
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.StemmerType
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.PhoneticType
  commentId: F:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.PhoneticType
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: false
  name: PhoneticType
  nameWithType: PhraseNormalizer.PhoneticType
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.PhoneticType
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.SubjectType
  commentId: F:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.SubjectType
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: false
  name: SubjectType
  nameWithType: PhraseNormalizer.SubjectType
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.SubjectType
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.IndicatorType
  commentId: F:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.IndicatorType
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: false
  name: IndicatorType
  nameWithType: PhraseNormalizer.IndicatorType
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.IndicatorType
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.ConceptType
  commentId: F:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.ConceptType
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: false
  name: ConceptType
  nameWithType: PhraseNormalizer.ConceptType
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.ConceptType
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.Analyzer
  commentId: P:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.Analyzer
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: false
  name: Analyzer
  nameWithType: PhraseNormalizer.Analyzer
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.Analyzer
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.Build(System.Collections.Generic.IList{System.String})
  commentId: M:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.Build(System.Collections.Generic.IList{System.String})
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: true
  name: Build(IList<String>)
  nameWithType: PhraseNormalizer.Build(IList<String>)
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.Build(System.Collections.Generic.IList<System.String>)
  nameWithType.vb: PhraseNormalizer.Build(IList(Of String))
  fullName.vb: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.Build(System.Collections.Generic.IList(Of System.String))
  name.vb: Build(IList(Of String))
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.Build(System.Collections.Generic.IList{System.String})
    name: Build
    nameWithType: PhraseNormalizer.Build
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.Build
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.Build(System.Collections.Generic.IList{System.String})
    name: Build
    nameWithType: PhraseNormalizer.Build
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.Build
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.GetBuilder
  commentId: M:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.GetBuilder
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: false
  name: GetBuilder()
  nameWithType: PhraseNormalizer.GetBuilder()
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.GetBuilder()
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.GetBuilder
    name: GetBuilder
    nameWithType: PhraseNormalizer.GetBuilder
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.GetBuilder
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.GetBuilder
    name: GetBuilder
    nameWithType: PhraseNormalizer.GetBuilder
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.GetBuilder
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.BuildPhrase(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  commentId: M:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.BuildPhrase(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: true
  name: BuildPhrase(IList<String>, AnalyzerMatch)
  nameWithType: PhraseNormalizer.BuildPhrase(IList<String>, AnalyzerMatch)
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.BuildPhrase(System.Collections.Generic.IList<System.String>, Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  nameWithType.vb: PhraseNormalizer.BuildPhrase(IList(Of String), AnalyzerMatch)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.BuildPhrase(System.Collections.Generic.IList(Of System.String), Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  name.vb: BuildPhrase(IList(Of String), AnalyzerMatch)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.BuildPhrase(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
    name: BuildPhrase
    nameWithType: PhraseNormalizer.BuildPhrase
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.BuildPhrase
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.BuildPhrase(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
    name: BuildPhrase
    nameWithType: PhraseNormalizer.BuildPhrase
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.BuildPhrase
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddWords(System.Collections.Generic.IList{System.String},System.Int32,System.Int32)
  commentId: M:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddWords(System.Collections.Generic.IList{System.String},System.Int32,System.Int32)
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: true
  name: AddWords(IList<String>, Int32, Int32)
  nameWithType: PhraseNormalizer.AddWords(IList<String>, Int32, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddWords(System.Collections.Generic.IList<System.String>, System.Int32, System.Int32)
  nameWithType.vb: PhraseNormalizer.AddWords(IList(Of String), Int32, Int32)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddWords(System.Collections.Generic.IList(Of System.String), System.Int32, System.Int32)
  name.vb: AddWords(IList(Of String), Int32, Int32)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddWords(System.Collections.Generic.IList{System.String},System.Int32,System.Int32)
    name: AddWords
    nameWithType: PhraseNormalizer.AddWords
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddWords
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddWords(System.Collections.Generic.IList{System.String},System.Int32,System.Int32)
    name: AddWords
    nameWithType: PhraseNormalizer.AddWords
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddWords
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSegment(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  commentId: M:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSegment(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: true
  name: AddSegment(IList<String>, AnalyzerMatch)
  nameWithType: PhraseNormalizer.AddSegment(IList<String>, AnalyzerMatch)
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSegment(System.Collections.Generic.IList<System.String>, Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  nameWithType.vb: PhraseNormalizer.AddSegment(IList(Of String), AnalyzerMatch)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSegment(System.Collections.Generic.IList(Of System.String), Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  name.vb: AddSegment(IList(Of String), AnalyzerMatch)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSegment(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
    name: AddSegment
    nameWithType: PhraseNormalizer.AddSegment
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSegment
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSegment(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
    name: AddSegment
    nameWithType: PhraseNormalizer.AddSegment
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSegment
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSubject(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  commentId: M:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSubject(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: true
  name: AddSubject(IList<String>, AnalyzerMatch)
  nameWithType: PhraseNormalizer.AddSubject(IList<String>, AnalyzerMatch)
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSubject(System.Collections.Generic.IList<System.String>, Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  nameWithType.vb: PhraseNormalizer.AddSubject(IList(Of String), AnalyzerMatch)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSubject(System.Collections.Generic.IList(Of System.String), Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  name.vb: AddSubject(IList(Of String), AnalyzerMatch)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSubject(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
    name: AddSubject
    nameWithType: PhraseNormalizer.AddSubject
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSubject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSubject(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
    name: AddSubject
    nameWithType: PhraseNormalizer.AddSubject
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSubject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddIndicator(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  commentId: M:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddIndicator(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: true
  name: AddIndicator(IList<String>, AnalyzerMatch)
  nameWithType: PhraseNormalizer.AddIndicator(IList<String>, AnalyzerMatch)
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddIndicator(System.Collections.Generic.IList<System.String>, Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  nameWithType.vb: PhraseNormalizer.AddIndicator(IList(Of String), AnalyzerMatch)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddIndicator(System.Collections.Generic.IList(Of System.String), Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  name.vb: AddIndicator(IList(Of String), AnalyzerMatch)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddIndicator(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
    name: AddIndicator
    nameWithType: PhraseNormalizer.AddIndicator
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddIndicator
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddIndicator(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
    name: AddIndicator
    nameWithType: PhraseNormalizer.AddIndicator
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddIndicator
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddConcept(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String)
  commentId: M:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddConcept(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String)
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: true
  name: AddConcept(IList<String>, AnalyzerMatch, String)
  nameWithType: PhraseNormalizer.AddConcept(IList<String>, AnalyzerMatch, String)
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddConcept(System.Collections.Generic.IList<System.String>, Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.String)
  nameWithType.vb: PhraseNormalizer.AddConcept(IList(Of String), AnalyzerMatch, String)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddConcept(System.Collections.Generic.IList(Of System.String), Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.String)
  name.vb: AddConcept(IList(Of String), AnalyzerMatch, String)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddConcept(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String)
    name: AddConcept
    nameWithType: PhraseNormalizer.AddConcept
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddConcept
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddConcept(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String)
    name: AddConcept
    nameWithType: PhraseNormalizer.AddConcept
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddConcept
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  name: SetProperty(String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object())
  name.vb: SetProperty(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  name: InvokeMethod(String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object())
  name.vb: InvokeMethod(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  parent: Microsoft.Health.Utility.InvariantString
  definition: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  name: ToStringInvariant()
  nameWithType: InvariantString.ToStringInvariant()
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant()
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.TextQueryBuilder.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  parent: Microsoft.Health.Utility.TypeHelper
  definition: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  name: ValueOrDbNull<TextQueryBuilder>()
  nameWithType: TypeHelper.ValueOrDbNull<TextQueryBuilder>()
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.InvertedIndex.TextQueryBuilder>()
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of TextQueryBuilder)()
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.InvertedIndex.TextQueryBuilder)()
  name.vb: ValueOrDbNull(Of TextQueryBuilder)()
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull<TextQueryBuilder>
    nameWithType: TypeHelper.ValueOrDbNull<TextQueryBuilder>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.InvertedIndex.TextQueryBuilder>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull(Of TextQueryBuilder)
    nameWithType: TypeHelper.ValueOrDbNull(Of TextQueryBuilder)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.InvertedIndex.TextQueryBuilder)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  parent: Microsoft.Health.Utility.WCXmlHelper
  definition: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  name: ToXml()
  nameWithType: WCXmlHelper.ToXml()
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml()
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.PhraseAnalyzer
  commentId: N:Microsoft.Health.PhraseAnalyzer
  isExternal: false
  name: Microsoft.Health.PhraseAnalyzer
  nameWithType: Microsoft.Health.PhraseAnalyzer
  fullName: Microsoft.Health.PhraseAnalyzer
- uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  isExternal: true
  name: SetProperty(Object, String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object())
  name.vb: SetProperty(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions
  commentId: T:Microsoft.Health.Utility.IDispatchExtensions
  parent: Microsoft.Health.Utility
  isExternal: false
  name: IDispatchExtensions
  nameWithType: IDispatchExtensions
  fullName: Microsoft.Health.Utility.IDispatchExtensions
- uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  isExternal: true
  name: InvokeMethod(Object, String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object())
  name.vb: InvokeMethod(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  isExternal: true
  name: ToStringInvariant(Object)
  nameWithType: InvariantString.ToStringInvariant(Object)
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString
  commentId: T:Microsoft.Health.Utility.InvariantString
  parent: Microsoft.Health.Utility
  isExternal: false
  name: InvariantString
  nameWithType: InvariantString
  fullName: Microsoft.Health.Utility.InvariantString
- uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  isExternal: false
  name: ValueOrDbNull<T>(T)
  nameWithType: TypeHelper.ValueOrDbNull<T>(T)
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>(T)
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of T)(T)
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)(T)
  name.vb: ValueOrDbNull(Of T)(T)
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull<T>
    nameWithType: TypeHelper.ValueOrDbNull<T>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull(Of T)
    nameWithType: TypeHelper.ValueOrDbNull(Of T)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.TypeHelper
  commentId: T:Microsoft.Health.Utility.TypeHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: TypeHelper
  nameWithType: TypeHelper
  fullName: Microsoft.Health.Utility.TypeHelper
- uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  isExternal: true
  name: ToXml(Object)
  nameWithType: WCXmlHelper.ToXml(Object)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.WCXmlHelper
  commentId: T:Microsoft.Health.Utility.WCXmlHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: WCXmlHelper
  nameWithType: WCXmlHelper
  fullName: Microsoft.Health.Utility.WCXmlHelper
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: Microsoft.Health.InvertedIndex.TermBoosts
  commentId: T:Microsoft.Health.InvertedIndex.TermBoosts
  parent: Microsoft.Health.InvertedIndex
  isExternal: false
  name: TermBoosts
  nameWithType: TermBoosts
  fullName: Microsoft.Health.InvertedIndex.TermBoosts
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}
  commentId: T:Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}
  parent: Microsoft.Health
  definition: Microsoft.Health.StructList`1
  name: StructList<RecordIDEnumerator>
  nameWithType: StructList<RecordIDEnumerator>
  fullName: Microsoft.Health.StructList<Microsoft.Health.InvertedIndex.RecordIDEnumerator>
  nameWithType.vb: StructList(Of RecordIDEnumerator)
  fullName.vb: Microsoft.Health.StructList(Of Microsoft.Health.InvertedIndex.RecordIDEnumerator)
  name.vb: StructList(Of RecordIDEnumerator)
  spec.csharp:
  - uid: Microsoft.Health.StructList`1
    name: StructList
    nameWithType: StructList
    fullName: Microsoft.Health.StructList
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.StructList`1
    name: StructList
    nameWithType: StructList
    fullName: Microsoft.Health.StructList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.StructList`1
  commentId: T:Microsoft.Health.StructList`1
  isExternal: false
  name: StructList<T>
  nameWithType: StructList<T>
  fullName: Microsoft.Health.StructList<T>
  nameWithType.vb: StructList(Of T)
  fullName.vb: Microsoft.Health.StructList(Of T)
  name.vb: StructList(Of T)
  spec.csharp:
  - uid: Microsoft.Health.StructList`1
    name: StructList
    nameWithType: StructList
    fullName: Microsoft.Health.StructList
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.StructList`1
    name: StructList
    nameWithType: StructList
    fullName: Microsoft.Health.StructList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: Microsoft.Health.InvertedIndex.TextQueryBuilder.#ctor*
  commentId: Overload:Microsoft.Health.InvertedIndex.TextQueryBuilder.#ctor
  isExternal: false
  name: TextQueryBuilder
  nameWithType: TextQueryBuilder.TextQueryBuilder
  fullName: Microsoft.Health.InvertedIndex.TextQueryBuilder.TextQueryBuilder
- uid: Microsoft.Health.InvertedIndex.TextIndex
  commentId: T:Microsoft.Health.InvertedIndex.TextIndex
  parent: Microsoft.Health.InvertedIndex
  isExternal: false
  name: TextIndex
  nameWithType: TextIndex
  fullName: Microsoft.Health.InvertedIndex.TextIndex
- uid: Microsoft.Health.PhraseAnalyzer.Analyzer
  commentId: T:Microsoft.Health.PhraseAnalyzer.Analyzer
  parent: Microsoft.Health.PhraseAnalyzer
  isExternal: false
  name: Analyzer
  nameWithType: Analyzer
  fullName: Microsoft.Health.PhraseAnalyzer.Analyzer
- uid: Microsoft.Health.InvertedIndex.TextQueryBuilder.MaxTerms*
  commentId: Overload:Microsoft.Health.InvertedIndex.TextQueryBuilder.MaxTerms
  isExternal: false
  name: MaxTerms
  nameWithType: TextQueryBuilder.MaxTerms
  fullName: Microsoft.Health.InvertedIndex.TextQueryBuilder.MaxTerms
- uid: Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildQuery*
  commentId: Overload:Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildQuery
  isExternal: false
  name: BuildQuery
  nameWithType: TextQueryBuilder.BuildQuery
  fullName: Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildQuery
- uid: System.Collections.Generic.IList{System.String}
  commentId: T:System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  nameWithType.vb: IList(Of String)
  fullName.vb: System.Collections.Generic.IList(Of System.String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  commentId: T:Microsoft.Health.InvertedIndex.RecordIDEnumerator
  parent: Microsoft.Health.InvertedIndex
  isExternal: false
  name: RecordIDEnumerator
  nameWithType: RecordIDEnumerator
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildOrQuery*
  commentId: Overload:Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildOrQuery
  isExternal: false
  name: BuildOrQuery
  nameWithType: TextQueryBuilder.BuildOrQuery
  fullName: Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildOrQuery
- uid: Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildAndQuery*
  commentId: Overload:Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildAndQuery
  isExternal: false
  name: BuildAndQuery
  nameWithType: TextQueryBuilder.BuildAndQuery
  fullName: Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildAndQuery
- uid: Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildExactQuery*
  commentId: Overload:Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildExactQuery
  isExternal: false
  name: BuildExactQuery
  nameWithType: TextQueryBuilder.BuildExactQuery
  fullName: Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildExactQuery
- uid: Microsoft.Health.InvertedIndex.ICorpusStatistics
  commentId: T:Microsoft.Health.InvertedIndex.ICorpusStatistics
  parent: Microsoft.Health.InvertedIndex
  isExternal: false
  name: ICorpusStatistics
  nameWithType: ICorpusStatistics
  fullName: Microsoft.Health.InvertedIndex.ICorpusStatistics
- uid: Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildQueryTree*
  commentId: Overload:Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildQueryTree
  isExternal: false
  name: BuildQueryTree
  nameWithType: TextQueryBuilder.BuildQueryTree
  fullName: Microsoft.Health.InvertedIndex.TextQueryBuilder.BuildQueryTree
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Health.InvertedIndex.TextQueryBuilder.PushTerm*
  commentId: Overload:Microsoft.Health.InvertedIndex.TextQueryBuilder.PushTerm
  isExternal: false
  name: PushTerm
  nameWithType: TextQueryBuilder.PushTerm
  fullName: Microsoft.Health.InvertedIndex.TextQueryBuilder.PushTerm
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddString(System.String)
  commentId: M:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddString(System.String)
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: true
  name: AddString(String)
  nameWithType: PhraseNormalizer.AddString(String)
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddString(System.String)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddString(System.String)
    name: AddString
    nameWithType: PhraseNormalizer.AddString
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddString(System.String)
    name: AddString
    nameWithType: PhraseNormalizer.AddString
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.TextQueryBuilder.AddString*
  commentId: Overload:Microsoft.Health.InvertedIndex.TextQueryBuilder.AddString
  isExternal: false
  name: AddString
  nameWithType: TextQueryBuilder.AddString
  fullName: Microsoft.Health.InvertedIndex.TextQueryBuilder.AddString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSynonyms(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String[])
  commentId: M:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSynonyms(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String[])
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: true
  name: AddSynonyms(IList<String>, AnalyzerMatch, String[])
  nameWithType: PhraseNormalizer.AddSynonyms(IList<String>, AnalyzerMatch, String[])
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSynonyms(System.Collections.Generic.IList<System.String>, Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.String[])
  nameWithType.vb: PhraseNormalizer.AddSynonyms(IList(Of String), AnalyzerMatch, String())
  fullName.vb: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSynonyms(System.Collections.Generic.IList(Of System.String), Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.String())
  name.vb: AddSynonyms(IList(Of String), AnalyzerMatch, String())
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSynonyms(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String[])
    name: AddSynonyms
    nameWithType: PhraseNormalizer.AddSynonyms
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSynonyms
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSynonyms(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String[])
    name: AddSynonyms
    nameWithType: PhraseNormalizer.AddSynonyms
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSynonyms
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.TextQueryBuilder.AddSynonyms*
  commentId: Overload:Microsoft.Health.InvertedIndex.TextQueryBuilder.AddSynonyms
  isExternal: false
  name: AddSynonyms
  nameWithType: TextQueryBuilder.AddSynonyms
  fullName: Microsoft.Health.InvertedIndex.TextQueryBuilder.AddSynonyms
- uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  commentId: T:Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  parent: Microsoft.Health.PhraseAnalyzer
  isExternal: false
  name: AnalyzerMatch
  nameWithType: AnalyzerMatch
  fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddStem(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String)
  commentId: M:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddStem(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String)
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: true
  name: AddStem(IList<String>, AnalyzerMatch, String)
  nameWithType: PhraseNormalizer.AddStem(IList<String>, AnalyzerMatch, String)
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddStem(System.Collections.Generic.IList<System.String>, Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.String)
  nameWithType.vb: PhraseNormalizer.AddStem(IList(Of String), AnalyzerMatch, String)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddStem(System.Collections.Generic.IList(Of System.String), Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.String)
  name.vb: AddStem(IList(Of String), AnalyzerMatch, String)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddStem(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String)
    name: AddStem
    nameWithType: PhraseNormalizer.AddStem
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddStem
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddStem(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String)
    name: AddStem
    nameWithType: PhraseNormalizer.AddStem
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddStem
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.TextQueryBuilder.AddStem*
  commentId: Overload:Microsoft.Health.InvertedIndex.TextQueryBuilder.AddStem
  isExternal: false
  name: AddStem
  nameWithType: TextQueryBuilder.AddStem
  fullName: Microsoft.Health.InvertedIndex.TextQueryBuilder.AddStem
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSpelling(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String)
  commentId: M:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSpelling(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String)
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: true
  name: AddSpelling(IList<String>, AnalyzerMatch, String)
  nameWithType: PhraseNormalizer.AddSpelling(IList<String>, AnalyzerMatch, String)
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSpelling(System.Collections.Generic.IList<System.String>, Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.String)
  nameWithType.vb: PhraseNormalizer.AddSpelling(IList(Of String), AnalyzerMatch, String)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSpelling(System.Collections.Generic.IList(Of System.String), Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.String)
  name.vb: AddSpelling(IList(Of String), AnalyzerMatch, String)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSpelling(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String)
    name: AddSpelling
    nameWithType: PhraseNormalizer.AddSpelling
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSpelling
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSpelling(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String)
    name: AddSpelling
    nameWithType: PhraseNormalizer.AddSpelling
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddSpelling
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.TextQueryBuilder.AddSpelling*
  commentId: Overload:Microsoft.Health.InvertedIndex.TextQueryBuilder.AddSpelling
  isExternal: false
  name: AddSpelling
  nameWithType: TextQueryBuilder.AddSpelling
  fullName: Microsoft.Health.InvertedIndex.TextQueryBuilder.AddSpelling
- uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddRelated(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String[])
  commentId: M:Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddRelated(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String[])
  parent: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer
  isExternal: true
  name: AddRelated(IList<String>, AnalyzerMatch, String[])
  nameWithType: PhraseNormalizer.AddRelated(IList<String>, AnalyzerMatch, String[])
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddRelated(System.Collections.Generic.IList<System.String>, Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.String[])
  nameWithType.vb: PhraseNormalizer.AddRelated(IList(Of String), AnalyzerMatch, String())
  fullName.vb: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddRelated(System.Collections.Generic.IList(Of System.String), Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.String())
  name.vb: AddRelated(IList(Of String), AnalyzerMatch, String())
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddRelated(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String[])
    name: AddRelated
    nameWithType: PhraseNormalizer.AddRelated
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddRelated
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddRelated(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.String[])
    name: AddRelated
    nameWithType: PhraseNormalizer.AddRelated
    fullName: Microsoft.Health.PhraseAnalyzer.PhraseNormalizer.AddRelated
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.TextQueryBuilder.AddRelated*
  commentId: Overload:Microsoft.Health.InvertedIndex.TextQueryBuilder.AddRelated
  isExternal: false
  name: AddRelated
  nameWithType: TextQueryBuilder.AddRelated
  fullName: Microsoft.Health.InvertedIndex.TextQueryBuilder.AddRelated
