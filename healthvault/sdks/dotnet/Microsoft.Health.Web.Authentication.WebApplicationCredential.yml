### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.Web.Authentication.WebApplicationCredential
  commentId: T:Microsoft.Health.Web.Authentication.WebApplicationCredential
  id: WebApplicationCredential
  parent: Microsoft.Health.Web.Authentication
  children:
  - Microsoft.Health.Web.Authentication.WebApplicationCredential.#ctor
  - Microsoft.Health.Web.Authentication.WebApplicationCredential.#ctor(System.Guid)
  - Microsoft.Health.Web.Authentication.WebApplicationCredential.#ctor(System.Guid,System.Security.Cryptography.X509Certificates.StoreLocation,System.String)
  - Microsoft.Health.Web.Authentication.WebApplicationCredential.#ctor(System.Guid,System.Security.Cryptography.X509Certificates.X509Certificate2)
  - Microsoft.Health.Web.Authentication.WebApplicationCredential.#ctor(System.Guid,System.String)
  - Microsoft.Health.Web.Authentication.WebApplicationCredential.#ctor(System.Guid,System.String,System.Security.Cryptography.X509Certificates.X509Certificate2)
  - Microsoft.Health.Web.Authentication.WebApplicationCredential.ApplicationId
  - Microsoft.Health.Web.Authentication.WebApplicationCredential.AuthenticateWebApplicationData(System.Byte[],System.Int32,System.Int32)
  - Microsoft.Health.Web.Authentication.WebApplicationCredential.SubCredential
  - Microsoft.Health.Web.Authentication.WebApplicationCredential.WriteInfoXml(System.Xml.XmlWriter)
  langs:
  - csharp
  - vb
  name: WebApplicationCredential
  nameWithType: WebApplicationCredential
  fullName: Microsoft.Health.Web.Authentication.WebApplicationCredential
  type: Class
  source:
    remote:
      path: Microsoft.Health/Authentication/WebApplicationCredential.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: WebApplicationCredential
    path: ../Microsoft.Health/Authentication/WebApplicationCredential.cs
    startLine: 44
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Web.Authentication
  summary: "\nEnables web applications to authenticate themselves,\nwith or without the authentication context of a user.\n"
  remarks: "\nWeb applications can authenticate in two modes:\n\nFirst, an application can authenticate itself in the anonymous mode, \nthat is, not in the context of a user. This mode enables application \nservers to communicate with the HealthVault Service as a trusted operation, \nbut not explicitly on behalf of a user.  \n\nSecondly, an application can authenticate itself in the context of a user.\nThis mode enables applications to communicate with the HealthVault\nService both as a trusted operation and in the user context. The\napplication can therefore explicitly perform operations as that user\nor as trusted operations as in the anonymous case.\n\nThe credential proves the application's identity by signing the\nauthentication request with the application's private key.  The user's\ncontext is provided by the <cref name=\"SubCredential\"></cref> property.\n"
  example: []
  syntax:
    content: 'public class WebApplicationCredential : Credential'
    content.vb: >-
      Public Class WebApplicationCredential
          Inherits Credential
  inheritance:
  - System.Object
  - Microsoft.Health.Authentication.Credential
  inheritedMembers:
  - Microsoft.Health.Authentication.Credential.SharedSecret
  - Microsoft.Health.Authentication.Credential.GetAuthenticationResult(System.Guid)
  - Microsoft.Health.Authentication.Credential.CreateAuthenticatedSessionToken(Microsoft.Health.HealthServiceConnection,System.Guid)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - Microsoft.Health.Web.Authentication.WebApplicationCredential.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  - System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.Web.Authentication.WebApplicationCredential.ApplicationId
  commentId: P:Microsoft.Health.Web.Authentication.WebApplicationCredential.ApplicationId
  id: ApplicationId
  parent: Microsoft.Health.Web.Authentication.WebApplicationCredential
  langs:
  - csharp
  - vb
  name: ApplicationId
  nameWithType: WebApplicationCredential.ApplicationId
  fullName: Microsoft.Health.Web.Authentication.WebApplicationCredential.ApplicationId
  type: Property
  source:
    remote:
      path: Microsoft.Health/Authentication/WebApplicationCredential.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ApplicationId
    path: ../Microsoft.Health/Authentication/WebApplicationCredential.cs
    startLine: 83
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Web.Authentication
  summary: "\nGets or sets the application identifier of the credential.\n"
  remarks: "\nThis property is set only internally.\n"
  example: []
  syntax:
    content: public Guid ApplicationId { get; }
    content.vb: Public ReadOnly Property ApplicationId As Guid
    parameters: []
    return:
      type: System.Guid
      description: "\nA GUID representing the application identifier.\n"
  overload: Microsoft.Health.Web.Authentication.WebApplicationCredential.ApplicationId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.Web.Authentication.WebApplicationCredential.SubCredential
  commentId: P:Microsoft.Health.Web.Authentication.WebApplicationCredential.SubCredential
  id: SubCredential
  parent: Microsoft.Health.Web.Authentication.WebApplicationCredential
  langs:
  - csharp
  - vb
  name: SubCredential
  nameWithType: WebApplicationCredential.SubCredential
  fullName: Microsoft.Health.Web.Authentication.WebApplicationCredential.SubCredential
  type: Property
  source:
    remote:
      path: Microsoft.Health/Authentication/WebApplicationCredential.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SubCredential
    path: ../Microsoft.Health/Authentication/WebApplicationCredential.cs
    startLine: 133
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Web.Authentication
  summary: "\nGets or sets the sub-credential.\n"
  remarks: "\nThis is the credential token retrieved from the HealthVault \nplatform.  By specifying a sub-credential, the web application\ncredential can operate in the context of an authenticated user.\n"
  example: []
  syntax:
    content: public string SubCredential { get; set; }
    content.vb: Public Property SubCredential As String
    parameters: []
    return:
      type: System.String
      description: "\nA string representing the sub-credential token.\n"
  overload: Microsoft.Health.Web.Authentication.WebApplicationCredential.SubCredential*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Web.Authentication.WebApplicationCredential.#ctor
  commentId: M:Microsoft.Health.Web.Authentication.WebApplicationCredential.#ctor
  id: '#ctor'
  parent: Microsoft.Health.Web.Authentication.WebApplicationCredential
  langs:
  - csharp
  - vb
  name: WebApplicationCredential()
  nameWithType: WebApplicationCredential.WebApplicationCredential()
  fullName: Microsoft.Health.Web.Authentication.WebApplicationCredential.WebApplicationCredential()
  type: Constructor
  source:
    remote:
      path: Microsoft.Health/Authentication/WebApplicationCredential.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health/Authentication/WebApplicationCredential.cs
    startLine: 162
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Web.Authentication
  summary: "\nCreates a new instance of the <xref href=\"Microsoft.Health.Web.Authentication.WebApplicationCredential\" data-throw-if-not-resolved=\"false\"></xref> \nclass with default values.\n"
  remarks: "\nThis constructor is used only for Activator-based \ndeserialization of the cookie XML. This constructor does not call \nInitialize() here because it is expected to be initialized from\na call to <cref name=\"ReadCookieXml\"></cref>.\n"
  example: []
  syntax:
    content: public WebApplicationCredential()
    content.vb: Public Sub New
  overload: Microsoft.Health.Web.Authentication.WebApplicationCredential.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Web.Authentication.WebApplicationCredential.#ctor(System.Guid,System.Security.Cryptography.X509Certificates.X509Certificate2)
  commentId: M:Microsoft.Health.Web.Authentication.WebApplicationCredential.#ctor(System.Guid,System.Security.Cryptography.X509Certificates.X509Certificate2)
  id: '#ctor(System.Guid,System.Security.Cryptography.X509Certificates.X509Certificate2)'
  parent: Microsoft.Health.Web.Authentication.WebApplicationCredential
  langs:
  - csharp
  - vb
  name: WebApplicationCredential(Guid, X509Certificate2)
  nameWithType: WebApplicationCredential.WebApplicationCredential(Guid, X509Certificate2)
  fullName: Microsoft.Health.Web.Authentication.WebApplicationCredential.WebApplicationCredential(System.Guid, System.Security.Cryptography.X509Certificates.X509Certificate2)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health/Authentication/WebApplicationCredential.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health/Authentication/WebApplicationCredential.cs
    startLine: 179
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Web.Authentication
  summary: "\nCreates a new instance of the <xref href=\"Microsoft.Health.Web.Authentication.WebApplicationCredential\" data-throw-if-not-resolved=\"false\"></xref> \nclass with the specified application certificate.\n"
  example: []
  syntax:
    content: public WebApplicationCredential(Guid applicationId, X509Certificate2 certificate)
    content.vb: Public Sub New(applicationId As Guid, certificate As X509Certificate2)
    parameters:
    - id: applicationId
      type: System.Guid
      description: "\nThe unique application identifier.\n"
    - id: certificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate2
      description: "\nThe application certificate containing the application's private key.\n"
  overload: Microsoft.Health.Web.Authentication.WebApplicationCredential.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Web.Authentication.WebApplicationCredential.#ctor(System.Guid)
  commentId: M:Microsoft.Health.Web.Authentication.WebApplicationCredential.#ctor(System.Guid)
  id: '#ctor(System.Guid)'
  parent: Microsoft.Health.Web.Authentication.WebApplicationCredential
  langs:
  - csharp
  - vb
  name: WebApplicationCredential(Guid)
  nameWithType: WebApplicationCredential.WebApplicationCredential(Guid)
  fullName: Microsoft.Health.Web.Authentication.WebApplicationCredential.WebApplicationCredential(System.Guid)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health/Authentication/WebApplicationCredential.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health/Authentication/WebApplicationCredential.cs
    startLine: 204
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Web.Authentication
  summary: "\nCreates a new instance of the <xref href=\"Microsoft.Health.Web.Authentication.WebApplicationCredential\" data-throw-if-not-resolved=\"false\"></xref> \nclass with the default values and in the anonymous context.\n"
  example: []
  syntax:
    content: public WebApplicationCredential(Guid applicationId)
    content.vb: Public Sub New(applicationId As Guid)
    parameters:
    - id: applicationId
      type: System.Guid
      description: ''
  overload: Microsoft.Health.Web.Authentication.WebApplicationCredential.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">applicationId</span> parameter is empty.\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\nThe required application-specific certificate is not found.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Web.Authentication.WebApplicationCredential.#ctor(System.Guid,System.String)
  commentId: M:Microsoft.Health.Web.Authentication.WebApplicationCredential.#ctor(System.Guid,System.String)
  id: '#ctor(System.Guid,System.String)'
  parent: Microsoft.Health.Web.Authentication.WebApplicationCredential
  langs:
  - csharp
  - vb
  name: WebApplicationCredential(Guid, String)
  nameWithType: WebApplicationCredential.WebApplicationCredential(Guid, String)
  fullName: Microsoft.Health.Web.Authentication.WebApplicationCredential.WebApplicationCredential(System.Guid, System.String)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health/Authentication/WebApplicationCredential.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health/Authentication/WebApplicationCredential.cs
    startLine: 242
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Web.Authentication
  summary: "\nCreates a new instance of the <xref href=\"Microsoft.Health.Web.Authentication.WebApplicationCredential\" data-throw-if-not-resolved=\"false\"></xref> \nclass using the specified application identifier and sub-credential.\n"
  remarks: "\nIn order to enable a web application to authenticate with the\nHealthVault Service, the application must first create a \n<xref href=\"Microsoft.Health.Web.Authentication.WebApplicationCredential\" data-throw-if-not-resolved=\"false\"></xref>. The credential consists of \ntwo explicit parameters, and implicitly utilizes the web \napplication's private key to sign the credential XML. The \nsub-credential is the token received from the browser, and it \nrepresents the approval for a user to run this application for the \nlifetime of the token.\n"
  example: []
  syntax:
    content: public WebApplicationCredential(Guid applicationId, string subCredential)
    content.vb: Public Sub New(applicationId As Guid, subCredential As String)
    parameters:
    - id: applicationId
      type: System.Guid
      description: ''
    - id: subCredential
      type: System.String
      description: ''
  overload: Microsoft.Health.Web.Authentication.WebApplicationCredential.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">applicationId</span> parameter is empty.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <span class=\"paramref\">subCredential</span> parameter is <strong>null</strong>.\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\nThe required application-specific certificate is not found.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Web.Authentication.WebApplicationCredential.#ctor(System.Guid,System.String,System.Security.Cryptography.X509Certificates.X509Certificate2)
  commentId: M:Microsoft.Health.Web.Authentication.WebApplicationCredential.#ctor(System.Guid,System.String,System.Security.Cryptography.X509Certificates.X509Certificate2)
  id: '#ctor(System.Guid,System.String,System.Security.Cryptography.X509Certificates.X509Certificate2)'
  parent: Microsoft.Health.Web.Authentication.WebApplicationCredential
  langs:
  - csharp
  - vb
  name: WebApplicationCredential(Guid, String, X509Certificate2)
  nameWithType: WebApplicationCredential.WebApplicationCredential(Guid, String, X509Certificate2)
  fullName: Microsoft.Health.Web.Authentication.WebApplicationCredential.WebApplicationCredential(System.Guid, System.String, System.Security.Cryptography.X509Certificates.X509Certificate2)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health/Authentication/WebApplicationCredential.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health/Authentication/WebApplicationCredential.cs
    startLine: 281
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Web.Authentication
  summary: "\nCreates a new instance of the <xref href=\"Microsoft.Health.Web.Authentication.WebApplicationCredential\" data-throw-if-not-resolved=\"false\"></xref> \nclass using the specified application identifier and sub-credential.\n"
  remarks: "\nIn order to enable a web application to authenticate with the\nHealthVault Service, the application must first create a \n<xref href=\"Microsoft.Health.Web.Authentication.WebApplicationCredential\" data-throw-if-not-resolved=\"false\"></xref>. The credential consists of \ntwo explicit parameters, and implicitly utilizes the web \napplication's private key to sign the credential XML. The \nsub-credential is the token received from the browser, and it \nrepresents the approval for a user to run this application for the \nlifetime of the token.\n"
  example: []
  syntax:
    content: public WebApplicationCredential(Guid applicationId, string subCredential, X509Certificate2 certificate)
    content.vb: Public Sub New(applicationId As Guid, subCredential As String, certificate As X509Certificate2)
    parameters:
    - id: applicationId
      type: System.Guid
      description: ''
    - id: subCredential
      type: System.String
      description: ''
    - id: certificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate2
      description: ''
  overload: Microsoft.Health.Web.Authentication.WebApplicationCredential.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">applicationId</span> parameter is empty.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <span class=\"paramref\">subCredential</span> parameter is <strong>null</strong>.\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\nThe required application-specific certificate is not found.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Web.Authentication.WebApplicationCredential.#ctor(System.Guid,System.Security.Cryptography.X509Certificates.StoreLocation,System.String)
  commentId: M:Microsoft.Health.Web.Authentication.WebApplicationCredential.#ctor(System.Guid,System.Security.Cryptography.X509Certificates.StoreLocation,System.String)
  id: '#ctor(System.Guid,System.Security.Cryptography.X509Certificates.StoreLocation,System.String)'
  parent: Microsoft.Health.Web.Authentication.WebApplicationCredential
  langs:
  - csharp
  - vb
  name: WebApplicationCredential(Guid, StoreLocation, String)
  nameWithType: WebApplicationCredential.WebApplicationCredential(Guid, StoreLocation, String)
  fullName: Microsoft.Health.Web.Authentication.WebApplicationCredential.WebApplicationCredential(System.Guid, System.Security.Cryptography.X509Certificates.StoreLocation, System.String)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health/Authentication/WebApplicationCredential.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health/Authentication/WebApplicationCredential.cs
    startLine: 317
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Web.Authentication
  summary: "\nCreates a new instance of the <xref href=\"Microsoft.Health.Web.Authentication.WebApplicationCredential\" data-throw-if-not-resolved=\"false\"></xref> \nclass using the specified parameters\n"
  remarks: "\nIn order to enable a web application to authenticate with the\nHealthVault Service, the application must first create a \n<xref href=\"Microsoft.Health.Web.Authentication.WebApplicationCredential\" data-throw-if-not-resolved=\"false\"></xref>. The credential consists of \nthree explicit parameters. The store location is where the certificate\nis stored. The subject for the certificate is used to lookup\nthe certificate from the store\n"
  example: []
  syntax:
    content: public WebApplicationCredential(Guid applicationId, StoreLocation storeLocation, string certSubject)
    content.vb: Public Sub New(applicationId As Guid, storeLocation As StoreLocation, certSubject As String)
    parameters:
    - id: applicationId
      type: System.Guid
      description: "\nApplication Id.\n"
    - id: storeLocation
      type: System.Security.Cryptography.X509Certificates.StoreLocation
      description: "\nLocation of store where the certificate is stored.\n"
    - id: certSubject
      type: System.String
      description: "\nSubject of the certificate for the application.\n"
  overload: Microsoft.Health.Web.Authentication.WebApplicationCredential.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Web.Authentication.WebApplicationCredential.AuthenticateWebApplicationData(System.Byte[],System.Int32,System.Int32)
  commentId: M:Microsoft.Health.Web.Authentication.WebApplicationCredential.AuthenticateWebApplicationData(System.Byte[],System.Int32,System.Int32)
  id: AuthenticateWebApplicationData(System.Byte[],System.Int32,System.Int32)
  parent: Microsoft.Health.Web.Authentication.WebApplicationCredential
  langs:
  - csharp
  - vb
  name: AuthenticateWebApplicationData(Byte[], Int32, Int32)
  nameWithType: WebApplicationCredential.AuthenticateWebApplicationData(Byte[], Int32, Int32)
  fullName: Microsoft.Health.Web.Authentication.WebApplicationCredential.AuthenticateWebApplicationData(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health/Authentication/WebApplicationCredential.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: AuthenticateWebApplicationData
    path: ../Microsoft.Health/Authentication/WebApplicationCredential.cs
    startLine: 708
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Web.Authentication
  summary: "\nProvides a mechanism for derived classes to override how this class \nauthenticates data.\n"
  remarks: "\nThis method is for internal use only and is subject to change.\n"
  example: []
  syntax:
    content: protected virtual string AuthenticateWebApplicationData(byte[] data, int index, int count)
    content.vb: Protected Overridable Function AuthenticateWebApplicationData(data As Byte(), index As Integer, count As Integer) As String
    parameters:
    - id: data
      type: System.Byte[]
      description: "\nThe data to be authenticated by the credential.\n"
    - id: index
      type: System.Int32
      description: "\nThe starting index into the data.\n"
    - id: count
      type: System.Int32
      description: "\nThe number of bytes from the start index to authenticate.\n"
    return:
      type: System.String
      description: "\nA string representing the data that was authenticated by the credential.\n"
  overload: Microsoft.Health.Web.Authentication.WebApplicationCredential.AuthenticateWebApplicationData*
  nameWithType.vb: WebApplicationCredential.AuthenticateWebApplicationData(Byte(), Int32, Int32)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.Health.Web.Authentication.WebApplicationCredential.AuthenticateWebApplicationData(System.Byte(), System.Int32, System.Int32)
  name.vb: AuthenticateWebApplicationData(Byte(), Int32, Int32)
- uid: Microsoft.Health.Web.Authentication.WebApplicationCredential.WriteInfoXml(System.Xml.XmlWriter)
  commentId: M:Microsoft.Health.Web.Authentication.WebApplicationCredential.WriteInfoXml(System.Xml.XmlWriter)
  id: WriteInfoXml(System.Xml.XmlWriter)
  parent: Microsoft.Health.Web.Authentication.WebApplicationCredential
  langs:
  - csharp
  - vb
  name: WriteInfoXml(XmlWriter)
  nameWithType: WebApplicationCredential.WriteInfoXml(XmlWriter)
  fullName: Microsoft.Health.Web.Authentication.WebApplicationCredential.WriteInfoXml(System.Xml.XmlWriter)
  type: Method
  source:
    remote:
      path: Microsoft.Health/Authentication/WebApplicationCredential.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: WriteInfoXml
    path: ../Microsoft.Health/Authentication/WebApplicationCredential.cs
    startLine: 844
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health.Web.Authentication
  summary: "\nWrites the XML that is used when authenticating with the\nHealthVault Service.\n"
  remarks: "\nThis method is only called internally and is subject to change.\n"
  example: []
  syntax:
    content: public override void WriteInfoXml(XmlWriter writer)
    content.vb: Public Overrides Sub WriteInfoXml(writer As XmlWriter)
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "\nThe XML writer that is written to.\n"
  overridden: Microsoft.Health.Authentication.Credential.WriteInfoXml(System.Xml.XmlWriter)
  overload: Microsoft.Health.Web.Authentication.WebApplicationCredential.WriteInfoXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <span class=\"paramref\">writer</span> parameter is <strong>null</strong>. \n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Microsoft.Health.Web.Authentication
  commentId: N:Microsoft.Health.Web.Authentication
  isExternal: false
  name: Microsoft.Health.Web.Authentication
  nameWithType: Microsoft.Health.Web.Authentication
  fullName: Microsoft.Health.Web.Authentication
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Health.Authentication.Credential
  commentId: T:Microsoft.Health.Authentication.Credential
  parent: Microsoft.Health.Authentication
  isExternal: false
  name: Credential
  nameWithType: Credential
  fullName: Microsoft.Health.Authentication.Credential
- uid: Microsoft.Health.Authentication.Credential.SharedSecret
  commentId: P:Microsoft.Health.Authentication.Credential.SharedSecret
  parent: Microsoft.Health.Authentication.Credential
  isExternal: false
  name: SharedSecret
  nameWithType: Credential.SharedSecret
  fullName: Microsoft.Health.Authentication.Credential.SharedSecret
- uid: Microsoft.Health.Authentication.Credential.GetAuthenticationResult(System.Guid)
  commentId: M:Microsoft.Health.Authentication.Credential.GetAuthenticationResult(System.Guid)
  parent: Microsoft.Health.Authentication.Credential
  isExternal: true
  name: GetAuthenticationResult(Guid)
  nameWithType: Credential.GetAuthenticationResult(Guid)
  fullName: Microsoft.Health.Authentication.Credential.GetAuthenticationResult(System.Guid)
  spec.csharp:
  - uid: Microsoft.Health.Authentication.Credential.GetAuthenticationResult(System.Guid)
    name: GetAuthenticationResult
    nameWithType: Credential.GetAuthenticationResult
    fullName: Microsoft.Health.Authentication.Credential.GetAuthenticationResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Authentication.Credential.GetAuthenticationResult(System.Guid)
    name: GetAuthenticationResult
    nameWithType: Credential.GetAuthenticationResult
    fullName: Microsoft.Health.Authentication.Credential.GetAuthenticationResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Authentication.Credential.CreateAuthenticatedSessionToken(Microsoft.Health.HealthServiceConnection,System.Guid)
  commentId: M:Microsoft.Health.Authentication.Credential.CreateAuthenticatedSessionToken(Microsoft.Health.HealthServiceConnection,System.Guid)
  parent: Microsoft.Health.Authentication.Credential
  isExternal: true
  name: CreateAuthenticatedSessionToken(HealthServiceConnection, Guid)
  nameWithType: Credential.CreateAuthenticatedSessionToken(HealthServiceConnection, Guid)
  fullName: Microsoft.Health.Authentication.Credential.CreateAuthenticatedSessionToken(Microsoft.Health.HealthServiceConnection, System.Guid)
  spec.csharp:
  - uid: Microsoft.Health.Authentication.Credential.CreateAuthenticatedSessionToken(Microsoft.Health.HealthServiceConnection,System.Guid)
    name: CreateAuthenticatedSessionToken
    nameWithType: Credential.CreateAuthenticatedSessionToken
    fullName: Microsoft.Health.Authentication.Credential.CreateAuthenticatedSessionToken
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.HealthServiceConnection
    name: HealthServiceConnection
    nameWithType: HealthServiceConnection
    fullName: Microsoft.Health.HealthServiceConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Authentication.Credential.CreateAuthenticatedSessionToken(Microsoft.Health.HealthServiceConnection,System.Guid)
    name: CreateAuthenticatedSessionToken
    nameWithType: Credential.CreateAuthenticatedSessionToken
    fullName: Microsoft.Health.Authentication.Credential.CreateAuthenticatedSessionToken
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.HealthServiceConnection
    name: HealthServiceConnection
    nameWithType: HealthServiceConnection
    fullName: Microsoft.Health.HealthServiceConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  name: SetProperty(String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object())
  name.vb: SetProperty(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  name: InvokeMethod(String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object())
  name.vb: InvokeMethod(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  parent: Microsoft.Health.Utility.InvariantString
  definition: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  name: ToStringInvariant()
  nameWithType: InvariantString.ToStringInvariant()
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant()
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Web.Authentication.WebApplicationCredential.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  parent: Microsoft.Health.Utility.TypeHelper
  definition: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  name: ValueOrDbNull<WebApplicationCredential>()
  nameWithType: TypeHelper.ValueOrDbNull<WebApplicationCredential>()
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.Web.Authentication.WebApplicationCredential>()
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of WebApplicationCredential)()
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.Web.Authentication.WebApplicationCredential)()
  name.vb: ValueOrDbNull(Of WebApplicationCredential)()
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull<WebApplicationCredential>
    nameWithType: TypeHelper.ValueOrDbNull<WebApplicationCredential>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.Web.Authentication.WebApplicationCredential>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull(Of WebApplicationCredential)
    nameWithType: TypeHelper.ValueOrDbNull(Of WebApplicationCredential)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.Web.Authentication.WebApplicationCredential)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  parent: Microsoft.Health.Utility.WCXmlHelper
  definition: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  name: ToXml()
  nameWithType: WCXmlHelper.ToXml()
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml()
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Authentication
  commentId: N:Microsoft.Health.Authentication
  isExternal: false
  name: Microsoft.Health.Authentication
  nameWithType: Microsoft.Health.Authentication
  fullName: Microsoft.Health.Authentication
- uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  isExternal: true
  name: SetProperty(Object, String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object())
  name.vb: SetProperty(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions
  commentId: T:Microsoft.Health.Utility.IDispatchExtensions
  parent: Microsoft.Health.Utility
  isExternal: false
  name: IDispatchExtensions
  nameWithType: IDispatchExtensions
  fullName: Microsoft.Health.Utility.IDispatchExtensions
- uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  isExternal: true
  name: InvokeMethod(Object, String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object())
  name.vb: InvokeMethod(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  isExternal: true
  name: ToStringInvariant(Object)
  nameWithType: InvariantString.ToStringInvariant(Object)
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString
  commentId: T:Microsoft.Health.Utility.InvariantString
  parent: Microsoft.Health.Utility
  isExternal: false
  name: InvariantString
  nameWithType: InvariantString
  fullName: Microsoft.Health.Utility.InvariantString
- uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  isExternal: false
  name: ValueOrDbNull<T>(T)
  nameWithType: TypeHelper.ValueOrDbNull<T>(T)
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>(T)
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of T)(T)
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)(T)
  name.vb: ValueOrDbNull(Of T)(T)
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull<T>
    nameWithType: TypeHelper.ValueOrDbNull<T>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull(Of T)
    nameWithType: TypeHelper.ValueOrDbNull(Of T)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.TypeHelper
  commentId: T:Microsoft.Health.Utility.TypeHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: TypeHelper
  nameWithType: TypeHelper
  fullName: Microsoft.Health.Utility.TypeHelper
- uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  isExternal: true
  name: ToXml(Object)
  nameWithType: WCXmlHelper.ToXml(Object)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.WCXmlHelper
  commentId: T:Microsoft.Health.Utility.WCXmlHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: WCXmlHelper
  nameWithType: WCXmlHelper
  fullName: Microsoft.Health.Utility.WCXmlHelper
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: Microsoft.Health.Web.Authentication.WebApplicationCredential.ApplicationId*
  commentId: Overload:Microsoft.Health.Web.Authentication.WebApplicationCredential.ApplicationId
  isExternal: false
  name: ApplicationId
  nameWithType: WebApplicationCredential.ApplicationId
  fullName: Microsoft.Health.Web.Authentication.WebApplicationCredential.ApplicationId
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: Microsoft.Health.Web.Authentication.WebApplicationCredential.SubCredential*
  commentId: Overload:Microsoft.Health.Web.Authentication.WebApplicationCredential.SubCredential
  isExternal: false
  name: SubCredential
  nameWithType: WebApplicationCredential.SubCredential
  fullName: Microsoft.Health.Web.Authentication.WebApplicationCredential.SubCredential
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Health.Web.Authentication.WebApplicationCredential
  commentId: T:Microsoft.Health.Web.Authentication.WebApplicationCredential
  parent: Microsoft.Health.Web.Authentication
  isExternal: false
  name: WebApplicationCredential
  nameWithType: WebApplicationCredential
  fullName: Microsoft.Health.Web.Authentication.WebApplicationCredential
- uid: Microsoft.Health.Web.Authentication.WebApplicationCredential.#ctor*
  commentId: Overload:Microsoft.Health.Web.Authentication.WebApplicationCredential.#ctor
  isExternal: false
  name: WebApplicationCredential
  nameWithType: WebApplicationCredential.WebApplicationCredential
  fullName: Microsoft.Health.Web.Authentication.WebApplicationCredential.WebApplicationCredential
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2
  commentId: T:System.Security.Cryptography.X509Certificates.X509Certificate2
  parent: System.Security.Cryptography.X509Certificates
  isExternal: true
  name: X509Certificate2
  nameWithType: X509Certificate2
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2
- uid: System.Security.Cryptography.X509Certificates
  commentId: N:System.Security.Cryptography.X509Certificates
  isExternal: false
  name: System.Security.Cryptography.X509Certificates
  nameWithType: System.Security.Cryptography.X509Certificates
  fullName: System.Security.Cryptography.X509Certificates
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: System.Security.SecurityException
  commentId: T:System.Security.SecurityException
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.Security.Cryptography.X509Certificates.StoreLocation
  commentId: T:System.Security.Cryptography.X509Certificates.StoreLocation
  parent: System.Security.Cryptography.X509Certificates
  isExternal: true
  name: StoreLocation
  nameWithType: StoreLocation
  fullName: System.Security.Cryptography.X509Certificates.StoreLocation
- uid: Microsoft.Health.Web.Authentication.WebApplicationCredential.AuthenticateWebApplicationData*
  commentId: Overload:Microsoft.Health.Web.Authentication.WebApplicationCredential.AuthenticateWebApplicationData
  isExternal: false
  name: AuthenticateWebApplicationData
  nameWithType: WebApplicationCredential.AuthenticateWebApplicationData
  fullName: Microsoft.Health.Web.Authentication.WebApplicationCredential.AuthenticateWebApplicationData
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Health.Authentication.Credential.WriteInfoXml(System.Xml.XmlWriter)
  commentId: M:Microsoft.Health.Authentication.Credential.WriteInfoXml(System.Xml.XmlWriter)
  parent: Microsoft.Health.Authentication.Credential
  isExternal: true
  name: WriteInfoXml(XmlWriter)
  nameWithType: Credential.WriteInfoXml(XmlWriter)
  fullName: Microsoft.Health.Authentication.Credential.WriteInfoXml(System.Xml.XmlWriter)
  spec.csharp:
  - uid: Microsoft.Health.Authentication.Credential.WriteInfoXml(System.Xml.XmlWriter)
    name: WriteInfoXml
    nameWithType: Credential.WriteInfoXml
    fullName: Microsoft.Health.Authentication.Credential.WriteInfoXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Authentication.Credential.WriteInfoXml(System.Xml.XmlWriter)
    name: WriteInfoXml
    nameWithType: Credential.WriteInfoXml
    fullName: Microsoft.Health.Authentication.Credential.WriteInfoXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Web.Authentication.WebApplicationCredential.WriteInfoXml*
  commentId: Overload:Microsoft.Health.Web.Authentication.WebApplicationCredential.WriteInfoXml
  isExternal: false
  name: WriteInfoXml
  nameWithType: WebApplicationCredential.WriteInfoXml
  fullName: Microsoft.Health.Web.Authentication.WebApplicationCredential.WriteInfoXml
- uid: System.Xml.XmlWriter
  commentId: T:System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: false
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
