### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.PhraseAnalyzer.PhraseTrie
  commentId: T:Microsoft.Health.PhraseAnalyzer.PhraseTrie
  id: PhraseTrie
  parent: Microsoft.Health.PhraseAnalyzer
  children:
  - Microsoft.Health.PhraseAnalyzer.PhraseTrie.#ctor
  langs:
  - csharp
  - vb
  name: PhraseTrie
  nameWithType: PhraseTrie
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseTrie
  type: Class
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/PhraseSetExpression.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: PhraseTrie
    path: ../Microsoft.Health.Utility/search/PhraseAnalyzer/PhraseSetExpression.cs
    startLine: 128
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: 'public class PhraseTrie : StringTrie<ExpressionAttributes>, IMatcher'
    content.vb: >-
      Public Class PhraseTrie
          Inherits StringTrie(Of ExpressionAttributes)
          Implements IMatcher
  inheritance:
  - System.Object
  - Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}
  - Microsoft.Health.PhraseAnalyzer.StringTrie{Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}
  implements:
  - Microsoft.Health.PhraseAnalyzer.IMatcher
  inheritedMembers:
  - Microsoft.Health.PhraseAnalyzer.StringTrie{Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.Match(System.Collections.Generic.IList{System.String},System.Int32,System.Int32@)
  - Microsoft.Health.PhraseAnalyzer.StringTrie{Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.Find(System.Collections.Generic.IList{System.String},System.Int32,System.Int32@)
  - Microsoft.Health.PhraseAnalyzer.StringTrie{Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.FindExact(System.Collections.Generic.IList{System.String},System.Int32)
  - Microsoft.Health.PhraseAnalyzer.StringTrie{Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}})
  - Microsoft.Health.PhraseAnalyzer.StringTrie{Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}},Microsoft.Health.PhraseAnalyzer.WordBreaker)
  - Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.IgnoreDuplicates
  - Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.MaxLinearScanItemLength
  - Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.TryFind(System.Collections.Generic.IEnumerable{System.String},Microsoft.Health.PhraseAnalyzer.ExpressionAttributes@)
  - Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.TryFind(System.Collections.Generic.IEnumerable{System.String},Microsoft.Health.PhraseAnalyzer.ExpressionAttributes@,System.Int32@)
  - Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.TryFind(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.ExpressionAttributes@)
  - Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.TryFind(System.Collections.Generic.IList{System.String},System.Int32,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes@)
  - Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.TryFind(System.Collections.Generic.IList{System.String},System.Int32,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes@,System.Int32@)
  - Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.TryFind(System.Collections.Generic.IList{System.String},System.Int32,System.Int32,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes@,System.Int32@)
  - Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.TryFindExact(System.Collections.Generic.IList{System.String},System.Int32,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes@)
  - Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.GetChildren(System.Collections.Generic.IList{System.String},System.Int32)
  - Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.GetChildren(System.Collections.Generic.IEnumerable{System.String})
  - Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.GetAllValues
  - Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.Add(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.ExpressionAttributes)
  - Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.Add(System.Collections.Generic.IList{System.String},System.Int32,System.Int32,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes)
  - Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.Add(System.Collections.Generic.IEnumerable{System.String},Microsoft.Health.PhraseAnalyzer.ExpressionAttributes)
  - Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.Trim
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - Microsoft.Health.PhraseAnalyzer.PhraseTrie.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  - System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.PhraseAnalyzer.PhraseTrie.#ctor
  commentId: M:Microsoft.Health.PhraseAnalyzer.PhraseTrie.#ctor
  id: '#ctor'
  parent: Microsoft.Health.PhraseAnalyzer.PhraseTrie
  langs:
  - csharp
  - vb
  name: PhraseTrie()
  nameWithType: PhraseTrie.PhraseTrie()
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseTrie.PhraseTrie()
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/PhraseSetExpression.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health.Utility/search/PhraseAnalyzer/PhraseSetExpression.cs
    startLine: 133
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public PhraseTrie()
    content.vb: Public Sub New
  overload: Microsoft.Health.PhraseAnalyzer.PhraseTrie.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Health.PhraseAnalyzer
  commentId: N:Microsoft.Health.PhraseAnalyzer
  isExternal: false
  name: Microsoft.Health.PhraseAnalyzer
  nameWithType: Microsoft.Health.PhraseAnalyzer
  fullName: Microsoft.Health.PhraseAnalyzer
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}
  commentId: T:Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}
  parent: Microsoft.Health.PhraseAnalyzer
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2
  name: Trie<String, ExpressionAttributes>
  nameWithType: Trie<String, ExpressionAttributes>
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>
  nameWithType.vb: Trie(Of String, ExpressionAttributes)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes)
  name.vb: Trie(Of String, ExpressionAttributes)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2
    name: Trie
    nameWithType: Trie
    fullName: Microsoft.Health.PhraseAnalyzer.Trie
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
    name: ExpressionAttributes
    nameWithType: ExpressionAttributes
    fullName: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2
    name: Trie
    nameWithType: Trie
    fullName: Microsoft.Health.PhraseAnalyzer.Trie
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
    name: ExpressionAttributes
    nameWithType: ExpressionAttributes
    fullName: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.StringTrie{Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}
  commentId: T:Microsoft.Health.PhraseAnalyzer.StringTrie{Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}
  parent: Microsoft.Health.PhraseAnalyzer
  definition: Microsoft.Health.PhraseAnalyzer.StringTrie`1
  name: StringTrie<ExpressionAttributes>
  nameWithType: StringTrie<ExpressionAttributes>
  fullName: Microsoft.Health.PhraseAnalyzer.StringTrie<Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>
  nameWithType.vb: StringTrie(Of ExpressionAttributes)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.StringTrie(Of Microsoft.Health.PhraseAnalyzer.ExpressionAttributes)
  name.vb: StringTrie(Of ExpressionAttributes)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1
    name: StringTrie
    nameWithType: StringTrie
    fullName: Microsoft.Health.PhraseAnalyzer.StringTrie
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
    name: ExpressionAttributes
    nameWithType: ExpressionAttributes
    fullName: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1
    name: StringTrie
    nameWithType: StringTrie
    fullName: Microsoft.Health.PhraseAnalyzer.StringTrie
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
    name: ExpressionAttributes
    nameWithType: ExpressionAttributes
    fullName: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.IMatcher
  commentId: T:Microsoft.Health.PhraseAnalyzer.IMatcher
  parent: Microsoft.Health.PhraseAnalyzer
  isExternal: false
  name: IMatcher
  nameWithType: IMatcher
  fullName: Microsoft.Health.PhraseAnalyzer.IMatcher
- uid: Microsoft.Health.PhraseAnalyzer.StringTrie{Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.Match(System.Collections.Generic.IList{System.String},System.Int32,System.Int32@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.StringTrie{Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.Match(System.Collections.Generic.IList{System.String},System.Int32,System.Int32@)
  parent: Microsoft.Health.PhraseAnalyzer.StringTrie{Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}
  definition: Microsoft.Health.PhraseAnalyzer.StringTrie`1.Match(System.Collections.Generic.IList{System.String},System.Int32,System.Int32@)
  name: Match(IList<String>, Int32, Int32)
  nameWithType: StringTrie<ExpressionAttributes>.Match(IList<String>, Int32, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.StringTrie<Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>.Match(System.Collections.Generic.IList<System.String>, System.Int32, System.Int32)
  nameWithType.vb: StringTrie(Of ExpressionAttributes).Match(IList(Of String), Int32, Int32)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.StringTrie(Of Microsoft.Health.PhraseAnalyzer.ExpressionAttributes).Match(System.Collections.Generic.IList(Of System.String), System.Int32, System.Int32)
  name.vb: Match(IList(Of String), Int32, Int32)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1.Match(System.Collections.Generic.IList{System.String},System.Int32,System.Int32@)
    name: Match
    nameWithType: StringTrie<ExpressionAttributes>.Match
    fullName: Microsoft.Health.PhraseAnalyzer.StringTrie<Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>.Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1.Match(System.Collections.Generic.IList{System.String},System.Int32,System.Int32@)
    name: Match
    nameWithType: StringTrie(Of ExpressionAttributes).Match
    fullName: Microsoft.Health.PhraseAnalyzer.StringTrie(Of Microsoft.Health.PhraseAnalyzer.ExpressionAttributes).Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.StringTrie{Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.Find(System.Collections.Generic.IList{System.String},System.Int32,System.Int32@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.StringTrie{Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.Find(System.Collections.Generic.IList{System.String},System.Int32,System.Int32@)
  parent: Microsoft.Health.PhraseAnalyzer.StringTrie{Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}
  definition: Microsoft.Health.PhraseAnalyzer.StringTrie`1.Find(System.Collections.Generic.IList{System.String},System.Int32,System.Int32@)
  name: Find(IList<String>, Int32, Int32)
  nameWithType: StringTrie<ExpressionAttributes>.Find(IList<String>, Int32, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.StringTrie<Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>.Find(System.Collections.Generic.IList<System.String>, System.Int32, System.Int32)
  nameWithType.vb: StringTrie(Of ExpressionAttributes).Find(IList(Of String), Int32, Int32)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.StringTrie(Of Microsoft.Health.PhraseAnalyzer.ExpressionAttributes).Find(System.Collections.Generic.IList(Of System.String), System.Int32, System.Int32)
  name.vb: Find(IList(Of String), Int32, Int32)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1.Find(System.Collections.Generic.IList{System.String},System.Int32,System.Int32@)
    name: Find
    nameWithType: StringTrie<ExpressionAttributes>.Find
    fullName: Microsoft.Health.PhraseAnalyzer.StringTrie<Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>.Find
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1.Find(System.Collections.Generic.IList{System.String},System.Int32,System.Int32@)
    name: Find
    nameWithType: StringTrie(Of ExpressionAttributes).Find
    fullName: Microsoft.Health.PhraseAnalyzer.StringTrie(Of Microsoft.Health.PhraseAnalyzer.ExpressionAttributes).Find
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.StringTrie{Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.FindExact(System.Collections.Generic.IList{System.String},System.Int32)
  commentId: M:Microsoft.Health.PhraseAnalyzer.StringTrie{Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.FindExact(System.Collections.Generic.IList{System.String},System.Int32)
  parent: Microsoft.Health.PhraseAnalyzer.StringTrie{Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}
  definition: Microsoft.Health.PhraseAnalyzer.StringTrie`1.FindExact(System.Collections.Generic.IList{System.String},System.Int32)
  name: FindExact(IList<String>, Int32)
  nameWithType: StringTrie<ExpressionAttributes>.FindExact(IList<String>, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.StringTrie<Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>.FindExact(System.Collections.Generic.IList<System.String>, System.Int32)
  nameWithType.vb: StringTrie(Of ExpressionAttributes).FindExact(IList(Of String), Int32)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.StringTrie(Of Microsoft.Health.PhraseAnalyzer.ExpressionAttributes).FindExact(System.Collections.Generic.IList(Of System.String), System.Int32)
  name.vb: FindExact(IList(Of String), Int32)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1.FindExact(System.Collections.Generic.IList{System.String},System.Int32)
    name: FindExact
    nameWithType: StringTrie<ExpressionAttributes>.FindExact
    fullName: Microsoft.Health.PhraseAnalyzer.StringTrie<Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>.FindExact
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1.FindExact(System.Collections.Generic.IList{System.String},System.Int32)
    name: FindExact
    nameWithType: StringTrie(Of ExpressionAttributes).FindExact
    fullName: Microsoft.Health.PhraseAnalyzer.StringTrie(Of Microsoft.Health.PhraseAnalyzer.ExpressionAttributes).FindExact
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.StringTrie{Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}})
  commentId: M:Microsoft.Health.PhraseAnalyzer.StringTrie{Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}})
  parent: Microsoft.Health.PhraseAnalyzer.StringTrie{Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}
  definition: Microsoft.Health.PhraseAnalyzer.StringTrie`1.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}})
  name: Add(IEnumerable<KeyValuePair<String, ExpressionAttributes>>)
  nameWithType: StringTrie<ExpressionAttributes>.Add(IEnumerable<KeyValuePair<String, ExpressionAttributes>>)
  fullName: Microsoft.Health.PhraseAnalyzer.StringTrie<Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>.Add(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>>)
  nameWithType.vb: StringTrie(Of ExpressionAttributes).Add(IEnumerable(Of KeyValuePair(Of String, ExpressionAttributes)))
  fullName.vb: Microsoft.Health.PhraseAnalyzer.StringTrie(Of Microsoft.Health.PhraseAnalyzer.ExpressionAttributes).Add(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes)))
  name.vb: Add(IEnumerable(Of KeyValuePair(Of String, ExpressionAttributes)))
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}})
    name: Add
    nameWithType: StringTrie<ExpressionAttributes>.Add
    fullName: Microsoft.Health.PhraseAnalyzer.StringTrie<Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
    name: ExpressionAttributes
    nameWithType: ExpressionAttributes
    fullName: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}})
    name: Add
    nameWithType: StringTrie(Of ExpressionAttributes).Add
    fullName: Microsoft.Health.PhraseAnalyzer.StringTrie(Of Microsoft.Health.PhraseAnalyzer.ExpressionAttributes).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
    name: ExpressionAttributes
    nameWithType: ExpressionAttributes
    fullName: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.StringTrie{Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}},Microsoft.Health.PhraseAnalyzer.WordBreaker)
  commentId: M:Microsoft.Health.PhraseAnalyzer.StringTrie{Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}},Microsoft.Health.PhraseAnalyzer.WordBreaker)
  parent: Microsoft.Health.PhraseAnalyzer.StringTrie{Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}
  definition: Microsoft.Health.PhraseAnalyzer.StringTrie`1.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}},Microsoft.Health.PhraseAnalyzer.WordBreaker)
  name: Add(IEnumerable<KeyValuePair<String, ExpressionAttributes>>, WordBreaker)
  nameWithType: StringTrie<ExpressionAttributes>.Add(IEnumerable<KeyValuePair<String, ExpressionAttributes>>, WordBreaker)
  fullName: Microsoft.Health.PhraseAnalyzer.StringTrie<Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>.Add(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>>, Microsoft.Health.PhraseAnalyzer.WordBreaker)
  nameWithType.vb: StringTrie(Of ExpressionAttributes).Add(IEnumerable(Of KeyValuePair(Of String, ExpressionAttributes)), WordBreaker)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.StringTrie(Of Microsoft.Health.PhraseAnalyzer.ExpressionAttributes).Add(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes)), Microsoft.Health.PhraseAnalyzer.WordBreaker)
  name.vb: Add(IEnumerable(Of KeyValuePair(Of String, ExpressionAttributes)), WordBreaker)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}},Microsoft.Health.PhraseAnalyzer.WordBreaker)
    name: Add
    nameWithType: StringTrie<ExpressionAttributes>.Add
    fullName: Microsoft.Health.PhraseAnalyzer.StringTrie<Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
    name: ExpressionAttributes
    nameWithType: ExpressionAttributes
    fullName: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.WordBreaker
    name: WordBreaker
    nameWithType: WordBreaker
    fullName: Microsoft.Health.PhraseAnalyzer.WordBreaker
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}},Microsoft.Health.PhraseAnalyzer.WordBreaker)
    name: Add
    nameWithType: StringTrie(Of ExpressionAttributes).Add
    fullName: Microsoft.Health.PhraseAnalyzer.StringTrie(Of Microsoft.Health.PhraseAnalyzer.ExpressionAttributes).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
    name: ExpressionAttributes
    nameWithType: ExpressionAttributes
    fullName: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.WordBreaker
    name: WordBreaker
    nameWithType: WordBreaker
    fullName: Microsoft.Health.PhraseAnalyzer.WordBreaker
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.IgnoreDuplicates
  commentId: P:Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.IgnoreDuplicates
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.IgnoreDuplicates
  name: IgnoreDuplicates
  nameWithType: Trie<String, ExpressionAttributes>.IgnoreDuplicates
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>.IgnoreDuplicates
  nameWithType.vb: Trie(Of String, ExpressionAttributes).IgnoreDuplicates
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes).IgnoreDuplicates
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.MaxLinearScanItemLength
  commentId: P:Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.MaxLinearScanItemLength
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.MaxLinearScanItemLength
  name: MaxLinearScanItemLength
  nameWithType: Trie<String, ExpressionAttributes>.MaxLinearScanItemLength
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>.MaxLinearScanItemLength
  nameWithType.vb: Trie(Of String, ExpressionAttributes).MaxLinearScanItemLength
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes).MaxLinearScanItemLength
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.TryFind(System.Collections.Generic.IEnumerable{System.String},Microsoft.Health.PhraseAnalyzer.ExpressionAttributes@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.TryFind(System.Collections.Generic.IEnumerable{System.String},Microsoft.Health.PhraseAnalyzer.ExpressionAttributes@)
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@)
  name: TryFind(IEnumerable<String>, ExpressionAttributes)
  nameWithType: Trie<String, ExpressionAttributes>.TryFind(IEnumerable<String>, ExpressionAttributes)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>.TryFind(System.Collections.Generic.IEnumerable<System.String>, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes)
  nameWithType.vb: Trie(Of String, ExpressionAttributes).TryFind(IEnumerable(Of String), ExpressionAttributes)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes).TryFind(System.Collections.Generic.IEnumerable(Of System.String), Microsoft.Health.PhraseAnalyzer.ExpressionAttributes)
  name.vb: TryFind(IEnumerable(Of String), ExpressionAttributes)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@)
    name: TryFind
    nameWithType: Trie<String, ExpressionAttributes>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
    name: ExpressionAttributes
    nameWithType: ExpressionAttributes
    fullName: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@)
    name: TryFind
    nameWithType: Trie(Of String, ExpressionAttributes).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
    name: ExpressionAttributes
    nameWithType: ExpressionAttributes
    fullName: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.TryFind(System.Collections.Generic.IEnumerable{System.String},Microsoft.Health.PhraseAnalyzer.ExpressionAttributes@,System.Int32@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.TryFind(System.Collections.Generic.IEnumerable{System.String},Microsoft.Health.PhraseAnalyzer.ExpressionAttributes@,System.Int32@)
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@,System.Int32@)
  name: TryFind(IEnumerable<String>, ExpressionAttributes, Int32)
  nameWithType: Trie<String, ExpressionAttributes>.TryFind(IEnumerable<String>, ExpressionAttributes, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>.TryFind(System.Collections.Generic.IEnumerable<System.String>, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes, System.Int32)
  nameWithType.vb: Trie(Of String, ExpressionAttributes).TryFind(IEnumerable(Of String), ExpressionAttributes, Int32)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes).TryFind(System.Collections.Generic.IEnumerable(Of System.String), Microsoft.Health.PhraseAnalyzer.ExpressionAttributes, System.Int32)
  name.vb: TryFind(IEnumerable(Of String), ExpressionAttributes, Int32)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie<String, ExpressionAttributes>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
    name: ExpressionAttributes
    nameWithType: ExpressionAttributes
    fullName: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie(Of String, ExpressionAttributes).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
    name: ExpressionAttributes
    nameWithType: ExpressionAttributes
    fullName: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.TryFind(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.ExpressionAttributes@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.TryFind(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.ExpressionAttributes@)
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},`1@)
  name: TryFind(IList<String>, ExpressionAttributes)
  nameWithType: Trie<String, ExpressionAttributes>.TryFind(IList<String>, ExpressionAttributes)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>.TryFind(System.Collections.Generic.IList<System.String>, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes)
  nameWithType.vb: Trie(Of String, ExpressionAttributes).TryFind(IList(Of String), ExpressionAttributes)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes).TryFind(System.Collections.Generic.IList(Of System.String), Microsoft.Health.PhraseAnalyzer.ExpressionAttributes)
  name.vb: TryFind(IList(Of String), ExpressionAttributes)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},`1@)
    name: TryFind
    nameWithType: Trie<String, ExpressionAttributes>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
    name: ExpressionAttributes
    nameWithType: ExpressionAttributes
    fullName: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},`1@)
    name: TryFind
    nameWithType: Trie(Of String, ExpressionAttributes).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
    name: ExpressionAttributes
    nameWithType: ExpressionAttributes
    fullName: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.TryFind(System.Collections.Generic.IList{System.String},System.Int32,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.TryFind(System.Collections.Generic.IList{System.String},System.Int32,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes@)
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@)
  name: TryFind(IList<String>, Int32, ExpressionAttributes)
  nameWithType: Trie<String, ExpressionAttributes>.TryFind(IList<String>, Int32, ExpressionAttributes)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>.TryFind(System.Collections.Generic.IList<System.String>, System.Int32, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes)
  nameWithType.vb: Trie(Of String, ExpressionAttributes).TryFind(IList(Of String), Int32, ExpressionAttributes)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes).TryFind(System.Collections.Generic.IList(Of System.String), System.Int32, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes)
  name.vb: TryFind(IList(Of String), Int32, ExpressionAttributes)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@)
    name: TryFind
    nameWithType: Trie<String, ExpressionAttributes>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
    name: ExpressionAttributes
    nameWithType: ExpressionAttributes
    fullName: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@)
    name: TryFind
    nameWithType: Trie(Of String, ExpressionAttributes).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
    name: ExpressionAttributes
    nameWithType: ExpressionAttributes
    fullName: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.TryFind(System.Collections.Generic.IList{System.String},System.Int32,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes@,System.Int32@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.TryFind(System.Collections.Generic.IList{System.String},System.Int32,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes@,System.Int32@)
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@,System.Int32@)
  name: TryFind(IList<String>, Int32, ExpressionAttributes, Int32)
  nameWithType: Trie<String, ExpressionAttributes>.TryFind(IList<String>, Int32, ExpressionAttributes, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>.TryFind(System.Collections.Generic.IList<System.String>, System.Int32, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes, System.Int32)
  nameWithType.vb: Trie(Of String, ExpressionAttributes).TryFind(IList(Of String), Int32, ExpressionAttributes, Int32)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes).TryFind(System.Collections.Generic.IList(Of System.String), System.Int32, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes, System.Int32)
  name.vb: TryFind(IList(Of String), Int32, ExpressionAttributes, Int32)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie<String, ExpressionAttributes>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
    name: ExpressionAttributes
    nameWithType: ExpressionAttributes
    fullName: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie(Of String, ExpressionAttributes).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
    name: ExpressionAttributes
    nameWithType: ExpressionAttributes
    fullName: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.TryFind(System.Collections.Generic.IList{System.String},System.Int32,System.Int32,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes@,System.Int32@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.TryFind(System.Collections.Generic.IList{System.String},System.Int32,System.Int32,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes@,System.Int32@)
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1@,System.Int32@)
  name: TryFind(IList<String>, Int32, Int32, ExpressionAttributes, Int32)
  nameWithType: Trie<String, ExpressionAttributes>.TryFind(IList<String>, Int32, Int32, ExpressionAttributes, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>.TryFind(System.Collections.Generic.IList<System.String>, System.Int32, System.Int32, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes, System.Int32)
  nameWithType.vb: Trie(Of String, ExpressionAttributes).TryFind(IList(Of String), Int32, Int32, ExpressionAttributes, Int32)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes).TryFind(System.Collections.Generic.IList(Of System.String), System.Int32, System.Int32, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes, System.Int32)
  name.vb: TryFind(IList(Of String), Int32, Int32, ExpressionAttributes, Int32)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie<String, ExpressionAttributes>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
    name: ExpressionAttributes
    nameWithType: ExpressionAttributes
    fullName: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie(Of String, ExpressionAttributes).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
    name: ExpressionAttributes
    nameWithType: ExpressionAttributes
    fullName: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.TryFindExact(System.Collections.Generic.IList{System.String},System.Int32,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.TryFindExact(System.Collections.Generic.IList{System.String},System.Int32,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes@)
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFindExact(System.Collections.Generic.IList{`0},System.Int32,`1@)
  name: TryFindExact(IList<String>, Int32, ExpressionAttributes)
  nameWithType: Trie<String, ExpressionAttributes>.TryFindExact(IList<String>, Int32, ExpressionAttributes)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>.TryFindExact(System.Collections.Generic.IList<System.String>, System.Int32, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes)
  nameWithType.vb: Trie(Of String, ExpressionAttributes).TryFindExact(IList(Of String), Int32, ExpressionAttributes)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes).TryFindExact(System.Collections.Generic.IList(Of System.String), System.Int32, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes)
  name.vb: TryFindExact(IList(Of String), Int32, ExpressionAttributes)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFindExact(System.Collections.Generic.IList{`0},System.Int32,`1@)
    name: TryFindExact
    nameWithType: Trie<String, ExpressionAttributes>.TryFindExact
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>.TryFindExact
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
    name: ExpressionAttributes
    nameWithType: ExpressionAttributes
    fullName: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFindExact(System.Collections.Generic.IList{`0},System.Int32,`1@)
    name: TryFindExact
    nameWithType: Trie(Of String, ExpressionAttributes).TryFindExact
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes).TryFindExact
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
    name: ExpressionAttributes
    nameWithType: ExpressionAttributes
    fullName: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.GetChildren(System.Collections.Generic.IList{System.String},System.Int32)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.GetChildren(System.Collections.Generic.IList{System.String},System.Int32)
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IList{`0},System.Int32)
  name: GetChildren(IList<String>, Int32)
  nameWithType: Trie<String, ExpressionAttributes>.GetChildren(IList<String>, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>.GetChildren(System.Collections.Generic.IList<System.String>, System.Int32)
  nameWithType.vb: Trie(Of String, ExpressionAttributes).GetChildren(IList(Of String), Int32)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes).GetChildren(System.Collections.Generic.IList(Of System.String), System.Int32)
  name.vb: GetChildren(IList(Of String), Int32)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IList{`0},System.Int32)
    name: GetChildren
    nameWithType: Trie<String, ExpressionAttributes>.GetChildren
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>.GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IList{`0},System.Int32)
    name: GetChildren
    nameWithType: Trie(Of String, ExpressionAttributes).GetChildren
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes).GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.GetChildren(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.GetChildren(System.Collections.Generic.IEnumerable{System.String})
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IEnumerable{`0})
  name: GetChildren(IEnumerable<String>)
  nameWithType: Trie<String, ExpressionAttributes>.GetChildren(IEnumerable<String>)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>.GetChildren(System.Collections.Generic.IEnumerable<System.String>)
  nameWithType.vb: Trie(Of String, ExpressionAttributes).GetChildren(IEnumerable(Of String))
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes).GetChildren(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: GetChildren(IEnumerable(Of String))
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IEnumerable{`0})
    name: GetChildren
    nameWithType: Trie<String, ExpressionAttributes>.GetChildren
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>.GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IEnumerable{`0})
    name: GetChildren
    nameWithType: Trie(Of String, ExpressionAttributes).GetChildren
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes).GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.GetAllValues
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.GetAllValues
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.GetAllValues
  name: GetAllValues()
  nameWithType: Trie<String, ExpressionAttributes>.GetAllValues()
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>.GetAllValues()
  nameWithType.vb: Trie(Of String, ExpressionAttributes).GetAllValues()
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes).GetAllValues()
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetAllValues
    name: GetAllValues
    nameWithType: Trie<String, ExpressionAttributes>.GetAllValues
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>.GetAllValues
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetAllValues
    name: GetAllValues
    nameWithType: Trie(Of String, ExpressionAttributes).GetAllValues
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes).GetAllValues
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.Add(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.ExpressionAttributes)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.Add(System.Collections.Generic.IList{System.String},Microsoft.Health.PhraseAnalyzer.ExpressionAttributes)
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},`1)
  name: Add(IList<String>, ExpressionAttributes)
  nameWithType: Trie<String, ExpressionAttributes>.Add(IList<String>, ExpressionAttributes)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>.Add(System.Collections.Generic.IList<System.String>, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes)
  nameWithType.vb: Trie(Of String, ExpressionAttributes).Add(IList(Of String), ExpressionAttributes)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes).Add(System.Collections.Generic.IList(Of System.String), Microsoft.Health.PhraseAnalyzer.ExpressionAttributes)
  name.vb: Add(IList(Of String), ExpressionAttributes)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},`1)
    name: Add
    nameWithType: Trie<String, ExpressionAttributes>.Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
    name: ExpressionAttributes
    nameWithType: ExpressionAttributes
    fullName: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},`1)
    name: Add
    nameWithType: Trie(Of String, ExpressionAttributes).Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
    name: ExpressionAttributes
    nameWithType: ExpressionAttributes
    fullName: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.Add(System.Collections.Generic.IList{System.String},System.Int32,System.Int32,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.Add(System.Collections.Generic.IList{System.String},System.Int32,System.Int32,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes)
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1)
  name: Add(IList<String>, Int32, Int32, ExpressionAttributes)
  nameWithType: Trie<String, ExpressionAttributes>.Add(IList<String>, Int32, Int32, ExpressionAttributes)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>.Add(System.Collections.Generic.IList<System.String>, System.Int32, System.Int32, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes)
  nameWithType.vb: Trie(Of String, ExpressionAttributes).Add(IList(Of String), Int32, Int32, ExpressionAttributes)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes).Add(System.Collections.Generic.IList(Of System.String), System.Int32, System.Int32, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes)
  name.vb: Add(IList(Of String), Int32, Int32, ExpressionAttributes)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1)
    name: Add
    nameWithType: Trie<String, ExpressionAttributes>.Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
    name: ExpressionAttributes
    nameWithType: ExpressionAttributes
    fullName: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1)
    name: Add
    nameWithType: Trie(Of String, ExpressionAttributes).Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
    name: ExpressionAttributes
    nameWithType: ExpressionAttributes
    fullName: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.Add(System.Collections.Generic.IEnumerable{System.String},Microsoft.Health.PhraseAnalyzer.ExpressionAttributes)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.Add(System.Collections.Generic.IEnumerable{System.String},Microsoft.Health.PhraseAnalyzer.ExpressionAttributes)
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IEnumerable{`0},`1)
  name: Add(IEnumerable<String>, ExpressionAttributes)
  nameWithType: Trie<String, ExpressionAttributes>.Add(IEnumerable<String>, ExpressionAttributes)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>.Add(System.Collections.Generic.IEnumerable<System.String>, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes)
  nameWithType.vb: Trie(Of String, ExpressionAttributes).Add(IEnumerable(Of String), ExpressionAttributes)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes).Add(System.Collections.Generic.IEnumerable(Of System.String), Microsoft.Health.PhraseAnalyzer.ExpressionAttributes)
  name.vb: Add(IEnumerable(Of String), ExpressionAttributes)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IEnumerable{`0},`1)
    name: Add
    nameWithType: Trie<String, ExpressionAttributes>.Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
    name: ExpressionAttributes
    nameWithType: ExpressionAttributes
    fullName: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IEnumerable{`0},`1)
    name: Add
    nameWithType: Trie(Of String, ExpressionAttributes).Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
    name: ExpressionAttributes
    nameWithType: ExpressionAttributes
    fullName: Microsoft.Health.PhraseAnalyzer.ExpressionAttributes
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.Trim
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}.Trim
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.String,Microsoft.Health.PhraseAnalyzer.ExpressionAttributes}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.Trim
  name: Trim()
  nameWithType: Trie<String, ExpressionAttributes>.Trim()
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>.Trim()
  nameWithType.vb: Trie(Of String, ExpressionAttributes).Trim()
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes).Trim()
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Trim
    name: Trim
    nameWithType: Trie<String, ExpressionAttributes>.Trim
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes>.Trim
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Trim
    name: Trim
    nameWithType: Trie(Of String, ExpressionAttributes).Trim
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, Microsoft.Health.PhraseAnalyzer.ExpressionAttributes).Trim
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  name: SetProperty(String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object())
  name.vb: SetProperty(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  name: InvokeMethod(String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object())
  name.vb: InvokeMethod(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  parent: Microsoft.Health.Utility.InvariantString
  definition: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  name: ToStringInvariant()
  nameWithType: InvariantString.ToStringInvariant()
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant()
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.PhraseTrie.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  parent: Microsoft.Health.Utility.TypeHelper
  definition: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  name: ValueOrDbNull<PhraseTrie>()
  nameWithType: TypeHelper.ValueOrDbNull<PhraseTrie>()
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.PhraseAnalyzer.PhraseTrie>()
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of PhraseTrie)()
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.PhraseAnalyzer.PhraseTrie)()
  name.vb: ValueOrDbNull(Of PhraseTrie)()
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull<PhraseTrie>
    nameWithType: TypeHelper.ValueOrDbNull<PhraseTrie>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.PhraseAnalyzer.PhraseTrie>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull(Of PhraseTrie)
    nameWithType: TypeHelper.ValueOrDbNull(Of PhraseTrie)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.PhraseAnalyzer.PhraseTrie)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  parent: Microsoft.Health.Utility.WCXmlHelper
  definition: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  name: ToXml()
  nameWithType: WCXmlHelper.ToXml()
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml()
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2
  commentId: T:Microsoft.Health.PhraseAnalyzer.Trie`2
  isExternal: false
  name: Trie<K, V>
  nameWithType: Trie<K, V>
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>
  nameWithType.vb: Trie(Of K, V)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V)
  name.vb: Trie(Of K, V)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2
    name: Trie
    nameWithType: Trie
    fullName: Microsoft.Health.PhraseAnalyzer.Trie
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2
    name: Trie
    nameWithType: Trie
    fullName: Microsoft.Health.PhraseAnalyzer.Trie
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1
  commentId: T:Microsoft.Health.PhraseAnalyzer.StringTrie`1
  isExternal: false
  name: StringTrie<T>
  nameWithType: StringTrie<T>
  fullName: Microsoft.Health.PhraseAnalyzer.StringTrie<T>
  nameWithType.vb: StringTrie(Of T)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.StringTrie(Of T)
  name.vb: StringTrie(Of T)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1
    name: StringTrie
    nameWithType: StringTrie
    fullName: Microsoft.Health.PhraseAnalyzer.StringTrie
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1
    name: StringTrie
    nameWithType: StringTrie
    fullName: Microsoft.Health.PhraseAnalyzer.StringTrie
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1.Match(System.Collections.Generic.IList{System.String},System.Int32,System.Int32@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.StringTrie`1.Match(System.Collections.Generic.IList{System.String},System.Int32,System.Int32@)
  isExternal: true
  name: Match(IList<String>, Int32, Int32)
  nameWithType: StringTrie<T>.Match(IList<String>, Int32, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.StringTrie<T>.Match(System.Collections.Generic.IList<System.String>, System.Int32, System.Int32)
  nameWithType.vb: StringTrie(Of T).Match(IList(Of String), Int32, Int32)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.StringTrie(Of T).Match(System.Collections.Generic.IList(Of System.String), System.Int32, System.Int32)
  name.vb: Match(IList(Of String), Int32, Int32)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1.Match(System.Collections.Generic.IList{System.String},System.Int32,System.Int32@)
    name: Match
    nameWithType: StringTrie<T>.Match
    fullName: Microsoft.Health.PhraseAnalyzer.StringTrie<T>.Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1.Match(System.Collections.Generic.IList{System.String},System.Int32,System.Int32@)
    name: Match
    nameWithType: StringTrie(Of T).Match
    fullName: Microsoft.Health.PhraseAnalyzer.StringTrie(Of T).Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1.Find(System.Collections.Generic.IList{System.String},System.Int32,System.Int32@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.StringTrie`1.Find(System.Collections.Generic.IList{System.String},System.Int32,System.Int32@)
  isExternal: true
  name: Find(IList<String>, Int32, Int32)
  nameWithType: StringTrie<T>.Find(IList<String>, Int32, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.StringTrie<T>.Find(System.Collections.Generic.IList<System.String>, System.Int32, System.Int32)
  nameWithType.vb: StringTrie(Of T).Find(IList(Of String), Int32, Int32)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.StringTrie(Of T).Find(System.Collections.Generic.IList(Of System.String), System.Int32, System.Int32)
  name.vb: Find(IList(Of String), Int32, Int32)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1.Find(System.Collections.Generic.IList{System.String},System.Int32,System.Int32@)
    name: Find
    nameWithType: StringTrie<T>.Find
    fullName: Microsoft.Health.PhraseAnalyzer.StringTrie<T>.Find
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1.Find(System.Collections.Generic.IList{System.String},System.Int32,System.Int32@)
    name: Find
    nameWithType: StringTrie(Of T).Find
    fullName: Microsoft.Health.PhraseAnalyzer.StringTrie(Of T).Find
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1.FindExact(System.Collections.Generic.IList{System.String},System.Int32)
  commentId: M:Microsoft.Health.PhraseAnalyzer.StringTrie`1.FindExact(System.Collections.Generic.IList{System.String},System.Int32)
  isExternal: true
  name: FindExact(IList<String>, Int32)
  nameWithType: StringTrie<T>.FindExact(IList<String>, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.StringTrie<T>.FindExact(System.Collections.Generic.IList<System.String>, System.Int32)
  nameWithType.vb: StringTrie(Of T).FindExact(IList(Of String), Int32)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.StringTrie(Of T).FindExact(System.Collections.Generic.IList(Of System.String), System.Int32)
  name.vb: FindExact(IList(Of String), Int32)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1.FindExact(System.Collections.Generic.IList{System.String},System.Int32)
    name: FindExact
    nameWithType: StringTrie<T>.FindExact
    fullName: Microsoft.Health.PhraseAnalyzer.StringTrie<T>.FindExact
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1.FindExact(System.Collections.Generic.IList{System.String},System.Int32)
    name: FindExact
    nameWithType: StringTrie(Of T).FindExact
    fullName: Microsoft.Health.PhraseAnalyzer.StringTrie(Of T).FindExact
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}})
  commentId: M:Microsoft.Health.PhraseAnalyzer.StringTrie`1.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}})
  isExternal: true
  name: Add(IEnumerable<KeyValuePair<String, T>>)
  nameWithType: StringTrie<T>.Add(IEnumerable<KeyValuePair<String, T>>)
  fullName: Microsoft.Health.PhraseAnalyzer.StringTrie<T>.Add(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, T>>)
  nameWithType.vb: StringTrie(Of T).Add(IEnumerable(Of KeyValuePair(Of String, T)))
  fullName.vb: Microsoft.Health.PhraseAnalyzer.StringTrie(Of T).Add(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, T)))
  name.vb: Add(IEnumerable(Of KeyValuePair(Of String, T)))
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}})
    name: Add
    nameWithType: StringTrie<T>.Add
    fullName: Microsoft.Health.PhraseAnalyzer.StringTrie<T>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}})
    name: Add
    nameWithType: StringTrie(Of T).Add
    fullName: Microsoft.Health.PhraseAnalyzer.StringTrie(Of T).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}},Microsoft.Health.PhraseAnalyzer.WordBreaker)
  commentId: M:Microsoft.Health.PhraseAnalyzer.StringTrie`1.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}},Microsoft.Health.PhraseAnalyzer.WordBreaker)
  isExternal: true
  name: Add(IEnumerable<KeyValuePair<String, T>>, WordBreaker)
  nameWithType: StringTrie<T>.Add(IEnumerable<KeyValuePair<String, T>>, WordBreaker)
  fullName: Microsoft.Health.PhraseAnalyzer.StringTrie<T>.Add(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, T>>, Microsoft.Health.PhraseAnalyzer.WordBreaker)
  nameWithType.vb: StringTrie(Of T).Add(IEnumerable(Of KeyValuePair(Of String, T)), WordBreaker)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.StringTrie(Of T).Add(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, T)), Microsoft.Health.PhraseAnalyzer.WordBreaker)
  name.vb: Add(IEnumerable(Of KeyValuePair(Of String, T)), WordBreaker)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}},Microsoft.Health.PhraseAnalyzer.WordBreaker)
    name: Add
    nameWithType: StringTrie<T>.Add
    fullName: Microsoft.Health.PhraseAnalyzer.StringTrie<T>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.WordBreaker
    name: WordBreaker
    nameWithType: WordBreaker
    fullName: Microsoft.Health.PhraseAnalyzer.WordBreaker
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}},Microsoft.Health.PhraseAnalyzer.WordBreaker)
    name: Add
    nameWithType: StringTrie(Of T).Add
    fullName: Microsoft.Health.PhraseAnalyzer.StringTrie(Of T).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.WordBreaker
    name: WordBreaker
    nameWithType: WordBreaker
    fullName: Microsoft.Health.PhraseAnalyzer.WordBreaker
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.IgnoreDuplicates
  commentId: P:Microsoft.Health.PhraseAnalyzer.Trie`2.IgnoreDuplicates
  isExternal: false
  name: IgnoreDuplicates
  nameWithType: Trie<K, V>.IgnoreDuplicates
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.IgnoreDuplicates
  nameWithType.vb: Trie(Of K, V).IgnoreDuplicates
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).IgnoreDuplicates
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.MaxLinearScanItemLength
  commentId: P:Microsoft.Health.PhraseAnalyzer.Trie`2.MaxLinearScanItemLength
  isExternal: false
  name: MaxLinearScanItemLength
  nameWithType: Trie<K, V>.MaxLinearScanItemLength
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.MaxLinearScanItemLength
  nameWithType.vb: Trie(Of K, V).MaxLinearScanItemLength
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).MaxLinearScanItemLength
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@)
  isExternal: true
  name: TryFind(IEnumerable<K>, V)
  nameWithType: Trie<K, V>.TryFind(IEnumerable<K>, V)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind(System.Collections.Generic.IEnumerable<K>, V)
  nameWithType.vb: Trie(Of K, V).TryFind(IEnumerable(Of K), V)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind(System.Collections.Generic.IEnumerable(Of K), V)
  name.vb: TryFind(IEnumerable(Of K), V)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@)
    name: TryFind
    nameWithType: Trie<K, V>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@)
    name: TryFind
    nameWithType: Trie(Of K, V).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@,System.Int32@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@,System.Int32@)
  isExternal: true
  name: TryFind(IEnumerable<K>, V, Int32)
  nameWithType: Trie<K, V>.TryFind(IEnumerable<K>, V, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind(System.Collections.Generic.IEnumerable<K>, V, System.Int32)
  nameWithType.vb: Trie(Of K, V).TryFind(IEnumerable(Of K), V, Int32)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind(System.Collections.Generic.IEnumerable(Of K), V, System.Int32)
  name.vb: TryFind(IEnumerable(Of K), V, Int32)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie<K, V>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie(Of K, V).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},`1@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},`1@)
  isExternal: true
  name: TryFind(IList<K>, V)
  nameWithType: Trie<K, V>.TryFind(IList<K>, V)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind(System.Collections.Generic.IList<K>, V)
  nameWithType.vb: Trie(Of K, V).TryFind(IList(Of K), V)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind(System.Collections.Generic.IList(Of K), V)
  name.vb: TryFind(IList(Of K), V)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},`1@)
    name: TryFind
    nameWithType: Trie<K, V>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},`1@)
    name: TryFind
    nameWithType: Trie(Of K, V).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@)
  isExternal: true
  name: TryFind(IList<K>, Int32, V)
  nameWithType: Trie<K, V>.TryFind(IList<K>, Int32, V)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind(System.Collections.Generic.IList<K>, System.Int32, V)
  nameWithType.vb: Trie(Of K, V).TryFind(IList(Of K), Int32, V)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind(System.Collections.Generic.IList(Of K), System.Int32, V)
  name.vb: TryFind(IList(Of K), Int32, V)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@)
    name: TryFind
    nameWithType: Trie<K, V>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@)
    name: TryFind
    nameWithType: Trie(Of K, V).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@,System.Int32@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@,System.Int32@)
  isExternal: true
  name: TryFind(IList<K>, Int32, V, Int32)
  nameWithType: Trie<K, V>.TryFind(IList<K>, Int32, V, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind(System.Collections.Generic.IList<K>, System.Int32, V, System.Int32)
  nameWithType.vb: Trie(Of K, V).TryFind(IList(Of K), Int32, V, Int32)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind(System.Collections.Generic.IList(Of K), System.Int32, V, System.Int32)
  name.vb: TryFind(IList(Of K), Int32, V, Int32)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie<K, V>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie(Of K, V).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1@,System.Int32@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1@,System.Int32@)
  isExternal: true
  name: TryFind(IList<K>, Int32, Int32, V, Int32)
  nameWithType: Trie<K, V>.TryFind(IList<K>, Int32, Int32, V, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind(System.Collections.Generic.IList<K>, System.Int32, System.Int32, V, System.Int32)
  nameWithType.vb: Trie(Of K, V).TryFind(IList(Of K), Int32, Int32, V, Int32)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind(System.Collections.Generic.IList(Of K), System.Int32, System.Int32, V, System.Int32)
  name.vb: TryFind(IList(Of K), Int32, Int32, V, Int32)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie<K, V>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie(Of K, V).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFindExact(System.Collections.Generic.IList{`0},System.Int32,`1@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.TryFindExact(System.Collections.Generic.IList{`0},System.Int32,`1@)
  isExternal: true
  name: TryFindExact(IList<K>, Int32, V)
  nameWithType: Trie<K, V>.TryFindExact(IList<K>, Int32, V)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFindExact(System.Collections.Generic.IList<K>, System.Int32, V)
  nameWithType.vb: Trie(Of K, V).TryFindExact(IList(Of K), Int32, V)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFindExact(System.Collections.Generic.IList(Of K), System.Int32, V)
  name.vb: TryFindExact(IList(Of K), Int32, V)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFindExact(System.Collections.Generic.IList{`0},System.Int32,`1@)
    name: TryFindExact
    nameWithType: Trie<K, V>.TryFindExact
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFindExact
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFindExact(System.Collections.Generic.IList{`0},System.Int32,`1@)
    name: TryFindExact
    nameWithType: Trie(Of K, V).TryFindExact
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFindExact
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IList{`0},System.Int32)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IList{`0},System.Int32)
  isExternal: true
  name: GetChildren(IList<K>, Int32)
  nameWithType: Trie<K, V>.GetChildren(IList<K>, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.GetChildren(System.Collections.Generic.IList<K>, System.Int32)
  nameWithType.vb: Trie(Of K, V).GetChildren(IList(Of K), Int32)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).GetChildren(System.Collections.Generic.IList(Of K), System.Int32)
  name.vb: GetChildren(IList(Of K), Int32)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IList{`0},System.Int32)
    name: GetChildren
    nameWithType: Trie<K, V>.GetChildren
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IList{`0},System.Int32)
    name: GetChildren
    nameWithType: Trie(Of K, V).GetChildren
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: GetChildren(IEnumerable<K>)
  nameWithType: Trie<K, V>.GetChildren(IEnumerable<K>)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.GetChildren(System.Collections.Generic.IEnumerable<K>)
  nameWithType.vb: Trie(Of K, V).GetChildren(IEnumerable(Of K))
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).GetChildren(System.Collections.Generic.IEnumerable(Of K))
  name.vb: GetChildren(IEnumerable(Of K))
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IEnumerable{`0})
    name: GetChildren
    nameWithType: Trie<K, V>.GetChildren
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IEnumerable{`0})
    name: GetChildren
    nameWithType: Trie(Of K, V).GetChildren
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetAllValues
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.GetAllValues
  isExternal: false
  name: GetAllValues()
  nameWithType: Trie<K, V>.GetAllValues()
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.GetAllValues()
  nameWithType.vb: Trie(Of K, V).GetAllValues()
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).GetAllValues()
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetAllValues
    name: GetAllValues
    nameWithType: Trie<K, V>.GetAllValues
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.GetAllValues
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetAllValues
    name: GetAllValues
    nameWithType: Trie(Of K, V).GetAllValues
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).GetAllValues
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},`1)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},`1)
  isExternal: true
  name: Add(IList<K>, V)
  nameWithType: Trie<K, V>.Add(IList<K>, V)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.Add(System.Collections.Generic.IList<K>, V)
  nameWithType.vb: Trie(Of K, V).Add(IList(Of K), V)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).Add(System.Collections.Generic.IList(Of K), V)
  name.vb: Add(IList(Of K), V)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},`1)
    name: Add
    nameWithType: Trie<K, V>.Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},`1)
    name: Add
    nameWithType: Trie(Of K, V).Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1)
  isExternal: true
  name: Add(IList<K>, Int32, Int32, V)
  nameWithType: Trie<K, V>.Add(IList<K>, Int32, Int32, V)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.Add(System.Collections.Generic.IList<K>, System.Int32, System.Int32, V)
  nameWithType.vb: Trie(Of K, V).Add(IList(Of K), Int32, Int32, V)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).Add(System.Collections.Generic.IList(Of K), System.Int32, System.Int32, V)
  name.vb: Add(IList(Of K), Int32, Int32, V)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1)
    name: Add
    nameWithType: Trie<K, V>.Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1)
    name: Add
    nameWithType: Trie(Of K, V).Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IEnumerable{`0},`1)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IEnumerable{`0},`1)
  isExternal: true
  name: Add(IEnumerable<K>, V)
  nameWithType: Trie<K, V>.Add(IEnumerable<K>, V)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.Add(System.Collections.Generic.IEnumerable<K>, V)
  nameWithType.vb: Trie(Of K, V).Add(IEnumerable(Of K), V)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).Add(System.Collections.Generic.IEnumerable(Of K), V)
  name.vb: Add(IEnumerable(Of K), V)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IEnumerable{`0},`1)
    name: Add
    nameWithType: Trie<K, V>.Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IEnumerable{`0},`1)
    name: Add
    nameWithType: Trie(Of K, V).Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Trim
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.Trim
  isExternal: false
  name: Trim()
  nameWithType: Trie<K, V>.Trim()
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.Trim()
  nameWithType.vb: Trie(Of K, V).Trim()
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).Trim()
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Trim
    name: Trim
    nameWithType: Trie<K, V>.Trim
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.Trim
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Trim
    name: Trim
    nameWithType: Trie(Of K, V).Trim
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).Trim
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  isExternal: true
  name: SetProperty(Object, String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object())
  name.vb: SetProperty(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions
  commentId: T:Microsoft.Health.Utility.IDispatchExtensions
  parent: Microsoft.Health.Utility
  isExternal: false
  name: IDispatchExtensions
  nameWithType: IDispatchExtensions
  fullName: Microsoft.Health.Utility.IDispatchExtensions
- uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  isExternal: true
  name: InvokeMethod(Object, String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object())
  name.vb: InvokeMethod(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  isExternal: true
  name: ToStringInvariant(Object)
  nameWithType: InvariantString.ToStringInvariant(Object)
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString
  commentId: T:Microsoft.Health.Utility.InvariantString
  parent: Microsoft.Health.Utility
  isExternal: false
  name: InvariantString
  nameWithType: InvariantString
  fullName: Microsoft.Health.Utility.InvariantString
- uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  isExternal: false
  name: ValueOrDbNull<T>(T)
  nameWithType: TypeHelper.ValueOrDbNull<T>(T)
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>(T)
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of T)(T)
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)(T)
  name.vb: ValueOrDbNull(Of T)(T)
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull<T>
    nameWithType: TypeHelper.ValueOrDbNull<T>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull(Of T)
    nameWithType: TypeHelper.ValueOrDbNull(Of T)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.TypeHelper
  commentId: T:Microsoft.Health.Utility.TypeHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: TypeHelper
  nameWithType: TypeHelper
  fullName: Microsoft.Health.Utility.TypeHelper
- uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  isExternal: true
  name: ToXml(Object)
  nameWithType: WCXmlHelper.ToXml(Object)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.WCXmlHelper
  commentId: T:Microsoft.Health.Utility.WCXmlHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: WCXmlHelper
  nameWithType: WCXmlHelper
  fullName: Microsoft.Health.Utility.WCXmlHelper
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: Microsoft.Health.PhraseAnalyzer.PhraseTrie.#ctor*
  commentId: Overload:Microsoft.Health.PhraseAnalyzer.PhraseTrie.#ctor
  isExternal: false
  name: PhraseTrie
  nameWithType: PhraseTrie.PhraseTrie
  fullName: Microsoft.Health.PhraseAnalyzer.PhraseTrie.PhraseTrie
