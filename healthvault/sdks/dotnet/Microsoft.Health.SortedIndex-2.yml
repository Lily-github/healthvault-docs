### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.SortedIndex`2
  commentId: T:Microsoft.Health.SortedIndex`2
  id: SortedIndex`2
  parent: Microsoft.Health
  children:
  - Microsoft.Health.SortedIndex`2.#ctor(System.Collections.Generic.IComparer{`0})
  - Microsoft.Health.SortedIndex`2.#ctor(System.Collections.Generic.IComparer{`0},System.Int32)
  - Microsoft.Health.SortedIndex`2.Add(`0,`1)
  - Microsoft.Health.SortedIndex`2.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  - Microsoft.Health.SortedIndex`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})
  - Microsoft.Health.SortedIndex`2.BuildIndex
  - Microsoft.Health.SortedIndex`2.BuildIndex(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  - Microsoft.Health.SortedIndex`2.Compare(`0,`0)
  - Microsoft.Health.SortedIndex`2.ContainsKey(`0)
  - Microsoft.Health.SortedIndex`2.Count
  - Microsoft.Health.SortedIndex`2.EnsureCapacity(System.Int32)
  - Microsoft.Health.SortedIndex`2.EnsureReady
  - Microsoft.Health.SortedIndex`2.Get(`0,`1@)
  - Microsoft.Health.SortedIndex`2.Get(`0,System.Collections.Generic.IComparer{`0},`1@)
  - Microsoft.Health.SortedIndex`2.GetEnumerator
  - Microsoft.Health.SortedIndex`2.GetKeys(`0,System.Collections.Generic.IComparer{`0})
  - Microsoft.Health.SortedIndex`2.GetMultiple(`0)
  - Microsoft.Health.SortedIndex`2.IndexOf(`0)
  - Microsoft.Health.SortedIndex`2.IndexOf(`0,System.Collections.Generic.IComparer{`0})
  - Microsoft.Health.SortedIndex`2.IsReady
  - Microsoft.Health.SortedIndex`2.Item(System.Int32)
  - Microsoft.Health.SortedIndex`2.Keys
  - Microsoft.Health.SortedIndex`2.SetValue(`0,`1)
  - Microsoft.Health.SortedIndex`2.SetValueAt(System.Int32,`1)
  - Microsoft.Health.SortedIndex`2.System#Collections#IEnumerable#GetEnumerator
  - Microsoft.Health.SortedIndex`2.Values
  langs:
  - csharp
  - vb
  name: SortedIndex<K, V>
  nameWithType: SortedIndex<K, V>
  fullName: Microsoft.Health.SortedIndex<K, V>
  type: Class
  source:
    remote:
      path: Microsoft.Health.Utility/search/SortedIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SortedIndex
    path: ../Microsoft.Health.Utility/search/SortedIndex.cs
    startLine: 25
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\nSorted Index keeps an efficient in memory sorted index.\n"
  example: []
  syntax:
    content: >-
      [Serializable]

      public class SortedIndex<K, V> : IIndex<K, V>, IEnumerable<KeyValuePair<K, V>>, IEnumerable, IComparer<K>
    content.vb: >-
      <Serializable>

      Public Class SortedIndex(Of K, V)
          Implements IIndex(Of K, V), IEnumerable(Of KeyValuePair(Of K, V)), IEnumerable, IComparer(Of K)
    typeParameters:
    - id: K
      description: ''
    - id: V
      description: ''
  inheritance:
  - System.Object
  derivedClasses:
  - Microsoft.Health.InvertedIndex.SearchIndex`2
  implements:
  - Microsoft.Health.IIndex{{K},{V}}
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{K},{V}}}
  - System.Collections.IEnumerable
  - System.Collections.Generic.IComparer{{K}}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - Microsoft.Health.SortedIndex`2.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  - System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  nameWithType.vb: SortedIndex(Of K, V)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V)
  name.vb: SortedIndex(Of K, V)
- uid: Microsoft.Health.SortedIndex`2.#ctor(System.Collections.Generic.IComparer{`0})
  commentId: M:Microsoft.Health.SortedIndex`2.#ctor(System.Collections.Generic.IComparer{`0})
  id: '#ctor(System.Collections.Generic.IComparer{`0})'
  parent: Microsoft.Health.SortedIndex`2
  langs:
  - csharp
  - vb
  name: SortedIndex(IComparer<K>)
  nameWithType: SortedIndex<K, V>.SortedIndex(IComparer<K>)
  fullName: Microsoft.Health.SortedIndex<K, V>.SortedIndex(System.Collections.Generic.IComparer<K>)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/SortedIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health.Utility/search/SortedIndex.cs
    startLine: 39
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public SortedIndex(IComparer<K> keyComparer)
    content.vb: Public Sub New(keyComparer As IComparer(Of K))
    parameters:
    - id: keyComparer
      type: System.Collections.Generic.IComparer{{K}}
      description: ''
  overload: Microsoft.Health.SortedIndex`2.#ctor*
  nameWithType.vb: SortedIndex(Of K, V).SortedIndex(IComparer(Of K))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).SortedIndex(System.Collections.Generic.IComparer(Of K))
  name.vb: SortedIndex(IComparer(Of K))
- uid: Microsoft.Health.SortedIndex`2.#ctor(System.Collections.Generic.IComparer{`0},System.Int32)
  commentId: M:Microsoft.Health.SortedIndex`2.#ctor(System.Collections.Generic.IComparer{`0},System.Int32)
  id: '#ctor(System.Collections.Generic.IComparer{`0},System.Int32)'
  parent: Microsoft.Health.SortedIndex`2
  langs:
  - csharp
  - vb
  name: SortedIndex(IComparer<K>, Int32)
  nameWithType: SortedIndex<K, V>.SortedIndex(IComparer<K>, Int32)
  fullName: Microsoft.Health.SortedIndex<K, V>.SortedIndex(System.Collections.Generic.IComparer<K>, System.Int32)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/SortedIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health.Utility/search/SortedIndex.cs
    startLine: 49
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public SortedIndex(IComparer<K> keyComparer, int growBy)
    content.vb: Public Sub New(keyComparer As IComparer(Of K), growBy As Integer)
    parameters:
    - id: keyComparer
      type: System.Collections.Generic.IComparer{{K}}
      description: ''
    - id: growBy
      type: System.Int32
      description: ''
  overload: Microsoft.Health.SortedIndex`2.#ctor*
  nameWithType.vb: SortedIndex(Of K, V).SortedIndex(IComparer(Of K), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).SortedIndex(System.Collections.Generic.IComparer(Of K), System.Int32)
  name.vb: SortedIndex(IComparer(Of K), Int32)
- uid: Microsoft.Health.SortedIndex`2.Count
  commentId: P:Microsoft.Health.SortedIndex`2.Count
  id: Count
  parent: Microsoft.Health.SortedIndex`2
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: SortedIndex<K, V>.Count
  fullName: Microsoft.Health.SortedIndex<K, V>.Count
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/SortedIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Count
    path: ../Microsoft.Health.Utility/search/SortedIndex.cs
    startLine: 65
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
  overload: Microsoft.Health.SortedIndex`2.Count*
  nameWithType.vb: SortedIndex(Of K, V).Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).Count
- uid: Microsoft.Health.SortedIndex`2.Item(System.Int32)
  commentId: P:Microsoft.Health.SortedIndex`2.Item(System.Int32)
  id: Item(System.Int32)
  parent: Microsoft.Health.SortedIndex`2
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: SortedIndex<K, V>.Item[Int32]
  fullName: Microsoft.Health.SortedIndex<K, V>.Item[System.Int32]
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/SortedIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: this[]
    path: ../Microsoft.Health.Utility/search/SortedIndex.cs
    startLine: 78
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public KeyValuePair<K, V> this[int i] { get; }
    content.vb: Public ReadOnly Property Item(i As Integer) As KeyValuePair(Of K, V)
    parameters:
    - id: i
      type: System.Int32
      description: ''
    return:
      type: System.Collections.Generic.KeyValuePair{{K},{V}}
      description: ''
  overload: Microsoft.Health.SortedIndex`2.Item*
  nameWithType.vb: SortedIndex(Of K, V).Item(Int32)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).Item(System.Int32)
  name.vb: Item(Int32)
- uid: Microsoft.Health.SortedIndex`2.IsReady
  commentId: P:Microsoft.Health.SortedIndex`2.IsReady
  id: IsReady
  parent: Microsoft.Health.SortedIndex`2
  langs:
  - csharp
  - vb
  name: IsReady
  nameWithType: SortedIndex<K, V>.IsReady
  fullName: Microsoft.Health.SortedIndex<K, V>.IsReady
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/SortedIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IsReady
    path: ../Microsoft.Health.Utility/search/SortedIndex.cs
    startLine: 94
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public bool IsReady { get; }
    content.vb: Public ReadOnly Property IsReady As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.Health.SortedIndex`2.IsReady*
  nameWithType.vb: SortedIndex(Of K, V).IsReady
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).IsReady
- uid: Microsoft.Health.SortedIndex`2.Keys
  commentId: P:Microsoft.Health.SortedIndex`2.Keys
  id: Keys
  parent: Microsoft.Health.SortedIndex`2
  langs:
  - csharp
  - vb
  name: Keys
  nameWithType: SortedIndex<K, V>.Keys
  fullName: Microsoft.Health.SortedIndex<K, V>.Keys
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/SortedIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Keys
    path: ../Microsoft.Health.Utility/search/SortedIndex.cs
    startLine: 105
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public IEnumerable<K> Keys { get; }
    content.vb: Public ReadOnly Property Keys As IEnumerable(Of K)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{{K}}
  overload: Microsoft.Health.SortedIndex`2.Keys*
  implements:
  - Microsoft.Health.IIndex{{K},{V}}.Keys
  nameWithType.vb: SortedIndex(Of K, V).Keys
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).Keys
- uid: Microsoft.Health.SortedIndex`2.Values
  commentId: P:Microsoft.Health.SortedIndex`2.Values
  id: Values
  parent: Microsoft.Health.SortedIndex`2
  langs:
  - csharp
  - vb
  name: Values
  nameWithType: SortedIndex<K, V>.Values
  fullName: Microsoft.Health.SortedIndex<K, V>.Values
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/SortedIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Values
    path: ../Microsoft.Health.Utility/search/SortedIndex.cs
    startLine: 117
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public IEnumerable<V> Values { get; }
    content.vb: Public ReadOnly Property Values As IEnumerable(Of V)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{{V}}
  overload: Microsoft.Health.SortedIndex`2.Values*
  nameWithType.vb: SortedIndex(Of K, V).Values
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).Values
- uid: Microsoft.Health.SortedIndex`2.ContainsKey(`0)
  commentId: M:Microsoft.Health.SortedIndex`2.ContainsKey(`0)
  id: ContainsKey(`0)
  parent: Microsoft.Health.SortedIndex`2
  langs:
  - csharp
  - vb
  name: ContainsKey(K)
  nameWithType: SortedIndex<K, V>.ContainsKey(K)
  fullName: Microsoft.Health.SortedIndex<K, V>.ContainsKey(K)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/SortedIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ContainsKey
    path: ../Microsoft.Health.Utility/search/SortedIndex.cs
    startLine: 131
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public bool ContainsKey(K key)
    content.vb: Public Function ContainsKey(key As K) As Boolean
    parameters:
    - id: key
      type: '{K}'
      description: ''
    return:
      type: System.Boolean
      description: ''
  overload: Microsoft.Health.SortedIndex`2.ContainsKey*
  implements:
  - Microsoft.Health.IIndex{{K},{V}}.ContainsKey({K})
  nameWithType.vb: SortedIndex(Of K, V).ContainsKey(K)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).ContainsKey(K)
- uid: Microsoft.Health.SortedIndex`2.Get(`0,`1@)
  commentId: M:Microsoft.Health.SortedIndex`2.Get(`0,`1@)
  id: Get(`0,`1@)
  parent: Microsoft.Health.SortedIndex`2
  langs:
  - csharp
  - vb
  name: Get(K, out V)
  nameWithType: SortedIndex<K, V>.Get(K, out V)
  fullName: Microsoft.Health.SortedIndex<K, V>.Get(K, out V)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/SortedIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Get
    path: ../Microsoft.Health.Utility/search/SortedIndex.cs
    startLine: 142
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public bool Get(K key, out V value)
    content.vb: Public Function Get(key As K, ByRef value As V) As Boolean
    parameters:
    - id: key
      type: '{K}'
      description: ''
    - id: value
      type: '{V}'
      description: ''
    return:
      type: System.Boolean
      description: ''
  overload: Microsoft.Health.SortedIndex`2.Get*
  implements:
  - Microsoft.Health.IIndex{{K},{V}}.Get({K},{V}@)
  nameWithType.vb: SortedIndex(Of K, V).Get(K, ByRef V)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).Get(K, ByRef V)
  name.vb: Get(K, ByRef V)
- uid: Microsoft.Health.SortedIndex`2.Get(`0,System.Collections.Generic.IComparer{`0},`1@)
  commentId: M:Microsoft.Health.SortedIndex`2.Get(`0,System.Collections.Generic.IComparer{`0},`1@)
  id: Get(`0,System.Collections.Generic.IComparer{`0},`1@)
  parent: Microsoft.Health.SortedIndex`2
  langs:
  - csharp
  - vb
  name: Get(K, IComparer<K>, out V)
  nameWithType: SortedIndex<K, V>.Get(K, IComparer<K>, out V)
  fullName: Microsoft.Health.SortedIndex<K, V>.Get(K, System.Collections.Generic.IComparer<K>, out V)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/SortedIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Get
    path: ../Microsoft.Health.Utility/search/SortedIndex.cs
    startLine: 154
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public bool Get(K key, IComparer<K> keyComparer, out V value)
    content.vb: Public Function Get(key As K, keyComparer As IComparer(Of K), ByRef value As V) As Boolean
    parameters:
    - id: key
      type: '{K}'
      description: ''
    - id: keyComparer
      type: System.Collections.Generic.IComparer{{K}}
      description: ''
    - id: value
      type: '{V}'
      description: ''
    return:
      type: System.Boolean
      description: ''
  overload: Microsoft.Health.SortedIndex`2.Get*
  nameWithType.vb: SortedIndex(Of K, V).Get(K, IComparer(Of K), ByRef V)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).Get(K, System.Collections.Generic.IComparer(Of K), ByRef V)
  name.vb: Get(K, IComparer(Of K), ByRef V)
- uid: Microsoft.Health.SortedIndex`2.GetMultiple(`0)
  commentId: M:Microsoft.Health.SortedIndex`2.GetMultiple(`0)
  id: GetMultiple(`0)
  parent: Microsoft.Health.SortedIndex`2
  langs:
  - csharp
  - vb
  name: GetMultiple(K)
  nameWithType: SortedIndex<K, V>.GetMultiple(K)
  fullName: Microsoft.Health.SortedIndex<K, V>.GetMultiple(K)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/SortedIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetMultiple
    path: ../Microsoft.Health.Utility/search/SortedIndex.cs
    startLine: 172
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public IEnumerable<V> GetMultiple(K key)
    content.vb: Public Function GetMultiple(key As K) As IEnumerable(Of V)
    parameters:
    - id: key
      type: '{K}'
      description: ''
    return:
      type: System.Collections.Generic.IEnumerable{{V}}
      description: ''
  overload: Microsoft.Health.SortedIndex`2.GetMultiple*
  nameWithType.vb: SortedIndex(Of K, V).GetMultiple(K)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).GetMultiple(K)
- uid: Microsoft.Health.SortedIndex`2.GetKeys(`0,System.Collections.Generic.IComparer{`0})
  commentId: M:Microsoft.Health.SortedIndex`2.GetKeys(`0,System.Collections.Generic.IComparer{`0})
  id: GetKeys(`0,System.Collections.Generic.IComparer{`0})
  parent: Microsoft.Health.SortedIndex`2
  langs:
  - csharp
  - vb
  name: GetKeys(K, IComparer<K>)
  nameWithType: SortedIndex<K, V>.GetKeys(K, IComparer<K>)
  fullName: Microsoft.Health.SortedIndex<K, V>.GetKeys(K, System.Collections.Generic.IComparer<K>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/SortedIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetKeys
    path: ../Microsoft.Health.Utility/search/SortedIndex.cs
    startLine: 193
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\nReturn all keys that match the given base key\n"
  example: []
  syntax:
    content: public IEnumerable<K> GetKeys(K baseKey, IComparer<K> keyComparer)
    content.vb: Public Function GetKeys(baseKey As K, keyComparer As IComparer(Of K)) As IEnumerable(Of K)
    parameters:
    - id: baseKey
      type: '{K}'
    - id: keyComparer
      type: System.Collections.Generic.IComparer{{K}}
    return:
      type: System.Collections.Generic.IEnumerable{{K}}
  overload: Microsoft.Health.SortedIndex`2.GetKeys*
  nameWithType.vb: SortedIndex(Of K, V).GetKeys(K, IComparer(Of K))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).GetKeys(K, System.Collections.Generic.IComparer(Of K))
  name.vb: GetKeys(K, IComparer(Of K))
- uid: Microsoft.Health.SortedIndex`2.Add(`0,`1)
  commentId: M:Microsoft.Health.SortedIndex`2.Add(`0,`1)
  id: Add(`0,`1)
  parent: Microsoft.Health.SortedIndex`2
  langs:
  - csharp
  - vb
  name: Add(K, V)
  nameWithType: SortedIndex<K, V>.Add(K, V)
  fullName: Microsoft.Health.SortedIndex<K, V>.Add(K, V)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/SortedIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Add
    path: ../Microsoft.Health.Utility/search/SortedIndex.cs
    startLine: 256
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public void Add(K key, V value)
    content.vb: Public Sub Add(key As K, value As V)
    parameters:
    - id: key
      type: '{K}'
      description: ''
    - id: value
      type: '{V}'
      description: ''
  overload: Microsoft.Health.SortedIndex`2.Add*
  nameWithType.vb: SortedIndex(Of K, V).Add(K, V)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).Add(K, V)
- uid: Microsoft.Health.SortedIndex`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})
  commentId: M:Microsoft.Health.SortedIndex`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})
  id: Add(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: Microsoft.Health.SortedIndex`2
  langs:
  - csharp
  - vb
  name: Add(KeyValuePair<K, V>)
  nameWithType: SortedIndex<K, V>.Add(KeyValuePair<K, V>)
  fullName: Microsoft.Health.SortedIndex<K, V>.Add(System.Collections.Generic.KeyValuePair<K, V>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/SortedIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Add
    path: ../Microsoft.Health.Utility/search/SortedIndex.cs
    startLine: 268
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public void Add(KeyValuePair<K, V> kv)
    content.vb: Public Sub Add(kv As KeyValuePair(Of K, V))
    parameters:
    - id: kv
      type: System.Collections.Generic.KeyValuePair{{K},{V}}
      description: ''
  overload: Microsoft.Health.SortedIndex`2.Add*
  nameWithType.vb: SortedIndex(Of K, V).Add(KeyValuePair(Of K, V))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).Add(System.Collections.Generic.KeyValuePair(Of K, V))
  name.vb: Add(KeyValuePair(Of K, V))
- uid: Microsoft.Health.SortedIndex`2.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  commentId: M:Microsoft.Health.SortedIndex`2.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  id: Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  parent: Microsoft.Health.SortedIndex`2
  langs:
  - csharp
  - vb
  name: Add(IEnumerable<KeyValuePair<K, V>>)
  nameWithType: SortedIndex<K, V>.Add(IEnumerable<KeyValuePair<K, V>>)
  fullName: Microsoft.Health.SortedIndex<K, V>.Add(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<K, V>>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/SortedIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Add
    path: ../Microsoft.Health.Utility/search/SortedIndex.cs
    startLine: 277
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public void Add(IEnumerable<KeyValuePair<K, V>> kvPairs)
    content.vb: Public Sub Add(kvPairs As IEnumerable(Of KeyValuePair(Of K, V)))
    parameters:
    - id: kvPairs
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{K},{V}}}
      description: ''
  overload: Microsoft.Health.SortedIndex`2.Add*
  nameWithType.vb: SortedIndex(Of K, V).Add(IEnumerable(Of KeyValuePair(Of K, V)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).Add(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of K, V)))
  name.vb: Add(IEnumerable(Of KeyValuePair(Of K, V)))
- uid: Microsoft.Health.SortedIndex`2.SetValue(`0,`1)
  commentId: M:Microsoft.Health.SortedIndex`2.SetValue(`0,`1)
  id: SetValue(`0,`1)
  parent: Microsoft.Health.SortedIndex`2
  langs:
  - csharp
  - vb
  name: SetValue(K, V)
  nameWithType: SortedIndex<K, V>.SetValue(K, V)
  fullName: Microsoft.Health.SortedIndex<K, V>.SetValue(K, V)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/SortedIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SetValue
    path: ../Microsoft.Health.Utility/search/SortedIndex.cs
    startLine: 290
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public void SetValue(K key, V value)
    content.vb: Public Sub SetValue(key As K, value As V)
    parameters:
    - id: key
      type: '{K}'
      description: ''
    - id: value
      type: '{V}'
      description: ''
  overload: Microsoft.Health.SortedIndex`2.SetValue*
  nameWithType.vb: SortedIndex(Of K, V).SetValue(K, V)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).SetValue(K, V)
- uid: Microsoft.Health.SortedIndex`2.SetValueAt(System.Int32,`1)
  commentId: M:Microsoft.Health.SortedIndex`2.SetValueAt(System.Int32,`1)
  id: SetValueAt(System.Int32,`1)
  parent: Microsoft.Health.SortedIndex`2
  langs:
  - csharp
  - vb
  name: SetValueAt(Int32, V)
  nameWithType: SortedIndex<K, V>.SetValueAt(Int32, V)
  fullName: Microsoft.Health.SortedIndex<K, V>.SetValueAt(System.Int32, V)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/SortedIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SetValueAt
    path: ../Microsoft.Health.Utility/search/SortedIndex.cs
    startLine: 311
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public void SetValueAt(int i, V value)
    content.vb: Public Sub SetValueAt(i As Integer, value As V)
    parameters:
    - id: i
      type: System.Int32
      description: ''
    - id: value
      type: '{V}'
      description: ''
  overload: Microsoft.Health.SortedIndex`2.SetValueAt*
  nameWithType.vb: SortedIndex(Of K, V).SetValueAt(Int32, V)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).SetValueAt(System.Int32, V)
- uid: Microsoft.Health.SortedIndex`2.BuildIndex
  commentId: M:Microsoft.Health.SortedIndex`2.BuildIndex
  id: BuildIndex
  parent: Microsoft.Health.SortedIndex`2
  langs:
  - csharp
  - vb
  name: BuildIndex()
  nameWithType: SortedIndex<K, V>.BuildIndex()
  fullName: Microsoft.Health.SortedIndex<K, V>.BuildIndex()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/SortedIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: BuildIndex
    path: ../Microsoft.Health.Utility/search/SortedIndex.cs
    startLine: 324
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public void BuildIndex()
    content.vb: Public Sub BuildIndex
  overload: Microsoft.Health.SortedIndex`2.BuildIndex*
  nameWithType.vb: SortedIndex(Of K, V).BuildIndex()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).BuildIndex()
- uid: Microsoft.Health.SortedIndex`2.BuildIndex(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  commentId: M:Microsoft.Health.SortedIndex`2.BuildIndex(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  id: BuildIndex(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  parent: Microsoft.Health.SortedIndex`2
  langs:
  - csharp
  - vb
  name: BuildIndex(IEnumerable<KeyValuePair<K, V>>)
  nameWithType: SortedIndex<K, V>.BuildIndex(IEnumerable<KeyValuePair<K, V>>)
  fullName: Microsoft.Health.SortedIndex<K, V>.BuildIndex(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<K, V>>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/SortedIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: BuildIndex
    path: ../Microsoft.Health.Utility/search/SortedIndex.cs
    startLine: 340
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public void BuildIndex(IEnumerable<KeyValuePair<K, V>> kvPairs)
    content.vb: Public Sub BuildIndex(kvPairs As IEnumerable(Of KeyValuePair(Of K, V)))
    parameters:
    - id: kvPairs
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{K},{V}}}
      description: ''
  overload: Microsoft.Health.SortedIndex`2.BuildIndex*
  nameWithType.vb: SortedIndex(Of K, V).BuildIndex(IEnumerable(Of KeyValuePair(Of K, V)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).BuildIndex(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of K, V)))
  name.vb: BuildIndex(IEnumerable(Of KeyValuePair(Of K, V)))
- uid: Microsoft.Health.SortedIndex`2.EnsureCapacity(System.Int32)
  commentId: M:Microsoft.Health.SortedIndex`2.EnsureCapacity(System.Int32)
  id: EnsureCapacity(System.Int32)
  parent: Microsoft.Health.SortedIndex`2
  langs:
  - csharp
  - vb
  name: EnsureCapacity(Int32)
  nameWithType: SortedIndex<K, V>.EnsureCapacity(Int32)
  fullName: Microsoft.Health.SortedIndex<K, V>.EnsureCapacity(System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/SortedIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: EnsureCapacity
    path: ../Microsoft.Health.Utility/search/SortedIndex.cs
    startLine: 350
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public void EnsureCapacity(int capacity)
    content.vb: Public Sub EnsureCapacity(capacity As Integer)
    parameters:
    - id: capacity
      type: System.Int32
      description: ''
  overload: Microsoft.Health.SortedIndex`2.EnsureCapacity*
  nameWithType.vb: SortedIndex(Of K, V).EnsureCapacity(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).EnsureCapacity(System.Int32)
- uid: Microsoft.Health.SortedIndex`2.IndexOf(`0)
  commentId: M:Microsoft.Health.SortedIndex`2.IndexOf(`0)
  id: IndexOf(`0)
  parent: Microsoft.Health.SortedIndex`2
  langs:
  - csharp
  - vb
  name: IndexOf(K)
  nameWithType: SortedIndex<K, V>.IndexOf(K)
  fullName: Microsoft.Health.SortedIndex<K, V>.IndexOf(K)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/SortedIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IndexOf
    path: ../Microsoft.Health.Utility/search/SortedIndex.cs
    startLine: 369
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public int IndexOf(K key)
    content.vb: Public Function IndexOf(key As K) As Integer
    parameters:
    - id: key
      type: '{K}'
      description: ''
    return:
      type: System.Int32
      description: ''
  overload: Microsoft.Health.SortedIndex`2.IndexOf*
  nameWithType.vb: SortedIndex(Of K, V).IndexOf(K)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).IndexOf(K)
- uid: Microsoft.Health.SortedIndex`2.IndexOf(`0,System.Collections.Generic.IComparer{`0})
  commentId: M:Microsoft.Health.SortedIndex`2.IndexOf(`0,System.Collections.Generic.IComparer{`0})
  id: IndexOf(`0,System.Collections.Generic.IComparer{`0})
  parent: Microsoft.Health.SortedIndex`2
  langs:
  - csharp
  - vb
  name: IndexOf(K, IComparer<K>)
  nameWithType: SortedIndex<K, V>.IndexOf(K, IComparer<K>)
  fullName: Microsoft.Health.SortedIndex<K, V>.IndexOf(K, System.Collections.Generic.IComparer<K>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/SortedIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IndexOf
    path: ../Microsoft.Health.Utility/search/SortedIndex.cs
    startLine: 380
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public int IndexOf(K key, IComparer<K> keyComparer)
    content.vb: Public Function IndexOf(key As K, keyComparer As IComparer(Of K)) As Integer
    parameters:
    - id: key
      type: '{K}'
      description: ''
    - id: keyComparer
      type: System.Collections.Generic.IComparer{{K}}
      description: ''
    return:
      type: System.Int32
      description: ''
  overload: Microsoft.Health.SortedIndex`2.IndexOf*
  nameWithType.vb: SortedIndex(Of K, V).IndexOf(K, IComparer(Of K))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).IndexOf(K, System.Collections.Generic.IComparer(Of K))
  name.vb: IndexOf(K, IComparer(Of K))
- uid: Microsoft.Health.SortedIndex`2.EnsureReady
  commentId: M:Microsoft.Health.SortedIndex`2.EnsureReady
  id: EnsureReady
  parent: Microsoft.Health.SortedIndex`2
  langs:
  - csharp
  - vb
  name: EnsureReady()
  nameWithType: SortedIndex<K, V>.EnsureReady()
  fullName: Microsoft.Health.SortedIndex<K, V>.EnsureReady()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/SortedIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: EnsureReady
    path: ../Microsoft.Health.Utility/search/SortedIndex.cs
    startLine: 413
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public void EnsureReady()
    content.vb: Public Sub EnsureReady
  overload: Microsoft.Health.SortedIndex`2.EnsureReady*
  nameWithType.vb: SortedIndex(Of K, V).EnsureReady()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).EnsureReady()
- uid: Microsoft.Health.SortedIndex`2.GetEnumerator
  commentId: M:Microsoft.Health.SortedIndex`2.GetEnumerator
  id: GetEnumerator
  parent: Microsoft.Health.SortedIndex`2
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: SortedIndex<K, V>.GetEnumerator()
  fullName: Microsoft.Health.SortedIndex<K, V>.GetEnumerator()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/SortedIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetEnumerator
    path: ../Microsoft.Health.Utility/search/SortedIndex.cs
    startLine: 425
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public IEnumerator<KeyValuePair<K, V>> GetEnumerator()
    content.vb: Public Function GetEnumerator As IEnumerator(Of KeyValuePair(Of K, V))
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{K},{V}}}
      description: ''
  overload: Microsoft.Health.SortedIndex`2.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{K},{V}}}.GetEnumerator
  nameWithType.vb: SortedIndex(Of K, V).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).GetEnumerator()
- uid: Microsoft.Health.SortedIndex`2.System#Collections#IEnumerable#GetEnumerator
  commentId: M:Microsoft.Health.SortedIndex`2.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: Microsoft.Health.SortedIndex`2
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: SortedIndex<K, V>.IEnumerable.GetEnumerator()
  fullName: Microsoft.Health.SortedIndex<K, V>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/SortedIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: System.Collections.IEnumerable.GetEnumerator
    path: ../Microsoft.Health.Utility/search/SortedIndex.cs
    startLine: 434
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
  overload: Microsoft.Health.SortedIndex`2.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: SortedIndex(Of K, V).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: Microsoft.Health.SortedIndex`2.Compare(`0,`0)
  commentId: M:Microsoft.Health.SortedIndex`2.Compare(`0,`0)
  id: Compare(`0,`0)
  parent: Microsoft.Health.SortedIndex`2
  langs:
  - csharp
  - vb
  name: Compare(K, K)
  nameWithType: SortedIndex<K, V>.Compare(K, K)
  fullName: Microsoft.Health.SortedIndex<K, V>.Compare(K, K)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/SortedIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Compare
    path: ../Microsoft.Health.Utility/search/SortedIndex.cs
    startLine: 445
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\nUsed for Multiple Match scenarios\n"
  example: []
  syntax:
    content: public int Compare(K x, K y)
    content.vb: Public Function Compare(x As K, y As K) As Integer
    parameters:
    - id: x
      type: '{K}'
      description: ''
    - id: y
      type: '{K}'
      description: ''
    return:
      type: System.Int32
      description: ''
  overload: Microsoft.Health.SortedIndex`2.Compare*
  implements:
  - System.Collections.Generic.IComparer{{K}}.Compare({K},{K})
  nameWithType.vb: SortedIndex(Of K, V).Compare(K, K)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).Compare(K, K)
references:
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Health.IIndex{{K},{V}}
  commentId: T:Microsoft.Health.IIndex{`0,`1}
  parent: Microsoft.Health
  definition: Microsoft.Health.IIndex`2
  name: IIndex<K, V>
  nameWithType: IIndex<K, V>
  fullName: Microsoft.Health.IIndex<K, V>
  nameWithType.vb: IIndex(Of K, V)
  fullName.vb: Microsoft.Health.IIndex(Of K, V)
  name.vb: IIndex(Of K, V)
  spec.csharp:
  - uid: Microsoft.Health.IIndex`2
    name: IIndex
    nameWithType: IIndex
    fullName: Microsoft.Health.IIndex
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.IIndex`2
    name: IIndex
    nameWithType: IIndex
    fullName: Microsoft.Health.IIndex
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{K},{V}}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<K, V>>
  nameWithType: IEnumerable<KeyValuePair<K, V>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<K, V>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of K, V))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of K, V))
  name.vb: IEnumerable(Of KeyValuePair(Of K, V))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.Generic.IComparer{{K}}
  commentId: T:System.Collections.Generic.IComparer{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<K>
  nameWithType: IComparer<K>
  fullName: System.Collections.Generic.IComparer<K>
  nameWithType.vb: IComparer(Of K)
  fullName.vb: System.Collections.Generic.IComparer(Of K)
  name.vb: IComparer(Of K)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  name: SetProperty(String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object())
  name.vb: SetProperty(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  name: InvokeMethod(String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object())
  name.vb: InvokeMethod(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  parent: Microsoft.Health.Utility.InvariantString
  definition: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  name: ToStringInvariant()
  nameWithType: InvariantString.ToStringInvariant()
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant()
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex`2.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  parent: Microsoft.Health.Utility.TypeHelper
  definition: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  name: ValueOrDbNull<SortedIndex<K, V>>()
  nameWithType: TypeHelper.ValueOrDbNull<SortedIndex<K, V>>()
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.SortedIndex<K, V>>()
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of SortedIndex(Of K, V))()
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.SortedIndex(Of K, V))()
  name.vb: ValueOrDbNull(Of SortedIndex(Of K, V))()
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull<SortedIndex<K, V>>
    nameWithType: TypeHelper.ValueOrDbNull<SortedIndex<K, V>>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.SortedIndex<K, V>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull(Of SortedIndex(Of K, V))
    nameWithType: TypeHelper.ValueOrDbNull(Of SortedIndex(Of K, V))
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.SortedIndex(Of K, V))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  parent: Microsoft.Health.Utility.WCXmlHelper
  definition: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  name: ToXml()
  nameWithType: WCXmlHelper.ToXml()
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml()
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.IIndex`2
  commentId: T:Microsoft.Health.IIndex`2
  isExternal: false
  name: IIndex<K, V>
  nameWithType: IIndex<K, V>
  fullName: Microsoft.Health.IIndex<K, V>
  nameWithType.vb: IIndex(Of K, V)
  fullName.vb: Microsoft.Health.IIndex(Of K, V)
  name.vb: IIndex(Of K, V)
  spec.csharp:
  - uid: Microsoft.Health.IIndex`2
    name: IIndex
    nameWithType: IIndex
    fullName: Microsoft.Health.IIndex
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.IIndex`2
    name: IIndex
    nameWithType: IIndex
    fullName: Microsoft.Health.IIndex
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.IComparer`1
  commentId: T:System.Collections.Generic.IComparer`1
  isExternal: true
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  isExternal: true
  name: SetProperty(Object, String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object())
  name.vb: SetProperty(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions
  commentId: T:Microsoft.Health.Utility.IDispatchExtensions
  parent: Microsoft.Health.Utility
  isExternal: false
  name: IDispatchExtensions
  nameWithType: IDispatchExtensions
  fullName: Microsoft.Health.Utility.IDispatchExtensions
- uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  isExternal: true
  name: InvokeMethod(Object, String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object())
  name.vb: InvokeMethod(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  isExternal: true
  name: ToStringInvariant(Object)
  nameWithType: InvariantString.ToStringInvariant(Object)
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString
  commentId: T:Microsoft.Health.Utility.InvariantString
  parent: Microsoft.Health.Utility
  isExternal: false
  name: InvariantString
  nameWithType: InvariantString
  fullName: Microsoft.Health.Utility.InvariantString
- uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  isExternal: false
  name: ValueOrDbNull<T>(T)
  nameWithType: TypeHelper.ValueOrDbNull<T>(T)
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>(T)
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of T)(T)
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)(T)
  name.vb: ValueOrDbNull(Of T)(T)
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull<T>
    nameWithType: TypeHelper.ValueOrDbNull<T>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull(Of T)
    nameWithType: TypeHelper.ValueOrDbNull(Of T)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.TypeHelper
  commentId: T:Microsoft.Health.Utility.TypeHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: TypeHelper
  nameWithType: TypeHelper
  fullName: Microsoft.Health.Utility.TypeHelper
- uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  isExternal: true
  name: ToXml(Object)
  nameWithType: WCXmlHelper.ToXml(Object)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.WCXmlHelper
  commentId: T:Microsoft.Health.Utility.WCXmlHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: WCXmlHelper
  nameWithType: WCXmlHelper
  fullName: Microsoft.Health.Utility.WCXmlHelper
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: Microsoft.Health.SortedIndex`2.#ctor*
  commentId: Overload:Microsoft.Health.SortedIndex`2.#ctor
  isExternal: false
  name: SortedIndex
  nameWithType: SortedIndex<K, V>.SortedIndex
  fullName: Microsoft.Health.SortedIndex<K, V>.SortedIndex
  nameWithType.vb: SortedIndex(Of K, V).SortedIndex
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).SortedIndex
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Health.SortedIndex`2.Count*
  commentId: Overload:Microsoft.Health.SortedIndex`2.Count
  isExternal: false
  name: Count
  nameWithType: SortedIndex<K, V>.Count
  fullName: Microsoft.Health.SortedIndex<K, V>.Count
  nameWithType.vb: SortedIndex(Of K, V).Count
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).Count
- uid: Microsoft.Health.SortedIndex`2.Item*
  commentId: Overload:Microsoft.Health.SortedIndex`2.Item
  isExternal: false
  name: Item
  nameWithType: SortedIndex<K, V>.Item
  fullName: Microsoft.Health.SortedIndex<K, V>.Item
  nameWithType.vb: SortedIndex(Of K, V).Item
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).Item
- uid: System.Collections.Generic.KeyValuePair{{K},{V}}
  commentId: T:System.Collections.Generic.KeyValuePair{`0,`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.KeyValuePair`2
  name: KeyValuePair<K, V>
  nameWithType: KeyValuePair<K, V>
  fullName: System.Collections.Generic.KeyValuePair<K, V>
  nameWithType.vb: KeyValuePair(Of K, V)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of K, V)
  name.vb: KeyValuePair(Of K, V)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair`2
  commentId: T:System.Collections.Generic.KeyValuePair`2
  isExternal: true
  name: KeyValuePair<TKey, TValue>
  nameWithType: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  nameWithType.vb: KeyValuePair(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex`2.IsReady*
  commentId: Overload:Microsoft.Health.SortedIndex`2.IsReady
  isExternal: false
  name: IsReady
  nameWithType: SortedIndex<K, V>.IsReady
  fullName: Microsoft.Health.SortedIndex<K, V>.IsReady
  nameWithType.vb: SortedIndex(Of K, V).IsReady
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).IsReady
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Health.SortedIndex`2.Keys*
  commentId: Overload:Microsoft.Health.SortedIndex`2.Keys
  isExternal: false
  name: Keys
  nameWithType: SortedIndex<K, V>.Keys
  fullName: Microsoft.Health.SortedIndex<K, V>.Keys
  nameWithType.vb: SortedIndex(Of K, V).Keys
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).Keys
- uid: Microsoft.Health.IIndex{{K},{V}}.Keys
  commentId: P:Microsoft.Health.IIndex{`0,`1}.Keys
  parent: Microsoft.Health.IIndex{{K},{V}}
  definition: Microsoft.Health.IIndex`2.Keys
  name: Keys
  nameWithType: IIndex<K, V>.Keys
  fullName: Microsoft.Health.IIndex<K, V>.Keys
  nameWithType.vb: IIndex(Of K, V).Keys
  fullName.vb: Microsoft.Health.IIndex(Of K, V).Keys
- uid: System.Collections.Generic.IEnumerable{{K}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<K>
  nameWithType: IEnumerable<K>
  fullName: System.Collections.Generic.IEnumerable<K>
  nameWithType.vb: IEnumerable(Of K)
  fullName.vb: System.Collections.Generic.IEnumerable(Of K)
  name.vb: IEnumerable(Of K)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.IIndex`2.Keys
  commentId: P:Microsoft.Health.IIndex`2.Keys
  isExternal: false
  name: Keys
  nameWithType: IIndex<K, V>.Keys
  fullName: Microsoft.Health.IIndex<K, V>.Keys
  nameWithType.vb: IIndex(Of K, V).Keys
  fullName.vb: Microsoft.Health.IIndex(Of K, V).Keys
- uid: Microsoft.Health.SortedIndex`2.Values*
  commentId: Overload:Microsoft.Health.SortedIndex`2.Values
  isExternal: false
  name: Values
  nameWithType: SortedIndex<K, V>.Values
  fullName: Microsoft.Health.SortedIndex<K, V>.Values
  nameWithType.vb: SortedIndex(Of K, V).Values
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).Values
- uid: System.Collections.Generic.IEnumerable{{V}}
  commentId: T:System.Collections.Generic.IEnumerable{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<V>
  nameWithType: IEnumerable<V>
  fullName: System.Collections.Generic.IEnumerable<V>
  nameWithType.vb: IEnumerable(Of V)
  fullName.vb: System.Collections.Generic.IEnumerable(Of V)
  name.vb: IEnumerable(Of V)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex`2.ContainsKey*
  commentId: Overload:Microsoft.Health.SortedIndex`2.ContainsKey
  isExternal: false
  name: ContainsKey
  nameWithType: SortedIndex<K, V>.ContainsKey
  fullName: Microsoft.Health.SortedIndex<K, V>.ContainsKey
  nameWithType.vb: SortedIndex(Of K, V).ContainsKey
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).ContainsKey
- uid: Microsoft.Health.IIndex{{K},{V}}.ContainsKey({K})
  commentId: M:Microsoft.Health.IIndex{`0,`1}.ContainsKey(`0)
  parent: Microsoft.Health.IIndex{{K},{V}}
  definition: Microsoft.Health.IIndex`2.ContainsKey(`0)
  name: ContainsKey(K)
  nameWithType: IIndex<K, V>.ContainsKey(K)
  fullName: Microsoft.Health.IIndex<K, V>.ContainsKey(K)
  nameWithType.vb: IIndex(Of K, V).ContainsKey(K)
  fullName.vb: Microsoft.Health.IIndex(Of K, V).ContainsKey(K)
  spec.csharp:
  - uid: Microsoft.Health.IIndex`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IIndex<K, V>.ContainsKey
    fullName: Microsoft.Health.IIndex<K, V>.ContainsKey
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.IIndex`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IIndex(Of K, V).ContainsKey
    fullName: Microsoft.Health.IIndex(Of K, V).ContainsKey
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
- uid: '{K}'
  commentId: '!:K'
  definition: K
  name: K
  nameWithType: K
  fullName: K
- uid: Microsoft.Health.IIndex`2.ContainsKey(`0)
  commentId: M:Microsoft.Health.IIndex`2.ContainsKey(`0)
  isExternal: false
  name: ContainsKey(K)
  nameWithType: IIndex<K, V>.ContainsKey(K)
  fullName: Microsoft.Health.IIndex<K, V>.ContainsKey(K)
  nameWithType.vb: IIndex(Of K, V).ContainsKey(K)
  fullName.vb: Microsoft.Health.IIndex(Of K, V).ContainsKey(K)
  spec.csharp:
  - uid: Microsoft.Health.IIndex`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IIndex<K, V>.ContainsKey
    fullName: Microsoft.Health.IIndex<K, V>.ContainsKey
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.IIndex`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IIndex(Of K, V).ContainsKey
    fullName: Microsoft.Health.IIndex(Of K, V).ContainsKey
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
- uid: K
  isExternal: false
  name: K
  nameWithType: K
  fullName: K
- uid: Microsoft.Health.SortedIndex`2.Get*
  commentId: Overload:Microsoft.Health.SortedIndex`2.Get
  isExternal: false
  name: Get
  nameWithType: SortedIndex<K, V>.Get
  fullName: Microsoft.Health.SortedIndex<K, V>.Get
  nameWithType.vb: SortedIndex(Of K, V).Get
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).Get
- uid: Microsoft.Health.IIndex{{K},{V}}.Get({K},{V}@)
  commentId: M:Microsoft.Health.IIndex{`0,`1}.Get(`0,`1@)
  parent: Microsoft.Health.IIndex{{K},{V}}
  definition: Microsoft.Health.IIndex`2.Get(`0,`1@)
  name: Get(K, V)
  nameWithType: IIndex<K, V>.Get(K, V)
  fullName: Microsoft.Health.IIndex<K, V>.Get(K, V)
  nameWithType.vb: IIndex(Of K, V).Get(K, V)
  fullName.vb: Microsoft.Health.IIndex(Of K, V).Get(K, V)
  spec.csharp:
  - uid: Microsoft.Health.IIndex`2.Get(`0,`1@)
    name: Get
    nameWithType: IIndex<K, V>.Get
    fullName: Microsoft.Health.IIndex<K, V>.Get
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.IIndex`2.Get(`0,`1@)
    name: Get
    nameWithType: IIndex(Of K, V).Get
    fullName: Microsoft.Health.IIndex(Of K, V).Get
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: '{V}'
  commentId: '!:V'
  definition: V
  name: V
  nameWithType: V
  fullName: V
- uid: Microsoft.Health.IIndex`2.Get(`0,`1@)
  commentId: M:Microsoft.Health.IIndex`2.Get(`0,`1@)
  isExternal: false
  name: Get(K, V)
  nameWithType: IIndex<K, V>.Get(K, V)
  fullName: Microsoft.Health.IIndex<K, V>.Get(K, V)
  nameWithType.vb: IIndex(Of K, V).Get(K, V)
  fullName.vb: Microsoft.Health.IIndex(Of K, V).Get(K, V)
  spec.csharp:
  - uid: Microsoft.Health.IIndex`2.Get(`0,`1@)
    name: Get
    nameWithType: IIndex<K, V>.Get
    fullName: Microsoft.Health.IIndex<K, V>.Get
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.IIndex`2.Get(`0,`1@)
    name: Get
    nameWithType: IIndex(Of K, V).Get
    fullName: Microsoft.Health.IIndex(Of K, V).Get
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: V
  isExternal: false
  name: V
  nameWithType: V
  fullName: V
- uid: Microsoft.Health.SortedIndex`2.GetMultiple*
  commentId: Overload:Microsoft.Health.SortedIndex`2.GetMultiple
  isExternal: false
  name: GetMultiple
  nameWithType: SortedIndex<K, V>.GetMultiple
  fullName: Microsoft.Health.SortedIndex<K, V>.GetMultiple
  nameWithType.vb: SortedIndex(Of K, V).GetMultiple
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).GetMultiple
- uid: Microsoft.Health.SortedIndex`2.GetKeys*
  commentId: Overload:Microsoft.Health.SortedIndex`2.GetKeys
  isExternal: false
  name: GetKeys
  nameWithType: SortedIndex<K, V>.GetKeys
  fullName: Microsoft.Health.SortedIndex<K, V>.GetKeys
  nameWithType.vb: SortedIndex(Of K, V).GetKeys
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).GetKeys
- uid: Microsoft.Health.SortedIndex`2.Add*
  commentId: Overload:Microsoft.Health.SortedIndex`2.Add
  isExternal: false
  name: Add
  nameWithType: SortedIndex<K, V>.Add
  fullName: Microsoft.Health.SortedIndex<K, V>.Add
  nameWithType.vb: SortedIndex(Of K, V).Add
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).Add
- uid: Microsoft.Health.SortedIndex`2.SetValue*
  commentId: Overload:Microsoft.Health.SortedIndex`2.SetValue
  isExternal: false
  name: SetValue
  nameWithType: SortedIndex<K, V>.SetValue
  fullName: Microsoft.Health.SortedIndex<K, V>.SetValue
  nameWithType.vb: SortedIndex(Of K, V).SetValue
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).SetValue
- uid: Microsoft.Health.SortedIndex`2.SetValueAt*
  commentId: Overload:Microsoft.Health.SortedIndex`2.SetValueAt
  isExternal: false
  name: SetValueAt
  nameWithType: SortedIndex<K, V>.SetValueAt
  fullName: Microsoft.Health.SortedIndex<K, V>.SetValueAt
  nameWithType.vb: SortedIndex(Of K, V).SetValueAt
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).SetValueAt
- uid: Microsoft.Health.SortedIndex`2.BuildIndex*
  commentId: Overload:Microsoft.Health.SortedIndex`2.BuildIndex
  isExternal: false
  name: BuildIndex
  nameWithType: SortedIndex<K, V>.BuildIndex
  fullName: Microsoft.Health.SortedIndex<K, V>.BuildIndex
  nameWithType.vb: SortedIndex(Of K, V).BuildIndex
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).BuildIndex
- uid: Microsoft.Health.SortedIndex`2.EnsureCapacity*
  commentId: Overload:Microsoft.Health.SortedIndex`2.EnsureCapacity
  isExternal: false
  name: EnsureCapacity
  nameWithType: SortedIndex<K, V>.EnsureCapacity
  fullName: Microsoft.Health.SortedIndex<K, V>.EnsureCapacity
  nameWithType.vb: SortedIndex(Of K, V).EnsureCapacity
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).EnsureCapacity
- uid: Microsoft.Health.SortedIndex`2.IndexOf*
  commentId: Overload:Microsoft.Health.SortedIndex`2.IndexOf
  isExternal: false
  name: IndexOf
  nameWithType: SortedIndex<K, V>.IndexOf
  fullName: Microsoft.Health.SortedIndex<K, V>.IndexOf
  nameWithType.vb: SortedIndex(Of K, V).IndexOf
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).IndexOf
- uid: Microsoft.Health.SortedIndex`2.EnsureReady*
  commentId: Overload:Microsoft.Health.SortedIndex`2.EnsureReady
  isExternal: false
  name: EnsureReady
  nameWithType: SortedIndex<K, V>.EnsureReady
  fullName: Microsoft.Health.SortedIndex<K, V>.EnsureReady
  nameWithType.vb: SortedIndex(Of K, V).EnsureReady
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).EnsureReady
- uid: Microsoft.Health.SortedIndex`2.GetEnumerator*
  commentId: Overload:Microsoft.Health.SortedIndex`2.GetEnumerator
  isExternal: false
  name: GetEnumerator
  nameWithType: SortedIndex<K, V>.GetEnumerator
  fullName: Microsoft.Health.SortedIndex<K, V>.GetEnumerator
  nameWithType.vb: SortedIndex(Of K, V).GetEnumerator
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).GetEnumerator
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{K},{V}}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{K},{V}}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<KeyValuePair<K, V>>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<K, V>>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of K, V)).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of K, V)).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<KeyValuePair<K, V>>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<K, V>>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of KeyValuePair(Of K, V)).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of K, V)).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{K},{V}}}
  commentId: T:System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{`0,`1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<KeyValuePair<K, V>>
  nameWithType: IEnumerator<KeyValuePair<K, V>>
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<K, V>>
  nameWithType.vb: IEnumerator(Of KeyValuePair(Of K, V))
  fullName.vb: System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of K, V))
  name.vb: IEnumerator(Of KeyValuePair(Of K, V))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex`2.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:Microsoft.Health.SortedIndex`2.System#Collections#IEnumerable#GetEnumerator
  isExternal: false
  name: IEnumerable.GetEnumerator
  nameWithType: SortedIndex<K, V>.IEnumerable.GetEnumerator
  fullName: Microsoft.Health.SortedIndex<K, V>.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: SortedIndex(Of K, V).System.Collections.IEnumerable.GetEnumerator
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: Microsoft.Health.SortedIndex`2.Compare*
  commentId: Overload:Microsoft.Health.SortedIndex`2.Compare
  isExternal: false
  name: Compare
  nameWithType: SortedIndex<K, V>.Compare
  fullName: Microsoft.Health.SortedIndex<K, V>.Compare
  nameWithType.vb: SortedIndex(Of K, V).Compare
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).Compare
- uid: System.Collections.Generic.IComparer{{K}}.Compare({K},{K})
  commentId: M:System.Collections.Generic.IComparer{`0}.Compare(`0,`0)
  parent: System.Collections.Generic.IComparer{{K}}
  definition: System.Collections.Generic.IComparer`1.Compare(`0,`0)
  name: Compare(K, K)
  nameWithType: IComparer<K>.Compare(K, K)
  fullName: System.Collections.Generic.IComparer<K>.Compare(K, K)
  nameWithType.vb: IComparer(Of K).Compare(K, K)
  fullName.vb: System.Collections.Generic.IComparer(Of K).Compare(K, K)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: Compare
    nameWithType: IComparer<K>.Compare
    fullName: System.Collections.Generic.IComparer<K>.Compare
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: Compare
    nameWithType: IComparer(Of K).Compare
    fullName: System.Collections.Generic.IComparer(Of K).Compare
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
  commentId: M:System.Collections.Generic.IComparer`1.Compare(`0,`0)
  isExternal: true
  name: Compare(T, T)
  nameWithType: IComparer<T>.Compare(T, T)
  fullName: System.Collections.Generic.IComparer<T>.Compare(T, T)
  nameWithType.vb: IComparer(Of T).Compare(T, T)
  fullName.vb: System.Collections.Generic.IComparer(Of T).Compare(T, T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: Compare
    nameWithType: IComparer<T>.Compare
    fullName: System.Collections.Generic.IComparer<T>.Compare
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: Compare
    nameWithType: IComparer(Of T).Compare
    fullName: System.Collections.Generic.IComparer(Of T).Compare
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
