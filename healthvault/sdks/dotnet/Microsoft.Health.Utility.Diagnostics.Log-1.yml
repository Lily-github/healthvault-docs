### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.Utility.Diagnostics.Log`1
  commentId: T:Microsoft.Health.Utility.Diagnostics.Log`1
  id: Log`1
  parent: Microsoft.Health.Utility.Diagnostics
  children:
  - Microsoft.Health.Utility.Diagnostics.Log`1.#ctor(System.String,System.String,Microsoft.Health.Utility.Diagnostics.TraceTarget,System.String,System.String,System.String)
  - Microsoft.Health.Utility.Diagnostics.Log`1.#ctor(System.String,System.String,System.String,Microsoft.Health.Utility.Diagnostics.TraceTarget,System.String,System.String,System.String)
  - Microsoft.Health.Utility.Diagnostics.Log`1.#ctor(System.String,System.String,System.String,Microsoft.Health.Utility.Diagnostics.TraceTarget,System.String,System.String,System.String,System.String)
  - Microsoft.Health.Utility.Diagnostics.Log`1.AppendException(System.UInt16,System.String,System.Exception,System.String)
  - Microsoft.Health.Utility.Diagnostics.Log`1.BaseLogger
  - Microsoft.Health.Utility.Diagnostics.Log`1.ConfigurationParametersQuery
  - Microsoft.Health.Utility.Diagnostics.Log`1.CreateLoggerFailed
  - Microsoft.Health.Utility.Diagnostics.Log`1.DatabaseConnectionString
  - Microsoft.Health.Utility.Diagnostics.Log`1.DetermineEventLogEntryType(System.UInt16)
  - Microsoft.Health.Utility.Diagnostics.Log`1.Dispose
  - Microsoft.Health.Utility.Diagnostics.Log`1.Dispose(System.Boolean)
  - Microsoft.Health.Utility.Diagnostics.Log`1.DisposeLogger
  - Microsoft.Health.Utility.Diagnostics.Log`1.EventLog
  - Microsoft.Health.Utility.Diagnostics.Log`1.EventLogName
  - Microsoft.Health.Utility.Diagnostics.Log`1.EventSourceName
  - Microsoft.Health.Utility.Diagnostics.Log`1.Finalize
  - Microsoft.Health.Utility.Diagnostics.Log`1.GetFunctionalArea(System.UInt16)
  - Microsoft.Health.Utility.Diagnostics.Log`1.GetParameterValue(System.String,System.String)
  - Microsoft.Health.Utility.Diagnostics.Log`1.GetSeverity(System.UInt16)
  - Microsoft.Health.Utility.Diagnostics.Log`1.Init
  - Microsoft.Health.Utility.Diagnostics.Log`1.LogBatchSize
  - Microsoft.Health.Utility.Diagnostics.Log`1.LogContextName
  - Microsoft.Health.Utility.Diagnostics.Log`1.LogFileName
  - Microsoft.Health.Utility.Diagnostics.Log`1.LogParameters
  - Microsoft.Health.Utility.Diagnostics.Log`1.LogTableName
  - Microsoft.Health.Utility.Diagnostics.Log`1.MaxEventLogEntryPeriodSeconds
  - Microsoft.Health.Utility.Diagnostics.Log`1.MaxLogIntervalMilliseconds
  - Microsoft.Health.Utility.Diagnostics.Log`1.NormalizeEventsOnSaveToDB(System.Collections.Generic.IList{`0})
  - Microsoft.Health.Utility.Diagnostics.Log`1.ReadComponentSettings
  - Microsoft.Health.Utility.Diagnostics.Log`1.ReadLogSettings
  - Microsoft.Health.Utility.Diagnostics.Log`1.SafeWriteEventLog(System.UInt16,System.UInt16,System.String,System.Exception)
  - Microsoft.Health.Utility.Diagnostics.Log`1.TraceTarget
  - Microsoft.Health.Utility.Diagnostics.Log`1.TruncateLogFile
  - Microsoft.Health.Utility.Diagnostics.Log`1.UpdateLogSettings
  langs:
  - csharp
  - vb
  name: Log<T>
  nameWithType: Log<T>
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>
  type: Class
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Log
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
    startLine: 17
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nA class that provides basic logging functionality.\n"
  example: []
  syntax:
    content: 'public class Log<T> : IDisposable where T : ILogEntry'
    content.vb: >-
      Public Class Log(Of T As ILogEntry)
          Implements IDisposable
    typeParameters:
    - id: T
  inheritance:
  - System.Object
  derivedClasses:
  - Microsoft.Health.Utility.Diagnostics.DebugLog
  - Microsoft.Health.Utility.Diagnostics.MetricLog
  - Microsoft.Health.Utility.Diagnostics.TraceLog
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - Microsoft.Health.Utility.Diagnostics.Log`1.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  - System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  nameWithType.vb: Log(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T)
  name.vb: Log(Of T)
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.MaxLogIntervalMilliseconds
  commentId: P:Microsoft.Health.Utility.Diagnostics.Log`1.MaxLogIntervalMilliseconds
  id: MaxLogIntervalMilliseconds
  parent: Microsoft.Health.Utility.Diagnostics.Log`1
  langs:
  - csharp
  - vb
  name: MaxLogIntervalMilliseconds
  nameWithType: Log<T>.MaxLogIntervalMilliseconds
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.MaxLogIntervalMilliseconds
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: MaxLogIntervalMilliseconds
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
    startLine: 24
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nThe maximum interval to write to the log.\n"
  example: []
  syntax:
    content: protected int MaxLogIntervalMilliseconds { get; set; }
    content.vb: Protected Property MaxLogIntervalMilliseconds As Integer
    parameters: []
    return:
      type: System.Int32
  overload: Microsoft.Health.Utility.Diagnostics.Log`1.MaxLogIntervalMilliseconds*
  nameWithType.vb: Log(Of T).MaxLogIntervalMilliseconds
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).MaxLogIntervalMilliseconds
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.LogBatchSize
  commentId: P:Microsoft.Health.Utility.Diagnostics.Log`1.LogBatchSize
  id: LogBatchSize
  parent: Microsoft.Health.Utility.Diagnostics.Log`1
  langs:
  - csharp
  - vb
  name: LogBatchSize
  nameWithType: Log<T>.LogBatchSize
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.LogBatchSize
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: LogBatchSize
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
    startLine: 33
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nThe number of entries to batch before writing to the log.\n"
  example: []
  syntax:
    content: protected int LogBatchSize { get; set; }
    content.vb: Protected Property LogBatchSize As Integer
    parameters: []
    return:
      type: System.Int32
  overload: Microsoft.Health.Utility.Diagnostics.Log`1.LogBatchSize*
  nameWithType.vb: Log(Of T).LogBatchSize
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).LogBatchSize
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.MaxEventLogEntryPeriodSeconds
  commentId: P:Microsoft.Health.Utility.Diagnostics.Log`1.MaxEventLogEntryPeriodSeconds
  id: MaxEventLogEntryPeriodSeconds
  parent: Microsoft.Health.Utility.Diagnostics.Log`1
  langs:
  - csharp
  - vb
  name: MaxEventLogEntryPeriodSeconds
  nameWithType: Log<T>.MaxEventLogEntryPeriodSeconds
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.MaxEventLogEntryPeriodSeconds
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: MaxEventLogEntryPeriodSeconds
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
    startLine: 42
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nThe max event log entry period (in seconds).\n"
  example: []
  syntax:
    content: protected ushort MaxEventLogEntryPeriodSeconds { get; set; }
    content.vb: Protected Property MaxEventLogEntryPeriodSeconds As UShort
    parameters: []
    return:
      type: System.UInt16
  overload: Microsoft.Health.Utility.Diagnostics.Log`1.MaxEventLogEntryPeriodSeconds*
  nameWithType.vb: Log(Of T).MaxEventLogEntryPeriodSeconds
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).MaxEventLogEntryPeriodSeconds
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.LogContextName
  commentId: P:Microsoft.Health.Utility.Diagnostics.Log`1.LogContextName
  id: LogContextName
  parent: Microsoft.Health.Utility.Diagnostics.Log`1
  langs:
  - csharp
  - vb
  name: LogContextName
  nameWithType: Log<T>.LogContextName
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.LogContextName
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: LogContextName
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
    startLine: 51
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nThe name of the logger.\n"
  example: []
  syntax:
    content: protected string LogContextName { get; set; }
    content.vb: Protected Property LogContextName As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Health.Utility.Diagnostics.Log`1.LogContextName*
  nameWithType.vb: Log(Of T).LogContextName
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).LogContextName
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.DatabaseConnectionString
  commentId: P:Microsoft.Health.Utility.Diagnostics.Log`1.DatabaseConnectionString
  id: DatabaseConnectionString
  parent: Microsoft.Health.Utility.Diagnostics.Log`1
  langs:
  - csharp
  - vb
  name: DatabaseConnectionString
  nameWithType: Log<T>.DatabaseConnectionString
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.DatabaseConnectionString
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DatabaseConnectionString
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
    startLine: 60
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nThe DB connection string to use.\n"
  example: []
  syntax:
    content: protected string DatabaseConnectionString { get; set; }
    content.vb: Protected Property DatabaseConnectionString As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Health.Utility.Diagnostics.Log`1.DatabaseConnectionString*
  nameWithType.vb: Log(Of T).DatabaseConnectionString
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).DatabaseConnectionString
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.LogTableName
  commentId: P:Microsoft.Health.Utility.Diagnostics.Log`1.LogTableName
  id: LogTableName
  parent: Microsoft.Health.Utility.Diagnostics.Log`1
  langs:
  - csharp
  - vb
  name: LogTableName
  nameWithType: Log<T>.LogTableName
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.LogTableName
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: LogTableName
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
    startLine: 69
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nThe table name to use for logging.\n"
  example: []
  syntax:
    content: protected string LogTableName { get; set; }
    content.vb: Protected Property LogTableName As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Health.Utility.Diagnostics.Log`1.LogTableName*
  nameWithType.vb: Log(Of T).LogTableName
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).LogTableName
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.ConfigurationParametersQuery
  commentId: P:Microsoft.Health.Utility.Diagnostics.Log`1.ConfigurationParametersQuery
  id: ConfigurationParametersQuery
  parent: Microsoft.Health.Utility.Diagnostics.Log`1
  langs:
  - csharp
  - vb
  name: ConfigurationParametersQuery
  nameWithType: Log<T>.ConfigurationParametersQuery
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.ConfigurationParametersQuery
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ConfigurationParametersQuery
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
    startLine: 78
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nThe query used to pull the logging configuration from the DB.\n"
  example: []
  syntax:
    content: protected string ConfigurationParametersQuery { get; set; }
    content.vb: Protected Property ConfigurationParametersQuery As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Health.Utility.Diagnostics.Log`1.ConfigurationParametersQuery*
  nameWithType.vb: Log(Of T).ConfigurationParametersQuery
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).ConfigurationParametersQuery
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.TraceTarget
  commentId: P:Microsoft.Health.Utility.Diagnostics.Log`1.TraceTarget
  id: TraceTarget
  parent: Microsoft.Health.Utility.Diagnostics.Log`1
  langs:
  - csharp
  - vb
  name: TraceTarget
  nameWithType: Log<T>.TraceTarget
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.TraceTarget
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: TraceTarget
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
    startLine: 87
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nControls which logger is used.\n"
  example: []
  syntax:
    content: protected TraceTarget TraceTarget { get; set; }
    content.vb: Protected Property TraceTarget As TraceTarget
    parameters: []
    return:
      type: Microsoft.Health.Utility.Diagnostics.TraceTarget
  overload: Microsoft.Health.Utility.Diagnostics.Log`1.TraceTarget*
  nameWithType.vb: Log(Of T).TraceTarget
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).TraceTarget
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.LogFileName
  commentId: P:Microsoft.Health.Utility.Diagnostics.Log`1.LogFileName
  id: LogFileName
  parent: Microsoft.Health.Utility.Diagnostics.Log`1
  langs:
  - csharp
  - vb
  name: LogFileName
  nameWithType: Log<T>.LogFileName
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.LogFileName
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: LogFileName
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
    startLine: 96
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nThe log file name.\n"
  example: []
  syntax:
    content: protected string LogFileName { get; set; }
    content.vb: Protected Property LogFileName As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Health.Utility.Diagnostics.Log`1.LogFileName*
  nameWithType.vb: Log(Of T).LogFileName
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).LogFileName
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.TruncateLogFile
  commentId: P:Microsoft.Health.Utility.Diagnostics.Log`1.TruncateLogFile
  id: TruncateLogFile
  parent: Microsoft.Health.Utility.Diagnostics.Log`1
  langs:
  - csharp
  - vb
  name: TruncateLogFile
  nameWithType: Log<T>.TruncateLogFile
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.TruncateLogFile
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: TruncateLogFile
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
    startLine: 105
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nTrue if the log file should be truncated.\n"
  example: []
  syntax:
    content: protected bool TruncateLogFile { get; set; }
    content.vb: Protected Property TruncateLogFile As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.Health.Utility.Diagnostics.Log`1.TruncateLogFile*
  nameWithType.vb: Log(Of T).TruncateLogFile
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).TruncateLogFile
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.CreateLoggerFailed
  commentId: P:Microsoft.Health.Utility.Diagnostics.Log`1.CreateLoggerFailed
  id: CreateLoggerFailed
  parent: Microsoft.Health.Utility.Diagnostics.Log`1
  langs:
  - csharp
  - vb
  name: CreateLoggerFailed
  nameWithType: Log<T>.CreateLoggerFailed
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.CreateLoggerFailed
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CreateLoggerFailed
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
    startLine: 114
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nTrue if we have already attempted to create the logger and failed.\n"
  example: []
  syntax:
    content: protected bool CreateLoggerFailed { get; set; }
    content.vb: Protected Property CreateLoggerFailed As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.Health.Utility.Diagnostics.Log`1.CreateLoggerFailed*
  nameWithType.vb: Log(Of T).CreateLoggerFailed
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).CreateLoggerFailed
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.EventLogName
  commentId: P:Microsoft.Health.Utility.Diagnostics.Log`1.EventLogName
  id: EventLogName
  parent: Microsoft.Health.Utility.Diagnostics.Log`1
  langs:
  - csharp
  - vb
  name: EventLogName
  nameWithType: Log<T>.EventLogName
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.EventLogName
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: EventLogName
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
    startLine: 126
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nThe name of the event log to use.\n"
  example: []
  syntax:
    content: protected string EventLogName { get; set; }
    content.vb: Protected Property EventLogName As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Health.Utility.Diagnostics.Log`1.EventLogName*
  nameWithType.vb: Log(Of T).EventLogName
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).EventLogName
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.EventSourceName
  commentId: P:Microsoft.Health.Utility.Diagnostics.Log`1.EventSourceName
  id: EventSourceName
  parent: Microsoft.Health.Utility.Diagnostics.Log`1
  langs:
  - csharp
  - vb
  name: EventSourceName
  nameWithType: Log<T>.EventSourceName
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.EventSourceName
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: EventSourceName
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
    startLine: 135
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nThe name of the event source to use.\n"
  example: []
  syntax:
    content: protected string EventSourceName { get; set; }
    content.vb: Protected Property EventSourceName As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Health.Utility.Diagnostics.Log`1.EventSourceName*
  nameWithType.vb: Log(Of T).EventSourceName
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).EventSourceName
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.EventLog
  commentId: P:Microsoft.Health.Utility.Diagnostics.Log`1.EventLog
  id: EventLog
  parent: Microsoft.Health.Utility.Diagnostics.Log`1
  langs:
  - csharp
  - vb
  name: EventLog
  nameWithType: Log<T>.EventLog
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.EventLog
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: EventLog
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
    startLine: 145
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nThe event log.\n"
  example: []
  syntax:
    content: protected WCEventLog EventLog { get; set; }
    content.vb: Protected Property EventLog As WCEventLog
    parameters: []
    return:
      type: Microsoft.Health.Utility.Diagnostics.WCEventLog
  overload: Microsoft.Health.Utility.Diagnostics.Log`1.EventLog*
  nameWithType.vb: Log(Of T).EventLog
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).EventLog
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.BaseLogger
  commentId: P:Microsoft.Health.Utility.Diagnostics.Log`1.BaseLogger
  id: BaseLogger
  parent: Microsoft.Health.Utility.Diagnostics.Log`1
  langs:
  - csharp
  - vb
  name: BaseLogger
  nameWithType: Log<T>.BaseLogger
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.BaseLogger
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: BaseLogger
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
    startLine: 155
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nThe logger used by this log instance.\n"
  example: []
  syntax:
    content: protected BaseLogger<T> BaseLogger { get; set; }
    content.vb: Protected Property BaseLogger As BaseLogger(Of T)
    parameters: []
    return:
      type: Microsoft.Health.Utility.Diagnostics.BaseLogger{{T}}
  overload: Microsoft.Health.Utility.Diagnostics.Log`1.BaseLogger*
  nameWithType.vb: Log(Of T).BaseLogger
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).BaseLogger
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.LogParameters
  commentId: P:Microsoft.Health.Utility.Diagnostics.Log`1.LogParameters
  id: LogParameters
  parent: Microsoft.Health.Utility.Diagnostics.Log`1
  langs:
  - csharp
  - vb
  name: LogParameters
  nameWithType: Log<T>.LogParameters
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.LogParameters
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: LogParameters
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
    startLine: 165
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nThis object gathers and initializes the log params.\n"
  example: []
  syntax:
    content: protected LogParameters LogParameters { get; set; }
    content.vb: Protected Property LogParameters As LogParameters
    parameters: []
    return:
      type: Microsoft.Health.Utility.Diagnostics.LogParameters
  overload: Microsoft.Health.Utility.Diagnostics.Log`1.LogParameters*
  nameWithType.vb: Log(Of T).LogParameters
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).LogParameters
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.#ctor(System.String,System.String,Microsoft.Health.Utility.Diagnostics.TraceTarget,System.String,System.String,System.String)
  commentId: M:Microsoft.Health.Utility.Diagnostics.Log`1.#ctor(System.String,System.String,Microsoft.Health.Utility.Diagnostics.TraceTarget,System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,Microsoft.Health.Utility.Diagnostics.TraceTarget,System.String,System.String,System.String)'
  parent: Microsoft.Health.Utility.Diagnostics.Log`1
  langs:
  - csharp
  - vb
  name: Log(String, String, TraceTarget, String, String, String)
  nameWithType: Log<T>.Log(String, String, TraceTarget, String, String, String)
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.Log(System.String, System.String, Microsoft.Health.Utility.Diagnostics.TraceTarget, System.String, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
    startLine: 195
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nClass constructor.\n"
  example: []
  syntax:
    content: public Log(string logContextName, string eventLogName, TraceTarget target, string connectionString, string logTableName, string configurationParametersQuery)
    content.vb: Public Sub New(logContextName As String, eventLogName As String, target As TraceTarget, connectionString As String, logTableName As String, configurationParametersQuery As String)
    parameters:
    - id: logContextName
      type: System.String
    - id: eventLogName
      type: System.String
    - id: target
      type: Microsoft.Health.Utility.Diagnostics.TraceTarget
    - id: connectionString
      type: System.String
    - id: logTableName
      type: System.String
    - id: configurationParametersQuery
      type: System.String
  overload: Microsoft.Health.Utility.Diagnostics.Log`1.#ctor*
  nameWithType.vb: Log(Of T).Log(String, String, TraceTarget, String, String, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).Log(System.String, System.String, Microsoft.Health.Utility.Diagnostics.TraceTarget, System.String, System.String, System.String)
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.#ctor(System.String,System.String,System.String,Microsoft.Health.Utility.Diagnostics.TraceTarget,System.String,System.String,System.String)
  commentId: M:Microsoft.Health.Utility.Diagnostics.Log`1.#ctor(System.String,System.String,System.String,Microsoft.Health.Utility.Diagnostics.TraceTarget,System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String,Microsoft.Health.Utility.Diagnostics.TraceTarget,System.String,System.String,System.String)'
  parent: Microsoft.Health.Utility.Diagnostics.Log`1
  langs:
  - csharp
  - vb
  name: Log(String, String, String, TraceTarget, String, String, String)
  nameWithType: Log<T>.Log(String, String, String, TraceTarget, String, String, String)
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.Log(System.String, System.String, System.String, Microsoft.Health.Utility.Diagnostics.TraceTarget, System.String, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
    startLine: 217
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nClass constructor.\n"
  example: []
  syntax:
    content: public Log(string logContextName, string eventLogName, string eventSourceName, TraceTarget target, string connectionString, string logTableName, string configurationParametersQuery)
    content.vb: Public Sub New(logContextName As String, eventLogName As String, eventSourceName As String, target As TraceTarget, connectionString As String, logTableName As String, configurationParametersQuery As String)
    parameters:
    - id: logContextName
      type: System.String
    - id: eventLogName
      type: System.String
    - id: eventSourceName
      type: System.String
    - id: target
      type: Microsoft.Health.Utility.Diagnostics.TraceTarget
    - id: connectionString
      type: System.String
    - id: logTableName
      type: System.String
    - id: configurationParametersQuery
      type: System.String
  overload: Microsoft.Health.Utility.Diagnostics.Log`1.#ctor*
  nameWithType.vb: Log(Of T).Log(String, String, String, TraceTarget, String, String, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).Log(System.String, System.String, System.String, Microsoft.Health.Utility.Diagnostics.TraceTarget, System.String, System.String, System.String)
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.#ctor(System.String,System.String,System.String,Microsoft.Health.Utility.Diagnostics.TraceTarget,System.String,System.String,System.String,System.String)
  commentId: M:Microsoft.Health.Utility.Diagnostics.Log`1.#ctor(System.String,System.String,System.String,Microsoft.Health.Utility.Diagnostics.TraceTarget,System.String,System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String,Microsoft.Health.Utility.Diagnostics.TraceTarget,System.String,System.String,System.String,System.String)'
  parent: Microsoft.Health.Utility.Diagnostics.Log`1
  langs:
  - csharp
  - vb
  name: Log(String, String, String, TraceTarget, String, String, String, String)
  nameWithType: Log<T>.Log(String, String, String, TraceTarget, String, String, String, String)
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.Log(System.String, System.String, System.String, Microsoft.Health.Utility.Diagnostics.TraceTarget, System.String, System.String, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
    startLine: 240
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nClass constructor.\n"
  example: []
  syntax:
    content: public Log(string logContextName, string eventLogName, string eventSourceName, TraceTarget target, string connectionString, string logTableName, string configurationParametersQuery, string logFileDirectory)
    content.vb: Public Sub New(logContextName As String, eventLogName As String, eventSourceName As String, target As TraceTarget, connectionString As String, logTableName As String, configurationParametersQuery As String, logFileDirectory As String)
    parameters:
    - id: logContextName
      type: System.String
    - id: eventLogName
      type: System.String
    - id: eventSourceName
      type: System.String
    - id: target
      type: Microsoft.Health.Utility.Diagnostics.TraceTarget
    - id: connectionString
      type: System.String
    - id: logTableName
      type: System.String
    - id: configurationParametersQuery
      type: System.String
    - id: logFileDirectory
      type: System.String
  overload: Microsoft.Health.Utility.Diagnostics.Log`1.#ctor*
  nameWithType.vb: Log(Of T).Log(String, String, String, TraceTarget, String, String, String, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).Log(System.String, System.String, System.String, Microsoft.Health.Utility.Diagnostics.TraceTarget, System.String, System.String, System.String, System.String)
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.Init
  commentId: M:Microsoft.Health.Utility.Diagnostics.Log`1.Init
  id: Init
  parent: Microsoft.Health.Utility.Diagnostics.Log`1
  langs:
  - csharp
  - vb
  name: Init()
  nameWithType: Log<T>.Init()
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.Init()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Init
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
    startLine: 334
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nActivate/Initialize the logger if needed\n"
  example: []
  syntax:
    content: protected bool Init()
    content.vb: Protected Function Init As Boolean
    return:
      type: System.Boolean
  overload: Microsoft.Health.Utility.Diagnostics.Log`1.Init*
  nameWithType.vb: Log(Of T).Init()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).Init()
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.ReadLogSettings
  commentId: M:Microsoft.Health.Utility.Diagnostics.Log`1.ReadLogSettings
  id: ReadLogSettings
  parent: Microsoft.Health.Utility.Diagnostics.Log`1
  langs:
  - csharp
  - vb
  name: ReadLogSettings()
  nameWithType: Log<T>.ReadLogSettings()
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.ReadLogSettings()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ReadLogSettings
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
    startLine: 363
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nRead settings in from the database.\n"
  example: []
  syntax:
    content: protected virtual bool ReadLogSettings()
    content.vb: Protected Overridable Function ReadLogSettings As Boolean
    return:
      type: System.Boolean
  overload: Microsoft.Health.Utility.Diagnostics.Log`1.ReadLogSettings*
  nameWithType.vb: Log(Of T).ReadLogSettings()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).ReadLogSettings()
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.ReadComponentSettings
  commentId: M:Microsoft.Health.Utility.Diagnostics.Log`1.ReadComponentSettings
  id: ReadComponentSettings
  parent: Microsoft.Health.Utility.Diagnostics.Log`1
  langs:
  - csharp
  - vb
  name: ReadComponentSettings()
  nameWithType: Log<T>.ReadComponentSettings()
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.ReadComponentSettings()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ReadComponentSettings
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
    startLine: 425
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nReads component specific settings. \n"
  example: []
  syntax:
    content: public virtual void ReadComponentSettings()
    content.vb: Public Overridable Sub ReadComponentSettings
  overload: Microsoft.Health.Utility.Diagnostics.Log`1.ReadComponentSettings*
  nameWithType.vb: Log(Of T).ReadComponentSettings()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).ReadComponentSettings()
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.NormalizeEventsOnSaveToDB(System.Collections.Generic.IList{`0})
  commentId: M:Microsoft.Health.Utility.Diagnostics.Log`1.NormalizeEventsOnSaveToDB(System.Collections.Generic.IList{`0})
  id: NormalizeEventsOnSaveToDB(System.Collections.Generic.IList{`0})
  parent: Microsoft.Health.Utility.Diagnostics.Log`1
  langs:
  - csharp
  - vb
  name: NormalizeEventsOnSaveToDB(IList<T>)
  nameWithType: Log<T>.NormalizeEventsOnSaveToDB(IList<T>)
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.NormalizeEventsOnSaveToDB(System.Collections.Generic.IList<T>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: NormalizeEventsOnSaveToDB
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
    startLine: 520
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  syntax:
    content: protected virtual void NormalizeEventsOnSaveToDB(IList<T> events)
    content.vb: Protected Overridable Sub NormalizeEventsOnSaveToDB(events As IList(Of T))
    parameters:
    - id: events
      type: System.Collections.Generic.IList{{T}}
  overload: Microsoft.Health.Utility.Diagnostics.Log`1.NormalizeEventsOnSaveToDB*
  nameWithType.vb: Log(Of T).NormalizeEventsOnSaveToDB(IList(Of T))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).NormalizeEventsOnSaveToDB(System.Collections.Generic.IList(Of T))
  name.vb: NormalizeEventsOnSaveToDB(IList(Of T))
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.UpdateLogSettings
  commentId: M:Microsoft.Health.Utility.Diagnostics.Log`1.UpdateLogSettings
  id: UpdateLogSettings
  parent: Microsoft.Health.Utility.Diagnostics.Log`1
  langs:
  - csharp
  - vb
  name: UpdateLogSettings()
  nameWithType: Log<T>.UpdateLogSettings()
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.UpdateLogSettings()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: UpdateLogSettings
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
    startLine: 527
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nUpdates logger settings.\n"
  example: []
  syntax:
    content: protected void UpdateLogSettings()
    content.vb: Protected Sub UpdateLogSettings
  overload: Microsoft.Health.Utility.Diagnostics.Log`1.UpdateLogSettings*
  nameWithType.vb: Log(Of T).UpdateLogSettings()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).UpdateLogSettings()
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.GetParameterValue(System.String,System.String)
  commentId: M:Microsoft.Health.Utility.Diagnostics.Log`1.GetParameterValue(System.String,System.String)
  id: GetParameterValue(System.String,System.String)
  parent: Microsoft.Health.Utility.Diagnostics.Log`1
  langs:
  - csharp
  - vb
  name: GetParameterValue(String, String)
  nameWithType: Log<T>.GetParameterValue(String, String)
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.GetParameterValue(System.String, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetParameterValue
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
    startLine: 551
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nThis method gives access to the configuration parameter values\nfor this instance of trace logger.\n"
  example: []
  syntax:
    content: public string GetParameterValue(string key, string defaultValue)
    content.vb: Public Function GetParameterValue(key As String, defaultValue As String) As String
    parameters:
    - id: key
      type: System.String
      description: Key of the value to return.
    - id: defaultValue
      type: System.String
      description: ''
    return:
      type: System.String
      description: ''
  overload: Microsoft.Health.Utility.Diagnostics.Log`1.GetParameterValue*
  nameWithType.vb: Log(Of T).GetParameterValue(String, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).GetParameterValue(System.String, System.String)
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.GetSeverity(System.UInt16)
  commentId: M:Microsoft.Health.Utility.Diagnostics.Log`1.GetSeverity(System.UInt16)
  id: GetSeverity(System.UInt16)
  parent: Microsoft.Health.Utility.Diagnostics.Log`1
  langs:
  - csharp
  - vb
  name: GetSeverity(UInt16)
  nameWithType: Log<T>.GetSeverity(UInt16)
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.GetSeverity(System.UInt16)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetSeverity
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
    startLine: 568
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nReturns the severity from the given category.\n"
  example: []
  syntax:
    content: protected byte GetSeverity(ushort category)
    content.vb: Protected Function GetSeverity(category As UShort) As Byte
    parameters:
    - id: category
      type: System.UInt16
    return:
      type: System.Byte
  overload: Microsoft.Health.Utility.Diagnostics.Log`1.GetSeverity*
  nameWithType.vb: Log(Of T).GetSeverity(UInt16)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).GetSeverity(System.UInt16)
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.GetFunctionalArea(System.UInt16)
  commentId: M:Microsoft.Health.Utility.Diagnostics.Log`1.GetFunctionalArea(System.UInt16)
  id: GetFunctionalArea(System.UInt16)
  parent: Microsoft.Health.Utility.Diagnostics.Log`1
  langs:
  - csharp
  - vb
  name: GetFunctionalArea(UInt16)
  nameWithType: Log<T>.GetFunctionalArea(UInt16)
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.GetFunctionalArea(System.UInt16)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetFunctionalArea
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
    startLine: 576
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nReturns the functional aread from the given category.\n"
  example: []
  syntax:
    content: protected byte GetFunctionalArea(ushort category)
    content.vb: Protected Function GetFunctionalArea(category As UShort) As Byte
    parameters:
    - id: category
      type: System.UInt16
    return:
      type: System.Byte
  overload: Microsoft.Health.Utility.Diagnostics.Log`1.GetFunctionalArea*
  nameWithType.vb: Log(Of T).GetFunctionalArea(UInt16)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).GetFunctionalArea(System.UInt16)
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.DetermineEventLogEntryType(System.UInt16)
  commentId: M:Microsoft.Health.Utility.Diagnostics.Log`1.DetermineEventLogEntryType(System.UInt16)
  id: DetermineEventLogEntryType(System.UInt16)
  parent: Microsoft.Health.Utility.Diagnostics.Log`1
  langs:
  - csharp
  - vb
  name: DetermineEventLogEntryType(UInt16)
  nameWithType: Log<T>.DetermineEventLogEntryType(UInt16)
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.DetermineEventLogEntryType(System.UInt16)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DetermineEventLogEntryType
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
    startLine: 584
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nDetermines the entry type from the category.\n"
  example: []
  syntax:
    content: protected EventLogEntryType DetermineEventLogEntryType(ushort category)
    content.vb: Protected Function DetermineEventLogEntryType(category As UShort) As EventLogEntryType
    parameters:
    - id: category
      type: System.UInt16
    return:
      type: System.Diagnostics.EventLogEntryType
  overload: Microsoft.Health.Utility.Diagnostics.Log`1.DetermineEventLogEntryType*
  nameWithType.vb: Log(Of T).DetermineEventLogEntryType(UInt16)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).DetermineEventLogEntryType(System.UInt16)
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.SafeWriteEventLog(System.UInt16,System.UInt16,System.String,System.Exception)
  commentId: M:Microsoft.Health.Utility.Diagnostics.Log`1.SafeWriteEventLog(System.UInt16,System.UInt16,System.String,System.Exception)
  id: SafeWriteEventLog(System.UInt16,System.UInt16,System.String,System.Exception)
  parent: Microsoft.Health.Utility.Diagnostics.Log`1
  langs:
  - csharp
  - vb
  name: SafeWriteEventLog(UInt16, UInt16, String, Exception)
  nameWithType: Log<T>.SafeWriteEventLog(UInt16, UInt16, String, Exception)
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.SafeWriteEventLog(System.UInt16, System.UInt16, System.String, System.Exception)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SafeWriteEventLog
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
    startLine: 613
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nWrites to the event log.\n"
  example: []
  syntax:
    content: protected void SafeWriteEventLog(ushort eventId, ushort category, string eventMsg, Exception ex)
    content.vb: Protected Sub SafeWriteEventLog(eventId As UShort, category As UShort, eventMsg As String, ex As Exception)
    parameters:
    - id: eventId
      type: System.UInt16
    - id: category
      type: System.UInt16
    - id: eventMsg
      type: System.String
    - id: ex
      type: System.Exception
  overload: Microsoft.Health.Utility.Diagnostics.Log`1.SafeWriteEventLog*
  nameWithType.vb: Log(Of T).SafeWriteEventLog(UInt16, UInt16, String, Exception)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).SafeWriteEventLog(System.UInt16, System.UInt16, System.String, System.Exception)
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.AppendException(System.UInt16,System.String,System.Exception,System.String)
  commentId: M:Microsoft.Health.Utility.Diagnostics.Log`1.AppendException(System.UInt16,System.String,System.Exception,System.String)
  id: AppendException(System.UInt16,System.String,System.Exception,System.String)
  parent: Microsoft.Health.Utility.Diagnostics.Log`1
  langs:
  - csharp
  - vb
  name: AppendException(UInt16, String, Exception, String)
  nameWithType: Log<T>.AppendException(UInt16, String, Exception, String)
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.AppendException(System.UInt16, System.String, System.Exception, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: AppendException
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
    startLine: 639
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nAppends an exception to the given eventMsg.\n"
  example: []
  syntax:
    content: protected virtual string AppendException(ushort category, string eventMsg, Exception ex, string callStackTrace)
    content.vb: Protected Overridable Function AppendException(category As UShort, eventMsg As String, ex As Exception, callStackTrace As String) As String
    parameters:
    - id: category
      type: System.UInt16
    - id: eventMsg
      type: System.String
    - id: ex
      type: System.Exception
    - id: callStackTrace
      type: System.String
    return:
      type: System.String
  overload: Microsoft.Health.Utility.Diagnostics.Log`1.AppendException*
  nameWithType.vb: Log(Of T).AppendException(UInt16, String, Exception, String)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).AppendException(System.UInt16, System.String, System.Exception, System.String)
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.Finalize
  commentId: M:Microsoft.Health.Utility.Diagnostics.Log`1.Finalize
  id: Finalize
  parent: Microsoft.Health.Utility.Diagnostics.Log`1
  langs:
  - csharp
  - vb
  name: Finalize()
  nameWithType: Log<T>.Finalize()
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.Finalize()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Finalize
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
    startLine: 664
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nDestructor method to uninitialize the fields\n"
  example: []
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  overload: Microsoft.Health.Utility.Diagnostics.Log`1.Finalize*
  nameWithType.vb: Log(Of T).Finalize()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).Finalize()
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.Dispose
  commentId: M:Microsoft.Health.Utility.Diagnostics.Log`1.Dispose
  id: Dispose
  parent: Microsoft.Health.Utility.Diagnostics.Log`1
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: Log<T>.Dispose()
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.Dispose()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Dispose
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
    startLine: 673
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nImplement Dispose.\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Microsoft.Health.Utility.Diagnostics.Log`1.Dispose*
  implements:
  - System.IDisposable.Dispose
  nameWithType.vb: Log(Of T).Dispose()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).Dispose()
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.Dispose(System.Boolean)
  commentId: M:Microsoft.Health.Utility.Diagnostics.Log`1.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: Microsoft.Health.Utility.Diagnostics.Log`1
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: Log<T>.Dispose(Boolean)
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Dispose
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
    startLine: 683
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nImplement Dispose(bool) as a protected method for cleaning up \nthe objects once\n"
  example: []
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
  overload: Microsoft.Health.Utility.Diagnostics.Log`1.Dispose*
  nameWithType.vb: Log(Of T).Dispose(Boolean)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).Dispose(System.Boolean)
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.DisposeLogger
  commentId: M:Microsoft.Health.Utility.Diagnostics.Log`1.DisposeLogger
  id: DisposeLogger
  parent: Microsoft.Health.Utility.Diagnostics.Log`1
  langs:
  - csharp
  - vb
  name: DisposeLogger()
  nameWithType: Log<T>.DisposeLogger()
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.DisposeLogger()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DisposeLogger
    path: ../Microsoft.Health.Utility/Diagnostics/Trace/Log.cs
    startLine: 701
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Diagnostics
  summary: "\nDisposes Logger.\n"
  example: []
  syntax:
    content: protected void DisposeLogger()
    content.vb: Protected Sub DisposeLogger
  overload: Microsoft.Health.Utility.Diagnostics.Log`1.DisposeLogger*
  nameWithType.vb: Log(Of T).DisposeLogger()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).DisposeLogger()
references:
- uid: Microsoft.Health.Utility.Diagnostics
  commentId: N:Microsoft.Health.Utility.Diagnostics
  isExternal: false
  name: Microsoft.Health.Utility.Diagnostics
  nameWithType: Microsoft.Health.Utility.Diagnostics
  fullName: Microsoft.Health.Utility.Diagnostics
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  name: SetProperty(String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object())
  name.vb: SetProperty(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  name: InvokeMethod(String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object())
  name.vb: InvokeMethod(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  parent: Microsoft.Health.Utility.InvariantString
  definition: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  name: ToStringInvariant()
  nameWithType: InvariantString.ToStringInvariant()
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant()
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  parent: Microsoft.Health.Utility.TypeHelper
  definition: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  name: ValueOrDbNull<Log<T>>()
  nameWithType: TypeHelper.ValueOrDbNull<Log<T>>()
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.Utility.Diagnostics.Log<T>>()
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of Log(Of T))()
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.Utility.Diagnostics.Log(Of T))()
  name.vb: ValueOrDbNull(Of Log(Of T))()
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull<Log<T>>
    nameWithType: TypeHelper.ValueOrDbNull<Log<T>>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.Utility.Diagnostics.Log<T>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull(Of Log(Of T))
    nameWithType: TypeHelper.ValueOrDbNull(Of Log(Of T))
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.Utility.Diagnostics.Log(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  parent: Microsoft.Health.Utility.WCXmlHelper
  definition: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  name: ToXml()
  nameWithType: WCXmlHelper.ToXml()
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml()
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  isExternal: true
  name: SetProperty(Object, String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object())
  name.vb: SetProperty(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions
  commentId: T:Microsoft.Health.Utility.IDispatchExtensions
  parent: Microsoft.Health.Utility
  isExternal: false
  name: IDispatchExtensions
  nameWithType: IDispatchExtensions
  fullName: Microsoft.Health.Utility.IDispatchExtensions
- uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  isExternal: true
  name: InvokeMethod(Object, String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object())
  name.vb: InvokeMethod(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  isExternal: true
  name: ToStringInvariant(Object)
  nameWithType: InvariantString.ToStringInvariant(Object)
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString
  commentId: T:Microsoft.Health.Utility.InvariantString
  parent: Microsoft.Health.Utility
  isExternal: false
  name: InvariantString
  nameWithType: InvariantString
  fullName: Microsoft.Health.Utility.InvariantString
- uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  isExternal: false
  name: ValueOrDbNull<T>(T)
  nameWithType: TypeHelper.ValueOrDbNull<T>(T)
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>(T)
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of T)(T)
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)(T)
  name.vb: ValueOrDbNull(Of T)(T)
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull<T>
    nameWithType: TypeHelper.ValueOrDbNull<T>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull(Of T)
    nameWithType: TypeHelper.ValueOrDbNull(Of T)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.TypeHelper
  commentId: T:Microsoft.Health.Utility.TypeHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: TypeHelper
  nameWithType: TypeHelper
  fullName: Microsoft.Health.Utility.TypeHelper
- uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  isExternal: true
  name: ToXml(Object)
  nameWithType: WCXmlHelper.ToXml(Object)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.WCXmlHelper
  commentId: T:Microsoft.Health.Utility.WCXmlHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: WCXmlHelper
  nameWithType: WCXmlHelper
  fullName: Microsoft.Health.Utility.WCXmlHelper
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.MaxLogIntervalMilliseconds*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.Log`1.MaxLogIntervalMilliseconds
  isExternal: false
  name: MaxLogIntervalMilliseconds
  nameWithType: Log<T>.MaxLogIntervalMilliseconds
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.MaxLogIntervalMilliseconds
  nameWithType.vb: Log(Of T).MaxLogIntervalMilliseconds
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).MaxLogIntervalMilliseconds
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.LogBatchSize*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.Log`1.LogBatchSize
  isExternal: false
  name: LogBatchSize
  nameWithType: Log<T>.LogBatchSize
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.LogBatchSize
  nameWithType.vb: Log(Of T).LogBatchSize
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).LogBatchSize
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.MaxEventLogEntryPeriodSeconds*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.Log`1.MaxEventLogEntryPeriodSeconds
  isExternal: false
  name: MaxEventLogEntryPeriodSeconds
  nameWithType: Log<T>.MaxEventLogEntryPeriodSeconds
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.MaxEventLogEntryPeriodSeconds
  nameWithType.vb: Log(Of T).MaxEventLogEntryPeriodSeconds
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).MaxEventLogEntryPeriodSeconds
- uid: System.UInt16
  commentId: T:System.UInt16
  parent: System
  isExternal: true
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.LogContextName*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.Log`1.LogContextName
  isExternal: false
  name: LogContextName
  nameWithType: Log<T>.LogContextName
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.LogContextName
  nameWithType.vb: Log(Of T).LogContextName
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).LogContextName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.DatabaseConnectionString*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.Log`1.DatabaseConnectionString
  isExternal: false
  name: DatabaseConnectionString
  nameWithType: Log<T>.DatabaseConnectionString
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.DatabaseConnectionString
  nameWithType.vb: Log(Of T).DatabaseConnectionString
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).DatabaseConnectionString
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.LogTableName*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.Log`1.LogTableName
  isExternal: false
  name: LogTableName
  nameWithType: Log<T>.LogTableName
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.LogTableName
  nameWithType.vb: Log(Of T).LogTableName
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).LogTableName
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.ConfigurationParametersQuery*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.Log`1.ConfigurationParametersQuery
  isExternal: false
  name: ConfigurationParametersQuery
  nameWithType: Log<T>.ConfigurationParametersQuery
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.ConfigurationParametersQuery
  nameWithType.vb: Log(Of T).ConfigurationParametersQuery
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).ConfigurationParametersQuery
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.TraceTarget*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.Log`1.TraceTarget
  isExternal: false
  name: TraceTarget
  nameWithType: Log<T>.TraceTarget
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.TraceTarget
  nameWithType.vb: Log(Of T).TraceTarget
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).TraceTarget
- uid: Microsoft.Health.Utility.Diagnostics.TraceTarget
  commentId: T:Microsoft.Health.Utility.Diagnostics.TraceTarget
  parent: Microsoft.Health.Utility.Diagnostics
  isExternal: false
  name: TraceTarget
  nameWithType: TraceTarget
  fullName: Microsoft.Health.Utility.Diagnostics.TraceTarget
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.LogFileName*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.Log`1.LogFileName
  isExternal: false
  name: LogFileName
  nameWithType: Log<T>.LogFileName
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.LogFileName
  nameWithType.vb: Log(Of T).LogFileName
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).LogFileName
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.TruncateLogFile*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.Log`1.TruncateLogFile
  isExternal: false
  name: TruncateLogFile
  nameWithType: Log<T>.TruncateLogFile
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.TruncateLogFile
  nameWithType.vb: Log(Of T).TruncateLogFile
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).TruncateLogFile
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.CreateLoggerFailed*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.Log`1.CreateLoggerFailed
  isExternal: false
  name: CreateLoggerFailed
  nameWithType: Log<T>.CreateLoggerFailed
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.CreateLoggerFailed
  nameWithType.vb: Log(Of T).CreateLoggerFailed
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).CreateLoggerFailed
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.EventLogName*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.Log`1.EventLogName
  isExternal: false
  name: EventLogName
  nameWithType: Log<T>.EventLogName
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.EventLogName
  nameWithType.vb: Log(Of T).EventLogName
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).EventLogName
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.EventSourceName*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.Log`1.EventSourceName
  isExternal: false
  name: EventSourceName
  nameWithType: Log<T>.EventSourceName
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.EventSourceName
  nameWithType.vb: Log(Of T).EventSourceName
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).EventSourceName
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.EventLog*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.Log`1.EventLog
  isExternal: false
  name: EventLog
  nameWithType: Log<T>.EventLog
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.EventLog
  nameWithType.vb: Log(Of T).EventLog
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).EventLog
- uid: Microsoft.Health.Utility.Diagnostics.WCEventLog
  commentId: T:Microsoft.Health.Utility.Diagnostics.WCEventLog
  parent: Microsoft.Health.Utility.Diagnostics
  isExternal: false
  name: WCEventLog
  nameWithType: WCEventLog
  fullName: Microsoft.Health.Utility.Diagnostics.WCEventLog
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.BaseLogger*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.Log`1.BaseLogger
  isExternal: false
  name: BaseLogger
  nameWithType: Log<T>.BaseLogger
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.BaseLogger
  nameWithType.vb: Log(Of T).BaseLogger
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).BaseLogger
- uid: Microsoft.Health.Utility.Diagnostics.BaseLogger{{T}}
  commentId: T:Microsoft.Health.Utility.Diagnostics.BaseLogger{`0}
  parent: Microsoft.Health.Utility.Diagnostics
  definition: Microsoft.Health.Utility.Diagnostics.BaseLogger`1
  name: BaseLogger<T>
  nameWithType: BaseLogger<T>
  fullName: Microsoft.Health.Utility.Diagnostics.BaseLogger<T>
  nameWithType.vb: BaseLogger(Of T)
  fullName.vb: Microsoft.Health.Utility.Diagnostics.BaseLogger(Of T)
  name.vb: BaseLogger(Of T)
  spec.csharp:
  - uid: Microsoft.Health.Utility.Diagnostics.BaseLogger`1
    name: BaseLogger
    nameWithType: BaseLogger
    fullName: Microsoft.Health.Utility.Diagnostics.BaseLogger
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.Utility.Diagnostics.BaseLogger`1
    name: BaseLogger
    nameWithType: BaseLogger
    fullName: Microsoft.Health.Utility.Diagnostics.BaseLogger
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.Diagnostics.BaseLogger`1
  commentId: T:Microsoft.Health.Utility.Diagnostics.BaseLogger`1
  isExternal: false
  name: BaseLogger<T>
  nameWithType: BaseLogger<T>
  fullName: Microsoft.Health.Utility.Diagnostics.BaseLogger<T>
  nameWithType.vb: BaseLogger(Of T)
  fullName.vb: Microsoft.Health.Utility.Diagnostics.BaseLogger(Of T)
  name.vb: BaseLogger(Of T)
  spec.csharp:
  - uid: Microsoft.Health.Utility.Diagnostics.BaseLogger`1
    name: BaseLogger
    nameWithType: BaseLogger
    fullName: Microsoft.Health.Utility.Diagnostics.BaseLogger
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.Utility.Diagnostics.BaseLogger`1
    name: BaseLogger
    nameWithType: BaseLogger
    fullName: Microsoft.Health.Utility.Diagnostics.BaseLogger
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.LogParameters*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.Log`1.LogParameters
  isExternal: false
  name: LogParameters
  nameWithType: Log<T>.LogParameters
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.LogParameters
  nameWithType.vb: Log(Of T).LogParameters
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).LogParameters
- uid: Microsoft.Health.Utility.Diagnostics.LogParameters
  commentId: T:Microsoft.Health.Utility.Diagnostics.LogParameters
  parent: Microsoft.Health.Utility.Diagnostics
  isExternal: false
  name: LogParameters
  nameWithType: LogParameters
  fullName: Microsoft.Health.Utility.Diagnostics.LogParameters
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.#ctor*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.Log`1.#ctor
  isExternal: false
  name: Log
  nameWithType: Log<T>.Log
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.Log
  nameWithType.vb: Log(Of T).Log
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).Log
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.Init*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.Log`1.Init
  isExternal: false
  name: Init
  nameWithType: Log<T>.Init
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.Init
  nameWithType.vb: Log(Of T).Init
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).Init
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.ReadLogSettings*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.Log`1.ReadLogSettings
  isExternal: false
  name: ReadLogSettings
  nameWithType: Log<T>.ReadLogSettings
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.ReadLogSettings
  nameWithType.vb: Log(Of T).ReadLogSettings
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).ReadLogSettings
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.ReadComponentSettings*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.Log`1.ReadComponentSettings
  isExternal: false
  name: ReadComponentSettings
  nameWithType: Log<T>.ReadComponentSettings
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.ReadComponentSettings
  nameWithType.vb: Log(Of T).ReadComponentSettings
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).ReadComponentSettings
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.NormalizeEventsOnSaveToDB*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.Log`1.NormalizeEventsOnSaveToDB
  isExternal: false
  name: NormalizeEventsOnSaveToDB
  nameWithType: Log<T>.NormalizeEventsOnSaveToDB
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.NormalizeEventsOnSaveToDB
  nameWithType.vb: Log(Of T).NormalizeEventsOnSaveToDB
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).NormalizeEventsOnSaveToDB
- uid: System.Collections.Generic.IList{{T}}
  commentId: T:System.Collections.Generic.IList{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.UpdateLogSettings*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.Log`1.UpdateLogSettings
  isExternal: false
  name: UpdateLogSettings
  nameWithType: Log<T>.UpdateLogSettings
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.UpdateLogSettings
  nameWithType.vb: Log(Of T).UpdateLogSettings
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).UpdateLogSettings
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.GetParameterValue*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.Log`1.GetParameterValue
  isExternal: false
  name: GetParameterValue
  nameWithType: Log<T>.GetParameterValue
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.GetParameterValue
  nameWithType.vb: Log(Of T).GetParameterValue
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).GetParameterValue
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.GetSeverity*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.Log`1.GetSeverity
  isExternal: false
  name: GetSeverity
  nameWithType: Log<T>.GetSeverity
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.GetSeverity
  nameWithType.vb: Log(Of T).GetSeverity
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).GetSeverity
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.GetFunctionalArea*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.Log`1.GetFunctionalArea
  isExternal: false
  name: GetFunctionalArea
  nameWithType: Log<T>.GetFunctionalArea
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.GetFunctionalArea
  nameWithType.vb: Log(Of T).GetFunctionalArea
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).GetFunctionalArea
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.DetermineEventLogEntryType*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.Log`1.DetermineEventLogEntryType
  isExternal: false
  name: DetermineEventLogEntryType
  nameWithType: Log<T>.DetermineEventLogEntryType
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.DetermineEventLogEntryType
  nameWithType.vb: Log(Of T).DetermineEventLogEntryType
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).DetermineEventLogEntryType
- uid: System.Diagnostics.EventLogEntryType
  commentId: T:System.Diagnostics.EventLogEntryType
  parent: System.Diagnostics
  isExternal: true
  name: EventLogEntryType
  nameWithType: EventLogEntryType
  fullName: System.Diagnostics.EventLogEntryType
- uid: System.Diagnostics
  commentId: N:System.Diagnostics
  isExternal: false
  name: System.Diagnostics
  nameWithType: System.Diagnostics
  fullName: System.Diagnostics
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.SafeWriteEventLog*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.Log`1.SafeWriteEventLog
  isExternal: false
  name: SafeWriteEventLog
  nameWithType: Log<T>.SafeWriteEventLog
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.SafeWriteEventLog
  nameWithType.vb: Log(Of T).SafeWriteEventLog
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).SafeWriteEventLog
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.AppendException*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.Log`1.AppendException
  isExternal: false
  name: AppendException
  nameWithType: Log<T>.AppendException
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.AppendException
  nameWithType.vb: Log(Of T).AppendException
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).AppendException
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.Finalize*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.Log`1.Finalize
  isExternal: false
  name: Finalize
  nameWithType: Log<T>.Finalize
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.Finalize
  nameWithType.vb: Log(Of T).Finalize
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).Finalize
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.Dispose*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.Log`1.Dispose
  isExternal: false
  name: Dispose
  nameWithType: Log<T>.Dispose
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.Dispose
  nameWithType.vb: Log(Of T).Dispose
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.Diagnostics.Log`1.DisposeLogger*
  commentId: Overload:Microsoft.Health.Utility.Diagnostics.Log`1.DisposeLogger
  isExternal: false
  name: DisposeLogger
  nameWithType: Log<T>.DisposeLogger
  fullName: Microsoft.Health.Utility.Diagnostics.Log<T>.DisposeLogger
  nameWithType.vb: Log(Of T).DisposeLogger
  fullName.vb: Microsoft.Health.Utility.Diagnostics.Log(Of T).DisposeLogger
