### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.Utility.IPAddressValidator
  commentId: T:Microsoft.Health.Utility.IPAddressValidator
  id: IPAddressValidator
  parent: Microsoft.Health.Utility
  children:
  - Microsoft.Health.Utility.IPAddressValidator.IsIPAddressInRange(Microsoft.Health.Utility.PrefixIpAddress,System.Net.IPAddress)
  - Microsoft.Health.Utility.IPAddressValidator.IsIPAddressInRange(System.Collections.Generic.IEnumerable{Microsoft.Health.Utility.PrefixIpAddress},System.Net.IPAddress)
  langs:
  - csharp
  - vb
  name: IPAddressValidator
  nameWithType: IPAddressValidator
  fullName: Microsoft.Health.Utility.IPAddressValidator
  type: Class
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/IPAddressValidator.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IPAddressValidator
    path: utilities/IPAddressValidator.cs
    startLine: 19
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nClass for validating Ip addresses\n"
  example: []
  syntax:
    content: public static class IPAddressValidator
    content.vb: Public Module IPAddressValidator
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Health.Utility.IPAddressValidator.IsIPAddressInRange(Microsoft.Health.Utility.PrefixIpAddress,System.Net.IPAddress)
  commentId: M:Microsoft.Health.Utility.IPAddressValidator.IsIPAddressInRange(Microsoft.Health.Utility.PrefixIpAddress,System.Net.IPAddress)
  id: IsIPAddressInRange(Microsoft.Health.Utility.PrefixIpAddress,System.Net.IPAddress)
  parent: Microsoft.Health.Utility.IPAddressValidator
  langs:
  - csharp
  - vb
  name: IsIPAddressInRange(PrefixIpAddress, IPAddress)
  nameWithType: IPAddressValidator.IsIPAddressInRange(PrefixIpAddress, IPAddress)
  fullName: Microsoft.Health.Utility.IPAddressValidator.IsIPAddressInRange(Microsoft.Health.Utility.PrefixIpAddress, System.Net.IPAddress)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/IPAddressValidator.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IsIPAddressInRange
    path: utilities/IPAddressValidator.cs
    startLine: 27
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nDetermines if a given ip is in the prefix range\n"
  example: []
  syntax:
    content: public static bool IsIPAddressInRange(PrefixIpAddress prefixIpAddress, IPAddress ipAddress)
    content.vb: Public Shared Function IsIPAddressInRange(prefixIpAddress As PrefixIpAddress, ipAddress As IPAddress) As Boolean
    parameters:
    - id: prefixIpAddress
      type: Microsoft.Health.Utility.PrefixIpAddress
      description: The range as a prefix address
    - id: ipAddress
      type: System.Net.IPAddress
      description: The address to check if is in range
    return:
      type: System.Boolean
      description: ''
  overload: Microsoft.Health.Utility.IPAddressValidator.IsIPAddressInRange*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.IPAddressValidator.IsIPAddressInRange(System.Collections.Generic.IEnumerable{Microsoft.Health.Utility.PrefixIpAddress},System.Net.IPAddress)
  commentId: M:Microsoft.Health.Utility.IPAddressValidator.IsIPAddressInRange(System.Collections.Generic.IEnumerable{Microsoft.Health.Utility.PrefixIpAddress},System.Net.IPAddress)
  id: IsIPAddressInRange(System.Collections.Generic.IEnumerable{Microsoft.Health.Utility.PrefixIpAddress},System.Net.IPAddress)
  parent: Microsoft.Health.Utility.IPAddressValidator
  langs:
  - csharp
  - vb
  name: IsIPAddressInRange(IEnumerable<PrefixIpAddress>, IPAddress)
  nameWithType: IPAddressValidator.IsIPAddressInRange(IEnumerable<PrefixIpAddress>, IPAddress)
  fullName: Microsoft.Health.Utility.IPAddressValidator.IsIPAddressInRange(System.Collections.Generic.IEnumerable<Microsoft.Health.Utility.PrefixIpAddress>, System.Net.IPAddress)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/IPAddressValidator.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IsIPAddressInRange
    path: utilities/IPAddressValidator.cs
    startLine: 42
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nDetermines if a given ip is in one of the prefix ranges\n"
  example: []
  syntax:
    content: public static bool IsIPAddressInRange(IEnumerable<PrefixIpAddress> prefixIPAddresses, IPAddress ipAddress)
    content.vb: Public Shared Function IsIPAddressInRange(prefixIPAddresses As IEnumerable(Of PrefixIpAddress), ipAddress As IPAddress) As Boolean
    parameters:
    - id: prefixIPAddresses
      type: System.Collections.Generic.IEnumerable{Microsoft.Health.Utility.PrefixIpAddress}
      description: The list of ranges as prefix addresses
    - id: ipAddress
      type: System.Net.IPAddress
      description: The address to check if is in range
    return:
      type: System.Boolean
      description: ''
  overload: Microsoft.Health.Utility.IPAddressValidator.IsIPAddressInRange*
  nameWithType.vb: IPAddressValidator.IsIPAddressInRange(IEnumerable(Of PrefixIpAddress), IPAddress)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.IPAddressValidator.IsIPAddressInRange(System.Collections.Generic.IEnumerable(Of Microsoft.Health.Utility.PrefixIpAddress), System.Net.IPAddress)
  name.vb: IsIPAddressInRange(IEnumerable(Of PrefixIpAddress), IPAddress)
references:
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Utility.IPAddressValidator.IsIPAddressInRange*
  commentId: Overload:Microsoft.Health.Utility.IPAddressValidator.IsIPAddressInRange
  isExternal: false
  name: IsIPAddressInRange
  nameWithType: IPAddressValidator.IsIPAddressInRange
  fullName: Microsoft.Health.Utility.IPAddressValidator.IsIPAddressInRange
- uid: Microsoft.Health.Utility.PrefixIpAddress
  commentId: T:Microsoft.Health.Utility.PrefixIpAddress
  parent: Microsoft.Health.Utility
  isExternal: false
  name: PrefixIpAddress
  nameWithType: PrefixIpAddress
  fullName: Microsoft.Health.Utility.PrefixIpAddress
- uid: System.Net.IPAddress
  commentId: T:System.Net.IPAddress
  parent: System.Net
  isExternal: true
  name: IPAddress
  nameWithType: IPAddress
  fullName: System.Net.IPAddress
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net
  commentId: N:System.Net
  isExternal: false
  name: System.Net
  nameWithType: System.Net
  fullName: System.Net
- uid: System.Collections.Generic.IEnumerable{Microsoft.Health.Utility.PrefixIpAddress}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Health.Utility.PrefixIpAddress}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<PrefixIpAddress>
  nameWithType: IEnumerable<PrefixIpAddress>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Health.Utility.PrefixIpAddress>
  nameWithType.vb: IEnumerable(Of PrefixIpAddress)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Health.Utility.PrefixIpAddress)
  name.vb: IEnumerable(Of PrefixIpAddress)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.Utility.PrefixIpAddress
    name: PrefixIpAddress
    nameWithType: PrefixIpAddress
    fullName: Microsoft.Health.Utility.PrefixIpAddress
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.Utility.PrefixIpAddress
    name: PrefixIpAddress
    nameWithType: PrefixIpAddress
    fullName: Microsoft.Health.Utility.PrefixIpAddress
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
