### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.CharReader
  commentId: T:Microsoft.Health.CharReader
  id: CharReader
  parent: Microsoft.Health
  children:
  - Microsoft.Health.CharReader.#ctor
  - Microsoft.Health.CharReader.#ctor(System.String)
  - Microsoft.Health.CharReader.Current
  - Microsoft.Health.CharReader.GetBuilder
  - Microsoft.Health.CharReader.IsEOF
  - Microsoft.Health.CharReader.IsStart
  - Microsoft.Health.CharReader.MoveBack
  - Microsoft.Health.CharReader.MoveBackOverWhitespace
  - Microsoft.Health.CharReader.MoveNext
  - Microsoft.Health.CharReader.MoveOver(System.Char)
  - Microsoft.Health.CharReader.MoveOver(System.Char[])
  - Microsoft.Health.CharReader.MoveOverWhitespace
  - Microsoft.Health.CharReader.MoveTo(System.Char)
  - Microsoft.Health.CharReader.MoveTo(System.Char[])
  - Microsoft.Health.CharReader.MoveToWhitespace
  - Microsoft.Health.CharReader.Peek
  - Microsoft.Health.CharReader.Position
  - Microsoft.Health.CharReader.Read
  - Microsoft.Health.CharReader.Read(System.Char[])
  - Microsoft.Health.CharReader.ReadAllWords
  - Microsoft.Health.CharReader.ReadAllWords(System.Collections.Generic.ICollection{System.String})
  - Microsoft.Health.CharReader.ReadTo(System.Char)
  - Microsoft.Health.CharReader.Source
  langs:
  - csharp
  - vb
  name: CharReader
  nameWithType: CharReader
  fullName: Microsoft.Health.CharReader
  type: Class
  source:
    remote:
      path: Microsoft.Health.Utility/search/CharReader.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CharReader
    path: search/CharReader.cs
    startLine: 16
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public class CharReader
    content.vb: Public Class CharReader
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - Microsoft.Health.CharReader.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  - System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.CharReader.#ctor
  commentId: M:Microsoft.Health.CharReader.#ctor
  id: '#ctor'
  parent: Microsoft.Health.CharReader
  langs:
  - csharp
  - vb
  name: CharReader()
  nameWithType: CharReader.CharReader()
  fullName: Microsoft.Health.CharReader.CharReader()
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/CharReader.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: search/CharReader.cs
    startLine: 25
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public CharReader()
    content.vb: Public Sub New
  overload: Microsoft.Health.CharReader.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.CharReader.#ctor(System.String)
  commentId: M:Microsoft.Health.CharReader.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.Health.CharReader
  langs:
  - csharp
  - vb
  name: CharReader(String)
  nameWithType: CharReader.CharReader(String)
  fullName: Microsoft.Health.CharReader.CharReader(System.String)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/CharReader.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: search/CharReader.cs
    startLine: 33
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public CharReader(string source)
    content.vb: Public Sub New(source As String)
    parameters:
    - id: source
      type: System.String
      description: ''
  overload: Microsoft.Health.CharReader.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.CharReader.Current
  commentId: P:Microsoft.Health.CharReader.Current
  id: Current
  parent: Microsoft.Health.CharReader
  langs:
  - csharp
  - vb
  name: Current
  nameWithType: CharReader.Current
  fullName: Microsoft.Health.CharReader.Current
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/CharReader.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Current
    path: search/CharReader.cs
    startLine: 41
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public char Current { get; }
    content.vb: Public ReadOnly Property Current As Char
    parameters: []
    return:
      type: System.Char
  overload: Microsoft.Health.CharReader.Current*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.CharReader.Source
  commentId: P:Microsoft.Health.CharReader.Source
  id: Source
  parent: Microsoft.Health.CharReader
  langs:
  - csharp
  - vb
  name: Source
  nameWithType: CharReader.Source
  fullName: Microsoft.Health.CharReader.Source
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/CharReader.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Source
    path: search/CharReader.cs
    startLine: 52
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\nThe starting position of the reader is 0 - the first character\n"
  example: []
  syntax:
    content: public string Source { get; set; }
    content.vb: Public Property Source As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Health.CharReader.Source*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.CharReader.Position
  commentId: P:Microsoft.Health.CharReader.Position
  id: Position
  parent: Microsoft.Health.CharReader
  langs:
  - csharp
  - vb
  name: Position
  nameWithType: CharReader.Position
  fullName: Microsoft.Health.CharReader.Position
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/CharReader.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Position
    path: search/CharReader.cs
    startLine: 73
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public int Position { get; set; }
    content.vb: Public Property Position As Integer
    parameters: []
    return:
      type: System.Int32
  overload: Microsoft.Health.CharReader.Position*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.CharReader.IsStart
  commentId: P:Microsoft.Health.CharReader.IsStart
  id: IsStart
  parent: Microsoft.Health.CharReader
  langs:
  - csharp
  - vb
  name: IsStart
  nameWithType: CharReader.IsStart
  fullName: Microsoft.Health.CharReader.IsStart
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/CharReader.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IsStart
    path: search/CharReader.cs
    startLine: 93
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public bool IsStart { get; }
    content.vb: Public ReadOnly Property IsStart As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.Health.CharReader.IsStart*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.CharReader.IsEOF
  commentId: P:Microsoft.Health.CharReader.IsEOF
  id: IsEOF
  parent: Microsoft.Health.CharReader
  langs:
  - csharp
  - vb
  name: IsEOF
  nameWithType: CharReader.IsEOF
  fullName: Microsoft.Health.CharReader.IsEOF
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/CharReader.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IsEOF
    path: search/CharReader.cs
    startLine: 104
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public bool IsEOF { get; }
    content.vb: Public ReadOnly Property IsEOF As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.Health.CharReader.IsEOF*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.CharReader.Peek
  commentId: M:Microsoft.Health.CharReader.Peek
  id: Peek
  parent: Microsoft.Health.CharReader
  langs:
  - csharp
  - vb
  name: Peek()
  nameWithType: CharReader.Peek()
  fullName: Microsoft.Health.CharReader.Peek()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/CharReader.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Peek
    path: search/CharReader.cs
    startLine: 117
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public char Peek()
    content.vb: Public Function Peek As Char
    return:
      type: System.Char
      description: ''
  overload: Microsoft.Health.CharReader.Peek*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.CharReader.MoveNext
  commentId: M:Microsoft.Health.CharReader.MoveNext
  id: MoveNext
  parent: Microsoft.Health.CharReader
  langs:
  - csharp
  - vb
  name: MoveNext()
  nameWithType: CharReader.MoveNext()
  fullName: Microsoft.Health.CharReader.MoveNext()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/CharReader.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: MoveNext
    path: search/CharReader.cs
    startLine: 131
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\nAdvance the reader if more characters are available. Else do nothing\n"
  example: []
  syntax:
    content: public int MoveNext()
    content.vb: Public Function MoveNext As Integer
    return:
      type: System.Int32
  overload: Microsoft.Health.CharReader.MoveNext*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.CharReader.MoveOver(System.Char)
  commentId: M:Microsoft.Health.CharReader.MoveOver(System.Char)
  id: MoveOver(System.Char)
  parent: Microsoft.Health.CharReader
  langs:
  - csharp
  - vb
  name: MoveOver(Char)
  nameWithType: CharReader.MoveOver(Char)
  fullName: Microsoft.Health.CharReader.MoveOver(System.Char)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/CharReader.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: MoveOver
    path: search/CharReader.cs
    startLine: 147
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public int MoveOver(char value)
    content.vb: Public Function MoveOver(value As Char) As Integer
    parameters:
    - id: value
      type: System.Char
      description: ''
    return:
      type: System.Int32
      description: ''
  overload: Microsoft.Health.CharReader.MoveOver*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.CharReader.MoveOver(System.Char[])
  commentId: M:Microsoft.Health.CharReader.MoveOver(System.Char[])
  id: MoveOver(System.Char[])
  parent: Microsoft.Health.CharReader
  langs:
  - csharp
  - vb
  name: MoveOver(Char[])
  nameWithType: CharReader.MoveOver(Char[])
  fullName: Microsoft.Health.CharReader.MoveOver(System.Char[])
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/CharReader.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: MoveOver
    path: search/CharReader.cs
    startLine: 167
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public int MoveOver(char[] characters)
    content.vb: Public Function MoveOver(characters As Char()) As Integer
    parameters:
    - id: characters
      type: System.Char[]
      description: ''
    return:
      type: System.Int32
      description: ''
  overload: Microsoft.Health.CharReader.MoveOver*
  nameWithType.vb: CharReader.MoveOver(Char())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.CharReader.MoveOver(System.Char())
  name.vb: MoveOver(Char())
- uid: Microsoft.Health.CharReader.MoveOverWhitespace
  commentId: M:Microsoft.Health.CharReader.MoveOverWhitespace
  id: MoveOverWhitespace
  parent: Microsoft.Health.CharReader
  langs:
  - csharp
  - vb
  name: MoveOverWhitespace()
  nameWithType: CharReader.MoveOverWhitespace()
  fullName: Microsoft.Health.CharReader.MoveOverWhitespace()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/CharReader.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: MoveOverWhitespace
    path: search/CharReader.cs
    startLine: 191
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public int MoveOverWhitespace()
    content.vb: Public Function MoveOverWhitespace As Integer
    return:
      type: System.Int32
      description: ''
  overload: Microsoft.Health.CharReader.MoveOverWhitespace*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.CharReader.MoveToWhitespace
  commentId: M:Microsoft.Health.CharReader.MoveToWhitespace
  id: MoveToWhitespace
  parent: Microsoft.Health.CharReader
  langs:
  - csharp
  - vb
  name: MoveToWhitespace()
  nameWithType: CharReader.MoveToWhitespace()
  fullName: Microsoft.Health.CharReader.MoveToWhitespace()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/CharReader.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: MoveToWhitespace
    path: search/CharReader.cs
    startLine: 211
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public int MoveToWhitespace()
    content.vb: Public Function MoveToWhitespace As Integer
    return:
      type: System.Int32
      description: ''
  overload: Microsoft.Health.CharReader.MoveToWhitespace*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.CharReader.MoveBack
  commentId: M:Microsoft.Health.CharReader.MoveBack
  id: MoveBack
  parent: Microsoft.Health.CharReader
  langs:
  - csharp
  - vb
  name: MoveBack()
  nameWithType: CharReader.MoveBack()
  fullName: Microsoft.Health.CharReader.MoveBack()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/CharReader.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: MoveBack
    path: search/CharReader.cs
    startLine: 231
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public int MoveBack()
    content.vb: Public Function MoveBack As Integer
    return:
      type: System.Int32
      description: ''
  overload: Microsoft.Health.CharReader.MoveBack*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.CharReader.MoveBackOverWhitespace
  commentId: M:Microsoft.Health.CharReader.MoveBackOverWhitespace
  id: MoveBackOverWhitespace
  parent: Microsoft.Health.CharReader
  langs:
  - csharp
  - vb
  name: MoveBackOverWhitespace()
  nameWithType: CharReader.MoveBackOverWhitespace()
  fullName: Microsoft.Health.CharReader.MoveBackOverWhitespace()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/CharReader.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: MoveBackOverWhitespace
    path: search/CharReader.cs
    startLine: 245
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public int MoveBackOverWhitespace()
    content.vb: Public Function MoveBackOverWhitespace As Integer
    return:
      type: System.Int32
      description: ''
  overload: Microsoft.Health.CharReader.MoveBackOverWhitespace*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.CharReader.MoveTo(System.Char)
  commentId: M:Microsoft.Health.CharReader.MoveTo(System.Char)
  id: MoveTo(System.Char)
  parent: Microsoft.Health.CharReader
  langs:
  - csharp
  - vb
  name: MoveTo(Char)
  nameWithType: CharReader.MoveTo(Char)
  fullName: Microsoft.Health.CharReader.MoveTo(System.Char)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/CharReader.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: MoveTo
    path: search/CharReader.cs
    startLine: 270
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public int MoveTo(char value)
    content.vb: Public Function MoveTo(value As Char) As Integer
    parameters:
    - id: value
      type: System.Char
      description: ''
    return:
      type: System.Int32
      description: ''
  overload: Microsoft.Health.CharReader.MoveTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.CharReader.MoveTo(System.Char[])
  commentId: M:Microsoft.Health.CharReader.MoveTo(System.Char[])
  id: MoveTo(System.Char[])
  parent: Microsoft.Health.CharReader
  langs:
  - csharp
  - vb
  name: MoveTo(Char[])
  nameWithType: CharReader.MoveTo(Char[])
  fullName: Microsoft.Health.CharReader.MoveTo(System.Char[])
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/CharReader.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: MoveTo
    path: search/CharReader.cs
    startLine: 290
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public int MoveTo(char[] delimiters)
    content.vb: Public Function MoveTo(delimiters As Char()) As Integer
    parameters:
    - id: delimiters
      type: System.Char[]
      description: ''
    return:
      type: System.Int32
      description: ''
  overload: Microsoft.Health.CharReader.MoveTo*
  nameWithType.vb: CharReader.MoveTo(Char())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.CharReader.MoveTo(System.Char())
  name.vb: MoveTo(Char())
- uid: Microsoft.Health.CharReader.Read
  commentId: M:Microsoft.Health.CharReader.Read
  id: Read
  parent: Microsoft.Health.CharReader
  langs:
  - csharp
  - vb
  name: Read()
  nameWithType: CharReader.Read()
  fullName: Microsoft.Health.CharReader.Read()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/CharReader.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Read
    path: search/CharReader.cs
    startLine: 315
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\nRead the NEXT char, if any available. Else return char.MinValue\nNote, the reader always starts at position 0, so the first call to read will give you\nthe SECOND character\n"
  example: []
  syntax:
    content: public char Read()
    content.vb: Public Function Read As Char
    return:
      type: System.Char
  overload: Microsoft.Health.CharReader.Read*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.CharReader.ReadTo(System.Char)
  commentId: M:Microsoft.Health.CharReader.ReadTo(System.Char)
  id: ReadTo(System.Char)
  parent: Microsoft.Health.CharReader
  langs:
  - csharp
  - vb
  name: ReadTo(Char)
  nameWithType: CharReader.ReadTo(Char)
  fullName: Microsoft.Health.CharReader.ReadTo(System.Char)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/CharReader.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ReadTo
    path: search/CharReader.cs
    startLine: 336
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public string ReadTo(char delimiter)
    content.vb: Public Function ReadTo(delimiter As Char) As String
    parameters:
    - id: delimiter
      type: System.Char
      description: ''
    return:
      type: System.String
      description: ''
  overload: Microsoft.Health.CharReader.ReadTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.CharReader.Read(System.Char[])
  commentId: M:Microsoft.Health.CharReader.Read(System.Char[])
  id: Read(System.Char[])
  parent: Microsoft.Health.CharReader
  langs:
  - csharp
  - vb
  name: Read(Char[])
  nameWithType: CharReader.Read(Char[])
  fullName: Microsoft.Health.CharReader.Read(System.Char[])
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/CharReader.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Read
    path: search/CharReader.cs
    startLine: 347
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public string Read(char[] delimiters)
    content.vb: Public Function Read(delimiters As Char()) As String
    parameters:
    - id: delimiters
      type: System.Char[]
      description: ''
    return:
      type: System.String
      description: ''
  overload: Microsoft.Health.CharReader.Read*
  nameWithType.vb: CharReader.Read(Char())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.CharReader.Read(System.Char())
  name.vb: Read(Char())
- uid: Microsoft.Health.CharReader.ReadAllWords
  commentId: M:Microsoft.Health.CharReader.ReadAllWords
  id: ReadAllWords
  parent: Microsoft.Health.CharReader
  langs:
  - csharp
  - vb
  name: ReadAllWords()
  nameWithType: CharReader.ReadAllWords()
  fullName: Microsoft.Health.CharReader.ReadAllWords()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/CharReader.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ReadAllWords
    path: search/CharReader.cs
    startLine: 357
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public IList<string> ReadAllWords()
    content.vb: Public Function ReadAllWords As IList(Of String)
    return:
      type: System.Collections.Generic.IList{System.String}
      description: ''
  overload: Microsoft.Health.CharReader.ReadAllWords*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.CharReader.ReadAllWords(System.Collections.Generic.ICollection{System.String})
  commentId: M:Microsoft.Health.CharReader.ReadAllWords(System.Collections.Generic.ICollection{System.String})
  id: ReadAllWords(System.Collections.Generic.ICollection{System.String})
  parent: Microsoft.Health.CharReader
  langs:
  - csharp
  - vb
  name: ReadAllWords(ICollection<String>)
  nameWithType: CharReader.ReadAllWords(ICollection<String>)
  fullName: Microsoft.Health.CharReader.ReadAllWords(System.Collections.Generic.ICollection<System.String>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/CharReader.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ReadAllWords
    path: search/CharReader.cs
    startLine: 367
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\nWords are being defined as delimited by whitespace. Use a normalizer to handle variations\n"
  example: []
  syntax:
    content: public void ReadAllWords(ICollection<string> words)
    content.vb: Public Sub ReadAllWords(words As ICollection(Of String))
    parameters:
    - id: words
      type: System.Collections.Generic.ICollection{System.String}
  overload: Microsoft.Health.CharReader.ReadAllWords*
  nameWithType.vb: CharReader.ReadAllWords(ICollection(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.CharReader.ReadAllWords(System.Collections.Generic.ICollection(Of System.String))
  name.vb: ReadAllWords(ICollection(Of String))
- uid: Microsoft.Health.CharReader.GetBuilder
  commentId: M:Microsoft.Health.CharReader.GetBuilder
  id: GetBuilder
  parent: Microsoft.Health.CharReader
  langs:
  - csharp
  - vb
  name: GetBuilder()
  nameWithType: CharReader.GetBuilder()
  fullName: Microsoft.Health.CharReader.GetBuilder()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/CharReader.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetBuilder
    path: search/CharReader.cs
    startLine: 401
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public StringBuilder GetBuilder()
    content.vb: Public Function GetBuilder As StringBuilder
    return:
      type: System.Text.StringBuilder
      description: ''
  overload: Microsoft.Health.CharReader.GetBuilder*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  name: SetProperty(String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object())
  name.vb: SetProperty(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  name: InvokeMethod(String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object())
  name.vb: InvokeMethod(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  parent: Microsoft.Health.Utility.InvariantString
  definition: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  name: ToStringInvariant()
  nameWithType: InvariantString.ToStringInvariant()
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant()
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.CharReader.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  parent: Microsoft.Health.Utility.TypeHelper
  definition: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  name: ValueOrDbNull<CharReader>()
  nameWithType: TypeHelper.ValueOrDbNull<CharReader>()
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.CharReader>()
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of CharReader)()
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.CharReader)()
  name.vb: ValueOrDbNull(Of CharReader)()
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull<CharReader>
    nameWithType: TypeHelper.ValueOrDbNull<CharReader>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.CharReader>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull(Of CharReader)
    nameWithType: TypeHelper.ValueOrDbNull(Of CharReader)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.CharReader)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  parent: Microsoft.Health.Utility.WCXmlHelper
  definition: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  name: ToXml()
  nameWithType: WCXmlHelper.ToXml()
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml()
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  isExternal: true
  name: SetProperty(Object, String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object())
  name.vb: SetProperty(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions
  commentId: T:Microsoft.Health.Utility.IDispatchExtensions
  parent: Microsoft.Health.Utility
  isExternal: false
  name: IDispatchExtensions
  nameWithType: IDispatchExtensions
  fullName: Microsoft.Health.Utility.IDispatchExtensions
- uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  isExternal: true
  name: InvokeMethod(Object, String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object())
  name.vb: InvokeMethod(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  isExternal: true
  name: ToStringInvariant(Object)
  nameWithType: InvariantString.ToStringInvariant(Object)
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString
  commentId: T:Microsoft.Health.Utility.InvariantString
  parent: Microsoft.Health.Utility
  isExternal: false
  name: InvariantString
  nameWithType: InvariantString
  fullName: Microsoft.Health.Utility.InvariantString
- uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  isExternal: false
  name: ValueOrDbNull<T>(T)
  nameWithType: TypeHelper.ValueOrDbNull<T>(T)
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>(T)
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of T)(T)
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)(T)
  name.vb: ValueOrDbNull(Of T)(T)
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull<T>
    nameWithType: TypeHelper.ValueOrDbNull<T>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull(Of T)
    nameWithType: TypeHelper.ValueOrDbNull(Of T)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.TypeHelper
  commentId: T:Microsoft.Health.Utility.TypeHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: TypeHelper
  nameWithType: TypeHelper
  fullName: Microsoft.Health.Utility.TypeHelper
- uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  isExternal: true
  name: ToXml(Object)
  nameWithType: WCXmlHelper.ToXml(Object)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.WCXmlHelper
  commentId: T:Microsoft.Health.Utility.WCXmlHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: WCXmlHelper
  nameWithType: WCXmlHelper
  fullName: Microsoft.Health.Utility.WCXmlHelper
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: Microsoft.Health.CharReader.#ctor*
  commentId: Overload:Microsoft.Health.CharReader.#ctor
  isExternal: false
  name: CharReader
  nameWithType: CharReader.CharReader
  fullName: Microsoft.Health.CharReader.CharReader
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Health.CharReader.Current*
  commentId: Overload:Microsoft.Health.CharReader.Current
  isExternal: false
  name: Current
  nameWithType: CharReader.Current
  fullName: Microsoft.Health.CharReader.Current
- uid: System.Char
  commentId: T:System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: Microsoft.Health.CharReader.Source*
  commentId: Overload:Microsoft.Health.CharReader.Source
  isExternal: false
  name: Source
  nameWithType: CharReader.Source
  fullName: Microsoft.Health.CharReader.Source
- uid: Microsoft.Health.CharReader.Position*
  commentId: Overload:Microsoft.Health.CharReader.Position
  isExternal: false
  name: Position
  nameWithType: CharReader.Position
  fullName: Microsoft.Health.CharReader.Position
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Health.CharReader.IsStart*
  commentId: Overload:Microsoft.Health.CharReader.IsStart
  isExternal: false
  name: IsStart
  nameWithType: CharReader.IsStart
  fullName: Microsoft.Health.CharReader.IsStart
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Health.CharReader.IsEOF*
  commentId: Overload:Microsoft.Health.CharReader.IsEOF
  isExternal: false
  name: IsEOF
  nameWithType: CharReader.IsEOF
  fullName: Microsoft.Health.CharReader.IsEOF
- uid: Microsoft.Health.CharReader.Peek*
  commentId: Overload:Microsoft.Health.CharReader.Peek
  isExternal: false
  name: Peek
  nameWithType: CharReader.Peek
  fullName: Microsoft.Health.CharReader.Peek
- uid: Microsoft.Health.CharReader.MoveNext*
  commentId: Overload:Microsoft.Health.CharReader.MoveNext
  isExternal: false
  name: MoveNext
  nameWithType: CharReader.MoveNext
  fullName: Microsoft.Health.CharReader.MoveNext
- uid: Microsoft.Health.CharReader.MoveOver*
  commentId: Overload:Microsoft.Health.CharReader.MoveOver
  isExternal: false
  name: MoveOver
  nameWithType: CharReader.MoveOver
  fullName: Microsoft.Health.CharReader.MoveOver
- uid: System.Char[]
  name: Char[]
  nameWithType: Char[]
  fullName: System.Char[]
  nameWithType.vb: Char()
  fullName.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.Health.CharReader.MoveOverWhitespace*
  commentId: Overload:Microsoft.Health.CharReader.MoveOverWhitespace
  isExternal: false
  name: MoveOverWhitespace
  nameWithType: CharReader.MoveOverWhitespace
  fullName: Microsoft.Health.CharReader.MoveOverWhitespace
- uid: Microsoft.Health.CharReader.MoveToWhitespace*
  commentId: Overload:Microsoft.Health.CharReader.MoveToWhitespace
  isExternal: false
  name: MoveToWhitespace
  nameWithType: CharReader.MoveToWhitespace
  fullName: Microsoft.Health.CharReader.MoveToWhitespace
- uid: Microsoft.Health.CharReader.MoveBack*
  commentId: Overload:Microsoft.Health.CharReader.MoveBack
  isExternal: false
  name: MoveBack
  nameWithType: CharReader.MoveBack
  fullName: Microsoft.Health.CharReader.MoveBack
- uid: Microsoft.Health.CharReader.MoveBackOverWhitespace*
  commentId: Overload:Microsoft.Health.CharReader.MoveBackOverWhitespace
  isExternal: false
  name: MoveBackOverWhitespace
  nameWithType: CharReader.MoveBackOverWhitespace
  fullName: Microsoft.Health.CharReader.MoveBackOverWhitespace
- uid: Microsoft.Health.CharReader.MoveTo*
  commentId: Overload:Microsoft.Health.CharReader.MoveTo
  isExternal: false
  name: MoveTo
  nameWithType: CharReader.MoveTo
  fullName: Microsoft.Health.CharReader.MoveTo
- uid: Microsoft.Health.CharReader.Read*
  commentId: Overload:Microsoft.Health.CharReader.Read
  isExternal: false
  name: Read
  nameWithType: CharReader.Read
  fullName: Microsoft.Health.CharReader.Read
- uid: Microsoft.Health.CharReader.ReadTo*
  commentId: Overload:Microsoft.Health.CharReader.ReadTo
  isExternal: false
  name: ReadTo
  nameWithType: CharReader.ReadTo
  fullName: Microsoft.Health.CharReader.ReadTo
- uid: Microsoft.Health.CharReader.ReadAllWords*
  commentId: Overload:Microsoft.Health.CharReader.ReadAllWords
  isExternal: false
  name: ReadAllWords
  nameWithType: CharReader.ReadAllWords
  fullName: Microsoft.Health.CharReader.ReadAllWords
- uid: System.Collections.Generic.IList{System.String}
  commentId: T:System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  nameWithType.vb: IList(Of String)
  fullName.vb: System.Collections.Generic.IList(Of System.String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.ICollection{System.String}
  commentId: T:System.Collections.Generic.ICollection{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<String>
  nameWithType: ICollection<String>
  fullName: System.Collections.Generic.ICollection<System.String>
  nameWithType.vb: ICollection(Of String)
  fullName.vb: System.Collections.Generic.ICollection(Of System.String)
  name.vb: ICollection(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.CharReader.GetBuilder*
  commentId: Overload:Microsoft.Health.CharReader.GetBuilder
  isExternal: false
  name: GetBuilder
  nameWithType: CharReader.GetBuilder
  fullName: Microsoft.Health.CharReader.GetBuilder
- uid: System.Text.StringBuilder
  commentId: T:System.Text.StringBuilder
  parent: System.Text
  isExternal: true
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Text
  commentId: N:System.Text
  isExternal: false
  name: System.Text
  nameWithType: System.Text
  fullName: System.Text
