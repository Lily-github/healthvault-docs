### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.PhraseAnalyzer.WordBreaker
  commentId: T:Microsoft.Health.PhraseAnalyzer.WordBreaker
  id: WordBreaker
  parent: Microsoft.Health.PhraseAnalyzer
  children:
  - Microsoft.Health.PhraseAnalyzer.WordBreaker.#ctor
  - Microsoft.Health.PhraseAnalyzer.WordBreaker.#ctor(Microsoft.Health.PhraseAnalyzer.WordBreakLexer)
  - Microsoft.Health.PhraseAnalyzer.WordBreaker.#ctor(Microsoft.Health.PhraseAnalyzer.WordBreakLexer,Microsoft.Health.StringAtoms)
  - Microsoft.Health.PhraseAnalyzer.WordBreaker.Atomizer
  - Microsoft.Health.PhraseAnalyzer.WordBreaker.Clone
  - Microsoft.Health.PhraseAnalyzer.WordBreaker.GetWords(System.String,System.Boolean)
  - Microsoft.Health.PhraseAnalyzer.WordBreaker.WordBreak(System.String)
  - Microsoft.Health.PhraseAnalyzer.WordBreaker.WordBreak(System.String,System.Collections.Generic.IList{System.String})
  langs:
  - csharp
  - vb
  name: WordBreaker
  nameWithType: WordBreaker
  fullName: Microsoft.Health.PhraseAnalyzer.WordBreaker
  type: Class
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/WordBreaker.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: WordBreaker
    path: search/PhraseAnalyzer/WordBreaker.cs
    startLine: 34
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: 'public class WordBreaker : IWordBreaker'
    content.vb: >-
      Public Class WordBreaker
          Implements IWordBreaker
  inheritance:
  - System.Object
  implements:
  - Microsoft.Health.PhraseAnalyzer.IWordBreaker
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - Microsoft.Health.PhraseAnalyzer.WordBreaker.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  - System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.PhraseAnalyzer.WordBreaker.#ctor
  commentId: M:Microsoft.Health.PhraseAnalyzer.WordBreaker.#ctor
  id: '#ctor'
  parent: Microsoft.Health.PhraseAnalyzer.WordBreaker
  langs:
  - csharp
  - vb
  name: WordBreaker()
  nameWithType: WordBreaker.WordBreaker()
  fullName: Microsoft.Health.PhraseAnalyzer.WordBreaker.WordBreaker()
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/WordBreaker.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: search/PhraseAnalyzer/WordBreaker.cs
    startLine: 43
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public WordBreaker()
    content.vb: Public Sub New
  overload: Microsoft.Health.PhraseAnalyzer.WordBreaker.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.PhraseAnalyzer.WordBreaker.#ctor(Microsoft.Health.PhraseAnalyzer.WordBreakLexer)
  commentId: M:Microsoft.Health.PhraseAnalyzer.WordBreaker.#ctor(Microsoft.Health.PhraseAnalyzer.WordBreakLexer)
  id: '#ctor(Microsoft.Health.PhraseAnalyzer.WordBreakLexer)'
  parent: Microsoft.Health.PhraseAnalyzer.WordBreaker
  langs:
  - csharp
  - vb
  name: WordBreaker(WordBreakLexer)
  nameWithType: WordBreaker.WordBreaker(WordBreakLexer)
  fullName: Microsoft.Health.PhraseAnalyzer.WordBreaker.WordBreaker(Microsoft.Health.PhraseAnalyzer.WordBreakLexer)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/WordBreaker.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: search/PhraseAnalyzer/WordBreaker.cs
    startLine: 52
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public WordBreaker(WordBreakLexer lexer)
    content.vb: Public Sub New(lexer As WordBreakLexer)
    parameters:
    - id: lexer
      type: Microsoft.Health.PhraseAnalyzer.WordBreakLexer
      description: ''
  overload: Microsoft.Health.PhraseAnalyzer.WordBreaker.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.PhraseAnalyzer.WordBreaker.#ctor(Microsoft.Health.PhraseAnalyzer.WordBreakLexer,Microsoft.Health.StringAtoms)
  commentId: M:Microsoft.Health.PhraseAnalyzer.WordBreaker.#ctor(Microsoft.Health.PhraseAnalyzer.WordBreakLexer,Microsoft.Health.StringAtoms)
  id: '#ctor(Microsoft.Health.PhraseAnalyzer.WordBreakLexer,Microsoft.Health.StringAtoms)'
  parent: Microsoft.Health.PhraseAnalyzer.WordBreaker
  langs:
  - csharp
  - vb
  name: WordBreaker(WordBreakLexer, StringAtoms)
  nameWithType: WordBreaker.WordBreaker(WordBreakLexer, StringAtoms)
  fullName: Microsoft.Health.PhraseAnalyzer.WordBreaker.WordBreaker(Microsoft.Health.PhraseAnalyzer.WordBreakLexer, Microsoft.Health.StringAtoms)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/WordBreaker.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: search/PhraseAnalyzer/WordBreaker.cs
    startLine: 62
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public WordBreaker(WordBreakLexer lexer, StringAtoms atoms)
    content.vb: Public Sub New(lexer As WordBreakLexer, atoms As StringAtoms)
    parameters:
    - id: lexer
      type: Microsoft.Health.PhraseAnalyzer.WordBreakLexer
      description: ''
    - id: atoms
      type: Microsoft.Health.StringAtoms
      description: ''
  overload: Microsoft.Health.PhraseAnalyzer.WordBreaker.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.PhraseAnalyzer.WordBreaker.Atomizer
  commentId: P:Microsoft.Health.PhraseAnalyzer.WordBreaker.Atomizer
  id: Atomizer
  parent: Microsoft.Health.PhraseAnalyzer.WordBreaker
  langs:
  - csharp
  - vb
  name: Atomizer
  nameWithType: WordBreaker.Atomizer
  fullName: Microsoft.Health.PhraseAnalyzer.WordBreaker.Atomizer
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/WordBreaker.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Atomizer
    path: search/PhraseAnalyzer/WordBreaker.cs
    startLine: 76
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public StringAtoms Atomizer { get; set; }
    content.vb: Public Property Atomizer As StringAtoms
    parameters: []
    return:
      type: Microsoft.Health.StringAtoms
  overload: Microsoft.Health.PhraseAnalyzer.WordBreaker.Atomizer*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.PhraseAnalyzer.WordBreaker.WordBreak(System.String)
  commentId: M:Microsoft.Health.PhraseAnalyzer.WordBreaker.WordBreak(System.String)
  id: WordBreak(System.String)
  parent: Microsoft.Health.PhraseAnalyzer.WordBreaker
  langs:
  - csharp
  - vb
  name: WordBreak(String)
  nameWithType: WordBreaker.WordBreak(String)
  fullName: Microsoft.Health.PhraseAnalyzer.WordBreaker.WordBreak(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/WordBreaker.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: WordBreak
    path: search/PhraseAnalyzer/WordBreaker.cs
    startLine: 113
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public IList<string> WordBreak(string phrase)
    content.vb: Public Function WordBreak(phrase As String) As IList(Of String)
    parameters:
    - id: phrase
      type: System.String
      description: ''
    return:
      type: System.Collections.Generic.IList{System.String}
      description: ''
  overload: Microsoft.Health.PhraseAnalyzer.WordBreaker.WordBreak*
  implements:
  - Microsoft.Health.PhraseAnalyzer.IWordBreaker.WordBreak(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.PhraseAnalyzer.WordBreaker.GetWords(System.String,System.Boolean)
  commentId: M:Microsoft.Health.PhraseAnalyzer.WordBreaker.GetWords(System.String,System.Boolean)
  id: GetWords(System.String,System.Boolean)
  parent: Microsoft.Health.PhraseAnalyzer.WordBreaker
  langs:
  - csharp
  - vb
  name: GetWords(String, Boolean)
  nameWithType: WordBreaker.GetWords(String, Boolean)
  fullName: Microsoft.Health.PhraseAnalyzer.WordBreaker.GetWords(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/WordBreaker.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetWords
    path: search/PhraseAnalyzer/WordBreaker.cs
    startLine: 124
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public IList<string> GetWords(string phrase, bool reuseBuffer)
    content.vb: Public Function GetWords(phrase As String, reuseBuffer As Boolean) As IList(Of String)
    parameters:
    - id: phrase
      type: System.String
      description: ''
    - id: reuseBuffer
      type: System.Boolean
      description: ''
    return:
      type: System.Collections.Generic.IList{System.String}
      description: ''
  overload: Microsoft.Health.PhraseAnalyzer.WordBreaker.GetWords*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.PhraseAnalyzer.WordBreaker.WordBreak(System.String,System.Collections.Generic.IList{System.String})
  commentId: M:Microsoft.Health.PhraseAnalyzer.WordBreaker.WordBreak(System.String,System.Collections.Generic.IList{System.String})
  id: WordBreak(System.String,System.Collections.Generic.IList{System.String})
  parent: Microsoft.Health.PhraseAnalyzer.WordBreaker
  langs:
  - csharp
  - vb
  name: WordBreak(String, IList<String>)
  nameWithType: WordBreaker.WordBreak(String, IList<String>)
  fullName: Microsoft.Health.PhraseAnalyzer.WordBreaker.WordBreak(System.String, System.Collections.Generic.IList<System.String>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/WordBreaker.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: WordBreak
    path: search/PhraseAnalyzer/WordBreaker.cs
    startLine: 136
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public void WordBreak(string phrase, IList<string> words)
    content.vb: Public Sub WordBreak(phrase As String, words As IList(Of String))
    parameters:
    - id: phrase
      type: System.String
      description: ''
    - id: words
      type: System.Collections.Generic.IList{System.String}
      description: ''
  overload: Microsoft.Health.PhraseAnalyzer.WordBreaker.WordBreak*
  implements:
  - Microsoft.Health.PhraseAnalyzer.IWordBreaker.WordBreak(System.String,System.Collections.Generic.IList{System.String})
  nameWithType.vb: WordBreaker.WordBreak(String, IList(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.PhraseAnalyzer.WordBreaker.WordBreak(System.String, System.Collections.Generic.IList(Of System.String))
  name.vb: WordBreak(String, IList(Of String))
- uid: Microsoft.Health.PhraseAnalyzer.WordBreaker.Clone
  commentId: M:Microsoft.Health.PhraseAnalyzer.WordBreaker.Clone
  id: Clone
  parent: Microsoft.Health.PhraseAnalyzer.WordBreaker
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: WordBreaker.Clone()
  fullName: Microsoft.Health.PhraseAnalyzer.WordBreaker.Clone()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/WordBreaker.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Clone
    path: search/PhraseAnalyzer/WordBreaker.cs
    startLine: 161
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public WordBreaker Clone()
    content.vb: Public Function Clone As WordBreaker
    return:
      type: Microsoft.Health.PhraseAnalyzer.WordBreaker
      description: ''
  overload: Microsoft.Health.PhraseAnalyzer.WordBreaker.Clone*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Health.PhraseAnalyzer
  commentId: N:Microsoft.Health.PhraseAnalyzer
  isExternal: false
  name: Microsoft.Health.PhraseAnalyzer
  nameWithType: Microsoft.Health.PhraseAnalyzer
  fullName: Microsoft.Health.PhraseAnalyzer
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Health.PhraseAnalyzer.IWordBreaker
  commentId: T:Microsoft.Health.PhraseAnalyzer.IWordBreaker
  parent: Microsoft.Health.PhraseAnalyzer
  isExternal: false
  name: IWordBreaker
  nameWithType: IWordBreaker
  fullName: Microsoft.Health.PhraseAnalyzer.IWordBreaker
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  name: SetProperty(String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object())
  name.vb: SetProperty(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  name: InvokeMethod(String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object())
  name.vb: InvokeMethod(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  parent: Microsoft.Health.Utility.InvariantString
  definition: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  name: ToStringInvariant()
  nameWithType: InvariantString.ToStringInvariant()
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant()
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.WordBreaker.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  parent: Microsoft.Health.Utility.TypeHelper
  definition: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  name: ValueOrDbNull<WordBreaker>()
  nameWithType: TypeHelper.ValueOrDbNull<WordBreaker>()
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.PhraseAnalyzer.WordBreaker>()
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of WordBreaker)()
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.PhraseAnalyzer.WordBreaker)()
  name.vb: ValueOrDbNull(Of WordBreaker)()
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull<WordBreaker>
    nameWithType: TypeHelper.ValueOrDbNull<WordBreaker>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.PhraseAnalyzer.WordBreaker>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull(Of WordBreaker)
    nameWithType: TypeHelper.ValueOrDbNull(Of WordBreaker)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.PhraseAnalyzer.WordBreaker)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  parent: Microsoft.Health.Utility.WCXmlHelper
  definition: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  name: ToXml()
  nameWithType: WCXmlHelper.ToXml()
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml()
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  isExternal: true
  name: SetProperty(Object, String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object())
  name.vb: SetProperty(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions
  commentId: T:Microsoft.Health.Utility.IDispatchExtensions
  parent: Microsoft.Health.Utility
  isExternal: false
  name: IDispatchExtensions
  nameWithType: IDispatchExtensions
  fullName: Microsoft.Health.Utility.IDispatchExtensions
- uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  isExternal: true
  name: InvokeMethod(Object, String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object())
  name.vb: InvokeMethod(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  isExternal: true
  name: ToStringInvariant(Object)
  nameWithType: InvariantString.ToStringInvariant(Object)
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString
  commentId: T:Microsoft.Health.Utility.InvariantString
  parent: Microsoft.Health.Utility
  isExternal: false
  name: InvariantString
  nameWithType: InvariantString
  fullName: Microsoft.Health.Utility.InvariantString
- uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  isExternal: false
  name: ValueOrDbNull<T>(T)
  nameWithType: TypeHelper.ValueOrDbNull<T>(T)
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>(T)
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of T)(T)
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)(T)
  name.vb: ValueOrDbNull(Of T)(T)
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull<T>
    nameWithType: TypeHelper.ValueOrDbNull<T>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull(Of T)
    nameWithType: TypeHelper.ValueOrDbNull(Of T)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.TypeHelper
  commentId: T:Microsoft.Health.Utility.TypeHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: TypeHelper
  nameWithType: TypeHelper
  fullName: Microsoft.Health.Utility.TypeHelper
- uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  isExternal: true
  name: ToXml(Object)
  nameWithType: WCXmlHelper.ToXml(Object)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.WCXmlHelper
  commentId: T:Microsoft.Health.Utility.WCXmlHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: WCXmlHelper
  nameWithType: WCXmlHelper
  fullName: Microsoft.Health.Utility.WCXmlHelper
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: Microsoft.Health.PhraseAnalyzer.WordBreaker.#ctor*
  commentId: Overload:Microsoft.Health.PhraseAnalyzer.WordBreaker.#ctor
  isExternal: false
  name: WordBreaker
  nameWithType: WordBreaker.WordBreaker
  fullName: Microsoft.Health.PhraseAnalyzer.WordBreaker.WordBreaker
- uid: Microsoft.Health.PhraseAnalyzer.WordBreakLexer
  commentId: T:Microsoft.Health.PhraseAnalyzer.WordBreakLexer
  parent: Microsoft.Health.PhraseAnalyzer
  isExternal: false
  name: WordBreakLexer
  nameWithType: WordBreakLexer
  fullName: Microsoft.Health.PhraseAnalyzer.WordBreakLexer
- uid: Microsoft.Health.StringAtoms
  commentId: T:Microsoft.Health.StringAtoms
  parent: Microsoft.Health
  isExternal: false
  name: StringAtoms
  nameWithType: StringAtoms
  fullName: Microsoft.Health.StringAtoms
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: Microsoft.Health.PhraseAnalyzer.WordBreaker.Atomizer*
  commentId: Overload:Microsoft.Health.PhraseAnalyzer.WordBreaker.Atomizer
  isExternal: false
  name: Atomizer
  nameWithType: WordBreaker.Atomizer
  fullName: Microsoft.Health.PhraseAnalyzer.WordBreaker.Atomizer
- uid: Microsoft.Health.PhraseAnalyzer.WordBreaker.WordBreak*
  commentId: Overload:Microsoft.Health.PhraseAnalyzer.WordBreaker.WordBreak
  isExternal: false
  name: WordBreak
  nameWithType: WordBreaker.WordBreak
  fullName: Microsoft.Health.PhraseAnalyzer.WordBreaker.WordBreak
- uid: Microsoft.Health.PhraseAnalyzer.IWordBreaker.WordBreak(System.String)
  commentId: M:Microsoft.Health.PhraseAnalyzer.IWordBreaker.WordBreak(System.String)
  parent: Microsoft.Health.PhraseAnalyzer.IWordBreaker
  isExternal: true
  name: WordBreak(String)
  nameWithType: IWordBreaker.WordBreak(String)
  fullName: Microsoft.Health.PhraseAnalyzer.IWordBreaker.WordBreak(System.String)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.IWordBreaker.WordBreak(System.String)
    name: WordBreak
    nameWithType: IWordBreaker.WordBreak
    fullName: Microsoft.Health.PhraseAnalyzer.IWordBreaker.WordBreak
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.IWordBreaker.WordBreak(System.String)
    name: WordBreak
    nameWithType: IWordBreaker.WordBreak
    fullName: Microsoft.Health.PhraseAnalyzer.IWordBreaker.WordBreak
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IList{System.String}
  commentId: T:System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  nameWithType.vb: IList(Of String)
  fullName.vb: System.Collections.Generic.IList(Of System.String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Health.PhraseAnalyzer.WordBreaker.GetWords*
  commentId: Overload:Microsoft.Health.PhraseAnalyzer.WordBreaker.GetWords
  isExternal: false
  name: GetWords
  nameWithType: WordBreaker.GetWords
  fullName: Microsoft.Health.PhraseAnalyzer.WordBreaker.GetWords
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Health.PhraseAnalyzer.IWordBreaker.WordBreak(System.String,System.Collections.Generic.IList{System.String})
  commentId: M:Microsoft.Health.PhraseAnalyzer.IWordBreaker.WordBreak(System.String,System.Collections.Generic.IList{System.String})
  parent: Microsoft.Health.PhraseAnalyzer.IWordBreaker
  isExternal: true
  name: WordBreak(String, IList<String>)
  nameWithType: IWordBreaker.WordBreak(String, IList<String>)
  fullName: Microsoft.Health.PhraseAnalyzer.IWordBreaker.WordBreak(System.String, System.Collections.Generic.IList<System.String>)
  nameWithType.vb: IWordBreaker.WordBreak(String, IList(Of String))
  fullName.vb: Microsoft.Health.PhraseAnalyzer.IWordBreaker.WordBreak(System.String, System.Collections.Generic.IList(Of System.String))
  name.vb: WordBreak(String, IList(Of String))
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.IWordBreaker.WordBreak(System.String,System.Collections.Generic.IList{System.String})
    name: WordBreak
    nameWithType: IWordBreaker.WordBreak
    fullName: Microsoft.Health.PhraseAnalyzer.IWordBreaker.WordBreak
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.IWordBreaker.WordBreak(System.String,System.Collections.Generic.IList{System.String})
    name: WordBreak
    nameWithType: IWordBreaker.WordBreak
    fullName: Microsoft.Health.PhraseAnalyzer.IWordBreaker.WordBreak
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.WordBreaker.Clone*
  commentId: Overload:Microsoft.Health.PhraseAnalyzer.WordBreaker.Clone
  isExternal: false
  name: Clone
  nameWithType: WordBreaker.Clone
  fullName: Microsoft.Health.PhraseAnalyzer.WordBreaker.Clone
- uid: Microsoft.Health.PhraseAnalyzer.WordBreaker
  commentId: T:Microsoft.Health.PhraseAnalyzer.WordBreaker
  parent: Microsoft.Health.PhraseAnalyzer
  isExternal: false
  name: WordBreaker
  nameWithType: WordBreaker
  fullName: Microsoft.Health.PhraseAnalyzer.WordBreaker
