### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.Utility.WCCryptoHelper
  commentId: T:Microsoft.Health.Utility.WCCryptoHelper
  id: WCCryptoHelper
  parent: Microsoft.Health.Utility
  children:
  - Microsoft.Health.Utility.WCCryptoHelper.CreateSignature(System.Security.Cryptography.AsymmetricAlgorithm,System.String,System.Byte[])
  - Microsoft.Health.Utility.WCCryptoHelper.Decrypt(System.Security.Cryptography.ICryptoTransform,System.Action{System.IO.Stream})
  - Microsoft.Health.Utility.WCCryptoHelper.Encrypt(System.Security.Cryptography.ICryptoTransform,System.Action{System.IO.Stream})
  - Microsoft.Health.Utility.WCCryptoHelper.Sha1Hash(System.Byte[])
  - Microsoft.Health.Utility.WCCryptoHelper.Sha1Hash(System.String)
  - Microsoft.Health.Utility.WCCryptoHelper.Sha1HashAsString(System.String)
  - Microsoft.Health.Utility.WCCryptoHelper.Sha256Hash(System.String)
  - Microsoft.Health.Utility.WCCryptoHelper.VerifySignature(System.Security.Cryptography.AsymmetricAlgorithm,System.String,System.Byte[],System.Byte[])
  langs:
  - csharp
  - vb
  name: WCCryptoHelper
  nameWithType: WCCryptoHelper
  fullName: Microsoft.Health.Utility.WCCryptoHelper
  type: Class
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/Crypto.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: WCCryptoHelper
    path: utilities/Crypto.cs
    startLine: 17
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nHelper functions for crypto\n"
  example: []
  syntax:
    content: public static class WCCryptoHelper
    content.vb: Public Module WCCryptoHelper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Health.Utility.WCCryptoHelper.Sha1HashAsString(System.String)
  commentId: M:Microsoft.Health.Utility.WCCryptoHelper.Sha1HashAsString(System.String)
  id: Sha1HashAsString(System.String)
  parent: Microsoft.Health.Utility.WCCryptoHelper
  langs:
  - csharp
  - vb
  name: Sha1HashAsString(String)
  nameWithType: WCCryptoHelper.Sha1HashAsString(String)
  fullName: Microsoft.Health.Utility.WCCryptoHelper.Sha1HashAsString(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/Crypto.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Sha1HashAsString
    path: utilities/Crypto.cs
    startLine: 23
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: 'Compute a hash over a string, return as string '
  example: []
  syntax:
    content: public static string Sha1HashAsString(string source)
    content.vb: Public Shared Function Sha1HashAsString(source As String) As String
    parameters:
    - id: source
      type: System.String
      description: 'string to hash '
    return:
      type: System.String
      description: 'hash as a string '
  overload: Microsoft.Health.Utility.WCCryptoHelper.Sha1HashAsString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCCryptoHelper.Sha1Hash(System.String)
  commentId: M:Microsoft.Health.Utility.WCCryptoHelper.Sha1Hash(System.String)
  id: Sha1Hash(System.String)
  parent: Microsoft.Health.Utility.WCCryptoHelper
  langs:
  - csharp
  - vb
  name: Sha1Hash(String)
  nameWithType: WCCryptoHelper.Sha1Hash(String)
  fullName: Microsoft.Health.Utility.WCCryptoHelper.Sha1Hash(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/Crypto.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Sha1Hash
    path: utilities/Crypto.cs
    startLine: 31
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: Compute a hash of a string, return as byte[]
  example: []
  syntax:
    content: public static byte[] Sha1Hash(string source)
    content.vb: Public Shared Function Sha1Hash(source As String) As Byte()
    parameters:
    - id: source
      type: System.String
      description: 'string to hash '
    return:
      type: System.Byte[]
      description: 'hash as a byte[] '
  overload: Microsoft.Health.Utility.WCCryptoHelper.Sha1Hash*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCCryptoHelper.Sha256Hash(System.String)
  commentId: M:Microsoft.Health.Utility.WCCryptoHelper.Sha256Hash(System.String)
  id: Sha256Hash(System.String)
  parent: Microsoft.Health.Utility.WCCryptoHelper
  langs:
  - csharp
  - vb
  name: Sha256Hash(String)
  nameWithType: WCCryptoHelper.Sha256Hash(String)
  fullName: Microsoft.Health.Utility.WCCryptoHelper.Sha256Hash(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/Crypto.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Sha256Hash
    path: utilities/Crypto.cs
    startLine: 39
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nComputes the string source into byte[] using SHA256\n"
  example: []
  syntax:
    content: public static byte[] Sha256Hash(string source)
    content.vb: Public Shared Function Sha256Hash(source As String) As Byte()
    parameters:
    - id: source
      type: System.String
    return:
      type: System.Byte[]
  overload: Microsoft.Health.Utility.WCCryptoHelper.Sha256Hash*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.WCCryptoHelper.Sha1Hash(System.Byte[])
  commentId: M:Microsoft.Health.Utility.WCCryptoHelper.Sha1Hash(System.Byte[])
  id: Sha1Hash(System.Byte[])
  parent: Microsoft.Health.Utility.WCCryptoHelper
  langs:
  - csharp
  - vb
  name: Sha1Hash(Byte[])
  nameWithType: WCCryptoHelper.Sha1Hash(Byte[])
  fullName: Microsoft.Health.Utility.WCCryptoHelper.Sha1Hash(System.Byte[])
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/Crypto.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Sha1Hash
    path: utilities/Crypto.cs
    startLine: 50
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: Compute a hash of a byte[], return as byte[]
  example: []
  syntax:
    content: public static byte[] Sha1Hash(byte[] source)
    content.vb: Public Shared Function Sha1Hash(source As Byte()) As Byte()
    parameters:
    - id: source
      type: System.Byte[]
      description: 'byte array to hash '
    return:
      type: System.Byte[]
      description: 'hash as a byte[] '
  overload: Microsoft.Health.Utility.WCCryptoHelper.Sha1Hash*
  nameWithType.vb: WCCryptoHelper.Sha1Hash(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.WCCryptoHelper.Sha1Hash(System.Byte())
  name.vb: Sha1Hash(Byte())
- uid: Microsoft.Health.Utility.WCCryptoHelper.CreateSignature(System.Security.Cryptography.AsymmetricAlgorithm,System.String,System.Byte[])
  commentId: M:Microsoft.Health.Utility.WCCryptoHelper.CreateSignature(System.Security.Cryptography.AsymmetricAlgorithm,System.String,System.Byte[])
  id: CreateSignature(System.Security.Cryptography.AsymmetricAlgorithm,System.String,System.Byte[])
  parent: Microsoft.Health.Utility.WCCryptoHelper
  langs:
  - csharp
  - vb
  name: CreateSignature(AsymmetricAlgorithm, String, Byte[])
  nameWithType: WCCryptoHelper.CreateSignature(AsymmetricAlgorithm, String, Byte[])
  fullName: Microsoft.Health.Utility.WCCryptoHelper.CreateSignature(System.Security.Cryptography.AsymmetricAlgorithm, System.String, System.Byte[])
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/Crypto.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CreateSignature
    path: utilities/Crypto.cs
    startLine: 59
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  syntax:
    content: public static byte[] CreateSignature(AsymmetricAlgorithm algorithm, string hashName, byte[] hash)
    content.vb: Public Shared Function CreateSignature(algorithm As AsymmetricAlgorithm, hashName As String, hash As Byte()) As Byte()
    parameters:
    - id: algorithm
      type: System.Security.Cryptography.AsymmetricAlgorithm
    - id: hashName
      type: System.String
    - id: hash
      type: System.Byte[]
    return:
      type: System.Byte[]
  overload: Microsoft.Health.Utility.WCCryptoHelper.CreateSignature*
  nameWithType.vb: WCCryptoHelper.CreateSignature(AsymmetricAlgorithm, String, Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.WCCryptoHelper.CreateSignature(System.Security.Cryptography.AsymmetricAlgorithm, System.String, System.Byte())
  name.vb: CreateSignature(AsymmetricAlgorithm, String, Byte())
- uid: Microsoft.Health.Utility.WCCryptoHelper.VerifySignature(System.Security.Cryptography.AsymmetricAlgorithm,System.String,System.Byte[],System.Byte[])
  commentId: M:Microsoft.Health.Utility.WCCryptoHelper.VerifySignature(System.Security.Cryptography.AsymmetricAlgorithm,System.String,System.Byte[],System.Byte[])
  id: VerifySignature(System.Security.Cryptography.AsymmetricAlgorithm,System.String,System.Byte[],System.Byte[])
  parent: Microsoft.Health.Utility.WCCryptoHelper
  langs:
  - csharp
  - vb
  name: VerifySignature(AsymmetricAlgorithm, String, Byte[], Byte[])
  nameWithType: WCCryptoHelper.VerifySignature(AsymmetricAlgorithm, String, Byte[], Byte[])
  fullName: Microsoft.Health.Utility.WCCryptoHelper.VerifySignature(System.Security.Cryptography.AsymmetricAlgorithm, System.String, System.Byte[], System.Byte[])
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/Crypto.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: VerifySignature
    path: utilities/Crypto.cs
    startLine: 66
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  syntax:
    content: public static bool VerifySignature(AsymmetricAlgorithm algorithm, string hashName, byte[] hash, byte[] signature)
    content.vb: Public Shared Function VerifySignature(algorithm As AsymmetricAlgorithm, hashName As String, hash As Byte(), signature As Byte()) As Boolean
    parameters:
    - id: algorithm
      type: System.Security.Cryptography.AsymmetricAlgorithm
    - id: hashName
      type: System.String
    - id: hash
      type: System.Byte[]
    - id: signature
      type: System.Byte[]
    return:
      type: System.Boolean
  overload: Microsoft.Health.Utility.WCCryptoHelper.VerifySignature*
  nameWithType.vb: WCCryptoHelper.VerifySignature(AsymmetricAlgorithm, String, Byte(), Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.WCCryptoHelper.VerifySignature(System.Security.Cryptography.AsymmetricAlgorithm, System.String, System.Byte(), System.Byte())
  name.vb: VerifySignature(AsymmetricAlgorithm, String, Byte(), Byte())
- uid: Microsoft.Health.Utility.WCCryptoHelper.Encrypt(System.Security.Cryptography.ICryptoTransform,System.Action{System.IO.Stream})
  commentId: M:Microsoft.Health.Utility.WCCryptoHelper.Encrypt(System.Security.Cryptography.ICryptoTransform,System.Action{System.IO.Stream})
  id: Encrypt(System.Security.Cryptography.ICryptoTransform,System.Action{System.IO.Stream})
  parent: Microsoft.Health.Utility.WCCryptoHelper
  langs:
  - csharp
  - vb
  name: Encrypt(ICryptoTransform, Action<Stream>)
  nameWithType: WCCryptoHelper.Encrypt(ICryptoTransform, Action<Stream>)
  fullName: Microsoft.Health.Utility.WCCryptoHelper.Encrypt(System.Security.Cryptography.ICryptoTransform, System.Action<System.IO.Stream>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/Crypto.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Encrypt
    path: utilities/Crypto.cs
    startLine: 73
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  syntax:
    content: public static BufferSegment Encrypt(ICryptoTransform transform, Action<Stream> write)
    content.vb: Public Shared Function Encrypt(transform As ICryptoTransform, write As Action(Of Stream)) As BufferSegment
    parameters:
    - id: transform
      type: System.Security.Cryptography.ICryptoTransform
    - id: write
      type: System.Action{System.IO.Stream}
    return:
      type: Microsoft.Health.Utility.BufferSegment
  overload: Microsoft.Health.Utility.WCCryptoHelper.Encrypt*
  nameWithType.vb: WCCryptoHelper.Encrypt(ICryptoTransform, Action(Of Stream))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.WCCryptoHelper.Encrypt(System.Security.Cryptography.ICryptoTransform, System.Action(Of System.IO.Stream))
  name.vb: Encrypt(ICryptoTransform, Action(Of Stream))
- uid: Microsoft.Health.Utility.WCCryptoHelper.Decrypt(System.Security.Cryptography.ICryptoTransform,System.Action{System.IO.Stream})
  commentId: M:Microsoft.Health.Utility.WCCryptoHelper.Decrypt(System.Security.Cryptography.ICryptoTransform,System.Action{System.IO.Stream})
  id: Decrypt(System.Security.Cryptography.ICryptoTransform,System.Action{System.IO.Stream})
  parent: Microsoft.Health.Utility.WCCryptoHelper
  langs:
  - csharp
  - vb
  name: Decrypt(ICryptoTransform, Action<Stream>)
  nameWithType: WCCryptoHelper.Decrypt(ICryptoTransform, Action<Stream>)
  fullName: Microsoft.Health.Utility.WCCryptoHelper.Decrypt(System.Security.Cryptography.ICryptoTransform, System.Action<System.IO.Stream>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/Crypto.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Decrypt
    path: utilities/Crypto.cs
    startLine: 93
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  syntax:
    content: public static BufferSegment Decrypt(ICryptoTransform transform, Action<Stream> write)
    content.vb: Public Shared Function Decrypt(transform As ICryptoTransform, write As Action(Of Stream)) As BufferSegment
    parameters:
    - id: transform
      type: System.Security.Cryptography.ICryptoTransform
    - id: write
      type: System.Action{System.IO.Stream}
    return:
      type: Microsoft.Health.Utility.BufferSegment
  overload: Microsoft.Health.Utility.WCCryptoHelper.Decrypt*
  nameWithType.vb: WCCryptoHelper.Decrypt(ICryptoTransform, Action(Of Stream))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Utility.WCCryptoHelper.Decrypt(System.Security.Cryptography.ICryptoTransform, System.Action(Of System.IO.Stream))
  name.vb: Decrypt(ICryptoTransform, Action(Of Stream))
references:
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Utility.WCCryptoHelper.Sha1HashAsString*
  commentId: Overload:Microsoft.Health.Utility.WCCryptoHelper.Sha1HashAsString
  isExternal: false
  name: Sha1HashAsString
  nameWithType: WCCryptoHelper.Sha1HashAsString
  fullName: Microsoft.Health.Utility.WCCryptoHelper.Sha1HashAsString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Health.Utility.WCCryptoHelper.Sha1Hash*
  commentId: Overload:Microsoft.Health.Utility.WCCryptoHelper.Sha1Hash
  isExternal: false
  name: Sha1Hash
  nameWithType: WCCryptoHelper.Sha1Hash
  fullName: Microsoft.Health.Utility.WCCryptoHelper.Sha1Hash
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.Health.Utility.WCCryptoHelper.Sha256Hash*
  commentId: Overload:Microsoft.Health.Utility.WCCryptoHelper.Sha256Hash
  isExternal: false
  name: Sha256Hash
  nameWithType: WCCryptoHelper.Sha256Hash
  fullName: Microsoft.Health.Utility.WCCryptoHelper.Sha256Hash
- uid: Microsoft.Health.Utility.WCCryptoHelper.CreateSignature*
  commentId: Overload:Microsoft.Health.Utility.WCCryptoHelper.CreateSignature
  isExternal: false
  name: CreateSignature
  nameWithType: WCCryptoHelper.CreateSignature
  fullName: Microsoft.Health.Utility.WCCryptoHelper.CreateSignature
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  commentId: T:System.Security.Cryptography.AsymmetricAlgorithm
  parent: System.Security.Cryptography
  isExternal: true
  name: AsymmetricAlgorithm
  nameWithType: AsymmetricAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm
- uid: System.Security.Cryptography
  commentId: N:System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  nameWithType: System.Security.Cryptography
  fullName: System.Security.Cryptography
- uid: Microsoft.Health.Utility.WCCryptoHelper.VerifySignature*
  commentId: Overload:Microsoft.Health.Utility.WCCryptoHelper.VerifySignature
  isExternal: false
  name: VerifySignature
  nameWithType: WCCryptoHelper.VerifySignature
  fullName: Microsoft.Health.Utility.WCCryptoHelper.VerifySignature
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Health.Utility.WCCryptoHelper.Encrypt*
  commentId: Overload:Microsoft.Health.Utility.WCCryptoHelper.Encrypt
  isExternal: false
  name: Encrypt
  nameWithType: WCCryptoHelper.Encrypt
  fullName: Microsoft.Health.Utility.WCCryptoHelper.Encrypt
- uid: System.Security.Cryptography.ICryptoTransform
  commentId: T:System.Security.Cryptography.ICryptoTransform
  parent: System.Security.Cryptography
  isExternal: true
  name: ICryptoTransform
  nameWithType: ICryptoTransform
  fullName: System.Security.Cryptography.ICryptoTransform
- uid: System.Action{System.IO.Stream}
  commentId: T:System.Action{System.IO.Stream}
  parent: System
  definition: System.Action`1
  name: Action<Stream>
  nameWithType: Action<Stream>
  fullName: System.Action<System.IO.Stream>
  nameWithType.vb: Action(Of Stream)
  fullName.vb: System.Action(Of System.IO.Stream)
  name.vb: Action(Of Stream)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.BufferSegment
  commentId: T:Microsoft.Health.Utility.BufferSegment
  parent: Microsoft.Health.Utility
  isExternal: false
  name: BufferSegment
  nameWithType: BufferSegment
  fullName: Microsoft.Health.Utility.BufferSegment
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.WCCryptoHelper.Decrypt*
  commentId: Overload:Microsoft.Health.Utility.WCCryptoHelper.Decrypt
  isExternal: false
  name: Decrypt
  nameWithType: WCCryptoHelper.Decrypt
  fullName: Microsoft.Health.Utility.WCCryptoHelper.Decrypt
