### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1
  commentId: T:Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1
  id: XmlSerializableCollection`1
  parent: Microsoft.Health.Utility.Configurations
  children:
  - Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.#ctor
  - Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  - Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  - Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  - Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.GetSchema
  - Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.ReadXml(System.Xml.XmlReader)
  - Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.ToArray
  - Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.WriteXml(System.Xml.XmlWriter)
  langs:
  - csharp
  - vb
  name: XmlSerializableCollection<T>
  nameWithType: XmlSerializableCollection<T>
  fullName: Microsoft.Health.Utility.Configurations.XmlSerializableCollection<T>
  type: Class
  source:
    remote:
      path: Microsoft.Health.Utility/HVConfig/XmlSerializableCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: XmlSerializableCollection
    path: HVConfig/XmlSerializableCollection.cs
    startLine: 16
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Configurations
  syntax:
    content: >-
      [Serializable]

      public class XmlSerializableCollection<T> : HashSet<T>, ISerializable, IDeserializationCallback, ISet<T>, ICollection<T>, IEnumerable<T>, IEnumerable, IXmlSerializable
    content.vb: >-
      <Serializable>

      Public Class XmlSerializableCollection(Of T)
          Inherits HashSet(Of T)
          Implements ISerializable, IDeserializationCallback, ISet(Of T), ICollection(Of T), IEnumerable(Of T), IEnumerable, IXmlSerializable
    typeParameters:
    - id: T
  inheritance:
  - System.Object
  - System.Collections.Generic.HashSet{{T}}
  implements:
  - System.Runtime.Serialization.ISerializable
  - System.Runtime.Serialization.IDeserializationCallback
  - System.Collections.Generic.ISet{{T}}
  - System.Collections.Generic.ICollection{{T}}
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.IEnumerable
  - System.Xml.Serialization.IXmlSerializable
  inheritedMembers:
  - System.Collections.Generic.HashSet{{T}}.System#Collections#Generic#ICollection{T}#Add({T})
  - System.Collections.Generic.HashSet{{T}}.Clear
  - System.Collections.Generic.HashSet{{T}}.Contains({T})
  - System.Collections.Generic.HashSet{{T}}.CopyTo({T}[],System.Int32)
  - System.Collections.Generic.HashSet{{T}}.Remove({T})
  - System.Collections.Generic.HashSet{{T}}.GetEnumerator
  - System.Collections.Generic.HashSet{{T}}.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Collections.Generic.HashSet{{T}}.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Generic.HashSet{{T}}.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Collections.Generic.HashSet{{T}}.OnDeserialization(System.Object)
  - System.Collections.Generic.HashSet{{T}}.Add({T})
  - System.Collections.Generic.HashSet{{T}}.UnionWith(System.Collections.Generic.IEnumerable{{T}})
  - System.Collections.Generic.HashSet{{T}}.IntersectWith(System.Collections.Generic.IEnumerable{{T}})
  - System.Collections.Generic.HashSet{{T}}.ExceptWith(System.Collections.Generic.IEnumerable{{T}})
  - System.Collections.Generic.HashSet{{T}}.SymmetricExceptWith(System.Collections.Generic.IEnumerable{{T}})
  - System.Collections.Generic.HashSet{{T}}.IsSubsetOf(System.Collections.Generic.IEnumerable{{T}})
  - System.Collections.Generic.HashSet{{T}}.IsProperSubsetOf(System.Collections.Generic.IEnumerable{{T}})
  - System.Collections.Generic.HashSet{{T}}.IsSupersetOf(System.Collections.Generic.IEnumerable{{T}})
  - System.Collections.Generic.HashSet{{T}}.IsProperSupersetOf(System.Collections.Generic.IEnumerable{{T}})
  - System.Collections.Generic.HashSet{{T}}.Overlaps(System.Collections.Generic.IEnumerable{{T}})
  - System.Collections.Generic.HashSet{{T}}.SetEquals(System.Collections.Generic.IEnumerable{{T}})
  - System.Collections.Generic.HashSet{{T}}.CopyTo({T}[])
  - System.Collections.Generic.HashSet{{T}}.CopyTo({T}[],System.Int32,System.Int32)
  - System.Collections.Generic.HashSet{{T}}.RemoveWhere(System.Predicate{{T}})
  - System.Collections.Generic.HashSet{{T}}.TrimExcess
  - System.Collections.Generic.HashSet{{T}}.CreateSetComparer
  - System.Collections.Generic.HashSet{{T}}.Count
  - System.Collections.Generic.HashSet{{T}}.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.Collections.Generic.HashSet{{T}}.Comparer
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  - System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  nameWithType.vb: XmlSerializableCollection(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.Health.Utility.Configurations.XmlSerializableCollection(Of T)
  name.vb: XmlSerializableCollection(Of T)
- uid: Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.#ctor
  commentId: M:Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.#ctor
  id: '#ctor'
  parent: Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1
  langs:
  - csharp
  - vb
  name: XmlSerializableCollection()
  nameWithType: XmlSerializableCollection<T>.XmlSerializableCollection()
  fullName: Microsoft.Health.Utility.Configurations.XmlSerializableCollection<T>.XmlSerializableCollection()
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/HVConfig/XmlSerializableCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: HVConfig/XmlSerializableCollection.cs
    startLine: 19
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Configurations
  syntax:
    content: public XmlSerializableCollection()
    content.vb: Public Sub New
  overload: Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.#ctor*
  nameWithType.vb: XmlSerializableCollection(Of T).XmlSerializableCollection()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.Utility.Configurations.XmlSerializableCollection(Of T).XmlSerializableCollection()
- uid: Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0})'
  parent: Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1
  langs:
  - csharp
  - vb
  name: XmlSerializableCollection(IEnumerable<T>)
  nameWithType: XmlSerializableCollection<T>.XmlSerializableCollection(IEnumerable<T>)
  fullName: Microsoft.Health.Utility.Configurations.XmlSerializableCollection<T>.XmlSerializableCollection(System.Collections.Generic.IEnumerable<T>)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/HVConfig/XmlSerializableCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: HVConfig/XmlSerializableCollection.cs
    startLine: 23
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Configurations
  syntax:
    content: public XmlSerializableCollection(IEnumerable<T> collection)
    content.vb: Public Sub New(collection As IEnumerable(Of T))
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
  overload: Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.#ctor*
  nameWithType.vb: XmlSerializableCollection(Of T).XmlSerializableCollection(IEnumerable(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.Utility.Configurations.XmlSerializableCollection(Of T).XmlSerializableCollection(System.Collections.Generic.IEnumerable(Of T))
  name.vb: XmlSerializableCollection(IEnumerable(Of T))
- uid: Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Collections.Generic.IEqualityComparer{`0})'
  parent: Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1
  langs:
  - csharp
  - vb
  name: XmlSerializableCollection(IEqualityComparer<T>)
  nameWithType: XmlSerializableCollection<T>.XmlSerializableCollection(IEqualityComparer<T>)
  fullName: Microsoft.Health.Utility.Configurations.XmlSerializableCollection<T>.XmlSerializableCollection(System.Collections.Generic.IEqualityComparer<T>)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/HVConfig/XmlSerializableCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: HVConfig/XmlSerializableCollection.cs
    startLine: 27
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Configurations
  syntax:
    content: public XmlSerializableCollection(IEqualityComparer<T> comparer)
    content.vb: Public Sub New(comparer As IEqualityComparer(Of T))
    parameters:
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
  overload: Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.#ctor*
  nameWithType.vb: XmlSerializableCollection(Of T).XmlSerializableCollection(IEqualityComparer(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.Utility.Configurations.XmlSerializableCollection(Of T).XmlSerializableCollection(System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: XmlSerializableCollection(IEqualityComparer(Of T))
- uid: Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})'
  parent: Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1
  langs:
  - csharp
  - vb
  name: XmlSerializableCollection(IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: XmlSerializableCollection<T>.XmlSerializableCollection(IEnumerable<T>, IEqualityComparer<T>)
  fullName: Microsoft.Health.Utility.Configurations.XmlSerializableCollection<T>.XmlSerializableCollection(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/HVConfig/XmlSerializableCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: HVConfig/XmlSerializableCollection.cs
    startLine: 31
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Configurations
  syntax:
    content: public XmlSerializableCollection(IEnumerable<T> collection, IEqualityComparer<T> comparer)
    content.vb: Public Sub New(collection As IEnumerable(Of T), comparer As IEqualityComparer(Of T))
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
  overload: Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.#ctor*
  nameWithType.vb: XmlSerializableCollection(Of T).XmlSerializableCollection(IEnumerable(Of T), IEqualityComparer(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.Utility.Configurations.XmlSerializableCollection(Of T).XmlSerializableCollection(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: XmlSerializableCollection(IEnumerable(Of T), IEqualityComparer(Of T))
- uid: Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1
  langs:
  - csharp
  - vb
  name: XmlSerializableCollection(SerializationInfo, StreamingContext)
  nameWithType: XmlSerializableCollection<T>.XmlSerializableCollection(SerializationInfo, StreamingContext)
  fullName: Microsoft.Health.Utility.Configurations.XmlSerializableCollection<T>.XmlSerializableCollection(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/HVConfig/XmlSerializableCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: HVConfig/XmlSerializableCollection.cs
    startLine: 36
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Configurations
  syntax:
    content: protected XmlSerializableCollection(SerializationInfo info, StreamingContext context)
    content.vb: Protected Sub New(info As SerializationInfo, context As StreamingContext)
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
    - id: context
      type: System.Runtime.Serialization.StreamingContext
  overload: Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.#ctor*
  nameWithType.vb: XmlSerializableCollection(Of T).XmlSerializableCollection(SerializationInfo, StreamingContext)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.Health.Utility.Configurations.XmlSerializableCollection(Of T).XmlSerializableCollection(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
- uid: Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.ToArray
  commentId: M:Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.ToArray
  id: ToArray
  parent: Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1
  langs:
  - csharp
  - vb
  name: ToArray()
  nameWithType: XmlSerializableCollection<T>.ToArray()
  fullName: Microsoft.Health.Utility.Configurations.XmlSerializableCollection<T>.ToArray()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/HVConfig/XmlSerializableCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ToArray
    path: HVConfig/XmlSerializableCollection.cs
    startLine: 41
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Configurations
  syntax:
    content: public T[] ToArray()
    content.vb: Public Function ToArray As T()
    return:
      type: '{T}[]'
  overload: Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.ToArray*
  nameWithType.vb: XmlSerializableCollection(Of T).ToArray()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.Utility.Configurations.XmlSerializableCollection(Of T).ToArray()
- uid: Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.GetSchema
  commentId: M:Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.GetSchema
  id: GetSchema
  parent: Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1
  langs:
  - csharp
  - vb
  name: GetSchema()
  nameWithType: XmlSerializableCollection<T>.GetSchema()
  fullName: Microsoft.Health.Utility.Configurations.XmlSerializableCollection<T>.GetSchema()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/HVConfig/XmlSerializableCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetSchema
    path: HVConfig/XmlSerializableCollection.cs
    startLine: 49
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Configurations
  syntax:
    content: public XmlSchema GetSchema()
    content.vb: Public Function GetSchema As XmlSchema
    return:
      type: System.Xml.Schema.XmlSchema
  overload: Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.GetSchema*
  implements:
  - System.Xml.Serialization.IXmlSerializable.GetSchema
  nameWithType.vb: XmlSerializableCollection(Of T).GetSchema()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.Utility.Configurations.XmlSerializableCollection(Of T).GetSchema()
- uid: Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.ReadXml(System.Xml.XmlReader)
  commentId: M:Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.ReadXml(System.Xml.XmlReader)
  id: ReadXml(System.Xml.XmlReader)
  parent: Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1
  langs:
  - csharp
  - vb
  name: ReadXml(XmlReader)
  nameWithType: XmlSerializableCollection<T>.ReadXml(XmlReader)
  fullName: Microsoft.Health.Utility.Configurations.XmlSerializableCollection<T>.ReadXml(System.Xml.XmlReader)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/HVConfig/XmlSerializableCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ReadXml
    path: HVConfig/XmlSerializableCollection.cs
    startLine: 54
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Configurations
  syntax:
    content: public void ReadXml(XmlReader reader)
    content.vb: Public Sub ReadXml(reader As XmlReader)
    parameters:
    - id: reader
      type: System.Xml.XmlReader
  overload: Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.ReadXml*
  implements:
  - System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  nameWithType.vb: XmlSerializableCollection(Of T).ReadXml(XmlReader)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.Utility.Configurations.XmlSerializableCollection(Of T).ReadXml(System.Xml.XmlReader)
- uid: Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.WriteXml(System.Xml.XmlWriter)
  commentId: M:Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.WriteXml(System.Xml.XmlWriter)
  id: WriteXml(System.Xml.XmlWriter)
  parent: Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1
  langs:
  - csharp
  - vb
  name: WriteXml(XmlWriter)
  nameWithType: XmlSerializableCollection<T>.WriteXml(XmlWriter)
  fullName: Microsoft.Health.Utility.Configurations.XmlSerializableCollection<T>.WriteXml(System.Xml.XmlWriter)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/HVConfig/XmlSerializableCollection.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: WriteXml
    path: HVConfig/XmlSerializableCollection.cs
    startLine: 100
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility.Configurations
  syntax:
    content: public void WriteXml(XmlWriter writer)
    content.vb: Public Sub WriteXml(writer As XmlWriter)
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
  overload: Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.WriteXml*
  implements:
  - System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  nameWithType.vb: XmlSerializableCollection(Of T).WriteXml(XmlWriter)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.Utility.Configurations.XmlSerializableCollection(Of T).WriteXml(System.Xml.XmlWriter)
references:
- uid: Microsoft.Health.Utility.Configurations
  commentId: N:Microsoft.Health.Utility.Configurations
  isExternal: false
  name: Microsoft.Health.Utility.Configurations
  nameWithType: Microsoft.Health.Utility.Configurations
  fullName: Microsoft.Health.Utility.Configurations
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.HashSet{{T}}
  commentId: T:System.Collections.Generic.HashSet{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.HashSet`1
  name: HashSet<T>
  nameWithType: HashSet<T>
  fullName: System.Collections.Generic.HashSet<T>
  nameWithType.vb: HashSet(Of T)
  fullName.vb: System.Collections.Generic.HashSet(Of T)
  name.vb: HashSet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.Serialization.ISerializable
  commentId: T:System.Runtime.Serialization.ISerializable
  parent: System.Runtime.Serialization
  isExternal: true
  name: ISerializable
  nameWithType: ISerializable
  fullName: System.Runtime.Serialization.ISerializable
- uid: System.Runtime.Serialization.IDeserializationCallback
  commentId: T:System.Runtime.Serialization.IDeserializationCallback
  parent: System.Runtime.Serialization
  isExternal: true
  name: IDeserializationCallback
  nameWithType: IDeserializationCallback
  fullName: System.Runtime.Serialization.IDeserializationCallback
- uid: System.Collections.Generic.ISet{{T}}
  commentId: T:System.Collections.Generic.ISet{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ISet`1
  name: ISet<T>
  nameWithType: ISet<T>
  fullName: System.Collections.Generic.ISet<T>
  nameWithType.vb: ISet(Of T)
  fullName.vb: System.Collections.Generic.ISet(Of T)
  name.vb: ISet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{T}}
  commentId: T:System.Collections.Generic.ICollection{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Xml.Serialization.IXmlSerializable
  commentId: T:System.Xml.Serialization.IXmlSerializable
  parent: System.Xml.Serialization
  isExternal: true
  name: IXmlSerializable
  nameWithType: IXmlSerializable
  fullName: System.Xml.Serialization.IXmlSerializable
- uid: System.Collections.Generic.HashSet{{T}}.System#Collections#Generic#ICollection{T}#Add({T})
  commentId: M:System.Collections.Generic.HashSet{`0}.System#Collections#Generic#ICollection{T}#Add(`0)
  parent: System.Collections.Generic.HashSet{{T}}
  definition: System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
  name: ICollection<T>.Add(T)
  nameWithType: HashSet<T>.ICollection<T>.Add(T)
  fullName: System.Collections.Generic.HashSet<T>.System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: HashSet(Of T).System.Collections.Generic.ICollection<T>.Add(T)
  fullName.vb: System.Collections.Generic.HashSet(Of T).System.Collections.Generic.ICollection<T>.Add(T)
  name.vb: System.Collections.Generic.ICollection<T>.Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
    name: ICollection<T>.Add
    nameWithType: HashSet<T>.ICollection<T>.Add
    fullName: System.Collections.Generic.HashSet<T>.System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
    name: System.Collections.Generic.ICollection<T>.Add
    nameWithType: HashSet(Of T).System.Collections.Generic.ICollection<T>.Add
    fullName: System.Collections.Generic.HashSet(Of T).System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet{{T}}.Clear
  commentId: M:System.Collections.Generic.HashSet{`0}.Clear
  parent: System.Collections.Generic.HashSet{{T}}
  definition: System.Collections.Generic.HashSet`1.Clear
  name: Clear()
  nameWithType: HashSet<T>.Clear()
  fullName: System.Collections.Generic.HashSet<T>.Clear()
  nameWithType.vb: HashSet(Of T).Clear()
  fullName.vb: System.Collections.Generic.HashSet(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.Clear
    name: Clear
    nameWithType: HashSet<T>.Clear
    fullName: System.Collections.Generic.HashSet<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.Clear
    name: Clear
    nameWithType: HashSet(Of T).Clear
    fullName: System.Collections.Generic.HashSet(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet{{T}}.Contains({T})
  commentId: M:System.Collections.Generic.HashSet{`0}.Contains(`0)
  parent: System.Collections.Generic.HashSet{{T}}
  definition: System.Collections.Generic.HashSet`1.Contains(`0)
  name: Contains(T)
  nameWithType: HashSet<T>.Contains(T)
  fullName: System.Collections.Generic.HashSet<T>.Contains(T)
  nameWithType.vb: HashSet(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.HashSet(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.Contains(`0)
    name: Contains
    nameWithType: HashSet<T>.Contains
    fullName: System.Collections.Generic.HashSet<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.Contains(`0)
    name: Contains
    nameWithType: HashSet(Of T).Contains
    fullName: System.Collections.Generic.HashSet(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet{{T}}.CopyTo({T}[],System.Int32)
  commentId: M:System.Collections.Generic.HashSet{`0}.CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.HashSet{{T}}
  definition: System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32)
  name: CopyTo(T[], Int32)
  nameWithType: HashSet<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.HashSet<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: HashSet(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.HashSet(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: HashSet<T>.CopyTo
    fullName: System.Collections.Generic.HashSet<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: HashSet(Of T).CopyTo
    fullName: System.Collections.Generic.HashSet(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet{{T}}.Remove({T})
  commentId: M:System.Collections.Generic.HashSet{`0}.Remove(`0)
  parent: System.Collections.Generic.HashSet{{T}}
  definition: System.Collections.Generic.HashSet`1.Remove(`0)
  name: Remove(T)
  nameWithType: HashSet<T>.Remove(T)
  fullName: System.Collections.Generic.HashSet<T>.Remove(T)
  nameWithType.vb: HashSet(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.HashSet(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.Remove(`0)
    name: Remove
    nameWithType: HashSet<T>.Remove
    fullName: System.Collections.Generic.HashSet<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.Remove(`0)
    name: Remove
    nameWithType: HashSet(Of T).Remove
    fullName: System.Collections.Generic.HashSet(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet{{T}}.GetEnumerator
  commentId: M:System.Collections.Generic.HashSet{`0}.GetEnumerator
  parent: System.Collections.Generic.HashSet{{T}}
  definition: System.Collections.Generic.HashSet`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: HashSet<T>.GetEnumerator()
  fullName: System.Collections.Generic.HashSet<T>.GetEnumerator()
  nameWithType.vb: HashSet(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.HashSet(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.GetEnumerator
    name: GetEnumerator
    nameWithType: HashSet<T>.GetEnumerator
    fullName: System.Collections.Generic.HashSet<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.GetEnumerator
    name: GetEnumerator
    nameWithType: HashSet(Of T).GetEnumerator
    fullName: System.Collections.Generic.HashSet(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet{{T}}.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  commentId: M:System.Collections.Generic.HashSet{`0}.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  parent: System.Collections.Generic.HashSet{{T}}
  definition: System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  name: IEnumerable<T>.GetEnumerator()
  nameWithType: HashSet<T>.IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.HashSet<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: HashSet(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: System.Collections.Generic.HashSet(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    name: IEnumerable<T>.GetEnumerator
    nameWithType: HashSet<T>.IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.HashSet<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    name: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    nameWithType: HashSet(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.HashSet(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet{{T}}.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.Generic.HashSet{`0}.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Generic.HashSet{{T}}
  definition: System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator()
  nameWithType: HashSet<T>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.HashSet<T>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: HashSet(Of T).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.Generic.HashSet(Of T).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: HashSet<T>.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.HashSet<T>.System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: HashSet(Of T).System.Collections.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.HashSet(Of T).System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet{{T}}.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:System.Collections.Generic.HashSet{`0}.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Generic.HashSet{{T}}
  definition: System.Collections.Generic.HashSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  name: GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: HashSet<T>.GetObjectData(SerializationInfo, StreamingContext)
  fullName: System.Collections.Generic.HashSet<T>.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  nameWithType.vb: HashSet(Of T).GetObjectData(SerializationInfo, StreamingContext)
  fullName.vb: System.Collections.Generic.HashSet(Of T).GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: HashSet<T>.GetObjectData
    fullName: System.Collections.Generic.HashSet<T>.GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: HashSet(Of T).GetObjectData
    fullName: System.Collections.Generic.HashSet(Of T).GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet{{T}}.OnDeserialization(System.Object)
  commentId: M:System.Collections.Generic.HashSet{`0}.OnDeserialization(System.Object)
  parent: System.Collections.Generic.HashSet{{T}}
  definition: System.Collections.Generic.HashSet`1.OnDeserialization(System.Object)
  name: OnDeserialization(Object)
  nameWithType: HashSet<T>.OnDeserialization(Object)
  fullName: System.Collections.Generic.HashSet<T>.OnDeserialization(System.Object)
  nameWithType.vb: HashSet(Of T).OnDeserialization(Object)
  fullName.vb: System.Collections.Generic.HashSet(Of T).OnDeserialization(System.Object)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.OnDeserialization(System.Object)
    name: OnDeserialization
    nameWithType: HashSet<T>.OnDeserialization
    fullName: System.Collections.Generic.HashSet<T>.OnDeserialization
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.OnDeserialization(System.Object)
    name: OnDeserialization
    nameWithType: HashSet(Of T).OnDeserialization
    fullName: System.Collections.Generic.HashSet(Of T).OnDeserialization
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet{{T}}.Add({T})
  commentId: M:System.Collections.Generic.HashSet{`0}.Add(`0)
  parent: System.Collections.Generic.HashSet{{T}}
  definition: System.Collections.Generic.HashSet`1.Add(`0)
  name: Add(T)
  nameWithType: HashSet<T>.Add(T)
  fullName: System.Collections.Generic.HashSet<T>.Add(T)
  nameWithType.vb: HashSet(Of T).Add(T)
  fullName.vb: System.Collections.Generic.HashSet(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.Add(`0)
    name: Add
    nameWithType: HashSet<T>.Add
    fullName: System.Collections.Generic.HashSet<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.Add(`0)
    name: Add
    nameWithType: HashSet(Of T).Add
    fullName: System.Collections.Generic.HashSet(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet{{T}}.UnionWith(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:System.Collections.Generic.HashSet{`0}.UnionWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet{{T}}
  definition: System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  name: UnionWith(IEnumerable<T>)
  nameWithType: HashSet<T>.UnionWith(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.UnionWith(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: HashSet(Of T).UnionWith(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.HashSet(Of T).UnionWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: UnionWith(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
    name: UnionWith
    nameWithType: HashSet<T>.UnionWith
    fullName: System.Collections.Generic.HashSet<T>.UnionWith
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
    name: UnionWith
    nameWithType: HashSet(Of T).UnionWith
    fullName: System.Collections.Generic.HashSet(Of T).UnionWith
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet{{T}}.IntersectWith(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:System.Collections.Generic.HashSet{`0}.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet{{T}}
  definition: System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  name: IntersectWith(IEnumerable<T>)
  nameWithType: HashSet<T>.IntersectWith(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.IntersectWith(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: HashSet(Of T).IntersectWith(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.HashSet(Of T).IntersectWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IntersectWith(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
    name: IntersectWith
    nameWithType: HashSet<T>.IntersectWith
    fullName: System.Collections.Generic.HashSet<T>.IntersectWith
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
    name: IntersectWith
    nameWithType: HashSet(Of T).IntersectWith
    fullName: System.Collections.Generic.HashSet(Of T).IntersectWith
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet{{T}}.ExceptWith(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:System.Collections.Generic.HashSet{`0}.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet{{T}}
  definition: System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  name: ExceptWith(IEnumerable<T>)
  nameWithType: HashSet<T>.ExceptWith(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.ExceptWith(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: HashSet(Of T).ExceptWith(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.HashSet(Of T).ExceptWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: ExceptWith(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: ExceptWith
    nameWithType: HashSet<T>.ExceptWith
    fullName: System.Collections.Generic.HashSet<T>.ExceptWith
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: ExceptWith
    nameWithType: HashSet(Of T).ExceptWith
    fullName: System.Collections.Generic.HashSet(Of T).ExceptWith
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet{{T}}.SymmetricExceptWith(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:System.Collections.Generic.HashSet{`0}.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet{{T}}
  definition: System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  name: SymmetricExceptWith(IEnumerable<T>)
  nameWithType: HashSet<T>.SymmetricExceptWith(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.SymmetricExceptWith(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: HashSet(Of T).SymmetricExceptWith(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.HashSet(Of T).SymmetricExceptWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: SymmetricExceptWith(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: SymmetricExceptWith
    nameWithType: HashSet<T>.SymmetricExceptWith
    fullName: System.Collections.Generic.HashSet<T>.SymmetricExceptWith
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: SymmetricExceptWith
    nameWithType: HashSet(Of T).SymmetricExceptWith
    fullName: System.Collections.Generic.HashSet(Of T).SymmetricExceptWith
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet{{T}}.IsSubsetOf(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:System.Collections.Generic.HashSet{`0}.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet{{T}}
  definition: System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  name: IsSubsetOf(IEnumerable<T>)
  nameWithType: HashSet<T>.IsSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.IsSubsetOf(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: HashSet(Of T).IsSubsetOf(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.HashSet(Of T).IsSubsetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSubsetOf(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSubsetOf
    nameWithType: HashSet<T>.IsSubsetOf
    fullName: System.Collections.Generic.HashSet<T>.IsSubsetOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSubsetOf
    nameWithType: HashSet(Of T).IsSubsetOf
    fullName: System.Collections.Generic.HashSet(Of T).IsSubsetOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet{{T}}.IsProperSubsetOf(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:System.Collections.Generic.HashSet{`0}.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet{{T}}
  definition: System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  name: IsProperSubsetOf(IEnumerable<T>)
  nameWithType: HashSet<T>.IsProperSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.IsProperSubsetOf(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: HashSet(Of T).IsProperSubsetOf(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.HashSet(Of T).IsProperSubsetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSubsetOf(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSubsetOf
    nameWithType: HashSet<T>.IsProperSubsetOf
    fullName: System.Collections.Generic.HashSet<T>.IsProperSubsetOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSubsetOf
    nameWithType: HashSet(Of T).IsProperSubsetOf
    fullName: System.Collections.Generic.HashSet(Of T).IsProperSubsetOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet{{T}}.IsSupersetOf(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:System.Collections.Generic.HashSet{`0}.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet{{T}}
  definition: System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  name: IsSupersetOf(IEnumerable<T>)
  nameWithType: HashSet<T>.IsSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.IsSupersetOf(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: HashSet(Of T).IsSupersetOf(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.HashSet(Of T).IsSupersetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSupersetOf(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSupersetOf
    nameWithType: HashSet<T>.IsSupersetOf
    fullName: System.Collections.Generic.HashSet<T>.IsSupersetOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSupersetOf
    nameWithType: HashSet(Of T).IsSupersetOf
    fullName: System.Collections.Generic.HashSet(Of T).IsSupersetOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet{{T}}.IsProperSupersetOf(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:System.Collections.Generic.HashSet{`0}.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet{{T}}
  definition: System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  name: IsProperSupersetOf(IEnumerable<T>)
  nameWithType: HashSet<T>.IsProperSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.IsProperSupersetOf(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: HashSet(Of T).IsProperSupersetOf(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.HashSet(Of T).IsProperSupersetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSupersetOf(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSupersetOf
    nameWithType: HashSet<T>.IsProperSupersetOf
    fullName: System.Collections.Generic.HashSet<T>.IsProperSupersetOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSupersetOf
    nameWithType: HashSet(Of T).IsProperSupersetOf
    fullName: System.Collections.Generic.HashSet(Of T).IsProperSupersetOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet{{T}}.Overlaps(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:System.Collections.Generic.HashSet{`0}.Overlaps(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet{{T}}
  definition: System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  name: Overlaps(IEnumerable<T>)
  nameWithType: HashSet<T>.Overlaps(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.Overlaps(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: HashSet(Of T).Overlaps(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.HashSet(Of T).Overlaps(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Overlaps(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
    name: Overlaps
    nameWithType: HashSet<T>.Overlaps
    fullName: System.Collections.Generic.HashSet<T>.Overlaps
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
    name: Overlaps
    nameWithType: HashSet(Of T).Overlaps
    fullName: System.Collections.Generic.HashSet(Of T).Overlaps
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet{{T}}.SetEquals(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:System.Collections.Generic.HashSet{`0}.SetEquals(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet{{T}}
  definition: System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  name: SetEquals(IEnumerable<T>)
  nameWithType: HashSet<T>.SetEquals(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.SetEquals(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: HashSet(Of T).SetEquals(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.HashSet(Of T).SetEquals(System.Collections.Generic.IEnumerable(Of T))
  name.vb: SetEquals(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
    name: SetEquals
    nameWithType: HashSet<T>.SetEquals
    fullName: System.Collections.Generic.HashSet<T>.SetEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
    name: SetEquals
    nameWithType: HashSet(Of T).SetEquals
    fullName: System.Collections.Generic.HashSet(Of T).SetEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet{{T}}.CopyTo({T}[])
  commentId: M:System.Collections.Generic.HashSet{`0}.CopyTo(`0[])
  parent: System.Collections.Generic.HashSet{{T}}
  definition: System.Collections.Generic.HashSet`1.CopyTo(`0[])
  name: CopyTo(T[])
  nameWithType: HashSet<T>.CopyTo(T[])
  fullName: System.Collections.Generic.HashSet<T>.CopyTo(T[])
  nameWithType.vb: HashSet(Of T).CopyTo(T())
  fullName.vb: System.Collections.Generic.HashSet(Of T).CopyTo(T())
  name.vb: CopyTo(T())
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.CopyTo(`0[])
    name: CopyTo
    nameWithType: HashSet<T>.CopyTo
    fullName: System.Collections.Generic.HashSet<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.CopyTo(`0[])
    name: CopyTo
    nameWithType: HashSet(Of T).CopyTo
    fullName: System.Collections.Generic.HashSet(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet{{T}}.CopyTo({T}[],System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.HashSet{`0}.CopyTo(`0[],System.Int32,System.Int32)
  parent: System.Collections.Generic.HashSet{{T}}
  definition: System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32,System.Int32)
  name: CopyTo(T[], Int32, Int32)
  nameWithType: HashSet<T>.CopyTo(T[], Int32, Int32)
  fullName: System.Collections.Generic.HashSet<T>.CopyTo(T[], System.Int32, System.Int32)
  nameWithType.vb: HashSet(Of T).CopyTo(T(), Int32, Int32)
  fullName.vb: System.Collections.Generic.HashSet(Of T).CopyTo(T(), System.Int32, System.Int32)
  name.vb: CopyTo(T(), Int32, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32,System.Int32)
    name: CopyTo
    nameWithType: HashSet<T>.CopyTo
    fullName: System.Collections.Generic.HashSet<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32,System.Int32)
    name: CopyTo
    nameWithType: HashSet(Of T).CopyTo
    fullName: System.Collections.Generic.HashSet(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet{{T}}.RemoveWhere(System.Predicate{{T}})
  commentId: M:System.Collections.Generic.HashSet{`0}.RemoveWhere(System.Predicate{`0})
  parent: System.Collections.Generic.HashSet{{T}}
  definition: System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})
  name: RemoveWhere(Predicate<T>)
  nameWithType: HashSet<T>.RemoveWhere(Predicate<T>)
  fullName: System.Collections.Generic.HashSet<T>.RemoveWhere(System.Predicate<T>)
  nameWithType.vb: HashSet(Of T).RemoveWhere(Predicate(Of T))
  fullName.vb: System.Collections.Generic.HashSet(Of T).RemoveWhere(System.Predicate(Of T))
  name.vb: RemoveWhere(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})
    name: RemoveWhere
    nameWithType: HashSet<T>.RemoveWhere
    fullName: System.Collections.Generic.HashSet<T>.RemoveWhere
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})
    name: RemoveWhere
    nameWithType: HashSet(Of T).RemoveWhere
    fullName: System.Collections.Generic.HashSet(Of T).RemoveWhere
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet{{T}}.TrimExcess
  commentId: M:System.Collections.Generic.HashSet{`0}.TrimExcess
  parent: System.Collections.Generic.HashSet{{T}}
  definition: System.Collections.Generic.HashSet`1.TrimExcess
  name: TrimExcess()
  nameWithType: HashSet<T>.TrimExcess()
  fullName: System.Collections.Generic.HashSet<T>.TrimExcess()
  nameWithType.vb: HashSet(Of T).TrimExcess()
  fullName.vb: System.Collections.Generic.HashSet(Of T).TrimExcess()
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.TrimExcess
    name: TrimExcess
    nameWithType: HashSet<T>.TrimExcess
    fullName: System.Collections.Generic.HashSet<T>.TrimExcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.TrimExcess
    name: TrimExcess
    nameWithType: HashSet(Of T).TrimExcess
    fullName: System.Collections.Generic.HashSet(Of T).TrimExcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet{{T}}.CreateSetComparer
  commentId: M:System.Collections.Generic.HashSet{`0}.CreateSetComparer
  parent: System.Collections.Generic.HashSet{{T}}
  definition: System.Collections.Generic.HashSet`1.CreateSetComparer
  name: CreateSetComparer()
  nameWithType: HashSet<T>.CreateSetComparer()
  fullName: System.Collections.Generic.HashSet<T>.CreateSetComparer()
  nameWithType.vb: HashSet(Of T).CreateSetComparer()
  fullName.vb: System.Collections.Generic.HashSet(Of T).CreateSetComparer()
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.CreateSetComparer
    name: CreateSetComparer
    nameWithType: HashSet<T>.CreateSetComparer
    fullName: System.Collections.Generic.HashSet<T>.CreateSetComparer
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.CreateSetComparer
    name: CreateSetComparer
    nameWithType: HashSet(Of T).CreateSetComparer
    fullName: System.Collections.Generic.HashSet(Of T).CreateSetComparer
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet{{T}}.Count
  commentId: P:System.Collections.Generic.HashSet{`0}.Count
  parent: System.Collections.Generic.HashSet{{T}}
  definition: System.Collections.Generic.HashSet`1.Count
  name: Count
  nameWithType: HashSet<T>.Count
  fullName: System.Collections.Generic.HashSet<T>.Count
  nameWithType.vb: HashSet(Of T).Count
  fullName.vb: System.Collections.Generic.HashSet(Of T).Count
- uid: System.Collections.Generic.HashSet{{T}}.System#Collections#Generic#ICollection{T}#IsReadOnly
  commentId: P:System.Collections.Generic.HashSet{`0}.System#Collections#Generic#ICollection{T}#IsReadOnly
  parent: System.Collections.Generic.HashSet{{T}}
  definition: System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  name: ICollection<T>.IsReadOnly
  nameWithType: HashSet<T>.ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.HashSet<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: HashSet(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName.vb: System.Collections.Generic.HashSet(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.HashSet{{T}}.Comparer
  commentId: P:System.Collections.Generic.HashSet{`0}.Comparer
  parent: System.Collections.Generic.HashSet{{T}}
  definition: System.Collections.Generic.HashSet`1.Comparer
  name: Comparer
  nameWithType: HashSet<T>.Comparer
  fullName: System.Collections.Generic.HashSet<T>.Comparer
  nameWithType.vb: HashSet(Of T).Comparer
  fullName.vb: System.Collections.Generic.HashSet(Of T).Comparer
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  name: SetProperty(String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object())
  name.vb: SetProperty(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  name: InvokeMethod(String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object())
  name.vb: InvokeMethod(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  parent: Microsoft.Health.Utility.InvariantString
  definition: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  name: ToStringInvariant()
  nameWithType: InvariantString.ToStringInvariant()
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant()
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  parent: Microsoft.Health.Utility.TypeHelper
  definition: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  name: ValueOrDbNull<XmlSerializableCollection<T>>()
  nameWithType: TypeHelper.ValueOrDbNull<XmlSerializableCollection<T>>()
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.Utility.Configurations.XmlSerializableCollection<T>>()
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of XmlSerializableCollection(Of T))()
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.Utility.Configurations.XmlSerializableCollection(Of T))()
  name.vb: ValueOrDbNull(Of XmlSerializableCollection(Of T))()
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull<XmlSerializableCollection<T>>
    nameWithType: TypeHelper.ValueOrDbNull<XmlSerializableCollection<T>>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.Utility.Configurations.XmlSerializableCollection<T>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull(Of XmlSerializableCollection(Of T))
    nameWithType: TypeHelper.ValueOrDbNull(Of XmlSerializableCollection(Of T))
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.Utility.Configurations.XmlSerializableCollection(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  parent: Microsoft.Health.Utility.WCXmlHelper
  definition: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  name: ToXml()
  nameWithType: WCXmlHelper.ToXml()
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml()
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.HashSet`1
  commentId: T:System.Collections.Generic.HashSet`1
  isExternal: true
  name: HashSet<T>
  nameWithType: HashSet<T>
  fullName: System.Collections.Generic.HashSet<T>
  nameWithType.vb: HashSet(Of T)
  fullName.vb: System.Collections.Generic.HashSet(Of T)
  name.vb: HashSet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Runtime.Serialization
  commentId: N:System.Runtime.Serialization
  isExternal: false
  name: System.Runtime.Serialization
  nameWithType: System.Runtime.Serialization
  fullName: System.Runtime.Serialization
- uid: System.Collections.Generic.ISet`1
  commentId: T:System.Collections.Generic.ISet`1
  isExternal: true
  name: ISet<T>
  nameWithType: ISet<T>
  fullName: System.Collections.Generic.ISet<T>
  nameWithType.vb: ISet(Of T)
  fullName.vb: System.Collections.Generic.ISet(Of T)
  name.vb: ISet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Xml.Serialization
  commentId: N:System.Xml.Serialization
  isExternal: false
  name: System.Xml.Serialization
  nameWithType: System.Xml.Serialization
  fullName: System.Xml.Serialization
- uid: System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
  commentId: M:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
  isExternal: true
  name: ICollection<T>.Add(T)
  nameWithType: HashSet<T>.ICollection<T>.Add(T)
  fullName: System.Collections.Generic.HashSet<T>.System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: HashSet(Of T).System.Collections.Generic.ICollection<T>.Add(T)
  fullName.vb: System.Collections.Generic.HashSet(Of T).System.Collections.Generic.ICollection<T>.Add(T)
  name.vb: System.Collections.Generic.ICollection<T>.Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
    name: ICollection<T>.Add
    nameWithType: HashSet<T>.ICollection<T>.Add
    fullName: System.Collections.Generic.HashSet<T>.System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
    name: System.Collections.Generic.ICollection<T>.Add
    nameWithType: HashSet(Of T).System.Collections.Generic.ICollection<T>.Add
    fullName: System.Collections.Generic.HashSet(Of T).System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1.Clear
  commentId: M:System.Collections.Generic.HashSet`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: HashSet<T>.Clear()
  fullName: System.Collections.Generic.HashSet<T>.Clear()
  nameWithType.vb: HashSet(Of T).Clear()
  fullName.vb: System.Collections.Generic.HashSet(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.Clear
    name: Clear
    nameWithType: HashSet<T>.Clear
    fullName: System.Collections.Generic.HashSet<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.Clear
    name: Clear
    nameWithType: HashSet(Of T).Clear
    fullName: System.Collections.Generic.HashSet(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1.Contains(`0)
  commentId: M:System.Collections.Generic.HashSet`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: HashSet<T>.Contains(T)
  fullName: System.Collections.Generic.HashSet<T>.Contains(T)
  nameWithType.vb: HashSet(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.HashSet(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.Contains(`0)
    name: Contains
    nameWithType: HashSet<T>.Contains
    fullName: System.Collections.Generic.HashSet<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.Contains(`0)
    name: Contains
    nameWithType: HashSet(Of T).Contains
    fullName: System.Collections.Generic.HashSet(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: HashSet<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.HashSet<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: HashSet(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.HashSet(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: HashSet<T>.CopyTo
    fullName: System.Collections.Generic.HashSet<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: HashSet(Of T).CopyTo
    fullName: System.Collections.Generic.HashSet(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1.Remove(`0)
  commentId: M:System.Collections.Generic.HashSet`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: HashSet<T>.Remove(T)
  fullName: System.Collections.Generic.HashSet<T>.Remove(T)
  nameWithType.vb: HashSet(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.HashSet(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.Remove(`0)
    name: Remove
    nameWithType: HashSet<T>.Remove
    fullName: System.Collections.Generic.HashSet<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.Remove(`0)
    name: Remove
    nameWithType: HashSet(Of T).Remove
    fullName: System.Collections.Generic.HashSet(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1.GetEnumerator
  commentId: M:System.Collections.Generic.HashSet`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: HashSet<T>.GetEnumerator()
  fullName: System.Collections.Generic.HashSet<T>.GetEnumerator()
  nameWithType.vb: HashSet(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.HashSet(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.GetEnumerator
    name: GetEnumerator
    nameWithType: HashSet<T>.GetEnumerator
    fullName: System.Collections.Generic.HashSet<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.GetEnumerator
    name: GetEnumerator
    nameWithType: HashSet(Of T).GetEnumerator
    fullName: System.Collections.Generic.HashSet(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  commentId: M:System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  isExternal: true
  name: IEnumerable<T>.GetEnumerator()
  nameWithType: HashSet<T>.IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.HashSet<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: HashSet(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: System.Collections.Generic.HashSet(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    name: IEnumerable<T>.GetEnumerator
    nameWithType: HashSet<T>.IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.HashSet<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    name: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    nameWithType: HashSet(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.HashSet(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator
  isExternal: true
  name: IEnumerable.GetEnumerator()
  nameWithType: HashSet<T>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.HashSet<T>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: HashSet(Of T).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.Generic.HashSet(Of T).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: HashSet<T>.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.HashSet<T>.System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: HashSet(Of T).System.Collections.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.HashSet(Of T).System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:System.Collections.Generic.HashSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  isExternal: true
  name: GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: HashSet<T>.GetObjectData(SerializationInfo, StreamingContext)
  fullName: System.Collections.Generic.HashSet<T>.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  nameWithType.vb: HashSet(Of T).GetObjectData(SerializationInfo, StreamingContext)
  fullName.vb: System.Collections.Generic.HashSet(Of T).GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: HashSet<T>.GetObjectData
    fullName: System.Collections.Generic.HashSet<T>.GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: HashSet(Of T).GetObjectData
    fullName: System.Collections.Generic.HashSet(Of T).GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1.OnDeserialization(System.Object)
  commentId: M:System.Collections.Generic.HashSet`1.OnDeserialization(System.Object)
  isExternal: true
  name: OnDeserialization(Object)
  nameWithType: HashSet<T>.OnDeserialization(Object)
  fullName: System.Collections.Generic.HashSet<T>.OnDeserialization(System.Object)
  nameWithType.vb: HashSet(Of T).OnDeserialization(Object)
  fullName.vb: System.Collections.Generic.HashSet(Of T).OnDeserialization(System.Object)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.OnDeserialization(System.Object)
    name: OnDeserialization
    nameWithType: HashSet<T>.OnDeserialization
    fullName: System.Collections.Generic.HashSet<T>.OnDeserialization
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.OnDeserialization(System.Object)
    name: OnDeserialization
    nameWithType: HashSet(Of T).OnDeserialization
    fullName: System.Collections.Generic.HashSet(Of T).OnDeserialization
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1.Add(`0)
  commentId: M:System.Collections.Generic.HashSet`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: HashSet<T>.Add(T)
  fullName: System.Collections.Generic.HashSet<T>.Add(T)
  nameWithType.vb: HashSet(Of T).Add(T)
  fullName.vb: System.Collections.Generic.HashSet(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.Add(`0)
    name: Add
    nameWithType: HashSet<T>.Add
    fullName: System.Collections.Generic.HashSet<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.Add(`0)
    name: Add
    nameWithType: HashSet(Of T).Add
    fullName: System.Collections.Generic.HashSet(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: UnionWith(IEnumerable<T>)
  nameWithType: HashSet<T>.UnionWith(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.UnionWith(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: HashSet(Of T).UnionWith(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.HashSet(Of T).UnionWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: UnionWith(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
    name: UnionWith
    nameWithType: HashSet<T>.UnionWith
    fullName: System.Collections.Generic.HashSet<T>.UnionWith
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
    name: UnionWith
    nameWithType: HashSet(Of T).UnionWith
    fullName: System.Collections.Generic.HashSet(Of T).UnionWith
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: IntersectWith(IEnumerable<T>)
  nameWithType: HashSet<T>.IntersectWith(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.IntersectWith(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: HashSet(Of T).IntersectWith(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.HashSet(Of T).IntersectWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IntersectWith(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
    name: IntersectWith
    nameWithType: HashSet<T>.IntersectWith
    fullName: System.Collections.Generic.HashSet<T>.IntersectWith
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
    name: IntersectWith
    nameWithType: HashSet(Of T).IntersectWith
    fullName: System.Collections.Generic.HashSet(Of T).IntersectWith
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: ExceptWith(IEnumerable<T>)
  nameWithType: HashSet<T>.ExceptWith(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.ExceptWith(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: HashSet(Of T).ExceptWith(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.HashSet(Of T).ExceptWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: ExceptWith(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: ExceptWith
    nameWithType: HashSet<T>.ExceptWith
    fullName: System.Collections.Generic.HashSet<T>.ExceptWith
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: ExceptWith
    nameWithType: HashSet(Of T).ExceptWith
    fullName: System.Collections.Generic.HashSet(Of T).ExceptWith
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: SymmetricExceptWith(IEnumerable<T>)
  nameWithType: HashSet<T>.SymmetricExceptWith(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.SymmetricExceptWith(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: HashSet(Of T).SymmetricExceptWith(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.HashSet(Of T).SymmetricExceptWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: SymmetricExceptWith(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: SymmetricExceptWith
    nameWithType: HashSet<T>.SymmetricExceptWith
    fullName: System.Collections.Generic.HashSet<T>.SymmetricExceptWith
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: SymmetricExceptWith
    nameWithType: HashSet(Of T).SymmetricExceptWith
    fullName: System.Collections.Generic.HashSet(Of T).SymmetricExceptWith
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: IsSubsetOf(IEnumerable<T>)
  nameWithType: HashSet<T>.IsSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.IsSubsetOf(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: HashSet(Of T).IsSubsetOf(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.HashSet(Of T).IsSubsetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSubsetOf(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSubsetOf
    nameWithType: HashSet<T>.IsSubsetOf
    fullName: System.Collections.Generic.HashSet<T>.IsSubsetOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSubsetOf
    nameWithType: HashSet(Of T).IsSubsetOf
    fullName: System.Collections.Generic.HashSet(Of T).IsSubsetOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: IsProperSubsetOf(IEnumerable<T>)
  nameWithType: HashSet<T>.IsProperSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.IsProperSubsetOf(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: HashSet(Of T).IsProperSubsetOf(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.HashSet(Of T).IsProperSubsetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSubsetOf(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSubsetOf
    nameWithType: HashSet<T>.IsProperSubsetOf
    fullName: System.Collections.Generic.HashSet<T>.IsProperSubsetOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSubsetOf
    nameWithType: HashSet(Of T).IsProperSubsetOf
    fullName: System.Collections.Generic.HashSet(Of T).IsProperSubsetOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: IsSupersetOf(IEnumerable<T>)
  nameWithType: HashSet<T>.IsSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.IsSupersetOf(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: HashSet(Of T).IsSupersetOf(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.HashSet(Of T).IsSupersetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSupersetOf(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSupersetOf
    nameWithType: HashSet<T>.IsSupersetOf
    fullName: System.Collections.Generic.HashSet<T>.IsSupersetOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSupersetOf
    nameWithType: HashSet(Of T).IsSupersetOf
    fullName: System.Collections.Generic.HashSet(Of T).IsSupersetOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: IsProperSupersetOf(IEnumerable<T>)
  nameWithType: HashSet<T>.IsProperSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.IsProperSupersetOf(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: HashSet(Of T).IsProperSupersetOf(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.HashSet(Of T).IsProperSupersetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSupersetOf(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSupersetOf
    nameWithType: HashSet<T>.IsProperSupersetOf
    fullName: System.Collections.Generic.HashSet<T>.IsProperSupersetOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSupersetOf
    nameWithType: HashSet(Of T).IsProperSupersetOf
    fullName: System.Collections.Generic.HashSet(Of T).IsProperSupersetOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: Overlaps(IEnumerable<T>)
  nameWithType: HashSet<T>.Overlaps(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.Overlaps(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: HashSet(Of T).Overlaps(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.HashSet(Of T).Overlaps(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Overlaps(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
    name: Overlaps
    nameWithType: HashSet<T>.Overlaps
    fullName: System.Collections.Generic.HashSet<T>.Overlaps
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
    name: Overlaps
    nameWithType: HashSet(Of T).Overlaps
    fullName: System.Collections.Generic.HashSet(Of T).Overlaps
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: SetEquals(IEnumerable<T>)
  nameWithType: HashSet<T>.SetEquals(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.SetEquals(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: HashSet(Of T).SetEquals(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.HashSet(Of T).SetEquals(System.Collections.Generic.IEnumerable(Of T))
  name.vb: SetEquals(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
    name: SetEquals
    nameWithType: HashSet<T>.SetEquals
    fullName: System.Collections.Generic.HashSet<T>.SetEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
    name: SetEquals
    nameWithType: HashSet(Of T).SetEquals
    fullName: System.Collections.Generic.HashSet(Of T).SetEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1.CopyTo(`0[])
  commentId: M:System.Collections.Generic.HashSet`1.CopyTo(`0[])
  isExternal: true
  name: CopyTo(T[])
  nameWithType: HashSet<T>.CopyTo(T[])
  fullName: System.Collections.Generic.HashSet<T>.CopyTo(T[])
  nameWithType.vb: HashSet(Of T).CopyTo(T())
  fullName.vb: System.Collections.Generic.HashSet(Of T).CopyTo(T())
  name.vb: CopyTo(T())
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.CopyTo(`0[])
    name: CopyTo
    nameWithType: HashSet<T>.CopyTo
    fullName: System.Collections.Generic.HashSet<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.CopyTo(`0[])
    name: CopyTo
    nameWithType: HashSet(Of T).CopyTo
    fullName: System.Collections.Generic.HashSet(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32,System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32, Int32)
  nameWithType: HashSet<T>.CopyTo(T[], Int32, Int32)
  fullName: System.Collections.Generic.HashSet<T>.CopyTo(T[], System.Int32, System.Int32)
  nameWithType.vb: HashSet(Of T).CopyTo(T(), Int32, Int32)
  fullName.vb: System.Collections.Generic.HashSet(Of T).CopyTo(T(), System.Int32, System.Int32)
  name.vb: CopyTo(T(), Int32, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32,System.Int32)
    name: CopyTo
    nameWithType: HashSet<T>.CopyTo
    fullName: System.Collections.Generic.HashSet<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32,System.Int32)
    name: CopyTo
    nameWithType: HashSet(Of T).CopyTo
    fullName: System.Collections.Generic.HashSet(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})
  commentId: M:System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})
  isExternal: true
  name: RemoveWhere(Predicate<T>)
  nameWithType: HashSet<T>.RemoveWhere(Predicate<T>)
  fullName: System.Collections.Generic.HashSet<T>.RemoveWhere(System.Predicate<T>)
  nameWithType.vb: HashSet(Of T).RemoveWhere(Predicate(Of T))
  fullName.vb: System.Collections.Generic.HashSet(Of T).RemoveWhere(System.Predicate(Of T))
  name.vb: RemoveWhere(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})
    name: RemoveWhere
    nameWithType: HashSet<T>.RemoveWhere
    fullName: System.Collections.Generic.HashSet<T>.RemoveWhere
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})
    name: RemoveWhere
    nameWithType: HashSet(Of T).RemoveWhere
    fullName: System.Collections.Generic.HashSet(Of T).RemoveWhere
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1.TrimExcess
  commentId: M:System.Collections.Generic.HashSet`1.TrimExcess
  isExternal: true
  name: TrimExcess()
  nameWithType: HashSet<T>.TrimExcess()
  fullName: System.Collections.Generic.HashSet<T>.TrimExcess()
  nameWithType.vb: HashSet(Of T).TrimExcess()
  fullName.vb: System.Collections.Generic.HashSet(Of T).TrimExcess()
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.TrimExcess
    name: TrimExcess
    nameWithType: HashSet<T>.TrimExcess
    fullName: System.Collections.Generic.HashSet<T>.TrimExcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.TrimExcess
    name: TrimExcess
    nameWithType: HashSet(Of T).TrimExcess
    fullName: System.Collections.Generic.HashSet(Of T).TrimExcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1.CreateSetComparer
  commentId: M:System.Collections.Generic.HashSet`1.CreateSetComparer
  isExternal: true
  name: CreateSetComparer()
  nameWithType: HashSet<T>.CreateSetComparer()
  fullName: System.Collections.Generic.HashSet<T>.CreateSetComparer()
  nameWithType.vb: HashSet(Of T).CreateSetComparer()
  fullName.vb: System.Collections.Generic.HashSet(Of T).CreateSetComparer()
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.CreateSetComparer
    name: CreateSetComparer
    nameWithType: HashSet<T>.CreateSetComparer
    fullName: System.Collections.Generic.HashSet<T>.CreateSetComparer
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.CreateSetComparer
    name: CreateSetComparer
    nameWithType: HashSet(Of T).CreateSetComparer
    fullName: System.Collections.Generic.HashSet(Of T).CreateSetComparer
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1.Count
  commentId: P:System.Collections.Generic.HashSet`1.Count
  isExternal: true
  name: Count
  nameWithType: HashSet<T>.Count
  fullName: System.Collections.Generic.HashSet<T>.Count
  nameWithType.vb: HashSet(Of T).Count
  fullName.vb: System.Collections.Generic.HashSet(Of T).Count
- uid: System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  commentId: P:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  isExternal: true
  name: ICollection<T>.IsReadOnly
  nameWithType: HashSet<T>.ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.HashSet<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: HashSet(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName.vb: System.Collections.Generic.HashSet(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.HashSet`1.Comparer
  commentId: P:System.Collections.Generic.HashSet`1.Comparer
  isExternal: true
  name: Comparer
  nameWithType: HashSet<T>.Comparer
  fullName: System.Collections.Generic.HashSet<T>.Comparer
  nameWithType.vb: HashSet(Of T).Comparer
  fullName.vb: System.Collections.Generic.HashSet(Of T).Comparer
- uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  isExternal: true
  name: SetProperty(Object, String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object())
  name.vb: SetProperty(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions
  commentId: T:Microsoft.Health.Utility.IDispatchExtensions
  parent: Microsoft.Health.Utility
  isExternal: false
  name: IDispatchExtensions
  nameWithType: IDispatchExtensions
  fullName: Microsoft.Health.Utility.IDispatchExtensions
- uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  isExternal: true
  name: InvokeMethod(Object, String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object())
  name.vb: InvokeMethod(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  isExternal: true
  name: ToStringInvariant(Object)
  nameWithType: InvariantString.ToStringInvariant(Object)
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString
  commentId: T:Microsoft.Health.Utility.InvariantString
  parent: Microsoft.Health.Utility
  isExternal: false
  name: InvariantString
  nameWithType: InvariantString
  fullName: Microsoft.Health.Utility.InvariantString
- uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  isExternal: false
  name: ValueOrDbNull<T>(T)
  nameWithType: TypeHelper.ValueOrDbNull<T>(T)
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>(T)
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of T)(T)
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)(T)
  name.vb: ValueOrDbNull(Of T)(T)
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull<T>
    nameWithType: TypeHelper.ValueOrDbNull<T>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull(Of T)
    nameWithType: TypeHelper.ValueOrDbNull(Of T)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.TypeHelper
  commentId: T:Microsoft.Health.Utility.TypeHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: TypeHelper
  nameWithType: TypeHelper
  fullName: Microsoft.Health.Utility.TypeHelper
- uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  isExternal: true
  name: ToXml(Object)
  nameWithType: WCXmlHelper.ToXml(Object)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.WCXmlHelper
  commentId: T:Microsoft.Health.Utility.WCXmlHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: WCXmlHelper
  nameWithType: WCXmlHelper
  fullName: Microsoft.Health.Utility.WCXmlHelper
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.#ctor*
  commentId: Overload:Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.#ctor
  isExternal: false
  name: XmlSerializableCollection
  nameWithType: XmlSerializableCollection<T>.XmlSerializableCollection
  fullName: Microsoft.Health.Utility.Configurations.XmlSerializableCollection<T>.XmlSerializableCollection
  nameWithType.vb: XmlSerializableCollection(Of T).XmlSerializableCollection
  fullName.vb: Microsoft.Health.Utility.Configurations.XmlSerializableCollection(Of T).XmlSerializableCollection
- uid: System.Collections.Generic.IEqualityComparer{{T}}
  commentId: T:System.Collections.Generic.IEqualityComparer{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1
  commentId: T:System.Collections.Generic.IEqualityComparer`1
  isExternal: true
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.Serialization.SerializationInfo
  commentId: T:System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: true
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  commentId: T:System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.ToArray*
  commentId: Overload:Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.ToArray
  isExternal: false
  name: ToArray
  nameWithType: XmlSerializableCollection<T>.ToArray
  fullName: Microsoft.Health.Utility.Configurations.XmlSerializableCollection<T>.ToArray
  nameWithType.vb: XmlSerializableCollection(Of T).ToArray
  fullName.vb: Microsoft.Health.Utility.Configurations.XmlSerializableCollection(Of T).ToArray
- uid: '{T}[]'
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.GetSchema*
  commentId: Overload:Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.GetSchema
  isExternal: false
  name: GetSchema
  nameWithType: XmlSerializableCollection<T>.GetSchema
  fullName: Microsoft.Health.Utility.Configurations.XmlSerializableCollection<T>.GetSchema
  nameWithType.vb: XmlSerializableCollection(Of T).GetSchema
  fullName.vb: Microsoft.Health.Utility.Configurations.XmlSerializableCollection(Of T).GetSchema
- uid: System.Xml.Serialization.IXmlSerializable.GetSchema
  commentId: M:System.Xml.Serialization.IXmlSerializable.GetSchema
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: GetSchema()
  nameWithType: IXmlSerializable.GetSchema()
  fullName: System.Xml.Serialization.IXmlSerializable.GetSchema()
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.GetSchema
    name: GetSchema
    nameWithType: IXmlSerializable.GetSchema
    fullName: System.Xml.Serialization.IXmlSerializable.GetSchema
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.GetSchema
    name: GetSchema
    nameWithType: IXmlSerializable.GetSchema
    fullName: System.Xml.Serialization.IXmlSerializable.GetSchema
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.Schema.XmlSchema
  commentId: T:System.Xml.Schema.XmlSchema
  parent: System.Xml.Schema
  isExternal: true
  name: XmlSchema
  nameWithType: XmlSchema
  fullName: System.Xml.Schema.XmlSchema
- uid: System.Xml.Schema
  commentId: N:System.Xml.Schema
  isExternal: false
  name: System.Xml.Schema
  nameWithType: System.Xml.Schema
  fullName: System.Xml.Schema
- uid: Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.ReadXml*
  commentId: Overload:Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.ReadXml
  isExternal: false
  name: ReadXml
  nameWithType: XmlSerializableCollection<T>.ReadXml
  fullName: Microsoft.Health.Utility.Configurations.XmlSerializableCollection<T>.ReadXml
  nameWithType.vb: XmlSerializableCollection(Of T).ReadXml
  fullName.vb: Microsoft.Health.Utility.Configurations.XmlSerializableCollection(Of T).ReadXml
- uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  commentId: M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: ReadXml(XmlReader)
  nameWithType: IXmlSerializable.ReadXml(XmlReader)
  fullName: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
    name: ReadXml
    nameWithType: IXmlSerializable.ReadXml
    fullName: System.Xml.Serialization.IXmlSerializable.ReadXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
    name: ReadXml
    nameWithType: IXmlSerializable.ReadXml
    fullName: System.Xml.Serialization.IXmlSerializable.ReadXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.XmlReader
  commentId: T:System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: false
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.WriteXml*
  commentId: Overload:Microsoft.Health.Utility.Configurations.XmlSerializableCollection`1.WriteXml
  isExternal: false
  name: WriteXml
  nameWithType: XmlSerializableCollection<T>.WriteXml
  fullName: Microsoft.Health.Utility.Configurations.XmlSerializableCollection<T>.WriteXml
  nameWithType.vb: XmlSerializableCollection(Of T).WriteXml
  fullName.vb: Microsoft.Health.Utility.Configurations.XmlSerializableCollection(Of T).WriteXml
- uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  commentId: M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: WriteXml(XmlWriter)
  nameWithType: IXmlSerializable.WriteXml(XmlWriter)
  fullName: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: IXmlSerializable.WriteXml
    fullName: System.Xml.Serialization.IXmlSerializable.WriteXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: IXmlSerializable.WriteXml
    fullName: System.Xml.Serialization.IXmlSerializable.WriteXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.XmlWriter
  commentId: T:System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
