### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.DictionaryFileIndex`2
  commentId: T:Microsoft.Health.DictionaryFileIndex`2
  id: DictionaryFileIndex`2
  parent: Microsoft.Health
  children:
  - Microsoft.Health.DictionaryFileIndex`2.#ctor(Microsoft.Health.DictionaryFile{`0,`1},System.Collections.Generic.IComparer{`0})
  - Microsoft.Health.DictionaryFileIndex`2.#ctor(Microsoft.Health.DictionaryFile{`0,`1},System.Collections.Generic.IComparer{`0},System.Int32)
  - Microsoft.Health.DictionaryFileIndex`2.#ctor(Microsoft.Health.DictionaryFile{`0,`1},System.Collections.Generic.IEnumerable{Microsoft.Health.KeyLocation{`0}},System.Collections.Generic.IComparer{`0},System.Int32)
  - Microsoft.Health.DictionaryFileIndex`2.#ctor(System.String)
  - Microsoft.Health.DictionaryFileIndex`2.#ctor(System.String,System.Boolean)
  - Microsoft.Health.DictionaryFileIndex`2.#ctor(System.String,System.Collections.Generic.IComparer{`0},System.Boolean)
  - Microsoft.Health.DictionaryFileIndex`2.ContainsKey(`0)
  - Microsoft.Health.DictionaryFileIndex`2.File
  - Microsoft.Health.DictionaryFileIndex`2.Get(`0,`1@)
  - Microsoft.Health.DictionaryFileIndex`2.Get(`0,System.Collections.Generic.IComparer{`0},`1@)
  - Microsoft.Health.DictionaryFileIndex`2.GetMultiple(`0)
  - Microsoft.Health.DictionaryFileIndex`2.GetMultipleKeys(`0,System.Collections.Generic.IComparer{`0})
  - Microsoft.Health.DictionaryFileIndex`2.Index
  - Microsoft.Health.DictionaryFileIndex`2.Keys
  langs:
  - csharp
  - vb
  name: DictionaryFileIndex<K, V>
  nameWithType: DictionaryFileIndex<K, V>
  fullName: Microsoft.Health.DictionaryFileIndex<K, V>
  type: Class
  source:
    remote:
      path: Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFileIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: DictionaryFileIndex
    path: search/DictionaryIndex/DictionaryFileIndex.cs
    startLine: 12
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  syntax:
    content: 'public class DictionaryFileIndex<K, V> : IIndex<K, V>'
    content.vb: >-
      Public Class DictionaryFileIndex(Of K, V)
          Implements IIndex(Of K, V)
    typeParameters:
    - id: K
    - id: V
  inheritance:
  - System.Object
  implements:
  - Microsoft.Health.IIndex{{K},{V}}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - Microsoft.Health.DictionaryFileIndex`2.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  - System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  nameWithType.vb: DictionaryFileIndex(Of K, V)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.Health.DictionaryFileIndex(Of K, V)
  name.vb: DictionaryFileIndex(Of K, V)
- uid: Microsoft.Health.DictionaryFileIndex`2.#ctor(System.String)
  commentId: M:Microsoft.Health.DictionaryFileIndex`2.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.Health.DictionaryFileIndex`2
  langs:
  - csharp
  - vb
  name: DictionaryFileIndex(String)
  nameWithType: DictionaryFileIndex<K, V>.DictionaryFileIndex(String)
  fullName: Microsoft.Health.DictionaryFileIndex<K, V>.DictionaryFileIndex(System.String)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFileIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: search/DictionaryIndex/DictionaryFileIndex.cs
    startLine: 23
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public DictionaryFileIndex(string dictionaryFilePath)
    content.vb: Public Sub New(dictionaryFilePath As String)
    parameters:
    - id: dictionaryFilePath
      type: System.String
      description: ''
  overload: Microsoft.Health.DictionaryFileIndex`2.#ctor*
  nameWithType.vb: DictionaryFileIndex(Of K, V).DictionaryFileIndex(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.DictionaryFileIndex(Of K, V).DictionaryFileIndex(System.String)
- uid: Microsoft.Health.DictionaryFileIndex`2.#ctor(System.String,System.Boolean)
  commentId: M:Microsoft.Health.DictionaryFileIndex`2.#ctor(System.String,System.Boolean)
  id: '#ctor(System.String,System.Boolean)'
  parent: Microsoft.Health.DictionaryFileIndex`2
  langs:
  - csharp
  - vb
  name: DictionaryFileIndex(String, Boolean)
  nameWithType: DictionaryFileIndex<K, V>.DictionaryFileIndex(String, Boolean)
  fullName: Microsoft.Health.DictionaryFileIndex<K, V>.DictionaryFileIndex(System.String, System.Boolean)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFileIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: search/DictionaryIndex/DictionaryFileIndex.cs
    startLine: 33
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public DictionaryFileIndex(string dictionaryFilePath, bool useMultiReader)
    content.vb: Public Sub New(dictionaryFilePath As String, useMultiReader As Boolean)
    parameters:
    - id: dictionaryFilePath
      type: System.String
      description: ''
    - id: useMultiReader
      type: System.Boolean
      description: ''
  overload: Microsoft.Health.DictionaryFileIndex`2.#ctor*
  nameWithType.vb: DictionaryFileIndex(Of K, V).DictionaryFileIndex(String, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.DictionaryFileIndex(Of K, V).DictionaryFileIndex(System.String, System.Boolean)
- uid: Microsoft.Health.DictionaryFileIndex`2.#ctor(System.String,System.Collections.Generic.IComparer{`0},System.Boolean)
  commentId: M:Microsoft.Health.DictionaryFileIndex`2.#ctor(System.String,System.Collections.Generic.IComparer{`0},System.Boolean)
  id: '#ctor(System.String,System.Collections.Generic.IComparer{`0},System.Boolean)'
  parent: Microsoft.Health.DictionaryFileIndex`2
  langs:
  - csharp
  - vb
  name: DictionaryFileIndex(String, IComparer<K>, Boolean)
  nameWithType: DictionaryFileIndex<K, V>.DictionaryFileIndex(String, IComparer<K>, Boolean)
  fullName: Microsoft.Health.DictionaryFileIndex<K, V>.DictionaryFileIndex(System.String, System.Collections.Generic.IComparer<K>, System.Boolean)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFileIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: search/DictionaryIndex/DictionaryFileIndex.cs
    startLine: 44
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public DictionaryFileIndex(string dictionaryFilePath, IComparer<K> comparer, bool useMultiReader)
    content.vb: Public Sub New(dictionaryFilePath As String, comparer As IComparer(Of K), useMultiReader As Boolean)
    parameters:
    - id: dictionaryFilePath
      type: System.String
      description: ''
    - id: comparer
      type: System.Collections.Generic.IComparer{{K}}
      description: ''
    - id: useMultiReader
      type: System.Boolean
      description: ''
  overload: Microsoft.Health.DictionaryFileIndex`2.#ctor*
  nameWithType.vb: DictionaryFileIndex(Of K, V).DictionaryFileIndex(String, IComparer(Of K), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.DictionaryFileIndex(Of K, V).DictionaryFileIndex(System.String, System.Collections.Generic.IComparer(Of K), System.Boolean)
  name.vb: DictionaryFileIndex(String, IComparer(Of K), Boolean)
- uid: Microsoft.Health.DictionaryFileIndex`2.#ctor(Microsoft.Health.DictionaryFile{`0,`1},System.Collections.Generic.IComparer{`0})
  commentId: M:Microsoft.Health.DictionaryFileIndex`2.#ctor(Microsoft.Health.DictionaryFile{`0,`1},System.Collections.Generic.IComparer{`0})
  id: '#ctor(Microsoft.Health.DictionaryFile{`0,`1},System.Collections.Generic.IComparer{`0})'
  parent: Microsoft.Health.DictionaryFileIndex`2
  langs:
  - csharp
  - vb
  name: DictionaryFileIndex(DictionaryFile<K, V>, IComparer<K>)
  nameWithType: DictionaryFileIndex<K, V>.DictionaryFileIndex(DictionaryFile<K, V>, IComparer<K>)
  fullName: Microsoft.Health.DictionaryFileIndex<K, V>.DictionaryFileIndex(Microsoft.Health.DictionaryFile<K, V>, System.Collections.Generic.IComparer<K>)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFileIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: search/DictionaryIndex/DictionaryFileIndex.cs
    startLine: 56
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public DictionaryFileIndex(DictionaryFile<K, V> source, IComparer<K> comparer)
    content.vb: Public Sub New(source As DictionaryFile(Of K, V), comparer As IComparer(Of K))
    parameters:
    - id: source
      type: Microsoft.Health.DictionaryFile{{K},{V}}
      description: ''
    - id: comparer
      type: System.Collections.Generic.IComparer{{K}}
      description: ''
  overload: Microsoft.Health.DictionaryFileIndex`2.#ctor*
  nameWithType.vb: DictionaryFileIndex(Of K, V).DictionaryFileIndex(DictionaryFile(Of K, V), IComparer(Of K))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.DictionaryFileIndex(Of K, V).DictionaryFileIndex(Microsoft.Health.DictionaryFile(Of K, V), System.Collections.Generic.IComparer(Of K))
  name.vb: DictionaryFileIndex(DictionaryFile(Of K, V), IComparer(Of K))
- uid: Microsoft.Health.DictionaryFileIndex`2.#ctor(Microsoft.Health.DictionaryFile{`0,`1},System.Collections.Generic.IComparer{`0},System.Int32)
  commentId: M:Microsoft.Health.DictionaryFileIndex`2.#ctor(Microsoft.Health.DictionaryFile{`0,`1},System.Collections.Generic.IComparer{`0},System.Int32)
  id: '#ctor(Microsoft.Health.DictionaryFile{`0,`1},System.Collections.Generic.IComparer{`0},System.Int32)'
  parent: Microsoft.Health.DictionaryFileIndex`2
  langs:
  - csharp
  - vb
  name: DictionaryFileIndex(DictionaryFile<K, V>, IComparer<K>, Int32)
  nameWithType: DictionaryFileIndex<K, V>.DictionaryFileIndex(DictionaryFile<K, V>, IComparer<K>, Int32)
  fullName: Microsoft.Health.DictionaryFileIndex<K, V>.DictionaryFileIndex(Microsoft.Health.DictionaryFile<K, V>, System.Collections.Generic.IComparer<K>, System.Int32)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFileIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: search/DictionaryIndex/DictionaryFileIndex.cs
    startLine: 67
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public DictionaryFileIndex(DictionaryFile<K, V> source, IComparer<K> comparer, int growBy)
    content.vb: Public Sub New(source As DictionaryFile(Of K, V), comparer As IComparer(Of K), growBy As Integer)
    parameters:
    - id: source
      type: Microsoft.Health.DictionaryFile{{K},{V}}
      description: ''
    - id: comparer
      type: System.Collections.Generic.IComparer{{K}}
      description: ''
    - id: growBy
      type: System.Int32
      description: ''
  overload: Microsoft.Health.DictionaryFileIndex`2.#ctor*
  nameWithType.vb: DictionaryFileIndex(Of K, V).DictionaryFileIndex(DictionaryFile(Of K, V), IComparer(Of K), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.DictionaryFileIndex(Of K, V).DictionaryFileIndex(Microsoft.Health.DictionaryFile(Of K, V), System.Collections.Generic.IComparer(Of K), System.Int32)
  name.vb: DictionaryFileIndex(DictionaryFile(Of K, V), IComparer(Of K), Int32)
- uid: Microsoft.Health.DictionaryFileIndex`2.#ctor(Microsoft.Health.DictionaryFile{`0,`1},System.Collections.Generic.IEnumerable{Microsoft.Health.KeyLocation{`0}},System.Collections.Generic.IComparer{`0},System.Int32)
  commentId: M:Microsoft.Health.DictionaryFileIndex`2.#ctor(Microsoft.Health.DictionaryFile{`0,`1},System.Collections.Generic.IEnumerable{Microsoft.Health.KeyLocation{`0}},System.Collections.Generic.IComparer{`0},System.Int32)
  id: '#ctor(Microsoft.Health.DictionaryFile{`0,`1},System.Collections.Generic.IEnumerable{Microsoft.Health.KeyLocation{`0}},System.Collections.Generic.IComparer{`0},System.Int32)'
  parent: Microsoft.Health.DictionaryFileIndex`2
  langs:
  - csharp
  - vb
  name: DictionaryFileIndex(DictionaryFile<K, V>, IEnumerable<KeyLocation<K>>, IComparer<K>, Int32)
  nameWithType: DictionaryFileIndex<K, V>.DictionaryFileIndex(DictionaryFile<K, V>, IEnumerable<KeyLocation<K>>, IComparer<K>, Int32)
  fullName: Microsoft.Health.DictionaryFileIndex<K, V>.DictionaryFileIndex(Microsoft.Health.DictionaryFile<K, V>, System.Collections.Generic.IEnumerable<Microsoft.Health.KeyLocation<K>>, System.Collections.Generic.IComparer<K>, System.Int32)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFileIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: search/DictionaryIndex/DictionaryFileIndex.cs
    startLine: 79
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public DictionaryFileIndex(DictionaryFile<K, V> source, IEnumerable<KeyLocation<K>> keys, IComparer<K> comparer, int growBy)
    content.vb: Public Sub New(source As DictionaryFile(Of K, V), keys As IEnumerable(Of KeyLocation(Of K)), comparer As IComparer(Of K), growBy As Integer)
    parameters:
    - id: source
      type: Microsoft.Health.DictionaryFile{{K},{V}}
      description: ''
    - id: keys
      type: System.Collections.Generic.IEnumerable{Microsoft.Health.KeyLocation{{K}}}
      description: ''
    - id: comparer
      type: System.Collections.Generic.IComparer{{K}}
      description: ''
    - id: growBy
      type: System.Int32
      description: ''
  overload: Microsoft.Health.DictionaryFileIndex`2.#ctor*
  nameWithType.vb: DictionaryFileIndex(Of K, V).DictionaryFileIndex(DictionaryFile(Of K, V), IEnumerable(Of KeyLocation(Of K)), IComparer(Of K), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.DictionaryFileIndex(Of K, V).DictionaryFileIndex(Microsoft.Health.DictionaryFile(Of K, V), System.Collections.Generic.IEnumerable(Of Microsoft.Health.KeyLocation(Of K)), System.Collections.Generic.IComparer(Of K), System.Int32)
  name.vb: DictionaryFileIndex(DictionaryFile(Of K, V), IEnumerable(Of KeyLocation(Of K)), IComparer(Of K), Int32)
- uid: Microsoft.Health.DictionaryFileIndex`2.File
  commentId: P:Microsoft.Health.DictionaryFileIndex`2.File
  id: File
  parent: Microsoft.Health.DictionaryFileIndex`2
  langs:
  - csharp
  - vb
  name: File
  nameWithType: DictionaryFileIndex<K, V>.File
  fullName: Microsoft.Health.DictionaryFileIndex<K, V>.File
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFileIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: File
    path: search/DictionaryIndex/DictionaryFileIndex.cs
    startLine: 101
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public DictionaryFile<K, V> File { get; }
    content.vb: Public ReadOnly Property File As DictionaryFile(Of K, V)
    parameters: []
    return:
      type: Microsoft.Health.DictionaryFile{{K},{V}}
  overload: Microsoft.Health.DictionaryFileIndex`2.File*
  nameWithType.vb: DictionaryFileIndex(Of K, V).File
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.Health.DictionaryFileIndex(Of K, V).File
- uid: Microsoft.Health.DictionaryFileIndex`2.Keys
  commentId: P:Microsoft.Health.DictionaryFileIndex`2.Keys
  id: Keys
  parent: Microsoft.Health.DictionaryFileIndex`2
  langs:
  - csharp
  - vb
  name: Keys
  nameWithType: DictionaryFileIndex<K, V>.Keys
  fullName: Microsoft.Health.DictionaryFileIndex<K, V>.Keys
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFileIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Keys
    path: search/DictionaryIndex/DictionaryFileIndex.cs
    startLine: 112
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public IEnumerable<K> Keys { get; }
    content.vb: Public ReadOnly Property Keys As IEnumerable(Of K)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{{K}}
  overload: Microsoft.Health.DictionaryFileIndex`2.Keys*
  implements:
  - Microsoft.Health.IIndex{{K},{V}}.Keys
  nameWithType.vb: DictionaryFileIndex(Of K, V).Keys
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.Health.DictionaryFileIndex(Of K, V).Keys
- uid: Microsoft.Health.DictionaryFileIndex`2.Index
  commentId: P:Microsoft.Health.DictionaryFileIndex`2.Index
  id: Index
  parent: Microsoft.Health.DictionaryFileIndex`2
  langs:
  - csharp
  - vb
  name: Index
  nameWithType: DictionaryFileIndex<K, V>.Index
  fullName: Microsoft.Health.DictionaryFileIndex<K, V>.Index
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFileIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Index
    path: search/DictionaryIndex/DictionaryFileIndex.cs
    startLine: 123
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public SortedIndex<K, ValueLocation> Index { get; }
    content.vb: Public ReadOnly Property Index As SortedIndex(Of K, ValueLocation)
    parameters: []
    return:
      type: Microsoft.Health.SortedIndex{{K},Microsoft.Health.ValueLocation}
  overload: Microsoft.Health.DictionaryFileIndex`2.Index*
  nameWithType.vb: DictionaryFileIndex(Of K, V).Index
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.Health.DictionaryFileIndex(Of K, V).Index
- uid: Microsoft.Health.DictionaryFileIndex`2.Get(`0,`1@)
  commentId: M:Microsoft.Health.DictionaryFileIndex`2.Get(`0,`1@)
  id: Get(`0,`1@)
  parent: Microsoft.Health.DictionaryFileIndex`2
  langs:
  - csharp
  - vb
  name: Get(K, out V)
  nameWithType: DictionaryFileIndex<K, V>.Get(K, out V)
  fullName: Microsoft.Health.DictionaryFileIndex<K, V>.Get(K, out V)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFileIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Get
    path: search/DictionaryIndex/DictionaryFileIndex.cs
    startLine: 137
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public bool Get(K key, out V value)
    content.vb: Public Function Get(key As K, ByRef value As V) As Boolean
    parameters:
    - id: key
      type: '{K}'
      description: ''
    - id: value
      type: '{V}'
      description: ''
    return:
      type: System.Boolean
      description: ''
  overload: Microsoft.Health.DictionaryFileIndex`2.Get*
  implements:
  - Microsoft.Health.IIndex{{K},{V}}.Get({K},{V}@)
  nameWithType.vb: DictionaryFileIndex(Of K, V).Get(K, ByRef V)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.DictionaryFileIndex(Of K, V).Get(K, ByRef V)
  name.vb: Get(K, ByRef V)
- uid: Microsoft.Health.DictionaryFileIndex`2.Get(`0,System.Collections.Generic.IComparer{`0},`1@)
  commentId: M:Microsoft.Health.DictionaryFileIndex`2.Get(`0,System.Collections.Generic.IComparer{`0},`1@)
  id: Get(`0,System.Collections.Generic.IComparer{`0},`1@)
  parent: Microsoft.Health.DictionaryFileIndex`2
  langs:
  - csharp
  - vb
  name: Get(K, IComparer<K>, out V)
  nameWithType: DictionaryFileIndex<K, V>.Get(K, IComparer<K>, out V)
  fullName: Microsoft.Health.DictionaryFileIndex<K, V>.Get(K, System.Collections.Generic.IComparer<K>, out V)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFileIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Get
    path: search/DictionaryIndex/DictionaryFileIndex.cs
    startLine: 157
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public bool Get(K key, IComparer<K> comparer, out V value)
    content.vb: Public Function Get(key As K, comparer As IComparer(Of K), ByRef value As V) As Boolean
    parameters:
    - id: key
      type: '{K}'
      description: ''
    - id: comparer
      type: System.Collections.Generic.IComparer{{K}}
      description: ''
    - id: value
      type: '{V}'
      description: ''
    return:
      type: System.Boolean
      description: ''
  overload: Microsoft.Health.DictionaryFileIndex`2.Get*
  nameWithType.vb: DictionaryFileIndex(Of K, V).Get(K, IComparer(Of K), ByRef V)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.DictionaryFileIndex(Of K, V).Get(K, System.Collections.Generic.IComparer(Of K), ByRef V)
  name.vb: Get(K, IComparer(Of K), ByRef V)
- uid: Microsoft.Health.DictionaryFileIndex`2.GetMultiple(`0)
  commentId: M:Microsoft.Health.DictionaryFileIndex`2.GetMultiple(`0)
  id: GetMultiple(`0)
  parent: Microsoft.Health.DictionaryFileIndex`2
  langs:
  - csharp
  - vb
  name: GetMultiple(K)
  nameWithType: DictionaryFileIndex<K, V>.GetMultiple(K)
  fullName: Microsoft.Health.DictionaryFileIndex<K, V>.GetMultiple(K)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFileIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetMultiple
    path: search/DictionaryIndex/DictionaryFileIndex.cs
    startLine: 175
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public IEnumerable<V> GetMultiple(K key)
    content.vb: Public Function GetMultiple(key As K) As IEnumerable(Of V)
    parameters:
    - id: key
      type: '{K}'
      description: ''
    return:
      type: System.Collections.Generic.IEnumerable{{V}}
      description: ''
  overload: Microsoft.Health.DictionaryFileIndex`2.GetMultiple*
  nameWithType.vb: DictionaryFileIndex(Of K, V).GetMultiple(K)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.DictionaryFileIndex(Of K, V).GetMultiple(K)
- uid: Microsoft.Health.DictionaryFileIndex`2.GetMultipleKeys(`0,System.Collections.Generic.IComparer{`0})
  commentId: M:Microsoft.Health.DictionaryFileIndex`2.GetMultipleKeys(`0,System.Collections.Generic.IComparer{`0})
  id: GetMultipleKeys(`0,System.Collections.Generic.IComparer{`0})
  parent: Microsoft.Health.DictionaryFileIndex`2
  langs:
  - csharp
  - vb
  name: GetMultipleKeys(K, IComparer<K>)
  nameWithType: DictionaryFileIndex<K, V>.GetMultipleKeys(K, IComparer<K>)
  fullName: Microsoft.Health.DictionaryFileIndex<K, V>.GetMultipleKeys(K, System.Collections.Generic.IComparer<K>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFileIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetMultipleKeys
    path: search/DictionaryIndex/DictionaryFileIndex.cs
    startLine: 192
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public IEnumerable<K> GetMultipleKeys(K key, IComparer<K> keyComparer)
    content.vb: Public Function GetMultipleKeys(key As K, keyComparer As IComparer(Of K)) As IEnumerable(Of K)
    parameters:
    - id: key
      type: '{K}'
      description: ''
    - id: keyComparer
      type: System.Collections.Generic.IComparer{{K}}
      description: ''
    return:
      type: System.Collections.Generic.IEnumerable{{K}}
      description: ''
  overload: Microsoft.Health.DictionaryFileIndex`2.GetMultipleKeys*
  nameWithType.vb: DictionaryFileIndex(Of K, V).GetMultipleKeys(K, IComparer(Of K))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.DictionaryFileIndex(Of K, V).GetMultipleKeys(K, System.Collections.Generic.IComparer(Of K))
  name.vb: GetMultipleKeys(K, IComparer(Of K))
- uid: Microsoft.Health.DictionaryFileIndex`2.ContainsKey(`0)
  commentId: M:Microsoft.Health.DictionaryFileIndex`2.ContainsKey(`0)
  id: ContainsKey(`0)
  parent: Microsoft.Health.DictionaryFileIndex`2
  langs:
  - csharp
  - vb
  name: ContainsKey(K)
  nameWithType: DictionaryFileIndex<K, V>.ContainsKey(K)
  fullName: Microsoft.Health.DictionaryFileIndex<K, V>.ContainsKey(K)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/DictionaryIndex/DictionaryFileIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ContainsKey
    path: search/DictionaryIndex/DictionaryFileIndex.cs
    startLine: 215
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health
  summary: "\n\n"
  example: []
  syntax:
    content: public bool ContainsKey(K key)
    content.vb: Public Function ContainsKey(key As K) As Boolean
    parameters:
    - id: key
      type: '{K}'
      description: ''
    return:
      type: System.Boolean
      description: ''
  overload: Microsoft.Health.DictionaryFileIndex`2.ContainsKey*
  implements:
  - Microsoft.Health.IIndex{{K},{V}}.ContainsKey({K})
  nameWithType.vb: DictionaryFileIndex(Of K, V).ContainsKey(K)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.DictionaryFileIndex(Of K, V).ContainsKey(K)
references:
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Health.IIndex{{K},{V}}
  commentId: T:Microsoft.Health.IIndex{`0,`1}
  parent: Microsoft.Health
  definition: Microsoft.Health.IIndex`2
  name: IIndex<K, V>
  nameWithType: IIndex<K, V>
  fullName: Microsoft.Health.IIndex<K, V>
  nameWithType.vb: IIndex(Of K, V)
  fullName.vb: Microsoft.Health.IIndex(Of K, V)
  name.vb: IIndex(Of K, V)
  spec.csharp:
  - uid: Microsoft.Health.IIndex`2
    name: IIndex
    nameWithType: IIndex
    fullName: Microsoft.Health.IIndex
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.IIndex`2
    name: IIndex
    nameWithType: IIndex
    fullName: Microsoft.Health.IIndex
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  name: SetProperty(String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object())
  name.vb: SetProperty(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  name: InvokeMethod(String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object())
  name.vb: InvokeMethod(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  parent: Microsoft.Health.Utility.InvariantString
  definition: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  name: ToStringInvariant()
  nameWithType: InvariantString.ToStringInvariant()
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant()
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.DictionaryFileIndex`2.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  parent: Microsoft.Health.Utility.TypeHelper
  definition: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  name: ValueOrDbNull<DictionaryFileIndex<K, V>>()
  nameWithType: TypeHelper.ValueOrDbNull<DictionaryFileIndex<K, V>>()
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.DictionaryFileIndex<K, V>>()
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of DictionaryFileIndex(Of K, V))()
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.DictionaryFileIndex(Of K, V))()
  name.vb: ValueOrDbNull(Of DictionaryFileIndex(Of K, V))()
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull<DictionaryFileIndex<K, V>>
    nameWithType: TypeHelper.ValueOrDbNull<DictionaryFileIndex<K, V>>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.DictionaryFileIndex<K, V>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull(Of DictionaryFileIndex(Of K, V))
    nameWithType: TypeHelper.ValueOrDbNull(Of DictionaryFileIndex(Of K, V))
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.DictionaryFileIndex(Of K, V))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  parent: Microsoft.Health.Utility.WCXmlHelper
  definition: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  name: ToXml()
  nameWithType: WCXmlHelper.ToXml()
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml()
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.IIndex`2
  commentId: T:Microsoft.Health.IIndex`2
  isExternal: false
  name: IIndex<K, V>
  nameWithType: IIndex<K, V>
  fullName: Microsoft.Health.IIndex<K, V>
  nameWithType.vb: IIndex(Of K, V)
  fullName.vb: Microsoft.Health.IIndex(Of K, V)
  name.vb: IIndex(Of K, V)
  spec.csharp:
  - uid: Microsoft.Health.IIndex`2
    name: IIndex
    nameWithType: IIndex
    fullName: Microsoft.Health.IIndex
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.IIndex`2
    name: IIndex
    nameWithType: IIndex
    fullName: Microsoft.Health.IIndex
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  isExternal: true
  name: SetProperty(Object, String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object())
  name.vb: SetProperty(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions
  commentId: T:Microsoft.Health.Utility.IDispatchExtensions
  parent: Microsoft.Health.Utility
  isExternal: false
  name: IDispatchExtensions
  nameWithType: IDispatchExtensions
  fullName: Microsoft.Health.Utility.IDispatchExtensions
- uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  isExternal: true
  name: InvokeMethod(Object, String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object())
  name.vb: InvokeMethod(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  isExternal: true
  name: ToStringInvariant(Object)
  nameWithType: InvariantString.ToStringInvariant(Object)
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString
  commentId: T:Microsoft.Health.Utility.InvariantString
  parent: Microsoft.Health.Utility
  isExternal: false
  name: InvariantString
  nameWithType: InvariantString
  fullName: Microsoft.Health.Utility.InvariantString
- uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  isExternal: false
  name: ValueOrDbNull<T>(T)
  nameWithType: TypeHelper.ValueOrDbNull<T>(T)
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>(T)
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of T)(T)
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)(T)
  name.vb: ValueOrDbNull(Of T)(T)
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull<T>
    nameWithType: TypeHelper.ValueOrDbNull<T>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull(Of T)
    nameWithType: TypeHelper.ValueOrDbNull(Of T)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.TypeHelper
  commentId: T:Microsoft.Health.Utility.TypeHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: TypeHelper
  nameWithType: TypeHelper
  fullName: Microsoft.Health.Utility.TypeHelper
- uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  isExternal: true
  name: ToXml(Object)
  nameWithType: WCXmlHelper.ToXml(Object)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.WCXmlHelper
  commentId: T:Microsoft.Health.Utility.WCXmlHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: WCXmlHelper
  nameWithType: WCXmlHelper
  fullName: Microsoft.Health.Utility.WCXmlHelper
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: Microsoft.Health.DictionaryFileIndex`2.#ctor*
  commentId: Overload:Microsoft.Health.DictionaryFileIndex`2.#ctor
  isExternal: false
  name: DictionaryFileIndex
  nameWithType: DictionaryFileIndex<K, V>.DictionaryFileIndex
  fullName: Microsoft.Health.DictionaryFileIndex<K, V>.DictionaryFileIndex
  nameWithType.vb: DictionaryFileIndex(Of K, V).DictionaryFileIndex
  fullName.vb: Microsoft.Health.DictionaryFileIndex(Of K, V).DictionaryFileIndex
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IComparer{{K}}
  commentId: T:System.Collections.Generic.IComparer{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<K>
  nameWithType: IComparer<K>
  fullName: System.Collections.Generic.IComparer<K>
  nameWithType.vb: IComparer(Of K)
  fullName.vb: System.Collections.Generic.IComparer(Of K)
  name.vb: IComparer(Of K)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IComparer`1
  commentId: T:System.Collections.Generic.IComparer`1
  isExternal: true
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Health.DictionaryFile{{K},{V}}
  commentId: T:Microsoft.Health.DictionaryFile{`0,`1}
  parent: Microsoft.Health
  definition: Microsoft.Health.DictionaryFile`2
  name: DictionaryFile<K, V>
  nameWithType: DictionaryFile<K, V>
  fullName: Microsoft.Health.DictionaryFile<K, V>
  nameWithType.vb: DictionaryFile(Of K, V)
  fullName.vb: Microsoft.Health.DictionaryFile(Of K, V)
  name.vb: DictionaryFile(Of K, V)
  spec.csharp:
  - uid: Microsoft.Health.DictionaryFile`2
    name: DictionaryFile
    nameWithType: DictionaryFile
    fullName: Microsoft.Health.DictionaryFile
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.DictionaryFile`2
    name: DictionaryFile
    nameWithType: DictionaryFile
    fullName: Microsoft.Health.DictionaryFile
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.DictionaryFile`2
  commentId: T:Microsoft.Health.DictionaryFile`2
  isExternal: false
  name: DictionaryFile<K, V>
  nameWithType: DictionaryFile<K, V>
  fullName: Microsoft.Health.DictionaryFile<K, V>
  nameWithType.vb: DictionaryFile(Of K, V)
  fullName.vb: Microsoft.Health.DictionaryFile(Of K, V)
  name.vb: DictionaryFile(Of K, V)
  spec.csharp:
  - uid: Microsoft.Health.DictionaryFile`2
    name: DictionaryFile
    nameWithType: DictionaryFile
    fullName: Microsoft.Health.DictionaryFile
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.DictionaryFile`2
    name: DictionaryFile
    nameWithType: DictionaryFile
    fullName: Microsoft.Health.DictionaryFile
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IEnumerable{Microsoft.Health.KeyLocation{{K}}}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Health.KeyLocation{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyLocation<K>>
  nameWithType: IEnumerable<KeyLocation<K>>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Health.KeyLocation<K>>
  nameWithType.vb: IEnumerable(Of KeyLocation(Of K))
  fullName.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Health.KeyLocation(Of K))
  name.vb: IEnumerable(Of KeyLocation(Of K))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.KeyLocation`1
    name: KeyLocation
    nameWithType: KeyLocation
    fullName: Microsoft.Health.KeyLocation
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.KeyLocation`1
    name: KeyLocation
    nameWithType: KeyLocation
    fullName: Microsoft.Health.KeyLocation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.DictionaryFileIndex`2.File*
  commentId: Overload:Microsoft.Health.DictionaryFileIndex`2.File
  isExternal: false
  name: File
  nameWithType: DictionaryFileIndex<K, V>.File
  fullName: Microsoft.Health.DictionaryFileIndex<K, V>.File
  nameWithType.vb: DictionaryFileIndex(Of K, V).File
  fullName.vb: Microsoft.Health.DictionaryFileIndex(Of K, V).File
- uid: Microsoft.Health.DictionaryFileIndex`2.Keys*
  commentId: Overload:Microsoft.Health.DictionaryFileIndex`2.Keys
  isExternal: false
  name: Keys
  nameWithType: DictionaryFileIndex<K, V>.Keys
  fullName: Microsoft.Health.DictionaryFileIndex<K, V>.Keys
  nameWithType.vb: DictionaryFileIndex(Of K, V).Keys
  fullName.vb: Microsoft.Health.DictionaryFileIndex(Of K, V).Keys
- uid: Microsoft.Health.IIndex{{K},{V}}.Keys
  commentId: P:Microsoft.Health.IIndex{`0,`1}.Keys
  parent: Microsoft.Health.IIndex{{K},{V}}
  definition: Microsoft.Health.IIndex`2.Keys
  name: Keys
  nameWithType: IIndex<K, V>.Keys
  fullName: Microsoft.Health.IIndex<K, V>.Keys
  nameWithType.vb: IIndex(Of K, V).Keys
  fullName.vb: Microsoft.Health.IIndex(Of K, V).Keys
- uid: System.Collections.Generic.IEnumerable{{K}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<K>
  nameWithType: IEnumerable<K>
  fullName: System.Collections.Generic.IEnumerable<K>
  nameWithType.vb: IEnumerable(Of K)
  fullName.vb: System.Collections.Generic.IEnumerable(Of K)
  name.vb: IEnumerable(Of K)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.IIndex`2.Keys
  commentId: P:Microsoft.Health.IIndex`2.Keys
  isExternal: false
  name: Keys
  nameWithType: IIndex<K, V>.Keys
  fullName: Microsoft.Health.IIndex<K, V>.Keys
  nameWithType.vb: IIndex(Of K, V).Keys
  fullName.vb: Microsoft.Health.IIndex(Of K, V).Keys
- uid: Microsoft.Health.DictionaryFileIndex`2.Index*
  commentId: Overload:Microsoft.Health.DictionaryFileIndex`2.Index
  isExternal: false
  name: Index
  nameWithType: DictionaryFileIndex<K, V>.Index
  fullName: Microsoft.Health.DictionaryFileIndex<K, V>.Index
  nameWithType.vb: DictionaryFileIndex(Of K, V).Index
  fullName.vb: Microsoft.Health.DictionaryFileIndex(Of K, V).Index
- uid: Microsoft.Health.SortedIndex{{K},Microsoft.Health.ValueLocation}
  commentId: T:Microsoft.Health.SortedIndex{`0,Microsoft.Health.ValueLocation}
  parent: Microsoft.Health
  definition: Microsoft.Health.SortedIndex`2
  name: SortedIndex<K, ValueLocation>
  nameWithType: SortedIndex<K, ValueLocation>
  fullName: Microsoft.Health.SortedIndex<K, Microsoft.Health.ValueLocation>
  nameWithType.vb: SortedIndex(Of K, ValueLocation)
  fullName.vb: Microsoft.Health.SortedIndex(Of K, Microsoft.Health.ValueLocation)
  name.vb: SortedIndex(Of K, ValueLocation)
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2
    name: SortedIndex
    nameWithType: SortedIndex
    fullName: Microsoft.Health.SortedIndex
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.ValueLocation
    name: ValueLocation
    nameWithType: ValueLocation
    fullName: Microsoft.Health.ValueLocation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2
    name: SortedIndex
    nameWithType: SortedIndex
    fullName: Microsoft.Health.SortedIndex
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.ValueLocation
    name: ValueLocation
    nameWithType: ValueLocation
    fullName: Microsoft.Health.ValueLocation
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex`2
  commentId: T:Microsoft.Health.SortedIndex`2
  isExternal: false
  name: SortedIndex<K, V>
  nameWithType: SortedIndex<K, V>
  fullName: Microsoft.Health.SortedIndex<K, V>
  nameWithType.vb: SortedIndex(Of K, V)
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V)
  name.vb: SortedIndex(Of K, V)
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2
    name: SortedIndex
    nameWithType: SortedIndex
    fullName: Microsoft.Health.SortedIndex
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2
    name: SortedIndex
    nameWithType: SortedIndex
    fullName: Microsoft.Health.SortedIndex
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.DictionaryFileIndex`2.Get*
  commentId: Overload:Microsoft.Health.DictionaryFileIndex`2.Get
  isExternal: false
  name: Get
  nameWithType: DictionaryFileIndex<K, V>.Get
  fullName: Microsoft.Health.DictionaryFileIndex<K, V>.Get
  nameWithType.vb: DictionaryFileIndex(Of K, V).Get
  fullName.vb: Microsoft.Health.DictionaryFileIndex(Of K, V).Get
- uid: Microsoft.Health.IIndex{{K},{V}}.Get({K},{V}@)
  commentId: M:Microsoft.Health.IIndex{`0,`1}.Get(`0,`1@)
  parent: Microsoft.Health.IIndex{{K},{V}}
  definition: Microsoft.Health.IIndex`2.Get(`0,`1@)
  name: Get(K, V)
  nameWithType: IIndex<K, V>.Get(K, V)
  fullName: Microsoft.Health.IIndex<K, V>.Get(K, V)
  nameWithType.vb: IIndex(Of K, V).Get(K, V)
  fullName.vb: Microsoft.Health.IIndex(Of K, V).Get(K, V)
  spec.csharp:
  - uid: Microsoft.Health.IIndex`2.Get(`0,`1@)
    name: Get
    nameWithType: IIndex<K, V>.Get
    fullName: Microsoft.Health.IIndex<K, V>.Get
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.IIndex`2.Get(`0,`1@)
    name: Get
    nameWithType: IIndex(Of K, V).Get
    fullName: Microsoft.Health.IIndex(Of K, V).Get
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: '{K}'
  commentId: '!:K'
  definition: K
  name: K
  nameWithType: K
  fullName: K
- uid: '{V}'
  commentId: '!:V'
  definition: V
  name: V
  nameWithType: V
  fullName: V
- uid: Microsoft.Health.IIndex`2.Get(`0,`1@)
  commentId: M:Microsoft.Health.IIndex`2.Get(`0,`1@)
  isExternal: false
  name: Get(K, V)
  nameWithType: IIndex<K, V>.Get(K, V)
  fullName: Microsoft.Health.IIndex<K, V>.Get(K, V)
  nameWithType.vb: IIndex(Of K, V).Get(K, V)
  fullName.vb: Microsoft.Health.IIndex(Of K, V).Get(K, V)
  spec.csharp:
  - uid: Microsoft.Health.IIndex`2.Get(`0,`1@)
    name: Get
    nameWithType: IIndex<K, V>.Get
    fullName: Microsoft.Health.IIndex<K, V>.Get
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.IIndex`2.Get(`0,`1@)
    name: Get
    nameWithType: IIndex(Of K, V).Get
    fullName: Microsoft.Health.IIndex(Of K, V).Get
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: K
  isExternal: false
  name: K
  nameWithType: K
  fullName: K
- uid: V
  isExternal: false
  name: V
  nameWithType: V
  fullName: V
- uid: Microsoft.Health.DictionaryFileIndex`2.GetMultiple*
  commentId: Overload:Microsoft.Health.DictionaryFileIndex`2.GetMultiple
  isExternal: false
  name: GetMultiple
  nameWithType: DictionaryFileIndex<K, V>.GetMultiple
  fullName: Microsoft.Health.DictionaryFileIndex<K, V>.GetMultiple
  nameWithType.vb: DictionaryFileIndex(Of K, V).GetMultiple
  fullName.vb: Microsoft.Health.DictionaryFileIndex(Of K, V).GetMultiple
- uid: System.Collections.Generic.IEnumerable{{V}}
  commentId: T:System.Collections.Generic.IEnumerable{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<V>
  nameWithType: IEnumerable<V>
  fullName: System.Collections.Generic.IEnumerable<V>
  nameWithType.vb: IEnumerable(Of V)
  fullName.vb: System.Collections.Generic.IEnumerable(Of V)
  name.vb: IEnumerable(Of V)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.DictionaryFileIndex`2.GetMultipleKeys*
  commentId: Overload:Microsoft.Health.DictionaryFileIndex`2.GetMultipleKeys
  isExternal: false
  name: GetMultipleKeys
  nameWithType: DictionaryFileIndex<K, V>.GetMultipleKeys
  fullName: Microsoft.Health.DictionaryFileIndex<K, V>.GetMultipleKeys
  nameWithType.vb: DictionaryFileIndex(Of K, V).GetMultipleKeys
  fullName.vb: Microsoft.Health.DictionaryFileIndex(Of K, V).GetMultipleKeys
- uid: Microsoft.Health.DictionaryFileIndex`2.ContainsKey*
  commentId: Overload:Microsoft.Health.DictionaryFileIndex`2.ContainsKey
  isExternal: false
  name: ContainsKey
  nameWithType: DictionaryFileIndex<K, V>.ContainsKey
  fullName: Microsoft.Health.DictionaryFileIndex<K, V>.ContainsKey
  nameWithType.vb: DictionaryFileIndex(Of K, V).ContainsKey
  fullName.vb: Microsoft.Health.DictionaryFileIndex(Of K, V).ContainsKey
- uid: Microsoft.Health.IIndex{{K},{V}}.ContainsKey({K})
  commentId: M:Microsoft.Health.IIndex{`0,`1}.ContainsKey(`0)
  parent: Microsoft.Health.IIndex{{K},{V}}
  definition: Microsoft.Health.IIndex`2.ContainsKey(`0)
  name: ContainsKey(K)
  nameWithType: IIndex<K, V>.ContainsKey(K)
  fullName: Microsoft.Health.IIndex<K, V>.ContainsKey(K)
  nameWithType.vb: IIndex(Of K, V).ContainsKey(K)
  fullName.vb: Microsoft.Health.IIndex(Of K, V).ContainsKey(K)
  spec.csharp:
  - uid: Microsoft.Health.IIndex`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IIndex<K, V>.ContainsKey
    fullName: Microsoft.Health.IIndex<K, V>.ContainsKey
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.IIndex`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IIndex(Of K, V).ContainsKey
    fullName: Microsoft.Health.IIndex(Of K, V).ContainsKey
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.IIndex`2.ContainsKey(`0)
  commentId: M:Microsoft.Health.IIndex`2.ContainsKey(`0)
  isExternal: false
  name: ContainsKey(K)
  nameWithType: IIndex<K, V>.ContainsKey(K)
  fullName: Microsoft.Health.IIndex<K, V>.ContainsKey(K)
  nameWithType.vb: IIndex(Of K, V).ContainsKey(K)
  fullName.vb: Microsoft.Health.IIndex(Of K, V).ContainsKey(K)
  spec.csharp:
  - uid: Microsoft.Health.IIndex`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IIndex<K, V>.ContainsKey
    fullName: Microsoft.Health.IIndex<K, V>.ContainsKey
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.IIndex`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IIndex(Of K, V).ContainsKey
    fullName: Microsoft.Health.IIndex(Of K, V).ContainsKey
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
