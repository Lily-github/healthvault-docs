### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.Utility.SqlHelper
  commentId: T:Microsoft.Health.Utility.SqlHelper
  id: SqlHelper
  parent: Microsoft.Health.Utility
  children:
  - Microsoft.Health.Utility.SqlHelper.#ctor(Microsoft.Health.Utility.Configurations.DatabaseConnectionInfo)
  - Microsoft.Health.Utility.SqlHelper.#ctor(Microsoft.Health.Utility.Configurations.DatabaseConnectionInfo,Microsoft.Health.Utility.Diagnostics.TraceLog)
  - Microsoft.Health.Utility.SqlHelper.#ctor(Microsoft.Health.Utility.Configurations.DatabaseConnectionInfo,Microsoft.Health.Utility.Diagnostics.TraceLog,System.String)
  - Microsoft.Health.Utility.SqlHelper.#ctor(Microsoft.Health.Utility.Configurations.DatabaseConnectionInfo,System.String,Microsoft.Health.Utility.Diagnostics.TraceLog,System.Boolean)
  - Microsoft.Health.Utility.SqlHelper.#ctor(System.String)
  - Microsoft.Health.Utility.SqlHelper.#ctor(System.String,Microsoft.Health.Utility.Diagnostics.TraceLog)
  - Microsoft.Health.Utility.SqlHelper.#ctor(System.String,Microsoft.Health.Utility.Diagnostics.TraceLog,System.String)
  - Microsoft.Health.Utility.SqlHelper.#ctor(System.String,Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandlingPolicy)
  - Microsoft.Health.Utility.SqlHelper.#ctor(System.String,Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandlingPolicy,Microsoft.Health.Utility.Diagnostics.TraceLog)
  - Microsoft.Health.Utility.SqlHelper.#ctor(System.String,Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandlingPolicy,System.String,Microsoft.Health.Utility.Diagnostics.TraceLog,System.Boolean)
  - Microsoft.Health.Utility.SqlHelper.#ctor(System.String,System.String)
  - Microsoft.Health.Utility.SqlHelper.#ctor(System.String,System.String,Microsoft.Health.Utility.Diagnostics.TraceLog)
  - Microsoft.Health.Utility.SqlHelper.#ctor(System.String,System.String,Microsoft.Health.Utility.Diagnostics.TraceLog,System.Boolean)
  - Microsoft.Health.Utility.SqlHelper.AddListOfParameters(System.Collections.IEnumerable,System.String)
  - Microsoft.Health.Utility.SqlHelper.AddListOfParameters(System.Collections.IList,System.String)
  - Microsoft.Health.Utility.SqlHelper.AddListOfParameters``1(System.Collections.Generic.IEnumerable{``0},System.String)
  - Microsoft.Health.Utility.SqlHelper.AddListOfParameters``1(System.Collections.Generic.IList{``0},System.String,System.Int32,System.Int32)
  - Microsoft.Health.Utility.SqlHelper.AddParameter(System.String,System.Object)
  - Microsoft.Health.Utility.SqlHelper.AddParameter(System.String,System.Object,System.Data.SqlDbType)
  - Microsoft.Health.Utility.SqlHelper.AddParameter(System.String,System.Object,System.Data.SqlDbType,System.Int32)
  - Microsoft.Health.Utility.SqlHelper.CanonicalizeString(System.String)
  - Microsoft.Health.Utility.SqlHelper.Close
  - Microsoft.Health.Utility.SqlHelper.Command
  - Microsoft.Health.Utility.SqlHelper.CommitTransaction
  - Microsoft.Health.Utility.SqlHelper.Connection
  - Microsoft.Health.Utility.SqlHelper.ConnectionKey
  - Microsoft.Health.Utility.SqlHelper.Dispose
  - Microsoft.Health.Utility.SqlHelper.Dispose(System.Boolean)
  - Microsoft.Health.Utility.SqlHelper.EscapeLikeClause(System.String)
  - Microsoft.Health.Utility.SqlHelper.ExecuteNonQuery
  - Microsoft.Health.Utility.SqlHelper.ExecuteReader
  - Microsoft.Health.Utility.SqlHelper.ExecuteReader(System.Data.CommandBehavior)
  - Microsoft.Health.Utility.SqlHelper.ExecuteScalar
  - Microsoft.Health.Utility.SqlHelper.FaultHandlingPolicy
  - Microsoft.Health.Utility.SqlHelper.Finalize
  - Microsoft.Health.Utility.SqlHelper.GetNullableDateTime(System.String,System.DateTime)
  - Microsoft.Health.Utility.SqlHelper.GetNullableString(System.Int32)
  - Microsoft.Health.Utility.SqlHelper.GetUtcDateTime(System.Int32)
  - Microsoft.Health.Utility.SqlHelper.GetValidDateTime2ForSql(System.DateTime)
  - Microsoft.Health.Utility.SqlHelper.GetValidDateTimeForSql(System.DateTime)
  - Microsoft.Health.Utility.SqlHelper.GetXmlDocument(System.Int32)
  - Microsoft.Health.Utility.SqlHelper.IsDuplicateRowInsertionViolation(System.Data.SqlClient.SqlException)
  - Microsoft.Health.Utility.SqlHelper.IsForeignKeyViolation(System.Data.SqlClient.SqlException)
  - Microsoft.Health.Utility.SqlHelper.IsInTransaction
  - Microsoft.Health.Utility.SqlHelper.IsPrimaryKeyViolation(System.Data.SqlClient.SqlException)
  - Microsoft.Health.Utility.SqlHelper.IsUniqueIndexViolation(System.Data.SqlClient.SqlException)
  - Microsoft.Health.Utility.SqlHelper.IsUserDefinedError(System.Data.SqlClient.SqlException)
  - Microsoft.Health.Utility.SqlHelper.OpenConnection
  - Microsoft.Health.Utility.SqlHelper.Reader
  - Microsoft.Health.Utility.SqlHelper.ReadNullableValue``1(System.Int32,``0)
  - Microsoft.Health.Utility.SqlHelper.Reset
  - Microsoft.Health.Utility.SqlHelper.ResetCommand
  - Microsoft.Health.Utility.SqlHelper.ResetReader
  - Microsoft.Health.Utility.SqlHelper.RollbackSavePoint(System.String)
  - Microsoft.Health.Utility.SqlHelper.RollbackTransaction
  - Microsoft.Health.Utility.SqlHelper.SqlDateTimeMaxValue
  - Microsoft.Health.Utility.SqlHelper.SqlDateTimeMinValue
  - Microsoft.Health.Utility.SqlHelper.StartSavePoint(System.String)
  - Microsoft.Health.Utility.SqlHelper.StartTransaction
  - Microsoft.Health.Utility.SqlHelper.ToString
  - Microsoft.Health.Utility.SqlHelper.TraceLog
  - Microsoft.Health.Utility.SqlHelper.Transaction
  - Microsoft.Health.Utility.SqlHelper.Update(System.String,System.Int32,System.String[],System.Object[],System.Boolean)
  langs:
  - csharp
  - vb
  name: SqlHelper
  nameWithType: SqlHelper
  fullName: Microsoft.Health.Utility.SqlHelper
  type: Class
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SqlHelper
    path: utilities/SqlHelper.cs
    startLine: 25
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nManages all the helper objects for common sql operations\n"
  example: []
  syntax:
    content: 'public class SqlHelper : IDisposable'
    content.vb: >-
      Public Class SqlHelper
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - Microsoft.Health.Utility.SqlHelper.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  - System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.Utility.SqlHelper.#ctor(System.String,Microsoft.Health.Utility.Diagnostics.TraceLog)
  commentId: M:Microsoft.Health.Utility.SqlHelper.#ctor(System.String,Microsoft.Health.Utility.Diagnostics.TraceLog)
  id: '#ctor(System.String,Microsoft.Health.Utility.Diagnostics.TraceLog)'
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: SqlHelper(String, TraceLog)
  nameWithType: SqlHelper.SqlHelper(String, TraceLog)
  fullName: Microsoft.Health.Utility.SqlHelper.SqlHelper(System.String, Microsoft.Health.Utility.Diagnostics.TraceLog)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: utilities/SqlHelper.cs
    startLine: 32
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nInitialize with a &lt;connectionSettings&gt; string\n"
  example: []
  syntax:
    content: public SqlHelper(string connectionString, TraceLog traceLog)
    content.vb: Public Sub New(connectionString As String, traceLog As TraceLog)
    parameters:
    - id: connectionString
      type: System.String
      description: ''
    - id: traceLog
      type: Microsoft.Health.Utility.Diagnostics.TraceLog
      description: ''
  overload: Microsoft.Health.Utility.SqlHelper.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Utility.SqlHelper.#ctor(System.String,Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandlingPolicy,Microsoft.Health.Utility.Diagnostics.TraceLog)
  commentId: M:Microsoft.Health.Utility.SqlHelper.#ctor(System.String,Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandlingPolicy,Microsoft.Health.Utility.Diagnostics.TraceLog)
  id: '#ctor(System.String,Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandlingPolicy,Microsoft.Health.Utility.Diagnostics.TraceLog)'
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: SqlHelper(String, TransientFaultHandlingPolicy, TraceLog)
  nameWithType: SqlHelper.SqlHelper(String, TransientFaultHandlingPolicy, TraceLog)
  fullName: Microsoft.Health.Utility.SqlHelper.SqlHelper(System.String, Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandlingPolicy, Microsoft.Health.Utility.Diagnostics.TraceLog)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: utilities/SqlHelper.cs
    startLine: 51
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nInitializes with a hard-coded connection string,\na transient fault-handling policy, and a trace log\n"
  example: []
  syntax:
    content: public SqlHelper(string connectionString, TransientFaultHandlingPolicy faultHandlingPolicy, TraceLog traceLog)
    content.vb: Public Sub New(connectionString As String, faultHandlingPolicy As TransientFaultHandlingPolicy, traceLog As TraceLog)
    parameters:
    - id: connectionString
      type: System.String
    - id: faultHandlingPolicy
      type: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandlingPolicy
    - id: traceLog
      type: Microsoft.Health.Utility.Diagnostics.TraceLog
  overload: Microsoft.Health.Utility.SqlHelper.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Utility.SqlHelper.#ctor(Microsoft.Health.Utility.Configurations.DatabaseConnectionInfo,Microsoft.Health.Utility.Diagnostics.TraceLog)
  commentId: M:Microsoft.Health.Utility.SqlHelper.#ctor(Microsoft.Health.Utility.Configurations.DatabaseConnectionInfo,Microsoft.Health.Utility.Diagnostics.TraceLog)
  id: '#ctor(Microsoft.Health.Utility.Configurations.DatabaseConnectionInfo,Microsoft.Health.Utility.Diagnostics.TraceLog)'
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: SqlHelper(DatabaseConnectionInfo, TraceLog)
  nameWithType: SqlHelper.SqlHelper(DatabaseConnectionInfo, TraceLog)
  fullName: Microsoft.Health.Utility.SqlHelper.SqlHelper(Microsoft.Health.Utility.Configurations.DatabaseConnectionInfo, Microsoft.Health.Utility.Diagnostics.TraceLog)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: utilities/SqlHelper.cs
    startLine: 60
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nInitializes with a connection info object, and a trace log.\n"
  example: []
  syntax:
    content: public SqlHelper(DatabaseConnectionInfo connectionInfo, TraceLog traceLog)
    content.vb: Public Sub New(connectionInfo As DatabaseConnectionInfo, traceLog As TraceLog)
    parameters:
    - id: connectionInfo
      type: Microsoft.Health.Utility.Configurations.DatabaseConnectionInfo
    - id: traceLog
      type: Microsoft.Health.Utility.Diagnostics.TraceLog
  overload: Microsoft.Health.Utility.SqlHelper.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Utility.SqlHelper.#ctor(Microsoft.Health.Utility.Configurations.DatabaseConnectionInfo,Microsoft.Health.Utility.Diagnostics.TraceLog,System.String)
  commentId: M:Microsoft.Health.Utility.SqlHelper.#ctor(Microsoft.Health.Utility.Configurations.DatabaseConnectionInfo,Microsoft.Health.Utility.Diagnostics.TraceLog,System.String)
  id: '#ctor(Microsoft.Health.Utility.Configurations.DatabaseConnectionInfo,Microsoft.Health.Utility.Diagnostics.TraceLog,System.String)'
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: SqlHelper(DatabaseConnectionInfo, TraceLog, String)
  nameWithType: SqlHelper.SqlHelper(DatabaseConnectionInfo, TraceLog, String)
  fullName: Microsoft.Health.Utility.SqlHelper.SqlHelper(Microsoft.Health.Utility.Configurations.DatabaseConnectionInfo, Microsoft.Health.Utility.Diagnostics.TraceLog, System.String)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: utilities/SqlHelper.cs
    startLine: 69
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nInitialize with a &lt;connectionSettings&gt; string\n"
  example: []
  syntax:
    content: public SqlHelper(DatabaseConnectionInfo connectionInfo, TraceLog traceLog, string connectionKey)
    content.vb: Public Sub New(connectionInfo As DatabaseConnectionInfo, traceLog As TraceLog, connectionKey As String)
    parameters:
    - id: connectionInfo
      type: Microsoft.Health.Utility.Configurations.DatabaseConnectionInfo
    - id: traceLog
      type: Microsoft.Health.Utility.Diagnostics.TraceLog
    - id: connectionKey
      type: System.String
  overload: Microsoft.Health.Utility.SqlHelper.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Utility.SqlHelper.#ctor(System.String,Microsoft.Health.Utility.Diagnostics.TraceLog,System.String)
  commentId: M:Microsoft.Health.Utility.SqlHelper.#ctor(System.String,Microsoft.Health.Utility.Diagnostics.TraceLog,System.String)
  id: '#ctor(System.String,Microsoft.Health.Utility.Diagnostics.TraceLog,System.String)'
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: SqlHelper(String, TraceLog, String)
  nameWithType: SqlHelper.SqlHelper(String, TraceLog, String)
  fullName: Microsoft.Health.Utility.SqlHelper.SqlHelper(System.String, Microsoft.Health.Utility.Diagnostics.TraceLog, System.String)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: utilities/SqlHelper.cs
    startLine: 81
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nInitialize with a &lt;connectionSettings&gt; string\n"
  example: []
  syntax:
    content: public SqlHelper(string connectionString, TraceLog traceLog, string connectionKey)
    content.vb: Public Sub New(connectionString As String, traceLog As TraceLog, connectionKey As String)
    parameters:
    - id: connectionString
      type: System.String
      description: ''
    - id: traceLog
      type: Microsoft.Health.Utility.Diagnostics.TraceLog
      description: ''
    - id: connectionKey
      type: System.String
      description: ''
  overload: Microsoft.Health.Utility.SqlHelper.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Utility.SqlHelper.#ctor(System.String,System.String,Microsoft.Health.Utility.Diagnostics.TraceLog)
  commentId: M:Microsoft.Health.Utility.SqlHelper.#ctor(System.String,System.String,Microsoft.Health.Utility.Diagnostics.TraceLog)
  id: '#ctor(System.String,System.String,Microsoft.Health.Utility.Diagnostics.TraceLog)'
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: SqlHelper(String, String, TraceLog)
  nameWithType: SqlHelper.SqlHelper(String, String, TraceLog)
  fullName: Microsoft.Health.Utility.SqlHelper.SqlHelper(System.String, System.String, Microsoft.Health.Utility.Diagnostics.TraceLog)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: utilities/SqlHelper.cs
    startLine: 96
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nInitialize with a hard-coded connection string.\n"
  example: []
  syntax:
    content: public SqlHelper(string connectionString, string commandString, TraceLog traceLog)
    content.vb: Public Sub New(connectionString As String, commandString As String, traceLog As TraceLog)
    parameters:
    - id: connectionString
      type: System.String
      description: ''
    - id: commandString
      type: System.String
      description: ''
    - id: traceLog
      type: Microsoft.Health.Utility.Diagnostics.TraceLog
      description: ''
  overload: Microsoft.Health.Utility.SqlHelper.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Utility.SqlHelper.#ctor(Microsoft.Health.Utility.Configurations.DatabaseConnectionInfo,System.String,Microsoft.Health.Utility.Diagnostics.TraceLog,System.Boolean)
  commentId: M:Microsoft.Health.Utility.SqlHelper.#ctor(Microsoft.Health.Utility.Configurations.DatabaseConnectionInfo,System.String,Microsoft.Health.Utility.Diagnostics.TraceLog,System.Boolean)
  id: '#ctor(Microsoft.Health.Utility.Configurations.DatabaseConnectionInfo,System.String,Microsoft.Health.Utility.Diagnostics.TraceLog,System.Boolean)'
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: SqlHelper(DatabaseConnectionInfo, String, TraceLog, Boolean)
  nameWithType: SqlHelper.SqlHelper(DatabaseConnectionInfo, String, TraceLog, Boolean)
  fullName: Microsoft.Health.Utility.SqlHelper.SqlHelper(Microsoft.Health.Utility.Configurations.DatabaseConnectionInfo, System.String, Microsoft.Health.Utility.Diagnostics.TraceLog, System.Boolean)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: utilities/SqlHelper.cs
    startLine: 119
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nInitialize with a connection info object,\noptional command string, trace log, and a flag\nindicating whether exception should be thrown when\na null trace log is passed.\n"
  example: []
  syntax:
    content: public SqlHelper(DatabaseConnectionInfo connectionInfo, string commandText, TraceLog traceLog, bool allowNullTraceLog)
    content.vb: Public Sub New(connectionInfo As DatabaseConnectionInfo, commandText As String, traceLog As TraceLog, allowNullTraceLog As Boolean)
    parameters:
    - id: connectionInfo
      type: Microsoft.Health.Utility.Configurations.DatabaseConnectionInfo
    - id: commandText
      type: System.String
    - id: traceLog
      type: Microsoft.Health.Utility.Diagnostics.TraceLog
    - id: allowNullTraceLog
      type: System.Boolean
  overload: Microsoft.Health.Utility.SqlHelper.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Utility.SqlHelper.#ctor(System.String,Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandlingPolicy,System.String,Microsoft.Health.Utility.Diagnostics.TraceLog,System.Boolean)
  commentId: M:Microsoft.Health.Utility.SqlHelper.#ctor(System.String,Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandlingPolicy,System.String,Microsoft.Health.Utility.Diagnostics.TraceLog,System.Boolean)
  id: '#ctor(System.String,Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandlingPolicy,System.String,Microsoft.Health.Utility.Diagnostics.TraceLog,System.Boolean)'
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: SqlHelper(String, TransientFaultHandlingPolicy, String, TraceLog, Boolean)
  nameWithType: SqlHelper.SqlHelper(String, TransientFaultHandlingPolicy, String, TraceLog, Boolean)
  fullName: Microsoft.Health.Utility.SqlHelper.SqlHelper(System.String, Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandlingPolicy, System.String, Microsoft.Health.Utility.Diagnostics.TraceLog, System.Boolean)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: utilities/SqlHelper.cs
    startLine: 134
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nInitialize with a hard-coded connection string,\noptional command string, trace log, and a flag\nindicating whether exception should be thrown when\na null trace log is passed.\n"
  example: []
  syntax:
    content: public SqlHelper(string connectionString, TransientFaultHandlingPolicy faultHandlingPolicy, string commandText, TraceLog traceLog, bool allowNullTraceLog)
    content.vb: Public Sub New(connectionString As String, faultHandlingPolicy As TransientFaultHandlingPolicy, commandText As String, traceLog As TraceLog, allowNullTraceLog As Boolean)
    parameters:
    - id: connectionString
      type: System.String
    - id: faultHandlingPolicy
      type: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandlingPolicy
    - id: commandText
      type: System.String
    - id: traceLog
      type: Microsoft.Health.Utility.Diagnostics.TraceLog
    - id: allowNullTraceLog
      type: System.Boolean
  overload: Microsoft.Health.Utility.SqlHelper.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Utility.SqlHelper.#ctor(System.String,System.String,Microsoft.Health.Utility.Diagnostics.TraceLog,System.Boolean)
  commentId: M:Microsoft.Health.Utility.SqlHelper.#ctor(System.String,System.String,Microsoft.Health.Utility.Diagnostics.TraceLog,System.Boolean)
  id: '#ctor(System.String,System.String,Microsoft.Health.Utility.Diagnostics.TraceLog,System.Boolean)'
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: SqlHelper(String, String, TraceLog, Boolean)
  nameWithType: SqlHelper.SqlHelper(String, String, TraceLog, Boolean)
  fullName: Microsoft.Health.Utility.SqlHelper.SqlHelper(System.String, System.String, Microsoft.Health.Utility.Diagnostics.TraceLog, System.Boolean)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: utilities/SqlHelper.cs
    startLine: 152
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nInitialize with a hard-coded connection string.\n"
  example: []
  syntax:
    content: public SqlHelper(string connectionString, string commandString, TraceLog traceLog, bool allowNullTraceLog)
    content.vb: Public Sub New(connectionString As String, commandString As String, traceLog As TraceLog, allowNullTraceLog As Boolean)
    parameters:
    - id: connectionString
      type: System.String
      description: ''
    - id: commandString
      type: System.String
      description: ''
    - id: traceLog
      type: Microsoft.Health.Utility.Diagnostics.TraceLog
      description: ''
    - id: allowNullTraceLog
      type: System.Boolean
      description: ''
  overload: Microsoft.Health.Utility.SqlHelper.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Utility.SqlHelper.#ctor(Microsoft.Health.Utility.Configurations.DatabaseConnectionInfo)
  commentId: M:Microsoft.Health.Utility.SqlHelper.#ctor(Microsoft.Health.Utility.Configurations.DatabaseConnectionInfo)
  id: '#ctor(Microsoft.Health.Utility.Configurations.DatabaseConnectionInfo)'
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: SqlHelper(DatabaseConnectionInfo)
  nameWithType: SqlHelper.SqlHelper(DatabaseConnectionInfo)
  fullName: Microsoft.Health.Utility.SqlHelper.SqlHelper(Microsoft.Health.Utility.Configurations.DatabaseConnectionInfo)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: utilities/SqlHelper.cs
    startLine: 176
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nInitializes with a database connection info object\n"
  example: []
  syntax:
    content: public SqlHelper(DatabaseConnectionInfo connectionInfo)
    content.vb: Public Sub New(connectionInfo As DatabaseConnectionInfo)
    parameters:
    - id: connectionInfo
      type: Microsoft.Health.Utility.Configurations.DatabaseConnectionInfo
  overload: Microsoft.Health.Utility.SqlHelper.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Utility.SqlHelper.#ctor(System.String)
  commentId: M:Microsoft.Health.Utility.SqlHelper.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: SqlHelper(String)
  nameWithType: SqlHelper.SqlHelper(String)
  fullName: Microsoft.Health.Utility.SqlHelper.SqlHelper(System.String)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: utilities/SqlHelper.cs
    startLine: 185
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nInitialize with a &lt;connectionSettings&gt; string\n"
  example: []
  syntax:
    content: public SqlHelper(string connectionString)
    content.vb: Public Sub New(connectionString As String)
    parameters:
    - id: connectionString
      type: System.String
      description: ''
  overload: Microsoft.Health.Utility.SqlHelper.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Utility.SqlHelper.#ctor(System.String,System.String)
  commentId: M:Microsoft.Health.Utility.SqlHelper.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: SqlHelper(String, String)
  nameWithType: SqlHelper.SqlHelper(String, String)
  fullName: Microsoft.Health.Utility.SqlHelper.SqlHelper(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: utilities/SqlHelper.cs
    startLine: 198
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nInitialize with a hard-coded connection string.\n"
  example: []
  syntax:
    content: public SqlHelper(string connectionString, string commandString)
    content.vb: Public Sub New(connectionString As String, commandString As String)
    parameters:
    - id: connectionString
      type: System.String
      description: ''
    - id: commandString
      type: System.String
      description: ''
  overload: Microsoft.Health.Utility.SqlHelper.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Utility.SqlHelper.#ctor(System.String,Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandlingPolicy)
  commentId: M:Microsoft.Health.Utility.SqlHelper.#ctor(System.String,Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandlingPolicy)
  id: '#ctor(System.String,Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandlingPolicy)'
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: SqlHelper(String, TransientFaultHandlingPolicy)
  nameWithType: SqlHelper.SqlHelper(String, TransientFaultHandlingPolicy)
  fullName: Microsoft.Health.Utility.SqlHelper.SqlHelper(System.String, Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandlingPolicy)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: utilities/SqlHelper.cs
    startLine: 212
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nInitializes with a hard-coded connection string\nand transient fault-handling policy.\n"
  example: []
  syntax:
    content: public SqlHelper(string connectionString, TransientFaultHandlingPolicy faultHandlingPolicy)
    content.vb: Public Sub New(connectionString As String, faultHandlingPolicy As TransientFaultHandlingPolicy)
    parameters:
    - id: connectionString
      type: System.String
    - id: faultHandlingPolicy
      type: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandlingPolicy
  overload: Microsoft.Health.Utility.SqlHelper.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Utility.SqlHelper.Reset
  commentId: M:Microsoft.Health.Utility.SqlHelper.Reset
  id: Reset
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: Reset()
  nameWithType: SqlHelper.Reset()
  fullName: Microsoft.Health.Utility.SqlHelper.Reset()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Reset
    path: utilities/SqlHelper.cs
    startLine: 221
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nSetups up for a new connection and command\n"
  example: []
  syntax:
    content: public void Reset()
    content.vb: Public Sub Reset
  overload: Microsoft.Health.Utility.SqlHelper.Reset*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Utility.SqlHelper.ResetCommand
  commentId: M:Microsoft.Health.Utility.SqlHelper.ResetCommand
  id: ResetCommand
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: ResetCommand()
  nameWithType: SqlHelper.ResetCommand()
  fullName: Microsoft.Health.Utility.SqlHelper.ResetCommand()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ResetCommand
    path: utilities/SqlHelper.cs
    startLine: 238
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nGet rid of our reader, etc.; allows command to be used again\n"
  remarks: "\nThis method will use the fault-handling policy\nfrom the FaultHandlingPolicy property, if it is set.\n"
  example: []
  syntax:
    content: public void ResetCommand()
    content.vb: Public Sub ResetCommand
  overload: Microsoft.Health.Utility.SqlHelper.ResetCommand*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Utility.SqlHelper.ResetReader
  commentId: M:Microsoft.Health.Utility.SqlHelper.ResetReader
  id: ResetReader
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: ResetReader()
  nameWithType: SqlHelper.ResetReader()
  fullName: Microsoft.Health.Utility.SqlHelper.ResetReader()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ResetReader
    path: utilities/SqlHelper.cs
    startLine: 260
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nJust get rid of the reader\n"
  example: []
  syntax:
    content: public void ResetReader()
    content.vb: Public Sub ResetReader
  overload: Microsoft.Health.Utility.SqlHelper.ResetReader*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Utility.SqlHelper.OpenConnection
  commentId: M:Microsoft.Health.Utility.SqlHelper.OpenConnection
  id: OpenConnection
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: OpenConnection()
  nameWithType: SqlHelper.OpenConnection()
  fullName: Microsoft.Health.Utility.SqlHelper.OpenConnection()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: OpenConnection
    path: utilities/SqlHelper.cs
    startLine: 273
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nForces the connection open, if needed\n"
  remarks: "\nThis method will use the fault-handling policy\nfrom the FaultHandlingPolicy property, if it is set.\n"
  example: []
  syntax:
    content: public void OpenConnection()
    content.vb: Public Sub OpenConnection
  overload: Microsoft.Health.Utility.SqlHelper.OpenConnection*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Utility.SqlHelper.AddParameter(System.String,System.Object)
  commentId: M:Microsoft.Health.Utility.SqlHelper.AddParameter(System.String,System.Object)
  id: AddParameter(System.String,System.Object)
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: AddParameter(String, Object)
  nameWithType: SqlHelper.AddParameter(String, Object)
  fullName: Microsoft.Health.Utility.SqlHelper.AddParameter(System.String, System.Object)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: AddParameter
    path: utilities/SqlHelper.cs
    startLine: 332
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nAppends a @parameter to the command object\n"
  example: []
  syntax:
    content: public void AddParameter(string name, object value)
    content.vb: Public Sub AddParameter(name As String, value As Object)
    parameters:
    - id: name
      type: System.String
      description: ''
    - id: value
      type: System.Object
      description: ''
  overload: Microsoft.Health.Utility.SqlHelper.AddParameter*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Utility.SqlHelper.AddParameter(System.String,System.Object,System.Data.SqlDbType)
  commentId: M:Microsoft.Health.Utility.SqlHelper.AddParameter(System.String,System.Object,System.Data.SqlDbType)
  id: AddParameter(System.String,System.Object,System.Data.SqlDbType)
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: AddParameter(String, Object, SqlDbType)
  nameWithType: SqlHelper.AddParameter(String, Object, SqlDbType)
  fullName: Microsoft.Health.Utility.SqlHelper.AddParameter(System.String, System.Object, System.Data.SqlDbType)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: AddParameter
    path: utilities/SqlHelper.cs
    startLine: 343
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nAppends a @parameter to the command object\n"
  example: []
  syntax:
    content: public SqlParameter AddParameter(string name, object value, SqlDbType dbType)
    content.vb: Public Function AddParameter(name As String, value As Object, dbType As SqlDbType) As SqlParameter
    parameters:
    - id: name
      type: System.String
      description: ''
    - id: value
      type: System.Object
      description: ''
    - id: dbType
      type: System.Data.SqlDbType
      description: ''
    return:
      type: System.Data.SqlClient.SqlParameter
  overload: Microsoft.Health.Utility.SqlHelper.AddParameter*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Utility.SqlHelper.AddParameter(System.String,System.Object,System.Data.SqlDbType,System.Int32)
  commentId: M:Microsoft.Health.Utility.SqlHelper.AddParameter(System.String,System.Object,System.Data.SqlDbType,System.Int32)
  id: AddParameter(System.String,System.Object,System.Data.SqlDbType,System.Int32)
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: AddParameter(String, Object, SqlDbType, Int32)
  nameWithType: SqlHelper.AddParameter(String, Object, SqlDbType, Int32)
  fullName: Microsoft.Health.Utility.SqlHelper.AddParameter(System.String, System.Object, System.Data.SqlDbType, System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: AddParameter
    path: utilities/SqlHelper.cs
    startLine: 363
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nAppends a @parameter to the command object\n"
  example: []
  syntax:
    content: public SqlParameter AddParameter(string name, object value, SqlDbType dbType, int typeSize)
    content.vb: Public Function AddParameter(name As String, value As Object, dbType As SqlDbType, typeSize As Integer) As SqlParameter
    parameters:
    - id: name
      type: System.String
      description: ''
    - id: value
      type: System.Object
      description: ''
    - id: dbType
      type: System.Data.SqlDbType
      description: ''
    - id: typeSize
      type: System.Int32
      description: if 0, the default will be used
    return:
      type: System.Data.SqlClient.SqlParameter
  overload: Microsoft.Health.Utility.SqlHelper.AddParameter*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Utility.SqlHelper.AddListOfParameters(System.Collections.IList,System.String)
  commentId: M:Microsoft.Health.Utility.SqlHelper.AddListOfParameters(System.Collections.IList,System.String)
  id: AddListOfParameters(System.Collections.IList,System.String)
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: AddListOfParameters(IList, String)
  nameWithType: SqlHelper.AddListOfParameters(IList, String)
  fullName: Microsoft.Health.Utility.SqlHelper.AddListOfParameters(System.Collections.IList, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: AddListOfParameters
    path: utilities/SqlHelper.cs
    startLine: 428
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nAdds a list of objects as parameters to the command.\n"
  example: []
  syntax:
    content: public string AddListOfParameters(IList list, string paramBaseName)
    content.vb: Public Function AddListOfParameters(list As IList, paramBaseName As String) As String
    parameters:
    - id: list
      type: System.Collections.IList
      description: "\nThe list of objects that are the values of the parameters\nto add.\n"
    - id: paramBaseName
      type: System.String
      description: "\nThe base name to use as the parameter name. Each parameter\ngets a numeral value added to the end of the name.\n"
    return:
      type: System.String
      description: "\nA comma separated list of the parameter names constructed.\n"
  overload: Microsoft.Health.Utility.SqlHelper.AddListOfParameters*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Utility.SqlHelper.AddListOfParameters``1(System.Collections.Generic.IEnumerable{``0},System.String)
  commentId: M:Microsoft.Health.Utility.SqlHelper.AddListOfParameters``1(System.Collections.Generic.IEnumerable{``0},System.String)
  id: AddListOfParameters``1(System.Collections.Generic.IEnumerable{``0},System.String)
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: AddListOfParameters<T>(IEnumerable<T>, String)
  nameWithType: SqlHelper.AddListOfParameters<T>(IEnumerable<T>, String)
  fullName: Microsoft.Health.Utility.SqlHelper.AddListOfParameters<T>(System.Collections.Generic.IEnumerable<T>, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: AddListOfParameters
    path: utilities/SqlHelper.cs
    startLine: 463
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nAdds a list of objects as parameters to the command.\n"
  example: []
  syntax:
    content: public string AddListOfParameters<T>(IEnumerable<T> list, string paramBaseName)
    content.vb: Public Function AddListOfParameters(Of T)(list As IEnumerable(Of T), paramBaseName As String) As String
    parameters:
    - id: list
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\nThe list of objects that are the values of the parameters\nto add.\n"
    - id: paramBaseName
      type: System.String
      description: "\nThe base name to use as the parameter name. Each parameter\ngets a numeral value added to the end of the name.\n"
    typeParameters:
    - id: T
    return:
      type: System.String
      description: "\nA comma separated list of the parameter names constructed.\n"
  overload: Microsoft.Health.Utility.SqlHelper.AddListOfParameters*
  nameWithType.vb: SqlHelper.AddListOfParameters(Of T)(IEnumerable(Of T), String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.Utility.SqlHelper.AddListOfParameters(Of T)(System.Collections.Generic.IEnumerable(Of T), System.String)
  name.vb: AddListOfParameters(Of T)(IEnumerable(Of T), String)
- uid: Microsoft.Health.Utility.SqlHelper.AddListOfParameters``1(System.Collections.Generic.IList{``0},System.String,System.Int32,System.Int32)
  commentId: M:Microsoft.Health.Utility.SqlHelper.AddListOfParameters``1(System.Collections.Generic.IList{``0},System.String,System.Int32,System.Int32)
  id: AddListOfParameters``1(System.Collections.Generic.IList{``0},System.String,System.Int32,System.Int32)
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: AddListOfParameters<T>(IList<T>, String, Int32, Int32)
  nameWithType: SqlHelper.AddListOfParameters<T>(IList<T>, String, Int32, Int32)
  fullName: Microsoft.Health.Utility.SqlHelper.AddListOfParameters<T>(System.Collections.Generic.IList<T>, System.String, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: AddListOfParameters
    path: utilities/SqlHelper.cs
    startLine: 510
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nAdds a sub list of objects as parameters to the command based on start and end index.\n"
  example: []
  syntax:
    content: public string AddListOfParameters<T>(IList<T> list, string paramBaseName, int startIndex, int endIndex)
    content.vb: Public Function AddListOfParameters(Of T)(list As IList(Of T), paramBaseName As String, startIndex As Integer, endIndex As Integer) As String
    parameters:
    - id: list
      type: System.Collections.Generic.IList{{T}}
      description: "\nThe list of objects that are the values of the parameters\nto add.\n"
    - id: paramBaseName
      type: System.String
      description: "\nThe base name to use as the parameter name. Each parameter\ngets a numeral value added to the end of the name.\n"
    - id: startIndex
      type: System.Int32
      description: "\nStart index of the sub list.\n"
    - id: endIndex
      type: System.Int32
    typeParameters:
    - id: T
    return:
      type: System.String
      description: "\nA comma separated list of the parameter names constructed.\n"
  overload: Microsoft.Health.Utility.SqlHelper.AddListOfParameters*
  nameWithType.vb: SqlHelper.AddListOfParameters(Of T)(IList(Of T), String, Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.Utility.SqlHelper.AddListOfParameters(Of T)(System.Collections.Generic.IList(Of T), System.String, System.Int32, System.Int32)
  name.vb: AddListOfParameters(Of T)(IList(Of T), String, Int32, Int32)
- uid: Microsoft.Health.Utility.SqlHelper.AddListOfParameters(System.Collections.IEnumerable,System.String)
  commentId: M:Microsoft.Health.Utility.SqlHelper.AddListOfParameters(System.Collections.IEnumerable,System.String)
  id: AddListOfParameters(System.Collections.IEnumerable,System.String)
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: AddListOfParameters(IEnumerable, String)
  nameWithType: SqlHelper.AddListOfParameters(IEnumerable, String)
  fullName: Microsoft.Health.Utility.SqlHelper.AddListOfParameters(System.Collections.IEnumerable, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: AddListOfParameters
    path: utilities/SqlHelper.cs
    startLine: 551
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nAdds a list of objects as parameters to the command.\n"
  example: []
  syntax:
    content: public string AddListOfParameters(IEnumerable list, string paramBaseName)
    content.vb: Public Function AddListOfParameters(list As IEnumerable, paramBaseName As String) As String
    parameters:
    - id: list
      type: System.Collections.IEnumerable
      description: "\nThe list of objects that are the values of the parameters\nto add.\n"
    - id: paramBaseName
      type: System.String
      description: "\nThe base name to use as the parameter name. Each parameter\ngets a numeral value added to the end of the name.\n"
    return:
      type: System.String
      description: "\nA comma separated list of the parameter names constructed.\n"
  overload: Microsoft.Health.Utility.SqlHelper.AddListOfParameters*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Utility.SqlHelper.ExecuteReader
  commentId: M:Microsoft.Health.Utility.SqlHelper.ExecuteReader
  id: ExecuteReader
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: ExecuteReader()
  nameWithType: SqlHelper.ExecuteReader()
  fullName: Microsoft.Health.Utility.SqlHelper.ExecuteReader()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ExecuteReader
    path: utilities/SqlHelper.cs
    startLine: 585
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nStarts a query that will return rows\n"
  remarks: "\nThis method will use the fault-handling policy\nfrom the FaultHandlingPolicy property, if it is set\nand we're not in a transaction.\n\nIf we are in a transaction, no retries will occur.\n\nIt should be noted that reading the results from the\nreader is still an unreliable operation, and is not\ncovered by any fault-handling retry logic.\n"
  example: []
  syntax:
    content: public void ExecuteReader()
    content.vb: Public Sub ExecuteReader
  overload: Microsoft.Health.Utility.SqlHelper.ExecuteReader*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Utility.SqlHelper.ExecuteReader(System.Data.CommandBehavior)
  commentId: M:Microsoft.Health.Utility.SqlHelper.ExecuteReader(System.Data.CommandBehavior)
  id: ExecuteReader(System.Data.CommandBehavior)
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: ExecuteReader(CommandBehavior)
  nameWithType: SqlHelper.ExecuteReader(CommandBehavior)
  fullName: Microsoft.Health.Utility.SqlHelper.ExecuteReader(System.Data.CommandBehavior)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ExecuteReader
    path: utilities/SqlHelper.cs
    startLine: 629
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nStarts a query that will return rows\n"
  remarks: "\nThis method will use the fault-handling policy\nfrom the FaultHandlingPolicy property, if it is set\nand we're not in a transaction.\n\nIf we are in a transaction, no retries will occur.\n\nIt should be noted that reading the results from the\nreader is still an unreliable operation, and is not\ncovered by any fault-handling retry logic.\n"
  example: []
  syntax:
    content: public void ExecuteReader(CommandBehavior commandBehavior)
    content.vb: Public Sub ExecuteReader(commandBehavior As CommandBehavior)
    parameters:
    - id: commandBehavior
      type: System.Data.CommandBehavior
  overload: Microsoft.Health.Utility.SqlHelper.ExecuteReader*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Utility.SqlHelper.ExecuteNonQuery
  commentId: M:Microsoft.Health.Utility.SqlHelper.ExecuteNonQuery
  id: ExecuteNonQuery
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: ExecuteNonQuery()
  nameWithType: SqlHelper.ExecuteNonQuery()
  fullName: Microsoft.Health.Utility.SqlHelper.ExecuteNonQuery()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ExecuteNonQuery
    path: utilities/SqlHelper.cs
    startLine: 669
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nRuns non-select query like insert, etc.\n"
  remarks: "\nThis method will use the fault-handling policy\nfrom the FaultHandlingPolicy property, if it is set\nand we're not in a transaction.\n\nIf we are in a transaction, no retries will occur.\n"
  example: []
  syntax:
    content: public int ExecuteNonQuery()
    content.vb: Public Function ExecuteNonQuery As Integer
    return:
      type: System.Int32
  overload: Microsoft.Health.Utility.SqlHelper.ExecuteNonQuery*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Utility.SqlHelper.ExecuteScalar
  commentId: M:Microsoft.Health.Utility.SqlHelper.ExecuteScalar
  id: ExecuteScalar
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: ExecuteScalar()
  nameWithType: SqlHelper.ExecuteScalar()
  fullName: Microsoft.Health.Utility.SqlHelper.ExecuteScalar()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ExecuteScalar
    path: utilities/SqlHelper.cs
    startLine: 715
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nRuns scalar execute and returns an int\n"
  remarks: "\nThis method will use the fault-handling policy\nfrom the FaultHandlingPolicy property, if it is set\nand we're not in a transaction.\n\nIf we are in a transaction, no retries will occur.\n"
  example: []
  syntax:
    content: public object ExecuteScalar()
    content.vb: Public Function ExecuteScalar As Object
    return:
      type: System.Object
      description: The scalar integer value. -1 if invalid
  overload: Microsoft.Health.Utility.SqlHelper.ExecuteScalar*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Utility.SqlHelper.StartTransaction
  commentId: M:Microsoft.Health.Utility.SqlHelper.StartTransaction
  id: StartTransaction
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: StartTransaction()
  nameWithType: SqlHelper.StartTransaction()
  fullName: Microsoft.Health.Utility.SqlHelper.StartTransaction()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: StartTransaction
    path: utilities/SqlHelper.cs
    startLine: 758
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nStart a new transaction ... commits the current transaction\nif one is pending\n"
  remarks: "\nThis method will use the fault-handling policy\nfrom the FaultHandlingPolicy property, if it is set.\n"
  example: []
  syntax:
    content: public void StartTransaction()
    content.vb: Public Sub StartTransaction
  overload: Microsoft.Health.Utility.SqlHelper.StartTransaction*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Utility.SqlHelper.StartSavePoint(System.String)
  commentId: M:Microsoft.Health.Utility.SqlHelper.StartSavePoint(System.String)
  id: StartSavePoint(System.String)
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: StartSavePoint(String)
  nameWithType: SqlHelper.StartSavePoint(String)
  fullName: Microsoft.Health.Utility.SqlHelper.StartSavePoint(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: StartSavePoint
    path: utilities/SqlHelper.cs
    startLine: 788
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nStarts a new save point within a transaction.\n"
  remarks: "\nThe fault-handling retry logic is not used for this operation.\n"
  example: []
  syntax:
    content: public void StartSavePoint(string savePointName)
    content.vb: Public Sub StartSavePoint(savePointName As String)
    parameters:
    - id: savePointName
      type: System.String
      description: "\nThe name of the save point.\n"
  overload: Microsoft.Health.Utility.SqlHelper.StartSavePoint*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Utility.SqlHelper.IsInTransaction
  commentId: P:Microsoft.Health.Utility.SqlHelper.IsInTransaction
  id: IsInTransaction
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: IsInTransaction
  nameWithType: SqlHelper.IsInTransaction
  fullName: Microsoft.Health.Utility.SqlHelper.IsInTransaction
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IsInTransaction
    path: utilities/SqlHelper.cs
    startLine: 805
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nIs a transaction open on this guy\n"
  example: []
  syntax:
    content: public bool IsInTransaction { get; }
    content.vb: Public ReadOnly Property IsInTransaction As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: duh
  overload: Microsoft.Health.Utility.SqlHelper.IsInTransaction*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.Utility.SqlHelper.CommitTransaction
  commentId: M:Microsoft.Health.Utility.SqlHelper.CommitTransaction
  id: CommitTransaction
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: CommitTransaction()
  nameWithType: SqlHelper.CommitTransaction()
  fullName: Microsoft.Health.Utility.SqlHelper.CommitTransaction()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CommitTransaction
    path: utilities/SqlHelper.cs
    startLine: 816
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nTry to commit the transaction\n"
  remarks: "\nThe fault-handling retry logic is not used for this operation.\n"
  example: []
  syntax:
    content: public void CommitTransaction()
    content.vb: Public Sub CommitTransaction
  overload: Microsoft.Health.Utility.SqlHelper.CommitTransaction*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Utility.SqlHelper.RollbackTransaction
  commentId: M:Microsoft.Health.Utility.SqlHelper.RollbackTransaction
  id: RollbackTransaction
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: RollbackTransaction()
  nameWithType: SqlHelper.RollbackTransaction()
  fullName: Microsoft.Health.Utility.SqlHelper.RollbackTransaction()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: RollbackTransaction
    path: utilities/SqlHelper.cs
    startLine: 846
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nRollback, babe.... note we catch exceptions that occur here\nand return them out to the caller ... null return means all\nis well. Reason for this is that often we'll be called from\nwithin exception.\n"
  remarks: "\nThe fault-handling retry logic is not used for this operation.\n"
  example: []
  syntax:
    content: public Exception RollbackTransaction()
    content.vb: Public Function RollbackTransaction As Exception
    return:
      type: System.Exception
  overload: Microsoft.Health.Utility.SqlHelper.RollbackTransaction*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Utility.SqlHelper.RollbackSavePoint(System.String)
  commentId: M:Microsoft.Health.Utility.SqlHelper.RollbackSavePoint(System.String)
  id: RollbackSavePoint(System.String)
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: RollbackSavePoint(String)
  nameWithType: SqlHelper.RollbackSavePoint(String)
  fullName: Microsoft.Health.Utility.SqlHelper.RollbackSavePoint(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: RollbackSavePoint
    path: utilities/SqlHelper.cs
    startLine: 888
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: ''
  remarks: "\nThe fault-handling retry logic is not used for this operation.\n"
  example: []
  syntax:
    content: public void RollbackSavePoint(string savePointName)
    content.vb: Public Sub RollbackSavePoint(savePointName As String)
    parameters:
    - id: savePointName
      type: System.String
  overload: Microsoft.Health.Utility.SqlHelper.RollbackSavePoint*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Utility.SqlHelper.Update(System.String,System.Int32,System.String[],System.Object[],System.Boolean)
  commentId: M:Microsoft.Health.Utility.SqlHelper.Update(System.String,System.Int32,System.String[],System.Object[],System.Boolean)
  id: Update(System.String,System.Int32,System.String[],System.Object[],System.Boolean)
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: Update(String, Int32, String[], Object[], Boolean)
  nameWithType: SqlHelper.Update(String, Int32, String[], Object[], Boolean)
  fullName: Microsoft.Health.Utility.SqlHelper.Update(System.String, System.Int32, System.String[], System.Object[], System.Boolean)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Update
    path: utilities/SqlHelper.cs
    startLine: 926
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nUpdate helper --- probably not super-useful except in the \ncontext of upsert, but doesn't hurt to expose it. Same\nrequirements on the arrays as for Upsert\n"
  example: []
  syntax:
    content: public int Update(string tableName, int keyColumnCount, string[] columnNames, object[] columnValues, bool autoTimestamp)
    content.vb: Public Function Update(tableName As String, keyColumnCount As Integer, columnNames As String(), columnValues As Object(), autoTimestamp As Boolean) As Integer
    parameters:
    - id: tableName
      type: System.String
      description: ''
    - id: keyColumnCount
      type: System.Int32
      description: ''
    - id: columnNames
      type: System.String[]
      description: ''
    - id: columnValues
      type: System.Object[]
      description: ''
    - id: autoTimestamp
      type: System.Boolean
      description: ''
    return:
      type: System.Int32
      description: rows affected
  overload: Microsoft.Health.Utility.SqlHelper.Update*
  nameWithType.vb: SqlHelper.Update(String, Int32, String(), Object(), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.Utility.SqlHelper.Update(System.String, System.Int32, System.String(), System.Object(), System.Boolean)
  name.vb: Update(String, Int32, String(), Object(), Boolean)
- uid: Microsoft.Health.Utility.SqlHelper.GetNullableString(System.Int32)
  commentId: M:Microsoft.Health.Utility.SqlHelper.GetNullableString(System.Int32)
  id: GetNullableString(System.Int32)
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: GetNullableString(Int32)
  nameWithType: SqlHelper.GetNullableString(Int32)
  fullName: Microsoft.Health.Utility.SqlHelper.GetNullableString(System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetNullableString
    path: utilities/SqlHelper.cs
    startLine: 986
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nReads a string column; if null returns empty string\nrather than excepting\n"
  example: []
  syntax:
    content: public string GetNullableString(int readerIndex)
    content.vb: Public Function GetNullableString(readerIndex As Integer) As String
    parameters:
    - id: readerIndex
      type: System.Int32
      description: ''
    return:
      type: System.String
      description: ''
  overload: Microsoft.Health.Utility.SqlHelper.GetNullableString*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Utility.SqlHelper.GetNullableDateTime(System.String,System.DateTime)
  commentId: M:Microsoft.Health.Utility.SqlHelper.GetNullableDateTime(System.String,System.DateTime)
  id: GetNullableDateTime(System.String,System.DateTime)
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: GetNullableDateTime(String, DateTime)
  nameWithType: SqlHelper.GetNullableDateTime(String, DateTime)
  fullName: Microsoft.Health.Utility.SqlHelper.GetNullableDateTime(System.String, System.DateTime)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetNullableDateTime
    path: utilities/SqlHelper.cs
    startLine: 997
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nReads a datetime column. Return default value if null.\n"
  example: []
  syntax:
    content: public DateTime GetNullableDateTime(string colName, DateTime def)
    content.vb: Public Function GetNullableDateTime(colName As String, def As Date) As Date
    parameters:
    - id: colName
      type: System.String
      description: ''
    - id: def
      type: System.DateTime
      description: ''
    return:
      type: System.DateTime
      description: ''
  overload: Microsoft.Health.Utility.SqlHelper.GetNullableDateTime*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Utility.SqlHelper.GetUtcDateTime(System.Int32)
  commentId: M:Microsoft.Health.Utility.SqlHelper.GetUtcDateTime(System.Int32)
  id: GetUtcDateTime(System.Int32)
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: GetUtcDateTime(Int32)
  nameWithType: SqlHelper.GetUtcDateTime(Int32)
  fullName: Microsoft.Health.Utility.SqlHelper.GetUtcDateTime(System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetUtcDateTime
    path: utilities/SqlHelper.cs
    startLine: 1013
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nGets the UTC date time.\n"
  remarks: "\nDates from Sql Server are returned with a DateTimeKind of Unspecified.\nThe returned DateTime will have the same number of Ticks as the \noriginal DateTime but will be properly designated Utc.\n"
  example: []
  syntax:
    content: public DateTime GetUtcDateTime(int readerIndex)
    content.vb: Public Function GetUtcDateTime(readerIndex As Integer) As Date
    parameters:
    - id: readerIndex
      type: System.Int32
      description: Index of the reader.
    return:
      type: System.DateTime
      description: DateTime in Utc.
  overload: Microsoft.Health.Utility.SqlHelper.GetUtcDateTime*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Utility.SqlHelper.ReadNullableValue``1(System.Int32,``0)
  commentId: M:Microsoft.Health.Utility.SqlHelper.ReadNullableValue``1(System.Int32,``0)
  id: ReadNullableValue``1(System.Int32,``0)
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: ReadNullableValue<T>(Int32, T)
  nameWithType: SqlHelper.ReadNullableValue<T>(Int32, T)
  fullName: Microsoft.Health.Utility.SqlHelper.ReadNullableValue<T>(System.Int32, T)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ReadNullableValue
    path: utilities/SqlHelper.cs
    startLine: 1025
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nGets the value or default if the value is DB null.\n"
  example: []
  syntax:
    content: public T ReadNullableValue<T>(int readerIndex, T defaultValue = null)
    content.vb: Public Function ReadNullableValue(Of T)(readerIndex As Integer, defaultValue As T = Nothing) As T
    parameters:
    - id: readerIndex
      type: System.Int32
      description: Index of the reader.
    - id: defaultValue
      type: '{T}'
      description: The default value if the field is DB null.
    typeParameters:
    - id: T
      description: The value type
    return:
      type: '{T}'
      description: The database value or the default value.
  overload: Microsoft.Health.Utility.SqlHelper.ReadNullableValue*
  nameWithType.vb: SqlHelper.ReadNullableValue(Of T)(Int32, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.Utility.SqlHelper.ReadNullableValue(Of T)(System.Int32, T)
  name.vb: ReadNullableValue(Of T)(Int32, T)
- uid: Microsoft.Health.Utility.SqlHelper.GetXmlDocument(System.Int32)
  commentId: M:Microsoft.Health.Utility.SqlHelper.GetXmlDocument(System.Int32)
  id: GetXmlDocument(System.Int32)
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: GetXmlDocument(Int32)
  nameWithType: SqlHelper.GetXmlDocument(Int32)
  fullName: Microsoft.Health.Utility.SqlHelper.GetXmlDocument(System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetXmlDocument
    path: utilities/SqlHelper.cs
    startLine: 1037
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: 'return an xml document from an xml column '
  example: []
  syntax:
    content: public XmlDocument GetXmlDocument(int readerIndex)
    content.vb: Public Function GetXmlDocument(readerIndex As Integer) As XmlDocument
    parameters:
    - id: readerIndex
      type: System.Int32
      description: '0-based column index '
    return:
      type: System.Xml.XmlDocument
  overload: Microsoft.Health.Utility.SqlHelper.GetXmlDocument*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Utility.SqlHelper.Finalize
  commentId: M:Microsoft.Health.Utility.SqlHelper.Finalize
  id: Finalize
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: Finalize()
  nameWithType: SqlHelper.Finalize()
  fullName: Microsoft.Health.Utility.SqlHelper.Finalize()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Finalize
    path: utilities/SqlHelper.cs
    startLine: 1058
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nFinalize\n"
  example: []
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  overload: Microsoft.Health.Utility.SqlHelper.Finalize*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.Health.Utility.SqlHelper.Dispose
  commentId: M:Microsoft.Health.Utility.SqlHelper.Dispose
  id: Dispose
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: SqlHelper.Dispose()
  fullName: Microsoft.Health.Utility.SqlHelper.Dispose()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Dispose
    path: utilities/SqlHelper.cs
    startLine: 1066
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nExplicit cleanup call\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Microsoft.Health.Utility.SqlHelper.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Utility.SqlHelper.Close
  commentId: M:Microsoft.Health.Utility.SqlHelper.Close
  id: Close
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: Close()
  nameWithType: SqlHelper.Close()
  fullName: Microsoft.Health.Utility.SqlHelper.Close()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Close
    path: utilities/SqlHelper.cs
    startLine: 1075
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nAlias for Dispose()\n"
  example: []
  syntax:
    content: public void Close()
    content.vb: Public Sub Close
  overload: Microsoft.Health.Utility.SqlHelper.Close*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Utility.SqlHelper.Dispose(System.Boolean)
  commentId: M:Microsoft.Health.Utility.SqlHelper.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: SqlHelper.Dispose(Boolean)
  fullName: Microsoft.Health.Utility.SqlHelper.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Dispose
    path: utilities/SqlHelper.cs
    startLine: 1084
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nReal work for disposal\n"
  example: []
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: ''
  overload: Microsoft.Health.Utility.SqlHelper.Dispose*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.Health.Utility.SqlHelper.Connection
  commentId: P:Microsoft.Health.Utility.SqlHelper.Connection
  id: Connection
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: Connection
  nameWithType: SqlHelper.Connection
  fullName: Microsoft.Health.Utility.SqlHelper.Connection
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Connection
    path: utilities/SqlHelper.cs
    startLine: 1120
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nAccess to the connection object\n"
  example: []
  syntax:
    content: public SqlConnection Connection { get; }
    content.vb: Public ReadOnly Property Connection As SqlConnection
    parameters: []
    return:
      type: System.Data.SqlClient.SqlConnection
  overload: Microsoft.Health.Utility.SqlHelper.Connection*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.Utility.SqlHelper.Command
  commentId: P:Microsoft.Health.Utility.SqlHelper.Command
  id: Command
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: Command
  nameWithType: SqlHelper.Command
  fullName: Microsoft.Health.Utility.SqlHelper.Command
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Command
    path: utilities/SqlHelper.cs
    startLine: 1125
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nAccess to the command object\n"
  example: []
  syntax:
    content: public SqlCommand Command { get; }
    content.vb: Public ReadOnly Property Command As SqlCommand
    parameters: []
    return:
      type: System.Data.SqlClient.SqlCommand
  overload: Microsoft.Health.Utility.SqlHelper.Command*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.Utility.SqlHelper.Reader
  commentId: P:Microsoft.Health.Utility.SqlHelper.Reader
  id: Reader
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: Reader
  nameWithType: SqlHelper.Reader
  fullName: Microsoft.Health.Utility.SqlHelper.Reader
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Reader
    path: utilities/SqlHelper.cs
    startLine: 1130
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nAccess to the reader object\n"
  example: []
  syntax:
    content: public SqlDataReader Reader { get; }
    content.vb: Public ReadOnly Property Reader As SqlDataReader
    parameters: []
    return:
      type: System.Data.SqlClient.SqlDataReader
  overload: Microsoft.Health.Utility.SqlHelper.Reader*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.Utility.SqlHelper.TraceLog
  commentId: P:Microsoft.Health.Utility.SqlHelper.TraceLog
  id: TraceLog
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: TraceLog
  nameWithType: SqlHelper.TraceLog
  fullName: Microsoft.Health.Utility.SqlHelper.TraceLog
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: TraceLog
    path: utilities/SqlHelper.cs
    startLine: 1135
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nAccess to the trace logger for this helper\n"
  example: []
  syntax:
    content: public TraceLog TraceLog { get; }
    content.vb: Public ReadOnly Property TraceLog As TraceLog
    parameters: []
    return:
      type: Microsoft.Health.Utility.Diagnostics.TraceLog
  overload: Microsoft.Health.Utility.SqlHelper.TraceLog*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.Utility.SqlHelper.Transaction
  commentId: P:Microsoft.Health.Utility.SqlHelper.Transaction
  id: Transaction
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: Transaction
  nameWithType: SqlHelper.Transaction
  fullName: Microsoft.Health.Utility.SqlHelper.Transaction
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Transaction
    path: utilities/SqlHelper.cs
    startLine: 1140
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nAccess to the transaction object.\n"
  example: []
  syntax:
    content: public SqlTransaction Transaction { get; }
    content.vb: Public ReadOnly Property Transaction As SqlTransaction
    parameters: []
    return:
      type: System.Data.SqlClient.SqlTransaction
  overload: Microsoft.Health.Utility.SqlHelper.Transaction*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.Utility.SqlHelper.ConnectionKey
  commentId: P:Microsoft.Health.Utility.SqlHelper.ConnectionKey
  id: ConnectionKey
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: ConnectionKey
  nameWithType: SqlHelper.ConnectionKey
  fullName: Microsoft.Health.Utility.SqlHelper.ConnectionKey
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ConnectionKey
    path: utilities/SqlHelper.cs
    startLine: 1145
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\n\n"
  example: []
  syntax:
    content: public string ConnectionKey { get; }
    content.vb: Public ReadOnly Property ConnectionKey As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Health.Utility.SqlHelper.ConnectionKey*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.Utility.SqlHelper.FaultHandlingPolicy
  commentId: P:Microsoft.Health.Utility.SqlHelper.FaultHandlingPolicy
  id: FaultHandlingPolicy
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: FaultHandlingPolicy
  nameWithType: SqlHelper.FaultHandlingPolicy
  fullName: Microsoft.Health.Utility.SqlHelper.FaultHandlingPolicy
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: FaultHandlingPolicy
    path: utilities/SqlHelper.cs
    startLine: 1150
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nPolicy used for handling transient errors.\n"
  example: []
  syntax:
    content: public TransientFaultHandlingPolicy FaultHandlingPolicy { get; }
    content.vb: Public ReadOnly Property FaultHandlingPolicy As TransientFaultHandlingPolicy
    parameters: []
    return:
      type: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandlingPolicy
  overload: Microsoft.Health.Utility.SqlHelper.FaultHandlingPolicy*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.Utility.SqlHelper.SqlDateTimeMinValue
  commentId: F:Microsoft.Health.Utility.SqlHelper.SqlDateTimeMinValue
  id: SqlDateTimeMinValue
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: SqlDateTimeMinValue
  nameWithType: SqlHelper.SqlDateTimeMinValue
  fullName: Microsoft.Health.Utility.SqlHelper.SqlDateTimeMinValue
  type: Field
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SqlDateTimeMinValue
    path: utilities/SqlHelper.cs
    startLine: 1172
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nThe minimum value for a timestamp supported by SQL.\n"
  example: []
  syntax:
    content: public static readonly DateTime SqlDateTimeMinValue
    content.vb: Public Shared ReadOnly SqlDateTimeMinValue As Date
    return:
      type: System.DateTime
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Health.Utility.SqlHelper.SqlDateTimeMaxValue
  commentId: F:Microsoft.Health.Utility.SqlHelper.SqlDateTimeMaxValue
  id: SqlDateTimeMaxValue
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: SqlDateTimeMaxValue
  nameWithType: SqlHelper.SqlDateTimeMaxValue
  fullName: Microsoft.Health.Utility.SqlHelper.SqlDateTimeMaxValue
  type: Field
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SqlDateTimeMaxValue
    path: utilities/SqlHelper.cs
    startLine: 1177
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nThe maximum value for a timestamp supported by SQL.\n"
  example: []
  syntax:
    content: public static readonly DateTime SqlDateTimeMaxValue
    content.vb: Public Shared ReadOnly SqlDateTimeMaxValue As Date
    return:
      type: System.DateTime
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Health.Utility.SqlHelper.GetValidDateTimeForSql(System.DateTime)
  commentId: M:Microsoft.Health.Utility.SqlHelper.GetValidDateTimeForSql(System.DateTime)
  id: GetValidDateTimeForSql(System.DateTime)
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: GetValidDateTimeForSql(DateTime)
  nameWithType: SqlHelper.GetValidDateTimeForSql(DateTime)
  fullName: Microsoft.Health.Utility.SqlHelper.GetValidDateTimeForSql(System.DateTime)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetValidDateTimeForSql
    path: utilities/SqlHelper.cs
    startLine: 1184
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\n\n"
  example: []
  syntax:
    content: public static DateTime GetValidDateTimeForSql(DateTime dateTime)
    content.vb: Public Shared Function GetValidDateTimeForSql(dateTime As Date) As Date
    parameters:
    - id: dateTime
      type: System.DateTime
      description: ''
    return:
      type: System.DateTime
      description: ''
  overload: Microsoft.Health.Utility.SqlHelper.GetValidDateTimeForSql*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.SqlHelper.GetValidDateTime2ForSql(System.DateTime)
  commentId: M:Microsoft.Health.Utility.SqlHelper.GetValidDateTime2ForSql(System.DateTime)
  id: GetValidDateTime2ForSql(System.DateTime)
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: GetValidDateTime2ForSql(DateTime)
  nameWithType: SqlHelper.GetValidDateTime2ForSql(DateTime)
  fullName: Microsoft.Health.Utility.SqlHelper.GetValidDateTime2ForSql(System.DateTime)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetValidDateTime2ForSql
    path: utilities/SqlHelper.cs
    startLine: 1198
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nReturns DateTime value valid for Sql datetime2\n"
  example: []
  syntax:
    content: public static DateTime GetValidDateTime2ForSql(DateTime dateTime)
    content.vb: Public Shared Function GetValidDateTime2ForSql(dateTime As Date) As Date
    parameters:
    - id: dateTime
      type: System.DateTime
      description: ''
    return:
      type: System.DateTime
      description: ''
  overload: Microsoft.Health.Utility.SqlHelper.GetValidDateTime2ForSql*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.SqlHelper.ToString
  commentId: M:Microsoft.Health.Utility.SqlHelper.ToString
  id: ToString
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: SqlHelper.ToString()
  fullName: Microsoft.Health.Utility.SqlHelper.ToString()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ToString
    path: utilities/SqlHelper.cs
    startLine: 1212
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nCreate a string representation of this class.  This string\nis used for debug tracing.  It formats the connection string,\ncommand string and any parameters currently assigned.\n"
  example: []
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
  overridden: System.Object.ToString
  overload: Microsoft.Health.Utility.SqlHelper.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Health.Utility.SqlHelper.CanonicalizeString(System.String)
  commentId: M:Microsoft.Health.Utility.SqlHelper.CanonicalizeString(System.String)
  id: CanonicalizeString(System.String)
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: CanonicalizeString(String)
  nameWithType: SqlHelper.CanonicalizeString(String)
  fullName: Microsoft.Health.Utility.SqlHelper.CanonicalizeString(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CanonicalizeString
    path: utilities/SqlHelper.cs
    startLine: 1381
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nCanonicalize string for insertion to the localized_string table.\nApostrophes are doubled\n"
  example: []
  syntax:
    content: public static string CanonicalizeString(string original)
    content.vb: Public Shared Function CanonicalizeString(original As String) As String
    parameters:
    - id: original
      type: System.String
      description: ''
    return:
      type: System.String
      description: The canonicalized string
  overload: Microsoft.Health.Utility.SqlHelper.CanonicalizeString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.SqlHelper.EscapeLikeClause(System.String)
  commentId: M:Microsoft.Health.Utility.SqlHelper.EscapeLikeClause(System.String)
  id: EscapeLikeClause(System.String)
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: EscapeLikeClause(String)
  nameWithType: SqlHelper.EscapeLikeClause(String)
  fullName: Microsoft.Health.Utility.SqlHelper.EscapeLikeClause(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: EscapeLikeClause
    path: utilities/SqlHelper.cs
    startLine: 1402
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nEscapes strings used in TSQL \"Like\" clauses.  The characters\n\"[\",\"_\", and \"%\" are all escaped to be treated as string \nliterals.\n"
  example: []
  syntax:
    content: public static string EscapeLikeClause(string original)
    content.vb: Public Shared Function EscapeLikeClause(original As String) As String
    parameters:
    - id: original
      type: System.String
      description: ''
    return:
      type: System.String
      description: The escaped string
  overload: Microsoft.Health.Utility.SqlHelper.EscapeLikeClause*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.SqlHelper.IsPrimaryKeyViolation(System.Data.SqlClient.SqlException)
  commentId: M:Microsoft.Health.Utility.SqlHelper.IsPrimaryKeyViolation(System.Data.SqlClient.SqlException)
  id: IsPrimaryKeyViolation(System.Data.SqlClient.SqlException)
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: IsPrimaryKeyViolation(SqlException)
  nameWithType: SqlHelper.IsPrimaryKeyViolation(SqlException)
  fullName: Microsoft.Health.Utility.SqlHelper.IsPrimaryKeyViolation(System.Data.SqlClient.SqlException)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IsPrimaryKeyViolation
    path: utilities/SqlHelper.cs
    startLine: 1429
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: ''
  example: []
  syntax:
    content: public static bool IsPrimaryKeyViolation(SqlException ex)
    content.vb: Public Shared Function IsPrimaryKeyViolation(ex As SqlException) As Boolean
    parameters:
    - id: ex
      type: System.Data.SqlClient.SqlException
    return:
      type: System.Boolean
  overload: Microsoft.Health.Utility.SqlHelper.IsPrimaryKeyViolation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.SqlHelper.IsUniqueIndexViolation(System.Data.SqlClient.SqlException)
  commentId: M:Microsoft.Health.Utility.SqlHelper.IsUniqueIndexViolation(System.Data.SqlClient.SqlException)
  id: IsUniqueIndexViolation(System.Data.SqlClient.SqlException)
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: IsUniqueIndexViolation(SqlException)
  nameWithType: SqlHelper.IsUniqueIndexViolation(SqlException)
  fullName: Microsoft.Health.Utility.SqlHelper.IsUniqueIndexViolation(System.Data.SqlClient.SqlException)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IsUniqueIndexViolation
    path: utilities/SqlHelper.cs
    startLine: 1436
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: ''
  example: []
  syntax:
    content: public static bool IsUniqueIndexViolation(SqlException ex)
    content.vb: Public Shared Function IsUniqueIndexViolation(ex As SqlException) As Boolean
    parameters:
    - id: ex
      type: System.Data.SqlClient.SqlException
    return:
      type: System.Boolean
  overload: Microsoft.Health.Utility.SqlHelper.IsUniqueIndexViolation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.SqlHelper.IsForeignKeyViolation(System.Data.SqlClient.SqlException)
  commentId: M:Microsoft.Health.Utility.SqlHelper.IsForeignKeyViolation(System.Data.SqlClient.SqlException)
  id: IsForeignKeyViolation(System.Data.SqlClient.SqlException)
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: IsForeignKeyViolation(SqlException)
  nameWithType: SqlHelper.IsForeignKeyViolation(SqlException)
  fullName: Microsoft.Health.Utility.SqlHelper.IsForeignKeyViolation(System.Data.SqlClient.SqlException)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IsForeignKeyViolation
    path: utilities/SqlHelper.cs
    startLine: 1442
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: ''
  example: []
  syntax:
    content: public static bool IsForeignKeyViolation(SqlException ex)
    content.vb: Public Shared Function IsForeignKeyViolation(ex As SqlException) As Boolean
    parameters:
    - id: ex
      type: System.Data.SqlClient.SqlException
    return:
      type: System.Boolean
  overload: Microsoft.Health.Utility.SqlHelper.IsForeignKeyViolation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.SqlHelper.IsDuplicateRowInsertionViolation(System.Data.SqlClient.SqlException)
  commentId: M:Microsoft.Health.Utility.SqlHelper.IsDuplicateRowInsertionViolation(System.Data.SqlClient.SqlException)
  id: IsDuplicateRowInsertionViolation(System.Data.SqlClient.SqlException)
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: IsDuplicateRowInsertionViolation(SqlException)
  nameWithType: SqlHelper.IsDuplicateRowInsertionViolation(SqlException)
  fullName: Microsoft.Health.Utility.SqlHelper.IsDuplicateRowInsertionViolation(System.Data.SqlClient.SqlException)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IsDuplicateRowInsertionViolation
    path: utilities/SqlHelper.cs
    startLine: 1448
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: ''
  example: []
  syntax:
    content: public static bool IsDuplicateRowInsertionViolation(SqlException ex)
    content.vb: Public Shared Function IsDuplicateRowInsertionViolation(ex As SqlException) As Boolean
    parameters:
    - id: ex
      type: System.Data.SqlClient.SqlException
    return:
      type: System.Boolean
  overload: Microsoft.Health.Utility.SqlHelper.IsDuplicateRowInsertionViolation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.SqlHelper.IsUserDefinedError(System.Data.SqlClient.SqlException)
  commentId: M:Microsoft.Health.Utility.SqlHelper.IsUserDefinedError(System.Data.SqlClient.SqlException)
  id: IsUserDefinedError(System.Data.SqlClient.SqlException)
  parent: Microsoft.Health.Utility.SqlHelper
  langs:
  - csharp
  - vb
  name: IsUserDefinedError(SqlException)
  nameWithType: SqlHelper.IsUserDefinedError(SqlException)
  fullName: Microsoft.Health.Utility.SqlHelper.IsUserDefinedError(System.Data.SqlClient.SqlException)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/SqlHelper.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IsUserDefinedError
    path: utilities/SqlHelper.cs
    startLine: 1454
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: ''
  example: []
  syntax:
    content: public static bool IsUserDefinedError(SqlException ex)
    content.vb: Public Shared Function IsUserDefinedError(ex As SqlException) As Boolean
    parameters:
    - id: ex
      type: System.Data.SqlClient.SqlException
    return:
      type: System.Boolean
  overload: Microsoft.Health.Utility.SqlHelper.IsUserDefinedError*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  name: SetProperty(String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object())
  name.vb: SetProperty(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  name: InvokeMethod(String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object())
  name.vb: InvokeMethod(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  parent: Microsoft.Health.Utility.InvariantString
  definition: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  name: ToStringInvariant()
  nameWithType: InvariantString.ToStringInvariant()
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant()
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.SqlHelper.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  parent: Microsoft.Health.Utility.TypeHelper
  definition: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  name: ValueOrDbNull<SqlHelper>()
  nameWithType: TypeHelper.ValueOrDbNull<SqlHelper>()
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.Utility.SqlHelper>()
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of SqlHelper)()
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.Utility.SqlHelper)()
  name.vb: ValueOrDbNull(Of SqlHelper)()
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull<SqlHelper>
    nameWithType: TypeHelper.ValueOrDbNull<SqlHelper>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.Utility.SqlHelper>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull(Of SqlHelper)
    nameWithType: TypeHelper.ValueOrDbNull(Of SqlHelper)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.Utility.SqlHelper)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  parent: Microsoft.Health.Utility.WCXmlHelper
  definition: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  name: ToXml()
  nameWithType: WCXmlHelper.ToXml()
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml()
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  isExternal: true
  name: SetProperty(Object, String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object())
  name.vb: SetProperty(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions
  commentId: T:Microsoft.Health.Utility.IDispatchExtensions
  parent: Microsoft.Health.Utility
  isExternal: false
  name: IDispatchExtensions
  nameWithType: IDispatchExtensions
  fullName: Microsoft.Health.Utility.IDispatchExtensions
- uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  isExternal: true
  name: InvokeMethod(Object, String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object())
  name.vb: InvokeMethod(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  isExternal: true
  name: ToStringInvariant(Object)
  nameWithType: InvariantString.ToStringInvariant(Object)
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString
  commentId: T:Microsoft.Health.Utility.InvariantString
  parent: Microsoft.Health.Utility
  isExternal: false
  name: InvariantString
  nameWithType: InvariantString
  fullName: Microsoft.Health.Utility.InvariantString
- uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  isExternal: false
  name: ValueOrDbNull<T>(T)
  nameWithType: TypeHelper.ValueOrDbNull<T>(T)
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>(T)
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of T)(T)
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)(T)
  name.vb: ValueOrDbNull(Of T)(T)
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull<T>
    nameWithType: TypeHelper.ValueOrDbNull<T>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull(Of T)
    nameWithType: TypeHelper.ValueOrDbNull(Of T)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.TypeHelper
  commentId: T:Microsoft.Health.Utility.TypeHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: TypeHelper
  nameWithType: TypeHelper
  fullName: Microsoft.Health.Utility.TypeHelper
- uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  isExternal: true
  name: ToXml(Object)
  nameWithType: WCXmlHelper.ToXml(Object)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.WCXmlHelper
  commentId: T:Microsoft.Health.Utility.WCXmlHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: WCXmlHelper
  nameWithType: WCXmlHelper
  fullName: Microsoft.Health.Utility.WCXmlHelper
- uid: Microsoft.Health.Utility.SqlHelper.#ctor*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.#ctor
  isExternal: false
  name: SqlHelper
  nameWithType: SqlHelper.SqlHelper
  fullName: Microsoft.Health.Utility.SqlHelper.SqlHelper
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Health.Utility.Diagnostics.TraceLog
  commentId: T:Microsoft.Health.Utility.Diagnostics.TraceLog
  parent: Microsoft.Health.Utility.Diagnostics
  isExternal: false
  name: TraceLog
  nameWithType: TraceLog
  fullName: Microsoft.Health.Utility.Diagnostics.TraceLog
- uid: Microsoft.Health.Utility.Diagnostics
  commentId: N:Microsoft.Health.Utility.Diagnostics
  isExternal: false
  name: Microsoft.Health.Utility.Diagnostics
  nameWithType: Microsoft.Health.Utility.Diagnostics
  fullName: Microsoft.Health.Utility.Diagnostics
- uid: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandlingPolicy
  commentId: T:Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandlingPolicy
  parent: Microsoft.Health.Utility.TransientFaultHandling
  isExternal: false
  name: TransientFaultHandlingPolicy
  nameWithType: TransientFaultHandlingPolicy
  fullName: Microsoft.Health.Utility.TransientFaultHandling.TransientFaultHandlingPolicy
- uid: Microsoft.Health.Utility.TransientFaultHandling
  commentId: N:Microsoft.Health.Utility.TransientFaultHandling
  isExternal: false
  name: Microsoft.Health.Utility.TransientFaultHandling
  nameWithType: Microsoft.Health.Utility.TransientFaultHandling
  fullName: Microsoft.Health.Utility.TransientFaultHandling
- uid: Microsoft.Health.Utility.Configurations.DatabaseConnectionInfo
  commentId: T:Microsoft.Health.Utility.Configurations.DatabaseConnectionInfo
  parent: Microsoft.Health.Utility.Configurations
  isExternal: false
  name: DatabaseConnectionInfo
  nameWithType: DatabaseConnectionInfo
  fullName: Microsoft.Health.Utility.Configurations.DatabaseConnectionInfo
- uid: Microsoft.Health.Utility.Configurations
  commentId: N:Microsoft.Health.Utility.Configurations
  isExternal: false
  name: Microsoft.Health.Utility.Configurations
  nameWithType: Microsoft.Health.Utility.Configurations
  fullName: Microsoft.Health.Utility.Configurations
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Health.Utility.SqlHelper.Reset*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.Reset
  isExternal: false
  name: Reset
  nameWithType: SqlHelper.Reset
  fullName: Microsoft.Health.Utility.SqlHelper.Reset
- uid: Microsoft.Health.Utility.SqlHelper.ResetCommand*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.ResetCommand
  isExternal: false
  name: ResetCommand
  nameWithType: SqlHelper.ResetCommand
  fullName: Microsoft.Health.Utility.SqlHelper.ResetCommand
- uid: Microsoft.Health.Utility.SqlHelper.ResetReader*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.ResetReader
  isExternal: false
  name: ResetReader
  nameWithType: SqlHelper.ResetReader
  fullName: Microsoft.Health.Utility.SqlHelper.ResetReader
- uid: Microsoft.Health.Utility.SqlHelper.OpenConnection*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.OpenConnection
  isExternal: false
  name: OpenConnection
  nameWithType: SqlHelper.OpenConnection
  fullName: Microsoft.Health.Utility.SqlHelper.OpenConnection
- uid: Microsoft.Health.Utility.SqlHelper.AddParameter*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.AddParameter
  isExternal: false
  name: AddParameter
  nameWithType: SqlHelper.AddParameter
  fullName: Microsoft.Health.Utility.SqlHelper.AddParameter
- uid: System.Data.SqlDbType
  commentId: T:System.Data.SqlDbType
  parent: System.Data
  isExternal: true
  name: SqlDbType
  nameWithType: SqlDbType
  fullName: System.Data.SqlDbType
- uid: System.Data.SqlClient.SqlParameter
  commentId: T:System.Data.SqlClient.SqlParameter
  parent: System.Data.SqlClient
  isExternal: true
  name: SqlParameter
  nameWithType: SqlParameter
  fullName: System.Data.SqlClient.SqlParameter
- uid: System.Data
  commentId: N:System.Data
  isExternal: false
  name: System.Data
  nameWithType: System.Data
  fullName: System.Data
- uid: System.Data.SqlClient
  commentId: N:System.Data.SqlClient
  isExternal: false
  name: System.Data.SqlClient
  nameWithType: System.Data.SqlClient
  fullName: System.Data.SqlClient
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Health.Utility.SqlHelper.AddListOfParameters*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.AddListOfParameters
  isExternal: false
  name: AddListOfParameters
  nameWithType: SqlHelper.AddListOfParameters
  fullName: Microsoft.Health.Utility.SqlHelper.AddListOfParameters
- uid: System.Collections.IList
  commentId: T:System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IList{{T}}
  commentId: T:System.Collections.Generic.IList{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: Microsoft.Health.Utility.SqlHelper.ExecuteReader*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.ExecuteReader
  isExternal: false
  name: ExecuteReader
  nameWithType: SqlHelper.ExecuteReader
  fullName: Microsoft.Health.Utility.SqlHelper.ExecuteReader
- uid: System.Data.CommandBehavior
  commentId: T:System.Data.CommandBehavior
  parent: System.Data
  isExternal: true
  name: CommandBehavior
  nameWithType: CommandBehavior
  fullName: System.Data.CommandBehavior
- uid: Microsoft.Health.Utility.SqlHelper.ExecuteNonQuery*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.ExecuteNonQuery
  isExternal: false
  name: ExecuteNonQuery
  nameWithType: SqlHelper.ExecuteNonQuery
  fullName: Microsoft.Health.Utility.SqlHelper.ExecuteNonQuery
- uid: Microsoft.Health.Utility.SqlHelper.ExecuteScalar*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.ExecuteScalar
  isExternal: false
  name: ExecuteScalar
  nameWithType: SqlHelper.ExecuteScalar
  fullName: Microsoft.Health.Utility.SqlHelper.ExecuteScalar
- uid: Microsoft.Health.Utility.SqlHelper.StartTransaction*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.StartTransaction
  isExternal: false
  name: StartTransaction
  nameWithType: SqlHelper.StartTransaction
  fullName: Microsoft.Health.Utility.SqlHelper.StartTransaction
- uid: Microsoft.Health.Utility.SqlHelper.StartSavePoint*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.StartSavePoint
  isExternal: false
  name: StartSavePoint
  nameWithType: SqlHelper.StartSavePoint
  fullName: Microsoft.Health.Utility.SqlHelper.StartSavePoint
- uid: Microsoft.Health.Utility.SqlHelper.IsInTransaction*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.IsInTransaction
  isExternal: false
  name: IsInTransaction
  nameWithType: SqlHelper.IsInTransaction
  fullName: Microsoft.Health.Utility.SqlHelper.IsInTransaction
- uid: Microsoft.Health.Utility.SqlHelper.CommitTransaction*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.CommitTransaction
  isExternal: false
  name: CommitTransaction
  nameWithType: SqlHelper.CommitTransaction
  fullName: Microsoft.Health.Utility.SqlHelper.CommitTransaction
- uid: Microsoft.Health.Utility.SqlHelper.RollbackTransaction*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.RollbackTransaction
  isExternal: false
  name: RollbackTransaction
  nameWithType: SqlHelper.RollbackTransaction
  fullName: Microsoft.Health.Utility.SqlHelper.RollbackTransaction
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: Microsoft.Health.Utility.SqlHelper.RollbackSavePoint*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.RollbackSavePoint
  isExternal: false
  name: RollbackSavePoint
  nameWithType: SqlHelper.RollbackSavePoint
  fullName: Microsoft.Health.Utility.SqlHelper.RollbackSavePoint
- uid: Microsoft.Health.Utility.SqlHelper.Update*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.Update
  isExternal: false
  name: Update
  nameWithType: SqlHelper.Update
  fullName: Microsoft.Health.Utility.SqlHelper.Update
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Object[]
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.Health.Utility.SqlHelper.GetNullableString*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.GetNullableString
  isExternal: false
  name: GetNullableString
  nameWithType: SqlHelper.GetNullableString
  fullName: Microsoft.Health.Utility.SqlHelper.GetNullableString
- uid: Microsoft.Health.Utility.SqlHelper.GetNullableDateTime*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.GetNullableDateTime
  isExternal: false
  name: GetNullableDateTime
  nameWithType: SqlHelper.GetNullableDateTime
  fullName: Microsoft.Health.Utility.SqlHelper.GetNullableDateTime
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: Microsoft.Health.Utility.SqlHelper.GetUtcDateTime*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.GetUtcDateTime
  isExternal: false
  name: GetUtcDateTime
  nameWithType: SqlHelper.GetUtcDateTime
  fullName: Microsoft.Health.Utility.SqlHelper.GetUtcDateTime
- uid: Microsoft.Health.Utility.SqlHelper.ReadNullableValue*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.ReadNullableValue
  isExternal: false
  name: ReadNullableValue
  nameWithType: SqlHelper.ReadNullableValue
  fullName: Microsoft.Health.Utility.SqlHelper.ReadNullableValue
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: Microsoft.Health.Utility.SqlHelper.GetXmlDocument*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.GetXmlDocument
  isExternal: false
  name: GetXmlDocument
  nameWithType: SqlHelper.GetXmlDocument
  fullName: Microsoft.Health.Utility.SqlHelper.GetXmlDocument
- uid: System.Xml.XmlDocument
  commentId: T:System.Xml.XmlDocument
  parent: System.Xml
  isExternal: true
  name: XmlDocument
  nameWithType: XmlDocument
  fullName: System.Xml.XmlDocument
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: false
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: Microsoft.Health.Utility.SqlHelper.Finalize*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.Finalize
  isExternal: false
  name: Finalize
  nameWithType: SqlHelper.Finalize
  fullName: Microsoft.Health.Utility.SqlHelper.Finalize
- uid: Microsoft.Health.Utility.SqlHelper.Dispose*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.Dispose
  isExternal: false
  name: Dispose
  nameWithType: SqlHelper.Dispose
  fullName: Microsoft.Health.Utility.SqlHelper.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.SqlHelper.Close*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.Close
  isExternal: false
  name: Close
  nameWithType: SqlHelper.Close
  fullName: Microsoft.Health.Utility.SqlHelper.Close
- uid: Microsoft.Health.Utility.SqlHelper.Connection*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.Connection
  isExternal: false
  name: Connection
  nameWithType: SqlHelper.Connection
  fullName: Microsoft.Health.Utility.SqlHelper.Connection
- uid: System.Data.SqlClient.SqlConnection
  commentId: T:System.Data.SqlClient.SqlConnection
  parent: System.Data.SqlClient
  isExternal: true
  name: SqlConnection
  nameWithType: SqlConnection
  fullName: System.Data.SqlClient.SqlConnection
- uid: Microsoft.Health.Utility.SqlHelper.Command*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.Command
  isExternal: false
  name: Command
  nameWithType: SqlHelper.Command
  fullName: Microsoft.Health.Utility.SqlHelper.Command
- uid: System.Data.SqlClient.SqlCommand
  commentId: T:System.Data.SqlClient.SqlCommand
  parent: System.Data.SqlClient
  isExternal: true
  name: SqlCommand
  nameWithType: SqlCommand
  fullName: System.Data.SqlClient.SqlCommand
- uid: Microsoft.Health.Utility.SqlHelper.Reader*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.Reader
  isExternal: false
  name: Reader
  nameWithType: SqlHelper.Reader
  fullName: Microsoft.Health.Utility.SqlHelper.Reader
- uid: System.Data.SqlClient.SqlDataReader
  commentId: T:System.Data.SqlClient.SqlDataReader
  parent: System.Data.SqlClient
  isExternal: true
  name: SqlDataReader
  nameWithType: SqlDataReader
  fullName: System.Data.SqlClient.SqlDataReader
- uid: Microsoft.Health.Utility.SqlHelper.TraceLog*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.TraceLog
  isExternal: false
  name: TraceLog
  nameWithType: SqlHelper.TraceLog
  fullName: Microsoft.Health.Utility.SqlHelper.TraceLog
- uid: Microsoft.Health.Utility.SqlHelper.Transaction*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.Transaction
  isExternal: false
  name: Transaction
  nameWithType: SqlHelper.Transaction
  fullName: Microsoft.Health.Utility.SqlHelper.Transaction
- uid: System.Data.SqlClient.SqlTransaction
  commentId: T:System.Data.SqlClient.SqlTransaction
  parent: System.Data.SqlClient
  isExternal: true
  name: SqlTransaction
  nameWithType: SqlTransaction
  fullName: System.Data.SqlClient.SqlTransaction
- uid: Microsoft.Health.Utility.SqlHelper.ConnectionKey*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.ConnectionKey
  isExternal: false
  name: ConnectionKey
  nameWithType: SqlHelper.ConnectionKey
  fullName: Microsoft.Health.Utility.SqlHelper.ConnectionKey
- uid: Microsoft.Health.Utility.SqlHelper.FaultHandlingPolicy*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.FaultHandlingPolicy
  isExternal: false
  name: FaultHandlingPolicy
  nameWithType: SqlHelper.FaultHandlingPolicy
  fullName: Microsoft.Health.Utility.SqlHelper.FaultHandlingPolicy
- uid: Microsoft.Health.Utility.SqlHelper.GetValidDateTimeForSql*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.GetValidDateTimeForSql
  isExternal: false
  name: GetValidDateTimeForSql
  nameWithType: SqlHelper.GetValidDateTimeForSql
  fullName: Microsoft.Health.Utility.SqlHelper.GetValidDateTimeForSql
- uid: Microsoft.Health.Utility.SqlHelper.GetValidDateTime2ForSql*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.GetValidDateTime2ForSql
  isExternal: false
  name: GetValidDateTime2ForSql
  nameWithType: SqlHelper.GetValidDateTime2ForSql
  fullName: Microsoft.Health.Utility.SqlHelper.GetValidDateTime2ForSql
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.SqlHelper.ToString*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.ToString
  isExternal: false
  name: ToString
  nameWithType: SqlHelper.ToString
  fullName: Microsoft.Health.Utility.SqlHelper.ToString
- uid: Microsoft.Health.Utility.SqlHelper.CanonicalizeString*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.CanonicalizeString
  isExternal: false
  name: CanonicalizeString
  nameWithType: SqlHelper.CanonicalizeString
  fullName: Microsoft.Health.Utility.SqlHelper.CanonicalizeString
- uid: Microsoft.Health.Utility.SqlHelper.EscapeLikeClause*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.EscapeLikeClause
  isExternal: false
  name: EscapeLikeClause
  nameWithType: SqlHelper.EscapeLikeClause
  fullName: Microsoft.Health.Utility.SqlHelper.EscapeLikeClause
- uid: Microsoft.Health.Utility.SqlHelper.IsPrimaryKeyViolation*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.IsPrimaryKeyViolation
  isExternal: false
  name: IsPrimaryKeyViolation
  nameWithType: SqlHelper.IsPrimaryKeyViolation
  fullName: Microsoft.Health.Utility.SqlHelper.IsPrimaryKeyViolation
- uid: System.Data.SqlClient.SqlException
  commentId: T:System.Data.SqlClient.SqlException
  parent: System.Data.SqlClient
  isExternal: true
  name: SqlException
  nameWithType: SqlException
  fullName: System.Data.SqlClient.SqlException
- uid: Microsoft.Health.Utility.SqlHelper.IsUniqueIndexViolation*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.IsUniqueIndexViolation
  isExternal: false
  name: IsUniqueIndexViolation
  nameWithType: SqlHelper.IsUniqueIndexViolation
  fullName: Microsoft.Health.Utility.SqlHelper.IsUniqueIndexViolation
- uid: Microsoft.Health.Utility.SqlHelper.IsForeignKeyViolation*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.IsForeignKeyViolation
  isExternal: false
  name: IsForeignKeyViolation
  nameWithType: SqlHelper.IsForeignKeyViolation
  fullName: Microsoft.Health.Utility.SqlHelper.IsForeignKeyViolation
- uid: Microsoft.Health.Utility.SqlHelper.IsDuplicateRowInsertionViolation*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.IsDuplicateRowInsertionViolation
  isExternal: false
  name: IsDuplicateRowInsertionViolation
  nameWithType: SqlHelper.IsDuplicateRowInsertionViolation
  fullName: Microsoft.Health.Utility.SqlHelper.IsDuplicateRowInsertionViolation
- uid: Microsoft.Health.Utility.SqlHelper.IsUserDefinedError*
  commentId: Overload:Microsoft.Health.Utility.SqlHelper.IsUserDefinedError
  isExternal: false
  name: IsUserDefinedError
  nameWithType: SqlHelper.IsUserDefinedError
  fullName: Microsoft.Health.Utility.SqlHelper.IsUserDefinedError
