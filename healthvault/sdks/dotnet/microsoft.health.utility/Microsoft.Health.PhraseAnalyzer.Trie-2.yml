### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2
  commentId: T:Microsoft.Health.PhraseAnalyzer.Trie`2
  id: Trie`2
  parent: Microsoft.Health.PhraseAnalyzer
  children:
  - Microsoft.Health.PhraseAnalyzer.Trie`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  - Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IEnumerable{`0},`1)
  - Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},`1)
  - Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1)
  - Microsoft.Health.PhraseAnalyzer.Trie`2.GetAllValues
  - Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IEnumerable{`0})
  - Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IList{`0},System.Int32)
  - Microsoft.Health.PhraseAnalyzer.Trie`2.IgnoreDuplicates
  - Microsoft.Health.PhraseAnalyzer.Trie`2.MaxLinearScanItemLength
  - Microsoft.Health.PhraseAnalyzer.Trie`2.Trim
  - Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@)
  - Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@,System.Int32@)
  - Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},`1@)
  - Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@)
  - Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@,System.Int32@)
  - Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1@,System.Int32@)
  - Microsoft.Health.PhraseAnalyzer.Trie`2.TryFindExact(System.Collections.Generic.IList{`0},System.Int32,`1@)
  langs:
  - csharp
  - vb
  name: Trie<K, V>
  nameWithType: Trie<K, V>
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>
  type: Class
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Trie.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Trie
    path: search/PhraseAnalyzer/Trie.cs
    startLine: 11
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public class Trie<K, V>
    content.vb: Public Class Trie(Of K, V)
    typeParameters:
    - id: K
      description: ''
    - id: V
      description: ''
  inheritance:
  - System.Object
  derivedClasses:
  - Microsoft.Health.InvertedIndex.TrieIndex`2
  - Microsoft.Health.PhraseAnalyzer.StringTrie`1
  - Microsoft.Health.PhraseAnalyzer.TrieLexicon
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - Microsoft.Health.PhraseAnalyzer.Trie`2.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  - System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  nameWithType.vb: Trie(Of K, V)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V)
  name.vb: Trie(Of K, V)
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Collections.Generic.IEqualityComparer{`0})'
  parent: Microsoft.Health.PhraseAnalyzer.Trie`2
  langs:
  - csharp
  - vb
  name: Trie(IEqualityComparer<K>)
  nameWithType: Trie<K, V>.Trie(IEqualityComparer<K>)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.Trie(System.Collections.Generic.IEqualityComparer<K>)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Trie.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: search/PhraseAnalyzer/Trie.cs
    startLine: 22
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public Trie(IEqualityComparer<K> comparer)
    content.vb: Public Sub New(comparer As IEqualityComparer(Of K))
    parameters:
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{K}}
      description: ''
  overload: Microsoft.Health.PhraseAnalyzer.Trie`2.#ctor*
  nameWithType.vb: Trie(Of K, V).Trie(IEqualityComparer(Of K))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).Trie(System.Collections.Generic.IEqualityComparer(Of K))
  name.vb: Trie(IEqualityComparer(Of K))
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.IgnoreDuplicates
  commentId: P:Microsoft.Health.PhraseAnalyzer.Trie`2.IgnoreDuplicates
  id: IgnoreDuplicates
  parent: Microsoft.Health.PhraseAnalyzer.Trie`2
  langs:
  - csharp
  - vb
  name: IgnoreDuplicates
  nameWithType: Trie<K, V>.IgnoreDuplicates
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.IgnoreDuplicates
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Trie.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IgnoreDuplicates
    path: search/PhraseAnalyzer/Trie.cs
    startLine: 31
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public bool IgnoreDuplicates { get; set; }
    content.vb: Public Property IgnoreDuplicates As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.Health.PhraseAnalyzer.Trie`2.IgnoreDuplicates*
  nameWithType.vb: Trie(Of K, V).IgnoreDuplicates
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).IgnoreDuplicates
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.MaxLinearScanItemLength
  commentId: P:Microsoft.Health.PhraseAnalyzer.Trie`2.MaxLinearScanItemLength
  id: MaxLinearScanItemLength
  parent: Microsoft.Health.PhraseAnalyzer.Trie`2
  langs:
  - csharp
  - vb
  name: MaxLinearScanItemLength
  nameWithType: Trie<K, V>.MaxLinearScanItemLength
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.MaxLinearScanItemLength
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Trie.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: MaxLinearScanItemLength
    path: search/PhraseAnalyzer/Trie.cs
    startLine: 48
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\nFor dictionaries of moderate size, it is more efficient to just store unordered lists \nand scan linearly. This knob controls how many items the Trie places in a node before \nswitching to ordered lists/hashtables.\n"
  example: []
  syntax:
    content: public int MaxLinearScanItemLength { get; set; }
    content.vb: Public Property MaxLinearScanItemLength As Integer
    parameters: []
    return:
      type: System.Int32
  overload: Microsoft.Health.PhraseAnalyzer.Trie`2.MaxLinearScanItemLength*
  nameWithType.vb: Trie(Of K, V).MaxLinearScanItemLength
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).MaxLinearScanItemLength
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@)
  id: TryFind(System.Collections.Generic.IEnumerable{`0},`1@)
  parent: Microsoft.Health.PhraseAnalyzer.Trie`2
  langs:
  - csharp
  - vb
  name: TryFind(IEnumerable<K>, out V)
  nameWithType: Trie<K, V>.TryFind(IEnumerable<K>, out V)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind(System.Collections.Generic.IEnumerable<K>, out V)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Trie.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: TryFind
    path: search/PhraseAnalyzer/Trie.cs
    startLine: 70
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public bool TryFind(IEnumerable<K> path, out V value)
    content.vb: Public Function TryFind(path As IEnumerable(Of K), ByRef value As V) As Boolean
    parameters:
    - id: path
      type: System.Collections.Generic.IEnumerable{{K}}
      description: ''
    - id: value
      type: '{V}'
      description: ''
    return:
      type: System.Boolean
      description: ''
  overload: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind*
  nameWithType.vb: Trie(Of K, V).TryFind(IEnumerable(Of K), ByRef V)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind(System.Collections.Generic.IEnumerable(Of K), ByRef V)
  name.vb: TryFind(IEnumerable(Of K), ByRef V)
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@,System.Int32@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@,System.Int32@)
  id: TryFind(System.Collections.Generic.IEnumerable{`0},`1@,System.Int32@)
  parent: Microsoft.Health.PhraseAnalyzer.Trie`2
  langs:
  - csharp
  - vb
  name: TryFind(IEnumerable<K>, out V, out Int32)
  nameWithType: Trie<K, V>.TryFind(IEnumerable<K>, out V, out Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind(System.Collections.Generic.IEnumerable<K>, out V, out System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Trie.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: TryFind
    path: search/PhraseAnalyzer/Trie.cs
    startLine: 88
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public bool TryFind(IEnumerable<K> path, out V value, out int depth)
    content.vb: Public Function TryFind(path As IEnumerable(Of K), ByRef value As V, ByRef depth As Integer) As Boolean
    parameters:
    - id: path
      type: System.Collections.Generic.IEnumerable{{K}}
      description: ''
    - id: value
      type: '{V}'
      description: ''
    - id: depth
      type: System.Int32
      description: ''
    return:
      type: System.Boolean
      description: ''
  overload: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind*
  nameWithType.vb: Trie(Of K, V).TryFind(IEnumerable(Of K), ByRef V, ByRef Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind(System.Collections.Generic.IEnumerable(Of K), ByRef V, ByRef System.Int32)
  name.vb: TryFind(IEnumerable(Of K), ByRef V, ByRef Int32)
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},`1@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},`1@)
  id: TryFind(System.Collections.Generic.IList{`0},`1@)
  parent: Microsoft.Health.PhraseAnalyzer.Trie`2
  langs:
  - csharp
  - vb
  name: TryFind(IList<K>, out V)
  nameWithType: Trie<K, V>.TryFind(IList<K>, out V)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind(System.Collections.Generic.IList<K>, out V)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Trie.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: TryFind
    path: search/PhraseAnalyzer/Trie.cs
    startLine: 131
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public bool TryFind(IList<K> path, out V value)
    content.vb: Public Function TryFind(path As IList(Of K), ByRef value As V) As Boolean
    parameters:
    - id: path
      type: System.Collections.Generic.IList{{K}}
      description: ''
    - id: value
      type: '{V}'
      description: ''
    return:
      type: System.Boolean
      description: ''
  overload: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind*
  nameWithType.vb: Trie(Of K, V).TryFind(IList(Of K), ByRef V)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind(System.Collections.Generic.IList(Of K), ByRef V)
  name.vb: TryFind(IList(Of K), ByRef V)
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@)
  id: TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@)
  parent: Microsoft.Health.PhraseAnalyzer.Trie`2
  langs:
  - csharp
  - vb
  name: TryFind(IList<K>, Int32, out V)
  nameWithType: Trie<K, V>.TryFind(IList<K>, Int32, out V)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind(System.Collections.Generic.IList<K>, System.Int32, out V)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Trie.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: TryFind
    path: search/PhraseAnalyzer/Trie.cs
    startLine: 143
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public bool TryFind(IList<K> path, int startAt, out V value)
    content.vb: Public Function TryFind(path As IList(Of K), startAt As Integer, ByRef value As V) As Boolean
    parameters:
    - id: path
      type: System.Collections.Generic.IList{{K}}
      description: ''
    - id: startAt
      type: System.Int32
      description: ''
    - id: value
      type: '{V}'
      description: ''
    return:
      type: System.Boolean
      description: ''
  overload: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind*
  nameWithType.vb: Trie(Of K, V).TryFind(IList(Of K), Int32, ByRef V)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind(System.Collections.Generic.IList(Of K), System.Int32, ByRef V)
  name.vb: TryFind(IList(Of K), Int32, ByRef V)
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@,System.Int32@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@,System.Int32@)
  id: TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@,System.Int32@)
  parent: Microsoft.Health.PhraseAnalyzer.Trie`2
  langs:
  - csharp
  - vb
  name: TryFind(IList<K>, Int32, out V, out Int32)
  nameWithType: Trie<K, V>.TryFind(IList<K>, Int32, out V, out Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind(System.Collections.Generic.IList<K>, System.Int32, out V, out System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Trie.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: TryFind
    path: search/PhraseAnalyzer/Trie.cs
    startLine: 159
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\nFinds the longest possible match in the trie. Returns the value associated with any \nnode found, along with the depth at which the node was found.\nNote: May not consume all strings\n"
  example: []
  syntax:
    content: public bool TryFind(IList<K> path, int startAt, out V value, out int depth)
    content.vb: Public Function TryFind(path As IList(Of K), startAt As Integer, ByRef value As V, ByRef depth As Integer) As Boolean
    parameters:
    - id: path
      type: System.Collections.Generic.IList{{K}}
    - id: startAt
      type: System.Int32
    - id: value
      type: '{V}'
    - id: depth
      type: System.Int32
    return:
      type: System.Boolean
  overload: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind*
  nameWithType.vb: Trie(Of K, V).TryFind(IList(Of K), Int32, ByRef V, ByRef Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind(System.Collections.Generic.IList(Of K), System.Int32, ByRef V, ByRef System.Int32)
  name.vb: TryFind(IList(Of K), Int32, ByRef V, ByRef Int32)
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1@,System.Int32@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1@,System.Int32@)
  id: TryFind(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1@,System.Int32@)
  parent: Microsoft.Health.PhraseAnalyzer.Trie`2
  langs:
  - csharp
  - vb
  name: TryFind(IList<K>, Int32, Int32, out V, out Int32)
  nameWithType: Trie<K, V>.TryFind(IList<K>, Int32, Int32, out V, out Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind(System.Collections.Generic.IList<K>, System.Int32, System.Int32, out V, out System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Trie.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: TryFind
    path: search/PhraseAnalyzer/Trie.cs
    startLine: 169
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\nFinds the longest possible match in the trie. Returns the value associated with any \nnode found, along with the depth at which the node was found.\nNote: May not consume all strings\n"
  example: []
  syntax:
    content: public bool TryFind(IList<K> path, int startAt, int count, out V value, out int depth)
    content.vb: Public Function TryFind(path As IList(Of K), startAt As Integer, count As Integer, ByRef value As V, ByRef depth As Integer) As Boolean
    parameters:
    - id: path
      type: System.Collections.Generic.IList{{K}}
    - id: startAt
      type: System.Int32
    - id: count
      type: System.Int32
    - id: value
      type: '{V}'
    - id: depth
      type: System.Int32
    return:
      type: System.Boolean
  overload: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind*
  nameWithType.vb: Trie(Of K, V).TryFind(IList(Of K), Int32, Int32, ByRef V, ByRef Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind(System.Collections.Generic.IList(Of K), System.Int32, System.Int32, ByRef V, ByRef System.Int32)
  name.vb: TryFind(IList(Of K), Int32, Int32, ByRef V, ByRef Int32)
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFindExact(System.Collections.Generic.IList{`0},System.Int32,`1@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.TryFindExact(System.Collections.Generic.IList{`0},System.Int32,`1@)
  id: TryFindExact(System.Collections.Generic.IList{`0},System.Int32,`1@)
  parent: Microsoft.Health.PhraseAnalyzer.Trie`2
  langs:
  - csharp
  - vb
  name: TryFindExact(IList<K>, Int32, out V)
  nameWithType: Trie<K, V>.TryFindExact(IList<K>, Int32, out V)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFindExact(System.Collections.Generic.IList<K>, System.Int32, out V)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Trie.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: TryFindExact
    path: search/PhraseAnalyzer/Trie.cs
    startLine: 205
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\nOnly returns a value if the entire set of strings was consumed during traversal - i.e. an exact match\n"
  example: []
  syntax:
    content: public bool TryFindExact(IList<K> path, int startAt, out V value)
    content.vb: Public Function TryFindExact(path As IList(Of K), startAt As Integer, ByRef value As V) As Boolean
    parameters:
    - id: path
      type: System.Collections.Generic.IList{{K}}
    - id: startAt
      type: System.Int32
    - id: value
      type: '{V}'
    return:
      type: System.Boolean
  overload: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFindExact*
  nameWithType.vb: Trie(Of K, V).TryFindExact(IList(Of K), Int32, ByRef V)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFindExact(System.Collections.Generic.IList(Of K), System.Int32, ByRef V)
  name.vb: TryFindExact(IList(Of K), Int32, ByRef V)
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IList{`0},System.Int32)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IList{`0},System.Int32)
  id: GetChildren(System.Collections.Generic.IList{`0},System.Int32)
  parent: Microsoft.Health.PhraseAnalyzer.Trie`2
  langs:
  - csharp
  - vb
  name: GetChildren(IList<K>, Int32)
  nameWithType: Trie<K, V>.GetChildren(IList<K>, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.GetChildren(System.Collections.Generic.IList<K>, System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Trie.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetChildren
    path: search/PhraseAnalyzer/Trie.cs
    startLine: 224
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\nTraverse the trie until the path is consumed. Then return the children of the last node\nPrimary usage is for TrieIndexes, where each 'key' can lead to the discovery of 'sub keys'\nCAN return NULL\n"
  example: []
  syntax:
    content: public IEnumerable<KeyValuePair<K, V>> GetChildren(IList<K> path, int startAt)
    content.vb: Public Function GetChildren(path As IList(Of K), startAt As Integer) As IEnumerable(Of KeyValuePair(Of K, V))
    parameters:
    - id: path
      type: System.Collections.Generic.IList{{K}}
    - id: startAt
      type: System.Int32
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{K},{V}}}
  overload: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren*
  nameWithType.vb: Trie(Of K, V).GetChildren(IList(Of K), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).GetChildren(System.Collections.Generic.IList(Of K), System.Int32)
  name.vb: GetChildren(IList(Of K), Int32)
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IEnumerable{`0})
  id: GetChildren(System.Collections.Generic.IEnumerable{`0})
  parent: Microsoft.Health.PhraseAnalyzer.Trie`2
  langs:
  - csharp
  - vb
  name: GetChildren(IEnumerable<K>)
  nameWithType: Trie<K, V>.GetChildren(IEnumerable<K>)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.GetChildren(System.Collections.Generic.IEnumerable<K>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Trie.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetChildren
    path: search/PhraseAnalyzer/Trie.cs
    startLine: 263
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\nTraverse the trie until the path is consumed. Then return the children of the last node\nPrimary usage is for TrieIndexes, where each 'key' can lead to the discovery of 'sub keys'\nCAN return NULL\n"
  example: []
  syntax:
    content: public IEnumerable<KeyValuePair<K, V>> GetChildren(IEnumerable<K> path)
    content.vb: Public Function GetChildren(path As IEnumerable(Of K)) As IEnumerable(Of KeyValuePair(Of K, V))
    parameters:
    - id: path
      type: System.Collections.Generic.IEnumerable{{K}}
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{K},{V}}}
  overload: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren*
  nameWithType.vb: Trie(Of K, V).GetChildren(IEnumerable(Of K))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).GetChildren(System.Collections.Generic.IEnumerable(Of K))
  name.vb: GetChildren(IEnumerable(Of K))
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetAllValues
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.GetAllValues
  id: GetAllValues
  parent: Microsoft.Health.PhraseAnalyzer.Trie`2
  langs:
  - csharp
  - vb
  name: GetAllValues()
  nameWithType: Trie<K, V>.GetAllValues()
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.GetAllValues()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Trie.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetAllValues
    path: search/PhraseAnalyzer/Trie.cs
    startLine: 300
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public IEnumerable<V> GetAllValues()
    content.vb: Public Function GetAllValues As IEnumerable(Of V)
    return:
      type: System.Collections.Generic.IEnumerable{{V}}
      description: ''
  overload: Microsoft.Health.PhraseAnalyzer.Trie`2.GetAllValues*
  nameWithType.vb: Trie(Of K, V).GetAllValues()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).GetAllValues()
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},`1)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},`1)
  id: Add(System.Collections.Generic.IList{`0},`1)
  parent: Microsoft.Health.PhraseAnalyzer.Trie`2
  langs:
  - csharp
  - vb
  name: Add(IList<K>, V)
  nameWithType: Trie<K, V>.Add(IList<K>, V)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.Add(System.Collections.Generic.IList<K>, V)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Trie.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Add
    path: search/PhraseAnalyzer/Trie.cs
    startLine: 345
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public void Add(IList<K> path, V value)
    content.vb: Public Sub Add(path As IList(Of K), value As V)
    parameters:
    - id: path
      type: System.Collections.Generic.IList{{K}}
      description: ''
    - id: value
      type: '{V}'
      description: ''
  overload: Microsoft.Health.PhraseAnalyzer.Trie`2.Add*
  nameWithType.vb: Trie(Of K, V).Add(IList(Of K), V)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).Add(System.Collections.Generic.IList(Of K), V)
  name.vb: Add(IList(Of K), V)
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1)
  id: Add(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1)
  parent: Microsoft.Health.PhraseAnalyzer.Trie`2
  langs:
  - csharp
  - vb
  name: Add(IList<K>, Int32, Int32, V)
  nameWithType: Trie<K, V>.Add(IList<K>, Int32, Int32, V)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.Add(System.Collections.Generic.IList<K>, System.Int32, System.Int32, V)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Trie.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Add
    path: search/PhraseAnalyzer/Trie.cs
    startLine: 362
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public void Add(IList<K> path, int startAt, int count, V value)
    content.vb: Public Sub Add(path As IList(Of K), startAt As Integer, count As Integer, value As V)
    parameters:
    - id: path
      type: System.Collections.Generic.IList{{K}}
      description: ''
    - id: startAt
      type: System.Int32
      description: ''
    - id: count
      type: System.Int32
      description: ''
    - id: value
      type: '{V}'
      description: ''
  overload: Microsoft.Health.PhraseAnalyzer.Trie`2.Add*
  nameWithType.vb: Trie(Of K, V).Add(IList(Of K), Int32, Int32, V)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).Add(System.Collections.Generic.IList(Of K), System.Int32, System.Int32, V)
  name.vb: Add(IList(Of K), Int32, Int32, V)
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IEnumerable{`0},`1)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IEnumerable{`0},`1)
  id: Add(System.Collections.Generic.IEnumerable{`0},`1)
  parent: Microsoft.Health.PhraseAnalyzer.Trie`2
  langs:
  - csharp
  - vb
  name: Add(IEnumerable<K>, V)
  nameWithType: Trie<K, V>.Add(IEnumerable<K>, V)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.Add(System.Collections.Generic.IEnumerable<K>, V)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Trie.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Add
    path: search/PhraseAnalyzer/Trie.cs
    startLine: 452
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public void Add(IEnumerable<K> path, V value)
    content.vb: Public Sub Add(path As IEnumerable(Of K), value As V)
    parameters:
    - id: path
      type: System.Collections.Generic.IEnumerable{{K}}
      description: ''
    - id: value
      type: '{V}'
      description: ''
  overload: Microsoft.Health.PhraseAnalyzer.Trie`2.Add*
  nameWithType.vb: Trie(Of K, V).Add(IEnumerable(Of K), V)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).Add(System.Collections.Generic.IEnumerable(Of K), V)
  name.vb: Add(IEnumerable(Of K), V)
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Trim
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.Trim
  id: Trim
  parent: Microsoft.Health.PhraseAnalyzer.Trie`2
  langs:
  - csharp
  - vb
  name: Trim()
  nameWithType: Trie<K, V>.Trim()
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.Trim()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Trie.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Trim
    path: search/PhraseAnalyzer/Trie.cs
    startLine: 520
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public void Trim()
    content.vb: Public Sub Trim
  overload: Microsoft.Health.PhraseAnalyzer.Trie`2.Trim*
  nameWithType.vb: Trie(Of K, V).Trim()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).Trim()
references:
- uid: Microsoft.Health.PhraseAnalyzer
  commentId: N:Microsoft.Health.PhraseAnalyzer
  isExternal: false
  name: Microsoft.Health.PhraseAnalyzer
  nameWithType: Microsoft.Health.PhraseAnalyzer
  fullName: Microsoft.Health.PhraseAnalyzer
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  name: SetProperty(String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object())
  name.vb: SetProperty(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  name: InvokeMethod(String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object())
  name.vb: InvokeMethod(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  parent: Microsoft.Health.Utility.InvariantString
  definition: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  name: ToStringInvariant()
  nameWithType: InvariantString.ToStringInvariant()
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant()
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  parent: Microsoft.Health.Utility.TypeHelper
  definition: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  name: ValueOrDbNull<Trie<K, V>>()
  nameWithType: TypeHelper.ValueOrDbNull<Trie<K, V>>()
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.PhraseAnalyzer.Trie<K, V>>()
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of Trie(Of K, V))()
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.PhraseAnalyzer.Trie(Of K, V))()
  name.vb: ValueOrDbNull(Of Trie(Of K, V))()
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull<Trie<K, V>>
    nameWithType: TypeHelper.ValueOrDbNull<Trie<K, V>>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.PhraseAnalyzer.Trie<K, V>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull(Of Trie(Of K, V))
    nameWithType: TypeHelper.ValueOrDbNull(Of Trie(Of K, V))
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.PhraseAnalyzer.Trie(Of K, V))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  parent: Microsoft.Health.Utility.WCXmlHelper
  definition: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  name: ToXml()
  nameWithType: WCXmlHelper.ToXml()
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml()
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  isExternal: true
  name: SetProperty(Object, String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object())
  name.vb: SetProperty(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions
  commentId: T:Microsoft.Health.Utility.IDispatchExtensions
  parent: Microsoft.Health.Utility
  isExternal: false
  name: IDispatchExtensions
  nameWithType: IDispatchExtensions
  fullName: Microsoft.Health.Utility.IDispatchExtensions
- uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  isExternal: true
  name: InvokeMethod(Object, String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object())
  name.vb: InvokeMethod(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  isExternal: true
  name: ToStringInvariant(Object)
  nameWithType: InvariantString.ToStringInvariant(Object)
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString
  commentId: T:Microsoft.Health.Utility.InvariantString
  parent: Microsoft.Health.Utility
  isExternal: false
  name: InvariantString
  nameWithType: InvariantString
  fullName: Microsoft.Health.Utility.InvariantString
- uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  isExternal: false
  name: ValueOrDbNull<T>(T)
  nameWithType: TypeHelper.ValueOrDbNull<T>(T)
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>(T)
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of T)(T)
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)(T)
  name.vb: ValueOrDbNull(Of T)(T)
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull<T>
    nameWithType: TypeHelper.ValueOrDbNull<T>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull(Of T)
    nameWithType: TypeHelper.ValueOrDbNull(Of T)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.TypeHelper
  commentId: T:Microsoft.Health.Utility.TypeHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: TypeHelper
  nameWithType: TypeHelper
  fullName: Microsoft.Health.Utility.TypeHelper
- uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  isExternal: true
  name: ToXml(Object)
  nameWithType: WCXmlHelper.ToXml(Object)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.WCXmlHelper
  commentId: T:Microsoft.Health.Utility.WCXmlHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: WCXmlHelper
  nameWithType: WCXmlHelper
  fullName: Microsoft.Health.Utility.WCXmlHelper
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.#ctor*
  commentId: Overload:Microsoft.Health.PhraseAnalyzer.Trie`2.#ctor
  isExternal: false
  name: Trie
  nameWithType: Trie<K, V>.Trie
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.Trie
  nameWithType.vb: Trie(Of K, V).Trie
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).Trie
- uid: System.Collections.Generic.IEqualityComparer{{K}}
  commentId: T:System.Collections.Generic.IEqualityComparer{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<K>
  nameWithType: IEqualityComparer<K>
  fullName: System.Collections.Generic.IEqualityComparer<K>
  nameWithType.vb: IEqualityComparer(Of K)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of K)
  name.vb: IEqualityComparer(Of K)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1
  commentId: T:System.Collections.Generic.IEqualityComparer`1
  isExternal: true
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.IgnoreDuplicates*
  commentId: Overload:Microsoft.Health.PhraseAnalyzer.Trie`2.IgnoreDuplicates
  isExternal: false
  name: IgnoreDuplicates
  nameWithType: Trie<K, V>.IgnoreDuplicates
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.IgnoreDuplicates
  nameWithType.vb: Trie(Of K, V).IgnoreDuplicates
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).IgnoreDuplicates
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.MaxLinearScanItemLength*
  commentId: Overload:Microsoft.Health.PhraseAnalyzer.Trie`2.MaxLinearScanItemLength
  isExternal: false
  name: MaxLinearScanItemLength
  nameWithType: Trie<K, V>.MaxLinearScanItemLength
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.MaxLinearScanItemLength
  nameWithType.vb: Trie(Of K, V).MaxLinearScanItemLength
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).MaxLinearScanItemLength
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind*
  commentId: Overload:Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind
  isExternal: false
  name: TryFind
  nameWithType: Trie<K, V>.TryFind
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind
  nameWithType.vb: Trie(Of K, V).TryFind
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind
- uid: System.Collections.Generic.IEnumerable{{K}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<K>
  nameWithType: IEnumerable<K>
  fullName: System.Collections.Generic.IEnumerable<K>
  nameWithType.vb: IEnumerable(Of K)
  fullName.vb: System.Collections.Generic.IEnumerable(Of K)
  name.vb: IEnumerable(Of K)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
- uid: '{V}'
  commentId: '!:V'
  definition: V
  name: V
  nameWithType: V
  fullName: V
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: V
  isExternal: false
  name: V
  nameWithType: V
  fullName: V
- uid: System.Collections.Generic.IList{{K}}
  commentId: T:System.Collections.Generic.IList{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<K>
  nameWithType: IList<K>
  fullName: System.Collections.Generic.IList<K>
  nameWithType.vb: IList(Of K)
  fullName.vb: System.Collections.Generic.IList(Of K)
  name.vb: IList(Of K)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFindExact*
  commentId: Overload:Microsoft.Health.PhraseAnalyzer.Trie`2.TryFindExact
  isExternal: false
  name: TryFindExact
  nameWithType: Trie<K, V>.TryFindExact
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFindExact
  nameWithType.vb: Trie(Of K, V).TryFindExact
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFindExact
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren*
  commentId: Overload:Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren
  isExternal: false
  name: GetChildren
  nameWithType: Trie<K, V>.GetChildren
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.GetChildren
  nameWithType.vb: Trie(Of K, V).GetChildren
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).GetChildren
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{K},{V}}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<K, V>>
  nameWithType: IEnumerable<KeyValuePair<K, V>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<K, V>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of K, V))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of K, V))
  name.vb: IEnumerable(Of KeyValuePair(Of K, V))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetAllValues*
  commentId: Overload:Microsoft.Health.PhraseAnalyzer.Trie`2.GetAllValues
  isExternal: false
  name: GetAllValues
  nameWithType: Trie<K, V>.GetAllValues
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.GetAllValues
  nameWithType.vb: Trie(Of K, V).GetAllValues
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).GetAllValues
- uid: System.Collections.Generic.IEnumerable{{V}}
  commentId: T:System.Collections.Generic.IEnumerable{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<V>
  nameWithType: IEnumerable<V>
  fullName: System.Collections.Generic.IEnumerable<V>
  nameWithType.vb: IEnumerable(Of V)
  fullName.vb: System.Collections.Generic.IEnumerable(Of V)
  name.vb: IEnumerable(Of V)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add*
  commentId: Overload:Microsoft.Health.PhraseAnalyzer.Trie`2.Add
  isExternal: false
  name: Add
  nameWithType: Trie<K, V>.Add
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.Add
  nameWithType.vb: Trie(Of K, V).Add
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).Add
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Trim*
  commentId: Overload:Microsoft.Health.PhraseAnalyzer.Trie`2.Trim
  isExternal: false
  name: Trim
  nameWithType: Trie<K, V>.Trim
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.Trim
  nameWithType.vb: Trie(Of K, V).Trim
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).Trim
