### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.InvertedIndex.SearchIndex`2
  commentId: T:Microsoft.Health.InvertedIndex.SearchIndex`2
  id: SearchIndex`2
  parent: Microsoft.Health.InvertedIndex
  children:
  - Microsoft.Health.InvertedIndex.SearchIndex`2.#ctor(System.Collections.Generic.IComparer{`0})
  - Microsoft.Health.InvertedIndex.SearchIndex`2.GetTermFrequency(`0)
  - Microsoft.Health.InvertedIndex.SearchIndex`2.Item(`0)
  - Microsoft.Health.InvertedIndex.SearchIndex`2.Resolve(`0)
  - Microsoft.Health.InvertedIndex.SearchIndex`2.Resolve(System.Collections.Generic.IEnumerable{`0})
  - Microsoft.Health.InvertedIndex.SearchIndex`2.Resolve(System.Collections.Generic.IList{`0})
  - Microsoft.Health.InvertedIndex.SearchIndex`2.Resolve(System.Collections.Generic.IList{`0},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  - Microsoft.Health.InvertedIndex.SearchIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
  - Microsoft.Health.InvertedIndex.SearchIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  langs:
  - csharp
  - vb
  name: SearchIndex<T, TRecordIDList>
  nameWithType: SearchIndex<T, TRecordIDList>
  fullName: Microsoft.Health.InvertedIndex.SearchIndex<T, TRecordIDList>
  type: Class
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/SearchIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SearchIndex
    path: search/InvertedIndex/SearchIndex.cs
    startLine: 18
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: 'public class SearchIndex<T, TRecordIDList> : SortedIndex<T, TRecordIDList>, IIndex<T, TRecordIDList>, IEnumerable<KeyValuePair<T, TRecordIDList>>, IEnumerable, IComparer<T>, ISearchIndex<T, TRecordIDList> where TRecordIDList : class, IRecordIDList'
    content.vb: >-
      Public Class SearchIndex(Of T, TRecordIDList As {Class, IRecordIDList})
          Inherits SortedIndex(Of T, TRecordIDList)
          Implements IIndex(Of T, TRecordIDList), IEnumerable(Of KeyValuePair(Of T, TRecordIDList)), IEnumerable, IComparer(Of T), ISearchIndex(Of T, TRecordIDList)
    typeParameters:
    - id: T
      description: ''
    - id: TRecordIDList
      description: ''
  inheritance:
  - System.Object
  - Microsoft.Health.SortedIndex{{T},{TRecordIDList}}
  derivedClasses:
  - Microsoft.Health.InvertedIndex.TextIndex
  implements:
  - Microsoft.Health.IIndex{{T},{TRecordIDList}}
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{T},{TRecordIDList}}}
  - System.Collections.IEnumerable
  - System.Collections.Generic.IComparer{{T}}
  - Microsoft.Health.InvertedIndex.ISearchIndex{{T},{TRecordIDList}}
  inheritedMembers:
  - Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.Count
  - Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.Item(System.Int32)
  - Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.IsReady
  - Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.Keys
  - Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.Values
  - Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.ContainsKey({T})
  - Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.Get({T},{TRecordIDList}@)
  - Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.Get({T},System.Collections.Generic.IComparer{{T}},{TRecordIDList}@)
  - Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.GetMultiple({T})
  - Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.GetKeys({T},System.Collections.Generic.IComparer{{T}})
  - Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.Add({T},{TRecordIDList})
  - Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.Add(System.Collections.Generic.KeyValuePair{{T},{TRecordIDList}})
  - Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{T},{TRecordIDList}}})
  - Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.SetValue({T},{TRecordIDList})
  - Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.SetValueAt(System.Int32,{TRecordIDList})
  - Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.BuildIndex
  - Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.BuildIndex(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{T},{TRecordIDList}}})
  - Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.EnsureCapacity(System.Int32)
  - Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.IndexOf({T})
  - Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.IndexOf({T},System.Collections.Generic.IComparer{{T}})
  - Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.EnsureReady
  - Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.GetEnumerator
  - Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.System#Collections#IEnumerable#GetEnumerator
  - Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.Compare({T},{T})
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - Microsoft.Health.InvertedIndex.SearchIndex`2.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  - System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  nameWithType.vb: SearchIndex(Of T, TRecordIDList)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.Health.InvertedIndex.SearchIndex(Of T, TRecordIDList)
  name.vb: SearchIndex(Of T, TRecordIDList)
- uid: Microsoft.Health.InvertedIndex.SearchIndex`2.#ctor(System.Collections.Generic.IComparer{`0})
  commentId: M:Microsoft.Health.InvertedIndex.SearchIndex`2.#ctor(System.Collections.Generic.IComparer{`0})
  id: '#ctor(System.Collections.Generic.IComparer{`0})'
  parent: Microsoft.Health.InvertedIndex.SearchIndex`2
  langs:
  - csharp
  - vb
  name: SearchIndex(IComparer<T>)
  nameWithType: SearchIndex<T, TRecordIDList>.SearchIndex(IComparer<T>)
  fullName: Microsoft.Health.InvertedIndex.SearchIndex<T, TRecordIDList>.SearchIndex(System.Collections.Generic.IComparer<T>)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/SearchIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: search/InvertedIndex/SearchIndex.cs
    startLine: 28
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public SearchIndex(IComparer<T> comparer)
    content.vb: Public Sub New(comparer As IComparer(Of T))
    parameters:
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: ''
  overload: Microsoft.Health.InvertedIndex.SearchIndex`2.#ctor*
  nameWithType.vb: SearchIndex(Of T, TRecordIDList).SearchIndex(IComparer(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.InvertedIndex.SearchIndex(Of T, TRecordIDList).SearchIndex(System.Collections.Generic.IComparer(Of T))
  name.vb: SearchIndex(IComparer(Of T))
- uid: Microsoft.Health.InvertedIndex.SearchIndex`2.Item(`0)
  commentId: P:Microsoft.Health.InvertedIndex.SearchIndex`2.Item(`0)
  id: Item(`0)
  parent: Microsoft.Health.InvertedIndex.SearchIndex`2
  langs:
  - csharp
  - vb
  name: Item[T]
  nameWithType: SearchIndex<T, TRecordIDList>.Item[T]
  fullName: Microsoft.Health.InvertedIndex.SearchIndex<T, TRecordIDList>.Item[T]
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/SearchIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: this[]
    path: search/InvertedIndex/SearchIndex.cs
    startLine: 39
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public TRecordIDList this[T term] { get; }
    content.vb: Public ReadOnly Property Item(term As T) As TRecordIDList
    parameters:
    - id: term
      type: '{T}'
      description: ''
    return:
      type: '{TRecordIDList}'
      description: ''
  overload: Microsoft.Health.InvertedIndex.SearchIndex`2.Item*
  implements:
  - Microsoft.Health.InvertedIndex.ISearchIndex{{T},{TRecordIDList}}.Item({T})
  nameWithType.vb: SearchIndex(Of T, TRecordIDList).Item(T)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.Health.InvertedIndex.SearchIndex(Of T, TRecordIDList).Item(T)
  name.vb: Item(T)
- uid: Microsoft.Health.InvertedIndex.SearchIndex`2.GetTermFrequency(`0)
  commentId: M:Microsoft.Health.InvertedIndex.SearchIndex`2.GetTermFrequency(`0)
  id: GetTermFrequency(`0)
  parent: Microsoft.Health.InvertedIndex.SearchIndex`2
  langs:
  - csharp
  - vb
  name: GetTermFrequency(T)
  nameWithType: SearchIndex<T, TRecordIDList>.GetTermFrequency(T)
  fullName: Microsoft.Health.InvertedIndex.SearchIndex<T, TRecordIDList>.GetTermFrequency(T)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/SearchIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetTermFrequency
    path: search/InvertedIndex/SearchIndex.cs
    startLine: 58
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public int GetTermFrequency(T term)
    content.vb: Public Function GetTermFrequency(term As T) As Integer
    parameters:
    - id: term
      type: '{T}'
      description: ''
    return:
      type: System.Int32
      description: ''
  overload: Microsoft.Health.InvertedIndex.SearchIndex`2.GetTermFrequency*
  nameWithType.vb: SearchIndex(Of T, TRecordIDList).GetTermFrequency(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.InvertedIndex.SearchIndex(Of T, TRecordIDList).GetTermFrequency(T)
- uid: Microsoft.Health.InvertedIndex.SearchIndex`2.Resolve(`0)
  commentId: M:Microsoft.Health.InvertedIndex.SearchIndex`2.Resolve(`0)
  id: Resolve(`0)
  parent: Microsoft.Health.InvertedIndex.SearchIndex`2
  langs:
  - csharp
  - vb
  name: Resolve(T)
  nameWithType: SearchIndex<T, TRecordIDList>.Resolve(T)
  fullName: Microsoft.Health.InvertedIndex.SearchIndex<T, TRecordIDList>.Resolve(T)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/SearchIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Resolve
    path: search/InvertedIndex/SearchIndex.cs
    startLine: 68
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public RecordIDEnumerator Resolve(T term)
    content.vb: Public Function Resolve(term As T) As RecordIDEnumerator
    parameters:
    - id: term
      type: '{T}'
      description: ''
    return:
      type: Microsoft.Health.InvertedIndex.RecordIDEnumerator
      description: ''
  overload: Microsoft.Health.InvertedIndex.SearchIndex`2.Resolve*
  implements:
  - Microsoft.Health.InvertedIndex.ISearchIndex{{T},{TRecordIDList}}.Resolve({T})
  nameWithType.vb: SearchIndex(Of T, TRecordIDList).Resolve(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.InvertedIndex.SearchIndex(Of T, TRecordIDList).Resolve(T)
- uid: Microsoft.Health.InvertedIndex.SearchIndex`2.Resolve(System.Collections.Generic.IList{`0})
  commentId: M:Microsoft.Health.InvertedIndex.SearchIndex`2.Resolve(System.Collections.Generic.IList{`0})
  id: Resolve(System.Collections.Generic.IList{`0})
  parent: Microsoft.Health.InvertedIndex.SearchIndex`2
  langs:
  - csharp
  - vb
  name: Resolve(IList<T>)
  nameWithType: SearchIndex<T, TRecordIDList>.Resolve(IList<T>)
  fullName: Microsoft.Health.InvertedIndex.SearchIndex<T, TRecordIDList>.Resolve(System.Collections.Generic.IList<T>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/SearchIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Resolve
    path: search/InvertedIndex/SearchIndex.cs
    startLine: 84
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public RecordIDEnumerator[] Resolve(IList<T> terms)
    content.vb: Public Function Resolve(terms As IList(Of T)) As RecordIDEnumerator()
    parameters:
    - id: terms
      type: System.Collections.Generic.IList{{T}}
      description: ''
    return:
      type: Microsoft.Health.InvertedIndex.RecordIDEnumerator[]
      description: ''
  overload: Microsoft.Health.InvertedIndex.SearchIndex`2.Resolve*
  implements:
  - Microsoft.Health.InvertedIndex.ISearchIndex{{T},{TRecordIDList}}.Resolve(System.Collections.Generic.IList{{T}})
  nameWithType.vb: SearchIndex(Of T, TRecordIDList).Resolve(IList(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.InvertedIndex.SearchIndex(Of T, TRecordIDList).Resolve(System.Collections.Generic.IList(Of T))
  name.vb: Resolve(IList(Of T))
- uid: Microsoft.Health.InvertedIndex.SearchIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
  commentId: M:Microsoft.Health.InvertedIndex.SearchIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
  id: Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
  parent: Microsoft.Health.InvertedIndex.SearchIndex`2
  langs:
  - csharp
  - vb
  name: Resolve(IList<T>, Int32, Int32)
  nameWithType: SearchIndex<T, TRecordIDList>.Resolve(IList<T>, Int32, Int32)
  fullName: Microsoft.Health.InvertedIndex.SearchIndex<T, TRecordIDList>.Resolve(System.Collections.Generic.IList<T>, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/SearchIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Resolve
    path: search/InvertedIndex/SearchIndex.cs
    startLine: 96
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public RecordIDEnumerator[] Resolve(IList<T> terms, int startAt, int count)
    content.vb: Public Function Resolve(terms As IList(Of T), startAt As Integer, count As Integer) As RecordIDEnumerator()
    parameters:
    - id: terms
      type: System.Collections.Generic.IList{{T}}
      description: ''
    - id: startAt
      type: System.Int32
      description: ''
    - id: count
      type: System.Int32
      description: ''
    return:
      type: Microsoft.Health.InvertedIndex.RecordIDEnumerator[]
      description: ''
  overload: Microsoft.Health.InvertedIndex.SearchIndex`2.Resolve*
  implements:
  - Microsoft.Health.InvertedIndex.ISearchIndex{{T},{TRecordIDList}}.Resolve(System.Collections.Generic.IList{{T}},System.Int32,System.Int32)
  nameWithType.vb: SearchIndex(Of T, TRecordIDList).Resolve(IList(Of T), Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.InvertedIndex.SearchIndex(Of T, TRecordIDList).Resolve(System.Collections.Generic.IList(Of T), System.Int32, System.Int32)
  name.vb: Resolve(IList(Of T), Int32, Int32)
- uid: Microsoft.Health.InvertedIndex.SearchIndex`2.Resolve(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Microsoft.Health.InvertedIndex.SearchIndex`2.Resolve(System.Collections.Generic.IEnumerable{`0})
  id: Resolve(System.Collections.Generic.IEnumerable{`0})
  parent: Microsoft.Health.InvertedIndex.SearchIndex`2
  langs:
  - csharp
  - vb
  name: Resolve(IEnumerable<T>)
  nameWithType: SearchIndex<T, TRecordIDList>.Resolve(IEnumerable<T>)
  fullName: Microsoft.Health.InvertedIndex.SearchIndex<T, TRecordIDList>.Resolve(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/SearchIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Resolve
    path: search/InvertedIndex/SearchIndex.cs
    startLine: 106
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public RecordIDEnumerator[] Resolve(IEnumerable<T> terms)
    content.vb: Public Function Resolve(terms As IEnumerable(Of T)) As RecordIDEnumerator()
    parameters:
    - id: terms
      type: System.Collections.Generic.IEnumerable{{T}}
      description: ''
    return:
      type: Microsoft.Health.InvertedIndex.RecordIDEnumerator[]
      description: ''
  overload: Microsoft.Health.InvertedIndex.SearchIndex`2.Resolve*
  implements:
  - Microsoft.Health.InvertedIndex.ISearchIndex{{T},{TRecordIDList}}.Resolve(System.Collections.Generic.IEnumerable{{T}})
  nameWithType.vb: SearchIndex(Of T, TRecordIDList).Resolve(IEnumerable(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.InvertedIndex.SearchIndex(Of T, TRecordIDList).Resolve(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Resolve(IEnumerable(Of T))
- uid: Microsoft.Health.InvertedIndex.SearchIndex`2.Resolve(System.Collections.Generic.IList{`0},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  commentId: M:Microsoft.Health.InvertedIndex.SearchIndex`2.Resolve(System.Collections.Generic.IList{`0},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  id: Resolve(System.Collections.Generic.IList{`0},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  parent: Microsoft.Health.InvertedIndex.SearchIndex`2
  langs:
  - csharp
  - vb
  name: Resolve(IList<T>, ref StructList<RecordIDEnumerator>)
  nameWithType: SearchIndex<T, TRecordIDList>.Resolve(IList<T>, ref StructList<RecordIDEnumerator>)
  fullName: Microsoft.Health.InvertedIndex.SearchIndex<T, TRecordIDList>.Resolve(System.Collections.Generic.IList<T>, ref Microsoft.Health.StructList<Microsoft.Health.InvertedIndex.RecordIDEnumerator>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/SearchIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Resolve
    path: search/InvertedIndex/SearchIndex.cs
    startLine: 116
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public void Resolve(IList<T> terms, ref StructList<RecordIDEnumerator> postingsList)
    content.vb: Public Sub Resolve(terms As IList(Of T), ByRef postingsList As StructList(Of RecordIDEnumerator))
    parameters:
    - id: terms
      type: System.Collections.Generic.IList{{T}}
      description: ''
    - id: postingsList
      type: Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}
      description: ''
  overload: Microsoft.Health.InvertedIndex.SearchIndex`2.Resolve*
  implements:
  - Microsoft.Health.InvertedIndex.ISearchIndex{{T},{TRecordIDList}}.Resolve(System.Collections.Generic.IList{{T}},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  nameWithType.vb: SearchIndex(Of T, TRecordIDList).Resolve(IList(Of T), ByRef StructList(Of RecordIDEnumerator))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.InvertedIndex.SearchIndex(Of T, TRecordIDList).Resolve(System.Collections.Generic.IList(Of T), ByRef Microsoft.Health.StructList(Of Microsoft.Health.InvertedIndex.RecordIDEnumerator))
  name.vb: Resolve(IList(Of T), ByRef StructList(Of RecordIDEnumerator))
- uid: Microsoft.Health.InvertedIndex.SearchIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  commentId: M:Microsoft.Health.InvertedIndex.SearchIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  id: Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  parent: Microsoft.Health.InvertedIndex.SearchIndex`2
  langs:
  - csharp
  - vb
  name: Resolve(IList<T>, Int32, Int32, ref StructList<RecordIDEnumerator>)
  nameWithType: SearchIndex<T, TRecordIDList>.Resolve(IList<T>, Int32, Int32, ref StructList<RecordIDEnumerator>)
  fullName: Microsoft.Health.InvertedIndex.SearchIndex<T, TRecordIDList>.Resolve(System.Collections.Generic.IList<T>, System.Int32, System.Int32, ref Microsoft.Health.StructList<Microsoft.Health.InvertedIndex.RecordIDEnumerator>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/SearchIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Resolve
    path: search/InvertedIndex/SearchIndex.cs
    startLine: 128
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public void Resolve(IList<T> terms, int startAt, int count, ref StructList<RecordIDEnumerator> postingsList)
    content.vb: Public Sub Resolve(terms As IList(Of T), startAt As Integer, count As Integer, ByRef postingsList As StructList(Of RecordIDEnumerator))
    parameters:
    - id: terms
      type: System.Collections.Generic.IList{{T}}
      description: ''
    - id: startAt
      type: System.Int32
      description: ''
    - id: count
      type: System.Int32
      description: ''
    - id: postingsList
      type: Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}
      description: ''
  overload: Microsoft.Health.InvertedIndex.SearchIndex`2.Resolve*
  implements:
  - Microsoft.Health.InvertedIndex.ISearchIndex{{T},{TRecordIDList}}.Resolve(System.Collections.Generic.IList{{T}},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  nameWithType.vb: SearchIndex(Of T, TRecordIDList).Resolve(IList(Of T), Int32, Int32, ByRef StructList(Of RecordIDEnumerator))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.InvertedIndex.SearchIndex(Of T, TRecordIDList).Resolve(System.Collections.Generic.IList(Of T), System.Int32, System.Int32, ByRef Microsoft.Health.StructList(Of Microsoft.Health.InvertedIndex.RecordIDEnumerator))
  name.vb: Resolve(IList(Of T), Int32, Int32, ByRef StructList(Of RecordIDEnumerator))
references:
- uid: Microsoft.Health.InvertedIndex
  commentId: N:Microsoft.Health.InvertedIndex
  isExternal: false
  name: Microsoft.Health.InvertedIndex
  nameWithType: Microsoft.Health.InvertedIndex
  fullName: Microsoft.Health.InvertedIndex
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}
  commentId: T:Microsoft.Health.SortedIndex{`0,`1}
  parent: Microsoft.Health
  definition: Microsoft.Health.SortedIndex`2
  name: SortedIndex<T, TRecordIDList>
  nameWithType: SortedIndex<T, TRecordIDList>
  fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>
  nameWithType.vb: SortedIndex(Of T, TRecordIDList)
  fullName.vb: Microsoft.Health.SortedIndex(Of T, TRecordIDList)
  name.vb: SortedIndex(Of T, TRecordIDList)
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2
    name: SortedIndex
    nameWithType: SortedIndex
    fullName: Microsoft.Health.SortedIndex
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2
    name: SortedIndex
    nameWithType: SortedIndex
    fullName: Microsoft.Health.SortedIndex
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.IIndex{{T},{TRecordIDList}}
  commentId: T:Microsoft.Health.IIndex{`0,`1}
  parent: Microsoft.Health
  definition: Microsoft.Health.IIndex`2
  name: IIndex<T, TRecordIDList>
  nameWithType: IIndex<T, TRecordIDList>
  fullName: Microsoft.Health.IIndex<T, TRecordIDList>
  nameWithType.vb: IIndex(Of T, TRecordIDList)
  fullName.vb: Microsoft.Health.IIndex(Of T, TRecordIDList)
  name.vb: IIndex(Of T, TRecordIDList)
  spec.csharp:
  - uid: Microsoft.Health.IIndex`2
    name: IIndex
    nameWithType: IIndex
    fullName: Microsoft.Health.IIndex
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.IIndex`2
    name: IIndex
    nameWithType: IIndex
    fullName: Microsoft.Health.IIndex
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{T},{TRecordIDList}}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<T, TRecordIDList>>
  nameWithType: IEnumerable<KeyValuePair<T, TRecordIDList>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<T, TRecordIDList>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of T, TRecordIDList))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of T, TRecordIDList))
  name.vb: IEnumerable(Of KeyValuePair(Of T, TRecordIDList))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.Generic.IComparer{{T}}
  commentId: T:System.Collections.Generic.IComparer{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.ISearchIndex{{T},{TRecordIDList}}
  commentId: T:Microsoft.Health.InvertedIndex.ISearchIndex{`0,`1}
  parent: Microsoft.Health.InvertedIndex
  definition: Microsoft.Health.InvertedIndex.ISearchIndex`2
  name: ISearchIndex<T, TRecordIDList>
  nameWithType: ISearchIndex<T, TRecordIDList>
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>
  nameWithType.vb: ISearchIndex(Of T, TRecordIDList)
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList)
  name.vb: ISearchIndex(Of T, TRecordIDList)
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2
    name: ISearchIndex
    nameWithType: ISearchIndex
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2
    name: ISearchIndex
    nameWithType: ISearchIndex
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.Count
  commentId: P:Microsoft.Health.SortedIndex{`0,`1}.Count
  parent: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}
  definition: Microsoft.Health.SortedIndex`2.Count
  name: Count
  nameWithType: SortedIndex<T, TRecordIDList>.Count
  fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.Count
  nameWithType.vb: SortedIndex(Of T, TRecordIDList).Count
  fullName.vb: Microsoft.Health.SortedIndex(Of T, TRecordIDList).Count
- uid: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.Item(System.Int32)
  commentId: P:Microsoft.Health.SortedIndex{`0,`1}.Item(System.Int32)
  parent: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}
  definition: Microsoft.Health.SortedIndex`2.Item(System.Int32)
  name: Item[Int32]
  nameWithType: SortedIndex<T, TRecordIDList>.Item[Int32]
  fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.Item[System.Int32]
  nameWithType.vb: SortedIndex(Of T, TRecordIDList).Item(Int32)
  fullName.vb: Microsoft.Health.SortedIndex(Of T, TRecordIDList).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2.Item(System.Int32)
    name: Item
    nameWithType: SortedIndex<T, TRecordIDList>.Item
    fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2.Item(System.Int32)
    name: Item
    nameWithType: SortedIndex(Of T, TRecordIDList).Item
    fullName: Microsoft.Health.SortedIndex(Of T, TRecordIDList).Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.IsReady
  commentId: P:Microsoft.Health.SortedIndex{`0,`1}.IsReady
  parent: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}
  definition: Microsoft.Health.SortedIndex`2.IsReady
  name: IsReady
  nameWithType: SortedIndex<T, TRecordIDList>.IsReady
  fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.IsReady
  nameWithType.vb: SortedIndex(Of T, TRecordIDList).IsReady
  fullName.vb: Microsoft.Health.SortedIndex(Of T, TRecordIDList).IsReady
- uid: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.Keys
  commentId: P:Microsoft.Health.SortedIndex{`0,`1}.Keys
  parent: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}
  definition: Microsoft.Health.SortedIndex`2.Keys
  name: Keys
  nameWithType: SortedIndex<T, TRecordIDList>.Keys
  fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.Keys
  nameWithType.vb: SortedIndex(Of T, TRecordIDList).Keys
  fullName.vb: Microsoft.Health.SortedIndex(Of T, TRecordIDList).Keys
- uid: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.Values
  commentId: P:Microsoft.Health.SortedIndex{`0,`1}.Values
  parent: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}
  definition: Microsoft.Health.SortedIndex`2.Values
  name: Values
  nameWithType: SortedIndex<T, TRecordIDList>.Values
  fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.Values
  nameWithType.vb: SortedIndex(Of T, TRecordIDList).Values
  fullName.vb: Microsoft.Health.SortedIndex(Of T, TRecordIDList).Values
- uid: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.ContainsKey({T})
  commentId: M:Microsoft.Health.SortedIndex{`0,`1}.ContainsKey(`0)
  parent: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}
  definition: Microsoft.Health.SortedIndex`2.ContainsKey(`0)
  name: ContainsKey(T)
  nameWithType: SortedIndex<T, TRecordIDList>.ContainsKey(T)
  fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.ContainsKey(T)
  nameWithType.vb: SortedIndex(Of T, TRecordIDList).ContainsKey(T)
  fullName.vb: Microsoft.Health.SortedIndex(Of T, TRecordIDList).ContainsKey(T)
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: SortedIndex<T, TRecordIDList>.ContainsKey
    fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.ContainsKey
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: SortedIndex(Of T, TRecordIDList).ContainsKey
    fullName: Microsoft.Health.SortedIndex(Of T, TRecordIDList).ContainsKey
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.Get({T},{TRecordIDList}@)
  commentId: M:Microsoft.Health.SortedIndex{`0,`1}.Get(`0,`1@)
  parent: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}
  definition: Microsoft.Health.SortedIndex`2.Get(`0,`1@)
  name: Get(T, TRecordIDList)
  nameWithType: SortedIndex<T, TRecordIDList>.Get(T, TRecordIDList)
  fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.Get(T, TRecordIDList)
  nameWithType.vb: SortedIndex(Of T, TRecordIDList).Get(T, TRecordIDList)
  fullName.vb: Microsoft.Health.SortedIndex(Of T, TRecordIDList).Get(T, TRecordIDList)
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2.Get(`0,`1@)
    name: Get
    nameWithType: SortedIndex<T, TRecordIDList>.Get
    fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.Get
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2.Get(`0,`1@)
    name: Get
    nameWithType: SortedIndex(Of T, TRecordIDList).Get
    fullName: Microsoft.Health.SortedIndex(Of T, TRecordIDList).Get
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.Get({T},System.Collections.Generic.IComparer{{T}},{TRecordIDList}@)
  commentId: M:Microsoft.Health.SortedIndex{`0,`1}.Get(`0,System.Collections.Generic.IComparer{`0},`1@)
  parent: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}
  definition: Microsoft.Health.SortedIndex`2.Get(`0,System.Collections.Generic.IComparer{`0},`1@)
  name: Get(T, IComparer<T>, TRecordIDList)
  nameWithType: SortedIndex<T, TRecordIDList>.Get(T, IComparer<T>, TRecordIDList)
  fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.Get(T, System.Collections.Generic.IComparer<T>, TRecordIDList)
  nameWithType.vb: SortedIndex(Of T, TRecordIDList).Get(T, IComparer(Of T), TRecordIDList)
  fullName.vb: Microsoft.Health.SortedIndex(Of T, TRecordIDList).Get(T, System.Collections.Generic.IComparer(Of T), TRecordIDList)
  name.vb: Get(T, IComparer(Of T), TRecordIDList)
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2.Get(`0,System.Collections.Generic.IComparer{`0},`1@)
    name: Get
    nameWithType: SortedIndex<T, TRecordIDList>.Get
    fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.Get
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2.Get(`0,System.Collections.Generic.IComparer{`0},`1@)
    name: Get
    nameWithType: SortedIndex(Of T, TRecordIDList).Get
    fullName: Microsoft.Health.SortedIndex(Of T, TRecordIDList).Get
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.GetMultiple({T})
  commentId: M:Microsoft.Health.SortedIndex{`0,`1}.GetMultiple(`0)
  parent: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}
  definition: Microsoft.Health.SortedIndex`2.GetMultiple(`0)
  name: GetMultiple(T)
  nameWithType: SortedIndex<T, TRecordIDList>.GetMultiple(T)
  fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.GetMultiple(T)
  nameWithType.vb: SortedIndex(Of T, TRecordIDList).GetMultiple(T)
  fullName.vb: Microsoft.Health.SortedIndex(Of T, TRecordIDList).GetMultiple(T)
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2.GetMultiple(`0)
    name: GetMultiple
    nameWithType: SortedIndex<T, TRecordIDList>.GetMultiple
    fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.GetMultiple
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2.GetMultiple(`0)
    name: GetMultiple
    nameWithType: SortedIndex(Of T, TRecordIDList).GetMultiple
    fullName: Microsoft.Health.SortedIndex(Of T, TRecordIDList).GetMultiple
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.GetKeys({T},System.Collections.Generic.IComparer{{T}})
  commentId: M:Microsoft.Health.SortedIndex{`0,`1}.GetKeys(`0,System.Collections.Generic.IComparer{`0})
  parent: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}
  definition: Microsoft.Health.SortedIndex`2.GetKeys(`0,System.Collections.Generic.IComparer{`0})
  name: GetKeys(T, IComparer<T>)
  nameWithType: SortedIndex<T, TRecordIDList>.GetKeys(T, IComparer<T>)
  fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.GetKeys(T, System.Collections.Generic.IComparer<T>)
  nameWithType.vb: SortedIndex(Of T, TRecordIDList).GetKeys(T, IComparer(Of T))
  fullName.vb: Microsoft.Health.SortedIndex(Of T, TRecordIDList).GetKeys(T, System.Collections.Generic.IComparer(Of T))
  name.vb: GetKeys(T, IComparer(Of T))
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2.GetKeys(`0,System.Collections.Generic.IComparer{`0})
    name: GetKeys
    nameWithType: SortedIndex<T, TRecordIDList>.GetKeys
    fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.GetKeys
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2.GetKeys(`0,System.Collections.Generic.IComparer{`0})
    name: GetKeys
    nameWithType: SortedIndex(Of T, TRecordIDList).GetKeys
    fullName: Microsoft.Health.SortedIndex(Of T, TRecordIDList).GetKeys
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.Add({T},{TRecordIDList})
  commentId: M:Microsoft.Health.SortedIndex{`0,`1}.Add(`0,`1)
  parent: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}
  definition: Microsoft.Health.SortedIndex`2.Add(`0,`1)
  name: Add(T, TRecordIDList)
  nameWithType: SortedIndex<T, TRecordIDList>.Add(T, TRecordIDList)
  fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.Add(T, TRecordIDList)
  nameWithType.vb: SortedIndex(Of T, TRecordIDList).Add(T, TRecordIDList)
  fullName.vb: Microsoft.Health.SortedIndex(Of T, TRecordIDList).Add(T, TRecordIDList)
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2.Add(`0,`1)
    name: Add
    nameWithType: SortedIndex<T, TRecordIDList>.Add
    fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.Add
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2.Add(`0,`1)
    name: Add
    nameWithType: SortedIndex(Of T, TRecordIDList).Add
    fullName: Microsoft.Health.SortedIndex(Of T, TRecordIDList).Add
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.Add(System.Collections.Generic.KeyValuePair{{T},{TRecordIDList}})
  commentId: M:Microsoft.Health.SortedIndex{`0,`1}.Add(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}
  definition: Microsoft.Health.SortedIndex`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})
  name: Add(KeyValuePair<T, TRecordIDList>)
  nameWithType: SortedIndex<T, TRecordIDList>.Add(KeyValuePair<T, TRecordIDList>)
  fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.Add(System.Collections.Generic.KeyValuePair<T, TRecordIDList>)
  nameWithType.vb: SortedIndex(Of T, TRecordIDList).Add(KeyValuePair(Of T, TRecordIDList))
  fullName.vb: Microsoft.Health.SortedIndex(Of T, TRecordIDList).Add(System.Collections.Generic.KeyValuePair(Of T, TRecordIDList))
  name.vb: Add(KeyValuePair(Of T, TRecordIDList))
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})
    name: Add
    nameWithType: SortedIndex<T, TRecordIDList>.Add
    fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})
    name: Add
    nameWithType: SortedIndex(Of T, TRecordIDList).Add
    fullName: Microsoft.Health.SortedIndex(Of T, TRecordIDList).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{T},{TRecordIDList}}})
  commentId: M:Microsoft.Health.SortedIndex{`0,`1}.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  parent: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}
  definition: Microsoft.Health.SortedIndex`2.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  name: Add(IEnumerable<KeyValuePair<T, TRecordIDList>>)
  nameWithType: SortedIndex<T, TRecordIDList>.Add(IEnumerable<KeyValuePair<T, TRecordIDList>>)
  fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.Add(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<T, TRecordIDList>>)
  nameWithType.vb: SortedIndex(Of T, TRecordIDList).Add(IEnumerable(Of KeyValuePair(Of T, TRecordIDList)))
  fullName.vb: Microsoft.Health.SortedIndex(Of T, TRecordIDList).Add(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of T, TRecordIDList)))
  name.vb: Add(IEnumerable(Of KeyValuePair(Of T, TRecordIDList)))
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
    name: Add
    nameWithType: SortedIndex<T, TRecordIDList>.Add
    fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
    name: Add
    nameWithType: SortedIndex(Of T, TRecordIDList).Add
    fullName: Microsoft.Health.SortedIndex(Of T, TRecordIDList).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.SetValue({T},{TRecordIDList})
  commentId: M:Microsoft.Health.SortedIndex{`0,`1}.SetValue(`0,`1)
  parent: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}
  definition: Microsoft.Health.SortedIndex`2.SetValue(`0,`1)
  name: SetValue(T, TRecordIDList)
  nameWithType: SortedIndex<T, TRecordIDList>.SetValue(T, TRecordIDList)
  fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.SetValue(T, TRecordIDList)
  nameWithType.vb: SortedIndex(Of T, TRecordIDList).SetValue(T, TRecordIDList)
  fullName.vb: Microsoft.Health.SortedIndex(Of T, TRecordIDList).SetValue(T, TRecordIDList)
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2.SetValue(`0,`1)
    name: SetValue
    nameWithType: SortedIndex<T, TRecordIDList>.SetValue
    fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.SetValue
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2.SetValue(`0,`1)
    name: SetValue
    nameWithType: SortedIndex(Of T, TRecordIDList).SetValue
    fullName: Microsoft.Health.SortedIndex(Of T, TRecordIDList).SetValue
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.SetValueAt(System.Int32,{TRecordIDList})
  commentId: M:Microsoft.Health.SortedIndex{`0,`1}.SetValueAt(System.Int32,`1)
  parent: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}
  definition: Microsoft.Health.SortedIndex`2.SetValueAt(System.Int32,`1)
  name: SetValueAt(Int32, TRecordIDList)
  nameWithType: SortedIndex<T, TRecordIDList>.SetValueAt(Int32, TRecordIDList)
  fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.SetValueAt(System.Int32, TRecordIDList)
  nameWithType.vb: SortedIndex(Of T, TRecordIDList).SetValueAt(Int32, TRecordIDList)
  fullName.vb: Microsoft.Health.SortedIndex(Of T, TRecordIDList).SetValueAt(System.Int32, TRecordIDList)
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2.SetValueAt(System.Int32,`1)
    name: SetValueAt
    nameWithType: SortedIndex<T, TRecordIDList>.SetValueAt
    fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.SetValueAt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2.SetValueAt(System.Int32,`1)
    name: SetValueAt
    nameWithType: SortedIndex(Of T, TRecordIDList).SetValueAt
    fullName: Microsoft.Health.SortedIndex(Of T, TRecordIDList).SetValueAt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.BuildIndex
  commentId: M:Microsoft.Health.SortedIndex{`0,`1}.BuildIndex
  parent: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}
  definition: Microsoft.Health.SortedIndex`2.BuildIndex
  name: BuildIndex()
  nameWithType: SortedIndex<T, TRecordIDList>.BuildIndex()
  fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.BuildIndex()
  nameWithType.vb: SortedIndex(Of T, TRecordIDList).BuildIndex()
  fullName.vb: Microsoft.Health.SortedIndex(Of T, TRecordIDList).BuildIndex()
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2.BuildIndex
    name: BuildIndex
    nameWithType: SortedIndex<T, TRecordIDList>.BuildIndex
    fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.BuildIndex
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2.BuildIndex
    name: BuildIndex
    nameWithType: SortedIndex(Of T, TRecordIDList).BuildIndex
    fullName: Microsoft.Health.SortedIndex(Of T, TRecordIDList).BuildIndex
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.BuildIndex(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{T},{TRecordIDList}}})
  commentId: M:Microsoft.Health.SortedIndex{`0,`1}.BuildIndex(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  parent: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}
  definition: Microsoft.Health.SortedIndex`2.BuildIndex(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  name: BuildIndex(IEnumerable<KeyValuePair<T, TRecordIDList>>)
  nameWithType: SortedIndex<T, TRecordIDList>.BuildIndex(IEnumerable<KeyValuePair<T, TRecordIDList>>)
  fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.BuildIndex(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<T, TRecordIDList>>)
  nameWithType.vb: SortedIndex(Of T, TRecordIDList).BuildIndex(IEnumerable(Of KeyValuePair(Of T, TRecordIDList)))
  fullName.vb: Microsoft.Health.SortedIndex(Of T, TRecordIDList).BuildIndex(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of T, TRecordIDList)))
  name.vb: BuildIndex(IEnumerable(Of KeyValuePair(Of T, TRecordIDList)))
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2.BuildIndex(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
    name: BuildIndex
    nameWithType: SortedIndex<T, TRecordIDList>.BuildIndex
    fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.BuildIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2.BuildIndex(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
    name: BuildIndex
    nameWithType: SortedIndex(Of T, TRecordIDList).BuildIndex
    fullName: Microsoft.Health.SortedIndex(Of T, TRecordIDList).BuildIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.EnsureCapacity(System.Int32)
  commentId: M:Microsoft.Health.SortedIndex{`0,`1}.EnsureCapacity(System.Int32)
  parent: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}
  definition: Microsoft.Health.SortedIndex`2.EnsureCapacity(System.Int32)
  name: EnsureCapacity(Int32)
  nameWithType: SortedIndex<T, TRecordIDList>.EnsureCapacity(Int32)
  fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.EnsureCapacity(System.Int32)
  nameWithType.vb: SortedIndex(Of T, TRecordIDList).EnsureCapacity(Int32)
  fullName.vb: Microsoft.Health.SortedIndex(Of T, TRecordIDList).EnsureCapacity(System.Int32)
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2.EnsureCapacity(System.Int32)
    name: EnsureCapacity
    nameWithType: SortedIndex<T, TRecordIDList>.EnsureCapacity
    fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.EnsureCapacity
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2.EnsureCapacity(System.Int32)
    name: EnsureCapacity
    nameWithType: SortedIndex(Of T, TRecordIDList).EnsureCapacity
    fullName: Microsoft.Health.SortedIndex(Of T, TRecordIDList).EnsureCapacity
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.IndexOf({T})
  commentId: M:Microsoft.Health.SortedIndex{`0,`1}.IndexOf(`0)
  parent: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}
  definition: Microsoft.Health.SortedIndex`2.IndexOf(`0)
  name: IndexOf(T)
  nameWithType: SortedIndex<T, TRecordIDList>.IndexOf(T)
  fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.IndexOf(T)
  nameWithType.vb: SortedIndex(Of T, TRecordIDList).IndexOf(T)
  fullName.vb: Microsoft.Health.SortedIndex(Of T, TRecordIDList).IndexOf(T)
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2.IndexOf(`0)
    name: IndexOf
    nameWithType: SortedIndex<T, TRecordIDList>.IndexOf
    fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.IndexOf
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2.IndexOf(`0)
    name: IndexOf
    nameWithType: SortedIndex(Of T, TRecordIDList).IndexOf
    fullName: Microsoft.Health.SortedIndex(Of T, TRecordIDList).IndexOf
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.IndexOf({T},System.Collections.Generic.IComparer{{T}})
  commentId: M:Microsoft.Health.SortedIndex{`0,`1}.IndexOf(`0,System.Collections.Generic.IComparer{`0})
  parent: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}
  definition: Microsoft.Health.SortedIndex`2.IndexOf(`0,System.Collections.Generic.IComparer{`0})
  name: IndexOf(T, IComparer<T>)
  nameWithType: SortedIndex<T, TRecordIDList>.IndexOf(T, IComparer<T>)
  fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.IndexOf(T, System.Collections.Generic.IComparer<T>)
  nameWithType.vb: SortedIndex(Of T, TRecordIDList).IndexOf(T, IComparer(Of T))
  fullName.vb: Microsoft.Health.SortedIndex(Of T, TRecordIDList).IndexOf(T, System.Collections.Generic.IComparer(Of T))
  name.vb: IndexOf(T, IComparer(Of T))
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2.IndexOf(`0,System.Collections.Generic.IComparer{`0})
    name: IndexOf
    nameWithType: SortedIndex<T, TRecordIDList>.IndexOf
    fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.IndexOf
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2.IndexOf(`0,System.Collections.Generic.IComparer{`0})
    name: IndexOf
    nameWithType: SortedIndex(Of T, TRecordIDList).IndexOf
    fullName: Microsoft.Health.SortedIndex(Of T, TRecordIDList).IndexOf
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.EnsureReady
  commentId: M:Microsoft.Health.SortedIndex{`0,`1}.EnsureReady
  parent: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}
  definition: Microsoft.Health.SortedIndex`2.EnsureReady
  name: EnsureReady()
  nameWithType: SortedIndex<T, TRecordIDList>.EnsureReady()
  fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.EnsureReady()
  nameWithType.vb: SortedIndex(Of T, TRecordIDList).EnsureReady()
  fullName.vb: Microsoft.Health.SortedIndex(Of T, TRecordIDList).EnsureReady()
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2.EnsureReady
    name: EnsureReady
    nameWithType: SortedIndex<T, TRecordIDList>.EnsureReady
    fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.EnsureReady
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2.EnsureReady
    name: EnsureReady
    nameWithType: SortedIndex(Of T, TRecordIDList).EnsureReady
    fullName: Microsoft.Health.SortedIndex(Of T, TRecordIDList).EnsureReady
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.GetEnumerator
  commentId: M:Microsoft.Health.SortedIndex{`0,`1}.GetEnumerator
  parent: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}
  definition: Microsoft.Health.SortedIndex`2.GetEnumerator
  name: GetEnumerator()
  nameWithType: SortedIndex<T, TRecordIDList>.GetEnumerator()
  fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.GetEnumerator()
  nameWithType.vb: SortedIndex(Of T, TRecordIDList).GetEnumerator()
  fullName.vb: Microsoft.Health.SortedIndex(Of T, TRecordIDList).GetEnumerator()
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2.GetEnumerator
    name: GetEnumerator
    nameWithType: SortedIndex<T, TRecordIDList>.GetEnumerator
    fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2.GetEnumerator
    name: GetEnumerator
    nameWithType: SortedIndex(Of T, TRecordIDList).GetEnumerator
    fullName: Microsoft.Health.SortedIndex(Of T, TRecordIDList).GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.System#Collections#IEnumerable#GetEnumerator
  commentId: M:Microsoft.Health.SortedIndex{`0,`1}.System#Collections#IEnumerable#GetEnumerator
  parent: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}
  definition: Microsoft.Health.SortedIndex`2.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator()
  nameWithType: SortedIndex<T, TRecordIDList>.IEnumerable.GetEnumerator()
  fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: SortedIndex(Of T, TRecordIDList).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: Microsoft.Health.SortedIndex(Of T, TRecordIDList).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: SortedIndex<T, TRecordIDList>.IEnumerable.GetEnumerator
    fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: SortedIndex(Of T, TRecordIDList).System.Collections.IEnumerable.GetEnumerator
    fullName: Microsoft.Health.SortedIndex(Of T, TRecordIDList).System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}.Compare({T},{T})
  commentId: M:Microsoft.Health.SortedIndex{`0,`1}.Compare(`0,`0)
  parent: Microsoft.Health.SortedIndex{{T},{TRecordIDList}}
  definition: Microsoft.Health.SortedIndex`2.Compare(`0,`0)
  name: Compare(T, T)
  nameWithType: SortedIndex<T, TRecordIDList>.Compare(T, T)
  fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.Compare(T, T)
  nameWithType.vb: SortedIndex(Of T, TRecordIDList).Compare(T, T)
  fullName.vb: Microsoft.Health.SortedIndex(Of T, TRecordIDList).Compare(T, T)
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2.Compare(`0,`0)
    name: Compare
    nameWithType: SortedIndex<T, TRecordIDList>.Compare
    fullName: Microsoft.Health.SortedIndex<T, TRecordIDList>.Compare
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2.Compare(`0,`0)
    name: Compare
    nameWithType: SortedIndex(Of T, TRecordIDList).Compare
    fullName: Microsoft.Health.SortedIndex(Of T, TRecordIDList).Compare
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  name: SetProperty(String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object())
  name.vb: SetProperty(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  name: InvokeMethod(String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object())
  name.vb: InvokeMethod(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  parent: Microsoft.Health.Utility.InvariantString
  definition: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  name: ToStringInvariant()
  nameWithType: InvariantString.ToStringInvariant()
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant()
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.SearchIndex`2.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  parent: Microsoft.Health.Utility.TypeHelper
  definition: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  name: ValueOrDbNull<SearchIndex<T, TRecordIDList>>()
  nameWithType: TypeHelper.ValueOrDbNull<SearchIndex<T, TRecordIDList>>()
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.InvertedIndex.SearchIndex<T, TRecordIDList>>()
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of SearchIndex(Of T, TRecordIDList))()
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.InvertedIndex.SearchIndex(Of T, TRecordIDList))()
  name.vb: ValueOrDbNull(Of SearchIndex(Of T, TRecordIDList))()
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull<SearchIndex<T, TRecordIDList>>
    nameWithType: TypeHelper.ValueOrDbNull<SearchIndex<T, TRecordIDList>>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.InvertedIndex.SearchIndex<T, TRecordIDList>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull(Of SearchIndex(Of T, TRecordIDList))
    nameWithType: TypeHelper.ValueOrDbNull(Of SearchIndex(Of T, TRecordIDList))
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.InvertedIndex.SearchIndex(Of T, TRecordIDList))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  parent: Microsoft.Health.Utility.WCXmlHelper
  definition: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  name: ToXml()
  nameWithType: WCXmlHelper.ToXml()
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml()
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.SortedIndex`2
  commentId: T:Microsoft.Health.SortedIndex`2
  isExternal: false
  name: SortedIndex<K, V>
  nameWithType: SortedIndex<K, V>
  fullName: Microsoft.Health.SortedIndex<K, V>
  nameWithType.vb: SortedIndex(Of K, V)
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V)
  name.vb: SortedIndex(Of K, V)
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2
    name: SortedIndex
    nameWithType: SortedIndex
    fullName: Microsoft.Health.SortedIndex
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2
    name: SortedIndex
    nameWithType: SortedIndex
    fullName: Microsoft.Health.SortedIndex
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: Microsoft.Health.IIndex`2
  commentId: T:Microsoft.Health.IIndex`2
  isExternal: false
  name: IIndex<K, V>
  nameWithType: IIndex<K, V>
  fullName: Microsoft.Health.IIndex<K, V>
  nameWithType.vb: IIndex(Of K, V)
  fullName.vb: Microsoft.Health.IIndex(Of K, V)
  name.vb: IIndex(Of K, V)
  spec.csharp:
  - uid: Microsoft.Health.IIndex`2
    name: IIndex
    nameWithType: IIndex
    fullName: Microsoft.Health.IIndex
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.IIndex`2
    name: IIndex
    nameWithType: IIndex
    fullName: Microsoft.Health.IIndex
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.IComparer`1
  commentId: T:System.Collections.Generic.IComparer`1
  isExternal: true
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.ISearchIndex`2
  commentId: T:Microsoft.Health.InvertedIndex.ISearchIndex`2
  isExternal: false
  name: ISearchIndex<T, TRecordIDList>
  nameWithType: ISearchIndex<T, TRecordIDList>
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>
  nameWithType.vb: ISearchIndex(Of T, TRecordIDList)
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList)
  name.vb: ISearchIndex(Of T, TRecordIDList)
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2
    name: ISearchIndex
    nameWithType: ISearchIndex
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2
    name: ISearchIndex
    nameWithType: ISearchIndex
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex`2.Count
  commentId: P:Microsoft.Health.SortedIndex`2.Count
  isExternal: false
  name: Count
  nameWithType: SortedIndex<K, V>.Count
  fullName: Microsoft.Health.SortedIndex<K, V>.Count
  nameWithType.vb: SortedIndex(Of K, V).Count
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).Count
- uid: Microsoft.Health.SortedIndex`2.Item(System.Int32)
  commentId: P:Microsoft.Health.SortedIndex`2.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: SortedIndex<K, V>.Item[Int32]
  fullName: Microsoft.Health.SortedIndex<K, V>.Item[System.Int32]
  nameWithType.vb: SortedIndex(Of K, V).Item(Int32)
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2.Item(System.Int32)
    name: Item
    nameWithType: SortedIndex<K, V>.Item
    fullName: Microsoft.Health.SortedIndex<K, V>.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2.Item(System.Int32)
    name: Item
    nameWithType: SortedIndex(Of K, V).Item
    fullName: Microsoft.Health.SortedIndex(Of K, V).Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex`2.IsReady
  commentId: P:Microsoft.Health.SortedIndex`2.IsReady
  isExternal: false
  name: IsReady
  nameWithType: SortedIndex<K, V>.IsReady
  fullName: Microsoft.Health.SortedIndex<K, V>.IsReady
  nameWithType.vb: SortedIndex(Of K, V).IsReady
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).IsReady
- uid: Microsoft.Health.SortedIndex`2.Keys
  commentId: P:Microsoft.Health.SortedIndex`2.Keys
  isExternal: false
  name: Keys
  nameWithType: SortedIndex<K, V>.Keys
  fullName: Microsoft.Health.SortedIndex<K, V>.Keys
  nameWithType.vb: SortedIndex(Of K, V).Keys
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).Keys
- uid: Microsoft.Health.SortedIndex`2.Values
  commentId: P:Microsoft.Health.SortedIndex`2.Values
  isExternal: false
  name: Values
  nameWithType: SortedIndex<K, V>.Values
  fullName: Microsoft.Health.SortedIndex<K, V>.Values
  nameWithType.vb: SortedIndex(Of K, V).Values
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).Values
- uid: Microsoft.Health.SortedIndex`2.ContainsKey(`0)
  commentId: M:Microsoft.Health.SortedIndex`2.ContainsKey(`0)
  isExternal: false
  name: ContainsKey(K)
  nameWithType: SortedIndex<K, V>.ContainsKey(K)
  fullName: Microsoft.Health.SortedIndex<K, V>.ContainsKey(K)
  nameWithType.vb: SortedIndex(Of K, V).ContainsKey(K)
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).ContainsKey(K)
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: SortedIndex<K, V>.ContainsKey
    fullName: Microsoft.Health.SortedIndex<K, V>.ContainsKey
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: SortedIndex(Of K, V).ContainsKey
    fullName: Microsoft.Health.SortedIndex(Of K, V).ContainsKey
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex`2.Get(`0,`1@)
  commentId: M:Microsoft.Health.SortedIndex`2.Get(`0,`1@)
  isExternal: false
  name: Get(K, V)
  nameWithType: SortedIndex<K, V>.Get(K, V)
  fullName: Microsoft.Health.SortedIndex<K, V>.Get(K, V)
  nameWithType.vb: SortedIndex(Of K, V).Get(K, V)
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).Get(K, V)
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2.Get(`0,`1@)
    name: Get
    nameWithType: SortedIndex<K, V>.Get
    fullName: Microsoft.Health.SortedIndex<K, V>.Get
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2.Get(`0,`1@)
    name: Get
    nameWithType: SortedIndex(Of K, V).Get
    fullName: Microsoft.Health.SortedIndex(Of K, V).Get
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex`2.Get(`0,System.Collections.Generic.IComparer{`0},`1@)
  commentId: M:Microsoft.Health.SortedIndex`2.Get(`0,System.Collections.Generic.IComparer{`0},`1@)
  isExternal: true
  name: Get(K, IComparer<K>, V)
  nameWithType: SortedIndex<K, V>.Get(K, IComparer<K>, V)
  fullName: Microsoft.Health.SortedIndex<K, V>.Get(K, System.Collections.Generic.IComparer<K>, V)
  nameWithType.vb: SortedIndex(Of K, V).Get(K, IComparer(Of K), V)
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).Get(K, System.Collections.Generic.IComparer(Of K), V)
  name.vb: Get(K, IComparer(Of K), V)
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2.Get(`0,System.Collections.Generic.IComparer{`0},`1@)
    name: Get
    nameWithType: SortedIndex<K, V>.Get
    fullName: Microsoft.Health.SortedIndex<K, V>.Get
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2.Get(`0,System.Collections.Generic.IComparer{`0},`1@)
    name: Get
    nameWithType: SortedIndex(Of K, V).Get
    fullName: Microsoft.Health.SortedIndex(Of K, V).Get
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex`2.GetMultiple(`0)
  commentId: M:Microsoft.Health.SortedIndex`2.GetMultiple(`0)
  isExternal: false
  name: GetMultiple(K)
  nameWithType: SortedIndex<K, V>.GetMultiple(K)
  fullName: Microsoft.Health.SortedIndex<K, V>.GetMultiple(K)
  nameWithType.vb: SortedIndex(Of K, V).GetMultiple(K)
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).GetMultiple(K)
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2.GetMultiple(`0)
    name: GetMultiple
    nameWithType: SortedIndex<K, V>.GetMultiple
    fullName: Microsoft.Health.SortedIndex<K, V>.GetMultiple
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2.GetMultiple(`0)
    name: GetMultiple
    nameWithType: SortedIndex(Of K, V).GetMultiple
    fullName: Microsoft.Health.SortedIndex(Of K, V).GetMultiple
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex`2.GetKeys(`0,System.Collections.Generic.IComparer{`0})
  commentId: M:Microsoft.Health.SortedIndex`2.GetKeys(`0,System.Collections.Generic.IComparer{`0})
  isExternal: true
  name: GetKeys(K, IComparer<K>)
  nameWithType: SortedIndex<K, V>.GetKeys(K, IComparer<K>)
  fullName: Microsoft.Health.SortedIndex<K, V>.GetKeys(K, System.Collections.Generic.IComparer<K>)
  nameWithType.vb: SortedIndex(Of K, V).GetKeys(K, IComparer(Of K))
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).GetKeys(K, System.Collections.Generic.IComparer(Of K))
  name.vb: GetKeys(K, IComparer(Of K))
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2.GetKeys(`0,System.Collections.Generic.IComparer{`0})
    name: GetKeys
    nameWithType: SortedIndex<K, V>.GetKeys
    fullName: Microsoft.Health.SortedIndex<K, V>.GetKeys
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2.GetKeys(`0,System.Collections.Generic.IComparer{`0})
    name: GetKeys
    nameWithType: SortedIndex(Of K, V).GetKeys
    fullName: Microsoft.Health.SortedIndex(Of K, V).GetKeys
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex`2.Add(`0,`1)
  commentId: M:Microsoft.Health.SortedIndex`2.Add(`0,`1)
  isExternal: false
  name: Add(K, V)
  nameWithType: SortedIndex<K, V>.Add(K, V)
  fullName: Microsoft.Health.SortedIndex<K, V>.Add(K, V)
  nameWithType.vb: SortedIndex(Of K, V).Add(K, V)
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).Add(K, V)
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2.Add(`0,`1)
    name: Add
    nameWithType: SortedIndex<K, V>.Add
    fullName: Microsoft.Health.SortedIndex<K, V>.Add
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2.Add(`0,`1)
    name: Add
    nameWithType: SortedIndex(Of K, V).Add
    fullName: Microsoft.Health.SortedIndex(Of K, V).Add
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})
  commentId: M:Microsoft.Health.SortedIndex`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})
  isExternal: true
  name: Add(KeyValuePair<K, V>)
  nameWithType: SortedIndex<K, V>.Add(KeyValuePair<K, V>)
  fullName: Microsoft.Health.SortedIndex<K, V>.Add(System.Collections.Generic.KeyValuePair<K, V>)
  nameWithType.vb: SortedIndex(Of K, V).Add(KeyValuePair(Of K, V))
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).Add(System.Collections.Generic.KeyValuePair(Of K, V))
  name.vb: Add(KeyValuePair(Of K, V))
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})
    name: Add
    nameWithType: SortedIndex<K, V>.Add
    fullName: Microsoft.Health.SortedIndex<K, V>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})
    name: Add
    nameWithType: SortedIndex(Of K, V).Add
    fullName: Microsoft.Health.SortedIndex(Of K, V).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex`2.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  commentId: M:Microsoft.Health.SortedIndex`2.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  isExternal: true
  name: Add(IEnumerable<KeyValuePair<K, V>>)
  nameWithType: SortedIndex<K, V>.Add(IEnumerable<KeyValuePair<K, V>>)
  fullName: Microsoft.Health.SortedIndex<K, V>.Add(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<K, V>>)
  nameWithType.vb: SortedIndex(Of K, V).Add(IEnumerable(Of KeyValuePair(Of K, V)))
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).Add(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of K, V)))
  name.vb: Add(IEnumerable(Of KeyValuePair(Of K, V)))
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
    name: Add
    nameWithType: SortedIndex<K, V>.Add
    fullName: Microsoft.Health.SortedIndex<K, V>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
    name: Add
    nameWithType: SortedIndex(Of K, V).Add
    fullName: Microsoft.Health.SortedIndex(Of K, V).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex`2.SetValue(`0,`1)
  commentId: M:Microsoft.Health.SortedIndex`2.SetValue(`0,`1)
  isExternal: false
  name: SetValue(K, V)
  nameWithType: SortedIndex<K, V>.SetValue(K, V)
  fullName: Microsoft.Health.SortedIndex<K, V>.SetValue(K, V)
  nameWithType.vb: SortedIndex(Of K, V).SetValue(K, V)
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).SetValue(K, V)
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2.SetValue(`0,`1)
    name: SetValue
    nameWithType: SortedIndex<K, V>.SetValue
    fullName: Microsoft.Health.SortedIndex<K, V>.SetValue
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2.SetValue(`0,`1)
    name: SetValue
    nameWithType: SortedIndex(Of K, V).SetValue
    fullName: Microsoft.Health.SortedIndex(Of K, V).SetValue
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex`2.SetValueAt(System.Int32,`1)
  commentId: M:Microsoft.Health.SortedIndex`2.SetValueAt(System.Int32,`1)
  isExternal: true
  name: SetValueAt(Int32, V)
  nameWithType: SortedIndex<K, V>.SetValueAt(Int32, V)
  fullName: Microsoft.Health.SortedIndex<K, V>.SetValueAt(System.Int32, V)
  nameWithType.vb: SortedIndex(Of K, V).SetValueAt(Int32, V)
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).SetValueAt(System.Int32, V)
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2.SetValueAt(System.Int32,`1)
    name: SetValueAt
    nameWithType: SortedIndex<K, V>.SetValueAt
    fullName: Microsoft.Health.SortedIndex<K, V>.SetValueAt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2.SetValueAt(System.Int32,`1)
    name: SetValueAt
    nameWithType: SortedIndex(Of K, V).SetValueAt
    fullName: Microsoft.Health.SortedIndex(Of K, V).SetValueAt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex`2.BuildIndex
  commentId: M:Microsoft.Health.SortedIndex`2.BuildIndex
  isExternal: false
  name: BuildIndex()
  nameWithType: SortedIndex<K, V>.BuildIndex()
  fullName: Microsoft.Health.SortedIndex<K, V>.BuildIndex()
  nameWithType.vb: SortedIndex(Of K, V).BuildIndex()
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).BuildIndex()
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2.BuildIndex
    name: BuildIndex
    nameWithType: SortedIndex<K, V>.BuildIndex
    fullName: Microsoft.Health.SortedIndex<K, V>.BuildIndex
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2.BuildIndex
    name: BuildIndex
    nameWithType: SortedIndex(Of K, V).BuildIndex
    fullName: Microsoft.Health.SortedIndex(Of K, V).BuildIndex
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex`2.BuildIndex(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  commentId: M:Microsoft.Health.SortedIndex`2.BuildIndex(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  isExternal: true
  name: BuildIndex(IEnumerable<KeyValuePair<K, V>>)
  nameWithType: SortedIndex<K, V>.BuildIndex(IEnumerable<KeyValuePair<K, V>>)
  fullName: Microsoft.Health.SortedIndex<K, V>.BuildIndex(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<K, V>>)
  nameWithType.vb: SortedIndex(Of K, V).BuildIndex(IEnumerable(Of KeyValuePair(Of K, V)))
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).BuildIndex(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of K, V)))
  name.vb: BuildIndex(IEnumerable(Of KeyValuePair(Of K, V)))
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2.BuildIndex(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
    name: BuildIndex
    nameWithType: SortedIndex<K, V>.BuildIndex
    fullName: Microsoft.Health.SortedIndex<K, V>.BuildIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2.BuildIndex(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
    name: BuildIndex
    nameWithType: SortedIndex(Of K, V).BuildIndex
    fullName: Microsoft.Health.SortedIndex(Of K, V).BuildIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex`2.EnsureCapacity(System.Int32)
  commentId: M:Microsoft.Health.SortedIndex`2.EnsureCapacity(System.Int32)
  isExternal: true
  name: EnsureCapacity(Int32)
  nameWithType: SortedIndex<K, V>.EnsureCapacity(Int32)
  fullName: Microsoft.Health.SortedIndex<K, V>.EnsureCapacity(System.Int32)
  nameWithType.vb: SortedIndex(Of K, V).EnsureCapacity(Int32)
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).EnsureCapacity(System.Int32)
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2.EnsureCapacity(System.Int32)
    name: EnsureCapacity
    nameWithType: SortedIndex<K, V>.EnsureCapacity
    fullName: Microsoft.Health.SortedIndex<K, V>.EnsureCapacity
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2.EnsureCapacity(System.Int32)
    name: EnsureCapacity
    nameWithType: SortedIndex(Of K, V).EnsureCapacity
    fullName: Microsoft.Health.SortedIndex(Of K, V).EnsureCapacity
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex`2.IndexOf(`0)
  commentId: M:Microsoft.Health.SortedIndex`2.IndexOf(`0)
  isExternal: false
  name: IndexOf(K)
  nameWithType: SortedIndex<K, V>.IndexOf(K)
  fullName: Microsoft.Health.SortedIndex<K, V>.IndexOf(K)
  nameWithType.vb: SortedIndex(Of K, V).IndexOf(K)
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).IndexOf(K)
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2.IndexOf(`0)
    name: IndexOf
    nameWithType: SortedIndex<K, V>.IndexOf
    fullName: Microsoft.Health.SortedIndex<K, V>.IndexOf
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2.IndexOf(`0)
    name: IndexOf
    nameWithType: SortedIndex(Of K, V).IndexOf
    fullName: Microsoft.Health.SortedIndex(Of K, V).IndexOf
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex`2.IndexOf(`0,System.Collections.Generic.IComparer{`0})
  commentId: M:Microsoft.Health.SortedIndex`2.IndexOf(`0,System.Collections.Generic.IComparer{`0})
  isExternal: true
  name: IndexOf(K, IComparer<K>)
  nameWithType: SortedIndex<K, V>.IndexOf(K, IComparer<K>)
  fullName: Microsoft.Health.SortedIndex<K, V>.IndexOf(K, System.Collections.Generic.IComparer<K>)
  nameWithType.vb: SortedIndex(Of K, V).IndexOf(K, IComparer(Of K))
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).IndexOf(K, System.Collections.Generic.IComparer(Of K))
  name.vb: IndexOf(K, IComparer(Of K))
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2.IndexOf(`0,System.Collections.Generic.IComparer{`0})
    name: IndexOf
    nameWithType: SortedIndex<K, V>.IndexOf
    fullName: Microsoft.Health.SortedIndex<K, V>.IndexOf
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2.IndexOf(`0,System.Collections.Generic.IComparer{`0})
    name: IndexOf
    nameWithType: SortedIndex(Of K, V).IndexOf
    fullName: Microsoft.Health.SortedIndex(Of K, V).IndexOf
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex`2.EnsureReady
  commentId: M:Microsoft.Health.SortedIndex`2.EnsureReady
  isExternal: false
  name: EnsureReady()
  nameWithType: SortedIndex<K, V>.EnsureReady()
  fullName: Microsoft.Health.SortedIndex<K, V>.EnsureReady()
  nameWithType.vb: SortedIndex(Of K, V).EnsureReady()
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).EnsureReady()
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2.EnsureReady
    name: EnsureReady
    nameWithType: SortedIndex<K, V>.EnsureReady
    fullName: Microsoft.Health.SortedIndex<K, V>.EnsureReady
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2.EnsureReady
    name: EnsureReady
    nameWithType: SortedIndex(Of K, V).EnsureReady
    fullName: Microsoft.Health.SortedIndex(Of K, V).EnsureReady
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex`2.GetEnumerator
  commentId: M:Microsoft.Health.SortedIndex`2.GetEnumerator
  isExternal: false
  name: GetEnumerator()
  nameWithType: SortedIndex<K, V>.GetEnumerator()
  fullName: Microsoft.Health.SortedIndex<K, V>.GetEnumerator()
  nameWithType.vb: SortedIndex(Of K, V).GetEnumerator()
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).GetEnumerator()
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2.GetEnumerator
    name: GetEnumerator
    nameWithType: SortedIndex<K, V>.GetEnumerator
    fullName: Microsoft.Health.SortedIndex<K, V>.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2.GetEnumerator
    name: GetEnumerator
    nameWithType: SortedIndex(Of K, V).GetEnumerator
    fullName: Microsoft.Health.SortedIndex(Of K, V).GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex`2.System#Collections#IEnumerable#GetEnumerator
  commentId: M:Microsoft.Health.SortedIndex`2.System#Collections#IEnumerable#GetEnumerator
  isExternal: false
  name: IEnumerable.GetEnumerator()
  nameWithType: SortedIndex<K, V>.IEnumerable.GetEnumerator()
  fullName: Microsoft.Health.SortedIndex<K, V>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: SortedIndex(Of K, V).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: SortedIndex<K, V>.IEnumerable.GetEnumerator
    fullName: Microsoft.Health.SortedIndex<K, V>.System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: SortedIndex(Of K, V).System.Collections.IEnumerable.GetEnumerator
    fullName: Microsoft.Health.SortedIndex(Of K, V).System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.SortedIndex`2.Compare(`0,`0)
  commentId: M:Microsoft.Health.SortedIndex`2.Compare(`0,`0)
  isExternal: false
  name: Compare(K, K)
  nameWithType: SortedIndex<K, V>.Compare(K, K)
  fullName: Microsoft.Health.SortedIndex<K, V>.Compare(K, K)
  nameWithType.vb: SortedIndex(Of K, V).Compare(K, K)
  fullName.vb: Microsoft.Health.SortedIndex(Of K, V).Compare(K, K)
  spec.csharp:
  - uid: Microsoft.Health.SortedIndex`2.Compare(`0,`0)
    name: Compare
    nameWithType: SortedIndex<K, V>.Compare
    fullName: Microsoft.Health.SortedIndex<K, V>.Compare
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.SortedIndex`2.Compare(`0,`0)
    name: Compare
    nameWithType: SortedIndex(Of K, V).Compare
    fullName: Microsoft.Health.SortedIndex(Of K, V).Compare
  - name: (
    nameWithType: (
    fullName: (
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  isExternal: true
  name: SetProperty(Object, String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object())
  name.vb: SetProperty(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions
  commentId: T:Microsoft.Health.Utility.IDispatchExtensions
  parent: Microsoft.Health.Utility
  isExternal: false
  name: IDispatchExtensions
  nameWithType: IDispatchExtensions
  fullName: Microsoft.Health.Utility.IDispatchExtensions
- uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  isExternal: true
  name: InvokeMethod(Object, String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object())
  name.vb: InvokeMethod(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  isExternal: true
  name: ToStringInvariant(Object)
  nameWithType: InvariantString.ToStringInvariant(Object)
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString
  commentId: T:Microsoft.Health.Utility.InvariantString
  parent: Microsoft.Health.Utility
  isExternal: false
  name: InvariantString
  nameWithType: InvariantString
  fullName: Microsoft.Health.Utility.InvariantString
- uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  isExternal: false
  name: ValueOrDbNull<T>(T)
  nameWithType: TypeHelper.ValueOrDbNull<T>(T)
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>(T)
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of T)(T)
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)(T)
  name.vb: ValueOrDbNull(Of T)(T)
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull<T>
    nameWithType: TypeHelper.ValueOrDbNull<T>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull(Of T)
    nameWithType: TypeHelper.ValueOrDbNull(Of T)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.TypeHelper
  commentId: T:Microsoft.Health.Utility.TypeHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: TypeHelper
  nameWithType: TypeHelper
  fullName: Microsoft.Health.Utility.TypeHelper
- uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  isExternal: true
  name: ToXml(Object)
  nameWithType: WCXmlHelper.ToXml(Object)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.WCXmlHelper
  commentId: T:Microsoft.Health.Utility.WCXmlHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: WCXmlHelper
  nameWithType: WCXmlHelper
  fullName: Microsoft.Health.Utility.WCXmlHelper
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: Microsoft.Health.InvertedIndex.SearchIndex`2.#ctor*
  commentId: Overload:Microsoft.Health.InvertedIndex.SearchIndex`2.#ctor
  isExternal: false
  name: SearchIndex
  nameWithType: SearchIndex<T, TRecordIDList>.SearchIndex
  fullName: Microsoft.Health.InvertedIndex.SearchIndex<T, TRecordIDList>.SearchIndex
  nameWithType.vb: SearchIndex(Of T, TRecordIDList).SearchIndex
  fullName.vb: Microsoft.Health.InvertedIndex.SearchIndex(Of T, TRecordIDList).SearchIndex
- uid: Microsoft.Health.InvertedIndex.SearchIndex`2.Item*
  commentId: Overload:Microsoft.Health.InvertedIndex.SearchIndex`2.Item
  isExternal: false
  name: Item
  nameWithType: SearchIndex<T, TRecordIDList>.Item
  fullName: Microsoft.Health.InvertedIndex.SearchIndex<T, TRecordIDList>.Item
  nameWithType.vb: SearchIndex(Of T, TRecordIDList).Item
  fullName.vb: Microsoft.Health.InvertedIndex.SearchIndex(Of T, TRecordIDList).Item
- uid: Microsoft.Health.InvertedIndex.ISearchIndex{{T},{TRecordIDList}}.Item({T})
  commentId: P:Microsoft.Health.InvertedIndex.ISearchIndex{`0,`1}.Item(`0)
  parent: Microsoft.Health.InvertedIndex.ISearchIndex{{T},{TRecordIDList}}
  definition: Microsoft.Health.InvertedIndex.ISearchIndex`2.Item(`0)
  name: Item[T]
  nameWithType: ISearchIndex<T, TRecordIDList>.Item[T]
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Item[T]
  nameWithType.vb: ISearchIndex(Of T, TRecordIDList).Item(T)
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Item(T)
  name.vb: Item(T)
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Item(`0)
    name: Item
    nameWithType: ISearchIndex<T, TRecordIDList>.Item
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - name: T
    nameWithType: T
    fullName: T
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Item(`0)
    name: Item
    nameWithType: ISearchIndex(Of T, TRecordIDList).Item
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Item
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: '{TRecordIDList}'
  commentId: '!:TRecordIDList'
  definition: TRecordIDList
  name: TRecordIDList
  nameWithType: TRecordIDList
  fullName: TRecordIDList
- uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Item(`0)
  commentId: P:Microsoft.Health.InvertedIndex.ISearchIndex`2.Item(`0)
  isExternal: false
  name: Item[T]
  nameWithType: ISearchIndex<T, TRecordIDList>.Item[T]
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Item[T]
  nameWithType.vb: ISearchIndex(Of T, TRecordIDList).Item(T)
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Item(T)
  name.vb: Item(T)
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Item(`0)
    name: Item
    nameWithType: ISearchIndex<T, TRecordIDList>.Item
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - name: T
    nameWithType: T
    fullName: T
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Item(`0)
    name: Item
    nameWithType: ISearchIndex(Of T, TRecordIDList).Item
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Item
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: TRecordIDList
  isExternal: false
  name: TRecordIDList
  nameWithType: TRecordIDList
  fullName: TRecordIDList
- uid: Microsoft.Health.InvertedIndex.SearchIndex`2.GetTermFrequency*
  commentId: Overload:Microsoft.Health.InvertedIndex.SearchIndex`2.GetTermFrequency
  isExternal: false
  name: GetTermFrequency
  nameWithType: SearchIndex<T, TRecordIDList>.GetTermFrequency
  fullName: Microsoft.Health.InvertedIndex.SearchIndex<T, TRecordIDList>.GetTermFrequency
  nameWithType.vb: SearchIndex(Of T, TRecordIDList).GetTermFrequency
  fullName.vb: Microsoft.Health.InvertedIndex.SearchIndex(Of T, TRecordIDList).GetTermFrequency
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Health.InvertedIndex.SearchIndex`2.Resolve*
  commentId: Overload:Microsoft.Health.InvertedIndex.SearchIndex`2.Resolve
  isExternal: false
  name: Resolve
  nameWithType: SearchIndex<T, TRecordIDList>.Resolve
  fullName: Microsoft.Health.InvertedIndex.SearchIndex<T, TRecordIDList>.Resolve
  nameWithType.vb: SearchIndex(Of T, TRecordIDList).Resolve
  fullName.vb: Microsoft.Health.InvertedIndex.SearchIndex(Of T, TRecordIDList).Resolve
- uid: Microsoft.Health.InvertedIndex.ISearchIndex{{T},{TRecordIDList}}.Resolve({T})
  commentId: M:Microsoft.Health.InvertedIndex.ISearchIndex{`0,`1}.Resolve(`0)
  parent: Microsoft.Health.InvertedIndex.ISearchIndex{{T},{TRecordIDList}}
  definition: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(`0)
  name: Resolve(T)
  nameWithType: ISearchIndex<T, TRecordIDList>.Resolve(T)
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve(T)
  nameWithType.vb: ISearchIndex(Of T, TRecordIDList).Resolve(T)
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve(T)
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(`0)
    name: Resolve
    nameWithType: ISearchIndex<T, TRecordIDList>.Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(`0)
    name: Resolve
    nameWithType: ISearchIndex(Of T, TRecordIDList).Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  commentId: T:Microsoft.Health.InvertedIndex.RecordIDEnumerator
  parent: Microsoft.Health.InvertedIndex
  isExternal: false
  name: RecordIDEnumerator
  nameWithType: RecordIDEnumerator
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
- uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(`0)
  commentId: M:Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(`0)
  isExternal: false
  name: Resolve(T)
  nameWithType: ISearchIndex<T, TRecordIDList>.Resolve(T)
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve(T)
  nameWithType.vb: ISearchIndex(Of T, TRecordIDList).Resolve(T)
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve(T)
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(`0)
    name: Resolve
    nameWithType: ISearchIndex<T, TRecordIDList>.Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(`0)
    name: Resolve
    nameWithType: ISearchIndex(Of T, TRecordIDList).Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.ISearchIndex{{T},{TRecordIDList}}.Resolve(System.Collections.Generic.IList{{T}})
  commentId: M:Microsoft.Health.InvertedIndex.ISearchIndex{`0,`1}.Resolve(System.Collections.Generic.IList{`0})
  parent: Microsoft.Health.InvertedIndex.ISearchIndex{{T},{TRecordIDList}}
  definition: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0})
  name: Resolve(IList<T>)
  nameWithType: ISearchIndex<T, TRecordIDList>.Resolve(IList<T>)
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve(System.Collections.Generic.IList<T>)
  nameWithType.vb: ISearchIndex(Of T, TRecordIDList).Resolve(IList(Of T))
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve(System.Collections.Generic.IList(Of T))
  name.vb: Resolve(IList(Of T))
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0})
    name: Resolve
    nameWithType: ISearchIndex<T, TRecordIDList>.Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0})
    name: Resolve
    nameWithType: ISearchIndex(Of T, TRecordIDList).Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList{{T}}
  commentId: T:System.Collections.Generic.IList{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator[]
  name: RecordIDEnumerator[]
  nameWithType: RecordIDEnumerator[]
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator[]
  nameWithType.vb: RecordIDEnumerator()
  fullName.vb: Microsoft.Health.InvertedIndex.RecordIDEnumerator()
  name.vb: RecordIDEnumerator()
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0})
  commentId: M:Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0})
  isExternal: true
  name: Resolve(IList<T>)
  nameWithType: ISearchIndex<T, TRecordIDList>.Resolve(IList<T>)
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve(System.Collections.Generic.IList<T>)
  nameWithType.vb: ISearchIndex(Of T, TRecordIDList).Resolve(IList(Of T))
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve(System.Collections.Generic.IList(Of T))
  name.vb: Resolve(IList(Of T))
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0})
    name: Resolve
    nameWithType: ISearchIndex<T, TRecordIDList>.Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0})
    name: Resolve
    nameWithType: ISearchIndex(Of T, TRecordIDList).Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.ISearchIndex{{T},{TRecordIDList}}.Resolve(System.Collections.Generic.IList{{T}},System.Int32,System.Int32)
  commentId: M:Microsoft.Health.InvertedIndex.ISearchIndex{`0,`1}.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
  parent: Microsoft.Health.InvertedIndex.ISearchIndex{{T},{TRecordIDList}}
  definition: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
  name: Resolve(IList<T>, Int32, Int32)
  nameWithType: ISearchIndex<T, TRecordIDList>.Resolve(IList<T>, Int32, Int32)
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve(System.Collections.Generic.IList<T>, System.Int32, System.Int32)
  nameWithType.vb: ISearchIndex(Of T, TRecordIDList).Resolve(IList(Of T), Int32, Int32)
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve(System.Collections.Generic.IList(Of T), System.Int32, System.Int32)
  name.vb: Resolve(IList(Of T), Int32, Int32)
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
    name: Resolve
    nameWithType: ISearchIndex<T, TRecordIDList>.Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
    name: Resolve
    nameWithType: ISearchIndex(Of T, TRecordIDList).Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
  commentId: M:Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
  isExternal: true
  name: Resolve(IList<T>, Int32, Int32)
  nameWithType: ISearchIndex<T, TRecordIDList>.Resolve(IList<T>, Int32, Int32)
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve(System.Collections.Generic.IList<T>, System.Int32, System.Int32)
  nameWithType.vb: ISearchIndex(Of T, TRecordIDList).Resolve(IList(Of T), Int32, Int32)
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve(System.Collections.Generic.IList(Of T), System.Int32, System.Int32)
  name.vb: Resolve(IList(Of T), Int32, Int32)
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
    name: Resolve
    nameWithType: ISearchIndex<T, TRecordIDList>.Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
    name: Resolve
    nameWithType: ISearchIndex(Of T, TRecordIDList).Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.ISearchIndex{{T},{TRecordIDList}}.Resolve(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:Microsoft.Health.InvertedIndex.ISearchIndex{`0,`1}.Resolve(System.Collections.Generic.IEnumerable{`0})
  parent: Microsoft.Health.InvertedIndex.ISearchIndex{{T},{TRecordIDList}}
  definition: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IEnumerable{`0})
  name: Resolve(IEnumerable<T>)
  nameWithType: ISearchIndex<T, TRecordIDList>.Resolve(IEnumerable<T>)
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ISearchIndex(Of T, TRecordIDList).Resolve(IEnumerable(Of T))
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Resolve(IEnumerable(Of T))
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IEnumerable{`0})
    name: Resolve
    nameWithType: ISearchIndex<T, TRecordIDList>.Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IEnumerable{`0})
    name: Resolve
    nameWithType: ISearchIndex(Of T, TRecordIDList).Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: Resolve(IEnumerable<T>)
  nameWithType: ISearchIndex<T, TRecordIDList>.Resolve(IEnumerable<T>)
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ISearchIndex(Of T, TRecordIDList).Resolve(IEnumerable(Of T))
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Resolve(IEnumerable(Of T))
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IEnumerable{`0})
    name: Resolve
    nameWithType: ISearchIndex<T, TRecordIDList>.Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IEnumerable{`0})
    name: Resolve
    nameWithType: ISearchIndex(Of T, TRecordIDList).Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.ISearchIndex{{T},{TRecordIDList}}.Resolve(System.Collections.Generic.IList{{T}},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  commentId: M:Microsoft.Health.InvertedIndex.ISearchIndex{`0,`1}.Resolve(System.Collections.Generic.IList{`0},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  parent: Microsoft.Health.InvertedIndex.ISearchIndex{{T},{TRecordIDList}}
  definition: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  name: Resolve(IList<T>, StructList<RecordIDEnumerator>)
  nameWithType: ISearchIndex<T, TRecordIDList>.Resolve(IList<T>, StructList<RecordIDEnumerator>)
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve(System.Collections.Generic.IList<T>, Microsoft.Health.StructList<Microsoft.Health.InvertedIndex.RecordIDEnumerator>)
  nameWithType.vb: ISearchIndex(Of T, TRecordIDList).Resolve(IList(Of T), StructList(Of RecordIDEnumerator))
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve(System.Collections.Generic.IList(Of T), Microsoft.Health.StructList(Of Microsoft.Health.InvertedIndex.RecordIDEnumerator))
  name.vb: Resolve(IList(Of T), StructList(Of RecordIDEnumerator))
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
    name: Resolve
    nameWithType: ISearchIndex<T, TRecordIDList>.Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.StructList`1
    name: StructList
    nameWithType: StructList
    fullName: Microsoft.Health.StructList
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
    name: Resolve
    nameWithType: ISearchIndex(Of T, TRecordIDList).Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.StructList`1
    name: StructList
    nameWithType: StructList
    fullName: Microsoft.Health.StructList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}
  commentId: T:Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}
  parent: Microsoft.Health
  definition: Microsoft.Health.StructList`1
  name: StructList<RecordIDEnumerator>
  nameWithType: StructList<RecordIDEnumerator>
  fullName: Microsoft.Health.StructList<Microsoft.Health.InvertedIndex.RecordIDEnumerator>
  nameWithType.vb: StructList(Of RecordIDEnumerator)
  fullName.vb: Microsoft.Health.StructList(Of Microsoft.Health.InvertedIndex.RecordIDEnumerator)
  name.vb: StructList(Of RecordIDEnumerator)
  spec.csharp:
  - uid: Microsoft.Health.StructList`1
    name: StructList
    nameWithType: StructList
    fullName: Microsoft.Health.StructList
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.StructList`1
    name: StructList
    nameWithType: StructList
    fullName: Microsoft.Health.StructList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  commentId: M:Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  isExternal: true
  name: Resolve(IList<T>, StructList<RecordIDEnumerator>)
  nameWithType: ISearchIndex<T, TRecordIDList>.Resolve(IList<T>, StructList<RecordIDEnumerator>)
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve(System.Collections.Generic.IList<T>, Microsoft.Health.StructList<Microsoft.Health.InvertedIndex.RecordIDEnumerator>)
  nameWithType.vb: ISearchIndex(Of T, TRecordIDList).Resolve(IList(Of T), StructList(Of RecordIDEnumerator))
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve(System.Collections.Generic.IList(Of T), Microsoft.Health.StructList(Of Microsoft.Health.InvertedIndex.RecordIDEnumerator))
  name.vb: Resolve(IList(Of T), StructList(Of RecordIDEnumerator))
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
    name: Resolve
    nameWithType: ISearchIndex<T, TRecordIDList>.Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.StructList`1
    name: StructList
    nameWithType: StructList
    fullName: Microsoft.Health.StructList
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
    name: Resolve
    nameWithType: ISearchIndex(Of T, TRecordIDList).Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.StructList`1
    name: StructList
    nameWithType: StructList
    fullName: Microsoft.Health.StructList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.StructList`1
  commentId: T:Microsoft.Health.StructList`1
  isExternal: false
  name: StructList<T>
  nameWithType: StructList<T>
  fullName: Microsoft.Health.StructList<T>
  nameWithType.vb: StructList(Of T)
  fullName.vb: Microsoft.Health.StructList(Of T)
  name.vb: StructList(Of T)
  spec.csharp:
  - uid: Microsoft.Health.StructList`1
    name: StructList
    nameWithType: StructList
    fullName: Microsoft.Health.StructList
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.StructList`1
    name: StructList
    nameWithType: StructList
    fullName: Microsoft.Health.StructList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.ISearchIndex{{T},{TRecordIDList}}.Resolve(System.Collections.Generic.IList{{T}},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  commentId: M:Microsoft.Health.InvertedIndex.ISearchIndex{`0,`1}.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  parent: Microsoft.Health.InvertedIndex.ISearchIndex{{T},{TRecordIDList}}
  definition: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  name: Resolve(IList<T>, Int32, Int32, StructList<RecordIDEnumerator>)
  nameWithType: ISearchIndex<T, TRecordIDList>.Resolve(IList<T>, Int32, Int32, StructList<RecordIDEnumerator>)
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve(System.Collections.Generic.IList<T>, System.Int32, System.Int32, Microsoft.Health.StructList<Microsoft.Health.InvertedIndex.RecordIDEnumerator>)
  nameWithType.vb: ISearchIndex(Of T, TRecordIDList).Resolve(IList(Of T), Int32, Int32, StructList(Of RecordIDEnumerator))
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve(System.Collections.Generic.IList(Of T), System.Int32, System.Int32, Microsoft.Health.StructList(Of Microsoft.Health.InvertedIndex.RecordIDEnumerator))
  name.vb: Resolve(IList(Of T), Int32, Int32, StructList(Of RecordIDEnumerator))
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
    name: Resolve
    nameWithType: ISearchIndex<T, TRecordIDList>.Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.StructList`1
    name: StructList
    nameWithType: StructList
    fullName: Microsoft.Health.StructList
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
    name: Resolve
    nameWithType: ISearchIndex(Of T, TRecordIDList).Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.StructList`1
    name: StructList
    nameWithType: StructList
    fullName: Microsoft.Health.StructList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  commentId: M:Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  isExternal: true
  name: Resolve(IList<T>, Int32, Int32, StructList<RecordIDEnumerator>)
  nameWithType: ISearchIndex<T, TRecordIDList>.Resolve(IList<T>, Int32, Int32, StructList<RecordIDEnumerator>)
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve(System.Collections.Generic.IList<T>, System.Int32, System.Int32, Microsoft.Health.StructList<Microsoft.Health.InvertedIndex.RecordIDEnumerator>)
  nameWithType.vb: ISearchIndex(Of T, TRecordIDList).Resolve(IList(Of T), Int32, Int32, StructList(Of RecordIDEnumerator))
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve(System.Collections.Generic.IList(Of T), System.Int32, System.Int32, Microsoft.Health.StructList(Of Microsoft.Health.InvertedIndex.RecordIDEnumerator))
  name.vb: Resolve(IList(Of T), Int32, Int32, StructList(Of RecordIDEnumerator))
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
    name: Resolve
    nameWithType: ISearchIndex<T, TRecordIDList>.Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.StructList`1
    name: StructList
    nameWithType: StructList
    fullName: Microsoft.Health.StructList
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
    name: Resolve
    nameWithType: ISearchIndex(Of T, TRecordIDList).Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.StructList`1
    name: StructList
    nameWithType: StructList
    fullName: Microsoft.Health.StructList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
