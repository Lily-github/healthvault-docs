### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1
  commentId: T:Microsoft.Health.PhraseAnalyzer.StringTrie`1
  id: StringTrie`1
  parent: Microsoft.Health.PhraseAnalyzer
  children:
  - Microsoft.Health.PhraseAnalyzer.StringTrie`1.#ctor
  - Microsoft.Health.PhraseAnalyzer.StringTrie`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}})
  - Microsoft.Health.PhraseAnalyzer.StringTrie`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}},Microsoft.Health.PhraseAnalyzer.WordBreaker)
  - Microsoft.Health.PhraseAnalyzer.StringTrie`1.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}})
  - Microsoft.Health.PhraseAnalyzer.StringTrie`1.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}},Microsoft.Health.PhraseAnalyzer.WordBreaker)
  - Microsoft.Health.PhraseAnalyzer.StringTrie`1.Find(System.Collections.Generic.IList{System.String},System.Int32,System.Int32@)
  - Microsoft.Health.PhraseAnalyzer.StringTrie`1.FindExact(System.Collections.Generic.IList{System.String},System.Int32)
  - Microsoft.Health.PhraseAnalyzer.StringTrie`1.Match(System.Collections.Generic.IList{System.String},System.Int32,System.Int32@)
  langs:
  - csharp
  - vb
  name: StringTrie<T>
  nameWithType: StringTrie<T>
  fullName: Microsoft.Health.PhraseAnalyzer.StringTrie<T>
  type: Class
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/WordTrie.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: StringTrie
    path: search/PhraseAnalyzer/WordTrie.cs
    startLine: 16
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\nA Trie of strings - designed to conserve on the amount of space consumed\nby nodes in the trie (which can get pretty large) without sacrificing performance. The space\nconstraints lead to a constrained and somewhat ugly programming model, but the tradeoff is acceptable\n"
  example: []
  syntax:
    content: 'public class StringTrie<T> : Trie<string, T>, IMatcher where T : class'
    content.vb: >-
      Public Class StringTrie(Of T As Class)
          Inherits Trie(Of String, T)
          Implements IMatcher
    typeParameters:
    - id: T
  inheritance:
  - System.Object
  - Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}
  derivedClasses:
  - Microsoft.Health.PhraseAnalyzer.PhraseTrie
  implements:
  - Microsoft.Health.PhraseAnalyzer.IMatcher
  inheritedMembers:
  - Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}.IgnoreDuplicates
  - Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}.MaxLinearScanItemLength
  - Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}.TryFind(System.Collections.Generic.IEnumerable{System.String},{T}@)
  - Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}.TryFind(System.Collections.Generic.IEnumerable{System.String},{T}@,System.Int32@)
  - Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}.TryFind(System.Collections.Generic.IList{System.String},{T}@)
  - Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}.TryFind(System.Collections.Generic.IList{System.String},System.Int32,{T}@)
  - Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}.TryFind(System.Collections.Generic.IList{System.String},System.Int32,{T}@,System.Int32@)
  - Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}.TryFind(System.Collections.Generic.IList{System.String},System.Int32,System.Int32,{T}@,System.Int32@)
  - Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}.TryFindExact(System.Collections.Generic.IList{System.String},System.Int32,{T}@)
  - Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}.GetChildren(System.Collections.Generic.IList{System.String},System.Int32)
  - Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}.GetChildren(System.Collections.Generic.IEnumerable{System.String})
  - Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}.GetAllValues
  - Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}.Add(System.Collections.Generic.IList{System.String},{T})
  - Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}.Add(System.Collections.Generic.IList{System.String},System.Int32,System.Int32,{T})
  - Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}.Add(System.Collections.Generic.IEnumerable{System.String},{T})
  - Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}.Trim
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - Microsoft.Health.PhraseAnalyzer.StringTrie`1.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  - System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  nameWithType.vb: StringTrie(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.Health.PhraseAnalyzer.StringTrie(Of T)
  name.vb: StringTrie(Of T)
- uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1.#ctor
  commentId: M:Microsoft.Health.PhraseAnalyzer.StringTrie`1.#ctor
  id: '#ctor'
  parent: Microsoft.Health.PhraseAnalyzer.StringTrie`1
  langs:
  - csharp
  - vb
  name: StringTrie()
  nameWithType: StringTrie<T>.StringTrie()
  fullName: Microsoft.Health.PhraseAnalyzer.StringTrie<T>.StringTrie()
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/WordTrie.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: search/PhraseAnalyzer/WordTrie.cs
    startLine: 22
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public StringTrie()
    content.vb: Public Sub New
  overload: Microsoft.Health.PhraseAnalyzer.StringTrie`1.#ctor*
  nameWithType.vb: StringTrie(Of T).StringTrie()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.PhraseAnalyzer.StringTrie(Of T).StringTrie()
- uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}})
  commentId: M:Microsoft.Health.PhraseAnalyzer.StringTrie`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}})
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}})'
  parent: Microsoft.Health.PhraseAnalyzer.StringTrie`1
  langs:
  - csharp
  - vb
  name: StringTrie(IEnumerable<KeyValuePair<String, T>>)
  nameWithType: StringTrie<T>.StringTrie(IEnumerable<KeyValuePair<String, T>>)
  fullName: Microsoft.Health.PhraseAnalyzer.StringTrie<T>.StringTrie(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, T>>)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/WordTrie.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: search/PhraseAnalyzer/WordTrie.cs
    startLine: 31
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public StringTrie(IEnumerable<KeyValuePair<string, T>> kvPairs)
    content.vb: Public Sub New(kvPairs As IEnumerable(Of KeyValuePair(Of String, T)))
    parameters:
    - id: kvPairs
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,{T}}}
      description: ''
  overload: Microsoft.Health.PhraseAnalyzer.StringTrie`1.#ctor*
  nameWithType.vb: StringTrie(Of T).StringTrie(IEnumerable(Of KeyValuePair(Of String, T)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.PhraseAnalyzer.StringTrie(Of T).StringTrie(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, T)))
  name.vb: StringTrie(IEnumerable(Of KeyValuePair(Of String, T)))
- uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}},Microsoft.Health.PhraseAnalyzer.WordBreaker)
  commentId: M:Microsoft.Health.PhraseAnalyzer.StringTrie`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}},Microsoft.Health.PhraseAnalyzer.WordBreaker)
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}},Microsoft.Health.PhraseAnalyzer.WordBreaker)'
  parent: Microsoft.Health.PhraseAnalyzer.StringTrie`1
  langs:
  - csharp
  - vb
  name: StringTrie(IEnumerable<KeyValuePair<String, T>>, WordBreaker)
  nameWithType: StringTrie<T>.StringTrie(IEnumerable<KeyValuePair<String, T>>, WordBreaker)
  fullName: Microsoft.Health.PhraseAnalyzer.StringTrie<T>.StringTrie(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, T>>, Microsoft.Health.PhraseAnalyzer.WordBreaker)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/WordTrie.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: search/PhraseAnalyzer/WordTrie.cs
    startLine: 41
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public StringTrie(IEnumerable<KeyValuePair<string, T>> kvPairs, WordBreaker wordBreaker)
    content.vb: Public Sub New(kvPairs As IEnumerable(Of KeyValuePair(Of String, T)), wordBreaker As WordBreaker)
    parameters:
    - id: kvPairs
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,{T}}}
      description: ''
    - id: wordBreaker
      type: Microsoft.Health.PhraseAnalyzer.WordBreaker
      description: ''
  overload: Microsoft.Health.PhraseAnalyzer.StringTrie`1.#ctor*
  nameWithType.vb: StringTrie(Of T).StringTrie(IEnumerable(Of KeyValuePair(Of String, T)), WordBreaker)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.PhraseAnalyzer.StringTrie(Of T).StringTrie(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, T)), Microsoft.Health.PhraseAnalyzer.WordBreaker)
  name.vb: StringTrie(IEnumerable(Of KeyValuePair(Of String, T)), WordBreaker)
- uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1.Match(System.Collections.Generic.IList{System.String},System.Int32,System.Int32@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.StringTrie`1.Match(System.Collections.Generic.IList{System.String},System.Int32,System.Int32@)
  id: Match(System.Collections.Generic.IList{System.String},System.Int32,System.Int32@)
  parent: Microsoft.Health.PhraseAnalyzer.StringTrie`1
  langs:
  - csharp
  - vb
  name: Match(IList<String>, Int32, out Int32)
  nameWithType: StringTrie<T>.Match(IList<String>, Int32, out Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.StringTrie<T>.Match(System.Collections.Generic.IList<System.String>, System.Int32, out System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/WordTrie.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Match
    path: search/PhraseAnalyzer/WordTrie.cs
    startLine: 54
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public object Match(IList<string> phrase, int startAt, out int countWordsConsumed)
    content.vb: Public Function Match(phrase As IList(Of String), startAt As Integer, ByRef countWordsConsumed As Integer) As Object
    parameters:
    - id: phrase
      type: System.Collections.Generic.IList{System.String}
      description: ''
    - id: startAt
      type: System.Int32
      description: ''
    - id: countWordsConsumed
      type: System.Int32
      description: ''
    return:
      type: System.Object
      description: ''
  overload: Microsoft.Health.PhraseAnalyzer.StringTrie`1.Match*
  implements:
  - Microsoft.Health.PhraseAnalyzer.IMatcher.Match(System.Collections.Generic.IList{System.String},System.Int32,System.Int32@)
  nameWithType.vb: StringTrie(Of T).Match(IList(Of String), Int32, ByRef Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.PhraseAnalyzer.StringTrie(Of T).Match(System.Collections.Generic.IList(Of System.String), System.Int32, ByRef System.Int32)
  name.vb: Match(IList(Of String), Int32, ByRef Int32)
- uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1.Find(System.Collections.Generic.IList{System.String},System.Int32,System.Int32@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.StringTrie`1.Find(System.Collections.Generic.IList{System.String},System.Int32,System.Int32@)
  id: Find(System.Collections.Generic.IList{System.String},System.Int32,System.Int32@)
  parent: Microsoft.Health.PhraseAnalyzer.StringTrie`1
  langs:
  - csharp
  - vb
  name: Find(IList<String>, Int32, out Int32)
  nameWithType: StringTrie<T>.Find(IList<String>, Int32, out Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.StringTrie<T>.Find(System.Collections.Generic.IList<System.String>, System.Int32, out System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/WordTrie.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Find
    path: search/PhraseAnalyzer/WordTrie.cs
    startLine: 64
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\nFinds the longest possible match in the trie. Returns the value associated with any \nnode found, along with the depth at which the node was found.\nNote: May not consume all strings\n"
  example: []
  syntax:
    content: public T Find(IList<string> strings, int startAt, out int depth)
    content.vb: Public Function Find(strings As IList(Of String), startAt As Integer, ByRef depth As Integer) As T
    parameters:
    - id: strings
      type: System.Collections.Generic.IList{System.String}
    - id: startAt
      type: System.Int32
    - id: depth
      type: System.Int32
    return:
      type: '{T}'
  overload: Microsoft.Health.PhraseAnalyzer.StringTrie`1.Find*
  nameWithType.vb: StringTrie(Of T).Find(IList(Of String), Int32, ByRef Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.PhraseAnalyzer.StringTrie(Of T).Find(System.Collections.Generic.IList(Of System.String), System.Int32, ByRef System.Int32)
  name.vb: Find(IList(Of String), Int32, ByRef Int32)
- uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1.FindExact(System.Collections.Generic.IList{System.String},System.Int32)
  commentId: M:Microsoft.Health.PhraseAnalyzer.StringTrie`1.FindExact(System.Collections.Generic.IList{System.String},System.Int32)
  id: FindExact(System.Collections.Generic.IList{System.String},System.Int32)
  parent: Microsoft.Health.PhraseAnalyzer.StringTrie`1
  langs:
  - csharp
  - vb
  name: FindExact(IList<String>, Int32)
  nameWithType: StringTrie<T>.FindExact(IList<String>, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.StringTrie<T>.FindExact(System.Collections.Generic.IList<System.String>, System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/WordTrie.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: FindExact
    path: search/PhraseAnalyzer/WordTrie.cs
    startLine: 84
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\nOnly returns a value if the entire set of strings was consumed during traversal - i.e. an exact match\n"
  example: []
  syntax:
    content: public T FindExact(IList<string> strings, int startAt)
    content.vb: Public Function FindExact(strings As IList(Of String), startAt As Integer) As T
    parameters:
    - id: strings
      type: System.Collections.Generic.IList{System.String}
    - id: startAt
      type: System.Int32
    return:
      type: '{T}'
  overload: Microsoft.Health.PhraseAnalyzer.StringTrie`1.FindExact*
  nameWithType.vb: StringTrie(Of T).FindExact(IList(Of String), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.PhraseAnalyzer.StringTrie(Of T).FindExact(System.Collections.Generic.IList(Of System.String), System.Int32)
  name.vb: FindExact(IList(Of String), Int32)
- uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}})
  commentId: M:Microsoft.Health.PhraseAnalyzer.StringTrie`1.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}})
  id: Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}})
  parent: Microsoft.Health.PhraseAnalyzer.StringTrie`1
  langs:
  - csharp
  - vb
  name: Add(IEnumerable<KeyValuePair<String, T>>)
  nameWithType: StringTrie<T>.Add(IEnumerable<KeyValuePair<String, T>>)
  fullName: Microsoft.Health.PhraseAnalyzer.StringTrie<T>.Add(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, T>>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/WordTrie.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Add
    path: search/PhraseAnalyzer/WordTrie.cs
    startLine: 99
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public void Add(IEnumerable<KeyValuePair<string, T>> kvPairs)
    content.vb: Public Sub Add(kvPairs As IEnumerable(Of KeyValuePair(Of String, T)))
    parameters:
    - id: kvPairs
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,{T}}}
      description: ''
  overload: Microsoft.Health.PhraseAnalyzer.StringTrie`1.Add*
  nameWithType.vb: StringTrie(Of T).Add(IEnumerable(Of KeyValuePair(Of String, T)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.PhraseAnalyzer.StringTrie(Of T).Add(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, T)))
  name.vb: Add(IEnumerable(Of KeyValuePair(Of String, T)))
- uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}},Microsoft.Health.PhraseAnalyzer.WordBreaker)
  commentId: M:Microsoft.Health.PhraseAnalyzer.StringTrie`1.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}},Microsoft.Health.PhraseAnalyzer.WordBreaker)
  id: Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}},Microsoft.Health.PhraseAnalyzer.WordBreaker)
  parent: Microsoft.Health.PhraseAnalyzer.StringTrie`1
  langs:
  - csharp
  - vb
  name: Add(IEnumerable<KeyValuePair<String, T>>, WordBreaker)
  nameWithType: StringTrie<T>.Add(IEnumerable<KeyValuePair<String, T>>, WordBreaker)
  fullName: Microsoft.Health.PhraseAnalyzer.StringTrie<T>.Add(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, T>>, Microsoft.Health.PhraseAnalyzer.WordBreaker)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/WordTrie.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Add
    path: search/PhraseAnalyzer/WordTrie.cs
    startLine: 109
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public void Add(IEnumerable<KeyValuePair<string, T>> kvPairs, WordBreaker wordBreaker)
    content.vb: Public Sub Add(kvPairs As IEnumerable(Of KeyValuePair(Of String, T)), wordBreaker As WordBreaker)
    parameters:
    - id: kvPairs
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,{T}}}
      description: ''
    - id: wordBreaker
      type: Microsoft.Health.PhraseAnalyzer.WordBreaker
      description: ''
  overload: Microsoft.Health.PhraseAnalyzer.StringTrie`1.Add*
  nameWithType.vb: StringTrie(Of T).Add(IEnumerable(Of KeyValuePair(Of String, T)), WordBreaker)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.PhraseAnalyzer.StringTrie(Of T).Add(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, T)), Microsoft.Health.PhraseAnalyzer.WordBreaker)
  name.vb: Add(IEnumerable(Of KeyValuePair(Of String, T)), WordBreaker)
references:
- uid: Microsoft.Health.PhraseAnalyzer
  commentId: N:Microsoft.Health.PhraseAnalyzer
  isExternal: false
  name: Microsoft.Health.PhraseAnalyzer
  nameWithType: Microsoft.Health.PhraseAnalyzer
  fullName: Microsoft.Health.PhraseAnalyzer
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}
  commentId: T:Microsoft.Health.PhraseAnalyzer.Trie{System.String,`0}
  parent: Microsoft.Health.PhraseAnalyzer
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2
  name: Trie<String, T>
  nameWithType: Trie<String, T>
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, T>
  nameWithType.vb: Trie(Of String, T)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, T)
  name.vb: Trie(Of String, T)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2
    name: Trie
    nameWithType: Trie
    fullName: Microsoft.Health.PhraseAnalyzer.Trie
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2
    name: Trie
    nameWithType: Trie
    fullName: Microsoft.Health.PhraseAnalyzer.Trie
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.IMatcher
  commentId: T:Microsoft.Health.PhraseAnalyzer.IMatcher
  parent: Microsoft.Health.PhraseAnalyzer
  isExternal: false
  name: IMatcher
  nameWithType: IMatcher
  fullName: Microsoft.Health.PhraseAnalyzer.IMatcher
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}.IgnoreDuplicates
  commentId: P:Microsoft.Health.PhraseAnalyzer.Trie{System.String,`0}.IgnoreDuplicates
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.IgnoreDuplicates
  name: IgnoreDuplicates
  nameWithType: Trie<String, T>.IgnoreDuplicates
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, T>.IgnoreDuplicates
  nameWithType.vb: Trie(Of String, T).IgnoreDuplicates
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, T).IgnoreDuplicates
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}.MaxLinearScanItemLength
  commentId: P:Microsoft.Health.PhraseAnalyzer.Trie{System.String,`0}.MaxLinearScanItemLength
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.MaxLinearScanItemLength
  name: MaxLinearScanItemLength
  nameWithType: Trie<String, T>.MaxLinearScanItemLength
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, T>.MaxLinearScanItemLength
  nameWithType.vb: Trie(Of String, T).MaxLinearScanItemLength
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, T).MaxLinearScanItemLength
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}.TryFind(System.Collections.Generic.IEnumerable{System.String},{T}@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.String,`0}.TryFind(System.Collections.Generic.IEnumerable{System.String},`0@)
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@)
  name: TryFind(IEnumerable<String>, T)
  nameWithType: Trie<String, T>.TryFind(IEnumerable<String>, T)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, T>.TryFind(System.Collections.Generic.IEnumerable<System.String>, T)
  nameWithType.vb: Trie(Of String, T).TryFind(IEnumerable(Of String), T)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, T).TryFind(System.Collections.Generic.IEnumerable(Of System.String), T)
  name.vb: TryFind(IEnumerable(Of String), T)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@)
    name: TryFind
    nameWithType: Trie<String, T>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, T>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@)
    name: TryFind
    nameWithType: Trie(Of String, T).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, T).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}.TryFind(System.Collections.Generic.IEnumerable{System.String},{T}@,System.Int32@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.String,`0}.TryFind(System.Collections.Generic.IEnumerable{System.String},`0@,System.Int32@)
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@,System.Int32@)
  name: TryFind(IEnumerable<String>, T, Int32)
  nameWithType: Trie<String, T>.TryFind(IEnumerable<String>, T, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, T>.TryFind(System.Collections.Generic.IEnumerable<System.String>, T, System.Int32)
  nameWithType.vb: Trie(Of String, T).TryFind(IEnumerable(Of String), T, Int32)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, T).TryFind(System.Collections.Generic.IEnumerable(Of System.String), T, System.Int32)
  name.vb: TryFind(IEnumerable(Of String), T, Int32)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie<String, T>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, T>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie(Of String, T).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, T).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}.TryFind(System.Collections.Generic.IList{System.String},{T}@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.String,`0}.TryFind(System.Collections.Generic.IList{System.String},`0@)
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},`1@)
  name: TryFind(IList<String>, T)
  nameWithType: Trie<String, T>.TryFind(IList<String>, T)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, T>.TryFind(System.Collections.Generic.IList<System.String>, T)
  nameWithType.vb: Trie(Of String, T).TryFind(IList(Of String), T)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, T).TryFind(System.Collections.Generic.IList(Of System.String), T)
  name.vb: TryFind(IList(Of String), T)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},`1@)
    name: TryFind
    nameWithType: Trie<String, T>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, T>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},`1@)
    name: TryFind
    nameWithType: Trie(Of String, T).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, T).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}.TryFind(System.Collections.Generic.IList{System.String},System.Int32,{T}@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.String,`0}.TryFind(System.Collections.Generic.IList{System.String},System.Int32,`0@)
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@)
  name: TryFind(IList<String>, Int32, T)
  nameWithType: Trie<String, T>.TryFind(IList<String>, Int32, T)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, T>.TryFind(System.Collections.Generic.IList<System.String>, System.Int32, T)
  nameWithType.vb: Trie(Of String, T).TryFind(IList(Of String), Int32, T)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, T).TryFind(System.Collections.Generic.IList(Of System.String), System.Int32, T)
  name.vb: TryFind(IList(Of String), Int32, T)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@)
    name: TryFind
    nameWithType: Trie<String, T>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, T>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@)
    name: TryFind
    nameWithType: Trie(Of String, T).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, T).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}.TryFind(System.Collections.Generic.IList{System.String},System.Int32,{T}@,System.Int32@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.String,`0}.TryFind(System.Collections.Generic.IList{System.String},System.Int32,`0@,System.Int32@)
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@,System.Int32@)
  name: TryFind(IList<String>, Int32, T, Int32)
  nameWithType: Trie<String, T>.TryFind(IList<String>, Int32, T, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, T>.TryFind(System.Collections.Generic.IList<System.String>, System.Int32, T, System.Int32)
  nameWithType.vb: Trie(Of String, T).TryFind(IList(Of String), Int32, T, Int32)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, T).TryFind(System.Collections.Generic.IList(Of System.String), System.Int32, T, System.Int32)
  name.vb: TryFind(IList(Of String), Int32, T, Int32)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie<String, T>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, T>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie(Of String, T).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, T).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}.TryFind(System.Collections.Generic.IList{System.String},System.Int32,System.Int32,{T}@,System.Int32@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.String,`0}.TryFind(System.Collections.Generic.IList{System.String},System.Int32,System.Int32,`0@,System.Int32@)
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1@,System.Int32@)
  name: TryFind(IList<String>, Int32, Int32, T, Int32)
  nameWithType: Trie<String, T>.TryFind(IList<String>, Int32, Int32, T, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, T>.TryFind(System.Collections.Generic.IList<System.String>, System.Int32, System.Int32, T, System.Int32)
  nameWithType.vb: Trie(Of String, T).TryFind(IList(Of String), Int32, Int32, T, Int32)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, T).TryFind(System.Collections.Generic.IList(Of System.String), System.Int32, System.Int32, T, System.Int32)
  name.vb: TryFind(IList(Of String), Int32, Int32, T, Int32)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie<String, T>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, T>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie(Of String, T).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, T).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}.TryFindExact(System.Collections.Generic.IList{System.String},System.Int32,{T}@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.String,`0}.TryFindExact(System.Collections.Generic.IList{System.String},System.Int32,`0@)
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFindExact(System.Collections.Generic.IList{`0},System.Int32,`1@)
  name: TryFindExact(IList<String>, Int32, T)
  nameWithType: Trie<String, T>.TryFindExact(IList<String>, Int32, T)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, T>.TryFindExact(System.Collections.Generic.IList<System.String>, System.Int32, T)
  nameWithType.vb: Trie(Of String, T).TryFindExact(IList(Of String), Int32, T)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, T).TryFindExact(System.Collections.Generic.IList(Of System.String), System.Int32, T)
  name.vb: TryFindExact(IList(Of String), Int32, T)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFindExact(System.Collections.Generic.IList{`0},System.Int32,`1@)
    name: TryFindExact
    nameWithType: Trie<String, T>.TryFindExact
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, T>.TryFindExact
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFindExact(System.Collections.Generic.IList{`0},System.Int32,`1@)
    name: TryFindExact
    nameWithType: Trie(Of String, T).TryFindExact
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, T).TryFindExact
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}.GetChildren(System.Collections.Generic.IList{System.String},System.Int32)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.String,`0}.GetChildren(System.Collections.Generic.IList{System.String},System.Int32)
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IList{`0},System.Int32)
  name: GetChildren(IList<String>, Int32)
  nameWithType: Trie<String, T>.GetChildren(IList<String>, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, T>.GetChildren(System.Collections.Generic.IList<System.String>, System.Int32)
  nameWithType.vb: Trie(Of String, T).GetChildren(IList(Of String), Int32)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, T).GetChildren(System.Collections.Generic.IList(Of System.String), System.Int32)
  name.vb: GetChildren(IList(Of String), Int32)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IList{`0},System.Int32)
    name: GetChildren
    nameWithType: Trie<String, T>.GetChildren
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, T>.GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IList{`0},System.Int32)
    name: GetChildren
    nameWithType: Trie(Of String, T).GetChildren
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, T).GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}.GetChildren(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.String,`0}.GetChildren(System.Collections.Generic.IEnumerable{System.String})
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IEnumerable{`0})
  name: GetChildren(IEnumerable<String>)
  nameWithType: Trie<String, T>.GetChildren(IEnumerable<String>)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, T>.GetChildren(System.Collections.Generic.IEnumerable<System.String>)
  nameWithType.vb: Trie(Of String, T).GetChildren(IEnumerable(Of String))
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, T).GetChildren(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: GetChildren(IEnumerable(Of String))
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IEnumerable{`0})
    name: GetChildren
    nameWithType: Trie<String, T>.GetChildren
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, T>.GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IEnumerable{`0})
    name: GetChildren
    nameWithType: Trie(Of String, T).GetChildren
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, T).GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}.GetAllValues
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.String,`0}.GetAllValues
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.GetAllValues
  name: GetAllValues()
  nameWithType: Trie<String, T>.GetAllValues()
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, T>.GetAllValues()
  nameWithType.vb: Trie(Of String, T).GetAllValues()
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, T).GetAllValues()
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetAllValues
    name: GetAllValues
    nameWithType: Trie<String, T>.GetAllValues
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, T>.GetAllValues
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetAllValues
    name: GetAllValues
    nameWithType: Trie(Of String, T).GetAllValues
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, T).GetAllValues
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}.Add(System.Collections.Generic.IList{System.String},{T})
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.String,`0}.Add(System.Collections.Generic.IList{System.String},`0)
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},`1)
  name: Add(IList<String>, T)
  nameWithType: Trie<String, T>.Add(IList<String>, T)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, T>.Add(System.Collections.Generic.IList<System.String>, T)
  nameWithType.vb: Trie(Of String, T).Add(IList(Of String), T)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, T).Add(System.Collections.Generic.IList(Of System.String), T)
  name.vb: Add(IList(Of String), T)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},`1)
    name: Add
    nameWithType: Trie<String, T>.Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, T>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},`1)
    name: Add
    nameWithType: Trie(Of String, T).Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, T).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}.Add(System.Collections.Generic.IList{System.String},System.Int32,System.Int32,{T})
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.String,`0}.Add(System.Collections.Generic.IList{System.String},System.Int32,System.Int32,`0)
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1)
  name: Add(IList<String>, Int32, Int32, T)
  nameWithType: Trie<String, T>.Add(IList<String>, Int32, Int32, T)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, T>.Add(System.Collections.Generic.IList<System.String>, System.Int32, System.Int32, T)
  nameWithType.vb: Trie(Of String, T).Add(IList(Of String), Int32, Int32, T)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, T).Add(System.Collections.Generic.IList(Of System.String), System.Int32, System.Int32, T)
  name.vb: Add(IList(Of String), Int32, Int32, T)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1)
    name: Add
    nameWithType: Trie<String, T>.Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, T>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1)
    name: Add
    nameWithType: Trie(Of String, T).Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, T).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}.Add(System.Collections.Generic.IEnumerable{System.String},{T})
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.String,`0}.Add(System.Collections.Generic.IEnumerable{System.String},`0)
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IEnumerable{`0},`1)
  name: Add(IEnumerable<String>, T)
  nameWithType: Trie<String, T>.Add(IEnumerable<String>, T)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, T>.Add(System.Collections.Generic.IEnumerable<System.String>, T)
  nameWithType.vb: Trie(Of String, T).Add(IEnumerable(Of String), T)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, T).Add(System.Collections.Generic.IEnumerable(Of System.String), T)
  name.vb: Add(IEnumerable(Of String), T)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IEnumerable{`0},`1)
    name: Add
    nameWithType: Trie<String, T>.Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, T>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IEnumerable{`0},`1)
    name: Add
    nameWithType: Trie(Of String, T).Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, T).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}.Trim
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{System.String,`0}.Trim
  parent: Microsoft.Health.PhraseAnalyzer.Trie{System.String,{T}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.Trim
  name: Trim()
  nameWithType: Trie<String, T>.Trim()
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, T>.Trim()
  nameWithType.vb: Trie(Of String, T).Trim()
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, T).Trim()
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Trim
    name: Trim
    nameWithType: Trie<String, T>.Trim
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<System.String, T>.Trim
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Trim
    name: Trim
    nameWithType: Trie(Of String, T).Trim
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of System.String, T).Trim
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  name: SetProperty(String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object())
  name.vb: SetProperty(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  name: InvokeMethod(String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object())
  name.vb: InvokeMethod(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  parent: Microsoft.Health.Utility.InvariantString
  definition: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  name: ToStringInvariant()
  nameWithType: InvariantString.ToStringInvariant()
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant()
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  parent: Microsoft.Health.Utility.TypeHelper
  definition: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  name: ValueOrDbNull<StringTrie<T>>()
  nameWithType: TypeHelper.ValueOrDbNull<StringTrie<T>>()
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.PhraseAnalyzer.StringTrie<T>>()
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of StringTrie(Of T))()
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.PhraseAnalyzer.StringTrie(Of T))()
  name.vb: ValueOrDbNull(Of StringTrie(Of T))()
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull<StringTrie<T>>
    nameWithType: TypeHelper.ValueOrDbNull<StringTrie<T>>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.PhraseAnalyzer.StringTrie<T>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull(Of StringTrie(Of T))
    nameWithType: TypeHelper.ValueOrDbNull(Of StringTrie(Of T))
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.PhraseAnalyzer.StringTrie(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  parent: Microsoft.Health.Utility.WCXmlHelper
  definition: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  name: ToXml()
  nameWithType: WCXmlHelper.ToXml()
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml()
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2
  commentId: T:Microsoft.Health.PhraseAnalyzer.Trie`2
  isExternal: false
  name: Trie<K, V>
  nameWithType: Trie<K, V>
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>
  nameWithType.vb: Trie(Of K, V)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V)
  name.vb: Trie(Of K, V)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2
    name: Trie
    nameWithType: Trie
    fullName: Microsoft.Health.PhraseAnalyzer.Trie
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2
    name: Trie
    nameWithType: Trie
    fullName: Microsoft.Health.PhraseAnalyzer.Trie
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.IgnoreDuplicates
  commentId: P:Microsoft.Health.PhraseAnalyzer.Trie`2.IgnoreDuplicates
  isExternal: false
  name: IgnoreDuplicates
  nameWithType: Trie<K, V>.IgnoreDuplicates
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.IgnoreDuplicates
  nameWithType.vb: Trie(Of K, V).IgnoreDuplicates
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).IgnoreDuplicates
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.MaxLinearScanItemLength
  commentId: P:Microsoft.Health.PhraseAnalyzer.Trie`2.MaxLinearScanItemLength
  isExternal: false
  name: MaxLinearScanItemLength
  nameWithType: Trie<K, V>.MaxLinearScanItemLength
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.MaxLinearScanItemLength
  nameWithType.vb: Trie(Of K, V).MaxLinearScanItemLength
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).MaxLinearScanItemLength
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@)
  isExternal: true
  name: TryFind(IEnumerable<K>, V)
  nameWithType: Trie<K, V>.TryFind(IEnumerable<K>, V)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind(System.Collections.Generic.IEnumerable<K>, V)
  nameWithType.vb: Trie(Of K, V).TryFind(IEnumerable(Of K), V)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind(System.Collections.Generic.IEnumerable(Of K), V)
  name.vb: TryFind(IEnumerable(Of K), V)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@)
    name: TryFind
    nameWithType: Trie<K, V>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@)
    name: TryFind
    nameWithType: Trie(Of K, V).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@,System.Int32@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@,System.Int32@)
  isExternal: true
  name: TryFind(IEnumerable<K>, V, Int32)
  nameWithType: Trie<K, V>.TryFind(IEnumerable<K>, V, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind(System.Collections.Generic.IEnumerable<K>, V, System.Int32)
  nameWithType.vb: Trie(Of K, V).TryFind(IEnumerable(Of K), V, Int32)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind(System.Collections.Generic.IEnumerable(Of K), V, System.Int32)
  name.vb: TryFind(IEnumerable(Of K), V, Int32)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie<K, V>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie(Of K, V).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},`1@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},`1@)
  isExternal: true
  name: TryFind(IList<K>, V)
  nameWithType: Trie<K, V>.TryFind(IList<K>, V)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind(System.Collections.Generic.IList<K>, V)
  nameWithType.vb: Trie(Of K, V).TryFind(IList(Of K), V)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind(System.Collections.Generic.IList(Of K), V)
  name.vb: TryFind(IList(Of K), V)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},`1@)
    name: TryFind
    nameWithType: Trie<K, V>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},`1@)
    name: TryFind
    nameWithType: Trie(Of K, V).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@)
  isExternal: true
  name: TryFind(IList<K>, Int32, V)
  nameWithType: Trie<K, V>.TryFind(IList<K>, Int32, V)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind(System.Collections.Generic.IList<K>, System.Int32, V)
  nameWithType.vb: Trie(Of K, V).TryFind(IList(Of K), Int32, V)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind(System.Collections.Generic.IList(Of K), System.Int32, V)
  name.vb: TryFind(IList(Of K), Int32, V)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@)
    name: TryFind
    nameWithType: Trie<K, V>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@)
    name: TryFind
    nameWithType: Trie(Of K, V).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@,System.Int32@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@,System.Int32@)
  isExternal: true
  name: TryFind(IList<K>, Int32, V, Int32)
  nameWithType: Trie<K, V>.TryFind(IList<K>, Int32, V, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind(System.Collections.Generic.IList<K>, System.Int32, V, System.Int32)
  nameWithType.vb: Trie(Of K, V).TryFind(IList(Of K), Int32, V, Int32)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind(System.Collections.Generic.IList(Of K), System.Int32, V, System.Int32)
  name.vb: TryFind(IList(Of K), Int32, V, Int32)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie<K, V>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie(Of K, V).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1@,System.Int32@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1@,System.Int32@)
  isExternal: true
  name: TryFind(IList<K>, Int32, Int32, V, Int32)
  nameWithType: Trie<K, V>.TryFind(IList<K>, Int32, Int32, V, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind(System.Collections.Generic.IList<K>, System.Int32, System.Int32, V, System.Int32)
  nameWithType.vb: Trie(Of K, V).TryFind(IList(Of K), Int32, Int32, V, Int32)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind(System.Collections.Generic.IList(Of K), System.Int32, System.Int32, V, System.Int32)
  name.vb: TryFind(IList(Of K), Int32, Int32, V, Int32)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie<K, V>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie(Of K, V).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFindExact(System.Collections.Generic.IList{`0},System.Int32,`1@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.TryFindExact(System.Collections.Generic.IList{`0},System.Int32,`1@)
  isExternal: true
  name: TryFindExact(IList<K>, Int32, V)
  nameWithType: Trie<K, V>.TryFindExact(IList<K>, Int32, V)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFindExact(System.Collections.Generic.IList<K>, System.Int32, V)
  nameWithType.vb: Trie(Of K, V).TryFindExact(IList(Of K), Int32, V)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFindExact(System.Collections.Generic.IList(Of K), System.Int32, V)
  name.vb: TryFindExact(IList(Of K), Int32, V)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFindExact(System.Collections.Generic.IList{`0},System.Int32,`1@)
    name: TryFindExact
    nameWithType: Trie<K, V>.TryFindExact
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFindExact
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFindExact(System.Collections.Generic.IList{`0},System.Int32,`1@)
    name: TryFindExact
    nameWithType: Trie(Of K, V).TryFindExact
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFindExact
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IList{`0},System.Int32)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IList{`0},System.Int32)
  isExternal: true
  name: GetChildren(IList<K>, Int32)
  nameWithType: Trie<K, V>.GetChildren(IList<K>, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.GetChildren(System.Collections.Generic.IList<K>, System.Int32)
  nameWithType.vb: Trie(Of K, V).GetChildren(IList(Of K), Int32)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).GetChildren(System.Collections.Generic.IList(Of K), System.Int32)
  name.vb: GetChildren(IList(Of K), Int32)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IList{`0},System.Int32)
    name: GetChildren
    nameWithType: Trie<K, V>.GetChildren
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IList{`0},System.Int32)
    name: GetChildren
    nameWithType: Trie(Of K, V).GetChildren
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: GetChildren(IEnumerable<K>)
  nameWithType: Trie<K, V>.GetChildren(IEnumerable<K>)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.GetChildren(System.Collections.Generic.IEnumerable<K>)
  nameWithType.vb: Trie(Of K, V).GetChildren(IEnumerable(Of K))
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).GetChildren(System.Collections.Generic.IEnumerable(Of K))
  name.vb: GetChildren(IEnumerable(Of K))
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IEnumerable{`0})
    name: GetChildren
    nameWithType: Trie<K, V>.GetChildren
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IEnumerable{`0})
    name: GetChildren
    nameWithType: Trie(Of K, V).GetChildren
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetAllValues
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.GetAllValues
  isExternal: false
  name: GetAllValues()
  nameWithType: Trie<K, V>.GetAllValues()
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.GetAllValues()
  nameWithType.vb: Trie(Of K, V).GetAllValues()
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).GetAllValues()
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetAllValues
    name: GetAllValues
    nameWithType: Trie<K, V>.GetAllValues
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.GetAllValues
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetAllValues
    name: GetAllValues
    nameWithType: Trie(Of K, V).GetAllValues
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).GetAllValues
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},`1)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},`1)
  isExternal: true
  name: Add(IList<K>, V)
  nameWithType: Trie<K, V>.Add(IList<K>, V)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.Add(System.Collections.Generic.IList<K>, V)
  nameWithType.vb: Trie(Of K, V).Add(IList(Of K), V)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).Add(System.Collections.Generic.IList(Of K), V)
  name.vb: Add(IList(Of K), V)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},`1)
    name: Add
    nameWithType: Trie<K, V>.Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},`1)
    name: Add
    nameWithType: Trie(Of K, V).Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1)
  isExternal: true
  name: Add(IList<K>, Int32, Int32, V)
  nameWithType: Trie<K, V>.Add(IList<K>, Int32, Int32, V)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.Add(System.Collections.Generic.IList<K>, System.Int32, System.Int32, V)
  nameWithType.vb: Trie(Of K, V).Add(IList(Of K), Int32, Int32, V)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).Add(System.Collections.Generic.IList(Of K), System.Int32, System.Int32, V)
  name.vb: Add(IList(Of K), Int32, Int32, V)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1)
    name: Add
    nameWithType: Trie<K, V>.Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1)
    name: Add
    nameWithType: Trie(Of K, V).Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IEnumerable{`0},`1)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IEnumerable{`0},`1)
  isExternal: true
  name: Add(IEnumerable<K>, V)
  nameWithType: Trie<K, V>.Add(IEnumerable<K>, V)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.Add(System.Collections.Generic.IEnumerable<K>, V)
  nameWithType.vb: Trie(Of K, V).Add(IEnumerable(Of K), V)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).Add(System.Collections.Generic.IEnumerable(Of K), V)
  name.vb: Add(IEnumerable(Of K), V)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IEnumerable{`0},`1)
    name: Add
    nameWithType: Trie<K, V>.Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IEnumerable{`0},`1)
    name: Add
    nameWithType: Trie(Of K, V).Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Trim
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.Trim
  isExternal: false
  name: Trim()
  nameWithType: Trie<K, V>.Trim()
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.Trim()
  nameWithType.vb: Trie(Of K, V).Trim()
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).Trim()
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Trim
    name: Trim
    nameWithType: Trie<K, V>.Trim
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.Trim
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Trim
    name: Trim
    nameWithType: Trie(Of K, V).Trim
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).Trim
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  isExternal: true
  name: SetProperty(Object, String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object())
  name.vb: SetProperty(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions
  commentId: T:Microsoft.Health.Utility.IDispatchExtensions
  parent: Microsoft.Health.Utility
  isExternal: false
  name: IDispatchExtensions
  nameWithType: IDispatchExtensions
  fullName: Microsoft.Health.Utility.IDispatchExtensions
- uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  isExternal: true
  name: InvokeMethod(Object, String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object())
  name.vb: InvokeMethod(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  isExternal: true
  name: ToStringInvariant(Object)
  nameWithType: InvariantString.ToStringInvariant(Object)
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString
  commentId: T:Microsoft.Health.Utility.InvariantString
  parent: Microsoft.Health.Utility
  isExternal: false
  name: InvariantString
  nameWithType: InvariantString
  fullName: Microsoft.Health.Utility.InvariantString
- uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  isExternal: false
  name: ValueOrDbNull<T>(T)
  nameWithType: TypeHelper.ValueOrDbNull<T>(T)
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>(T)
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of T)(T)
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)(T)
  name.vb: ValueOrDbNull(Of T)(T)
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull<T>
    nameWithType: TypeHelper.ValueOrDbNull<T>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull(Of T)
    nameWithType: TypeHelper.ValueOrDbNull(Of T)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.TypeHelper
  commentId: T:Microsoft.Health.Utility.TypeHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: TypeHelper
  nameWithType: TypeHelper
  fullName: Microsoft.Health.Utility.TypeHelper
- uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  isExternal: true
  name: ToXml(Object)
  nameWithType: WCXmlHelper.ToXml(Object)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.WCXmlHelper
  commentId: T:Microsoft.Health.Utility.WCXmlHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: WCXmlHelper
  nameWithType: WCXmlHelper
  fullName: Microsoft.Health.Utility.WCXmlHelper
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1.#ctor*
  commentId: Overload:Microsoft.Health.PhraseAnalyzer.StringTrie`1.#ctor
  isExternal: false
  name: StringTrie
  nameWithType: StringTrie<T>.StringTrie
  fullName: Microsoft.Health.PhraseAnalyzer.StringTrie<T>.StringTrie
  nameWithType.vb: StringTrie(Of T).StringTrie
  fullName.vb: Microsoft.Health.PhraseAnalyzer.StringTrie(Of T).StringTrie
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,{T}}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<String, T>>
  nameWithType: IEnumerable<KeyValuePair<String, T>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, T>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of String, T))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, T))
  name.vb: IEnumerable(Of KeyValuePair(Of String, T))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Health.PhraseAnalyzer.WordBreaker
  commentId: T:Microsoft.Health.PhraseAnalyzer.WordBreaker
  parent: Microsoft.Health.PhraseAnalyzer
  isExternal: false
  name: WordBreaker
  nameWithType: WordBreaker
  fullName: Microsoft.Health.PhraseAnalyzer.WordBreaker
- uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1.Match*
  commentId: Overload:Microsoft.Health.PhraseAnalyzer.StringTrie`1.Match
  isExternal: false
  name: Match
  nameWithType: StringTrie<T>.Match
  fullName: Microsoft.Health.PhraseAnalyzer.StringTrie<T>.Match
  nameWithType.vb: StringTrie(Of T).Match
  fullName.vb: Microsoft.Health.PhraseAnalyzer.StringTrie(Of T).Match
- uid: Microsoft.Health.PhraseAnalyzer.IMatcher.Match(System.Collections.Generic.IList{System.String},System.Int32,System.Int32@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.IMatcher.Match(System.Collections.Generic.IList{System.String},System.Int32,System.Int32@)
  parent: Microsoft.Health.PhraseAnalyzer.IMatcher
  isExternal: true
  name: Match(IList<String>, Int32, Int32)
  nameWithType: IMatcher.Match(IList<String>, Int32, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.IMatcher.Match(System.Collections.Generic.IList<System.String>, System.Int32, System.Int32)
  nameWithType.vb: IMatcher.Match(IList(Of String), Int32, Int32)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.IMatcher.Match(System.Collections.Generic.IList(Of System.String), System.Int32, System.Int32)
  name.vb: Match(IList(Of String), Int32, Int32)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.IMatcher.Match(System.Collections.Generic.IList{System.String},System.Int32,System.Int32@)
    name: Match
    nameWithType: IMatcher.Match
    fullName: Microsoft.Health.PhraseAnalyzer.IMatcher.Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.IMatcher.Match(System.Collections.Generic.IList{System.String},System.Int32,System.Int32@)
    name: Match
    nameWithType: IMatcher.Match
    fullName: Microsoft.Health.PhraseAnalyzer.IMatcher.Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList{System.String}
  commentId: T:System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  nameWithType.vb: IList(Of String)
  fullName.vb: System.Collections.Generic.IList(Of System.String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1.Find*
  commentId: Overload:Microsoft.Health.PhraseAnalyzer.StringTrie`1.Find
  isExternal: false
  name: Find
  nameWithType: StringTrie<T>.Find
  fullName: Microsoft.Health.PhraseAnalyzer.StringTrie<T>.Find
  nameWithType.vb: StringTrie(Of T).Find
  fullName.vb: Microsoft.Health.PhraseAnalyzer.StringTrie(Of T).Find
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1.FindExact*
  commentId: Overload:Microsoft.Health.PhraseAnalyzer.StringTrie`1.FindExact
  isExternal: false
  name: FindExact
  nameWithType: StringTrie<T>.FindExact
  fullName: Microsoft.Health.PhraseAnalyzer.StringTrie<T>.FindExact
  nameWithType.vb: StringTrie(Of T).FindExact
  fullName.vb: Microsoft.Health.PhraseAnalyzer.StringTrie(Of T).FindExact
- uid: Microsoft.Health.PhraseAnalyzer.StringTrie`1.Add*
  commentId: Overload:Microsoft.Health.PhraseAnalyzer.StringTrie`1.Add
  isExternal: false
  name: Add
  nameWithType: StringTrie<T>.Add
  fullName: Microsoft.Health.PhraseAnalyzer.StringTrie<T>.Add
  nameWithType.vb: StringTrie(Of T).Add
  fullName.vb: Microsoft.Health.PhraseAnalyzer.StringTrie(Of T).Add
