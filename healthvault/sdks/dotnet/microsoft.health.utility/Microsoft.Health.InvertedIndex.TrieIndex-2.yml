### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.InvertedIndex.TrieIndex`2
  commentId: T:Microsoft.Health.InvertedIndex.TrieIndex`2
  id: TrieIndex`2
  parent: Microsoft.Health.InvertedIndex
  children:
  - Microsoft.Health.InvertedIndex.TrieIndex`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  - Microsoft.Health.InvertedIndex.TrieIndex`2.Item(System.Collections.Generic.IEnumerable{`0})
  - Microsoft.Health.InvertedIndex.TrieIndex`2.Item(System.Collections.Generic.IList{`0})
  - Microsoft.Health.InvertedIndex.TrieIndex`2.Item(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
  - Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IEnumerable{`0})
  - Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{`0}})
  - Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{`0})
  - Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
  - Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}})
  - Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  - Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}},System.Int32,System.Int32)
  - Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  langs:
  - csharp
  - vb
  name: TrieIndex<T, TRecordIDList>
  nameWithType: TrieIndex<T, TRecordIDList>
  fullName: Microsoft.Health.InvertedIndex.TrieIndex<T, TRecordIDList>
  type: Class
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/TrieIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: TrieIndex
    path: search/InvertedIndex/TrieIndex.cs
    startLine: 24
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: 'public class TrieIndex<T, TRecordIDList> : Trie<T, TRecordIDList>, ITrieIndex<T, TRecordIDList>, ISearchIndex<IEnumerable<T>, TRecordIDList> where TRecordIDList : class, IRecordIDList'
    content.vb: >-
      Public Class TrieIndex(Of T, TRecordIDList As {Class, IRecordIDList})
          Inherits Trie(Of T, TRecordIDList)
          Implements ITrieIndex(Of T, TRecordIDList), ISearchIndex(Of IEnumerable(Of T), TRecordIDList)
    typeParameters:
    - id: T
      description: ''
    - id: TRecordIDList
      description: ''
  inheritance:
  - System.Object
  - Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}
  derivedClasses:
  - Microsoft.Health.InvertedIndex.NgramIndex
  implements:
  - Microsoft.Health.InvertedIndex.ITrieIndex{{T},{TRecordIDList}}
  - Microsoft.Health.InvertedIndex.ISearchIndex{System.Collections.Generic.IEnumerable{{T}},{TRecordIDList}}
  inheritedMembers:
  - Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}.IgnoreDuplicates
  - Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}.MaxLinearScanItemLength
  - Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}.TryFind(System.Collections.Generic.IEnumerable{{T}},{TRecordIDList}@)
  - Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}.TryFind(System.Collections.Generic.IEnumerable{{T}},{TRecordIDList}@,System.Int32@)
  - Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}.TryFind(System.Collections.Generic.IList{{T}},{TRecordIDList}@)
  - Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}.TryFind(System.Collections.Generic.IList{{T}},System.Int32,{TRecordIDList}@)
  - Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}.TryFind(System.Collections.Generic.IList{{T}},System.Int32,{TRecordIDList}@,System.Int32@)
  - Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}.TryFind(System.Collections.Generic.IList{{T}},System.Int32,System.Int32,{TRecordIDList}@,System.Int32@)
  - Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}.TryFindExact(System.Collections.Generic.IList{{T}},System.Int32,{TRecordIDList}@)
  - Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}.GetChildren(System.Collections.Generic.IList{{T}},System.Int32)
  - Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}.GetChildren(System.Collections.Generic.IEnumerable{{T}})
  - Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}.GetAllValues
  - Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}.Add(System.Collections.Generic.IList{{T}},{TRecordIDList})
  - Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}.Add(System.Collections.Generic.IList{{T}},System.Int32,System.Int32,{TRecordIDList})
  - Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}.Add(System.Collections.Generic.IEnumerable{{T}},{TRecordIDList})
  - Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}.Trim
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - Microsoft.Health.InvertedIndex.TrieIndex`2.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  - System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  nameWithType.vb: TrieIndex(Of T, TRecordIDList)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.Health.InvertedIndex.TrieIndex(Of T, TRecordIDList)
  name.vb: TrieIndex(Of T, TRecordIDList)
- uid: Microsoft.Health.InvertedIndex.TrieIndex`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:Microsoft.Health.InvertedIndex.TrieIndex`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Collections.Generic.IEqualityComparer{`0})'
  parent: Microsoft.Health.InvertedIndex.TrieIndex`2
  langs:
  - csharp
  - vb
  name: TrieIndex(IEqualityComparer<T>)
  nameWithType: TrieIndex<T, TRecordIDList>.TrieIndex(IEqualityComparer<T>)
  fullName: Microsoft.Health.InvertedIndex.TrieIndex<T, TRecordIDList>.TrieIndex(System.Collections.Generic.IEqualityComparer<T>)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/TrieIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: search/InvertedIndex/TrieIndex.cs
    startLine: 33
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public TrieIndex(IEqualityComparer<T> comparer)
    content.vb: Public Sub New(comparer As IEqualityComparer(Of T))
    parameters:
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: ''
  overload: Microsoft.Health.InvertedIndex.TrieIndex`2.#ctor*
  nameWithType.vb: TrieIndex(Of T, TRecordIDList).TrieIndex(IEqualityComparer(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.InvertedIndex.TrieIndex(Of T, TRecordIDList).TrieIndex(System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: TrieIndex(IEqualityComparer(Of T))
- uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Item(System.Collections.Generic.IEnumerable{`0})
  commentId: P:Microsoft.Health.InvertedIndex.TrieIndex`2.Item(System.Collections.Generic.IEnumerable{`0})
  id: Item(System.Collections.Generic.IEnumerable{`0})
  parent: Microsoft.Health.InvertedIndex.TrieIndex`2
  langs:
  - csharp
  - vb
  name: Item[IEnumerable<T>]
  nameWithType: TrieIndex<T, TRecordIDList>.Item[IEnumerable<T>]
  fullName: Microsoft.Health.InvertedIndex.TrieIndex<T, TRecordIDList>.Item[System.Collections.Generic.IEnumerable<T>]
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/TrieIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: this[]
    path: search/InvertedIndex/TrieIndex.cs
    startLine: 44
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public TRecordIDList this[IEnumerable<T> term] { get; }
    content.vb: Public ReadOnly Property Item(term As IEnumerable(Of T)) As TRecordIDList
    parameters:
    - id: term
      type: System.Collections.Generic.IEnumerable{{T}}
      description: ''
    return:
      type: '{TRecordIDList}'
      description: ''
  overload: Microsoft.Health.InvertedIndex.TrieIndex`2.Item*
  implements:
  - Microsoft.Health.InvertedIndex.ISearchIndex{System.Collections.Generic.IEnumerable{{T}},{TRecordIDList}}.Item(System.Collections.Generic.IEnumerable{{T}})
  nameWithType.vb: TrieIndex(Of T, TRecordIDList).Item(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.Health.InvertedIndex.TrieIndex(Of T, TRecordIDList).Item(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Item(IEnumerable(Of T))
- uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Item(System.Collections.Generic.IList{`0})
  commentId: P:Microsoft.Health.InvertedIndex.TrieIndex`2.Item(System.Collections.Generic.IList{`0})
  id: Item(System.Collections.Generic.IList{`0})
  parent: Microsoft.Health.InvertedIndex.TrieIndex`2
  langs:
  - csharp
  - vb
  name: Item[IList<T>]
  nameWithType: TrieIndex<T, TRecordIDList>.Item[IList<T>]
  fullName: Microsoft.Health.InvertedIndex.TrieIndex<T, TRecordIDList>.Item[System.Collections.Generic.IList<T>]
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/TrieIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: this[]
    path: search/InvertedIndex/TrieIndex.cs
    startLine: 63
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public TRecordIDList this[IList<T> term] { get; }
    content.vb: Public ReadOnly Property Item(term As IList(Of T)) As TRecordIDList
    parameters:
    - id: term
      type: System.Collections.Generic.IList{{T}}
      description: ''
    return:
      type: '{TRecordIDList}'
      description: ''
  overload: Microsoft.Health.InvertedIndex.TrieIndex`2.Item*
  nameWithType.vb: TrieIndex(Of T, TRecordIDList).Item(IList(Of T))
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.Health.InvertedIndex.TrieIndex(Of T, TRecordIDList).Item(System.Collections.Generic.IList(Of T))
  name.vb: Item(IList(Of T))
- uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Item(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
  commentId: P:Microsoft.Health.InvertedIndex.TrieIndex`2.Item(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
  id: Item(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
  parent: Microsoft.Health.InvertedIndex.TrieIndex`2
  langs:
  - csharp
  - vb
  name: Item[IList<T>, Int32, Int32]
  nameWithType: TrieIndex<T, TRecordIDList>.Item[IList<T>, Int32, Int32]
  fullName: Microsoft.Health.InvertedIndex.TrieIndex<T, TRecordIDList>.Item[System.Collections.Generic.IList<T>, System.Int32, System.Int32]
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/TrieIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: this[]
    path: search/InvertedIndex/TrieIndex.cs
    startLine: 86
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public TRecordIDList this[IList<T> term, int startAt, int length] { get; }
    content.vb: Public ReadOnly Property Item(term As IList(Of T), startAt As Integer, length As Integer) As TRecordIDList
    parameters:
    - id: term
      type: System.Collections.Generic.IList{{T}}
      description: ''
    - id: startAt
      type: System.Int32
      description: ''
    - id: length
      type: System.Int32
      description: ''
    return:
      type: '{TRecordIDList}'
      description: ''
  overload: Microsoft.Health.InvertedIndex.TrieIndex`2.Item*
  nameWithType.vb: TrieIndex(Of T, TRecordIDList).Item(IList(Of T), Int32, Int32)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.Health.InvertedIndex.TrieIndex(Of T, TRecordIDList).Item(System.Collections.Generic.IList(Of T), System.Int32, System.Int32)
  name.vb: Item(IList(Of T), Int32, Int32)
- uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{`0})
  commentId: M:Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{`0})
  id: Resolve(System.Collections.Generic.IList{`0})
  parent: Microsoft.Health.InvertedIndex.TrieIndex`2
  langs:
  - csharp
  - vb
  name: Resolve(IList<T>)
  nameWithType: TrieIndex<T, TRecordIDList>.Resolve(IList<T>)
  fullName: Microsoft.Health.InvertedIndex.TrieIndex<T, TRecordIDList>.Resolve(System.Collections.Generic.IList<T>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/TrieIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Resolve
    path: search/InvertedIndex/TrieIndex.cs
    startLine: 106
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public RecordIDEnumerator Resolve(IList<T> term)
    content.vb: Public Function Resolve(term As IList(Of T)) As RecordIDEnumerator
    parameters:
    - id: term
      type: System.Collections.Generic.IList{{T}}
      description: ''
    return:
      type: Microsoft.Health.InvertedIndex.RecordIDEnumerator
      description: ''
  overload: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve*
  nameWithType.vb: TrieIndex(Of T, TRecordIDList).Resolve(IList(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.InvertedIndex.TrieIndex(Of T, TRecordIDList).Resolve(System.Collections.Generic.IList(Of T))
  name.vb: Resolve(IList(Of T))
- uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
  commentId: M:Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
  id: Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
  parent: Microsoft.Health.InvertedIndex.TrieIndex`2
  langs:
  - csharp
  - vb
  name: Resolve(IList<T>, Int32, Int32)
  nameWithType: TrieIndex<T, TRecordIDList>.Resolve(IList<T>, Int32, Int32)
  fullName: Microsoft.Health.InvertedIndex.TrieIndex<T, TRecordIDList>.Resolve(System.Collections.Generic.IList<T>, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/TrieIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Resolve
    path: search/InvertedIndex/TrieIndex.cs
    startLine: 124
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public RecordIDEnumerator Resolve(IList<T> term, int startAt, int count)
    content.vb: Public Function Resolve(term As IList(Of T), startAt As Integer, count As Integer) As RecordIDEnumerator
    parameters:
    - id: term
      type: System.Collections.Generic.IList{{T}}
      description: ''
    - id: startAt
      type: System.Int32
      description: ''
    - id: count
      type: System.Int32
      description: ''
    return:
      type: Microsoft.Health.InvertedIndex.RecordIDEnumerator
      description: ''
  overload: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve*
  nameWithType.vb: TrieIndex(Of T, TRecordIDList).Resolve(IList(Of T), Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.InvertedIndex.TrieIndex(Of T, TRecordIDList).Resolve(System.Collections.Generic.IList(Of T), System.Int32, System.Int32)
  name.vb: Resolve(IList(Of T), Int32, Int32)
- uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IEnumerable{`0})
  id: Resolve(System.Collections.Generic.IEnumerable{`0})
  parent: Microsoft.Health.InvertedIndex.TrieIndex`2
  langs:
  - csharp
  - vb
  name: Resolve(IEnumerable<T>)
  nameWithType: TrieIndex<T, TRecordIDList>.Resolve(IEnumerable<T>)
  fullName: Microsoft.Health.InvertedIndex.TrieIndex<T, TRecordIDList>.Resolve(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/TrieIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Resolve
    path: search/InvertedIndex/TrieIndex.cs
    startLine: 140
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public RecordIDEnumerator Resolve(IEnumerable<T> term)
    content.vb: Public Function Resolve(term As IEnumerable(Of T)) As RecordIDEnumerator
    parameters:
    - id: term
      type: System.Collections.Generic.IEnumerable{{T}}
      description: ''
    return:
      type: Microsoft.Health.InvertedIndex.RecordIDEnumerator
      description: ''
  overload: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve*
  implements:
  - Microsoft.Health.InvertedIndex.ISearchIndex{System.Collections.Generic.IEnumerable{{T}},{TRecordIDList}}.Resolve(System.Collections.Generic.IEnumerable{{T}})
  nameWithType.vb: TrieIndex(Of T, TRecordIDList).Resolve(IEnumerable(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.InvertedIndex.TrieIndex(Of T, TRecordIDList).Resolve(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Resolve(IEnumerable(Of T))
- uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}})
  commentId: M:Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}})
  id: Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}})
  parent: Microsoft.Health.InvertedIndex.TrieIndex`2
  langs:
  - csharp
  - vb
  name: Resolve(IList<IEnumerable<T>>)
  nameWithType: TrieIndex<T, TRecordIDList>.Resolve(IList<IEnumerable<T>>)
  fullName: Microsoft.Health.InvertedIndex.TrieIndex<T, TRecordIDList>.Resolve(System.Collections.Generic.IList<System.Collections.Generic.IEnumerable<T>>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/TrieIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Resolve
    path: search/InvertedIndex/TrieIndex.cs
    startLine: 156
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public RecordIDEnumerator[] Resolve(IList<IEnumerable<T>> terms)
    content.vb: Public Function Resolve(terms As IList(Of IEnumerable(Of T))) As RecordIDEnumerator()
    parameters:
    - id: terms
      type: System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{{T}}}
      description: ''
    return:
      type: Microsoft.Health.InvertedIndex.RecordIDEnumerator[]
      description: ''
  overload: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve*
  implements:
  - Microsoft.Health.InvertedIndex.ISearchIndex{System.Collections.Generic.IEnumerable{{T}},{TRecordIDList}}.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{{T}}})
  nameWithType.vb: TrieIndex(Of T, TRecordIDList).Resolve(IList(Of IEnumerable(Of T)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.InvertedIndex.TrieIndex(Of T, TRecordIDList).Resolve(System.Collections.Generic.IList(Of System.Collections.Generic.IEnumerable(Of T)))
  name.vb: Resolve(IList(Of IEnumerable(Of T)))
- uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}},System.Int32,System.Int32)
  commentId: M:Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}},System.Int32,System.Int32)
  id: Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}},System.Int32,System.Int32)
  parent: Microsoft.Health.InvertedIndex.TrieIndex`2
  langs:
  - csharp
  - vb
  name: Resolve(IList<IEnumerable<T>>, Int32, Int32)
  nameWithType: TrieIndex<T, TRecordIDList>.Resolve(IList<IEnumerable<T>>, Int32, Int32)
  fullName: Microsoft.Health.InvertedIndex.TrieIndex<T, TRecordIDList>.Resolve(System.Collections.Generic.IList<System.Collections.Generic.IEnumerable<T>>, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/TrieIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Resolve
    path: search/InvertedIndex/TrieIndex.cs
    startLine: 168
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public RecordIDEnumerator[] Resolve(IList<IEnumerable<T>> terms, int startAt, int count)
    content.vb: Public Function Resolve(terms As IList(Of IEnumerable(Of T)), startAt As Integer, count As Integer) As RecordIDEnumerator()
    parameters:
    - id: terms
      type: System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{{T}}}
      description: ''
    - id: startAt
      type: System.Int32
      description: ''
    - id: count
      type: System.Int32
      description: ''
    return:
      type: Microsoft.Health.InvertedIndex.RecordIDEnumerator[]
      description: ''
  overload: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve*
  implements:
  - Microsoft.Health.InvertedIndex.ISearchIndex{System.Collections.Generic.IEnumerable{{T}},{TRecordIDList}}.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{{T}}},System.Int32,System.Int32)
  nameWithType.vb: TrieIndex(Of T, TRecordIDList).Resolve(IList(Of IEnumerable(Of T)), Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.InvertedIndex.TrieIndex(Of T, TRecordIDList).Resolve(System.Collections.Generic.IList(Of System.Collections.Generic.IEnumerable(Of T)), System.Int32, System.Int32)
  name.vb: Resolve(IList(Of IEnumerable(Of T)), Int32, Int32)
- uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{`0}})
  commentId: M:Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{`0}})
  id: Resolve(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{`0}})
  parent: Microsoft.Health.InvertedIndex.TrieIndex`2
  langs:
  - csharp
  - vb
  name: Resolve(IEnumerable<IEnumerable<T>>)
  nameWithType: TrieIndex<T, TRecordIDList>.Resolve(IEnumerable<IEnumerable<T>>)
  fullName: Microsoft.Health.InvertedIndex.TrieIndex<T, TRecordIDList>.Resolve(System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<T>>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/TrieIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Resolve
    path: search/InvertedIndex/TrieIndex.cs
    startLine: 178
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public RecordIDEnumerator[] Resolve(IEnumerable<IEnumerable<T>> terms)
    content.vb: Public Function Resolve(terms As IEnumerable(Of IEnumerable(Of T))) As RecordIDEnumerator()
    parameters:
    - id: terms
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{{T}}}
      description: ''
    return:
      type: Microsoft.Health.InvertedIndex.RecordIDEnumerator[]
      description: ''
  overload: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve*
  implements:
  - Microsoft.Health.InvertedIndex.ISearchIndex{System.Collections.Generic.IEnumerable{{T}},{TRecordIDList}}.Resolve(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{{T}}})
  nameWithType.vb: TrieIndex(Of T, TRecordIDList).Resolve(IEnumerable(Of IEnumerable(Of T)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.InvertedIndex.TrieIndex(Of T, TRecordIDList).Resolve(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IEnumerable(Of T)))
  name.vb: Resolve(IEnumerable(Of IEnumerable(Of T)))
- uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  commentId: M:Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  id: Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  parent: Microsoft.Health.InvertedIndex.TrieIndex`2
  langs:
  - csharp
  - vb
  name: Resolve(IList<IEnumerable<T>>, ref StructList<RecordIDEnumerator>)
  nameWithType: TrieIndex<T, TRecordIDList>.Resolve(IList<IEnumerable<T>>, ref StructList<RecordIDEnumerator>)
  fullName: Microsoft.Health.InvertedIndex.TrieIndex<T, TRecordIDList>.Resolve(System.Collections.Generic.IList<System.Collections.Generic.IEnumerable<T>>, ref Microsoft.Health.StructList<Microsoft.Health.InvertedIndex.RecordIDEnumerator>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/TrieIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Resolve
    path: search/InvertedIndex/TrieIndex.cs
    startLine: 188
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public void Resolve(IList<IEnumerable<T>> terms, ref StructList<RecordIDEnumerator> postingsList)
    content.vb: Public Sub Resolve(terms As IList(Of IEnumerable(Of T)), ByRef postingsList As StructList(Of RecordIDEnumerator))
    parameters:
    - id: terms
      type: System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{{T}}}
      description: ''
    - id: postingsList
      type: Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}
      description: ''
  overload: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve*
  implements:
  - Microsoft.Health.InvertedIndex.ISearchIndex{System.Collections.Generic.IEnumerable{{T}},{TRecordIDList}}.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{{T}}},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  nameWithType.vb: TrieIndex(Of T, TRecordIDList).Resolve(IList(Of IEnumerable(Of T)), ByRef StructList(Of RecordIDEnumerator))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.InvertedIndex.TrieIndex(Of T, TRecordIDList).Resolve(System.Collections.Generic.IList(Of System.Collections.Generic.IEnumerable(Of T)), ByRef Microsoft.Health.StructList(Of Microsoft.Health.InvertedIndex.RecordIDEnumerator))
  name.vb: Resolve(IList(Of IEnumerable(Of T)), ByRef StructList(Of RecordIDEnumerator))
- uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  commentId: M:Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  id: Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  parent: Microsoft.Health.InvertedIndex.TrieIndex`2
  langs:
  - csharp
  - vb
  name: Resolve(IList<IEnumerable<T>>, Int32, Int32, ref StructList<RecordIDEnumerator>)
  nameWithType: TrieIndex<T, TRecordIDList>.Resolve(IList<IEnumerable<T>>, Int32, Int32, ref StructList<RecordIDEnumerator>)
  fullName: Microsoft.Health.InvertedIndex.TrieIndex<T, TRecordIDList>.Resolve(System.Collections.Generic.IList<System.Collections.Generic.IEnumerable<T>>, System.Int32, System.Int32, ref Microsoft.Health.StructList<Microsoft.Health.InvertedIndex.RecordIDEnumerator>)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/InvertedIndex/TrieIndex.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Resolve
    path: search/InvertedIndex/TrieIndex.cs
    startLine: 201
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.InvertedIndex
  summary: "\n\n"
  example: []
  syntax:
    content: public void Resolve(IList<IEnumerable<T>> terms, int startAt, int count, ref StructList<RecordIDEnumerator> postingsList)
    content.vb: Public Sub Resolve(terms As IList(Of IEnumerable(Of T)), startAt As Integer, count As Integer, ByRef postingsList As StructList(Of RecordIDEnumerator))
    parameters:
    - id: terms
      type: System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{{T}}}
      description: ''
    - id: startAt
      type: System.Int32
      description: ''
    - id: count
      type: System.Int32
      description: ''
    - id: postingsList
      type: Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}
      description: ''
  overload: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve*
  implements:
  - Microsoft.Health.InvertedIndex.ISearchIndex{System.Collections.Generic.IEnumerable{{T}},{TRecordIDList}}.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{{T}}},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  nameWithType.vb: TrieIndex(Of T, TRecordIDList).Resolve(IList(Of IEnumerable(Of T)), Int32, Int32, ByRef StructList(Of RecordIDEnumerator))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.InvertedIndex.TrieIndex(Of T, TRecordIDList).Resolve(System.Collections.Generic.IList(Of System.Collections.Generic.IEnumerable(Of T)), System.Int32, System.Int32, ByRef Microsoft.Health.StructList(Of Microsoft.Health.InvertedIndex.RecordIDEnumerator))
  name.vb: Resolve(IList(Of IEnumerable(Of T)), Int32, Int32, ByRef StructList(Of RecordIDEnumerator))
references:
- uid: Microsoft.Health.InvertedIndex
  commentId: N:Microsoft.Health.InvertedIndex
  isExternal: false
  name: Microsoft.Health.InvertedIndex
  nameWithType: Microsoft.Health.InvertedIndex
  fullName: Microsoft.Health.InvertedIndex
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}
  commentId: T:Microsoft.Health.PhraseAnalyzer.Trie{`0,`1}
  parent: Microsoft.Health.PhraseAnalyzer
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2
  name: Trie<T, TRecordIDList>
  nameWithType: Trie<T, TRecordIDList>
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<T, TRecordIDList>
  nameWithType.vb: Trie(Of T, TRecordIDList)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of T, TRecordIDList)
  name.vb: Trie(Of T, TRecordIDList)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2
    name: Trie
    nameWithType: Trie
    fullName: Microsoft.Health.PhraseAnalyzer.Trie
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2
    name: Trie
    nameWithType: Trie
    fullName: Microsoft.Health.PhraseAnalyzer.Trie
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.ITrieIndex{{T},{TRecordIDList}}
  commentId: T:Microsoft.Health.InvertedIndex.ITrieIndex{`0,`1}
  parent: Microsoft.Health.InvertedIndex
  definition: Microsoft.Health.InvertedIndex.ITrieIndex`2
  name: ITrieIndex<T, TRecordIDList>
  nameWithType: ITrieIndex<T, TRecordIDList>
  fullName: Microsoft.Health.InvertedIndex.ITrieIndex<T, TRecordIDList>
  nameWithType.vb: ITrieIndex(Of T, TRecordIDList)
  fullName.vb: Microsoft.Health.InvertedIndex.ITrieIndex(Of T, TRecordIDList)
  name.vb: ITrieIndex(Of T, TRecordIDList)
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ITrieIndex`2
    name: ITrieIndex
    nameWithType: ITrieIndex
    fullName: Microsoft.Health.InvertedIndex.ITrieIndex
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ITrieIndex`2
    name: ITrieIndex
    nameWithType: ITrieIndex
    fullName: Microsoft.Health.InvertedIndex.ITrieIndex
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.ISearchIndex{System.Collections.Generic.IEnumerable{{T}},{TRecordIDList}}
  commentId: T:Microsoft.Health.InvertedIndex.ISearchIndex{System.Collections.Generic.IEnumerable{`0},`1}
  parent: Microsoft.Health.InvertedIndex
  definition: Microsoft.Health.InvertedIndex.ISearchIndex`2
  name: ISearchIndex<IEnumerable<T>, TRecordIDList>
  nameWithType: ISearchIndex<IEnumerable<T>, TRecordIDList>
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<System.Collections.Generic.IEnumerable<T>, TRecordIDList>
  nameWithType.vb: ISearchIndex(Of IEnumerable(Of T), TRecordIDList)
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of System.Collections.Generic.IEnumerable(Of T), TRecordIDList)
  name.vb: ISearchIndex(Of IEnumerable(Of T), TRecordIDList)
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2
    name: ISearchIndex
    nameWithType: ISearchIndex
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2
    name: ISearchIndex
    nameWithType: ISearchIndex
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}.IgnoreDuplicates
  commentId: P:Microsoft.Health.PhraseAnalyzer.Trie{`0,`1}.IgnoreDuplicates
  parent: Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.IgnoreDuplicates
  name: IgnoreDuplicates
  nameWithType: Trie<T, TRecordIDList>.IgnoreDuplicates
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<T, TRecordIDList>.IgnoreDuplicates
  nameWithType.vb: Trie(Of T, TRecordIDList).IgnoreDuplicates
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of T, TRecordIDList).IgnoreDuplicates
- uid: Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}.MaxLinearScanItemLength
  commentId: P:Microsoft.Health.PhraseAnalyzer.Trie{`0,`1}.MaxLinearScanItemLength
  parent: Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.MaxLinearScanItemLength
  name: MaxLinearScanItemLength
  nameWithType: Trie<T, TRecordIDList>.MaxLinearScanItemLength
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<T, TRecordIDList>.MaxLinearScanItemLength
  nameWithType.vb: Trie(Of T, TRecordIDList).MaxLinearScanItemLength
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of T, TRecordIDList).MaxLinearScanItemLength
- uid: Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}.TryFind(System.Collections.Generic.IEnumerable{{T}},{TRecordIDList}@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{`0,`1}.TryFind(System.Collections.Generic.IEnumerable{`0},`1@)
  parent: Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@)
  name: TryFind(IEnumerable<T>, TRecordIDList)
  nameWithType: Trie<T, TRecordIDList>.TryFind(IEnumerable<T>, TRecordIDList)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<T, TRecordIDList>.TryFind(System.Collections.Generic.IEnumerable<T>, TRecordIDList)
  nameWithType.vb: Trie(Of T, TRecordIDList).TryFind(IEnumerable(Of T), TRecordIDList)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of T, TRecordIDList).TryFind(System.Collections.Generic.IEnumerable(Of T), TRecordIDList)
  name.vb: TryFind(IEnumerable(Of T), TRecordIDList)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@)
    name: TryFind
    nameWithType: Trie<T, TRecordIDList>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<T, TRecordIDList>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@)
    name: TryFind
    nameWithType: Trie(Of T, TRecordIDList).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of T, TRecordIDList).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}.TryFind(System.Collections.Generic.IEnumerable{{T}},{TRecordIDList}@,System.Int32@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{`0,`1}.TryFind(System.Collections.Generic.IEnumerable{`0},`1@,System.Int32@)
  parent: Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@,System.Int32@)
  name: TryFind(IEnumerable<T>, TRecordIDList, Int32)
  nameWithType: Trie<T, TRecordIDList>.TryFind(IEnumerable<T>, TRecordIDList, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<T, TRecordIDList>.TryFind(System.Collections.Generic.IEnumerable<T>, TRecordIDList, System.Int32)
  nameWithType.vb: Trie(Of T, TRecordIDList).TryFind(IEnumerable(Of T), TRecordIDList, Int32)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of T, TRecordIDList).TryFind(System.Collections.Generic.IEnumerable(Of T), TRecordIDList, System.Int32)
  name.vb: TryFind(IEnumerable(Of T), TRecordIDList, Int32)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie<T, TRecordIDList>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<T, TRecordIDList>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie(Of T, TRecordIDList).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of T, TRecordIDList).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}.TryFind(System.Collections.Generic.IList{{T}},{TRecordIDList}@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{`0,`1}.TryFind(System.Collections.Generic.IList{`0},`1@)
  parent: Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},`1@)
  name: TryFind(IList<T>, TRecordIDList)
  nameWithType: Trie<T, TRecordIDList>.TryFind(IList<T>, TRecordIDList)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<T, TRecordIDList>.TryFind(System.Collections.Generic.IList<T>, TRecordIDList)
  nameWithType.vb: Trie(Of T, TRecordIDList).TryFind(IList(Of T), TRecordIDList)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of T, TRecordIDList).TryFind(System.Collections.Generic.IList(Of T), TRecordIDList)
  name.vb: TryFind(IList(Of T), TRecordIDList)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},`1@)
    name: TryFind
    nameWithType: Trie<T, TRecordIDList>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<T, TRecordIDList>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},`1@)
    name: TryFind
    nameWithType: Trie(Of T, TRecordIDList).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of T, TRecordIDList).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}.TryFind(System.Collections.Generic.IList{{T}},System.Int32,{TRecordIDList}@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{`0,`1}.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@)
  parent: Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@)
  name: TryFind(IList<T>, Int32, TRecordIDList)
  nameWithType: Trie<T, TRecordIDList>.TryFind(IList<T>, Int32, TRecordIDList)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<T, TRecordIDList>.TryFind(System.Collections.Generic.IList<T>, System.Int32, TRecordIDList)
  nameWithType.vb: Trie(Of T, TRecordIDList).TryFind(IList(Of T), Int32, TRecordIDList)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of T, TRecordIDList).TryFind(System.Collections.Generic.IList(Of T), System.Int32, TRecordIDList)
  name.vb: TryFind(IList(Of T), Int32, TRecordIDList)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@)
    name: TryFind
    nameWithType: Trie<T, TRecordIDList>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<T, TRecordIDList>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@)
    name: TryFind
    nameWithType: Trie(Of T, TRecordIDList).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of T, TRecordIDList).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}.TryFind(System.Collections.Generic.IList{{T}},System.Int32,{TRecordIDList}@,System.Int32@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{`0,`1}.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@,System.Int32@)
  parent: Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@,System.Int32@)
  name: TryFind(IList<T>, Int32, TRecordIDList, Int32)
  nameWithType: Trie<T, TRecordIDList>.TryFind(IList<T>, Int32, TRecordIDList, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<T, TRecordIDList>.TryFind(System.Collections.Generic.IList<T>, System.Int32, TRecordIDList, System.Int32)
  nameWithType.vb: Trie(Of T, TRecordIDList).TryFind(IList(Of T), Int32, TRecordIDList, Int32)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of T, TRecordIDList).TryFind(System.Collections.Generic.IList(Of T), System.Int32, TRecordIDList, System.Int32)
  name.vb: TryFind(IList(Of T), Int32, TRecordIDList, Int32)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie<T, TRecordIDList>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<T, TRecordIDList>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie(Of T, TRecordIDList).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of T, TRecordIDList).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}.TryFind(System.Collections.Generic.IList{{T}},System.Int32,System.Int32,{TRecordIDList}@,System.Int32@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{`0,`1}.TryFind(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1@,System.Int32@)
  parent: Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1@,System.Int32@)
  name: TryFind(IList<T>, Int32, Int32, TRecordIDList, Int32)
  nameWithType: Trie<T, TRecordIDList>.TryFind(IList<T>, Int32, Int32, TRecordIDList, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<T, TRecordIDList>.TryFind(System.Collections.Generic.IList<T>, System.Int32, System.Int32, TRecordIDList, System.Int32)
  nameWithType.vb: Trie(Of T, TRecordIDList).TryFind(IList(Of T), Int32, Int32, TRecordIDList, Int32)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of T, TRecordIDList).TryFind(System.Collections.Generic.IList(Of T), System.Int32, System.Int32, TRecordIDList, System.Int32)
  name.vb: TryFind(IList(Of T), Int32, Int32, TRecordIDList, Int32)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie<T, TRecordIDList>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<T, TRecordIDList>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie(Of T, TRecordIDList).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of T, TRecordIDList).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}.TryFindExact(System.Collections.Generic.IList{{T}},System.Int32,{TRecordIDList}@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{`0,`1}.TryFindExact(System.Collections.Generic.IList{`0},System.Int32,`1@)
  parent: Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFindExact(System.Collections.Generic.IList{`0},System.Int32,`1@)
  name: TryFindExact(IList<T>, Int32, TRecordIDList)
  nameWithType: Trie<T, TRecordIDList>.TryFindExact(IList<T>, Int32, TRecordIDList)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<T, TRecordIDList>.TryFindExact(System.Collections.Generic.IList<T>, System.Int32, TRecordIDList)
  nameWithType.vb: Trie(Of T, TRecordIDList).TryFindExact(IList(Of T), Int32, TRecordIDList)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of T, TRecordIDList).TryFindExact(System.Collections.Generic.IList(Of T), System.Int32, TRecordIDList)
  name.vb: TryFindExact(IList(Of T), Int32, TRecordIDList)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFindExact(System.Collections.Generic.IList{`0},System.Int32,`1@)
    name: TryFindExact
    nameWithType: Trie<T, TRecordIDList>.TryFindExact
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<T, TRecordIDList>.TryFindExact
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFindExact(System.Collections.Generic.IList{`0},System.Int32,`1@)
    name: TryFindExact
    nameWithType: Trie(Of T, TRecordIDList).TryFindExact
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of T, TRecordIDList).TryFindExact
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}.GetChildren(System.Collections.Generic.IList{{T}},System.Int32)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{`0,`1}.GetChildren(System.Collections.Generic.IList{`0},System.Int32)
  parent: Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IList{`0},System.Int32)
  name: GetChildren(IList<T>, Int32)
  nameWithType: Trie<T, TRecordIDList>.GetChildren(IList<T>, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<T, TRecordIDList>.GetChildren(System.Collections.Generic.IList<T>, System.Int32)
  nameWithType.vb: Trie(Of T, TRecordIDList).GetChildren(IList(Of T), Int32)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of T, TRecordIDList).GetChildren(System.Collections.Generic.IList(Of T), System.Int32)
  name.vb: GetChildren(IList(Of T), Int32)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IList{`0},System.Int32)
    name: GetChildren
    nameWithType: Trie<T, TRecordIDList>.GetChildren
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<T, TRecordIDList>.GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IList{`0},System.Int32)
    name: GetChildren
    nameWithType: Trie(Of T, TRecordIDList).GetChildren
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of T, TRecordIDList).GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}.GetChildren(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{`0,`1}.GetChildren(System.Collections.Generic.IEnumerable{`0})
  parent: Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IEnumerable{`0})
  name: GetChildren(IEnumerable<T>)
  nameWithType: Trie<T, TRecordIDList>.GetChildren(IEnumerable<T>)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<T, TRecordIDList>.GetChildren(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: Trie(Of T, TRecordIDList).GetChildren(IEnumerable(Of T))
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of T, TRecordIDList).GetChildren(System.Collections.Generic.IEnumerable(Of T))
  name.vb: GetChildren(IEnumerable(Of T))
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IEnumerable{`0})
    name: GetChildren
    nameWithType: Trie<T, TRecordIDList>.GetChildren
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<T, TRecordIDList>.GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IEnumerable{`0})
    name: GetChildren
    nameWithType: Trie(Of T, TRecordIDList).GetChildren
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of T, TRecordIDList).GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}.GetAllValues
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{`0,`1}.GetAllValues
  parent: Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.GetAllValues
  name: GetAllValues()
  nameWithType: Trie<T, TRecordIDList>.GetAllValues()
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<T, TRecordIDList>.GetAllValues()
  nameWithType.vb: Trie(Of T, TRecordIDList).GetAllValues()
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of T, TRecordIDList).GetAllValues()
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetAllValues
    name: GetAllValues
    nameWithType: Trie<T, TRecordIDList>.GetAllValues
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<T, TRecordIDList>.GetAllValues
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetAllValues
    name: GetAllValues
    nameWithType: Trie(Of T, TRecordIDList).GetAllValues
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of T, TRecordIDList).GetAllValues
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}.Add(System.Collections.Generic.IList{{T}},{TRecordIDList})
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{`0,`1}.Add(System.Collections.Generic.IList{`0},`1)
  parent: Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},`1)
  name: Add(IList<T>, TRecordIDList)
  nameWithType: Trie<T, TRecordIDList>.Add(IList<T>, TRecordIDList)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<T, TRecordIDList>.Add(System.Collections.Generic.IList<T>, TRecordIDList)
  nameWithType.vb: Trie(Of T, TRecordIDList).Add(IList(Of T), TRecordIDList)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of T, TRecordIDList).Add(System.Collections.Generic.IList(Of T), TRecordIDList)
  name.vb: Add(IList(Of T), TRecordIDList)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},`1)
    name: Add
    nameWithType: Trie<T, TRecordIDList>.Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<T, TRecordIDList>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},`1)
    name: Add
    nameWithType: Trie(Of T, TRecordIDList).Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of T, TRecordIDList).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}.Add(System.Collections.Generic.IList{{T}},System.Int32,System.Int32,{TRecordIDList})
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{`0,`1}.Add(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1)
  parent: Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1)
  name: Add(IList<T>, Int32, Int32, TRecordIDList)
  nameWithType: Trie<T, TRecordIDList>.Add(IList<T>, Int32, Int32, TRecordIDList)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<T, TRecordIDList>.Add(System.Collections.Generic.IList<T>, System.Int32, System.Int32, TRecordIDList)
  nameWithType.vb: Trie(Of T, TRecordIDList).Add(IList(Of T), Int32, Int32, TRecordIDList)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of T, TRecordIDList).Add(System.Collections.Generic.IList(Of T), System.Int32, System.Int32, TRecordIDList)
  name.vb: Add(IList(Of T), Int32, Int32, TRecordIDList)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1)
    name: Add
    nameWithType: Trie<T, TRecordIDList>.Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<T, TRecordIDList>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1)
    name: Add
    nameWithType: Trie(Of T, TRecordIDList).Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of T, TRecordIDList).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}.Add(System.Collections.Generic.IEnumerable{{T}},{TRecordIDList})
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{`0,`1}.Add(System.Collections.Generic.IEnumerable{`0},`1)
  parent: Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IEnumerable{`0},`1)
  name: Add(IEnumerable<T>, TRecordIDList)
  nameWithType: Trie<T, TRecordIDList>.Add(IEnumerable<T>, TRecordIDList)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<T, TRecordIDList>.Add(System.Collections.Generic.IEnumerable<T>, TRecordIDList)
  nameWithType.vb: Trie(Of T, TRecordIDList).Add(IEnumerable(Of T), TRecordIDList)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of T, TRecordIDList).Add(System.Collections.Generic.IEnumerable(Of T), TRecordIDList)
  name.vb: Add(IEnumerable(Of T), TRecordIDList)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IEnumerable{`0},`1)
    name: Add
    nameWithType: Trie<T, TRecordIDList>.Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<T, TRecordIDList>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IEnumerable{`0},`1)
    name: Add
    nameWithType: Trie(Of T, TRecordIDList).Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of T, TRecordIDList).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}.Trim
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie{`0,`1}.Trim
  parent: Microsoft.Health.PhraseAnalyzer.Trie{{T},{TRecordIDList}}
  definition: Microsoft.Health.PhraseAnalyzer.Trie`2.Trim
  name: Trim()
  nameWithType: Trie<T, TRecordIDList>.Trim()
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<T, TRecordIDList>.Trim()
  nameWithType.vb: Trie(Of T, TRecordIDList).Trim()
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of T, TRecordIDList).Trim()
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Trim
    name: Trim
    nameWithType: Trie<T, TRecordIDList>.Trim
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<T, TRecordIDList>.Trim
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Trim
    name: Trim
    nameWithType: Trie(Of T, TRecordIDList).Trim
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of T, TRecordIDList).Trim
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  name: SetProperty(String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object())
  name.vb: SetProperty(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  name: InvokeMethod(String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object())
  name.vb: InvokeMethod(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  parent: Microsoft.Health.Utility.InvariantString
  definition: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  name: ToStringInvariant()
  nameWithType: InvariantString.ToStringInvariant()
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant()
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  parent: Microsoft.Health.Utility.TypeHelper
  definition: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  name: ValueOrDbNull<TrieIndex<T, TRecordIDList>>()
  nameWithType: TypeHelper.ValueOrDbNull<TrieIndex<T, TRecordIDList>>()
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.InvertedIndex.TrieIndex<T, TRecordIDList>>()
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of TrieIndex(Of T, TRecordIDList))()
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.InvertedIndex.TrieIndex(Of T, TRecordIDList))()
  name.vb: ValueOrDbNull(Of TrieIndex(Of T, TRecordIDList))()
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull<TrieIndex<T, TRecordIDList>>
    nameWithType: TypeHelper.ValueOrDbNull<TrieIndex<T, TRecordIDList>>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.InvertedIndex.TrieIndex<T, TRecordIDList>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull(Of TrieIndex(Of T, TRecordIDList))
    nameWithType: TypeHelper.ValueOrDbNull(Of TrieIndex(Of T, TRecordIDList))
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.InvertedIndex.TrieIndex(Of T, TRecordIDList))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  parent: Microsoft.Health.Utility.WCXmlHelper
  definition: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  name: ToXml()
  nameWithType: WCXmlHelper.ToXml()
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml()
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2
  commentId: T:Microsoft.Health.PhraseAnalyzer.Trie`2
  isExternal: false
  name: Trie<K, V>
  nameWithType: Trie<K, V>
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>
  nameWithType.vb: Trie(Of K, V)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V)
  name.vb: Trie(Of K, V)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2
    name: Trie
    nameWithType: Trie
    fullName: Microsoft.Health.PhraseAnalyzer.Trie
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2
    name: Trie
    nameWithType: Trie
    fullName: Microsoft.Health.PhraseAnalyzer.Trie
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer
  commentId: N:Microsoft.Health.PhraseAnalyzer
  isExternal: false
  name: Microsoft.Health.PhraseAnalyzer
  nameWithType: Microsoft.Health.PhraseAnalyzer
  fullName: Microsoft.Health.PhraseAnalyzer
- uid: Microsoft.Health.InvertedIndex.ITrieIndex`2
  commentId: T:Microsoft.Health.InvertedIndex.ITrieIndex`2
  isExternal: false
  name: ITrieIndex<T, TRecordIDList>
  nameWithType: ITrieIndex<T, TRecordIDList>
  fullName: Microsoft.Health.InvertedIndex.ITrieIndex<T, TRecordIDList>
  nameWithType.vb: ITrieIndex(Of T, TRecordIDList)
  fullName.vb: Microsoft.Health.InvertedIndex.ITrieIndex(Of T, TRecordIDList)
  name.vb: ITrieIndex(Of T, TRecordIDList)
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ITrieIndex`2
    name: ITrieIndex
    nameWithType: ITrieIndex
    fullName: Microsoft.Health.InvertedIndex.ITrieIndex
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ITrieIndex`2
    name: ITrieIndex
    nameWithType: ITrieIndex
    fullName: Microsoft.Health.InvertedIndex.ITrieIndex
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.ISearchIndex`2
  commentId: T:Microsoft.Health.InvertedIndex.ISearchIndex`2
  isExternal: false
  name: ISearchIndex<T, TRecordIDList>
  nameWithType: ISearchIndex<T, TRecordIDList>
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>
  nameWithType.vb: ISearchIndex(Of T, TRecordIDList)
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList)
  name.vb: ISearchIndex(Of T, TRecordIDList)
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2
    name: ISearchIndex
    nameWithType: ISearchIndex
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2
    name: ISearchIndex
    nameWithType: ISearchIndex
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRecordIDList
    nameWithType: TRecordIDList
    fullName: TRecordIDList
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.IgnoreDuplicates
  commentId: P:Microsoft.Health.PhraseAnalyzer.Trie`2.IgnoreDuplicates
  isExternal: false
  name: IgnoreDuplicates
  nameWithType: Trie<K, V>.IgnoreDuplicates
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.IgnoreDuplicates
  nameWithType.vb: Trie(Of K, V).IgnoreDuplicates
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).IgnoreDuplicates
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.MaxLinearScanItemLength
  commentId: P:Microsoft.Health.PhraseAnalyzer.Trie`2.MaxLinearScanItemLength
  isExternal: false
  name: MaxLinearScanItemLength
  nameWithType: Trie<K, V>.MaxLinearScanItemLength
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.MaxLinearScanItemLength
  nameWithType.vb: Trie(Of K, V).MaxLinearScanItemLength
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).MaxLinearScanItemLength
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@)
  isExternal: true
  name: TryFind(IEnumerable<K>, V)
  nameWithType: Trie<K, V>.TryFind(IEnumerable<K>, V)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind(System.Collections.Generic.IEnumerable<K>, V)
  nameWithType.vb: Trie(Of K, V).TryFind(IEnumerable(Of K), V)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind(System.Collections.Generic.IEnumerable(Of K), V)
  name.vb: TryFind(IEnumerable(Of K), V)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@)
    name: TryFind
    nameWithType: Trie<K, V>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@)
    name: TryFind
    nameWithType: Trie(Of K, V).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@,System.Int32@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@,System.Int32@)
  isExternal: true
  name: TryFind(IEnumerable<K>, V, Int32)
  nameWithType: Trie<K, V>.TryFind(IEnumerable<K>, V, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind(System.Collections.Generic.IEnumerable<K>, V, System.Int32)
  nameWithType.vb: Trie(Of K, V).TryFind(IEnumerable(Of K), V, Int32)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind(System.Collections.Generic.IEnumerable(Of K), V, System.Int32)
  name.vb: TryFind(IEnumerable(Of K), V, Int32)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie<K, V>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IEnumerable{`0},`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie(Of K, V).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},`1@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},`1@)
  isExternal: true
  name: TryFind(IList<K>, V)
  nameWithType: Trie<K, V>.TryFind(IList<K>, V)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind(System.Collections.Generic.IList<K>, V)
  nameWithType.vb: Trie(Of K, V).TryFind(IList(Of K), V)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind(System.Collections.Generic.IList(Of K), V)
  name.vb: TryFind(IList(Of K), V)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},`1@)
    name: TryFind
    nameWithType: Trie<K, V>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},`1@)
    name: TryFind
    nameWithType: Trie(Of K, V).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@)
  isExternal: true
  name: TryFind(IList<K>, Int32, V)
  nameWithType: Trie<K, V>.TryFind(IList<K>, Int32, V)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind(System.Collections.Generic.IList<K>, System.Int32, V)
  nameWithType.vb: Trie(Of K, V).TryFind(IList(Of K), Int32, V)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind(System.Collections.Generic.IList(Of K), System.Int32, V)
  name.vb: TryFind(IList(Of K), Int32, V)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@)
    name: TryFind
    nameWithType: Trie<K, V>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@)
    name: TryFind
    nameWithType: Trie(Of K, V).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@,System.Int32@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@,System.Int32@)
  isExternal: true
  name: TryFind(IList<K>, Int32, V, Int32)
  nameWithType: Trie<K, V>.TryFind(IList<K>, Int32, V, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind(System.Collections.Generic.IList<K>, System.Int32, V, System.Int32)
  nameWithType.vb: Trie(Of K, V).TryFind(IList(Of K), Int32, V, Int32)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind(System.Collections.Generic.IList(Of K), System.Int32, V, System.Int32)
  name.vb: TryFind(IList(Of K), Int32, V, Int32)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie<K, V>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie(Of K, V).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1@,System.Int32@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1@,System.Int32@)
  isExternal: true
  name: TryFind(IList<K>, Int32, Int32, V, Int32)
  nameWithType: Trie<K, V>.TryFind(IList<K>, Int32, Int32, V, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind(System.Collections.Generic.IList<K>, System.Int32, System.Int32, V, System.Int32)
  nameWithType.vb: Trie(Of K, V).TryFind(IList(Of K), Int32, Int32, V, Int32)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind(System.Collections.Generic.IList(Of K), System.Int32, System.Int32, V, System.Int32)
  name.vb: TryFind(IList(Of K), Int32, Int32, V, Int32)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie<K, V>.TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFind(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1@,System.Int32@)
    name: TryFind
    nameWithType: Trie(Of K, V).TryFind
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFindExact(System.Collections.Generic.IList{`0},System.Int32,`1@)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.TryFindExact(System.Collections.Generic.IList{`0},System.Int32,`1@)
  isExternal: true
  name: TryFindExact(IList<K>, Int32, V)
  nameWithType: Trie<K, V>.TryFindExact(IList<K>, Int32, V)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFindExact(System.Collections.Generic.IList<K>, System.Int32, V)
  nameWithType.vb: Trie(Of K, V).TryFindExact(IList(Of K), Int32, V)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFindExact(System.Collections.Generic.IList(Of K), System.Int32, V)
  name.vb: TryFindExact(IList(Of K), Int32, V)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFindExact(System.Collections.Generic.IList{`0},System.Int32,`1@)
    name: TryFindExact
    nameWithType: Trie<K, V>.TryFindExact
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.TryFindExact
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.TryFindExact(System.Collections.Generic.IList{`0},System.Int32,`1@)
    name: TryFindExact
    nameWithType: Trie(Of K, V).TryFindExact
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).TryFindExact
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IList{`0},System.Int32)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IList{`0},System.Int32)
  isExternal: true
  name: GetChildren(IList<K>, Int32)
  nameWithType: Trie<K, V>.GetChildren(IList<K>, Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.GetChildren(System.Collections.Generic.IList<K>, System.Int32)
  nameWithType.vb: Trie(Of K, V).GetChildren(IList(Of K), Int32)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).GetChildren(System.Collections.Generic.IList(Of K), System.Int32)
  name.vb: GetChildren(IList(Of K), Int32)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IList{`0},System.Int32)
    name: GetChildren
    nameWithType: Trie<K, V>.GetChildren
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IList{`0},System.Int32)
    name: GetChildren
    nameWithType: Trie(Of K, V).GetChildren
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: GetChildren(IEnumerable<K>)
  nameWithType: Trie<K, V>.GetChildren(IEnumerable<K>)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.GetChildren(System.Collections.Generic.IEnumerable<K>)
  nameWithType.vb: Trie(Of K, V).GetChildren(IEnumerable(Of K))
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).GetChildren(System.Collections.Generic.IEnumerable(Of K))
  name.vb: GetChildren(IEnumerable(Of K))
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IEnumerable{`0})
    name: GetChildren
    nameWithType: Trie<K, V>.GetChildren
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetChildren(System.Collections.Generic.IEnumerable{`0})
    name: GetChildren
    nameWithType: Trie(Of K, V).GetChildren
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetAllValues
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.GetAllValues
  isExternal: false
  name: GetAllValues()
  nameWithType: Trie<K, V>.GetAllValues()
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.GetAllValues()
  nameWithType.vb: Trie(Of K, V).GetAllValues()
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).GetAllValues()
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetAllValues
    name: GetAllValues
    nameWithType: Trie<K, V>.GetAllValues
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.GetAllValues
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.GetAllValues
    name: GetAllValues
    nameWithType: Trie(Of K, V).GetAllValues
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).GetAllValues
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},`1)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},`1)
  isExternal: true
  name: Add(IList<K>, V)
  nameWithType: Trie<K, V>.Add(IList<K>, V)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.Add(System.Collections.Generic.IList<K>, V)
  nameWithType.vb: Trie(Of K, V).Add(IList(Of K), V)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).Add(System.Collections.Generic.IList(Of K), V)
  name.vb: Add(IList(Of K), V)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},`1)
    name: Add
    nameWithType: Trie<K, V>.Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},`1)
    name: Add
    nameWithType: Trie(Of K, V).Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1)
  isExternal: true
  name: Add(IList<K>, Int32, Int32, V)
  nameWithType: Trie<K, V>.Add(IList<K>, Int32, Int32, V)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.Add(System.Collections.Generic.IList<K>, System.Int32, System.Int32, V)
  nameWithType.vb: Trie(Of K, V).Add(IList(Of K), Int32, Int32, V)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).Add(System.Collections.Generic.IList(Of K), System.Int32, System.Int32, V)
  name.vb: Add(IList(Of K), Int32, Int32, V)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1)
    name: Add
    nameWithType: Trie<K, V>.Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IList{`0},System.Int32,System.Int32,`1)
    name: Add
    nameWithType: Trie(Of K, V).Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IEnumerable{`0},`1)
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IEnumerable{`0},`1)
  isExternal: true
  name: Add(IEnumerable<K>, V)
  nameWithType: Trie<K, V>.Add(IEnumerable<K>, V)
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.Add(System.Collections.Generic.IEnumerable<K>, V)
  nameWithType.vb: Trie(Of K, V).Add(IEnumerable(Of K), V)
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).Add(System.Collections.Generic.IEnumerable(Of K), V)
  name.vb: Add(IEnumerable(Of K), V)
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IEnumerable{`0},`1)
    name: Add
    nameWithType: Trie<K, V>.Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Add(System.Collections.Generic.IEnumerable{`0},`1)
    name: Add
    nameWithType: Trie(Of K, V).Add
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: V
    nameWithType: V
    fullName: V
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Trim
  commentId: M:Microsoft.Health.PhraseAnalyzer.Trie`2.Trim
  isExternal: false
  name: Trim()
  nameWithType: Trie<K, V>.Trim()
  fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.Trim()
  nameWithType.vb: Trie(Of K, V).Trim()
  fullName.vb: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).Trim()
  spec.csharp:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Trim
    name: Trim
    nameWithType: Trie<K, V>.Trim
    fullName: Microsoft.Health.PhraseAnalyzer.Trie<K, V>.Trim
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.PhraseAnalyzer.Trie`2.Trim
    name: Trim
    nameWithType: Trie(Of K, V).Trim
    fullName: Microsoft.Health.PhraseAnalyzer.Trie(Of K, V).Trim
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  isExternal: true
  name: SetProperty(Object, String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object())
  name.vb: SetProperty(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions
  commentId: T:Microsoft.Health.Utility.IDispatchExtensions
  parent: Microsoft.Health.Utility
  isExternal: false
  name: IDispatchExtensions
  nameWithType: IDispatchExtensions
  fullName: Microsoft.Health.Utility.IDispatchExtensions
- uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  isExternal: true
  name: InvokeMethod(Object, String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object())
  name.vb: InvokeMethod(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  isExternal: true
  name: ToStringInvariant(Object)
  nameWithType: InvariantString.ToStringInvariant(Object)
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString
  commentId: T:Microsoft.Health.Utility.InvariantString
  parent: Microsoft.Health.Utility
  isExternal: false
  name: InvariantString
  nameWithType: InvariantString
  fullName: Microsoft.Health.Utility.InvariantString
- uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  isExternal: false
  name: ValueOrDbNull<T>(T)
  nameWithType: TypeHelper.ValueOrDbNull<T>(T)
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>(T)
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of T)(T)
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)(T)
  name.vb: ValueOrDbNull(Of T)(T)
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull<T>
    nameWithType: TypeHelper.ValueOrDbNull<T>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull(Of T)
    nameWithType: TypeHelper.ValueOrDbNull(Of T)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.TypeHelper
  commentId: T:Microsoft.Health.Utility.TypeHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: TypeHelper
  nameWithType: TypeHelper
  fullName: Microsoft.Health.Utility.TypeHelper
- uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  isExternal: true
  name: ToXml(Object)
  nameWithType: WCXmlHelper.ToXml(Object)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.WCXmlHelper
  commentId: T:Microsoft.Health.Utility.WCXmlHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: WCXmlHelper
  nameWithType: WCXmlHelper
  fullName: Microsoft.Health.Utility.WCXmlHelper
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: Microsoft.Health.InvertedIndex.TrieIndex`2.#ctor*
  commentId: Overload:Microsoft.Health.InvertedIndex.TrieIndex`2.#ctor
  isExternal: false
  name: TrieIndex
  nameWithType: TrieIndex<T, TRecordIDList>.TrieIndex
  fullName: Microsoft.Health.InvertedIndex.TrieIndex<T, TRecordIDList>.TrieIndex
  nameWithType.vb: TrieIndex(Of T, TRecordIDList).TrieIndex
  fullName.vb: Microsoft.Health.InvertedIndex.TrieIndex(Of T, TRecordIDList).TrieIndex
- uid: System.Collections.Generic.IEqualityComparer{{T}}
  commentId: T:System.Collections.Generic.IEqualityComparer{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1
  commentId: T:System.Collections.Generic.IEqualityComparer`1
  isExternal: true
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Item*
  commentId: Overload:Microsoft.Health.InvertedIndex.TrieIndex`2.Item
  isExternal: false
  name: Item
  nameWithType: TrieIndex<T, TRecordIDList>.Item
  fullName: Microsoft.Health.InvertedIndex.TrieIndex<T, TRecordIDList>.Item
  nameWithType.vb: TrieIndex(Of T, TRecordIDList).Item
  fullName.vb: Microsoft.Health.InvertedIndex.TrieIndex(Of T, TRecordIDList).Item
- uid: Microsoft.Health.InvertedIndex.ISearchIndex{System.Collections.Generic.IEnumerable{{T}},{TRecordIDList}}.Item(System.Collections.Generic.IEnumerable{{T}})
  commentId: P:Microsoft.Health.InvertedIndex.ISearchIndex{System.Collections.Generic.IEnumerable{`0},`1}.Item(System.Collections.Generic.IEnumerable{`0})
  parent: Microsoft.Health.InvertedIndex.ISearchIndex{System.Collections.Generic.IEnumerable{{T}},{TRecordIDList}}
  definition: Microsoft.Health.InvertedIndex.ISearchIndex`2.Item(`0)
  name: Item[IEnumerable<T>]
  nameWithType: ISearchIndex<IEnumerable<T>, TRecordIDList>.Item[IEnumerable<T>]
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<System.Collections.Generic.IEnumerable<T>, TRecordIDList>.Item[System.Collections.Generic.IEnumerable<T>]
  nameWithType.vb: ISearchIndex(Of IEnumerable(Of T), TRecordIDList).Item(IEnumerable(Of T))
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of System.Collections.Generic.IEnumerable(Of T), TRecordIDList).Item(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Item(IEnumerable(Of T))
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Item(`0)
    name: Item
    nameWithType: ISearchIndex<IEnumerable<T>, TRecordIDList>.Item
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex<System.Collections.Generic.IEnumerable<T>, TRecordIDList>.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Item(`0)
    name: Item
    nameWithType: ISearchIndex(Of IEnumerable(Of T), TRecordIDList).Item
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex(Of System.Collections.Generic.IEnumerable(Of T), TRecordIDList).Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TRecordIDList}'
  commentId: '!:TRecordIDList'
  definition: TRecordIDList
  name: TRecordIDList
  nameWithType: TRecordIDList
  fullName: TRecordIDList
- uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Item(`0)
  commentId: P:Microsoft.Health.InvertedIndex.ISearchIndex`2.Item(`0)
  isExternal: false
  name: Item[T]
  nameWithType: ISearchIndex<T, TRecordIDList>.Item[T]
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Item[T]
  nameWithType.vb: ISearchIndex(Of T, TRecordIDList).Item(T)
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Item(T)
  name.vb: Item(T)
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Item(`0)
    name: Item
    nameWithType: ISearchIndex<T, TRecordIDList>.Item
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - name: T
    nameWithType: T
    fullName: T
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Item(`0)
    name: Item
    nameWithType: ISearchIndex(Of T, TRecordIDList).Item
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Item
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TRecordIDList
  isExternal: false
  name: TRecordIDList
  nameWithType: TRecordIDList
  fullName: TRecordIDList
- uid: System.Collections.Generic.IList{{T}}
  commentId: T:System.Collections.Generic.IList{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve*
  commentId: Overload:Microsoft.Health.InvertedIndex.TrieIndex`2.Resolve
  isExternal: false
  name: Resolve
  nameWithType: TrieIndex<T, TRecordIDList>.Resolve
  fullName: Microsoft.Health.InvertedIndex.TrieIndex<T, TRecordIDList>.Resolve
  nameWithType.vb: TrieIndex(Of T, TRecordIDList).Resolve
  fullName.vb: Microsoft.Health.InvertedIndex.TrieIndex(Of T, TRecordIDList).Resolve
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  commentId: T:Microsoft.Health.InvertedIndex.RecordIDEnumerator
  parent: Microsoft.Health.InvertedIndex
  isExternal: false
  name: RecordIDEnumerator
  nameWithType: RecordIDEnumerator
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
- uid: Microsoft.Health.InvertedIndex.ISearchIndex{System.Collections.Generic.IEnumerable{{T}},{TRecordIDList}}.Resolve(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:Microsoft.Health.InvertedIndex.ISearchIndex{System.Collections.Generic.IEnumerable{`0},`1}.Resolve(System.Collections.Generic.IEnumerable{`0})
  parent: Microsoft.Health.InvertedIndex.ISearchIndex{System.Collections.Generic.IEnumerable{{T}},{TRecordIDList}}
  definition: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(`0)
  name: Resolve(IEnumerable<T>)
  nameWithType: ISearchIndex<IEnumerable<T>, TRecordIDList>.Resolve(IEnumerable<T>)
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<System.Collections.Generic.IEnumerable<T>, TRecordIDList>.Resolve(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ISearchIndex(Of IEnumerable(Of T), TRecordIDList).Resolve(IEnumerable(Of T))
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of System.Collections.Generic.IEnumerable(Of T), TRecordIDList).Resolve(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Resolve(IEnumerable(Of T))
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(`0)
    name: Resolve
    nameWithType: ISearchIndex<IEnumerable<T>, TRecordIDList>.Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex<System.Collections.Generic.IEnumerable<T>, TRecordIDList>.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(`0)
    name: Resolve
    nameWithType: ISearchIndex(Of IEnumerable(Of T), TRecordIDList).Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex(Of System.Collections.Generic.IEnumerable(Of T), TRecordIDList).Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(`0)
  commentId: M:Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(`0)
  isExternal: false
  name: Resolve(T)
  nameWithType: ISearchIndex<T, TRecordIDList>.Resolve(T)
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve(T)
  nameWithType.vb: ISearchIndex(Of T, TRecordIDList).Resolve(T)
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve(T)
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(`0)
    name: Resolve
    nameWithType: ISearchIndex<T, TRecordIDList>.Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(`0)
    name: Resolve
    nameWithType: ISearchIndex(Of T, TRecordIDList).Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.ISearchIndex{System.Collections.Generic.IEnumerable{{T}},{TRecordIDList}}.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{{T}}})
  commentId: M:Microsoft.Health.InvertedIndex.ISearchIndex{System.Collections.Generic.IEnumerable{`0},`1}.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}})
  parent: Microsoft.Health.InvertedIndex.ISearchIndex{System.Collections.Generic.IEnumerable{{T}},{TRecordIDList}}
  definition: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0})
  name: Resolve(IList<IEnumerable<T>>)
  nameWithType: ISearchIndex<IEnumerable<T>, TRecordIDList>.Resolve(IList<IEnumerable<T>>)
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<System.Collections.Generic.IEnumerable<T>, TRecordIDList>.Resolve(System.Collections.Generic.IList<System.Collections.Generic.IEnumerable<T>>)
  nameWithType.vb: ISearchIndex(Of IEnumerable(Of T), TRecordIDList).Resolve(IList(Of IEnumerable(Of T)))
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of System.Collections.Generic.IEnumerable(Of T), TRecordIDList).Resolve(System.Collections.Generic.IList(Of System.Collections.Generic.IEnumerable(Of T)))
  name.vb: Resolve(IList(Of IEnumerable(Of T)))
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0})
    name: Resolve
    nameWithType: ISearchIndex<IEnumerable<T>, TRecordIDList>.Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex<System.Collections.Generic.IEnumerable<T>, TRecordIDList>.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0})
    name: Resolve
    nameWithType: ISearchIndex(Of IEnumerable(Of T), TRecordIDList).Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex(Of System.Collections.Generic.IEnumerable(Of T), TRecordIDList).Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{{T}}}
  commentId: T:System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<IEnumerable<T>>
  nameWithType: IList<IEnumerable<T>>
  fullName: System.Collections.Generic.IList<System.Collections.Generic.IEnumerable<T>>
  nameWithType.vb: IList(Of IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.IList(Of System.Collections.Generic.IEnumerable(Of T))
  name.vb: IList(Of IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator[]
  name: RecordIDEnumerator[]
  nameWithType: RecordIDEnumerator[]
  fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator[]
  nameWithType.vb: RecordIDEnumerator()
  fullName.vb: Microsoft.Health.InvertedIndex.RecordIDEnumerator()
  name.vb: RecordIDEnumerator()
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0})
  commentId: M:Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0})
  isExternal: true
  name: Resolve(IList<T>)
  nameWithType: ISearchIndex<T, TRecordIDList>.Resolve(IList<T>)
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve(System.Collections.Generic.IList<T>)
  nameWithType.vb: ISearchIndex(Of T, TRecordIDList).Resolve(IList(Of T))
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve(System.Collections.Generic.IList(Of T))
  name.vb: Resolve(IList(Of T))
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0})
    name: Resolve
    nameWithType: ISearchIndex<T, TRecordIDList>.Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0})
    name: Resolve
    nameWithType: ISearchIndex(Of T, TRecordIDList).Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.ISearchIndex{System.Collections.Generic.IEnumerable{{T}},{TRecordIDList}}.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{{T}}},System.Int32,System.Int32)
  commentId: M:Microsoft.Health.InvertedIndex.ISearchIndex{System.Collections.Generic.IEnumerable{`0},`1}.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}},System.Int32,System.Int32)
  parent: Microsoft.Health.InvertedIndex.ISearchIndex{System.Collections.Generic.IEnumerable{{T}},{TRecordIDList}}
  definition: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
  name: Resolve(IList<IEnumerable<T>>, Int32, Int32)
  nameWithType: ISearchIndex<IEnumerable<T>, TRecordIDList>.Resolve(IList<IEnumerable<T>>, Int32, Int32)
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<System.Collections.Generic.IEnumerable<T>, TRecordIDList>.Resolve(System.Collections.Generic.IList<System.Collections.Generic.IEnumerable<T>>, System.Int32, System.Int32)
  nameWithType.vb: ISearchIndex(Of IEnumerable(Of T), TRecordIDList).Resolve(IList(Of IEnumerable(Of T)), Int32, Int32)
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of System.Collections.Generic.IEnumerable(Of T), TRecordIDList).Resolve(System.Collections.Generic.IList(Of System.Collections.Generic.IEnumerable(Of T)), System.Int32, System.Int32)
  name.vb: Resolve(IList(Of IEnumerable(Of T)), Int32, Int32)
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
    name: Resolve
    nameWithType: ISearchIndex<IEnumerable<T>, TRecordIDList>.Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex<System.Collections.Generic.IEnumerable<T>, TRecordIDList>.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
    name: Resolve
    nameWithType: ISearchIndex(Of IEnumerable(Of T), TRecordIDList).Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex(Of System.Collections.Generic.IEnumerable(Of T), TRecordIDList).Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
  commentId: M:Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
  isExternal: true
  name: Resolve(IList<T>, Int32, Int32)
  nameWithType: ISearchIndex<T, TRecordIDList>.Resolve(IList<T>, Int32, Int32)
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve(System.Collections.Generic.IList<T>, System.Int32, System.Int32)
  nameWithType.vb: ISearchIndex(Of T, TRecordIDList).Resolve(IList(Of T), Int32, Int32)
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve(System.Collections.Generic.IList(Of T), System.Int32, System.Int32)
  name.vb: Resolve(IList(Of T), Int32, Int32)
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
    name: Resolve
    nameWithType: ISearchIndex<T, TRecordIDList>.Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32)
    name: Resolve
    nameWithType: ISearchIndex(Of T, TRecordIDList).Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.ISearchIndex{System.Collections.Generic.IEnumerable{{T}},{TRecordIDList}}.Resolve(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{{T}}})
  commentId: M:Microsoft.Health.InvertedIndex.ISearchIndex{System.Collections.Generic.IEnumerable{`0},`1}.Resolve(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{`0}})
  parent: Microsoft.Health.InvertedIndex.ISearchIndex{System.Collections.Generic.IEnumerable{{T}},{TRecordIDList}}
  definition: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IEnumerable{`0})
  name: Resolve(IEnumerable<IEnumerable<T>>)
  nameWithType: ISearchIndex<IEnumerable<T>, TRecordIDList>.Resolve(IEnumerable<IEnumerable<T>>)
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<System.Collections.Generic.IEnumerable<T>, TRecordIDList>.Resolve(System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<T>>)
  nameWithType.vb: ISearchIndex(Of IEnumerable(Of T), TRecordIDList).Resolve(IEnumerable(Of IEnumerable(Of T)))
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of System.Collections.Generic.IEnumerable(Of T), TRecordIDList).Resolve(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IEnumerable(Of T)))
  name.vb: Resolve(IEnumerable(Of IEnumerable(Of T)))
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IEnumerable{`0})
    name: Resolve
    nameWithType: ISearchIndex<IEnumerable<T>, TRecordIDList>.Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex<System.Collections.Generic.IEnumerable<T>, TRecordIDList>.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IEnumerable{`0})
    name: Resolve
    nameWithType: ISearchIndex(Of IEnumerable(Of T), TRecordIDList).Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex(Of System.Collections.Generic.IEnumerable(Of T), TRecordIDList).Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{{T}}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IEnumerable<T>>
  nameWithType: IEnumerable<IEnumerable<T>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<T>>
  nameWithType.vb: IEnumerable(Of IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IEnumerable(Of T))
  name.vb: IEnumerable(Of IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: Resolve(IEnumerable<T>)
  nameWithType: ISearchIndex<T, TRecordIDList>.Resolve(IEnumerable<T>)
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ISearchIndex(Of T, TRecordIDList).Resolve(IEnumerable(Of T))
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Resolve(IEnumerable(Of T))
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IEnumerable{`0})
    name: Resolve
    nameWithType: ISearchIndex<T, TRecordIDList>.Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IEnumerable{`0})
    name: Resolve
    nameWithType: ISearchIndex(Of T, TRecordIDList).Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.ISearchIndex{System.Collections.Generic.IEnumerable{{T}},{TRecordIDList}}.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{{T}}},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  commentId: M:Microsoft.Health.InvertedIndex.ISearchIndex{System.Collections.Generic.IEnumerable{`0},`1}.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  parent: Microsoft.Health.InvertedIndex.ISearchIndex{System.Collections.Generic.IEnumerable{{T}},{TRecordIDList}}
  definition: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  name: Resolve(IList<IEnumerable<T>>, StructList<RecordIDEnumerator>)
  nameWithType: ISearchIndex<IEnumerable<T>, TRecordIDList>.Resolve(IList<IEnumerable<T>>, StructList<RecordIDEnumerator>)
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<System.Collections.Generic.IEnumerable<T>, TRecordIDList>.Resolve(System.Collections.Generic.IList<System.Collections.Generic.IEnumerable<T>>, Microsoft.Health.StructList<Microsoft.Health.InvertedIndex.RecordIDEnumerator>)
  nameWithType.vb: ISearchIndex(Of IEnumerable(Of T), TRecordIDList).Resolve(IList(Of IEnumerable(Of T)), StructList(Of RecordIDEnumerator))
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of System.Collections.Generic.IEnumerable(Of T), TRecordIDList).Resolve(System.Collections.Generic.IList(Of System.Collections.Generic.IEnumerable(Of T)), Microsoft.Health.StructList(Of Microsoft.Health.InvertedIndex.RecordIDEnumerator))
  name.vb: Resolve(IList(Of IEnumerable(Of T)), StructList(Of RecordIDEnumerator))
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
    name: Resolve
    nameWithType: ISearchIndex<IEnumerable<T>, TRecordIDList>.Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex<System.Collections.Generic.IEnumerable<T>, TRecordIDList>.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.StructList`1
    name: StructList
    nameWithType: StructList
    fullName: Microsoft.Health.StructList
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
    name: Resolve
    nameWithType: ISearchIndex(Of IEnumerable(Of T), TRecordIDList).Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex(Of System.Collections.Generic.IEnumerable(Of T), TRecordIDList).Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.StructList`1
    name: StructList
    nameWithType: StructList
    fullName: Microsoft.Health.StructList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}
  commentId: T:Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}
  parent: Microsoft.Health
  definition: Microsoft.Health.StructList`1
  name: StructList<RecordIDEnumerator>
  nameWithType: StructList<RecordIDEnumerator>
  fullName: Microsoft.Health.StructList<Microsoft.Health.InvertedIndex.RecordIDEnumerator>
  nameWithType.vb: StructList(Of RecordIDEnumerator)
  fullName.vb: Microsoft.Health.StructList(Of Microsoft.Health.InvertedIndex.RecordIDEnumerator)
  name.vb: StructList(Of RecordIDEnumerator)
  spec.csharp:
  - uid: Microsoft.Health.StructList`1
    name: StructList
    nameWithType: StructList
    fullName: Microsoft.Health.StructList
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.StructList`1
    name: StructList
    nameWithType: StructList
    fullName: Microsoft.Health.StructList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  commentId: M:Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  isExternal: true
  name: Resolve(IList<T>, StructList<RecordIDEnumerator>)
  nameWithType: ISearchIndex<T, TRecordIDList>.Resolve(IList<T>, StructList<RecordIDEnumerator>)
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve(System.Collections.Generic.IList<T>, Microsoft.Health.StructList<Microsoft.Health.InvertedIndex.RecordIDEnumerator>)
  nameWithType.vb: ISearchIndex(Of T, TRecordIDList).Resolve(IList(Of T), StructList(Of RecordIDEnumerator))
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve(System.Collections.Generic.IList(Of T), Microsoft.Health.StructList(Of Microsoft.Health.InvertedIndex.RecordIDEnumerator))
  name.vb: Resolve(IList(Of T), StructList(Of RecordIDEnumerator))
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
    name: Resolve
    nameWithType: ISearchIndex<T, TRecordIDList>.Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.StructList`1
    name: StructList
    nameWithType: StructList
    fullName: Microsoft.Health.StructList
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
    name: Resolve
    nameWithType: ISearchIndex(Of T, TRecordIDList).Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.StructList`1
    name: StructList
    nameWithType: StructList
    fullName: Microsoft.Health.StructList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.StructList`1
  commentId: T:Microsoft.Health.StructList`1
  isExternal: false
  name: StructList<T>
  nameWithType: StructList<T>
  fullName: Microsoft.Health.StructList<T>
  nameWithType.vb: StructList(Of T)
  fullName.vb: Microsoft.Health.StructList(Of T)
  name.vb: StructList(Of T)
  spec.csharp:
  - uid: Microsoft.Health.StructList`1
    name: StructList
    nameWithType: StructList
    fullName: Microsoft.Health.StructList
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.StructList`1
    name: StructList
    nameWithType: StructList
    fullName: Microsoft.Health.StructList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: Microsoft.Health.InvertedIndex.ISearchIndex{System.Collections.Generic.IEnumerable{{T}},{TRecordIDList}}.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{{T}}},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  commentId: M:Microsoft.Health.InvertedIndex.ISearchIndex{System.Collections.Generic.IEnumerable{`0},`1}.Resolve(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{`0}},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  parent: Microsoft.Health.InvertedIndex.ISearchIndex{System.Collections.Generic.IEnumerable{{T}},{TRecordIDList}}
  definition: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  name: Resolve(IList<IEnumerable<T>>, Int32, Int32, StructList<RecordIDEnumerator>)
  nameWithType: ISearchIndex<IEnumerable<T>, TRecordIDList>.Resolve(IList<IEnumerable<T>>, Int32, Int32, StructList<RecordIDEnumerator>)
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<System.Collections.Generic.IEnumerable<T>, TRecordIDList>.Resolve(System.Collections.Generic.IList<System.Collections.Generic.IEnumerable<T>>, System.Int32, System.Int32, Microsoft.Health.StructList<Microsoft.Health.InvertedIndex.RecordIDEnumerator>)
  nameWithType.vb: ISearchIndex(Of IEnumerable(Of T), TRecordIDList).Resolve(IList(Of IEnumerable(Of T)), Int32, Int32, StructList(Of RecordIDEnumerator))
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of System.Collections.Generic.IEnumerable(Of T), TRecordIDList).Resolve(System.Collections.Generic.IList(Of System.Collections.Generic.IEnumerable(Of T)), System.Int32, System.Int32, Microsoft.Health.StructList(Of Microsoft.Health.InvertedIndex.RecordIDEnumerator))
  name.vb: Resolve(IList(Of IEnumerable(Of T)), Int32, Int32, StructList(Of RecordIDEnumerator))
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
    name: Resolve
    nameWithType: ISearchIndex<IEnumerable<T>, TRecordIDList>.Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex<System.Collections.Generic.IEnumerable<T>, TRecordIDList>.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.StructList`1
    name: StructList
    nameWithType: StructList
    fullName: Microsoft.Health.StructList
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
    name: Resolve
    nameWithType: ISearchIndex(Of IEnumerable(Of T), TRecordIDList).Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex(Of System.Collections.Generic.IEnumerable(Of T), TRecordIDList).Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.StructList`1
    name: StructList
    nameWithType: StructList
    fullName: Microsoft.Health.StructList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  commentId: M:Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
  isExternal: true
  name: Resolve(IList<T>, Int32, Int32, StructList<RecordIDEnumerator>)
  nameWithType: ISearchIndex<T, TRecordIDList>.Resolve(IList<T>, Int32, Int32, StructList<RecordIDEnumerator>)
  fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve(System.Collections.Generic.IList<T>, System.Int32, System.Int32, Microsoft.Health.StructList<Microsoft.Health.InvertedIndex.RecordIDEnumerator>)
  nameWithType.vb: ISearchIndex(Of T, TRecordIDList).Resolve(IList(Of T), Int32, Int32, StructList(Of RecordIDEnumerator))
  fullName.vb: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve(System.Collections.Generic.IList(Of T), System.Int32, System.Int32, Microsoft.Health.StructList(Of Microsoft.Health.InvertedIndex.RecordIDEnumerator))
  name.vb: Resolve(IList(Of T), Int32, Int32, StructList(Of RecordIDEnumerator))
  spec.csharp:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
    name: Resolve
    nameWithType: ISearchIndex<T, TRecordIDList>.Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex<T, TRecordIDList>.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.StructList`1
    name: StructList
    nameWithType: StructList
    fullName: Microsoft.Health.StructList
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.InvertedIndex.ISearchIndex`2.Resolve(System.Collections.Generic.IList{`0},System.Int32,System.Int32,Microsoft.Health.StructList{Microsoft.Health.InvertedIndex.RecordIDEnumerator}@)
    name: Resolve
    nameWithType: ISearchIndex(Of T, TRecordIDList).Resolve
    fullName: Microsoft.Health.InvertedIndex.ISearchIndex(Of T, TRecordIDList).Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.StructList`1
    name: StructList
    nameWithType: StructList
    fullName: Microsoft.Health.StructList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.InvertedIndex.RecordIDEnumerator
    name: RecordIDEnumerator
    nameWithType: RecordIDEnumerator
    fullName: Microsoft.Health.InvertedIndex.RecordIDEnumerator
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
