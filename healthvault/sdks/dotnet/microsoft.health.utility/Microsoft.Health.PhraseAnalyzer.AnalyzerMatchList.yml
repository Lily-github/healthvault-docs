### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList
  commentId: T:Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList
  id: AnalyzerMatchList
  parent: Microsoft.Health.PhraseAnalyzer
  children:
  - Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.#ctor
  - Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.#ctor(System.Int32)
  - Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.GroupByName
  - Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.GroupedByType
  - Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.IndexOfExpression(System.String,System.String)
  - Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.IndexOfExpressionName(System.String)
  - Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.IndexOfExpressionType(System.String)
  - Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.IndexOfValue(System.String)
  - Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.LongestMatches
  langs:
  - csharp
  - vb
  name: AnalyzerMatchList
  nameWithType: AnalyzerMatchList
  fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList
  type: Class
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Matches.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: AnalyzerMatchList
    path: search/PhraseAnalyzer/Matches.cs
    startLine: 129
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: 'public class AnalyzerMatchList : List<AnalyzerMatch>, IList<AnalyzerMatch>, ICollection<AnalyzerMatch>, IList, ICollection, IReadOnlyList<AnalyzerMatch>, IReadOnlyCollection<AnalyzerMatch>, IEnumerable<AnalyzerMatch>, IEnumerable'
    content.vb: >-
      Public Class AnalyzerMatchList
          Inherits List(Of AnalyzerMatch)
          Implements IList(Of AnalyzerMatch), ICollection(Of AnalyzerMatch), IList, ICollection, IReadOnlyList(Of AnalyzerMatch), IReadOnlyCollection(Of AnalyzerMatch), IEnumerable(Of AnalyzerMatch), IEnumerable
  inheritance:
  - System.Object
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  implements:
  - System.Collections.Generic.IList{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  - System.Collections.Generic.ICollection{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  - System.Collections.IList
  - System.Collections.ICollection
  - System.Collections.Generic.IReadOnlyList{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  - System.Collections.Generic.IReadOnlyCollection{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  - System.Collections.Generic.IEnumerable{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#IList#get_Item(System.Int32)
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#IList#set_Item(System.Int32,System.Object)
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Add(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#IList#Add(System.Object)
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.AddRange(System.Collections.Generic.IEnumerable{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.AsReadOnly
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.BinarySearch(System.Int32,System.Int32,Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.Collections.Generic.IComparer{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.BinarySearch(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.BinarySearch(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.Collections.Generic.IComparer{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Clear
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Contains(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#IList#Contains(System.Object)
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.ConvertAll``1(System.Converter{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,{TOutput}})
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.CopyTo(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch[])
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.CopyTo(System.Int32,Microsoft.Health.PhraseAnalyzer.AnalyzerMatch[],System.Int32,System.Int32)
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.CopyTo(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch[],System.Int32)
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Exists(System.Predicate{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Find(System.Predicate{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.FindAll(System.Predicate{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.FindIndex(System.Predicate{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.FindIndex(System.Int32,System.Predicate{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.FindIndex(System.Int32,System.Int32,System.Predicate{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.FindLast(System.Predicate{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.FindLastIndex(System.Predicate{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.FindLastIndex(System.Int32,System.Predicate{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.FindLastIndex(System.Int32,System.Int32,System.Predicate{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.ForEach(System.Action{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.GetEnumerator
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.GetRange(System.Int32,System.Int32)
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.IndexOf(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#IList#IndexOf(System.Object)
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.IndexOf(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.Int32)
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.IndexOf(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.Int32,System.Int32)
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Insert(System.Int32,Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.LastIndexOf(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.LastIndexOf(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.Int32)
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.LastIndexOf(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.Int32,System.Int32)
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Remove(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#IList#Remove(System.Object)
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.RemoveAll(System.Predicate{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.RemoveAt(System.Int32)
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.RemoveRange(System.Int32,System.Int32)
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Reverse
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Reverse(System.Int32,System.Int32)
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Sort
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Sort(System.Collections.Generic.IComparer{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Sort(System.Comparison{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.ToArray
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.TrimExcess
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.TrueForAll(System.Predicate{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Capacity
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Count
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#IList#IsFixedSize
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#IList#IsReadOnly
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#ICollection#IsSynchronized
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#ICollection#SyncRoot
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Item(System.Int32)
  - System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#IList#Item(System.Int32)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  - System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.#ctor
  commentId: M:Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.#ctor
  id: '#ctor'
  parent: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList
  langs:
  - csharp
  - vb
  name: AnalyzerMatchList()
  nameWithType: AnalyzerMatchList.AnalyzerMatchList()
  fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.AnalyzerMatchList()
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Matches.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: search/PhraseAnalyzer/Matches.cs
    startLine: 138
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public AnalyzerMatchList()
    content.vb: Public Sub New
  overload: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.#ctor(System.Int32)
  commentId: M:Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList
  langs:
  - csharp
  - vb
  name: AnalyzerMatchList(Int32)
  nameWithType: AnalyzerMatchList.AnalyzerMatchList(Int32)
  fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.AnalyzerMatchList(System.Int32)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Matches.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: search/PhraseAnalyzer/Matches.cs
    startLine: 146
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public AnalyzerMatchList(int capacity)
    content.vb: Public Sub New(capacity As Integer)
    parameters:
    - id: capacity
      type: System.Int32
      description: ''
  overload: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.GroupedByType
  commentId: P:Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.GroupedByType
  id: GroupedByType
  parent: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList
  langs:
  - csharp
  - vb
  name: GroupedByType
  nameWithType: AnalyzerMatchList.GroupedByType
  fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.GroupedByType
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Matches.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GroupedByType
    path: search/PhraseAnalyzer/Matches.cs
    startLine: 154
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public AnalyzerMatchGroup GroupedByType { get; }
    content.vb: Public ReadOnly Property GroupedByType As AnalyzerMatchGroup
    parameters: []
    return:
      type: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchGroup
  overload: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.GroupedByType*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.GroupByName
  commentId: P:Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.GroupByName
  id: GroupByName
  parent: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList
  langs:
  - csharp
  - vb
  name: GroupByName
  nameWithType: AnalyzerMatchList.GroupByName
  fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.GroupByName
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Matches.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GroupByName
    path: search/PhraseAnalyzer/Matches.cs
    startLine: 177
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public AnalyzerMatchGroup GroupByName { get; }
    content.vb: Public ReadOnly Property GroupByName As AnalyzerMatchGroup
    parameters: []
    return:
      type: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchGroup
  overload: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.GroupByName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.LongestMatches
  commentId: P:Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.LongestMatches
  id: LongestMatches
  parent: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList
  langs:
  - csharp
  - vb
  name: LongestMatches
  nameWithType: AnalyzerMatchList.LongestMatches
  fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.LongestMatches
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Matches.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: LongestMatches
    path: search/PhraseAnalyzer/Matches.cs
    startLine: 197
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public AnalyzerMatchList LongestMatches { get; }
    content.vb: Public ReadOnly Property LongestMatches As AnalyzerMatchList
    parameters: []
    return:
      type: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList
  overload: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.LongestMatches*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.IndexOfExpressionName(System.String)
  commentId: M:Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.IndexOfExpressionName(System.String)
  id: IndexOfExpressionName(System.String)
  parent: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList
  langs:
  - csharp
  - vb
  name: IndexOfExpressionName(String)
  nameWithType: AnalyzerMatchList.IndexOfExpressionName(String)
  fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.IndexOfExpressionName(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Matches.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IndexOfExpressionName
    path: search/PhraseAnalyzer/Matches.cs
    startLine: 230
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\nReturns the first matching expression with this name\n"
  example: []
  syntax:
    content: public int IndexOfExpressionName(string name)
    content.vb: Public Function IndexOfExpressionName(name As String) As Integer
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Int32
  overload: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.IndexOfExpressionName*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.IndexOfExpressionType(System.String)
  commentId: M:Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.IndexOfExpressionType(System.String)
  id: IndexOfExpressionType(System.String)
  parent: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList
  langs:
  - csharp
  - vb
  name: IndexOfExpressionType(String)
  nameWithType: AnalyzerMatchList.IndexOfExpressionType(String)
  fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.IndexOfExpressionType(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Matches.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IndexOfExpressionType
    path: search/PhraseAnalyzer/Matches.cs
    startLine: 251
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\nReturns the first matching expression of the given type\n"
  example: []
  syntax:
    content: public int IndexOfExpressionType(string type)
    content.vb: Public Function IndexOfExpressionType(type As String) As Integer
    parameters:
    - id: type
      type: System.String
    return:
      type: System.Int32
  overload: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.IndexOfExpressionType*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.IndexOfExpression(System.String,System.String)
  commentId: M:Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.IndexOfExpression(System.String,System.String)
  id: IndexOfExpression(System.String,System.String)
  parent: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList
  langs:
  - csharp
  - vb
  name: IndexOfExpression(String, String)
  nameWithType: AnalyzerMatchList.IndexOfExpression(String, String)
  fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.IndexOfExpression(System.String, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Matches.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IndexOfExpression
    path: search/PhraseAnalyzer/Matches.cs
    startLine: 272
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\nReturns the first matching expression of the given type and segment value\n"
  example: []
  syntax:
    content: public int IndexOfExpression(string type, string segmentValue)
    content.vb: Public Function IndexOfExpression(type As String, segmentValue As String) As Integer
    parameters:
    - id: type
      type: System.String
    - id: segmentValue
      type: System.String
    return:
      type: System.Int32
  overload: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.IndexOfExpression*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.IndexOfValue(System.String)
  commentId: M:Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.IndexOfValue(System.String)
  id: IndexOfValue(System.String)
  parent: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList
  langs:
  - csharp
  - vb
  name: IndexOfValue(String)
  nameWithType: AnalyzerMatchList.IndexOfValue(String)
  fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.IndexOfValue(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/search/PhraseAnalyzer/Matches.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IndexOfValue
    path: search/PhraseAnalyzer/Matches.cs
    startLine: 295
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.PhraseAnalyzer
  summary: "\n\n"
  example: []
  syntax:
    content: public int IndexOfValue(string segmentValue)
    content.vb: Public Function IndexOfValue(segmentValue As String) As Integer
    parameters:
    - id: segmentValue
      type: System.String
      description: ''
    return:
      type: System.Int32
      description: ''
  overload: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.IndexOfValue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Health.PhraseAnalyzer
  commentId: N:Microsoft.Health.PhraseAnalyzer
  isExternal: false
  name: Microsoft.Health.PhraseAnalyzer
  nameWithType: Microsoft.Health.PhraseAnalyzer
  fullName: Microsoft.Health.PhraseAnalyzer
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  commentId: T:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<AnalyzerMatch>
  nameWithType: List<AnalyzerMatch>
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>
  nameWithType.vb: List(Of AnalyzerMatch)
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  name.vb: List(Of AnalyzerMatch)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  commentId: T:System.Collections.Generic.IList{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<AnalyzerMatch>
  nameWithType: IList<AnalyzerMatch>
  fullName: System.Collections.Generic.IList<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>
  nameWithType.vb: IList(Of AnalyzerMatch)
  fullName.vb: System.Collections.Generic.IList(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  name.vb: IList(Of AnalyzerMatch)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  commentId: T:System.Collections.Generic.ICollection{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<AnalyzerMatch>
  nameWithType: ICollection<AnalyzerMatch>
  fullName: System.Collections.Generic.ICollection<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>
  nameWithType.vb: ICollection(Of AnalyzerMatch)
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  name.vb: ICollection(Of AnalyzerMatch)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList
  commentId: T:System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.Generic.IReadOnlyList{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  commentId: T:System.Collections.Generic.IReadOnlyList{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<AnalyzerMatch>
  nameWithType: IReadOnlyList<AnalyzerMatch>
  fullName: System.Collections.Generic.IReadOnlyList<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>
  nameWithType.vb: IReadOnlyList(Of AnalyzerMatch)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  name.vb: IReadOnlyList(Of AnalyzerMatch)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<AnalyzerMatch>
  nameWithType: IReadOnlyCollection<AnalyzerMatch>
  fullName: System.Collections.Generic.IReadOnlyCollection<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>
  nameWithType.vb: IReadOnlyCollection(Of AnalyzerMatch)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  name.vb: IReadOnlyCollection(Of AnalyzerMatch)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<AnalyzerMatch>
  nameWithType: IEnumerable<AnalyzerMatch>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>
  nameWithType.vb: IEnumerable(Of AnalyzerMatch)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  name.vb: IEnumerable(Of AnalyzerMatch)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#IList#get_Item(System.Int32)
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#IList#get_Item(System.Int32)
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
  name: IList.get_Item(Int32)
  nameWithType: List<AnalyzerMatch>.IList.get_Item(Int32)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.System.Collections.IList.get_Item(System.Int32)
  nameWithType.vb: List(Of AnalyzerMatch).System.Collections.IList.get_Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).System.Collections.IList.get_Item(System.Int32)
  name.vb: System.Collections.IList.get_Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
    name: IList.get_Item
    nameWithType: List<AnalyzerMatch>.IList.get_Item
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.System.Collections.IList.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
    name: System.Collections.IList.get_Item
    nameWithType: List(Of AnalyzerMatch).System.Collections.IList.get_Item
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).System.Collections.IList.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#IList#set_Item(System.Int32,System.Object)
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#IList#set_Item(System.Int32,System.Object)
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
  name: IList.set_Item(Int32, Object)
  nameWithType: List<AnalyzerMatch>.IList.set_Item(Int32, Object)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.System.Collections.IList.set_Item(System.Int32, System.Object)
  nameWithType.vb: List(Of AnalyzerMatch).System.Collections.IList.set_Item(Int32, Object)
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).System.Collections.IList.set_Item(System.Int32, System.Object)
  name.vb: System.Collections.IList.set_Item(Int32, Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
    name: IList.set_Item
    nameWithType: List<AnalyzerMatch>.IList.set_Item
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.System.Collections.IList.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
    name: System.Collections.IList.set_Item
    nameWithType: List(Of AnalyzerMatch).System.Collections.IList.set_Item
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).System.Collections.IList.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Add(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Add(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.Add(`0)
  name: Add(AnalyzerMatch)
  nameWithType: List<AnalyzerMatch>.Add(AnalyzerMatch)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.Add(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  nameWithType.vb: List(Of AnalyzerMatch).Add(AnalyzerMatch)
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).Add(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Add(`0)
    name: Add
    nameWithType: List<AnalyzerMatch>.Add
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Add(`0)
    name: Add
    nameWithType: List(Of AnalyzerMatch).Add
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#IList#Add(System.Object)
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#IList#Add(System.Object)
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
  name: IList.Add(Object)
  nameWithType: List<AnalyzerMatch>.IList.Add(Object)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.System.Collections.IList.Add(System.Object)
  nameWithType.vb: List(Of AnalyzerMatch).System.Collections.IList.Add(Object)
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).System.Collections.IList.Add(System.Object)
  name.vb: System.Collections.IList.Add(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
    name: IList.Add
    nameWithType: List<AnalyzerMatch>.IList.Add
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
    name: System.Collections.IList.Add
    nameWithType: List(Of AnalyzerMatch).System.Collections.IList.Add
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.AddRange(System.Collections.Generic.IEnumerable{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.AddRange(System.Collections.Generic.IEnumerable{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  name: AddRange(IEnumerable<AnalyzerMatch>)
  nameWithType: List<AnalyzerMatch>.AddRange(IEnumerable<AnalyzerMatch>)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.AddRange(System.Collections.Generic.IEnumerable<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>)
  nameWithType.vb: List(Of AnalyzerMatch).AddRange(IEnumerable(Of AnalyzerMatch))
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).AddRange(System.Collections.Generic.IEnumerable(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch))
  name.vb: AddRange(IEnumerable(Of AnalyzerMatch))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    name: AddRange
    nameWithType: List<AnalyzerMatch>.AddRange
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.AddRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    name: AddRange
    nameWithType: List(Of AnalyzerMatch).AddRange
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).AddRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.AsReadOnly
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.AsReadOnly
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.AsReadOnly
  name: AsReadOnly()
  nameWithType: List<AnalyzerMatch>.AsReadOnly()
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.AsReadOnly()
  nameWithType.vb: List(Of AnalyzerMatch).AsReadOnly()
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).AsReadOnly()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.AsReadOnly
    name: AsReadOnly
    nameWithType: List<AnalyzerMatch>.AsReadOnly
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.AsReadOnly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.AsReadOnly
    name: AsReadOnly
    nameWithType: List(Of AnalyzerMatch).AsReadOnly
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).AsReadOnly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.BinarySearch(System.Int32,System.Int32,Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.Collections.Generic.IComparer{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.BinarySearch(System.Int32,System.Int32,Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.Collections.Generic.IComparer{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  name: BinarySearch(Int32, Int32, AnalyzerMatch, IComparer<AnalyzerMatch>)
  nameWithType: List<AnalyzerMatch>.BinarySearch(Int32, Int32, AnalyzerMatch, IComparer<AnalyzerMatch>)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.BinarySearch(System.Int32, System.Int32, Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.Collections.Generic.IComparer<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>)
  nameWithType.vb: List(Of AnalyzerMatch).BinarySearch(Int32, Int32, AnalyzerMatch, IComparer(Of AnalyzerMatch))
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).BinarySearch(System.Int32, System.Int32, Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.Collections.Generic.IComparer(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch))
  name.vb: BinarySearch(Int32, Int32, AnalyzerMatch, IComparer(Of AnalyzerMatch))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List<AnalyzerMatch>.BinarySearch
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List(Of AnalyzerMatch).BinarySearch
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.BinarySearch(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.BinarySearch(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.BinarySearch(`0)
  name: BinarySearch(AnalyzerMatch)
  nameWithType: List<AnalyzerMatch>.BinarySearch(AnalyzerMatch)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.BinarySearch(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  nameWithType.vb: List(Of AnalyzerMatch).BinarySearch(AnalyzerMatch)
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).BinarySearch(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0)
    name: BinarySearch
    nameWithType: List<AnalyzerMatch>.BinarySearch
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0)
    name: BinarySearch
    nameWithType: List(Of AnalyzerMatch).BinarySearch
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.BinarySearch(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.Collections.Generic.IComparer{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.BinarySearch(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.Collections.Generic.IComparer{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  name: BinarySearch(AnalyzerMatch, IComparer<AnalyzerMatch>)
  nameWithType: List<AnalyzerMatch>.BinarySearch(AnalyzerMatch, IComparer<AnalyzerMatch>)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.BinarySearch(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.Collections.Generic.IComparer<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>)
  nameWithType.vb: List(Of AnalyzerMatch).BinarySearch(AnalyzerMatch, IComparer(Of AnalyzerMatch))
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).BinarySearch(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.Collections.Generic.IComparer(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch))
  name.vb: BinarySearch(AnalyzerMatch, IComparer(Of AnalyzerMatch))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List<AnalyzerMatch>.BinarySearch
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List(Of AnalyzerMatch).BinarySearch
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Clear
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Clear
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.Clear
  name: Clear()
  nameWithType: List<AnalyzerMatch>.Clear()
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.Clear()
  nameWithType.vb: List(Of AnalyzerMatch).Clear()
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Clear
    name: Clear
    nameWithType: List<AnalyzerMatch>.Clear
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Clear
    name: Clear
    nameWithType: List(Of AnalyzerMatch).Clear
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Contains(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Contains(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.Contains(`0)
  name: Contains(AnalyzerMatch)
  nameWithType: List<AnalyzerMatch>.Contains(AnalyzerMatch)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.Contains(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  nameWithType.vb: List(Of AnalyzerMatch).Contains(AnalyzerMatch)
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).Contains(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Contains(`0)
    name: Contains
    nameWithType: List<AnalyzerMatch>.Contains
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Contains(`0)
    name: Contains
    nameWithType: List(Of AnalyzerMatch).Contains
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#IList#Contains(System.Object)
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#IList#Contains(System.Object)
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
  name: IList.Contains(Object)
  nameWithType: List<AnalyzerMatch>.IList.Contains(Object)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.System.Collections.IList.Contains(System.Object)
  nameWithType.vb: List(Of AnalyzerMatch).System.Collections.IList.Contains(Object)
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).System.Collections.IList.Contains(System.Object)
  name.vb: System.Collections.IList.Contains(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
    name: IList.Contains
    nameWithType: List<AnalyzerMatch>.IList.Contains
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
    name: System.Collections.IList.Contains
    nameWithType: List(Of AnalyzerMatch).System.Collections.IList.Contains
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.ConvertAll``1(System.Converter{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,{TOutput}})
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.ConvertAll``1(System.Converter{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,``0})
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
  name: ConvertAll<TOutput>(Converter<AnalyzerMatch, TOutput>)
  nameWithType: List<AnalyzerMatch>.ConvertAll<TOutput>(Converter<AnalyzerMatch, TOutput>)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.ConvertAll<TOutput>(System.Converter<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, TOutput>)
  nameWithType.vb: List(Of AnalyzerMatch).ConvertAll(Of TOutput)(Converter(Of AnalyzerMatch, TOutput))
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).ConvertAll(Of TOutput)(System.Converter(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, TOutput))
  name.vb: ConvertAll(Of TOutput)(Converter(Of AnalyzerMatch, TOutput))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
    name: ConvertAll<TOutput>
    nameWithType: List<AnalyzerMatch>.ConvertAll<TOutput>
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.ConvertAll<TOutput>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
    name: ConvertAll(Of TOutput)
    nameWithType: List(Of AnalyzerMatch).ConvertAll(Of TOutput)
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).ConvertAll(Of TOutput)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.CopyTo(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch[])
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.CopyTo(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch[])
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.CopyTo(`0[])
  name: CopyTo(AnalyzerMatch[])
  nameWithType: List<AnalyzerMatch>.CopyTo(AnalyzerMatch[])
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.CopyTo(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch[])
  nameWithType.vb: List(Of AnalyzerMatch).CopyTo(AnalyzerMatch())
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).CopyTo(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch())
  name.vb: CopyTo(AnalyzerMatch())
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[])
    name: CopyTo
    nameWithType: List<AnalyzerMatch>.CopyTo
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[])
    name: CopyTo
    nameWithType: List(Of AnalyzerMatch).CopyTo
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: List<AnalyzerMatch>.ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  nameWithType.vb: List(Of AnalyzerMatch).System.Collections.ICollection.CopyTo(Array, Int32)
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: ICollection.CopyTo
    nameWithType: List<AnalyzerMatch>.ICollection.CopyTo
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: System.Collections.ICollection.CopyTo
    nameWithType: List(Of AnalyzerMatch).System.Collections.ICollection.CopyTo
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.CopyTo(System.Int32,Microsoft.Health.PhraseAnalyzer.AnalyzerMatch[],System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.CopyTo(System.Int32,Microsoft.Health.PhraseAnalyzer.AnalyzerMatch[],System.Int32,System.Int32)
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  name: CopyTo(Int32, AnalyzerMatch[], Int32, Int32)
  nameWithType: List<AnalyzerMatch>.CopyTo(Int32, AnalyzerMatch[], Int32, Int32)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.CopyTo(System.Int32, Microsoft.Health.PhraseAnalyzer.AnalyzerMatch[], System.Int32, System.Int32)
  nameWithType.vb: List(Of AnalyzerMatch).CopyTo(Int32, AnalyzerMatch(), Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).CopyTo(System.Int32, Microsoft.Health.PhraseAnalyzer.AnalyzerMatch(), System.Int32, System.Int32)
  name.vb: CopyTo(Int32, AnalyzerMatch(), Int32, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
    name: CopyTo
    nameWithType: List<AnalyzerMatch>.CopyTo
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
    name: CopyTo
    nameWithType: List(Of AnalyzerMatch).CopyTo
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.CopyTo(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch[],System.Int32)
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.CopyTo(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch[],System.Int32)
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  name: CopyTo(AnalyzerMatch[], Int32)
  nameWithType: List<AnalyzerMatch>.CopyTo(AnalyzerMatch[], Int32)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.CopyTo(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch[], System.Int32)
  nameWithType.vb: List(Of AnalyzerMatch).CopyTo(AnalyzerMatch(), Int32)
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).CopyTo(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch(), System.Int32)
  name.vb: CopyTo(AnalyzerMatch(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: List<AnalyzerMatch>.CopyTo
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: List(Of AnalyzerMatch).CopyTo
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Exists(System.Predicate{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Exists(System.Predicate{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  name: Exists(Predicate<AnalyzerMatch>)
  nameWithType: List<AnalyzerMatch>.Exists(Predicate<AnalyzerMatch>)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.Exists(System.Predicate<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>)
  nameWithType.vb: List(Of AnalyzerMatch).Exists(Predicate(Of AnalyzerMatch))
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).Exists(System.Predicate(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch))
  name.vb: Exists(Predicate(Of AnalyzerMatch))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    name: Exists
    nameWithType: List<AnalyzerMatch>.Exists
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    name: Exists
    nameWithType: List(Of AnalyzerMatch).Exists
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Find(System.Predicate{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Find(System.Predicate{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.Find(System.Predicate{`0})
  name: Find(Predicate<AnalyzerMatch>)
  nameWithType: List<AnalyzerMatch>.Find(Predicate<AnalyzerMatch>)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.Find(System.Predicate<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>)
  nameWithType.vb: List(Of AnalyzerMatch).Find(Predicate(Of AnalyzerMatch))
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).Find(System.Predicate(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch))
  name.vb: Find(Predicate(Of AnalyzerMatch))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    name: Find
    nameWithType: List<AnalyzerMatch>.Find
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    name: Find
    nameWithType: List(Of AnalyzerMatch).Find
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.FindAll(System.Predicate{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.FindAll(System.Predicate{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  name: FindAll(Predicate<AnalyzerMatch>)
  nameWithType: List<AnalyzerMatch>.FindAll(Predicate<AnalyzerMatch>)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.FindAll(System.Predicate<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>)
  nameWithType.vb: List(Of AnalyzerMatch).FindAll(Predicate(Of AnalyzerMatch))
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).FindAll(System.Predicate(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch))
  name.vb: FindAll(Predicate(Of AnalyzerMatch))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    name: FindAll
    nameWithType: List<AnalyzerMatch>.FindAll
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    name: FindAll
    nameWithType: List(Of AnalyzerMatch).FindAll
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.FindIndex(System.Predicate{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.FindIndex(System.Predicate{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
  name: FindIndex(Predicate<AnalyzerMatch>)
  nameWithType: List<AnalyzerMatch>.FindIndex(Predicate<AnalyzerMatch>)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.FindIndex(System.Predicate<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>)
  nameWithType.vb: List(Of AnalyzerMatch).FindIndex(Predicate(Of AnalyzerMatch))
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).FindIndex(System.Predicate(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch))
  name.vb: FindIndex(Predicate(Of AnalyzerMatch))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
    name: FindIndex
    nameWithType: List<AnalyzerMatch>.FindIndex
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of AnalyzerMatch).FindIndex
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.FindIndex(System.Int32,System.Predicate{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.FindIndex(System.Int32,System.Predicate{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
  name: FindIndex(Int32, Predicate<AnalyzerMatch>)
  nameWithType: List<AnalyzerMatch>.FindIndex(Int32, Predicate<AnalyzerMatch>)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.FindIndex(System.Int32, System.Predicate<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>)
  nameWithType.vb: List(Of AnalyzerMatch).FindIndex(Int32, Predicate(Of AnalyzerMatch))
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).FindIndex(System.Int32, System.Predicate(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch))
  name.vb: FindIndex(Int32, Predicate(Of AnalyzerMatch))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List<AnalyzerMatch>.FindIndex
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of AnalyzerMatch).FindIndex
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.FindIndex(System.Int32,System.Int32,System.Predicate{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.FindIndex(System.Int32,System.Int32,System.Predicate{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  name: FindIndex(Int32, Int32, Predicate<AnalyzerMatch>)
  nameWithType: List<AnalyzerMatch>.FindIndex(Int32, Int32, Predicate<AnalyzerMatch>)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.FindIndex(System.Int32, System.Int32, System.Predicate<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>)
  nameWithType.vb: List(Of AnalyzerMatch).FindIndex(Int32, Int32, Predicate(Of AnalyzerMatch))
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).FindIndex(System.Int32, System.Int32, System.Predicate(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch))
  name.vb: FindIndex(Int32, Int32, Predicate(Of AnalyzerMatch))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List<AnalyzerMatch>.FindIndex
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of AnalyzerMatch).FindIndex
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.FindLast(System.Predicate{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.FindLast(System.Predicate{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  name: FindLast(Predicate<AnalyzerMatch>)
  nameWithType: List<AnalyzerMatch>.FindLast(Predicate<AnalyzerMatch>)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.FindLast(System.Predicate<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>)
  nameWithType.vb: List(Of AnalyzerMatch).FindLast(Predicate(Of AnalyzerMatch))
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).FindLast(System.Predicate(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch))
  name.vb: FindLast(Predicate(Of AnalyzerMatch))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    name: FindLast
    nameWithType: List<AnalyzerMatch>.FindLast
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.FindLast
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    name: FindLast
    nameWithType: List(Of AnalyzerMatch).FindLast
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).FindLast
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.FindLastIndex(System.Predicate{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.FindLastIndex(System.Predicate{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
  name: FindLastIndex(Predicate<AnalyzerMatch>)
  nameWithType: List<AnalyzerMatch>.FindLastIndex(Predicate<AnalyzerMatch>)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.FindLastIndex(System.Predicate<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>)
  nameWithType.vb: List(Of AnalyzerMatch).FindLastIndex(Predicate(Of AnalyzerMatch))
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).FindLastIndex(System.Predicate(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch))
  name.vb: FindLastIndex(Predicate(Of AnalyzerMatch))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<AnalyzerMatch>.FindLastIndex
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of AnalyzerMatch).FindLastIndex
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.FindLastIndex(System.Int32,System.Predicate{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.FindLastIndex(System.Int32,System.Predicate{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
  name: FindLastIndex(Int32, Predicate<AnalyzerMatch>)
  nameWithType: List<AnalyzerMatch>.FindLastIndex(Int32, Predicate<AnalyzerMatch>)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.FindLastIndex(System.Int32, System.Predicate<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>)
  nameWithType.vb: List(Of AnalyzerMatch).FindLastIndex(Int32, Predicate(Of AnalyzerMatch))
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).FindLastIndex(System.Int32, System.Predicate(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch))
  name.vb: FindLastIndex(Int32, Predicate(Of AnalyzerMatch))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<AnalyzerMatch>.FindLastIndex
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of AnalyzerMatch).FindLastIndex
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.FindLastIndex(System.Int32,System.Int32,System.Predicate{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.FindLastIndex(System.Int32,System.Int32,System.Predicate{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  name: FindLastIndex(Int32, Int32, Predicate<AnalyzerMatch>)
  nameWithType: List<AnalyzerMatch>.FindLastIndex(Int32, Int32, Predicate<AnalyzerMatch>)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.FindLastIndex(System.Int32, System.Int32, System.Predicate<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>)
  nameWithType.vb: List(Of AnalyzerMatch).FindLastIndex(Int32, Int32, Predicate(Of AnalyzerMatch))
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).FindLastIndex(System.Int32, System.Int32, System.Predicate(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch))
  name.vb: FindLastIndex(Int32, Int32, Predicate(Of AnalyzerMatch))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<AnalyzerMatch>.FindLastIndex
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of AnalyzerMatch).FindLastIndex
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.ForEach(System.Action{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.ForEach(System.Action{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.ForEach(System.Action{`0})
  name: ForEach(Action<AnalyzerMatch>)
  nameWithType: List<AnalyzerMatch>.ForEach(Action<AnalyzerMatch>)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.ForEach(System.Action<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>)
  nameWithType.vb: List(Of AnalyzerMatch).ForEach(Action(Of AnalyzerMatch))
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).ForEach(System.Action(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch))
  name.vb: ForEach(Action(Of AnalyzerMatch))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
    name: ForEach
    nameWithType: List<AnalyzerMatch>.ForEach
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.ForEach
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
    name: ForEach
    nameWithType: List(Of AnalyzerMatch).ForEach
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).ForEach
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.GetEnumerator
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.GetEnumerator
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: List<AnalyzerMatch>.GetEnumerator()
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.GetEnumerator()
  nameWithType.vb: List(Of AnalyzerMatch).GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.GetEnumerator
    name: GetEnumerator
    nameWithType: List<AnalyzerMatch>.GetEnumerator
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.GetEnumerator
    name: GetEnumerator
    nameWithType: List(Of AnalyzerMatch).GetEnumerator
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  name: IEnumerable<AnalyzerMatch>.GetEnumerator()
  nameWithType: List<AnalyzerMatch>.IEnumerable<AnalyzerMatch>.GetEnumerator()
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.System.Collections.Generic.IEnumerable<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.GetEnumerator()
  nameWithType.vb: List(Of AnalyzerMatch).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    name: IEnumerable<AnalyzerMatch>.GetEnumerator
    nameWithType: List<AnalyzerMatch>.IEnumerable<AnalyzerMatch>.GetEnumerator
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.System.Collections.Generic.IEnumerable<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    name: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    nameWithType: List(Of AnalyzerMatch).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator()
  nameWithType: List<AnalyzerMatch>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: List(Of AnalyzerMatch).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: List<AnalyzerMatch>.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: List(Of AnalyzerMatch).System.Collections.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.GetRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.GetRange(System.Int32,System.Int32)
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  name: GetRange(Int32, Int32)
  nameWithType: List<AnalyzerMatch>.GetRange(Int32, Int32)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.GetRange(System.Int32, System.Int32)
  nameWithType.vb: List(Of AnalyzerMatch).GetRange(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).GetRange(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
    name: GetRange
    nameWithType: List<AnalyzerMatch>.GetRange
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.GetRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
    name: GetRange
    nameWithType: List(Of AnalyzerMatch).GetRange
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).GetRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.IndexOf(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.IndexOf(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.IndexOf(`0)
  name: IndexOf(AnalyzerMatch)
  nameWithType: List<AnalyzerMatch>.IndexOf(AnalyzerMatch)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.IndexOf(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  nameWithType.vb: List(Of AnalyzerMatch).IndexOf(AnalyzerMatch)
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).IndexOf(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0)
    name: IndexOf
    nameWithType: List<AnalyzerMatch>.IndexOf
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0)
    name: IndexOf
    nameWithType: List(Of AnalyzerMatch).IndexOf
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#IList#IndexOf(System.Object)
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#IList#IndexOf(System.Object)
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
  name: IList.IndexOf(Object)
  nameWithType: List<AnalyzerMatch>.IList.IndexOf(Object)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.System.Collections.IList.IndexOf(System.Object)
  nameWithType.vb: List(Of AnalyzerMatch).System.Collections.IList.IndexOf(Object)
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).System.Collections.IList.IndexOf(System.Object)
  name.vb: System.Collections.IList.IndexOf(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
    name: IList.IndexOf
    nameWithType: List<AnalyzerMatch>.IList.IndexOf
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
    name: System.Collections.IList.IndexOf
    nameWithType: List(Of AnalyzerMatch).System.Collections.IList.IndexOf
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.IndexOf(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.Int32)
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.IndexOf(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.Int32)
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  name: IndexOf(AnalyzerMatch, Int32)
  nameWithType: List<AnalyzerMatch>.IndexOf(AnalyzerMatch, Int32)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.IndexOf(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.Int32)
  nameWithType.vb: List(Of AnalyzerMatch).IndexOf(AnalyzerMatch, Int32)
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).IndexOf(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
    name: IndexOf
    nameWithType: List<AnalyzerMatch>.IndexOf
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
    name: IndexOf
    nameWithType: List(Of AnalyzerMatch).IndexOf
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.IndexOf(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.IndexOf(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.Int32,System.Int32)
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  name: IndexOf(AnalyzerMatch, Int32, Int32)
  nameWithType: List<AnalyzerMatch>.IndexOf(AnalyzerMatch, Int32, Int32)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.IndexOf(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.Int32, System.Int32)
  nameWithType.vb: List(Of AnalyzerMatch).IndexOf(AnalyzerMatch, Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).IndexOf(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
    name: IndexOf
    nameWithType: List<AnalyzerMatch>.IndexOf
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
    name: IndexOf
    nameWithType: List(Of AnalyzerMatch).IndexOf
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Insert(System.Int32,Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Insert(System.Int32,Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.Insert(System.Int32,`0)
  name: Insert(Int32, AnalyzerMatch)
  nameWithType: List<AnalyzerMatch>.Insert(Int32, AnalyzerMatch)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.Insert(System.Int32, Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  nameWithType.vb: List(Of AnalyzerMatch).Insert(Int32, AnalyzerMatch)
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).Insert(System.Int32, Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: List<AnalyzerMatch>.Insert
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: List(Of AnalyzerMatch).Insert
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#IList#Insert(System.Int32,System.Object)
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
  name: IList.Insert(Int32, Object)
  nameWithType: List<AnalyzerMatch>.IList.Insert(Int32, Object)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.System.Collections.IList.Insert(System.Int32, System.Object)
  nameWithType.vb: List(Of AnalyzerMatch).System.Collections.IList.Insert(Int32, Object)
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).System.Collections.IList.Insert(System.Int32, System.Object)
  name.vb: System.Collections.IList.Insert(Int32, Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: IList.Insert
    nameWithType: List<AnalyzerMatch>.IList.Insert
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: System.Collections.IList.Insert
    nameWithType: List(Of AnalyzerMatch).System.Collections.IList.Insert
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  name: InsertRange(Int32, IEnumerable<AnalyzerMatch>)
  nameWithType: List<AnalyzerMatch>.InsertRange(Int32, IEnumerable<AnalyzerMatch>)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.InsertRange(System.Int32, System.Collections.Generic.IEnumerable<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>)
  nameWithType.vb: List(Of AnalyzerMatch).InsertRange(Int32, IEnumerable(Of AnalyzerMatch))
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).InsertRange(System.Int32, System.Collections.Generic.IEnumerable(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch))
  name.vb: InsertRange(Int32, IEnumerable(Of AnalyzerMatch))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    name: InsertRange
    nameWithType: List<AnalyzerMatch>.InsertRange
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.InsertRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    name: InsertRange
    nameWithType: List(Of AnalyzerMatch).InsertRange
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).InsertRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.LastIndexOf(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.LastIndexOf(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.LastIndexOf(`0)
  name: LastIndexOf(AnalyzerMatch)
  nameWithType: List<AnalyzerMatch>.LastIndexOf(AnalyzerMatch)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.LastIndexOf(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  nameWithType.vb: List(Of AnalyzerMatch).LastIndexOf(AnalyzerMatch)
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).LastIndexOf(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0)
    name: LastIndexOf
    nameWithType: List<AnalyzerMatch>.LastIndexOf
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0)
    name: LastIndexOf
    nameWithType: List(Of AnalyzerMatch).LastIndexOf
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.LastIndexOf(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.Int32)
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.LastIndexOf(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.Int32)
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  name: LastIndexOf(AnalyzerMatch, Int32)
  nameWithType: List<AnalyzerMatch>.LastIndexOf(AnalyzerMatch, Int32)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.LastIndexOf(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.Int32)
  nameWithType.vb: List(Of AnalyzerMatch).LastIndexOf(AnalyzerMatch, Int32)
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).LastIndexOf(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
    name: LastIndexOf
    nameWithType: List<AnalyzerMatch>.LastIndexOf
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
    name: LastIndexOf
    nameWithType: List(Of AnalyzerMatch).LastIndexOf
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.LastIndexOf(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.LastIndexOf(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch,System.Int32,System.Int32)
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  name: LastIndexOf(AnalyzerMatch, Int32, Int32)
  nameWithType: List<AnalyzerMatch>.LastIndexOf(AnalyzerMatch, Int32, Int32)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.LastIndexOf(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.Int32, System.Int32)
  nameWithType.vb: List(Of AnalyzerMatch).LastIndexOf(AnalyzerMatch, Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).LastIndexOf(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch, System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
    name: LastIndexOf
    nameWithType: List<AnalyzerMatch>.LastIndexOf
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
    name: LastIndexOf
    nameWithType: List(Of AnalyzerMatch).LastIndexOf
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Remove(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Remove(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.Remove(`0)
  name: Remove(AnalyzerMatch)
  nameWithType: List<AnalyzerMatch>.Remove(AnalyzerMatch)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.Remove(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  nameWithType.vb: List(Of AnalyzerMatch).Remove(AnalyzerMatch)
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).Remove(Microsoft.Health.PhraseAnalyzer.AnalyzerMatch)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Remove(`0)
    name: Remove
    nameWithType: List<AnalyzerMatch>.Remove
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Remove(`0)
    name: Remove
    nameWithType: List(Of AnalyzerMatch).Remove
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#IList#Remove(System.Object)
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#IList#Remove(System.Object)
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
  name: IList.Remove(Object)
  nameWithType: List<AnalyzerMatch>.IList.Remove(Object)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.System.Collections.IList.Remove(System.Object)
  nameWithType.vb: List(Of AnalyzerMatch).System.Collections.IList.Remove(Object)
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).System.Collections.IList.Remove(System.Object)
  name.vb: System.Collections.IList.Remove(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
    name: IList.Remove
    nameWithType: List<AnalyzerMatch>.IList.Remove
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
    name: System.Collections.IList.Remove
    nameWithType: List(Of AnalyzerMatch).System.Collections.IList.Remove
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.RemoveAll(System.Predicate{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.RemoveAll(System.Predicate{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
  name: RemoveAll(Predicate<AnalyzerMatch>)
  nameWithType: List<AnalyzerMatch>.RemoveAll(Predicate<AnalyzerMatch>)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.RemoveAll(System.Predicate<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>)
  nameWithType.vb: List(Of AnalyzerMatch).RemoveAll(Predicate(Of AnalyzerMatch))
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).RemoveAll(System.Predicate(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch))
  name.vb: RemoveAll(Predicate(Of AnalyzerMatch))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
    name: RemoveAll
    nameWithType: List<AnalyzerMatch>.RemoveAll
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.RemoveAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
    name: RemoveAll
    nameWithType: List(Of AnalyzerMatch).RemoveAll
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).RemoveAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.RemoveAt(System.Int32)
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.RemoveAt(System.Int32)
  name: RemoveAt(Int32)
  nameWithType: List<AnalyzerMatch>.RemoveAt(Int32)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.RemoveAt(System.Int32)
  nameWithType.vb: List(Of AnalyzerMatch).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: List<AnalyzerMatch>.RemoveAt
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: List(Of AnalyzerMatch).RemoveAt
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.RemoveRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.RemoveRange(System.Int32,System.Int32)
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  name: RemoveRange(Int32, Int32)
  nameWithType: List<AnalyzerMatch>.RemoveRange(Int32, Int32)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.RemoveRange(System.Int32, System.Int32)
  nameWithType.vb: List(Of AnalyzerMatch).RemoveRange(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).RemoveRange(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    name: RemoveRange
    nameWithType: List<AnalyzerMatch>.RemoveRange
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.RemoveRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    name: RemoveRange
    nameWithType: List(Of AnalyzerMatch).RemoveRange
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).RemoveRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Reverse
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Reverse
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.Reverse
  name: Reverse()
  nameWithType: List<AnalyzerMatch>.Reverse()
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.Reverse()
  nameWithType.vb: List(Of AnalyzerMatch).Reverse()
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).Reverse()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Reverse
    name: Reverse
    nameWithType: List<AnalyzerMatch>.Reverse
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Reverse
    name: Reverse
    nameWithType: List(Of AnalyzerMatch).Reverse
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Reverse(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Reverse(System.Int32,System.Int32)
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  name: Reverse(Int32, Int32)
  nameWithType: List<AnalyzerMatch>.Reverse(Int32, Int32)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.Reverse(System.Int32, System.Int32)
  nameWithType.vb: List(Of AnalyzerMatch).Reverse(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).Reverse(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
    name: Reverse
    nameWithType: List<AnalyzerMatch>.Reverse
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
    name: Reverse
    nameWithType: List(Of AnalyzerMatch).Reverse
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Sort
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Sort
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.Sort
  name: Sort()
  nameWithType: List<AnalyzerMatch>.Sort()
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.Sort()
  nameWithType.vb: List(Of AnalyzerMatch).Sort()
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).Sort()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort
    name: Sort
    nameWithType: List<AnalyzerMatch>.Sort
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort
    name: Sort
    nameWithType: List(Of AnalyzerMatch).Sort
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Sort(System.Collections.Generic.IComparer{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Sort(System.Collections.Generic.IComparer{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
  name: Sort(IComparer<AnalyzerMatch>)
  nameWithType: List<AnalyzerMatch>.Sort(IComparer<AnalyzerMatch>)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.Sort(System.Collections.Generic.IComparer<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>)
  nameWithType.vb: List(Of AnalyzerMatch).Sort(IComparer(Of AnalyzerMatch))
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).Sort(System.Collections.Generic.IComparer(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch))
  name.vb: Sort(IComparer(Of AnalyzerMatch))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List<AnalyzerMatch>.Sort
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List(Of AnalyzerMatch).Sort
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  name: Sort(Int32, Int32, IComparer<AnalyzerMatch>)
  nameWithType: List<AnalyzerMatch>.Sort(Int32, Int32, IComparer<AnalyzerMatch>)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>)
  nameWithType.vb: List(Of AnalyzerMatch).Sort(Int32, Int32, IComparer(Of AnalyzerMatch))
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch))
  name.vb: Sort(Int32, Int32, IComparer(Of AnalyzerMatch))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List<AnalyzerMatch>.Sort
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List(Of AnalyzerMatch).Sort
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Sort(System.Comparison{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Sort(System.Comparison{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
  name: Sort(Comparison<AnalyzerMatch>)
  nameWithType: List<AnalyzerMatch>.Sort(Comparison<AnalyzerMatch>)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.Sort(System.Comparison<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>)
  nameWithType.vb: List(Of AnalyzerMatch).Sort(Comparison(Of AnalyzerMatch))
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).Sort(System.Comparison(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch))
  name.vb: Sort(Comparison(Of AnalyzerMatch))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
    name: Sort
    nameWithType: List<AnalyzerMatch>.Sort
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
    name: Sort
    nameWithType: List(Of AnalyzerMatch).Sort
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.ToArray
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.ToArray
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.ToArray
  name: ToArray()
  nameWithType: List<AnalyzerMatch>.ToArray()
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.ToArray()
  nameWithType.vb: List(Of AnalyzerMatch).ToArray()
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).ToArray()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ToArray
    name: ToArray
    nameWithType: List<AnalyzerMatch>.ToArray
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.ToArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ToArray
    name: ToArray
    nameWithType: List(Of AnalyzerMatch).ToArray
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).ToArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.TrimExcess
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.TrimExcess
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.TrimExcess
  name: TrimExcess()
  nameWithType: List<AnalyzerMatch>.TrimExcess()
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.TrimExcess()
  nameWithType.vb: List(Of AnalyzerMatch).TrimExcess()
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).TrimExcess()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.TrimExcess
    name: TrimExcess
    nameWithType: List<AnalyzerMatch>.TrimExcess
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.TrimExcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.TrimExcess
    name: TrimExcess
    nameWithType: List(Of AnalyzerMatch).TrimExcess
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).TrimExcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.TrueForAll(System.Predicate{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  commentId: M:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.TrueForAll(System.Predicate{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch})
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  name: TrueForAll(Predicate<AnalyzerMatch>)
  nameWithType: List<AnalyzerMatch>.TrueForAll(Predicate<AnalyzerMatch>)
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.TrueForAll(System.Predicate<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>)
  nameWithType.vb: List(Of AnalyzerMatch).TrueForAll(Predicate(Of AnalyzerMatch))
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).TrueForAll(System.Predicate(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch))
  name.vb: TrueForAll(Predicate(Of AnalyzerMatch))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    name: TrueForAll
    nameWithType: List<AnalyzerMatch>.TrueForAll
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.TrueForAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    name: TrueForAll
    nameWithType: List(Of AnalyzerMatch).TrueForAll
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).TrueForAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
    name: AnalyzerMatch
    nameWithType: AnalyzerMatch
    fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatch
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Capacity
  commentId: P:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Capacity
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.Capacity
  name: Capacity
  nameWithType: List<AnalyzerMatch>.Capacity
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.Capacity
  nameWithType.vb: List(Of AnalyzerMatch).Capacity
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).Capacity
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Count
  commentId: P:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Count
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.Count
  name: Count
  nameWithType: List<AnalyzerMatch>.Count
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.Count
  nameWithType.vb: List(Of AnalyzerMatch).Count
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).Count
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#IList#IsFixedSize
  commentId: P:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#IList#IsFixedSize
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize
  name: IList.IsFixedSize
  nameWithType: List<AnalyzerMatch>.IList.IsFixedSize
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.System.Collections.IList.IsFixedSize
  nameWithType.vb: List(Of AnalyzerMatch).System.Collections.IList.IsFixedSize
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).System.Collections.IList.IsFixedSize
  name.vb: System.Collections.IList.IsFixedSize
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#Generic#ICollection{T}#IsReadOnly
  commentId: P:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#Generic#ICollection{T}#IsReadOnly
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  name: ICollection<AnalyzerMatch>.IsReadOnly
  nameWithType: List<AnalyzerMatch>.ICollection<AnalyzerMatch>.IsReadOnly
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.System.Collections.Generic.ICollection<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.IsReadOnly
  nameWithType.vb: List(Of AnalyzerMatch).System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#IList#IsReadOnly
  commentId: P:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#IList#IsReadOnly
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly
  name: IList.IsReadOnly
  nameWithType: List<AnalyzerMatch>.IList.IsReadOnly
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.System.Collections.IList.IsReadOnly
  nameWithType.vb: List(Of AnalyzerMatch).System.Collections.IList.IsReadOnly
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).System.Collections.IList.IsReadOnly
  name.vb: System.Collections.IList.IsReadOnly
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized
  name: ICollection.IsSynchronized
  nameWithType: List<AnalyzerMatch>.ICollection.IsSynchronized
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.System.Collections.ICollection.IsSynchronized
  nameWithType.vb: List(Of AnalyzerMatch).System.Collections.ICollection.IsSynchronized
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#ICollection#SyncRoot
  commentId: P:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#ICollection#SyncRoot
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot
  name: ICollection.SyncRoot
  nameWithType: List<AnalyzerMatch>.ICollection.SyncRoot
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.System.Collections.ICollection.SyncRoot
  nameWithType.vb: List(Of AnalyzerMatch).System.Collections.ICollection.SyncRoot
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Item(System.Int32)
  commentId: P:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.Item(System.Int32)
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.Item(System.Int32)
  name: Item[Int32]
  nameWithType: List<AnalyzerMatch>.Item[Int32]
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.Item[System.Int32]
  nameWithType.vb: List(Of AnalyzerMatch).Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Item(System.Int32)
    name: Item
    nameWithType: List<AnalyzerMatch>.Item
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.List`1.Item(System.Int32)
    name: Item
    nameWithType: List(Of AnalyzerMatch).Item
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#IList#Item(System.Int32)
  commentId: P:System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}.System#Collections#IList#Item(System.Int32)
  parent: System.Collections.Generic.List{Microsoft.Health.PhraseAnalyzer.AnalyzerMatch}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
  name: IList.Item[Int32]
  nameWithType: List<AnalyzerMatch>.IList.Item[Int32]
  fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.System.Collections.IList.Item[System.Int32]
  nameWithType.vb: List(Of AnalyzerMatch).System.Collections.IList.Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).System.Collections.IList.Item(System.Int32)
  name.vb: System.Collections.IList.Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
    name: IList.Item
    nameWithType: List<AnalyzerMatch>.IList.Item
    fullName: System.Collections.Generic.List<Microsoft.Health.PhraseAnalyzer.AnalyzerMatch>.System.Collections.IList.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
    name: System.Collections.IList.Item
    nameWithType: List(Of AnalyzerMatch).System.Collections.IList.Item
    fullName: System.Collections.Generic.List(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatch).System.Collections.IList.Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  name: SetProperty(String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object())
  name.vb: SetProperty(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  name: InvokeMethod(String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object())
  name.vb: InvokeMethod(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  parent: Microsoft.Health.Utility.InvariantString
  definition: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  name: ToStringInvariant()
  nameWithType: InvariantString.ToStringInvariant()
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant()
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  parent: Microsoft.Health.Utility.TypeHelper
  definition: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  name: ValueOrDbNull<AnalyzerMatchList>()
  nameWithType: TypeHelper.ValueOrDbNull<AnalyzerMatchList>()
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList>()
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of AnalyzerMatchList)()
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList)()
  name.vb: ValueOrDbNull(Of AnalyzerMatchList)()
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull<AnalyzerMatchList>
    nameWithType: TypeHelper.ValueOrDbNull<AnalyzerMatchList>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull(Of AnalyzerMatchList)
    nameWithType: TypeHelper.ValueOrDbNull(Of AnalyzerMatchList)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  parent: Microsoft.Health.Utility.WCXmlHelper
  definition: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  name: ToXml()
  nameWithType: WCXmlHelper.ToXml()
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml()
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
  isExternal: true
  name: IList.get_Item(Int32)
  nameWithType: List<T>.IList.get_Item(Int32)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.get_Item(System.Int32)
  nameWithType.vb: List(Of T).System.Collections.IList.get_Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.get_Item(System.Int32)
  name.vb: System.Collections.IList.get_Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
    name: IList.get_Item
    nameWithType: List<T>.IList.get_Item
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
    name: System.Collections.IList.get_Item
    nameWithType: List(Of T).System.Collections.IList.get_Item
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
  isExternal: true
  name: IList.set_Item(Int32, Object)
  nameWithType: List<T>.IList.set_Item(Int32, Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.set_Item(System.Int32, System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.set_Item(Int32, Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.set_Item(System.Int32, System.Object)
  name.vb: System.Collections.IList.set_Item(Int32, Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
    name: IList.set_Item
    nameWithType: List<T>.IList.set_Item
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
    name: System.Collections.IList.set_Item
    nameWithType: List(Of T).System.Collections.IList.set_Item
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Add(`0)
  commentId: M:System.Collections.Generic.List`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: List<T>.Add(T)
  fullName: System.Collections.Generic.List<T>.Add(T)
  nameWithType.vb: List(Of T).Add(T)
  fullName.vb: System.Collections.Generic.List(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Add(`0)
    name: Add
    nameWithType: List<T>.Add
    fullName: System.Collections.Generic.List<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Add(`0)
    name: Add
    nameWithType: List(Of T).Add
    fullName: System.Collections.Generic.List(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
  isExternal: true
  name: IList.Add(Object)
  nameWithType: List<T>.IList.Add(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Add(System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.Add(Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Add(System.Object)
  name.vb: System.Collections.IList.Add(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
    name: IList.Add
    nameWithType: List<T>.IList.Add
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
    name: System.Collections.IList.Add
    nameWithType: List(Of T).System.Collections.IList.Add
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: AddRange(IEnumerable<T>)
  nameWithType: List<T>.AddRange(IEnumerable<T>)
  fullName: System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: List(Of T).AddRange(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).AddRange(System.Collections.Generic.IEnumerable(Of T))
  name.vb: AddRange(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    name: AddRange
    nameWithType: List<T>.AddRange
    fullName: System.Collections.Generic.List<T>.AddRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    name: AddRange
    nameWithType: List(Of T).AddRange
    fullName: System.Collections.Generic.List(Of T).AddRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.AsReadOnly
  commentId: M:System.Collections.Generic.List`1.AsReadOnly
  isExternal: true
  name: AsReadOnly()
  nameWithType: List<T>.AsReadOnly()
  fullName: System.Collections.Generic.List<T>.AsReadOnly()
  nameWithType.vb: List(Of T).AsReadOnly()
  fullName.vb: System.Collections.Generic.List(Of T).AsReadOnly()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.AsReadOnly
    name: AsReadOnly
    nameWithType: List<T>.AsReadOnly
    fullName: System.Collections.Generic.List<T>.AsReadOnly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.AsReadOnly
    name: AsReadOnly
    nameWithType: List(Of T).AsReadOnly
    fullName: System.Collections.Generic.List(Of T).AsReadOnly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  isExternal: true
  name: BinarySearch(Int32, Int32, T, IComparer<T>)
  nameWithType: List<T>.BinarySearch(Int32, Int32, T, IComparer<T>)
  fullName: System.Collections.Generic.List<T>.BinarySearch(System.Int32, System.Int32, T, System.Collections.Generic.IComparer<T>)
  nameWithType.vb: List(Of T).BinarySearch(Int32, Int32, T, IComparer(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).BinarySearch(System.Int32, System.Int32, T, System.Collections.Generic.IComparer(Of T))
  name.vb: BinarySearch(Int32, Int32, T, IComparer(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List<T>.BinarySearch
    fullName: System.Collections.Generic.List<T>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List(Of T).BinarySearch
    fullName: System.Collections.Generic.List(Of T).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.BinarySearch(`0)
  commentId: M:System.Collections.Generic.List`1.BinarySearch(`0)
  isExternal: true
  name: BinarySearch(T)
  nameWithType: List<T>.BinarySearch(T)
  fullName: System.Collections.Generic.List<T>.BinarySearch(T)
  nameWithType.vb: List(Of T).BinarySearch(T)
  fullName.vb: System.Collections.Generic.List(Of T).BinarySearch(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0)
    name: BinarySearch
    nameWithType: List<T>.BinarySearch
    fullName: System.Collections.Generic.List<T>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0)
    name: BinarySearch
    nameWithType: List(Of T).BinarySearch
    fullName: System.Collections.Generic.List(Of T).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  isExternal: true
  name: BinarySearch(T, IComparer<T>)
  nameWithType: List<T>.BinarySearch(T, IComparer<T>)
  fullName: System.Collections.Generic.List<T>.BinarySearch(T, System.Collections.Generic.IComparer<T>)
  nameWithType.vb: List(Of T).BinarySearch(T, IComparer(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).BinarySearch(T, System.Collections.Generic.IComparer(Of T))
  name.vb: BinarySearch(T, IComparer(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List<T>.BinarySearch
    fullName: System.Collections.Generic.List<T>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List(Of T).BinarySearch
    fullName: System.Collections.Generic.List(Of T).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Clear
  commentId: M:System.Collections.Generic.List`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: List<T>.Clear()
  fullName: System.Collections.Generic.List<T>.Clear()
  nameWithType.vb: List(Of T).Clear()
  fullName.vb: System.Collections.Generic.List(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Clear
    name: Clear
    nameWithType: List<T>.Clear
    fullName: System.Collections.Generic.List<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Clear
    name: Clear
    nameWithType: List(Of T).Clear
    fullName: System.Collections.Generic.List(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Contains(`0)
  commentId: M:System.Collections.Generic.List`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: List<T>.Contains(T)
  fullName: System.Collections.Generic.List<T>.Contains(T)
  nameWithType.vb: List(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.List(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Contains(`0)
    name: Contains
    nameWithType: List<T>.Contains
    fullName: System.Collections.Generic.List<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Contains(`0)
    name: Contains
    nameWithType: List(Of T).Contains
    fullName: System.Collections.Generic.List(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
  isExternal: true
  name: IList.Contains(Object)
  nameWithType: List<T>.IList.Contains(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Contains(System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.Contains(Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Contains(System.Object)
  name.vb: System.Collections.IList.Contains(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
    name: IList.Contains
    nameWithType: List<T>.IList.Contains
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
    name: System.Collections.IList.Contains
    nameWithType: List(Of T).System.Collections.IList.Contains
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
  commentId: M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
  isExternal: true
  name: ConvertAll<TOutput>(Converter<T, TOutput>)
  nameWithType: List<T>.ConvertAll<TOutput>(Converter<T, TOutput>)
  fullName: System.Collections.Generic.List<T>.ConvertAll<TOutput>(System.Converter<T, TOutput>)
  nameWithType.vb: List(Of T).ConvertAll(Of TOutput)(Converter(Of T, TOutput))
  fullName.vb: System.Collections.Generic.List(Of T).ConvertAll(Of TOutput)(System.Converter(Of T, TOutput))
  name.vb: ConvertAll(Of TOutput)(Converter(Of T, TOutput))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
    name: ConvertAll<TOutput>
    nameWithType: List<T>.ConvertAll<TOutput>
    fullName: System.Collections.Generic.List<T>.ConvertAll<TOutput>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
    name: ConvertAll(Of TOutput)
    nameWithType: List(Of T).ConvertAll(Of TOutput)
    fullName: System.Collections.Generic.List(Of T).ConvertAll(Of TOutput)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.CopyTo(`0[])
  commentId: M:System.Collections.Generic.List`1.CopyTo(`0[])
  isExternal: true
  name: CopyTo(T[])
  nameWithType: List<T>.CopyTo(T[])
  fullName: System.Collections.Generic.List<T>.CopyTo(T[])
  nameWithType.vb: List(Of T).CopyTo(T())
  fullName.vb: System.Collections.Generic.List(Of T).CopyTo(T())
  name.vb: CopyTo(T())
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[])
    name: CopyTo
    nameWithType: List<T>.CopyTo
    fullName: System.Collections.Generic.List<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[])
    name: CopyTo
    nameWithType: List(Of T).CopyTo
    fullName: System.Collections.Generic.List(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isExternal: true
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: List<T>.ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  nameWithType.vb: List(Of T).System.Collections.ICollection.CopyTo(Array, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: ICollection.CopyTo
    nameWithType: List<T>.ICollection.CopyTo
    fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: System.Collections.ICollection.CopyTo
    nameWithType: List(Of T).System.Collections.ICollection.CopyTo
    fullName: System.Collections.Generic.List(Of T).System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  isExternal: true
  name: CopyTo(Int32, T[], Int32, Int32)
  nameWithType: List<T>.CopyTo(Int32, T[], Int32, Int32)
  fullName: System.Collections.Generic.List<T>.CopyTo(System.Int32, T[], System.Int32, System.Int32)
  nameWithType.vb: List(Of T).CopyTo(Int32, T(), Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).CopyTo(System.Int32, T(), System.Int32, System.Int32)
  name.vb: CopyTo(Int32, T(), Int32, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
    name: CopyTo
    nameWithType: List<T>.CopyTo
    fullName: System.Collections.Generic.List<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
    name: CopyTo
    nameWithType: List(Of T).CopyTo
    fullName: System.Collections.Generic.List(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: List<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.List<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: List(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.List(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: List<T>.CopyTo
    fullName: System.Collections.Generic.List<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: List(Of T).CopyTo
    fullName: System.Collections.Generic.List(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  isExternal: true
  name: Exists(Predicate<T>)
  nameWithType: List<T>.Exists(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.Exists(System.Predicate<T>)
  nameWithType.vb: List(Of T).Exists(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Exists(System.Predicate(Of T))
  name.vb: Exists(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    name: Exists
    nameWithType: List<T>.Exists
    fullName: System.Collections.Generic.List<T>.Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    name: Exists
    nameWithType: List(Of T).Exists
    fullName: System.Collections.Generic.List(Of T).Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.Find(System.Predicate{`0})
  isExternal: true
  name: Find(Predicate<T>)
  nameWithType: List<T>.Find(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.Find(System.Predicate<T>)
  nameWithType.vb: List(Of T).Find(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Find(System.Predicate(Of T))
  name.vb: Find(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    name: Find
    nameWithType: List<T>.Find
    fullName: System.Collections.Generic.List<T>.Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    name: Find
    nameWithType: List(Of T).Find
    fullName: System.Collections.Generic.List(Of T).Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  isExternal: true
  name: FindAll(Predicate<T>)
  nameWithType: List<T>.FindAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindAll(System.Predicate<T>)
  nameWithType.vb: List(Of T).FindAll(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindAll(System.Predicate(Of T))
  name.vb: FindAll(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    name: FindAll
    nameWithType: List<T>.FindAll
    fullName: System.Collections.Generic.List<T>.FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    name: FindAll
    nameWithType: List(Of T).FindAll
    fullName: System.Collections.Generic.List(Of T).FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
  isExternal: true
  name: FindIndex(Predicate<T>)
  nameWithType: List<T>.FindIndex(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(System.Predicate<T>)
  nameWithType.vb: List(Of T).FindIndex(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindIndex(System.Predicate(Of T))
  name.vb: FindIndex(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
    name: FindIndex
    nameWithType: List<T>.FindIndex
    fullName: System.Collections.Generic.List<T>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of T).FindIndex
    fullName: System.Collections.Generic.List(Of T).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
  isExternal: true
  name: FindIndex(Int32, Predicate<T>)
  nameWithType: List<T>.FindIndex(Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(System.Int32, System.Predicate<T>)
  nameWithType.vb: List(Of T).FindIndex(Int32, Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindIndex(System.Int32, System.Predicate(Of T))
  name.vb: FindIndex(Int32, Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List<T>.FindIndex
    fullName: System.Collections.Generic.List<T>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of T).FindIndex
    fullName: System.Collections.Generic.List(Of T).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  isExternal: true
  name: FindIndex(Int32, Int32, Predicate<T>)
  nameWithType: List<T>.FindIndex(Int32, Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(System.Int32, System.Int32, System.Predicate<T>)
  nameWithType.vb: List(Of T).FindIndex(Int32, Int32, Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindIndex(System.Int32, System.Int32, System.Predicate(Of T))
  name.vb: FindIndex(Int32, Int32, Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List<T>.FindIndex
    fullName: System.Collections.Generic.List<T>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of T).FindIndex
    fullName: System.Collections.Generic.List(Of T).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  isExternal: true
  name: FindLast(Predicate<T>)
  nameWithType: List<T>.FindLast(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLast(System.Predicate<T>)
  nameWithType.vb: List(Of T).FindLast(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindLast(System.Predicate(Of T))
  name.vb: FindLast(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    name: FindLast
    nameWithType: List<T>.FindLast
    fullName: System.Collections.Generic.List<T>.FindLast
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    name: FindLast
    nameWithType: List(Of T).FindLast
    fullName: System.Collections.Generic.List(Of T).FindLast
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
  isExternal: true
  name: FindLastIndex(Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(System.Predicate<T>)
  nameWithType.vb: List(Of T).FindLastIndex(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindLastIndex(System.Predicate(Of T))
  name.vb: FindLastIndex(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<T>.FindLastIndex
    fullName: System.Collections.Generic.List<T>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of T).FindLastIndex
    fullName: System.Collections.Generic.List(Of T).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
  isExternal: true
  name: FindLastIndex(Int32, Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(System.Int32, System.Predicate<T>)
  nameWithType.vb: List(Of T).FindLastIndex(Int32, Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindLastIndex(System.Int32, System.Predicate(Of T))
  name.vb: FindLastIndex(Int32, Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<T>.FindLastIndex
    fullName: System.Collections.Generic.List<T>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of T).FindLastIndex
    fullName: System.Collections.Generic.List(Of T).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  isExternal: true
  name: FindLastIndex(Int32, Int32, Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Int32, Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(System.Int32, System.Int32, System.Predicate<T>)
  nameWithType.vb: List(Of T).FindLastIndex(Int32, Int32, Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindLastIndex(System.Int32, System.Int32, System.Predicate(Of T))
  name.vb: FindLastIndex(Int32, Int32, Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<T>.FindLastIndex
    fullName: System.Collections.Generic.List<T>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of T).FindLastIndex
    fullName: System.Collections.Generic.List(Of T).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
  commentId: M:System.Collections.Generic.List`1.ForEach(System.Action{`0})
  isExternal: true
  name: ForEach(Action<T>)
  nameWithType: List<T>.ForEach(Action<T>)
  fullName: System.Collections.Generic.List<T>.ForEach(System.Action<T>)
  nameWithType.vb: List(Of T).ForEach(Action(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).ForEach(System.Action(Of T))
  name.vb: ForEach(Action(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
    name: ForEach
    nameWithType: List<T>.ForEach
    fullName: System.Collections.Generic.List<T>.ForEach
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
    name: ForEach
    nameWithType: List(Of T).ForEach
    fullName: System.Collections.Generic.List(Of T).ForEach
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.GetEnumerator
  commentId: M:System.Collections.Generic.List`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: List<T>.GetEnumerator()
  fullName: System.Collections.Generic.List<T>.GetEnumerator()
  nameWithType.vb: List(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.GetEnumerator
    name: GetEnumerator
    nameWithType: List<T>.GetEnumerator
    fullName: System.Collections.Generic.List<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.GetEnumerator
    name: GetEnumerator
    nameWithType: List(Of T).GetEnumerator
    fullName: System.Collections.Generic.List(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  commentId: M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  isExternal: true
  name: IEnumerable<T>.GetEnumerator()
  nameWithType: List<T>.IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.List<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: List(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    name: IEnumerable<T>.GetEnumerator
    nameWithType: List<T>.IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.List<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    name: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    nameWithType: List(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.List(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
  isExternal: true
  name: IEnumerable.GetEnumerator()
  nameWithType: List<T>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.List<T>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: List(Of T).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: List<T>.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.List<T>.System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: List(Of T).System.Collections.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.List(Of T).System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  isExternal: true
  name: GetRange(Int32, Int32)
  nameWithType: List<T>.GetRange(Int32, Int32)
  fullName: System.Collections.Generic.List<T>.GetRange(System.Int32, System.Int32)
  nameWithType.vb: List(Of T).GetRange(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).GetRange(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
    name: GetRange
    nameWithType: List<T>.GetRange
    fullName: System.Collections.Generic.List<T>.GetRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
    name: GetRange
    nameWithType: List(Of T).GetRange
    fullName: System.Collections.Generic.List(Of T).GetRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.IndexOf(`0)
  commentId: M:System.Collections.Generic.List`1.IndexOf(`0)
  isExternal: true
  name: IndexOf(T)
  nameWithType: List<T>.IndexOf(T)
  fullName: System.Collections.Generic.List<T>.IndexOf(T)
  nameWithType.vb: List(Of T).IndexOf(T)
  fullName.vb: System.Collections.Generic.List(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0)
    name: IndexOf
    nameWithType: List<T>.IndexOf
    fullName: System.Collections.Generic.List<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0)
    name: IndexOf
    nameWithType: List(Of T).IndexOf
    fullName: System.Collections.Generic.List(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
  isExternal: true
  name: IList.IndexOf(Object)
  nameWithType: List<T>.IList.IndexOf(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.IndexOf(System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.IndexOf(Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.IndexOf(System.Object)
  name.vb: System.Collections.IList.IndexOf(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
    name: IList.IndexOf
    nameWithType: List<T>.IList.IndexOf
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
    name: System.Collections.IList.IndexOf
    nameWithType: List(Of T).System.Collections.IList.IndexOf
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  commentId: M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  isExternal: true
  name: IndexOf(T, Int32)
  nameWithType: List<T>.IndexOf(T, Int32)
  fullName: System.Collections.Generic.List<T>.IndexOf(T, System.Int32)
  nameWithType.vb: List(Of T).IndexOf(T, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).IndexOf(T, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
    name: IndexOf
    nameWithType: List<T>.IndexOf
    fullName: System.Collections.Generic.List<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
    name: IndexOf
    nameWithType: List(Of T).IndexOf
    fullName: System.Collections.Generic.List(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  isExternal: true
  name: IndexOf(T, Int32, Int32)
  nameWithType: List<T>.IndexOf(T, Int32, Int32)
  fullName: System.Collections.Generic.List<T>.IndexOf(T, System.Int32, System.Int32)
  nameWithType.vb: List(Of T).IndexOf(T, Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).IndexOf(T, System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
    name: IndexOf
    nameWithType: List<T>.IndexOf
    fullName: System.Collections.Generic.List<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
    name: IndexOf
    nameWithType: List(Of T).IndexOf
    fullName: System.Collections.Generic.List(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
  commentId: M:System.Collections.Generic.List`1.Insert(System.Int32,`0)
  isExternal: true
  name: Insert(Int32, T)
  nameWithType: List<T>.Insert(Int32, T)
  fullName: System.Collections.Generic.List<T>.Insert(System.Int32, T)
  nameWithType.vb: List(Of T).Insert(Int32, T)
  fullName.vb: System.Collections.Generic.List(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: List<T>.Insert
    fullName: System.Collections.Generic.List<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: List(Of T).Insert
    fullName: System.Collections.Generic.List(Of T).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
  isExternal: true
  name: IList.Insert(Int32, Object)
  nameWithType: List<T>.IList.Insert(Int32, Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Insert(System.Int32, System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.Insert(Int32, Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Insert(System.Int32, System.Object)
  name.vb: System.Collections.IList.Insert(Int32, Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: IList.Insert
    nameWithType: List<T>.IList.Insert
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: System.Collections.IList.Insert
    nameWithType: List(Of T).System.Collections.IList.Insert
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: InsertRange(Int32, IEnumerable<T>)
  nameWithType: List<T>.InsertRange(Int32, IEnumerable<T>)
  fullName: System.Collections.Generic.List<T>.InsertRange(System.Int32, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: List(Of T).InsertRange(Int32, IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).InsertRange(System.Int32, System.Collections.Generic.IEnumerable(Of T))
  name.vb: InsertRange(Int32, IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    name: InsertRange
    nameWithType: List<T>.InsertRange
    fullName: System.Collections.Generic.List<T>.InsertRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    name: InsertRange
    nameWithType: List(Of T).InsertRange
    fullName: System.Collections.Generic.List(Of T).InsertRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.LastIndexOf(`0)
  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0)
  isExternal: true
  name: LastIndexOf(T)
  nameWithType: List<T>.LastIndexOf(T)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T)
  nameWithType.vb: List(Of T).LastIndexOf(T)
  fullName.vb: System.Collections.Generic.List(Of T).LastIndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0)
    name: LastIndexOf
    nameWithType: List<T>.LastIndexOf
    fullName: System.Collections.Generic.List<T>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0)
    name: LastIndexOf
    nameWithType: List(Of T).LastIndexOf
    fullName: System.Collections.Generic.List(Of T).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  isExternal: true
  name: LastIndexOf(T, Int32)
  nameWithType: List<T>.LastIndexOf(T, Int32)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T, System.Int32)
  nameWithType.vb: List(Of T).LastIndexOf(T, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).LastIndexOf(T, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
    name: LastIndexOf
    nameWithType: List<T>.LastIndexOf
    fullName: System.Collections.Generic.List<T>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
    name: LastIndexOf
    nameWithType: List(Of T).LastIndexOf
    fullName: System.Collections.Generic.List(Of T).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  isExternal: true
  name: LastIndexOf(T, Int32, Int32)
  nameWithType: List<T>.LastIndexOf(T, Int32, Int32)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T, System.Int32, System.Int32)
  nameWithType.vb: List(Of T).LastIndexOf(T, Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).LastIndexOf(T, System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
    name: LastIndexOf
    nameWithType: List<T>.LastIndexOf
    fullName: System.Collections.Generic.List<T>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
    name: LastIndexOf
    nameWithType: List(Of T).LastIndexOf
    fullName: System.Collections.Generic.List(Of T).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Remove(`0)
  commentId: M:System.Collections.Generic.List`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: List<T>.Remove(T)
  fullName: System.Collections.Generic.List<T>.Remove(T)
  nameWithType.vb: List(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.List(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Remove(`0)
    name: Remove
    nameWithType: List<T>.Remove
    fullName: System.Collections.Generic.List<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Remove(`0)
    name: Remove
    nameWithType: List(Of T).Remove
    fullName: System.Collections.Generic.List(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
  isExternal: true
  name: IList.Remove(Object)
  nameWithType: List<T>.IList.Remove(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Remove(System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.Remove(Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Remove(System.Object)
  name.vb: System.Collections.IList.Remove(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
    name: IList.Remove
    nameWithType: List<T>.IList.Remove
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
    name: System.Collections.IList.Remove
    nameWithType: List(Of T).System.Collections.IList.Remove
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
  isExternal: true
  name: RemoveAll(Predicate<T>)
  nameWithType: List<T>.RemoveAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.RemoveAll(System.Predicate<T>)
  nameWithType.vb: List(Of T).RemoveAll(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).RemoveAll(System.Predicate(Of T))
  name.vb: RemoveAll(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
    name: RemoveAll
    nameWithType: List<T>.RemoveAll
    fullName: System.Collections.Generic.List<T>.RemoveAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
    name: RemoveAll
    nameWithType: List(Of T).RemoveAll
    fullName: System.Collections.Generic.List(Of T).RemoveAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.List`1.RemoveAt(System.Int32)
  isExternal: true
  name: RemoveAt(Int32)
  nameWithType: List<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.List<T>.RemoveAt(System.Int32)
  nameWithType.vb: List(Of T).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.List(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: List<T>.RemoveAt
    fullName: System.Collections.Generic.List<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: List(Of T).RemoveAt
    fullName: System.Collections.Generic.List(Of T).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  isExternal: true
  name: RemoveRange(Int32, Int32)
  nameWithType: List<T>.RemoveRange(Int32, Int32)
  fullName: System.Collections.Generic.List<T>.RemoveRange(System.Int32, System.Int32)
  nameWithType.vb: List(Of T).RemoveRange(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).RemoveRange(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    name: RemoveRange
    nameWithType: List<T>.RemoveRange
    fullName: System.Collections.Generic.List<T>.RemoveRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    name: RemoveRange
    nameWithType: List(Of T).RemoveRange
    fullName: System.Collections.Generic.List(Of T).RemoveRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Reverse
  commentId: M:System.Collections.Generic.List`1.Reverse
  isExternal: true
  name: Reverse()
  nameWithType: List<T>.Reverse()
  fullName: System.Collections.Generic.List<T>.Reverse()
  nameWithType.vb: List(Of T).Reverse()
  fullName.vb: System.Collections.Generic.List(Of T).Reverse()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Reverse
    name: Reverse
    nameWithType: List<T>.Reverse
    fullName: System.Collections.Generic.List<T>.Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Reverse
    name: Reverse
    nameWithType: List(Of T).Reverse
    fullName: System.Collections.Generic.List(Of T).Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  isExternal: true
  name: Reverse(Int32, Int32)
  nameWithType: List<T>.Reverse(Int32, Int32)
  fullName: System.Collections.Generic.List<T>.Reverse(System.Int32, System.Int32)
  nameWithType.vb: List(Of T).Reverse(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).Reverse(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
    name: Reverse
    nameWithType: List<T>.Reverse
    fullName: System.Collections.Generic.List<T>.Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
    name: Reverse
    nameWithType: List(Of T).Reverse
    fullName: System.Collections.Generic.List(Of T).Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Sort
  commentId: M:System.Collections.Generic.List`1.Sort
  isExternal: true
  name: Sort()
  nameWithType: List<T>.Sort()
  fullName: System.Collections.Generic.List<T>.Sort()
  nameWithType.vb: List(Of T).Sort()
  fullName.vb: System.Collections.Generic.List(Of T).Sort()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort
    name: Sort
    nameWithType: List<T>.Sort
    fullName: System.Collections.Generic.List<T>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort
    name: Sort
    nameWithType: List(Of T).Sort
    fullName: System.Collections.Generic.List(Of T).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
  isExternal: true
  name: Sort(IComparer<T>)
  nameWithType: List<T>.Sort(IComparer<T>)
  fullName: System.Collections.Generic.List<T>.Sort(System.Collections.Generic.IComparer<T>)
  nameWithType.vb: List(Of T).Sort(IComparer(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Sort(System.Collections.Generic.IComparer(Of T))
  name.vb: Sort(IComparer(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List<T>.Sort
    fullName: System.Collections.Generic.List<T>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List(Of T).Sort
    fullName: System.Collections.Generic.List(Of T).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  isExternal: true
  name: Sort(Int32, Int32, IComparer<T>)
  nameWithType: List<T>.Sort(Int32, Int32, IComparer<T>)
  fullName: System.Collections.Generic.List<T>.Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer<T>)
  nameWithType.vb: List(Of T).Sort(Int32, Int32, IComparer(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer(Of T))
  name.vb: Sort(Int32, Int32, IComparer(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List<T>.Sort
    fullName: System.Collections.Generic.List<T>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List(Of T).Sort
    fullName: System.Collections.Generic.List(Of T).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
  commentId: M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})
  isExternal: true
  name: Sort(Comparison<T>)
  nameWithType: List<T>.Sort(Comparison<T>)
  fullName: System.Collections.Generic.List<T>.Sort(System.Comparison<T>)
  nameWithType.vb: List(Of T).Sort(Comparison(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Sort(System.Comparison(Of T))
  name.vb: Sort(Comparison(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
    name: Sort
    nameWithType: List<T>.Sort
    fullName: System.Collections.Generic.List<T>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
    name: Sort
    nameWithType: List(Of T).Sort
    fullName: System.Collections.Generic.List(Of T).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.ToArray
  commentId: M:System.Collections.Generic.List`1.ToArray
  isExternal: true
  name: ToArray()
  nameWithType: List<T>.ToArray()
  fullName: System.Collections.Generic.List<T>.ToArray()
  nameWithType.vb: List(Of T).ToArray()
  fullName.vb: System.Collections.Generic.List(Of T).ToArray()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ToArray
    name: ToArray
    nameWithType: List<T>.ToArray
    fullName: System.Collections.Generic.List<T>.ToArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ToArray
    name: ToArray
    nameWithType: List(Of T).ToArray
    fullName: System.Collections.Generic.List(Of T).ToArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.TrimExcess
  commentId: M:System.Collections.Generic.List`1.TrimExcess
  isExternal: true
  name: TrimExcess()
  nameWithType: List<T>.TrimExcess()
  fullName: System.Collections.Generic.List<T>.TrimExcess()
  nameWithType.vb: List(Of T).TrimExcess()
  fullName.vb: System.Collections.Generic.List(Of T).TrimExcess()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.TrimExcess
    name: TrimExcess
    nameWithType: List<T>.TrimExcess
    fullName: System.Collections.Generic.List<T>.TrimExcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.TrimExcess
    name: TrimExcess
    nameWithType: List(Of T).TrimExcess
    fullName: System.Collections.Generic.List(Of T).TrimExcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  isExternal: true
  name: TrueForAll(Predicate<T>)
  nameWithType: List<T>.TrueForAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.TrueForAll(System.Predicate<T>)
  nameWithType.vb: List(Of T).TrueForAll(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).TrueForAll(System.Predicate(Of T))
  name.vb: TrueForAll(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    name: TrueForAll
    nameWithType: List<T>.TrueForAll
    fullName: System.Collections.Generic.List<T>.TrueForAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    name: TrueForAll
    nameWithType: List(Of T).TrueForAll
    fullName: System.Collections.Generic.List(Of T).TrueForAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Capacity
  commentId: P:System.Collections.Generic.List`1.Capacity
  isExternal: true
  name: Capacity
  nameWithType: List<T>.Capacity
  fullName: System.Collections.Generic.List<T>.Capacity
  nameWithType.vb: List(Of T).Capacity
  fullName.vb: System.Collections.Generic.List(Of T).Capacity
- uid: System.Collections.Generic.List`1.Count
  commentId: P:System.Collections.Generic.List`1.Count
  isExternal: true
  name: Count
  nameWithType: List<T>.Count
  fullName: System.Collections.Generic.List<T>.Count
  nameWithType.vb: List(Of T).Count
  fullName.vb: System.Collections.Generic.List(Of T).Count
- uid: System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize
  commentId: P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize
  isExternal: true
  name: IList.IsFixedSize
  nameWithType: List<T>.IList.IsFixedSize
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.IsFixedSize
  nameWithType.vb: List(Of T).System.Collections.IList.IsFixedSize
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.IsFixedSize
  name.vb: System.Collections.IList.IsFixedSize
- uid: System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  commentId: P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  isExternal: true
  name: ICollection<T>.IsReadOnly
  nameWithType: List<T>.ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.List<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: List(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly
  commentId: P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly
  isExternal: true
  name: IList.IsReadOnly
  nameWithType: List<T>.IList.IsReadOnly
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.IsReadOnly
  nameWithType.vb: List(Of T).System.Collections.IList.IsReadOnly
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.IsReadOnly
  name.vb: System.Collections.IList.IsReadOnly
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized
  isExternal: true
  name: ICollection.IsSynchronized
  nameWithType: List<T>.ICollection.IsSynchronized
  fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.IsSynchronized
  nameWithType.vb: List(Of T).System.Collections.ICollection.IsSynchronized
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot
  commentId: P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot
  isExternal: true
  name: ICollection.SyncRoot
  nameWithType: List<T>.ICollection.SyncRoot
  fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.SyncRoot
  nameWithType.vb: List(Of T).System.Collections.ICollection.SyncRoot
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Collections.Generic.List`1.Item(System.Int32)
  commentId: P:System.Collections.Generic.List`1.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: List<T>.Item[Int32]
  fullName: System.Collections.Generic.List<T>.Item[System.Int32]
  nameWithType.vb: List(Of T).Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Item(System.Int32)
    name: Item
    nameWithType: List<T>.Item
    fullName: System.Collections.Generic.List<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.List`1.Item(System.Int32)
    name: Item
    nameWithType: List(Of T).Item
    fullName: System.Collections.Generic.List(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
  commentId: P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
  isExternal: true
  name: IList.Item[Int32]
  nameWithType: List<T>.IList.Item[Int32]
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Item[System.Int32]
  nameWithType.vb: List(Of T).System.Collections.IList.Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Item(System.Int32)
  name.vb: System.Collections.IList.Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
    name: IList.Item
    nameWithType: List<T>.IList.Item
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
    name: System.Collections.IList.Item
    nameWithType: List(Of T).System.Collections.IList.Item
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  isExternal: true
  name: SetProperty(Object, String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object())
  name.vb: SetProperty(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions
  commentId: T:Microsoft.Health.Utility.IDispatchExtensions
  parent: Microsoft.Health.Utility
  isExternal: false
  name: IDispatchExtensions
  nameWithType: IDispatchExtensions
  fullName: Microsoft.Health.Utility.IDispatchExtensions
- uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  isExternal: true
  name: InvokeMethod(Object, String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object())
  name.vb: InvokeMethod(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  isExternal: true
  name: ToStringInvariant(Object)
  nameWithType: InvariantString.ToStringInvariant(Object)
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString
  commentId: T:Microsoft.Health.Utility.InvariantString
  parent: Microsoft.Health.Utility
  isExternal: false
  name: InvariantString
  nameWithType: InvariantString
  fullName: Microsoft.Health.Utility.InvariantString
- uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  isExternal: false
  name: ValueOrDbNull<T>(T)
  nameWithType: TypeHelper.ValueOrDbNull<T>(T)
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>(T)
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of T)(T)
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)(T)
  name.vb: ValueOrDbNull(Of T)(T)
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull<T>
    nameWithType: TypeHelper.ValueOrDbNull<T>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull(Of T)
    nameWithType: TypeHelper.ValueOrDbNull(Of T)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.TypeHelper
  commentId: T:Microsoft.Health.Utility.TypeHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: TypeHelper
  nameWithType: TypeHelper
  fullName: Microsoft.Health.Utility.TypeHelper
- uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  isExternal: true
  name: ToXml(Object)
  nameWithType: WCXmlHelper.ToXml(Object)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.WCXmlHelper
  commentId: T:Microsoft.Health.Utility.WCXmlHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: WCXmlHelper
  nameWithType: WCXmlHelper
  fullName: Microsoft.Health.Utility.WCXmlHelper
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.#ctor*
  commentId: Overload:Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.#ctor
  isExternal: false
  name: AnalyzerMatchList
  nameWithType: AnalyzerMatchList.AnalyzerMatchList
  fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.AnalyzerMatchList
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.GroupedByType*
  commentId: Overload:Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.GroupedByType
  isExternal: false
  name: GroupedByType
  nameWithType: AnalyzerMatchList.GroupedByType
  fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.GroupedByType
- uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchGroup
  commentId: T:Microsoft.Health.PhraseAnalyzer.AnalyzerMatchGroup
  parent: Microsoft.Health.PhraseAnalyzer
  isExternal: false
  name: AnalyzerMatchGroup
  nameWithType: AnalyzerMatchGroup
  fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchGroup
- uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.GroupByName*
  commentId: Overload:Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.GroupByName
  isExternal: false
  name: GroupByName
  nameWithType: AnalyzerMatchList.GroupByName
  fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.GroupByName
- uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.LongestMatches*
  commentId: Overload:Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.LongestMatches
  isExternal: false
  name: LongestMatches
  nameWithType: AnalyzerMatchList.LongestMatches
  fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.LongestMatches
- uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList
  commentId: T:Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList
  parent: Microsoft.Health.PhraseAnalyzer
  isExternal: false
  name: AnalyzerMatchList
  nameWithType: AnalyzerMatchList
  fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList
- uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.IndexOfExpressionName*
  commentId: Overload:Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.IndexOfExpressionName
  isExternal: false
  name: IndexOfExpressionName
  nameWithType: AnalyzerMatchList.IndexOfExpressionName
  fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.IndexOfExpressionName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.IndexOfExpressionType*
  commentId: Overload:Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.IndexOfExpressionType
  isExternal: false
  name: IndexOfExpressionType
  nameWithType: AnalyzerMatchList.IndexOfExpressionType
  fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.IndexOfExpressionType
- uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.IndexOfExpression*
  commentId: Overload:Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.IndexOfExpression
  isExternal: false
  name: IndexOfExpression
  nameWithType: AnalyzerMatchList.IndexOfExpression
  fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.IndexOfExpression
- uid: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.IndexOfValue*
  commentId: Overload:Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.IndexOfValue
  isExternal: false
  name: IndexOfValue
  nameWithType: AnalyzerMatchList.IndexOfValue
  fullName: Microsoft.Health.PhraseAnalyzer.AnalyzerMatchList.IndexOfValue
