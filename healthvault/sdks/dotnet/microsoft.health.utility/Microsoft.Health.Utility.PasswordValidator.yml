### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.Utility.PasswordValidator
  commentId: T:Microsoft.Health.Utility.PasswordValidator
  id: PasswordValidator
  parent: Microsoft.Health.Utility
  children:
  - Microsoft.Health.Utility.PasswordValidator.GenerateStrongPassword
  - Microsoft.Health.Utility.PasswordValidator.IsStrongPassword(System.String)
  - Microsoft.Health.Utility.PasswordValidator.PasswordExpression
  langs:
  - csharp
  - vb
  name: PasswordValidator
  nameWithType: PasswordValidator
  fullName: Microsoft.Health.Utility.PasswordValidator
  type: Class
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/PasswordValidator.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: PasswordValidator
    path: utilities/PasswordValidator.cs
    startLine: 19
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nEnsures that the specified password meets the complexity requirements\ndefined in the \"passwordValidationExp\" app setting in the web.config\nfile.\n"
  example: []
  syntax:
    content: public static class PasswordValidator
    content.vb: Public Module PasswordValidator
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Health.Utility.PasswordValidator.IsStrongPassword(System.String)
  commentId: M:Microsoft.Health.Utility.PasswordValidator.IsStrongPassword(System.String)
  id: IsStrongPassword(System.String)
  parent: Microsoft.Health.Utility.PasswordValidator
  langs:
  - csharp
  - vb
  name: IsStrongPassword(String)
  nameWithType: PasswordValidator.IsStrongPassword(String)
  fullName: Microsoft.Health.Utility.PasswordValidator.IsStrongPassword(System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/PasswordValidator.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IsStrongPassword
    path: utilities/PasswordValidator.cs
    startLine: 36
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nDetermines if the specified password meets the password complexity\nrequirements defined in the \"passwordValidationExp\" app setting in\nthe web.config file.\n"
  example: []
  syntax:
    content: public static bool IsStrongPassword(string password)
    content.vb: Public Shared Function IsStrongPassword(password As String) As Boolean
    parameters:
    - id: password
      type: System.String
      description: "\nThe candidate password.\n"
    return:
      type: System.Boolean
      description: "\nTrue if the password meets the compexity requirements or false \notherwise.\n"
  overload: Microsoft.Health.Utility.PasswordValidator.IsStrongPassword*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Utility.PasswordValidator.PasswordExpression
  commentId: P:Microsoft.Health.Utility.PasswordValidator.PasswordExpression
  id: PasswordExpression
  parent: Microsoft.Health.Utility.PasswordValidator
  langs:
  - csharp
  - vb
  name: PasswordExpression
  nameWithType: PasswordValidator.PasswordExpression
  fullName: Microsoft.Health.Utility.PasswordValidator.PasswordExpression
  type: Property
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/PasswordValidator.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: PasswordExpression
    path: utilities/PasswordValidator.cs
    startLine: 47
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nRegular expression for password validation.\n"
  remarks: "\nSet by Microsoft.Health.Caching.Config.\n"
  example: []
  syntax:
    content: public static Regex PasswordExpression { set; }
    content.vb: Public Shared WriteOnly Property PasswordExpression As Regex
    parameters: []
    return:
      type: System.Text.RegularExpressions.Regex
  overload: Microsoft.Health.Utility.PasswordValidator.PasswordExpression*
  modifiers.csharp:
  - public
  - static
  - set
  modifiers.vb:
  - Public
  - Shared
  - WriteOnly
- uid: Microsoft.Health.Utility.PasswordValidator.GenerateStrongPassword
  commentId: M:Microsoft.Health.Utility.PasswordValidator.GenerateStrongPassword
  id: GenerateStrongPassword
  parent: Microsoft.Health.Utility.PasswordValidator
  langs:
  - csharp
  - vb
  name: GenerateStrongPassword()
  nameWithType: PasswordValidator.GenerateStrongPassword()
  fullName: Microsoft.Health.Utility.PasswordValidator.GenerateStrongPassword()
  type: Method
  source:
    remote:
      path: Microsoft.Health.Utility/utilities/PasswordValidator.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GenerateStrongPassword
    path: utilities/PasswordValidator.cs
    startLine: 67
  assemblies:
  - Microsoft.Health.Utility
  namespace: Microsoft.Health.Utility
  summary: "\nGenerates a random password that meets the complexity requirements\ndefined in the web.config file.\n"
  example: []
  syntax:
    content: public static string GenerateStrongPassword()
    content.vb: Public Shared Function GenerateStrongPassword As String
    return:
      type: System.String
      description: "\nA random password that meets the complexity requirements.\n"
  overload: Microsoft.Health.Utility.PasswordValidator.GenerateStrongPassword*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Utility.PasswordValidator.IsStrongPassword*
  commentId: Overload:Microsoft.Health.Utility.PasswordValidator.IsStrongPassword
  isExternal: false
  name: IsStrongPassword
  nameWithType: PasswordValidator.IsStrongPassword
  fullName: Microsoft.Health.Utility.PasswordValidator.IsStrongPassword
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Health.Utility.PasswordValidator.PasswordExpression*
  commentId: Overload:Microsoft.Health.Utility.PasswordValidator.PasswordExpression
  isExternal: false
  name: PasswordExpression
  nameWithType: PasswordValidator.PasswordExpression
  fullName: Microsoft.Health.Utility.PasswordValidator.PasswordExpression
- uid: System.Text.RegularExpressions.Regex
  commentId: T:System.Text.RegularExpressions.Regex
  parent: System.Text.RegularExpressions
  isExternal: true
  name: Regex
  nameWithType: Regex
  fullName: System.Text.RegularExpressions.Regex
- uid: System.Text.RegularExpressions
  commentId: N:System.Text.RegularExpressions
  isExternal: false
  name: System.Text.RegularExpressions
  nameWithType: System.Text.RegularExpressions
  fullName: System.Text.RegularExpressions
- uid: Microsoft.Health.Utility.PasswordValidator.GenerateStrongPassword*
  commentId: Overload:Microsoft.Health.Utility.PasswordValidator.GenerateStrongPassword
  isExternal: false
  name: GenerateStrongPassword
  nameWithType: PasswordValidator.GenerateStrongPassword
  fullName: Microsoft.Health.Utility.PasswordValidator.GenerateStrongPassword
