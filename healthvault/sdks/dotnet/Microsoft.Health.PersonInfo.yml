### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.PersonInfo
  commentId: T:Microsoft.Health.PersonInfo
  id: PersonInfo
  parent: Microsoft.Health
  children:
  - Microsoft.Health.PersonInfo.#ctor
  - Microsoft.Health.PersonInfo.ApplicationConnection
  - Microsoft.Health.PersonInfo.ApplicationSettings
  - Microsoft.Health.PersonInfo.ApplicationSettingsChanged
  - Microsoft.Health.PersonInfo.ApplicationSettingsDocument
  - Microsoft.Health.PersonInfo.AuthorizedRecords
  - Microsoft.Health.PersonInfo.Connection
  - Microsoft.Health.PersonInfo.CreateFromXml(Microsoft.Health.ApplicationConnection,System.Xml.XPath.XPathNavigator)
  - Microsoft.Health.PersonInfo.GetFromAlternateId(Microsoft.Health.ApplicationConnection,System.String)
  - Microsoft.Health.PersonInfo.GetSelfRecord
  - Microsoft.Health.PersonInfo.GetXml
  - Microsoft.Health.PersonInfo.Location
  - Microsoft.Health.PersonInfo.Marshal(System.Xml.XmlWriter)
  - Microsoft.Health.PersonInfo.Name
  - Microsoft.Health.PersonInfo.PersonId
  - Microsoft.Health.PersonInfo.PreferredCulture
  - Microsoft.Health.PersonInfo.PreferredUICulture
  - Microsoft.Health.PersonInfo.SelectedRecord
  - Microsoft.Health.PersonInfo.SelectedRecordChanged
  - Microsoft.Health.PersonInfo.SetApplicationSettings(System.Xml.XPath.IXPathNavigable)
  - Microsoft.Health.PersonInfo.Unmarshal(System.Xml.XmlReader)
  langs:
  - csharp
  - vb
  name: PersonInfo
  nameWithType: PersonInfo
  fullName: Microsoft.Health.PersonInfo
  type: Class
  source:
    remote:
      path: Microsoft.Health/PersonInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: PersonInfo
    path: ../Microsoft.Health/PersonInfo.cs
    startLine: 19
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nProvides information about a person's HealthVault account.\n"
  example: []
  syntax:
    content: 'public class PersonInfo : IMarshallable'
    content.vb: >-
      Public Class PersonInfo
          Implements IMarshallable
  inheritance:
  - System.Object
  implements:
  - Microsoft.Health.IMarshallable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  - System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - Microsoft.Health.PersonInfo.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  - System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.PersonInfo.CreateFromXml(Microsoft.Health.ApplicationConnection,System.Xml.XPath.XPathNavigator)
  commentId: M:Microsoft.Health.PersonInfo.CreateFromXml(Microsoft.Health.ApplicationConnection,System.Xml.XPath.XPathNavigator)
  id: CreateFromXml(Microsoft.Health.ApplicationConnection,System.Xml.XPath.XPathNavigator)
  parent: Microsoft.Health.PersonInfo
  langs:
  - csharp
  - vb
  name: CreateFromXml(ApplicationConnection, XPathNavigator)
  nameWithType: PersonInfo.CreateFromXml(ApplicationConnection, XPathNavigator)
  fullName: Microsoft.Health.PersonInfo.CreateFromXml(Microsoft.Health.ApplicationConnection, System.Xml.XPath.XPathNavigator)
  type: Method
  source:
    remote:
      path: Microsoft.Health/PersonInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CreateFromXml
    path: ../Microsoft.Health/PersonInfo.cs
    startLine: 50
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nCreates a new instance of the PersonInfo class using\nthe specified XML.\n"
  example: []
  syntax:
    content: public static PersonInfo CreateFromXml(ApplicationConnection connection, XPathNavigator navigator)
    content.vb: Public Shared Function CreateFromXml(connection As ApplicationConnection, navigator As XPathNavigator) As PersonInfo
    parameters:
    - id: connection
      type: Microsoft.Health.ApplicationConnection
      description: "\nAn <xref href=\"Microsoft.Health.PersonInfo.ApplicationConnection\" data-throw-if-not-resolved=\"false\"></xref> for the current user. The \nconnection can be optionally supplied, but it is overwritten if \nthe connection information is in the XML.\n"
    - id: navigator
      type: System.Xml.XPath.XPathNavigator
      description: "\nThe XML containing the person information.\n"
    return:
      type: Microsoft.Health.PersonInfo
      description: "\nA new instance of <xref href=\"Microsoft.Health.PersonInfo\" data-throw-if-not-resolved=\"false\"></xref> populated with the\nperson information.\n"
  overload: Microsoft.Health.PersonInfo.CreateFromXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <span class=\"paramref\">navigator</span> parameter is <strong>null</strong> or \n<span class=\"paramref\">connection</span> is <strong>null</strong> and the XML does not \ncontain the connection information.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.PersonInfo.GetFromAlternateId(Microsoft.Health.ApplicationConnection,System.String)
  commentId: M:Microsoft.Health.PersonInfo.GetFromAlternateId(Microsoft.Health.ApplicationConnection,System.String)
  id: GetFromAlternateId(Microsoft.Health.ApplicationConnection,System.String)
  parent: Microsoft.Health.PersonInfo
  langs:
  - csharp
  - vb
  name: GetFromAlternateId(ApplicationConnection, String)
  nameWithType: PersonInfo.GetFromAlternateId(ApplicationConnection, String)
  fullName: Microsoft.Health.PersonInfo.GetFromAlternateId(Microsoft.Health.ApplicationConnection, System.String)
  type: Method
  source:
    remote:
      path: Microsoft.Health/PersonInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetFromAlternateId
    path: ../Microsoft.Health/PersonInfo.cs
    startLine: 131
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nLook up the person and record that were\npreviously associated with this alternate id.\n"
  remarks: "\nTo obtain the record info only, use <xref href=\"Microsoft.Health.HealthRecordInfo.GetFromAlternateId(Microsoft.Health.ApplicationConnection%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static PersonInfo GetFromAlternateId(ApplicationConnection connection, string alternateId)
    content.vb: Public Shared Function GetFromAlternateId(connection As ApplicationConnection, alternateId As String) As PersonInfo
    parameters:
    - id: connection
      type: Microsoft.Health.ApplicationConnection
      description: The application connection to use.
    - id: alternateId
      type: System.String
      description: The alternateId to look up.
    return:
      type: Microsoft.Health.PersonInfo
      description: "\nA new instance of <xref href=\"Microsoft.Health.PersonInfo\" data-throw-if-not-resolved=\"false\"></xref> containing information\nabout the associated person and record.\n"
  overload: Microsoft.Health.PersonInfo.GetFromAlternateId*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe connection, alternateId parameters are null.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe alternateId parameter is empty, all whitespace, or more than 255 characters in length.\n"
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe HealthVault service returned an error. \nIf the alternate Id is not associated with a person and record id, the ErrorCode property\nwill be set to AlternateIdNotFound.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.PersonInfo.#ctor
  commentId: M:Microsoft.Health.PersonInfo.#ctor
  id: '#ctor'
  parent: Microsoft.Health.PersonInfo
  langs:
  - csharp
  - vb
  name: PersonInfo()
  nameWithType: PersonInfo.PersonInfo()
  fullName: Microsoft.Health.PersonInfo.PersonInfo()
  type: Constructor
  source:
    remote:
      path: Microsoft.Health/PersonInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ../Microsoft.Health/PersonInfo.cs
    startLine: 178
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nConstructs an new instance of the <xref href=\"Microsoft.Health.PersonInfo\" data-throw-if-not-resolved=\"false\"></xref> class for testing purposes.\n"
  example: []
  syntax:
    content: protected PersonInfo()
    content.vb: Protected Sub New
  overload: Microsoft.Health.PersonInfo.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.Health.PersonInfo.Unmarshal(System.Xml.XmlReader)
  commentId: M:Microsoft.Health.PersonInfo.Unmarshal(System.Xml.XmlReader)
  id: Unmarshal(System.Xml.XmlReader)
  parent: Microsoft.Health.PersonInfo
  langs:
  - csharp
  - vb
  name: Unmarshal(XmlReader)
  nameWithType: PersonInfo.Unmarshal(XmlReader)
  fullName: Microsoft.Health.PersonInfo.Unmarshal(System.Xml.XmlReader)
  type: Method
  source:
    remote:
      path: Microsoft.Health/PersonInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Unmarshal
    path: ../Microsoft.Health/PersonInfo.cs
    startLine: 385
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nPopulates the data of the class from the XML in\nthe specified reader.\n"
  example: []
  syntax:
    content: public void Unmarshal(XmlReader reader)
    content.vb: Public Sub Unmarshal(reader As XmlReader)
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "\nThe reader to get the data for the class instance\nfrom.\n"
  overload: Microsoft.Health.PersonInfo.Unmarshal*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <span class=\"paramref\">reader</span> is <strong>null</strong>.\n"
  implements:
  - Microsoft.Health.IMarshallable.Unmarshal(System.Xml.XmlReader)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.PersonInfo.GetXml
  commentId: M:Microsoft.Health.PersonInfo.GetXml
  id: GetXml
  parent: Microsoft.Health.PersonInfo
  langs:
  - csharp
  - vb
  name: GetXml()
  nameWithType: PersonInfo.GetXml()
  fullName: Microsoft.Health.PersonInfo.GetXml()
  type: Method
  source:
    remote:
      path: Microsoft.Health/PersonInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetXml
    path: ../Microsoft.Health/PersonInfo.cs
    startLine: 405
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the XML representation of the <xref href=\"Microsoft.Health.PersonInfo\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nThis method can be used to get a serialized version of the \n<xref href=\"Microsoft.Health.PersonInfo\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public string GetXml()
    content.vb: Public Function GetXml As String
    return:
      type: System.String
      description: "\nA XML string containing the person information.\n"
  overload: Microsoft.Health.PersonInfo.GetXml*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.PersonInfo.Marshal(System.Xml.XmlWriter)
  commentId: M:Microsoft.Health.PersonInfo.Marshal(System.Xml.XmlWriter)
  id: Marshal(System.Xml.XmlWriter)
  parent: Microsoft.Health.PersonInfo
  langs:
  - csharp
  - vb
  name: Marshal(XmlWriter)
  nameWithType: PersonInfo.Marshal(XmlWriter)
  fullName: Microsoft.Health.PersonInfo.Marshal(System.Xml.XmlWriter)
  type: Method
  source:
    remote:
      path: Microsoft.Health/PersonInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Marshal
    path: ../Microsoft.Health/PersonInfo.cs
    startLine: 440
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nWrites the person information into the specified writer as XML.\n"
  example: []
  syntax:
    content: public void Marshal(XmlWriter writer)
    content.vb: Public Sub Marshal(writer As XmlWriter)
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "\nThe XMLWriter receiving the XML.\n"
  overload: Microsoft.Health.PersonInfo.Marshal*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <span class=\"paramref\">writer</span> is <strong>null</strong>.\n"
  implements:
  - Microsoft.Health.IMarshallable.Marshal(System.Xml.XmlWriter)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.PersonInfo.PersonId
  commentId: P:Microsoft.Health.PersonInfo.PersonId
  id: PersonId
  parent: Microsoft.Health.PersonInfo
  langs:
  - csharp
  - vb
  name: PersonId
  nameWithType: PersonInfo.PersonId
  fullName: Microsoft.Health.PersonInfo.PersonId
  type: Property
  source:
    remote:
      path: Microsoft.Health/PersonInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: PersonId
    path: ../Microsoft.Health/PersonInfo.cs
    startLine: 617
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets or sets the HealthVault unique identifier for the person.\n"
  remarks: "\n"
  example: []
  syntax:
    content: public Guid PersonId { get; protected set; }
    content.vb: Public Property PersonId As Guid
    parameters: []
    return:
      type: System.Guid
      description: "\nA GUID that is assigned to the account when it was created.\n"
  overload: Microsoft.Health.PersonInfo.PersonId*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Microsoft.Health.PersonInfo.Name
  commentId: P:Microsoft.Health.PersonInfo.Name
  id: Name
  parent: Microsoft.Health.PersonInfo
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: PersonInfo.Name
  fullName: Microsoft.Health.PersonInfo.Name
  type: Property
  source:
    remote:
      path: Microsoft.Health/PersonInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Name
    path: ../Microsoft.Health/PersonInfo.cs
    startLine: 640
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets or sets the person's name.\n"
  remarks: "\nThe person's full name can  be changed only by going to the \nHealthVault Shell.\n"
  example: []
  syntax:
    content: public string Name { get; protected set; }
    content.vb: Public Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\nThe person's full name as it was entered into HealthVault.\n"
  overload: Microsoft.Health.PersonInfo.Name*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Microsoft.Health.PersonInfo.ApplicationSettings
  commentId: P:Microsoft.Health.PersonInfo.ApplicationSettings
  id: ApplicationSettings
  parent: Microsoft.Health.PersonInfo
  langs:
  - csharp
  - vb
  name: ApplicationSettings
  nameWithType: PersonInfo.ApplicationSettings
  fullName: Microsoft.Health.PersonInfo.ApplicationSettings
  type: Property
  source:
    remote:
      path: Microsoft.Health/PersonInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ApplicationSettings
    path: ../Microsoft.Health/PersonInfo.cs
    startLine: 670
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets or sets the application settings for the current application and\nperson.\n"
  remarks: "\nThis can be <strong>null</strong> if no application settings have been stored\nfor the application or user.\n"
  example: []
  syntax:
    content: public IXPathNavigable ApplicationSettings { get; }
    content.vb: Public ReadOnly Property ApplicationSettings As IXPathNavigable
    parameters: []
    return:
      type: System.Xml.XPath.IXPathNavigable
  overload: Microsoft.Health.PersonInfo.ApplicationSettings*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.PersonInfo.ApplicationSettingsDocument
  commentId: P:Microsoft.Health.PersonInfo.ApplicationSettingsDocument
  id: ApplicationSettingsDocument
  parent: Microsoft.Health.PersonInfo
  langs:
  - csharp
  - vb
  name: ApplicationSettingsDocument
  nameWithType: PersonInfo.ApplicationSettingsDocument
  fullName: Microsoft.Health.PersonInfo.ApplicationSettingsDocument
  type: Property
  source:
    remote:
      path: Microsoft.Health/PersonInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ApplicationSettingsDocument
    path: ../Microsoft.Health/PersonInfo.cs
    startLine: 690
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets or sets the underlying application settings document.\n"
  remarks: "\nThis property should only be used for testing. \n"
  example: []
  syntax:
    content: protected XmlDocument ApplicationSettingsDocument { get; set; }
    content.vb: Protected Property ApplicationSettingsDocument As XmlDocument
    parameters: []
    return:
      type: System.Xml.XmlDocument
  overload: Microsoft.Health.PersonInfo.ApplicationSettingsDocument*
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
- uid: Microsoft.Health.PersonInfo.SetApplicationSettings(System.Xml.XPath.IXPathNavigable)
  commentId: M:Microsoft.Health.PersonInfo.SetApplicationSettings(System.Xml.XPath.IXPathNavigable)
  id: SetApplicationSettings(System.Xml.XPath.IXPathNavigable)
  parent: Microsoft.Health.PersonInfo
  langs:
  - csharp
  - vb
  name: SetApplicationSettings(IXPathNavigable)
  nameWithType: PersonInfo.SetApplicationSettings(IXPathNavigable)
  fullName: Microsoft.Health.PersonInfo.SetApplicationSettings(System.Xml.XPath.IXPathNavigable)
  type: Method
  source:
    remote:
      path: Microsoft.Health/PersonInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SetApplicationSettings
    path: ../Microsoft.Health/PersonInfo.cs
    startLine: 715
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nSets the application settings in the web service for this person.\n"
  remarks: "\nThis method makes a network call to the web service.\n<br /><br />\nThe XML provided by <span class=\"paramref\">applicationSettings</span> must\nhave the outer node \"&lt;app-settings&gt;\" or the request will\nfail.\n"
  example: []
  syntax:
    content: public void SetApplicationSettings(IXPathNavigable applicationSettings)
    content.vb: Public Sub SetApplicationSettings(applicationSettings As IXPathNavigable)
    parameters:
    - id: applicationSettings
      type: System.Xml.XPath.IXPathNavigable
      description: "\nThe application specific settings for this person.\n"
  overload: Microsoft.Health.PersonInfo.SetApplicationSettings*
  exceptions:
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nAn error is returned from the server when making the request.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.PersonInfo.ApplicationSettingsChanged
  commentId: E:Microsoft.Health.PersonInfo.ApplicationSettingsChanged
  id: ApplicationSettingsChanged
  parent: Microsoft.Health.PersonInfo
  langs:
  - csharp
  - vb
  name: ApplicationSettingsChanged
  nameWithType: PersonInfo.ApplicationSettingsChanged
  fullName: Microsoft.Health.PersonInfo.ApplicationSettingsChanged
  type: Event
  source:
    remote:
      path: Microsoft.Health/PersonInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ApplicationSettingsChanged
    path: ../Microsoft.Health/PersonInfo.cs
    startLine: 743
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nOccurs when <xref href=\"Microsoft.Health.PersonInfo.SetApplicationSettings(System.Xml.XPath.IXPathNavigable)\" data-throw-if-not-resolved=\"false\"></xref> changes the application settings in\nHealthVault.\n"
  remarks: "\nThis event is not triggered if another instance of the PersonInfo gets updated or\nif the value changes in HealthVault.\nThe sender is the PersonInfo instance that was updated.\nThe event args are empty.\n"
  example: []
  syntax:
    content: public event EventHandler ApplicationSettingsChanged
    content.vb: Public Event ApplicationSettingsChanged As EventHandler
    return:
      type: System.EventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.PersonInfo.SelectedRecord
  commentId: P:Microsoft.Health.PersonInfo.SelectedRecord
  id: SelectedRecord
  parent: Microsoft.Health.PersonInfo
  langs:
  - csharp
  - vb
  name: SelectedRecord
  nameWithType: PersonInfo.SelectedRecord
  fullName: Microsoft.Health.PersonInfo.SelectedRecord
  type: Property
  source:
    remote:
      path: Microsoft.Health/PersonInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SelectedRecord
    path: ../Microsoft.Health/PersonInfo.cs
    startLine: 769
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets or sets the record the person has chosen to use as the default \nrecord for the current application.\n"
  remarks: "\nNote that this property is only applicable to single-record\napplications (SRAs). <br />\nA value of <strong>null</strong> indicates that no record has been selected or that\nthe person does not have sufficient rights to the record to use\nit with the current application.\n<br />\nSetting the selected record through will only change the \nselected record for this instance. Other instances of the \n<xref href=\"Microsoft.Health.PersonInfo\" data-throw-if-not-resolved=\"false\"></xref> for the same person will have the original \nselected record. The user can set their selected record through the \nHealthVault Shell.\n"
  example: []
  syntax:
    content: public HealthRecordInfo SelectedRecord { get; set; }
    content.vb: Public Property SelectedRecord As HealthRecordInfo
    parameters: []
    return:
      type: Microsoft.Health.HealthRecordInfo
      description: "\nA <xref href=\"Microsoft.Health.HealthRecordInfo\" data-throw-if-not-resolved=\"false\"></xref> representing the record the person has\nchosen to use as the default record for the current application.\n"
  overload: Microsoft.Health.PersonInfo.SelectedRecord*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.PersonInfo.SelectedRecordChanged
  commentId: E:Microsoft.Health.PersonInfo.SelectedRecordChanged
  id: SelectedRecordChanged
  parent: Microsoft.Health.PersonInfo
  langs:
  - csharp
  - vb
  name: SelectedRecordChanged
  nameWithType: PersonInfo.SelectedRecordChanged
  fullName: Microsoft.Health.PersonInfo.SelectedRecordChanged
  type: Event
  source:
    remote:
      path: Microsoft.Health/PersonInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SelectedRecordChanged
    path: ../Microsoft.Health/PersonInfo.cs
    startLine: 814
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nOccurs when the <xref href=\"Microsoft.Health.PersonInfo.SelectedRecord\" data-throw-if-not-resolved=\"false\"></xref> setter is called.\n"
  remarks: "\nThis event is not triggered if another instance of the PersonInfo gets updated or\nif the value changes in HealthVault.\nThe sender is the PersonInfo instance that was updated.\nThe event args are empty.\n"
  example: []
  syntax:
    content: public event EventHandler SelectedRecordChanged
    content.vb: Public Event SelectedRecordChanged As EventHandler
    return:
      type: System.EventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.PersonInfo.AuthorizedRecords
  commentId: P:Microsoft.Health.PersonInfo.AuthorizedRecords
  id: AuthorizedRecords
  parent: Microsoft.Health.PersonInfo
  langs:
  - csharp
  - vb
  name: AuthorizedRecords
  nameWithType: PersonInfo.AuthorizedRecords
  fullName: Microsoft.Health.PersonInfo.AuthorizedRecords
  type: Property
  source:
    remote:
      path: Microsoft.Health/PersonInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: AuthorizedRecords
    path: ../Microsoft.Health/PersonInfo.cs
    startLine: 838
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets or sets the authorized record for the person.\n"
  remarks: "\nA person can access their own health record, \nhealth records that they have created for other people, or \nhealth records that other people have shared with them. The\ncontents of this collection will be all the health records, \nincluding those that have been deleted or suspended. A person can\ninteract only with active records.\n<br /><br />\nShortcuts are provided to get access to the person's own\nhealth record using <xref href=\"Microsoft.Health.PersonInfo.GetSelfRecord\" data-throw-if-not-resolved=\"false\"></xref> and specific records\nusing <xref href=\"Microsoft.Health.ApplicationConnection.GetAuthorizedRecords(System.Collections.Generic.IList%7bSystem.Guid%7d)\" data-throw-if-not-resolved=\"false\"></xref> by\nID.\n"
  example: []
  syntax:
    content: public Dictionary<Guid, HealthRecordInfo> AuthorizedRecords { get; protected set; }
    content.vb: Public Property AuthorizedRecords As Dictionary(Of Guid, HealthRecordInfo)
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.Guid,Microsoft.Health.HealthRecordInfo}
      description: "\nThe records that the person is authorized to access.\n"
  overload: Microsoft.Health.PersonInfo.AuthorizedRecords*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Microsoft.Health.PersonInfo.PreferredCulture
  commentId: P:Microsoft.Health.PersonInfo.PreferredCulture
  id: PreferredCulture
  parent: Microsoft.Health.PersonInfo
  langs:
  - csharp
  - vb
  name: PreferredCulture
  nameWithType: PersonInfo.PreferredCulture
  fullName: Microsoft.Health.PersonInfo.PreferredCulture
  type: Property
  source:
    remote:
      path: Microsoft.Health/PersonInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: PreferredCulture
    path: ../Microsoft.Health/PersonInfo.cs
    startLine: 861
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets or sets the user's preferred culture.\n"
  remarks: "\nThe preferred culture should be used when formatting date/time, numbers, collating, etc.\n"
  example: []
  syntax:
    content: public string PreferredCulture { get; protected set; }
    content.vb: Public Property PreferredCulture As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Health.PersonInfo.PreferredCulture*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Microsoft.Health.PersonInfo.PreferredUICulture
  commentId: P:Microsoft.Health.PersonInfo.PreferredUICulture
  id: PreferredUICulture
  parent: Microsoft.Health.PersonInfo
  langs:
  - csharp
  - vb
  name: PreferredUICulture
  nameWithType: PersonInfo.PreferredUICulture
  fullName: Microsoft.Health.PersonInfo.PreferredUICulture
  type: Property
  source:
    remote:
      path: Microsoft.Health/PersonInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: PreferredUICulture
    path: ../Microsoft.Health/PersonInfo.cs
    startLine: 877
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets or sets the user's preferred UI culture.\n"
  remarks: "\nThe preferred UI culture should be used when retrieving text from resources for display\nto the user.\n"
  example: []
  syntax:
    content: public string PreferredUICulture { get; protected set; }
    content.vb: Public Property PreferredUICulture As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Health.PersonInfo.PreferredUICulture*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Microsoft.Health.PersonInfo.Location
  commentId: P:Microsoft.Health.PersonInfo.Location
  id: Location
  parent: Microsoft.Health.PersonInfo
  langs:
  - csharp
  - vb
  name: Location
  nameWithType: PersonInfo.Location
  fullName: Microsoft.Health.PersonInfo.Location
  type: Property
  source:
    remote:
      path: Microsoft.Health/PersonInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Location
    path: ../Microsoft.Health/PersonInfo.cs
    startLine: 888
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the location of the user account.\n"
  example: []
  syntax:
    content: public Location Location { get; }
    content.vb: Public ReadOnly Property Location As Location
    parameters: []
    return:
      type: Microsoft.Health.Location
  overload: Microsoft.Health.PersonInfo.Location*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.PersonInfo.Connection
  commentId: P:Microsoft.Health.PersonInfo.Connection
  id: Connection
  parent: Microsoft.Health.PersonInfo
  langs:
  - csharp
  - vb
  name: Connection
  nameWithType: PersonInfo.Connection
  fullName: Microsoft.Health.PersonInfo.Connection
  type: Property
  source:
    remote:
      path: Microsoft.Health/PersonInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Connection
    path: ../Microsoft.Health/PersonInfo.cs
    startLine: 904
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets a reference to the HealthVault service that\ncreated this <xref href=\"Microsoft.Health.PersonInfo\" data-throw-if-not-resolved=\"false\"></xref> or null if the connection used was an\n<xref href=\"Microsoft.Health.Web.OfflineWebApplicationConnection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nThis may return null if the <xref href=\"Microsoft.Health.PersonInfo\" data-throw-if-not-resolved=\"false\"></xref> was retrieved using an\n<xref href=\"Microsoft.Health.ApplicationConnection\" data-throw-if-not-resolved=\"false\"></xref>.\nIt is preferred that <xref href=\"Microsoft.Health.PersonInfo.ApplicationConnection\" data-throw-if-not-resolved=\"false\"></xref> is used instead.\n"
  example: []
  syntax:
    content: public AuthenticatedConnection Connection { get; }
    content.vb: Public ReadOnly Property Connection As AuthenticatedConnection
    parameters: []
    return:
      type: Microsoft.Health.AuthenticatedConnection
  overload: Microsoft.Health.PersonInfo.Connection*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.PersonInfo.ApplicationConnection
  commentId: P:Microsoft.Health.PersonInfo.ApplicationConnection
  id: ApplicationConnection
  parent: Microsoft.Health.PersonInfo
  langs:
  - csharp
  - vb
  name: ApplicationConnection
  nameWithType: PersonInfo.ApplicationConnection
  fullName: Microsoft.Health.PersonInfo.ApplicationConnection
  type: Property
  source:
    remote:
      path: Microsoft.Health/PersonInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ApplicationConnection
    path: ../Microsoft.Health/PersonInfo.cs
    startLine: 915
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets a reference to the HealthVault connection instance that was used to create this\n<xref href=\"Microsoft.Health.PersonInfo\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ApplicationConnection ApplicationConnection { get; }
    content.vb: Public ReadOnly Property ApplicationConnection As ApplicationConnection
    parameters: []
    return:
      type: Microsoft.Health.ApplicationConnection
  overload: Microsoft.Health.PersonInfo.ApplicationConnection*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.PersonInfo.GetSelfRecord
  commentId: M:Microsoft.Health.PersonInfo.GetSelfRecord
  id: GetSelfRecord
  parent: Microsoft.Health.PersonInfo
  langs:
  - csharp
  - vb
  name: GetSelfRecord()
  nameWithType: PersonInfo.GetSelfRecord()
  fullName: Microsoft.Health.PersonInfo.GetSelfRecord()
  type: Method
  source:
    remote:
      path: Microsoft.Health/PersonInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetSelfRecord
    path: ../Microsoft.Health/PersonInfo.cs
    startLine: 946
  assemblies:
  - Microsoft.Health
  namespace: Microsoft.Health
  summary: "\nGets the <xref href=\"Microsoft.Health.HealthRecordInfo\" data-throw-if-not-resolved=\"false\"></xref> for the first health record \nthat has a relationship of <xref href=\"Microsoft.Health.RelationshipType.Self\" data-throw-if-not-resolved=\"false\"></xref> with the \nperson.\n"
  remarks: "\nSince a person may have more than one or no \n<xref href=\"Microsoft.Health.RelationshipType.Self\" data-throw-if-not-resolved=\"false\"></xref> records, this method returns an \nerror if the person does not have a self record, but it returns \nthe first self record if they have multiple records. There is no \nguarantee that the first record will always be the same one.\n"
  example: []
  syntax:
    content: public HealthRecordInfo GetSelfRecord()
    content.vb: Public Function GetSelfRecord As HealthRecordInfo
    return:
      type: Microsoft.Health.HealthRecordInfo
      description: "\nThe first <xref href=\"Microsoft.Health.HealthRecordInfo\" data-throw-if-not-resolved=\"false\"></xref> having the \n<xref href=\"Microsoft.Health.RelationshipType.Self\" data-throw-if-not-resolved=\"false\"></xref> relationship with the person.\n"
  overload: Microsoft.Health.PersonInfo.GetSelfRecord*
  exceptions:
  - type: Microsoft.Health.HealthServiceException
    commentId: T:Microsoft.Health.HealthServiceException
    description: "\nThe person does not have an authorized record with the \n<xref href=\"Microsoft.Health.RelationshipType.Self\" data-throw-if-not-resolved=\"false\"></xref> relationship that is in the\nActive state with the authorization expiration\ndate anytime in the future.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Health.IMarshallable
  commentId: T:Microsoft.Health.IMarshallable
  parent: Microsoft.Health
  isExternal: false
  name: IMarshallable
  nameWithType: IMarshallable
  fullName: Microsoft.Health.IMarshallable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  name: SetProperty(String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String, System.Object())
  name.vb: SetProperty(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  parent: Microsoft.Health.Utility.IDispatchExtensions
  definition: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  name: InvokeMethod(String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String, System.Object())
  name.vb: InvokeMethod(String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.InvariantString.ToStringInvariant
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  parent: Microsoft.Health.Utility.InvariantString
  definition: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  name: ToStringInvariant()
  nameWithType: InvariantString.ToStringInvariant()
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant()
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PersonInfo.Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  parent: Microsoft.Health.Utility.TypeHelper
  definition: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  name: ValueOrDbNull<PersonInfo>()
  nameWithType: TypeHelper.ValueOrDbNull<PersonInfo>()
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.PersonInfo>()
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of PersonInfo)()
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.PersonInfo)()
  name.vb: ValueOrDbNull(Of PersonInfo)()
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull<PersonInfo>
    nameWithType: TypeHelper.ValueOrDbNull<PersonInfo>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<Microsoft.Health.PersonInfo>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1
    name: ValueOrDbNull(Of PersonInfo)
    nameWithType: TypeHelper.ValueOrDbNull(Of PersonInfo)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of Microsoft.Health.PersonInfo)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Health.Utility.WCXmlHelper.ToXml
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  parent: Microsoft.Health.Utility.WCXmlHelper
  definition: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  name: ToXml()
  nameWithType: WCXmlHelper.ToXml()
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml()
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
  isExternal: true
  name: SetProperty(Object, String, Object[])
  nameWithType: IDispatchExtensions.SetProperty(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.SetProperty(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object, System.String, System.Object())
  name.vb: SetProperty(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.SetProperty(System.Object,System.String,System.Object[])
    name: SetProperty
    nameWithType: IDispatchExtensions.SetProperty
    fullName: Microsoft.Health.Utility.IDispatchExtensions.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.IDispatchExtensions
  commentId: T:Microsoft.Health.Utility.IDispatchExtensions
  parent: Microsoft.Health.Utility
  isExternal: false
  name: IDispatchExtensions
  nameWithType: IDispatchExtensions
  fullName: Microsoft.Health.Utility.IDispatchExtensions
- uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  commentId: M:Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
  isExternal: true
  name: InvokeMethod(Object, String, Object[])
  nameWithType: IDispatchExtensions.InvokeMethod(Object, String, Object[])
  fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object[])
  nameWithType.vb: IDispatchExtensions.InvokeMethod(Object, String, Object())
  fullName.vb: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object, System.String, System.Object())
  name.vb: InvokeMethod(Object, String, Object())
  spec.csharp:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod(System.Object,System.String,System.Object[])
    name: InvokeMethod
    nameWithType: IDispatchExtensions.InvokeMethod
    fullName: Microsoft.Health.Utility.IDispatchExtensions.InvokeMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  commentId: M:Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  isExternal: true
  name: ToStringInvariant(Object)
  nameWithType: InvariantString.ToStringInvariant(Object)
  fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.InvariantString.ToStringInvariant(System.Object)
    name: ToStringInvariant
    nameWithType: InvariantString.ToStringInvariant
    fullName: Microsoft.Health.Utility.InvariantString.ToStringInvariant
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.InvariantString
  commentId: T:Microsoft.Health.Utility.InvariantString
  parent: Microsoft.Health.Utility
  isExternal: false
  name: InvariantString
  nameWithType: InvariantString
  fullName: Microsoft.Health.Utility.InvariantString
- uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  commentId: M:Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
  isExternal: false
  name: ValueOrDbNull<T>(T)
  nameWithType: TypeHelper.ValueOrDbNull<T>(T)
  fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>(T)
  nameWithType.vb: TypeHelper.ValueOrDbNull(Of T)(T)
  fullName.vb: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)(T)
  name.vb: ValueOrDbNull(Of T)(T)
  spec.csharp:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull<T>
    nameWithType: TypeHelper.ValueOrDbNull<T>
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull``1(``0)
    name: ValueOrDbNull(Of T)
    nameWithType: TypeHelper.ValueOrDbNull(Of T)
    fullName: Microsoft.Health.Utility.TypeHelper.ValueOrDbNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.TypeHelper
  commentId: T:Microsoft.Health.Utility.TypeHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: TypeHelper
  nameWithType: TypeHelper
  fullName: Microsoft.Health.Utility.TypeHelper
- uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  commentId: M:Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  isExternal: true
  name: ToXml(Object)
  nameWithType: WCXmlHelper.ToXml(Object)
  fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
  spec.csharp:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Utility.WCXmlHelper.ToXml(System.Object)
    name: ToXml
    nameWithType: WCXmlHelper.ToXml
    fullName: Microsoft.Health.Utility.WCXmlHelper.ToXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Utility.WCXmlHelper
  commentId: T:Microsoft.Health.Utility.WCXmlHelper
  parent: Microsoft.Health.Utility
  isExternal: false
  name: WCXmlHelper
  nameWithType: WCXmlHelper
  fullName: Microsoft.Health.Utility.WCXmlHelper
- uid: Microsoft.Health.Utility
  commentId: N:Microsoft.Health.Utility
  isExternal: false
  name: Microsoft.Health.Utility
  nameWithType: Microsoft.Health.Utility
  fullName: Microsoft.Health.Utility
- uid: Microsoft.Health.PersonInfo.ApplicationConnection
  commentId: P:Microsoft.Health.PersonInfo.ApplicationConnection
- uid: Microsoft.Health.PersonInfo
  commentId: T:Microsoft.Health.PersonInfo
  parent: Microsoft.Health
  isExternal: false
  name: PersonInfo
  nameWithType: PersonInfo
  fullName: Microsoft.Health.PersonInfo
- uid: Microsoft.Health.PersonInfo.CreateFromXml*
  commentId: Overload:Microsoft.Health.PersonInfo.CreateFromXml
  isExternal: false
  name: CreateFromXml
  nameWithType: PersonInfo.CreateFromXml
  fullName: Microsoft.Health.PersonInfo.CreateFromXml
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: Microsoft.Health.ApplicationConnection
  commentId: T:Microsoft.Health.ApplicationConnection
  parent: Microsoft.Health
  isExternal: false
  name: ApplicationConnection
  nameWithType: ApplicationConnection
  fullName: Microsoft.Health.ApplicationConnection
- uid: System.Xml.XPath.XPathNavigator
  commentId: T:System.Xml.XPath.XPathNavigator
  parent: System.Xml.XPath
  isExternal: true
  name: XPathNavigator
  nameWithType: XPathNavigator
  fullName: System.Xml.XPath.XPathNavigator
- uid: System.Xml.XPath
  commentId: N:System.Xml.XPath
  isExternal: false
  name: System.Xml.XPath
  nameWithType: System.Xml.XPath
  fullName: System.Xml.XPath
- uid: Microsoft.Health.HealthRecordInfo.GetFromAlternateId(Microsoft.Health.ApplicationConnection,System.String)
  commentId: M:Microsoft.Health.HealthRecordInfo.GetFromAlternateId(Microsoft.Health.ApplicationConnection,System.String)
- uid: Microsoft.Health.PersonInfo.GetFromAlternateId*
  commentId: Overload:Microsoft.Health.PersonInfo.GetFromAlternateId
  isExternal: false
  name: GetFromAlternateId
  nameWithType: PersonInfo.GetFromAlternateId
  fullName: Microsoft.Health.PersonInfo.GetFromAlternateId
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: Microsoft.Health.HealthServiceException
  commentId: T:Microsoft.Health.HealthServiceException
  parent: Microsoft.Health
  isExternal: false
  name: HealthServiceException
  nameWithType: HealthServiceException
  fullName: Microsoft.Health.HealthServiceException
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Health.PersonInfo.#ctor*
  commentId: Overload:Microsoft.Health.PersonInfo.#ctor
  isExternal: false
  name: PersonInfo
  nameWithType: PersonInfo.PersonInfo
  fullName: Microsoft.Health.PersonInfo.PersonInfo
- uid: Microsoft.Health.PersonInfo.Unmarshal*
  commentId: Overload:Microsoft.Health.PersonInfo.Unmarshal
  isExternal: false
  name: Unmarshal
  nameWithType: PersonInfo.Unmarshal
  fullName: Microsoft.Health.PersonInfo.Unmarshal
- uid: Microsoft.Health.IMarshallable.Unmarshal(System.Xml.XmlReader)
  commentId: M:Microsoft.Health.IMarshallable.Unmarshal(System.Xml.XmlReader)
  parent: Microsoft.Health.IMarshallable
  isExternal: true
  name: Unmarshal(XmlReader)
  nameWithType: IMarshallable.Unmarshal(XmlReader)
  fullName: Microsoft.Health.IMarshallable.Unmarshal(System.Xml.XmlReader)
  spec.csharp:
  - uid: Microsoft.Health.IMarshallable.Unmarshal(System.Xml.XmlReader)
    name: Unmarshal
    nameWithType: IMarshallable.Unmarshal
    fullName: Microsoft.Health.IMarshallable.Unmarshal
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.IMarshallable.Unmarshal(System.Xml.XmlReader)
    name: Unmarshal
    nameWithType: IMarshallable.Unmarshal
    fullName: Microsoft.Health.IMarshallable.Unmarshal
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.XmlReader
  commentId: T:System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: false
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: Microsoft.Health.PersonInfo.GetXml*
  commentId: Overload:Microsoft.Health.PersonInfo.GetXml
  isExternal: false
  name: GetXml
  nameWithType: PersonInfo.GetXml
  fullName: Microsoft.Health.PersonInfo.GetXml
- uid: Microsoft.Health.PersonInfo.Marshal*
  commentId: Overload:Microsoft.Health.PersonInfo.Marshal
  isExternal: false
  name: Marshal
  nameWithType: PersonInfo.Marshal
  fullName: Microsoft.Health.PersonInfo.Marshal
- uid: Microsoft.Health.IMarshallable.Marshal(System.Xml.XmlWriter)
  commentId: M:Microsoft.Health.IMarshallable.Marshal(System.Xml.XmlWriter)
  parent: Microsoft.Health.IMarshallable
  isExternal: true
  name: Marshal(XmlWriter)
  nameWithType: IMarshallable.Marshal(XmlWriter)
  fullName: Microsoft.Health.IMarshallable.Marshal(System.Xml.XmlWriter)
  spec.csharp:
  - uid: Microsoft.Health.IMarshallable.Marshal(System.Xml.XmlWriter)
    name: Marshal
    nameWithType: IMarshallable.Marshal
    fullName: Microsoft.Health.IMarshallable.Marshal
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.IMarshallable.Marshal(System.Xml.XmlWriter)
    name: Marshal
    nameWithType: IMarshallable.Marshal
    fullName: Microsoft.Health.IMarshallable.Marshal
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.XmlWriter
  commentId: T:System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: Microsoft.Health.PersonInfo.PersonId*
  commentId: Overload:Microsoft.Health.PersonInfo.PersonId
  isExternal: false
  name: PersonId
  nameWithType: PersonInfo.PersonId
  fullName: Microsoft.Health.PersonInfo.PersonId
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: Microsoft.Health.PersonInfo.Name*
  commentId: Overload:Microsoft.Health.PersonInfo.Name
  isExternal: false
  name: Name
  nameWithType: PersonInfo.Name
  fullName: Microsoft.Health.PersonInfo.Name
- uid: Microsoft.Health.PersonInfo.ApplicationSettings*
  commentId: Overload:Microsoft.Health.PersonInfo.ApplicationSettings
  isExternal: false
  name: ApplicationSettings
  nameWithType: PersonInfo.ApplicationSettings
  fullName: Microsoft.Health.PersonInfo.ApplicationSettings
- uid: System.Xml.XPath.IXPathNavigable
  commentId: T:System.Xml.XPath.IXPathNavigable
  parent: System.Xml.XPath
  isExternal: true
  name: IXPathNavigable
  nameWithType: IXPathNavigable
  fullName: System.Xml.XPath.IXPathNavigable
- uid: Microsoft.Health.PersonInfo.ApplicationSettingsDocument*
  commentId: Overload:Microsoft.Health.PersonInfo.ApplicationSettingsDocument
  isExternal: false
  name: ApplicationSettingsDocument
  nameWithType: PersonInfo.ApplicationSettingsDocument
  fullName: Microsoft.Health.PersonInfo.ApplicationSettingsDocument
- uid: System.Xml.XmlDocument
  commentId: T:System.Xml.XmlDocument
  parent: System.Xml
  isExternal: true
  name: XmlDocument
  nameWithType: XmlDocument
  fullName: System.Xml.XmlDocument
- uid: Microsoft.Health.PersonInfo.SetApplicationSettings*
  commentId: Overload:Microsoft.Health.PersonInfo.SetApplicationSettings
  isExternal: false
  name: SetApplicationSettings
  nameWithType: PersonInfo.SetApplicationSettings
  fullName: Microsoft.Health.PersonInfo.SetApplicationSettings
- uid: Microsoft.Health.PersonInfo.SetApplicationSettings(System.Xml.XPath.IXPathNavigable)
  commentId: M:Microsoft.Health.PersonInfo.SetApplicationSettings(System.Xml.XPath.IXPathNavigable)
- uid: System.EventHandler
  commentId: T:System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: Microsoft.Health.HealthRecordInfo
  commentId: T:Microsoft.Health.HealthRecordInfo
  parent: Microsoft.Health
  isExternal: false
  name: HealthRecordInfo
  nameWithType: HealthRecordInfo
  fullName: Microsoft.Health.HealthRecordInfo
- uid: Microsoft.Health.PersonInfo.SelectedRecord*
  commentId: Overload:Microsoft.Health.PersonInfo.SelectedRecord
  isExternal: false
  name: SelectedRecord
  nameWithType: PersonInfo.SelectedRecord
  fullName: Microsoft.Health.PersonInfo.SelectedRecord
- uid: Microsoft.Health.PersonInfo.SelectedRecord
  commentId: P:Microsoft.Health.PersonInfo.SelectedRecord
- uid: Microsoft.Health.PersonInfo.GetSelfRecord
  commentId: M:Microsoft.Health.PersonInfo.GetSelfRecord
- uid: Microsoft.Health.ApplicationConnection.GetAuthorizedRecords(System.Collections.Generic.IList{System.Guid})
  commentId: M:Microsoft.Health.ApplicationConnection.GetAuthorizedRecords(System.Collections.Generic.IList{System.Guid})
  parent: Microsoft.Health.ApplicationConnection
  isExternal: true
  name: GetAuthorizedRecords(IList<Guid>)
  nameWithType: ApplicationConnection.GetAuthorizedRecords(IList<Guid>)
  fullName: Microsoft.Health.ApplicationConnection.GetAuthorizedRecords(System.Collections.Generic.IList<System.Guid>)
  nameWithType.vb: ApplicationConnection.GetAuthorizedRecords(IList(Of Guid))
  fullName.vb: Microsoft.Health.ApplicationConnection.GetAuthorizedRecords(System.Collections.Generic.IList(Of System.Guid))
  name.vb: GetAuthorizedRecords(IList(Of Guid))
  spec.csharp:
  - uid: Microsoft.Health.ApplicationConnection.GetAuthorizedRecords(System.Collections.Generic.IList{System.Guid})
    name: GetAuthorizedRecords
    nameWithType: ApplicationConnection.GetAuthorizedRecords
    fullName: Microsoft.Health.ApplicationConnection.GetAuthorizedRecords
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.ApplicationConnection.GetAuthorizedRecords(System.Collections.Generic.IList{System.Guid})
    name: GetAuthorizedRecords
    nameWithType: ApplicationConnection.GetAuthorizedRecords
    fullName: Microsoft.Health.ApplicationConnection.GetAuthorizedRecords
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.PersonInfo.AuthorizedRecords*
  commentId: Overload:Microsoft.Health.PersonInfo.AuthorizedRecords
  isExternal: false
  name: AuthorizedRecords
  nameWithType: PersonInfo.AuthorizedRecords
  fullName: Microsoft.Health.PersonInfo.AuthorizedRecords
- uid: System.Collections.Generic.Dictionary{System.Guid,Microsoft.Health.HealthRecordInfo}
  commentId: T:System.Collections.Generic.Dictionary{System.Guid,Microsoft.Health.HealthRecordInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<Guid, HealthRecordInfo>
  nameWithType: Dictionary<Guid, HealthRecordInfo>
  fullName: System.Collections.Generic.Dictionary<System.Guid, Microsoft.Health.HealthRecordInfo>
  nameWithType.vb: Dictionary(Of Guid, HealthRecordInfo)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.Guid, Microsoft.Health.HealthRecordInfo)
  name.vb: Dictionary(Of Guid, HealthRecordInfo)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.HealthRecordInfo
    name: HealthRecordInfo
    nameWithType: HealthRecordInfo
    fullName: Microsoft.Health.HealthRecordInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.HealthRecordInfo
    name: HealthRecordInfo
    nameWithType: HealthRecordInfo
    fullName: Microsoft.Health.HealthRecordInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Health.PersonInfo.PreferredCulture*
  commentId: Overload:Microsoft.Health.PersonInfo.PreferredCulture
  isExternal: false
  name: PreferredCulture
  nameWithType: PersonInfo.PreferredCulture
  fullName: Microsoft.Health.PersonInfo.PreferredCulture
- uid: Microsoft.Health.PersonInfo.PreferredUICulture*
  commentId: Overload:Microsoft.Health.PersonInfo.PreferredUICulture
  isExternal: false
  name: PreferredUICulture
  nameWithType: PersonInfo.PreferredUICulture
  fullName: Microsoft.Health.PersonInfo.PreferredUICulture
- uid: Microsoft.Health.PersonInfo.Location*
  commentId: Overload:Microsoft.Health.PersonInfo.Location
  isExternal: false
  name: Location
  nameWithType: PersonInfo.Location
  fullName: Microsoft.Health.PersonInfo.Location
- uid: Microsoft.Health.Location
  commentId: T:Microsoft.Health.Location
  parent: Microsoft.Health
  isExternal: false
  name: Location
  nameWithType: Location
  fullName: Microsoft.Health.Location
- uid: Microsoft.Health.Web.OfflineWebApplicationConnection
  commentId: T:Microsoft.Health.Web.OfflineWebApplicationConnection
  parent: Microsoft.Health.Web
  isExternal: false
  name: OfflineWebApplicationConnection
  nameWithType: OfflineWebApplicationConnection
  fullName: Microsoft.Health.Web.OfflineWebApplicationConnection
- uid: Microsoft.Health.PersonInfo.Connection*
  commentId: Overload:Microsoft.Health.PersonInfo.Connection
  isExternal: false
  name: Connection
  nameWithType: PersonInfo.Connection
  fullName: Microsoft.Health.PersonInfo.Connection
- uid: Microsoft.Health.AuthenticatedConnection
  commentId: T:Microsoft.Health.AuthenticatedConnection
  parent: Microsoft.Health
  isExternal: false
  name: AuthenticatedConnection
  nameWithType: AuthenticatedConnection
  fullName: Microsoft.Health.AuthenticatedConnection
- uid: Microsoft.Health.Web
  commentId: N:Microsoft.Health.Web
  isExternal: false
  name: Microsoft.Health.Web
  nameWithType: Microsoft.Health.Web
  fullName: Microsoft.Health.Web
- uid: Microsoft.Health.PersonInfo.ApplicationConnection*
  commentId: Overload:Microsoft.Health.PersonInfo.ApplicationConnection
  isExternal: false
  name: ApplicationConnection
  nameWithType: PersonInfo.ApplicationConnection
  fullName: Microsoft.Health.PersonInfo.ApplicationConnection
- uid: Microsoft.Health.RelationshipType.Self
  commentId: F:Microsoft.Health.RelationshipType.Self
- uid: Microsoft.Health.PersonInfo.GetSelfRecord*
  commentId: Overload:Microsoft.Health.PersonInfo.GetSelfRecord
  isExternal: false
  name: GetSelfRecord
  nameWithType: PersonInfo.GetSelfRecord
  fullName: Microsoft.Health.PersonInfo.GetSelfRecord
