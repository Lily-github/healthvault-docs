### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.ItemTypes.ExerciseSamplesData
  commentId: T:Microsoft.Health.ItemTypes.ExerciseSamplesData
  id: ExerciseSamplesData
  parent: Microsoft.Health.ItemTypes
  children:
  - Microsoft.Health.ItemTypes.ExerciseSamplesData.#ctor
  - Microsoft.Health.ItemTypes.ExerciseSamplesData.#ctor(System.String,System.String,System.String)
  - Microsoft.Health.ItemTypes.ExerciseSamplesData.SamplingInterval
  - Microsoft.Health.ItemTypes.ExerciseSamplesData.SingleValuedSamples
  - Microsoft.Health.ItemTypes.ExerciseSamplesData.TwoValuedSamples
  - Microsoft.Health.ItemTypes.ExerciseSamplesData.WriteXml(System.Xml.XmlWriter)
  langs:
  - csharp
  - vb
  name: ExerciseSamplesData
  nameWithType: ExerciseSamplesData
  fullName: Microsoft.Health.ItemTypes.ExerciseSamplesData
  type: Class
  source:
    remote:
      path: Microsoft.Health.ItemTypes/ExerciseSamplesData.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ExerciseSamplesData
    path: ExerciseSamplesData.cs
    startLine: 31
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nThe ExerciseSamplesData class is used to store and retrieve samples data for the \n<xref href=\"Microsoft.Health.ItemTypes.ExerciseSamples\" data-throw-if-not-resolved=\"false\"></xref> class. It handles converting from a sample data format to the\ncomma-separated format.\n"
  remarks: "\nData is represented as either an array of samples with a single value (such as heart rate), or an array\nof samples with two values (such as a GPS position). The <xref href=\"Microsoft.Health.ItemTypes.ExerciseSamplesData.SingleValuedSamples\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Microsoft.Health.ItemTypes.ExerciseSamplesData.TwoValuedSamples\" data-throw-if-not-resolved=\"false\"></xref> properties\nshould be used as appropriate based on the stored data type. \n\nThe underlying format allows the sampling interval to be changed in the middle of a sample set. This class\nwill detect sampling intervals that have changed, and insert appropriate escape values into the resulting data.\n"
  example: []
  syntax:
    content: 'public class ExerciseSamplesData : OtherItemDataCsv'
    content.vb: >-
      Public Class ExerciseSamplesData
          Inherits OtherItemDataCsv
  inheritance:
  - System.Object
  - Microsoft.Health.OtherItemData
  - Microsoft.Health.ItemTypes.Csv.OtherItemDataCsv
  inheritedMembers:
  - Microsoft.Health.ItemTypes.Csv.OtherItemDataCsv.GetAsString
  - Microsoft.Health.ItemTypes.Csv.OtherItemDataCsv.GetAsDouble
  - Microsoft.Health.ItemTypes.Csv.OtherItemDataCsv.SetOtherData(System.Collections.Generic.IList{Microsoft.Health.ItemTypes.Csv.OtherItemDataCsvItem})
  - Microsoft.Health.OtherItemData.ParseXml(System.Xml.XPath.XPathNavigator)
  - Microsoft.Health.OtherItemData.Data
  - Microsoft.Health.OtherItemData.ContentType
  - Microsoft.Health.OtherItemData.ContentEncoding
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.ItemTypes.ExerciseSamplesData.#ctor
  commentId: M:Microsoft.Health.ItemTypes.ExerciseSamplesData.#ctor
  id: '#ctor'
  parent: Microsoft.Health.ItemTypes.ExerciseSamplesData
  langs:
  - csharp
  - vb
  name: ExerciseSamplesData()
  nameWithType: ExerciseSamplesData.ExerciseSamplesData()
  fullName: Microsoft.Health.ItemTypes.ExerciseSamplesData.ExerciseSamplesData()
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.ItemTypes/ExerciseSamplesData.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ExerciseSamplesData.cs
    startLine: 36
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nCreates a new instance of the <xref href=\"Microsoft.Health.ItemTypes.ExerciseSamplesData\" data-throw-if-not-resolved=\"false\"></xref> class. \n"
  example: []
  syntax:
    content: public ExerciseSamplesData()
    content.vb: Public Sub New
  overload: Microsoft.Health.ItemTypes.ExerciseSamplesData.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.ItemTypes.ExerciseSamplesData.#ctor(System.String,System.String,System.String)
  commentId: M:Microsoft.Health.ItemTypes.ExerciseSamplesData.#ctor(System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String)'
  parent: Microsoft.Health.ItemTypes.ExerciseSamplesData
  langs:
  - csharp
  - vb
  name: ExerciseSamplesData(String, String, String)
  nameWithType: ExerciseSamplesData.ExerciseSamplesData(String, String, String)
  fullName: Microsoft.Health.ItemTypes.ExerciseSamplesData.ExerciseSamplesData(System.String, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.ItemTypes/ExerciseSamplesData.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ExerciseSamplesData.cs
    startLine: 59
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nCreates a new instance of the <xref href=\"Microsoft.Health.ItemTypes.ExerciseSamplesData\" data-throw-if-not-resolved=\"false\"></xref> class \nwith the specified data, encoding, and content type.\n"
  example: []
  syntax:
    content: public ExerciseSamplesData(string data, string contentEncoding, string contentType)
    content.vb: Public Sub New(data As String, contentEncoding As String, contentType As String)
    parameters:
    - id: data
      type: System.String
      description: "\nThe data to store in the other data section of the health record\nitem.\n"
    - id: contentEncoding
      type: System.String
      description: "\nThe type of encoding that was done on the data. Usually this will\nbe \"base64\" but other encodings are acceptable.\n"
    - id: contentType
      type: System.String
      description: "\nThe MIME-content type of the data.\n"
  overload: Microsoft.Health.ItemTypes.ExerciseSamplesData.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.ItemTypes.ExerciseSamplesData.SamplingInterval
  commentId: P:Microsoft.Health.ItemTypes.ExerciseSamplesData.SamplingInterval
  id: SamplingInterval
  parent: Microsoft.Health.ItemTypes.ExerciseSamplesData
  langs:
  - csharp
  - vb
  name: SamplingInterval
  nameWithType: ExerciseSamplesData.SamplingInterval
  fullName: Microsoft.Health.ItemTypes.ExerciseSamplesData.SamplingInterval
  type: Property
  source:
    remote:
      path: Microsoft.Health.ItemTypes/ExerciseSamplesData.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SamplingInterval
    path: ExerciseSamplesData.cs
    startLine: 144
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nGets or sets the initial sampling interval for the set of samples. \n"
  remarks: "\nThe sampling interval may change between two samples.\n"
  example: []
  syntax:
    content: public double SamplingInterval { get; set; }
    content.vb: Public Property SamplingInterval As Double
    parameters: []
    return:
      type: System.Double
  overload: Microsoft.Health.ItemTypes.ExerciseSamplesData.SamplingInterval*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\nIf the sampling interval is less than or equal to zero.\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.ItemTypes.ExerciseSamplesData.SingleValuedSamples
  commentId: P:Microsoft.Health.ItemTypes.ExerciseSamplesData.SingleValuedSamples
  id: SingleValuedSamples
  parent: Microsoft.Health.ItemTypes.ExerciseSamplesData
  langs:
  - csharp
  - vb
  name: SingleValuedSamples
  nameWithType: ExerciseSamplesData.SingleValuedSamples
  fullName: Microsoft.Health.ItemTypes.ExerciseSamplesData.SingleValuedSamples
  type: Property
  source:
    remote:
      path: Microsoft.Health.ItemTypes/ExerciseSamplesData.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: SingleValuedSamples
    path: ExerciseSamplesData.cs
    startLine: 166
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nGets the sample data as a collection of single values.\n"
  remarks: "\nThe majority of sample types contain only a single value per sample. This property\nis used to access samples for those sample types. \n"
  example: []
  syntax:
    content: public Collection<ExerciseSampleOneValue> SingleValuedSamples { get; }
    content.vb: Public ReadOnly Property SingleValuedSamples As Collection(Of ExerciseSampleOneValue)
    parameters: []
    return:
      type: System.Collections.ObjectModel.Collection{Microsoft.Health.ItemTypes.ExerciseSampleOneValue}
  overload: Microsoft.Health.ItemTypes.ExerciseSamplesData.SingleValuedSamples*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.ItemTypes.ExerciseSamplesData.TwoValuedSamples
  commentId: P:Microsoft.Health.ItemTypes.ExerciseSamplesData.TwoValuedSamples
  id: TwoValuedSamples
  parent: Microsoft.Health.ItemTypes.ExerciseSamplesData
  langs:
  - csharp
  - vb
  name: TwoValuedSamples
  nameWithType: ExerciseSamplesData.TwoValuedSamples
  fullName: Microsoft.Health.ItemTypes.ExerciseSamplesData.TwoValuedSamples
  type: Property
  source:
    remote:
      path: Microsoft.Health.ItemTypes/ExerciseSamplesData.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: TwoValuedSamples
    path: ExerciseSamplesData.cs
    startLine: 235
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nGets the sample data as a collection of two-valued samples.\n"
  remarks: "\nSome samples types (such as GPS location) consist not of a single value but of two separate values\nThis property is used to access samples for those sample types. \n"
  example: []
  syntax:
    content: public Collection<ExerciseSampleTwoValue> TwoValuedSamples { get; }
    content.vb: Public ReadOnly Property TwoValuedSamples As Collection(Of ExerciseSampleTwoValue)
    parameters: []
    return:
      type: System.Collections.ObjectModel.Collection{Microsoft.Health.ItemTypes.ExerciseSampleTwoValue}
  overload: Microsoft.Health.ItemTypes.ExerciseSamplesData.TwoValuedSamples*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.ItemTypes.ExerciseSamplesData.WriteXml(System.Xml.XmlWriter)
  commentId: M:Microsoft.Health.ItemTypes.ExerciseSamplesData.WriteXml(System.Xml.XmlWriter)
  id: WriteXml(System.Xml.XmlWriter)
  parent: Microsoft.Health.ItemTypes.ExerciseSamplesData
  langs:
  - csharp
  - vb
  name: WriteXml(XmlWriter)
  nameWithType: ExerciseSamplesData.WriteXml(XmlWriter)
  fullName: Microsoft.Health.ItemTypes.ExerciseSamplesData.WriteXml(System.Xml.XmlWriter)
  type: Method
  source:
    remote:
      path: Microsoft.Health.ItemTypes/ExerciseSamplesData.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: WriteXml
    path: ExerciseSamplesData.cs
    startLine: 309
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nWrites the exercise samples to the specified XmlWriter.\n"
  example: []
  syntax:
    content: public override void WriteXml(XmlWriter writer)
    content.vb: Public Overrides Sub WriteXml(writer As XmlWriter)
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "\nThe XmlWriter to write the height data to.\n"
  overridden: Microsoft.Health.OtherItemData.WriteXml(System.Xml.XmlWriter)
  overload: Microsoft.Health.ItemTypes.ExerciseSamplesData.WriteXml*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nIf both the <xref href=\"Microsoft.Health.ItemTypes.ExerciseSamplesData.SingleValuedSamples\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"Microsoft.Health.ItemTypes.ExerciseSamplesData.TwoValuedSamples\" data-throw-if-not-resolved=\"false\"></xref> properties have data in them\nor\nif neither the <xref href=\"Microsoft.Health.ItemTypes.ExerciseSamplesData.SingleValuedSamples\" data-throw-if-not-resolved=\"false\"></xref> nor <xref href=\"Microsoft.Health.ItemTypes.ExerciseSamplesData.TwoValuedSamples\" data-throw-if-not-resolved=\"false\"></xref> properties have data in them.\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Microsoft.Health.ItemTypes.ExerciseSamples
  commentId: T:Microsoft.Health.ItemTypes.ExerciseSamples
  isExternal: false
  name: ExerciseSamples
  nameWithType: ExerciseSamples
  fullName: Microsoft.Health.ItemTypes.ExerciseSamples
- uid: Microsoft.Health.ItemTypes.ExerciseSamplesData.SingleValuedSamples
  commentId: P:Microsoft.Health.ItemTypes.ExerciseSamplesData.SingleValuedSamples
- uid: Microsoft.Health.ItemTypes.ExerciseSamplesData.TwoValuedSamples
  commentId: P:Microsoft.Health.ItemTypes.ExerciseSamplesData.TwoValuedSamples
- uid: Microsoft.Health.ItemTypes
  commentId: N:Microsoft.Health.ItemTypes
  isExternal: false
  name: Microsoft.Health.ItemTypes
  nameWithType: Microsoft.Health.ItemTypes
  fullName: Microsoft.Health.ItemTypes
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Health.OtherItemData
  commentId: T:Microsoft.Health.OtherItemData
  parent: Microsoft.Health
  isExternal: false
  name: OtherItemData
  nameWithType: OtherItemData
  fullName: Microsoft.Health.OtherItemData
- uid: Microsoft.Health.ItemTypes.Csv.OtherItemDataCsv
  commentId: T:Microsoft.Health.ItemTypes.Csv.OtherItemDataCsv
  parent: Microsoft.Health.ItemTypes.Csv
  isExternal: false
  name: OtherItemDataCsv
  nameWithType: OtherItemDataCsv
  fullName: Microsoft.Health.ItemTypes.Csv.OtherItemDataCsv
- uid: Microsoft.Health.ItemTypes.Csv.OtherItemDataCsv.GetAsString
  commentId: M:Microsoft.Health.ItemTypes.Csv.OtherItemDataCsv.GetAsString
  parent: Microsoft.Health.ItemTypes.Csv.OtherItemDataCsv
  isExternal: false
  name: GetAsString()
  nameWithType: OtherItemDataCsv.GetAsString()
  fullName: Microsoft.Health.ItemTypes.Csv.OtherItemDataCsv.GetAsString()
  spec.csharp:
  - uid: Microsoft.Health.ItemTypes.Csv.OtherItemDataCsv.GetAsString
    name: GetAsString
    nameWithType: OtherItemDataCsv.GetAsString
    fullName: Microsoft.Health.ItemTypes.Csv.OtherItemDataCsv.GetAsString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.ItemTypes.Csv.OtherItemDataCsv.GetAsString
    name: GetAsString
    nameWithType: OtherItemDataCsv.GetAsString
    fullName: Microsoft.Health.ItemTypes.Csv.OtherItemDataCsv.GetAsString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ItemTypes.Csv.OtherItemDataCsv.GetAsDouble
  commentId: M:Microsoft.Health.ItemTypes.Csv.OtherItemDataCsv.GetAsDouble
  parent: Microsoft.Health.ItemTypes.Csv.OtherItemDataCsv
  isExternal: false
  name: GetAsDouble()
  nameWithType: OtherItemDataCsv.GetAsDouble()
  fullName: Microsoft.Health.ItemTypes.Csv.OtherItemDataCsv.GetAsDouble()
  spec.csharp:
  - uid: Microsoft.Health.ItemTypes.Csv.OtherItemDataCsv.GetAsDouble
    name: GetAsDouble
    nameWithType: OtherItemDataCsv.GetAsDouble
    fullName: Microsoft.Health.ItemTypes.Csv.OtherItemDataCsv.GetAsDouble
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.ItemTypes.Csv.OtherItemDataCsv.GetAsDouble
    name: GetAsDouble
    nameWithType: OtherItemDataCsv.GetAsDouble
    fullName: Microsoft.Health.ItemTypes.Csv.OtherItemDataCsv.GetAsDouble
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ItemTypes.Csv.OtherItemDataCsv.SetOtherData(System.Collections.Generic.IList{Microsoft.Health.ItemTypes.Csv.OtherItemDataCsvItem})
  commentId: M:Microsoft.Health.ItemTypes.Csv.OtherItemDataCsv.SetOtherData(System.Collections.Generic.IList{Microsoft.Health.ItemTypes.Csv.OtherItemDataCsvItem})
  parent: Microsoft.Health.ItemTypes.Csv.OtherItemDataCsv
  isExternal: true
  name: SetOtherData(IList<OtherItemDataCsvItem>)
  nameWithType: OtherItemDataCsv.SetOtherData(IList<OtherItemDataCsvItem>)
  fullName: Microsoft.Health.ItemTypes.Csv.OtherItemDataCsv.SetOtherData(System.Collections.Generic.IList<Microsoft.Health.ItemTypes.Csv.OtherItemDataCsvItem>)
  nameWithType.vb: OtherItemDataCsv.SetOtherData(IList(Of OtherItemDataCsvItem))
  fullName.vb: Microsoft.Health.ItemTypes.Csv.OtherItemDataCsv.SetOtherData(System.Collections.Generic.IList(Of Microsoft.Health.ItemTypes.Csv.OtherItemDataCsvItem))
  name.vb: SetOtherData(IList(Of OtherItemDataCsvItem))
  spec.csharp:
  - uid: Microsoft.Health.ItemTypes.Csv.OtherItemDataCsv.SetOtherData(System.Collections.Generic.IList{Microsoft.Health.ItemTypes.Csv.OtherItemDataCsvItem})
    name: SetOtherData
    nameWithType: OtherItemDataCsv.SetOtherData
    fullName: Microsoft.Health.ItemTypes.Csv.OtherItemDataCsv.SetOtherData
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.ItemTypes.Csv.OtherItemDataCsvItem
    name: OtherItemDataCsvItem
    nameWithType: OtherItemDataCsvItem
    fullName: Microsoft.Health.ItemTypes.Csv.OtherItemDataCsvItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.ItemTypes.Csv.OtherItemDataCsv.SetOtherData(System.Collections.Generic.IList{Microsoft.Health.ItemTypes.Csv.OtherItemDataCsvItem})
    name: SetOtherData
    nameWithType: OtherItemDataCsv.SetOtherData
    fullName: Microsoft.Health.ItemTypes.Csv.OtherItemDataCsv.SetOtherData
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.ItemTypes.Csv.OtherItemDataCsvItem
    name: OtherItemDataCsvItem
    nameWithType: OtherItemDataCsvItem
    fullName: Microsoft.Health.ItemTypes.Csv.OtherItemDataCsvItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.OtherItemData.ParseXml(System.Xml.XPath.XPathNavigator)
  commentId: M:Microsoft.Health.OtherItemData.ParseXml(System.Xml.XPath.XPathNavigator)
  parent: Microsoft.Health.OtherItemData
  isExternal: true
  name: ParseXml(XPathNavigator)
  nameWithType: OtherItemData.ParseXml(XPathNavigator)
  fullName: Microsoft.Health.OtherItemData.ParseXml(System.Xml.XPath.XPathNavigator)
  spec.csharp:
  - uid: Microsoft.Health.OtherItemData.ParseXml(System.Xml.XPath.XPathNavigator)
    name: ParseXml
    nameWithType: OtherItemData.ParseXml
    fullName: Microsoft.Health.OtherItemData.ParseXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XPath.XPathNavigator
    name: XPathNavigator
    nameWithType: XPathNavigator
    fullName: System.Xml.XPath.XPathNavigator
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.OtherItemData.ParseXml(System.Xml.XPath.XPathNavigator)
    name: ParseXml
    nameWithType: OtherItemData.ParseXml
    fullName: Microsoft.Health.OtherItemData.ParseXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XPath.XPathNavigator
    name: XPathNavigator
    nameWithType: XPathNavigator
    fullName: System.Xml.XPath.XPathNavigator
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.OtherItemData.Data
  commentId: P:Microsoft.Health.OtherItemData.Data
  parent: Microsoft.Health.OtherItemData
  isExternal: false
  name: Data
  nameWithType: OtherItemData.Data
  fullName: Microsoft.Health.OtherItemData.Data
- uid: Microsoft.Health.OtherItemData.ContentType
  commentId: P:Microsoft.Health.OtherItemData.ContentType
  parent: Microsoft.Health.OtherItemData
  isExternal: false
  name: ContentType
  nameWithType: OtherItemData.ContentType
  fullName: Microsoft.Health.OtherItemData.ContentType
- uid: Microsoft.Health.OtherItemData.ContentEncoding
  commentId: P:Microsoft.Health.OtherItemData.ContentEncoding
  parent: Microsoft.Health.OtherItemData
  isExternal: false
  name: ContentEncoding
  nameWithType: OtherItemData.ContentEncoding
  fullName: Microsoft.Health.OtherItemData.ContentEncoding
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: Microsoft.Health.ItemTypes.Csv
  commentId: N:Microsoft.Health.ItemTypes.Csv
  isExternal: false
  name: Microsoft.Health.ItemTypes.Csv
  nameWithType: Microsoft.Health.ItemTypes.Csv
  fullName: Microsoft.Health.ItemTypes.Csv
- uid: Microsoft.Health.ItemTypes.ExerciseSamplesData
  commentId: T:Microsoft.Health.ItemTypes.ExerciseSamplesData
  parent: Microsoft.Health.ItemTypes
  isExternal: false
  name: ExerciseSamplesData
  nameWithType: ExerciseSamplesData
  fullName: Microsoft.Health.ItemTypes.ExerciseSamplesData
- uid: Microsoft.Health.ItemTypes.ExerciseSamplesData.#ctor*
  commentId: Overload:Microsoft.Health.ItemTypes.ExerciseSamplesData.#ctor
  isExternal: false
  name: ExerciseSamplesData
  nameWithType: ExerciseSamplesData.ExerciseSamplesData
  fullName: Microsoft.Health.ItemTypes.ExerciseSamplesData.ExerciseSamplesData
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Health.ItemTypes.ExerciseSamplesData.SamplingInterval*
  commentId: Overload:Microsoft.Health.ItemTypes.ExerciseSamplesData.SamplingInterval
  isExternal: false
  name: SamplingInterval
  nameWithType: ExerciseSamplesData.SamplingInterval
  fullName: Microsoft.Health.ItemTypes.ExerciseSamplesData.SamplingInterval
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Microsoft.Health.ItemTypes.ExerciseSamplesData.SingleValuedSamples*
  commentId: Overload:Microsoft.Health.ItemTypes.ExerciseSamplesData.SingleValuedSamples
  isExternal: false
  name: SingleValuedSamples
  nameWithType: ExerciseSamplesData.SingleValuedSamples
  fullName: Microsoft.Health.ItemTypes.ExerciseSamplesData.SingleValuedSamples
- uid: System.Collections.ObjectModel.Collection{Microsoft.Health.ItemTypes.ExerciseSampleOneValue}
  commentId: T:System.Collections.ObjectModel.Collection{Microsoft.Health.ItemTypes.ExerciseSampleOneValue}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.Collection`1
  name: Collection<ExerciseSampleOneValue>
  nameWithType: Collection<ExerciseSampleOneValue>
  fullName: System.Collections.ObjectModel.Collection<Microsoft.Health.ItemTypes.ExerciseSampleOneValue>
  nameWithType.vb: Collection(Of ExerciseSampleOneValue)
  fullName.vb: System.Collections.ObjectModel.Collection(Of Microsoft.Health.ItemTypes.ExerciseSampleOneValue)
  name.vb: Collection(Of ExerciseSampleOneValue)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.ItemTypes.ExerciseSampleOneValue
    name: ExerciseSampleOneValue
    nameWithType: ExerciseSampleOneValue
    fullName: Microsoft.Health.ItemTypes.ExerciseSampleOneValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.ItemTypes.ExerciseSampleOneValue
    name: ExerciseSampleOneValue
    nameWithType: ExerciseSampleOneValue
    fullName: Microsoft.Health.ItemTypes.ExerciseSampleOneValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.Collection`1
  commentId: T:System.Collections.ObjectModel.Collection`1
  isExternal: true
  name: Collection<T>
  nameWithType: Collection<T>
  fullName: System.Collections.ObjectModel.Collection<T>
  nameWithType.vb: Collection(Of T)
  fullName.vb: System.Collections.ObjectModel.Collection(Of T)
  name.vb: Collection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: Microsoft.Health.ItemTypes.ExerciseSamplesData.TwoValuedSamples*
  commentId: Overload:Microsoft.Health.ItemTypes.ExerciseSamplesData.TwoValuedSamples
  isExternal: false
  name: TwoValuedSamples
  nameWithType: ExerciseSamplesData.TwoValuedSamples
  fullName: Microsoft.Health.ItemTypes.ExerciseSamplesData.TwoValuedSamples
- uid: System.Collections.ObjectModel.Collection{Microsoft.Health.ItemTypes.ExerciseSampleTwoValue}
  commentId: T:System.Collections.ObjectModel.Collection{Microsoft.Health.ItemTypes.ExerciseSampleTwoValue}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.Collection`1
  name: Collection<ExerciseSampleTwoValue>
  nameWithType: Collection<ExerciseSampleTwoValue>
  fullName: System.Collections.ObjectModel.Collection<Microsoft.Health.ItemTypes.ExerciseSampleTwoValue>
  nameWithType.vb: Collection(Of ExerciseSampleTwoValue)
  fullName.vb: System.Collections.ObjectModel.Collection(Of Microsoft.Health.ItemTypes.ExerciseSampleTwoValue)
  name.vb: Collection(Of ExerciseSampleTwoValue)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.ItemTypes.ExerciseSampleTwoValue
    name: ExerciseSampleTwoValue
    nameWithType: ExerciseSampleTwoValue
    fullName: Microsoft.Health.ItemTypes.ExerciseSampleTwoValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.ItemTypes.ExerciseSampleTwoValue
    name: ExerciseSampleTwoValue
    nameWithType: ExerciseSampleTwoValue
    fullName: Microsoft.Health.ItemTypes.ExerciseSampleTwoValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.OtherItemData.WriteXml(System.Xml.XmlWriter)
  commentId: M:Microsoft.Health.OtherItemData.WriteXml(System.Xml.XmlWriter)
  parent: Microsoft.Health.OtherItemData
  isExternal: true
  name: WriteXml(XmlWriter)
  nameWithType: OtherItemData.WriteXml(XmlWriter)
  fullName: Microsoft.Health.OtherItemData.WriteXml(System.Xml.XmlWriter)
  spec.csharp:
  - uid: Microsoft.Health.OtherItemData.WriteXml(System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: OtherItemData.WriteXml
    fullName: Microsoft.Health.OtherItemData.WriteXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.OtherItemData.WriteXml(System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: OtherItemData.WriteXml
    fullName: Microsoft.Health.OtherItemData.WriteXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ItemTypes.ExerciseSamplesData.WriteXml*
  commentId: Overload:Microsoft.Health.ItemTypes.ExerciseSamplesData.WriteXml
  isExternal: false
  name: WriteXml
  nameWithType: ExerciseSamplesData.WriteXml
  fullName: Microsoft.Health.ItemTypes.ExerciseSamplesData.WriteXml
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
- uid: System.Xml.XmlWriter
  commentId: T:System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: false
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
