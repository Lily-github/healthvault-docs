### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.ItemTypes.Address
  commentId: T:Microsoft.Health.ItemTypes.Address
  id: Address
  parent: Microsoft.Health.ItemTypes
  children:
  - Microsoft.Health.ItemTypes.Address.#ctor
  - Microsoft.Health.ItemTypes.Address.#ctor(System.String,System.String,System.String)
  - Microsoft.Health.ItemTypes.Address.#ctor(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})
  - Microsoft.Health.ItemTypes.Address.City
  - Microsoft.Health.ItemTypes.Address.Country
  - Microsoft.Health.ItemTypes.Address.County
  - Microsoft.Health.ItemTypes.Address.Description
  - Microsoft.Health.ItemTypes.Address.IsPrimary
  - Microsoft.Health.ItemTypes.Address.ParseXml(System.Xml.XPath.XPathNavigator)
  - Microsoft.Health.ItemTypes.Address.PostalCode
  - Microsoft.Health.ItemTypes.Address.State
  - Microsoft.Health.ItemTypes.Address.Street
  - Microsoft.Health.ItemTypes.Address.ToString
  - Microsoft.Health.ItemTypes.Address.WriteXml(System.String,System.Xml.XmlWriter)
  langs:
  - csharp
  - vb
  name: Address
  nameWithType: Address
  fullName: Microsoft.Health.ItemTypes.Address
  type: Class
  source:
    remote:
      path: Microsoft.Health.ItemTypes/Address.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Address
    path: Address.cs
    startLine: 20
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nRepresents a physical mailing address.\n"
  example: []
  syntax:
    content: 'public class Address : HealthRecordItemData'
    content.vb: >-
      Public Class Address
          Inherits HealthRecordItemData
  inheritance:
  - System.Object
  - Microsoft.Health.ItemTypes.HealthRecordItemData
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.ItemTypes.Address.#ctor
  commentId: M:Microsoft.Health.ItemTypes.Address.#ctor
  id: '#ctor'
  parent: Microsoft.Health.ItemTypes.Address
  langs:
  - csharp
  - vb
  name: Address()
  nameWithType: Address.Address()
  fullName: Microsoft.Health.ItemTypes.Address.Address()
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.ItemTypes/Address.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: Address.cs
    startLine: 26
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nCreates a new instance of the <xref href=\"Microsoft.Health.ItemTypes.Address\" data-throw-if-not-resolved=\"false\"></xref> class with default values.\n"
  example: []
  syntax:
    content: public Address()
    content.vb: Public Sub New
  overload: Microsoft.Health.ItemTypes.Address.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.ItemTypes.Address.#ctor(System.String,System.String,System.String)
  commentId: M:Microsoft.Health.ItemTypes.Address.#ctor(System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String)'
  parent: Microsoft.Health.ItemTypes.Address
  langs:
  - csharp
  - vb
  name: Address(String, String, String)
  nameWithType: Address.Address(String, String, String)
  fullName: Microsoft.Health.ItemTypes.Address.Address(System.String, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.ItemTypes/Address.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: Address.cs
    startLine: 52
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nCreates a new instance of the <xref href=\"Microsoft.Health.ItemTypes.Address\" data-throw-if-not-resolved=\"false\"></xref> class with \nvalues for the mandatory properties.\n"
  example: []
  syntax:
    content: public Address(string city, string country, string postalCode)
    content.vb: Public Sub New(city As String, country As String, postalCode As String)
    parameters:
    - id: city
      type: System.String
      description: "\nThe name of the city.\n"
    - id: country
      type: System.String
      description: "\nThe name of the country.\n"
    - id: postalCode
      type: System.String
      description: "\nThe postal code.\n"
  overload: Microsoft.Health.ItemTypes.Address.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">city</span>, <span class=\"paramref\">country</span> or\n<span class=\"paramref\">postalCode</span> parameter is <strong>null</strong> or empty.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.ItemTypes.Address.#ctor(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Microsoft.Health.ItemTypes.Address.#ctor(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})
  id: '#ctor(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})'
  parent: Microsoft.Health.ItemTypes.Address
  langs:
  - csharp
  - vb
  name: Address(String, String, String, IEnumerable<String>)
  nameWithType: Address.Address(String, String, String, IEnumerable<String>)
  fullName: Microsoft.Health.ItemTypes.Address.Address(System.String, System.String, System.String, System.Collections.Generic.IEnumerable<System.String>)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.ItemTypes/Address.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: Address.cs
    startLine: 89
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nCreates a new instance of the <xref href=\"Microsoft.Health.ItemTypes.Address\" data-throw-if-not-resolved=\"false\"></xref> class with \nvalues for the mandatory properties.\n"
  example: []
  syntax:
    content: public Address(string city, string country, string postalCode, IEnumerable<string> street)
    content.vb: Public Sub New(city As String, country As String, postalCode As String, street As IEnumerable(Of String))
    parameters:
    - id: city
      type: System.String
      description: "\nThe name of the city.\n"
    - id: country
      type: System.String
      description: "\nThe name of the country.\n"
    - id: postalCode
      type: System.String
      description: "\nThe postal code.\n"
    - id: street
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "\nThe street address.\n"
  overload: Microsoft.Health.ItemTypes.Address.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">street</span>, <span class=\"paramref\">city</span>, <span class=\"paramref\">country</span> or\n<span class=\"paramref\">postalCode</span> parameter is <strong>null</strong> or empty.\n"
  nameWithType.vb: Address.Address(String, String, String, IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.ItemTypes.Address.Address(System.String, System.String, System.String, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: Address(String, String, String, IEnumerable(Of String))
- uid: Microsoft.Health.ItemTypes.Address.ParseXml(System.Xml.XPath.XPathNavigator)
  commentId: M:Microsoft.Health.ItemTypes.Address.ParseXml(System.Xml.XPath.XPathNavigator)
  id: ParseXml(System.Xml.XPath.XPathNavigator)
  parent: Microsoft.Health.ItemTypes.Address
  langs:
  - csharp
  - vb
  name: ParseXml(XPathNavigator)
  nameWithType: Address.ParseXml(XPathNavigator)
  fullName: Microsoft.Health.ItemTypes.Address.ParseXml(System.Xml.XPath.XPathNavigator)
  type: Method
  source:
    remote:
      path: Microsoft.Health.ItemTypes/Address.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ParseXml
    path: Address.cs
    startLine: 123
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nPopulates the data from the specified XML.\n"
  example: []
  syntax:
    content: public override void ParseXml(XPathNavigator navigator)
    content.vb: Public Overrides Sub ParseXml(navigator As XPathNavigator)
    parameters:
    - id: navigator
      type: System.Xml.XPath.XPathNavigator
      description: "\nThe XML containing the address information.\n"
  overridden: Microsoft.Health.ItemTypes.HealthRecordItemData.ParseXml(System.Xml.XPath.XPathNavigator)
  overload: Microsoft.Health.ItemTypes.Address.ParseXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <span class=\"paramref\">navigator</span> parameter is <strong>null</strong>.\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Health.ItemTypes.Address.WriteXml(System.String,System.Xml.XmlWriter)
  commentId: M:Microsoft.Health.ItemTypes.Address.WriteXml(System.String,System.Xml.XmlWriter)
  id: WriteXml(System.String,System.Xml.XmlWriter)
  parent: Microsoft.Health.ItemTypes.Address
  langs:
  - csharp
  - vb
  name: WriteXml(String, XmlWriter)
  nameWithType: Address.WriteXml(String, XmlWriter)
  fullName: Microsoft.Health.ItemTypes.Address.WriteXml(System.String, System.Xml.XmlWriter)
  type: Method
  source:
    remote:
      path: Microsoft.Health.ItemTypes/Address.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: WriteXml
    path: Address.cs
    startLine: 188
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nWrites the XML representation of the address into\nthe specified XML writer.\n"
  example: []
  syntax:
    content: public override void WriteXml(string nodeName, XmlWriter writer)
    content.vb: Public Overrides Sub WriteXml(nodeName As String, writer As XmlWriter)
    parameters:
    - id: nodeName
      type: System.String
      description: "\nThe name of the outer node for the address.\n"
    - id: writer
      type: System.Xml.XmlWriter
      description: "\nThe XML writer into which the address should be \nwritten.\n"
  overridden: Microsoft.Health.ItemTypes.HealthRecordItemData.WriteXml(System.String,System.Xml.XmlWriter)
  overload: Microsoft.Health.ItemTypes.Address.WriteXml*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">nodeName</span> parameter is <strong>null</strong> or empty.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <span class=\"paramref\">writer</span> parameter is <strong>null</strong>.\n"
  - type: Microsoft.Health.HealthRecordItemSerializationException
    commentId: T:Microsoft.Health.HealthRecordItemSerializationException
    description: "\nThe <xref href=\"Microsoft.Health.ItemTypes.Address.Street\" data-throw-if-not-resolved=\"false\"></xref> property is empty or <xref href=\"Microsoft.Health.ItemTypes.Address.City\" data-throw-if-not-resolved=\"false\"></xref>, \n<xref href=\"Microsoft.Health.ItemTypes.Address.Country\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"Microsoft.Health.ItemTypes.Address.PostalCode\" data-throw-if-not-resolved=\"false\"></xref> property has not been set.\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Health.ItemTypes.Address.Description
  commentId: P:Microsoft.Health.ItemTypes.Address.Description
  id: Description
  parent: Microsoft.Health.ItemTypes.Address
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: Address.Description
  fullName: Microsoft.Health.ItemTypes.Address.Description
  type: Property
  source:
    remote:
      path: Microsoft.Health.ItemTypes/Address.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Description
    path: Address.cs
    startLine: 250
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nGets or sets the description for the address.\n"
  remarks: "\nSet the value to <strong>null</strong> if the description should not be stored.\n"
  example: []
  syntax:
    content: public string Description { get; set; }
    content.vb: Public Property Description As String
    parameters: []
    return:
      type: System.String
      description: "\nA string representing the description.\n"
  overload: Microsoft.Health.ItemTypes.Address.Description*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">value</span> contains only whitespace.\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.ItemTypes.Address.IsPrimary
  commentId: P:Microsoft.Health.ItemTypes.Address.IsPrimary
  id: IsPrimary
  parent: Microsoft.Health.ItemTypes.Address
  langs:
  - csharp
  - vb
  name: IsPrimary
  nameWithType: Address.IsPrimary
  fullName: Microsoft.Health.ItemTypes.Address.IsPrimary
  type: Property
  source:
    remote:
      path: Microsoft.Health.ItemTypes/Address.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IsPrimary
    path: Address.cs
    startLine: 274
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nGets or sets a value indicating whether the address is the primary \naddress for the person.\n"
  remarks: "\nSet the value to <strong>null</strong> if <xref href=\"Microsoft.Health.ItemTypes.Address.IsPrimary\" data-throw-if-not-resolved=\"false\"></xref> should not be stored.\n"
  example: []
  syntax:
    content: public bool ? IsPrimary { get; set; }
    content.vb: Public Property IsPrimary As Boolean?
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
      description: "\n<strong>true</strong> if the address is the primary one; otherwise, <strong>false</strong>.\n"
  overload: Microsoft.Health.ItemTypes.Address.IsPrimary*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.ItemTypes.Address.Street
  commentId: P:Microsoft.Health.ItemTypes.Address.Street
  id: Street
  parent: Microsoft.Health.ItemTypes.Address
  langs:
  - csharp
  - vb
  name: Street
  nameWithType: Address.Street
  fullName: Microsoft.Health.ItemTypes.Address.Street
  type: Property
  source:
    remote:
      path: Microsoft.Health.ItemTypes/Address.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Street
    path: Address.cs
    startLine: 289
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nGets the street number, name, apartment, and so on.\n"
  example: []
  syntax:
    content: public Collection<string> Street { get; }
    content.vb: Public ReadOnly Property Street As Collection(Of String)
    parameters: []
    return:
      type: System.Collections.ObjectModel.Collection{System.String}
      description: "\nA string collection of address information.\n"
  overload: Microsoft.Health.ItemTypes.Address.Street*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.ItemTypes.Address.City
  commentId: P:Microsoft.Health.ItemTypes.Address.City
  id: City
  parent: Microsoft.Health.ItemTypes.Address
  langs:
  - csharp
  - vb
  name: City
  nameWithType: Address.City
  fullName: Microsoft.Health.ItemTypes.Address.City
  type: Property
  source:
    remote:
      path: Microsoft.Health.ItemTypes/Address.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: City
    path: Address.cs
    startLine: 308
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nGets or sets the city.\n"
  example: []
  syntax:
    content: public string City { get; set; }
    content.vb: Public Property City As String
    parameters: []
    return:
      type: System.String
      description: "\nA string representing the city name.\n"
  overload: Microsoft.Health.ItemTypes.Address.City*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">value</span> parameter is <strong>null</strong>, empty, or contains only\nwhitespace during set.\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.ItemTypes.Address.State
  commentId: P:Microsoft.Health.ItemTypes.Address.State
  id: State
  parent: Microsoft.Health.ItemTypes.Address
  langs:
  - csharp
  - vb
  name: State
  nameWithType: Address.State
  fullName: Microsoft.Health.ItemTypes.Address.State
  type: Property
  source:
    remote:
      path: Microsoft.Health.ItemTypes/Address.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: State
    path: Address.cs
    startLine: 336
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nGets or sets the state.\n"
  remarks: "\nSet the value to <strong>null</strong> if the state should not be stored.\n"
  example: []
  syntax:
    content: public string State { get; set; }
    content.vb: Public Property State As String
    parameters: []
    return:
      type: System.String
      description: "\nA string representing the state name.\n"
  overload: Microsoft.Health.ItemTypes.Address.State*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">value</span> contains only whitespace.\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.ItemTypes.Address.Country
  commentId: P:Microsoft.Health.ItemTypes.Address.Country
  id: Country
  parent: Microsoft.Health.ItemTypes.Address
  langs:
  - csharp
  - vb
  name: Country
  nameWithType: Address.Country
  fullName: Microsoft.Health.ItemTypes.Address.Country
  type: Property
  source:
    remote:
      path: Microsoft.Health.ItemTypes/Address.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Country
    path: Address.cs
    startLine: 360
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nGets or sets the country.\n"
  example: []
  syntax:
    content: public string Country { get; set; }
    content.vb: Public Property Country As String
    parameters: []
    return:
      type: System.String
      description: "\nA string representing the country name.\n"
  overload: Microsoft.Health.ItemTypes.Address.Country*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">value</span> parameter is <strong>null</strong>, empty, or contains only \nwhitespace during set.\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.ItemTypes.Address.PostalCode
  commentId: P:Microsoft.Health.ItemTypes.Address.PostalCode
  id: PostalCode
  parent: Microsoft.Health.ItemTypes.Address
  langs:
  - csharp
  - vb
  name: PostalCode
  nameWithType: Address.PostalCode
  fullName: Microsoft.Health.ItemTypes.Address.PostalCode
  type: Property
  source:
    remote:
      path: Microsoft.Health.ItemTypes/Address.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: PostalCode
    path: Address.cs
    startLine: 385
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nGets or sets the postal code.\n"
  example: []
  syntax:
    content: public string PostalCode { get; set; }
    content.vb: Public Property PostalCode As String
    parameters: []
    return:
      type: System.String
      description: "\nA string representing the postal code.\n"
  overload: Microsoft.Health.ItemTypes.Address.PostalCode*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">value</span> parameter is <strong>null</strong>, empty, or contains only\nwhitespace during set.\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.ItemTypes.Address.County
  commentId: P:Microsoft.Health.ItemTypes.Address.County
  id: County
  parent: Microsoft.Health.ItemTypes.Address
  langs:
  - csharp
  - vb
  name: County
  nameWithType: Address.County
  fullName: Microsoft.Health.ItemTypes.Address.County
  type: Property
  source:
    remote:
      path: Microsoft.Health.ItemTypes/Address.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: County
    path: Address.cs
    startLine: 413
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nGets or sets the county.\n"
  remarks: "\nSet the value to <strong>null</strong> if the county should not be stored.\n"
  example: []
  syntax:
    content: public string County { get; set; }
    content.vb: Public Property County As String
    parameters: []
    return:
      type: System.String
      description: "\nA string representing the county name.\n"
  overload: Microsoft.Health.ItemTypes.Address.County*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">value</span> contains only whitespace.\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.ItemTypes.Address.ToString
  commentId: M:Microsoft.Health.ItemTypes.Address.ToString
  id: ToString
  parent: Microsoft.Health.ItemTypes.Address
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Address.ToString()
  fullName: Microsoft.Health.ItemTypes.Address.ToString()
  type: Method
  source:
    remote:
      path: Microsoft.Health.ItemTypes/Address.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ToString
    path: Address.cs
    startLine: 438
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nGets a string representation of the address.\n"
  example: []
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\nA string representation of the address with commas separating the \"lines\"\nof the address.\n"
  overridden: System.Object.ToString
  overload: Microsoft.Health.ItemTypes.Address.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Microsoft.Health.ItemTypes
  commentId: N:Microsoft.Health.ItemTypes
  isExternal: false
  name: Microsoft.Health.ItemTypes
  nameWithType: Microsoft.Health.ItemTypes
  fullName: Microsoft.Health.ItemTypes
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Health.ItemTypes.HealthRecordItemData
  commentId: T:Microsoft.Health.ItemTypes.HealthRecordItemData
  parent: Microsoft.Health.ItemTypes
  isExternal: false
  name: HealthRecordItemData
  nameWithType: HealthRecordItemData
  fullName: Microsoft.Health.ItemTypes.HealthRecordItemData
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.ItemTypes.Address
  commentId: T:Microsoft.Health.ItemTypes.Address
  parent: Microsoft.Health.ItemTypes
  isExternal: false
  name: Address
  nameWithType: Address
  fullName: Microsoft.Health.ItemTypes.Address
- uid: Microsoft.Health.ItemTypes.Address.#ctor*
  commentId: Overload:Microsoft.Health.ItemTypes.Address.#ctor
  isExternal: false
  name: Address
  nameWithType: Address.Address
  fullName: Microsoft.Health.ItemTypes.Address.Address
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Health.ItemTypes.HealthRecordItemData.ParseXml(System.Xml.XPath.XPathNavigator)
  commentId: M:Microsoft.Health.ItemTypes.HealthRecordItemData.ParseXml(System.Xml.XPath.XPathNavigator)
  parent: Microsoft.Health.ItemTypes.HealthRecordItemData
  isExternal: true
  name: ParseXml(XPathNavigator)
  nameWithType: HealthRecordItemData.ParseXml(XPathNavigator)
  fullName: Microsoft.Health.ItemTypes.HealthRecordItemData.ParseXml(System.Xml.XPath.XPathNavigator)
  spec.csharp:
  - uid: Microsoft.Health.ItemTypes.HealthRecordItemData.ParseXml(System.Xml.XPath.XPathNavigator)
    name: ParseXml
    nameWithType: HealthRecordItemData.ParseXml
    fullName: Microsoft.Health.ItemTypes.HealthRecordItemData.ParseXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XPath.XPathNavigator
    name: XPathNavigator
    nameWithType: XPathNavigator
    fullName: System.Xml.XPath.XPathNavigator
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.ItemTypes.HealthRecordItemData.ParseXml(System.Xml.XPath.XPathNavigator)
    name: ParseXml
    nameWithType: HealthRecordItemData.ParseXml
    fullName: Microsoft.Health.ItemTypes.HealthRecordItemData.ParseXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XPath.XPathNavigator
    name: XPathNavigator
    nameWithType: XPathNavigator
    fullName: System.Xml.XPath.XPathNavigator
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ItemTypes.Address.ParseXml*
  commentId: Overload:Microsoft.Health.ItemTypes.Address.ParseXml
  isExternal: false
  name: ParseXml
  nameWithType: Address.ParseXml
  fullName: Microsoft.Health.ItemTypes.Address.ParseXml
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.Xml.XPath.XPathNavigator
  commentId: T:System.Xml.XPath.XPathNavigator
  parent: System.Xml.XPath
  isExternal: true
  name: XPathNavigator
  nameWithType: XPathNavigator
  fullName: System.Xml.XPath.XPathNavigator
- uid: System.Xml.XPath
  commentId: N:System.Xml.XPath
  isExternal: false
  name: System.Xml.XPath
  nameWithType: System.Xml.XPath
  fullName: System.Xml.XPath
- uid: Microsoft.Health.ItemTypes.Address.Street
  commentId: P:Microsoft.Health.ItemTypes.Address.Street
- uid: Microsoft.Health.ItemTypes.Address.City
  commentId: P:Microsoft.Health.ItemTypes.Address.City
- uid: Microsoft.Health.ItemTypes.Address.Country
  commentId: P:Microsoft.Health.ItemTypes.Address.Country
- uid: Microsoft.Health.ItemTypes.Address.PostalCode
  commentId: P:Microsoft.Health.ItemTypes.Address.PostalCode
- uid: Microsoft.Health.ItemTypes.HealthRecordItemData.WriteXml(System.String,System.Xml.XmlWriter)
  commentId: M:Microsoft.Health.ItemTypes.HealthRecordItemData.WriteXml(System.String,System.Xml.XmlWriter)
  parent: Microsoft.Health.ItemTypes.HealthRecordItemData
  isExternal: true
  name: WriteXml(String, XmlWriter)
  nameWithType: HealthRecordItemData.WriteXml(String, XmlWriter)
  fullName: Microsoft.Health.ItemTypes.HealthRecordItemData.WriteXml(System.String, System.Xml.XmlWriter)
  spec.csharp:
  - uid: Microsoft.Health.ItemTypes.HealthRecordItemData.WriteXml(System.String,System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: HealthRecordItemData.WriteXml
    fullName: Microsoft.Health.ItemTypes.HealthRecordItemData.WriteXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.ItemTypes.HealthRecordItemData.WriteXml(System.String,System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: HealthRecordItemData.WriteXml
    fullName: Microsoft.Health.ItemTypes.HealthRecordItemData.WriteXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ItemTypes.Address.WriteXml*
  commentId: Overload:Microsoft.Health.ItemTypes.Address.WriteXml
  isExternal: false
  name: WriteXml
  nameWithType: Address.WriteXml
  fullName: Microsoft.Health.ItemTypes.Address.WriteXml
- uid: Microsoft.Health.HealthRecordItemSerializationException
  commentId: T:Microsoft.Health.HealthRecordItemSerializationException
- uid: System.Xml.XmlWriter
  commentId: T:System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: false
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: Microsoft.Health.ItemTypes.Address.Description*
  commentId: Overload:Microsoft.Health.ItemTypes.Address.Description
  isExternal: false
  name: Description
  nameWithType: Address.Description
  fullName: Microsoft.Health.ItemTypes.Address.Description
- uid: Microsoft.Health.ItemTypes.Address.IsPrimary
  commentId: P:Microsoft.Health.ItemTypes.Address.IsPrimary
- uid: Microsoft.Health.ItemTypes.Address.IsPrimary*
  commentId: Overload:Microsoft.Health.ItemTypes.Address.IsPrimary
  isExternal: false
  name: IsPrimary
  nameWithType: Address.IsPrimary
  fullName: Microsoft.Health.ItemTypes.Address.IsPrimary
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullName.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ItemTypes.Address.Street*
  commentId: Overload:Microsoft.Health.ItemTypes.Address.Street
  isExternal: false
  name: Street
  nameWithType: Address.Street
  fullName: Microsoft.Health.ItemTypes.Address.Street
- uid: System.Collections.ObjectModel.Collection{System.String}
  commentId: T:System.Collections.ObjectModel.Collection{System.String}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.Collection`1
  name: Collection<String>
  nameWithType: Collection<String>
  fullName: System.Collections.ObjectModel.Collection<System.String>
  nameWithType.vb: Collection(Of String)
  fullName.vb: System.Collections.ObjectModel.Collection(Of System.String)
  name.vb: Collection(Of String)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.Collection`1
  commentId: T:System.Collections.ObjectModel.Collection`1
  isExternal: true
  name: Collection<T>
  nameWithType: Collection<T>
  fullName: System.Collections.ObjectModel.Collection<T>
  nameWithType.vb: Collection(Of T)
  fullName.vb: System.Collections.ObjectModel.Collection(Of T)
  name.vb: Collection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: Microsoft.Health.ItemTypes.Address.City*
  commentId: Overload:Microsoft.Health.ItemTypes.Address.City
  isExternal: false
  name: City
  nameWithType: Address.City
  fullName: Microsoft.Health.ItemTypes.Address.City
- uid: Microsoft.Health.ItemTypes.Address.State*
  commentId: Overload:Microsoft.Health.ItemTypes.Address.State
  isExternal: false
  name: State
  nameWithType: Address.State
  fullName: Microsoft.Health.ItemTypes.Address.State
- uid: Microsoft.Health.ItemTypes.Address.Country*
  commentId: Overload:Microsoft.Health.ItemTypes.Address.Country
  isExternal: false
  name: Country
  nameWithType: Address.Country
  fullName: Microsoft.Health.ItemTypes.Address.Country
- uid: Microsoft.Health.ItemTypes.Address.PostalCode*
  commentId: Overload:Microsoft.Health.ItemTypes.Address.PostalCode
  isExternal: false
  name: PostalCode
  nameWithType: Address.PostalCode
  fullName: Microsoft.Health.ItemTypes.Address.PostalCode
- uid: Microsoft.Health.ItemTypes.Address.County*
  commentId: Overload:Microsoft.Health.ItemTypes.Address.County
  isExternal: false
  name: County
  nameWithType: Address.County
  fullName: Microsoft.Health.ItemTypes.Address.County
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ItemTypes.Address.ToString*
  commentId: Overload:Microsoft.Health.ItemTypes.Address.ToString
  isExternal: false
  name: ToString
  nameWithType: Address.ToString
  fullName: Microsoft.Health.ItemTypes.Address.ToString
