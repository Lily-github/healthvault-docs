### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.ItemTypes.CodableValue
  commentId: T:Microsoft.Health.ItemTypes.CodableValue
  id: CodableValue
  parent: Microsoft.Health.ItemTypes
  children:
  - Microsoft.Health.ItemTypes.CodableValue.#ctor
  - Microsoft.Health.ItemTypes.CodableValue.#ctor(System.String)
  - Microsoft.Health.ItemTypes.CodableValue.#ctor(System.String,Microsoft.Health.ItemTypes.CodedValue)
  - Microsoft.Health.ItemTypes.CodableValue.#ctor(System.String,Microsoft.Health.VocabularyItem)
  - Microsoft.Health.ItemTypes.CodableValue.#ctor(System.String,System.String,Microsoft.Health.VocabularyKey)
  - Microsoft.Health.ItemTypes.CodableValue.#ctor(System.String,System.String,System.String,System.String,System.String)
  - Microsoft.Health.ItemTypes.CodableValue.Add(Microsoft.Health.ItemTypes.CodedValue)
  - Microsoft.Health.ItemTypes.CodableValue.Add(Microsoft.Health.VocabularyItem)
  - Microsoft.Health.ItemTypes.CodableValue.Clear
  - Microsoft.Health.ItemTypes.CodableValue.Contains(Microsoft.Health.ItemTypes.CodedValue)
  - Microsoft.Health.ItemTypes.CodableValue.CopyTo(Microsoft.Health.ItemTypes.CodedValue[],System.Int32)
  - Microsoft.Health.ItemTypes.CodableValue.Count
  - Microsoft.Health.ItemTypes.CodableValue.GetEnumerator
  - Microsoft.Health.ItemTypes.CodableValue.IndexOf(Microsoft.Health.ItemTypes.CodedValue)
  - Microsoft.Health.ItemTypes.CodableValue.Insert(System.Int32,Microsoft.Health.ItemTypes.CodedValue)
  - Microsoft.Health.ItemTypes.CodableValue.IsReadOnly
  - Microsoft.Health.ItemTypes.CodableValue.Item(System.Int32)
  - Microsoft.Health.ItemTypes.CodableValue.ParseXml(System.Xml.XPath.XPathNavigator)
  - Microsoft.Health.ItemTypes.CodableValue.Remove(Microsoft.Health.ItemTypes.CodedValue)
  - Microsoft.Health.ItemTypes.CodableValue.RemoveAt(System.Int32)
  - Microsoft.Health.ItemTypes.CodableValue.System#Collections#IEnumerable#GetEnumerator
  - Microsoft.Health.ItemTypes.CodableValue.Text
  - Microsoft.Health.ItemTypes.CodableValue.ToString
  - Microsoft.Health.ItemTypes.CodableValue.WriteXml(System.String,System.Xml.XmlWriter)
  langs:
  - csharp
  - vb
  name: CodableValue
  nameWithType: CodableValue
  fullName: Microsoft.Health.ItemTypes.CodableValue
  type: Class
  source:
    remote:
      path: Microsoft.Health.ItemTypes/CodableValue.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CodableValue
    path: CodableValue.cs
    startLine: 20
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nRepresents the value and code of an entry in the HealthVault vocabulary\nstore.\n"
  example: []
  syntax:
    content: 'public class CodableValue : HealthRecordItemData, IList<CodedValue>, ICollection<CodedValue>, IEnumerable<CodedValue>, IEnumerable'
    content.vb: >-
      Public Class CodableValue
          Inherits HealthRecordItemData
          Implements IList(Of CodedValue), ICollection(Of CodedValue), IEnumerable(Of CodedValue), IEnumerable
  inheritance:
  - System.Object
  - Microsoft.Health.ItemTypes.HealthRecordItemData
  implements:
  - System.Collections.Generic.IList{Microsoft.Health.ItemTypes.CodedValue}
  - System.Collections.Generic.ICollection{Microsoft.Health.ItemTypes.CodedValue}
  - System.Collections.Generic.IEnumerable{Microsoft.Health.ItemTypes.CodedValue}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.ItemTypes.CodableValue.#ctor
  commentId: M:Microsoft.Health.ItemTypes.CodableValue.#ctor
  id: '#ctor'
  parent: Microsoft.Health.ItemTypes.CodableValue
  langs:
  - csharp
  - vb
  name: CodableValue()
  nameWithType: CodableValue.CodableValue()
  fullName: Microsoft.Health.ItemTypes.CodableValue.CodableValue()
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.ItemTypes/CodableValue.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: CodableValue.cs
    startLine: 27
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nConstructs a CodableValue with empty values.\n"
  example: []
  syntax:
    content: public CodableValue()
    content.vb: Public Sub New
  overload: Microsoft.Health.ItemTypes.CodableValue.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.ItemTypes.CodableValue.#ctor(System.String)
  commentId: M:Microsoft.Health.ItemTypes.CodableValue.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.Health.ItemTypes.CodableValue
  langs:
  - csharp
  - vb
  name: CodableValue(String)
  nameWithType: CodableValue.CodableValue(String)
  fullName: Microsoft.Health.ItemTypes.CodableValue.CodableValue(System.String)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.ItemTypes/CodableValue.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: CodableValue.cs
    startLine: 43
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nConstructs a CodableValue with an initial value for the Text.\n"
  example: []
  syntax:
    content: public CodableValue(string text)
    content.vb: Public Sub New(text As String)
    parameters:
    - id: text
      type: System.String
      description: "\nThe text value of the codable value.\n"
  overload: Microsoft.Health.ItemTypes.CodableValue.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">text</span> parameter is <strong>null</strong> or empty.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.ItemTypes.CodableValue.#ctor(System.String,Microsoft.Health.ItemTypes.CodedValue)
  commentId: M:Microsoft.Health.ItemTypes.CodableValue.#ctor(System.String,Microsoft.Health.ItemTypes.CodedValue)
  id: '#ctor(System.String,Microsoft.Health.ItemTypes.CodedValue)'
  parent: Microsoft.Health.ItemTypes.CodableValue
  langs:
  - csharp
  - vb
  name: CodableValue(String, CodedValue)
  nameWithType: CodableValue.CodableValue(String, CodedValue)
  fullName: Microsoft.Health.ItemTypes.CodableValue.CodableValue(System.String, Microsoft.Health.ItemTypes.CodedValue)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.ItemTypes/CodableValue.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: CodableValue.cs
    startLine: 65
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nConstructs a CodableValue with an initial value for the Text\nand the specified code.\n"
  example: []
  syntax:
    content: public CodableValue(string text, CodedValue code)
    content.vb: Public Sub New(text As String, code As CodedValue)
    parameters:
    - id: text
      type: System.String
      description: "\nThe text value of the codable value.\n"
    - id: code
      type: Microsoft.Health.ItemTypes.CodedValue
      description: "\nThe code representation of the text value.\n"
  overload: Microsoft.Health.ItemTypes.CodableValue.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <span class=\"paramref\">text</span> parameter is <strong>null</strong>.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.ItemTypes.CodableValue.#ctor(System.String,Microsoft.Health.VocabularyItem)
  commentId: M:Microsoft.Health.ItemTypes.CodableValue.#ctor(System.String,Microsoft.Health.VocabularyItem)
  id: '#ctor(System.String,Microsoft.Health.VocabularyItem)'
  parent: Microsoft.Health.ItemTypes.CodableValue
  langs:
  - csharp
  - vb
  name: CodableValue(String, VocabularyItem)
  nameWithType: CodableValue.CodableValue(String, VocabularyItem)
  fullName: Microsoft.Health.ItemTypes.CodableValue.CodableValue(System.String, Microsoft.Health.VocabularyItem)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.ItemTypes/CodableValue.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: CodableValue.cs
    startLine: 92
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nConstructs a CodableValue based on display value and\na <xref href=\"Microsoft.Health.VocabularyItem\" data-throw-if-not-resolved=\"false\"></xref>. \n"
  example: []
  syntax:
    content: public CodableValue(string text, VocabularyItem item)
    content.vb: Public Sub New(text As String, item As VocabularyItem)
    parameters:
    - id: text
      type: System.String
      description: "\nThe text value of the codable value.\n"
    - id: item
      type: Microsoft.Health.VocabularyItem
      description: "\nThe <xref href=\"Microsoft.Health.VocabularyItem\" data-throw-if-not-resolved=\"false\"></xref>. \n"
  overload: Microsoft.Health.ItemTypes.CodableValue.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <span class=\"paramref\">text</span> parameter is <strong>null</strong>.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.ItemTypes.CodableValue.#ctor(System.String,System.String,System.String,System.String,System.String)
  commentId: M:Microsoft.Health.ItemTypes.CodableValue.#ctor(System.String,System.String,System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String,System.String,System.String)'
  parent: Microsoft.Health.ItemTypes.CodableValue
  langs:
  - csharp
  - vb
  name: CodableValue(String, String, String, String, String)
  nameWithType: CodableValue.CodableValue(String, String, String, String, String)
  fullName: Microsoft.Health.ItemTypes.CodableValue.CodableValue(System.String, System.String, System.String, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.ItemTypes/CodableValue.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: CodableValue.cs
    startLine: 131
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nCreates a new instance of the <xref href=\"Microsoft.Health.ItemTypes.CodableValue\" data-throw-if-not-resolved=\"false\"></xref> class \nwith the specified text, code value, vocabulary name, family, and version.\n"
  example: []
  syntax:
    content: public CodableValue(string text, string code, string vocabularyName, string family, string version)
    content.vb: Public Sub New(text As String, code As String, vocabularyName As String, family As String, version As String)
    parameters:
    - id: text
      type: System.String
      description: "\nThe text value of the codable value.\n"
    - id: code
      type: System.String
      description: "\nThe code representation of the text value.\n"
    - id: vocabularyName
      type: System.String
      description: "\nThe name of the vocabulary the code belongs to.\n"
    - id: family
      type: System.String
      description: "\nThe family of vocabulary terms that the code belongs to.\n"
    - id: version
      type: System.String
      description: "\nThe version of the vocabulary the code belongs to.\n"
  overload: Microsoft.Health.ItemTypes.CodableValue.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">text</span> or <span class=\"paramref\">code</span> or \n<span class=\"paramref\">vocabularyName</span> parameter is <strong>null</strong> or empty.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.ItemTypes.CodableValue.#ctor(System.String,System.String,Microsoft.Health.VocabularyKey)
  commentId: M:Microsoft.Health.ItemTypes.CodableValue.#ctor(System.String,System.String,Microsoft.Health.VocabularyKey)
  id: '#ctor(System.String,System.String,Microsoft.Health.VocabularyKey)'
  parent: Microsoft.Health.ItemTypes.CodableValue
  langs:
  - csharp
  - vb
  name: CodableValue(String, String, VocabularyKey)
  nameWithType: CodableValue.CodableValue(String, String, VocabularyKey)
  fullName: Microsoft.Health.ItemTypes.CodableValue.CodableValue(System.String, System.String, Microsoft.Health.VocabularyKey)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.ItemTypes/CodableValue.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: CodableValue.cs
    startLine: 164
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nCreates a new instance of the <xref href=\"Microsoft.Health.ItemTypes.CodableValue\" data-throw-if-not-resolved=\"false\"></xref> class \nwith the specified text, code value, and vocabulary key.\n"
  example: []
  syntax:
    content: public CodableValue(string text, string code, VocabularyKey key)
    content.vb: Public Sub New(text As String, code As String, key As VocabularyKey)
    parameters:
    - id: text
      type: System.String
      description: "\nThe text value of the codable value.\n"
    - id: code
      type: System.String
      description: "\nThe code representation of the text value.\n"
    - id: key
      type: Microsoft.Health.VocabularyKey
      description: "\nkey for identifying a Vocabulary in the HealthLexicon.\n"
  overload: Microsoft.Health.ItemTypes.CodableValue.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">text</span> or <span class=\"paramref\">code</span> or <span class=\"paramref\">key</span>\nparameter is <strong>null</strong>.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.ItemTypes.CodableValue.Item(System.Int32)
  commentId: P:Microsoft.Health.ItemTypes.CodableValue.Item(System.Int32)
  id: Item(System.Int32)
  parent: Microsoft.Health.ItemTypes.CodableValue
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: CodableValue.Item[Int32]
  fullName: Microsoft.Health.ItemTypes.CodableValue.Item[System.Int32]
  type: Property
  source:
    remote:
      path: Microsoft.Health.ItemTypes/CodableValue.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: this[]
    path: CodableValue.cs
    startLine: 194
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nGets or sets the element at the specified index.\n"
  example: []
  syntax:
    content: public CodedValue this[int index] { get; set; }
    content.vb: Public Property Item(index As Integer) As CodedValue
    parameters:
    - id: index
      type: System.Int32
      description: "\nThe zero-based index of the element to get or set\n"
    return:
      type: Microsoft.Health.ItemTypes.CodedValue
      description: "\nThe code item at the specified index.\n"
  overload: Microsoft.Health.ItemTypes.CodableValue.Item*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\nThe <span class=\"paramref\">index</span> parameter is out of range.\n"
  implements:
  - System.Collections.Generic.IList{Microsoft.Health.ItemTypes.CodedValue}.Item(System.Int32)
  nameWithType.vb: CodableValue.Item(Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.ItemTypes.CodableValue.Item(System.Int32)
  name.vb: Item(Int32)
- uid: Microsoft.Health.ItemTypes.CodableValue.IndexOf(Microsoft.Health.ItemTypes.CodedValue)
  commentId: M:Microsoft.Health.ItemTypes.CodableValue.IndexOf(Microsoft.Health.ItemTypes.CodedValue)
  id: IndexOf(Microsoft.Health.ItemTypes.CodedValue)
  parent: Microsoft.Health.ItemTypes.CodableValue
  langs:
  - csharp
  - vb
  name: IndexOf(CodedValue)
  nameWithType: CodableValue.IndexOf(CodedValue)
  fullName: Microsoft.Health.ItemTypes.CodableValue.IndexOf(Microsoft.Health.ItemTypes.CodedValue)
  type: Method
  source:
    remote:
      path: Microsoft.Health.ItemTypes/CodableValue.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IndexOf
    path: CodableValue.cs
    startLine: 212
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nDetermines the index of a specific item\n"
  example: []
  syntax:
    content: public int IndexOf(CodedValue item)
    content.vb: Public Function IndexOf(item As CodedValue) As Integer
    parameters:
    - id: item
      type: Microsoft.Health.ItemTypes.CodedValue
      description: "\nThe <xref href=\"Microsoft.Health.ItemTypes.CodedValue\" data-throw-if-not-resolved=\"false\"></xref> to find the index of.\n"
    return:
      type: System.Int32
      description: "\nThe index of item if found in the list; otherwise, -1.\n"
  overload: Microsoft.Health.ItemTypes.CodableValue.IndexOf*
  implements:
  - System.Collections.Generic.IList{Microsoft.Health.ItemTypes.CodedValue}.IndexOf(Microsoft.Health.ItemTypes.CodedValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.ItemTypes.CodableValue.Insert(System.Int32,Microsoft.Health.ItemTypes.CodedValue)
  commentId: M:Microsoft.Health.ItemTypes.CodableValue.Insert(System.Int32,Microsoft.Health.ItemTypes.CodedValue)
  id: Insert(System.Int32,Microsoft.Health.ItemTypes.CodedValue)
  parent: Microsoft.Health.ItemTypes.CodableValue
  langs:
  - csharp
  - vb
  name: Insert(Int32, CodedValue)
  nameWithType: CodableValue.Insert(Int32, CodedValue)
  fullName: Microsoft.Health.ItemTypes.CodableValue.Insert(System.Int32, Microsoft.Health.ItemTypes.CodedValue)
  type: Method
  source:
    remote:
      path: Microsoft.Health.ItemTypes/CodableValue.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Insert
    path: CodableValue.cs
    startLine: 233
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nInserts an code item at the specified index.\n"
  example: []
  syntax:
    content: public void Insert(int index, CodedValue item)
    content.vb: Public Sub Insert(index As Integer, item As CodedValue)
    parameters:
    - id: index
      type: System.Int32
      description: "\nThe zero-based index at which item should be inserted.\n"
    - id: item
      type: Microsoft.Health.ItemTypes.CodedValue
      description: "\nThe object to insert.\n"
  overload: Microsoft.Health.ItemTypes.CodableValue.Insert*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\nThe <span class=\"paramref\">index</span> parameter is out of range.\n"
  implements:
  - System.Collections.Generic.IList{Microsoft.Health.ItemTypes.CodedValue}.Insert(System.Int32,Microsoft.Health.ItemTypes.CodedValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.ItemTypes.CodableValue.RemoveAt(System.Int32)
  commentId: M:Microsoft.Health.ItemTypes.CodableValue.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: Microsoft.Health.ItemTypes.CodableValue
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  nameWithType: CodableValue.RemoveAt(Int32)
  fullName: Microsoft.Health.ItemTypes.CodableValue.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.ItemTypes/CodableValue.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: RemoveAt
    path: CodableValue.cs
    startLine: 250
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nRemoves a code item at the specified index.\n"
  example: []
  syntax:
    content: public void RemoveAt(int index)
    content.vb: Public Sub RemoveAt(index As Integer)
    parameters:
    - id: index
      type: System.Int32
      description: "\nThe zero-based index of the item to remove.\n"
  overload: Microsoft.Health.ItemTypes.CodableValue.RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\nThe <span class=\"paramref\">index</span> parameter is out of range.\n"
  implements:
  - System.Collections.Generic.IList{Microsoft.Health.ItemTypes.CodedValue}.RemoveAt(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.ItemTypes.CodableValue.Count
  commentId: P:Microsoft.Health.ItemTypes.CodableValue.Count
  id: Count
  parent: Microsoft.Health.ItemTypes.CodableValue
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: CodableValue.Count
  fullName: Microsoft.Health.ItemTypes.CodableValue.Count
  type: Property
  source:
    remote:
      path: Microsoft.Health.ItemTypes/CodableValue.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Count
    path: CodableValue.cs
    startLine: 259
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nGets the number of code items\n"
  example: []
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
  overload: Microsoft.Health.ItemTypes.CodableValue.Count*
  implements:
  - System.Collections.Generic.ICollection{Microsoft.Health.ItemTypes.CodedValue}.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.ItemTypes.CodableValue.IsReadOnly
  commentId: P:Microsoft.Health.ItemTypes.CodableValue.IsReadOnly
  id: IsReadOnly
  parent: Microsoft.Health.ItemTypes.CodableValue
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: CodableValue.IsReadOnly
  fullName: Microsoft.Health.ItemTypes.CodableValue.IsReadOnly
  type: Property
  source:
    remote:
      path: Microsoft.Health.ItemTypes/CodableValue.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: IsReadOnly
    path: CodableValue.cs
    startLine: 271
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nGets a value indicating whether the code item list is read-only.\n"
  example: []
  syntax:
    content: public bool IsReadOnly { get; }
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<strong>true</strong> if the list is read-only; otherwise, <strong>false</strong>.\n"
  overload: Microsoft.Health.ItemTypes.CodableValue.IsReadOnly*
  implements:
  - System.Collections.Generic.ICollection{Microsoft.Health.ItemTypes.CodedValue}.IsReadOnly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.ItemTypes.CodableValue.Add(Microsoft.Health.ItemTypes.CodedValue)
  commentId: M:Microsoft.Health.ItemTypes.CodableValue.Add(Microsoft.Health.ItemTypes.CodedValue)
  id: Add(Microsoft.Health.ItemTypes.CodedValue)
  parent: Microsoft.Health.ItemTypes.CodableValue
  langs:
  - csharp
  - vb
  name: Add(CodedValue)
  nameWithType: CodableValue.Add(CodedValue)
  fullName: Microsoft.Health.ItemTypes.CodableValue.Add(Microsoft.Health.ItemTypes.CodedValue)
  type: Method
  source:
    remote:
      path: Microsoft.Health.ItemTypes/CodableValue.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Add
    path: CodableValue.cs
    startLine: 284
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nAdds an item to the code list. \n"
  example: []
  syntax:
    content: public void Add(CodedValue item)
    content.vb: Public Sub Add(item As CodedValue)
    parameters:
    - id: item
      type: Microsoft.Health.ItemTypes.CodedValue
      description: "\nThe code item to add.\n"
  overload: Microsoft.Health.ItemTypes.CodableValue.Add*
  implements:
  - System.Collections.Generic.ICollection{Microsoft.Health.ItemTypes.CodedValue}.Add(Microsoft.Health.ItemTypes.CodedValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.ItemTypes.CodableValue.Add(Microsoft.Health.VocabularyItem)
  commentId: M:Microsoft.Health.ItemTypes.CodableValue.Add(Microsoft.Health.VocabularyItem)
  id: Add(Microsoft.Health.VocabularyItem)
  parent: Microsoft.Health.ItemTypes.CodableValue
  langs:
  - csharp
  - vb
  name: Add(VocabularyItem)
  nameWithType: CodableValue.Add(VocabularyItem)
  fullName: Microsoft.Health.ItemTypes.CodableValue.Add(Microsoft.Health.VocabularyItem)
  type: Method
  source:
    remote:
      path: Microsoft.Health.ItemTypes/CodableValue.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Add
    path: CodableValue.cs
    startLine: 298
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nEncodes a <xref href=\"Microsoft.Health.VocabularyItem\" data-throw-if-not-resolved=\"false\"></xref> as a CodedValue and\nadds it to the list of coded values.\n"
  example: []
  syntax:
    content: public void Add(VocabularyItem item)
    content.vb: Public Sub Add(item As VocabularyItem)
    parameters:
    - id: item
      type: Microsoft.Health.VocabularyItem
      description: "\nThe <xref href=\"Microsoft.Health.VocabularyItem\" data-throw-if-not-resolved=\"false\"></xref> to use. \n"
  overload: Microsoft.Health.ItemTypes.CodableValue.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.ItemTypes.CodableValue.Clear
  commentId: M:Microsoft.Health.ItemTypes.CodableValue.Clear
  id: Clear
  parent: Microsoft.Health.ItemTypes.CodableValue
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: CodableValue.Clear()
  fullName: Microsoft.Health.ItemTypes.CodableValue.Clear()
  type: Method
  source:
    remote:
      path: Microsoft.Health.ItemTypes/CodableValue.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Clear
    path: CodableValue.cs
    startLine: 317
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nRemoves all items from the code item list\n"
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: Microsoft.Health.ItemTypes.CodableValue.Clear*
  implements:
  - System.Collections.Generic.ICollection{Microsoft.Health.ItemTypes.CodedValue}.Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.ItemTypes.CodableValue.Contains(Microsoft.Health.ItemTypes.CodedValue)
  commentId: M:Microsoft.Health.ItemTypes.CodableValue.Contains(Microsoft.Health.ItemTypes.CodedValue)
  id: Contains(Microsoft.Health.ItemTypes.CodedValue)
  parent: Microsoft.Health.ItemTypes.CodableValue
  langs:
  - csharp
  - vb
  name: Contains(CodedValue)
  nameWithType: CodableValue.Contains(CodedValue)
  fullName: Microsoft.Health.ItemTypes.CodableValue.Contains(Microsoft.Health.ItemTypes.CodedValue)
  type: Method
  source:
    remote:
      path: Microsoft.Health.ItemTypes/CodableValue.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Contains
    path: CodableValue.cs
    startLine: 336
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nGets a value indicating whether the code item list contains a \nspecific code.\n"
  example: []
  syntax:
    content: public bool Contains(CodedValue item)
    content.vb: Public Function Contains(item As CodedValue) As Boolean
    parameters:
    - id: item
      type: Microsoft.Health.ItemTypes.CodedValue
      description: "\nThe code item to search for in the list.\n"
    return:
      type: System.Boolean
      description: "\n<strong>true</strong> if the item is in the collection; otherwise, <strong>false</strong>.\n"
  overload: Microsoft.Health.ItemTypes.CodableValue.Contains*
  implements:
  - System.Collections.Generic.ICollection{Microsoft.Health.ItemTypes.CodedValue}.Contains(Microsoft.Health.ItemTypes.CodedValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.ItemTypes.CodableValue.CopyTo(Microsoft.Health.ItemTypes.CodedValue[],System.Int32)
  commentId: M:Microsoft.Health.ItemTypes.CodableValue.CopyTo(Microsoft.Health.ItemTypes.CodedValue[],System.Int32)
  id: CopyTo(Microsoft.Health.ItemTypes.CodedValue[],System.Int32)
  parent: Microsoft.Health.ItemTypes.CodableValue
  langs:
  - csharp
  - vb
  name: CopyTo(CodedValue[], Int32)
  nameWithType: CodableValue.CopyTo(CodedValue[], Int32)
  fullName: Microsoft.Health.ItemTypes.CodableValue.CopyTo(Microsoft.Health.ItemTypes.CodedValue[], System.Int32)
  type: Method
  source:
    remote:
      path: Microsoft.Health.ItemTypes/CodableValue.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: CopyTo
    path: CodableValue.cs
    startLine: 370
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nCopies the elements of the code item list to an array, starting at \na particular array index.\n"
  example: []
  syntax:
    content: public void CopyTo(CodedValue[] array, int arrayIndex)
    content.vb: Public Sub CopyTo(array As CodedValue(), arrayIndex As Integer)
    parameters:
    - id: array
      type: Microsoft.Health.ItemTypes.CodedValue[]
      description: "\nThe array to copy the elements to.\n"
    - id: arrayIndex
      type: System.Int32
      description: "\nThe array location at which to begin copying.\n"
  overload: Microsoft.Health.ItemTypes.CodableValue.CopyTo*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\nThe <span class=\"paramref\">arrayIndex</span> parameter is less than 0.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <span class=\"paramref\">array</span> parameter is <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">array</span> parameter is multidimensional, \nor the <span class=\"paramref\">arrayIndex</span> value is equal to or greater \nthan the length of the array, or the number of elements in the \nsource collection is greater than the available space from <span class=\"paramref\">arrayIndex</span> \nto the end of the destination array, or a type cannot be cast \nautomatically to the type of the destination array.\n"
  implements:
  - System.Collections.Generic.ICollection{Microsoft.Health.ItemTypes.CodedValue}.CopyTo(Microsoft.Health.ItemTypes.CodedValue[],System.Int32)
  nameWithType.vb: CodableValue.CopyTo(CodedValue(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.ItemTypes.CodableValue.CopyTo(Microsoft.Health.ItemTypes.CodedValue(), System.Int32)
  name.vb: CopyTo(CodedValue(), Int32)
- uid: Microsoft.Health.ItemTypes.CodableValue.Remove(Microsoft.Health.ItemTypes.CodedValue)
  commentId: M:Microsoft.Health.ItemTypes.CodableValue.Remove(Microsoft.Health.ItemTypes.CodedValue)
  id: Remove(Microsoft.Health.ItemTypes.CodedValue)
  parent: Microsoft.Health.ItemTypes.CodableValue
  langs:
  - csharp
  - vb
  name: Remove(CodedValue)
  nameWithType: CodableValue.Remove(CodedValue)
  fullName: Microsoft.Health.ItemTypes.CodableValue.Remove(Microsoft.Health.ItemTypes.CodedValue)
  type: Method
  source:
    remote:
      path: Microsoft.Health.ItemTypes/CodableValue.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Remove
    path: CodableValue.cs
    startLine: 388
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nRemoves the first occurrence of this code item from the code item\nlist.\n"
  example: []
  syntax:
    content: public bool Remove(CodedValue item)
    content.vb: Public Function Remove(item As CodedValue) As Boolean
    parameters:
    - id: item
      type: Microsoft.Health.ItemTypes.CodedValue
      description: "\nThe <xref href=\"Microsoft.Health.ItemTypes.CodedValue\" data-throw-if-not-resolved=\"false\"></xref> object to remove.\n"
    return:
      type: System.Boolean
      description: "\n<strong>true</strong> if removal succeeded; otherwise, <strong>false</strong>.\n"
  overload: Microsoft.Health.ItemTypes.CodableValue.Remove*
  implements:
  - System.Collections.Generic.ICollection{Microsoft.Health.ItemTypes.CodedValue}.Remove(Microsoft.Health.ItemTypes.CodedValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.ItemTypes.CodableValue.System#Collections#IEnumerable#GetEnumerator
  commentId: M:Microsoft.Health.ItemTypes.CodableValue.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: Microsoft.Health.ItemTypes.CodableValue
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: CodableValue.IEnumerable.GetEnumerator()
  fullName: Microsoft.Health.ItemTypes.CodableValue.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: Microsoft.Health.ItemTypes/CodableValue.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: System.Collections.IEnumerable.GetEnumerator
    path: CodableValue.cs
    startLine: 401
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nReturns an enumerator that iterates through the code list.\n"
  example: []
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
      description: "\nAn enumerator.\n"
  overload: Microsoft.Health.ItemTypes.CodableValue.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: CodableValue.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: Microsoft.Health.ItemTypes.CodableValue.GetEnumerator
  commentId: M:Microsoft.Health.ItemTypes.CodableValue.GetEnumerator
  id: GetEnumerator
  parent: Microsoft.Health.ItemTypes.CodableValue
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: CodableValue.GetEnumerator()
  fullName: Microsoft.Health.ItemTypes.CodableValue.GetEnumerator()
  type: Method
  source:
    remote:
      path: Microsoft.Health.ItemTypes/CodableValue.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: GetEnumerator
    path: CodableValue.cs
    startLine: 414
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nReturns an enumerator that iterates through the collection.\n"
  example: []
  syntax:
    content: public IEnumerator<CodedValue> GetEnumerator()
    content.vb: Public Function GetEnumerator As IEnumerator(Of CodedValue)
    return:
      type: System.Collections.Generic.IEnumerator{Microsoft.Health.ItemTypes.CodedValue}
      description: "\nAn enumerator.\n"
  overload: Microsoft.Health.ItemTypes.CodableValue.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{Microsoft.Health.ItemTypes.CodedValue}.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.ItemTypes.CodableValue.ParseXml(System.Xml.XPath.XPathNavigator)
  commentId: M:Microsoft.Health.ItemTypes.CodableValue.ParseXml(System.Xml.XPath.XPathNavigator)
  id: ParseXml(System.Xml.XPath.XPathNavigator)
  parent: Microsoft.Health.ItemTypes.CodableValue
  langs:
  - csharp
  - vb
  name: ParseXml(XPathNavigator)
  nameWithType: CodableValue.ParseXml(XPathNavigator)
  fullName: Microsoft.Health.ItemTypes.CodableValue.ParseXml(System.Xml.XPath.XPathNavigator)
  type: Method
  source:
    remote:
      path: Microsoft.Health.ItemTypes/CodableValue.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ParseXml
    path: CodableValue.cs
    startLine: 432
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nPopulates the data for the vocabulary entry from the XML.\n"
  example: []
  syntax:
    content: public override void ParseXml(XPathNavigator navigator)
    content.vb: Public Overrides Sub ParseXml(navigator As XPathNavigator)
    parameters:
    - id: navigator
      type: System.Xml.XPath.XPathNavigator
      description: "\nThe XML node representing the vocabulary entry.\n"
  overridden: Microsoft.Health.ItemTypes.HealthRecordItemData.ParseXml(System.Xml.XPath.XPathNavigator)
  overload: Microsoft.Health.ItemTypes.CodableValue.ParseXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <span class=\"paramref\">navigator</span> parameter is <strong>null</strong>.\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Health.ItemTypes.CodableValue.WriteXml(System.String,System.Xml.XmlWriter)
  commentId: M:Microsoft.Health.ItemTypes.CodableValue.WriteXml(System.String,System.Xml.XmlWriter)
  id: WriteXml(System.String,System.Xml.XmlWriter)
  parent: Microsoft.Health.ItemTypes.CodableValue
  langs:
  - csharp
  - vb
  name: WriteXml(String, XmlWriter)
  nameWithType: CodableValue.WriteXml(String, XmlWriter)
  fullName: Microsoft.Health.ItemTypes.CodableValue.WriteXml(System.String, System.Xml.XmlWriter)
  type: Method
  source:
    remote:
      path: Microsoft.Health.ItemTypes/CodableValue.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: WriteXml
    path: CodableValue.cs
    startLine: 481
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nWrites the vocabulary entry to the specified XML writer.\n"
  example: []
  syntax:
    content: public override void WriteXml(string nodeName, XmlWriter writer)
    content.vb: Public Overrides Sub WriteXml(nodeName As String, writer As XmlWriter)
    parameters:
    - id: nodeName
      type: System.String
      description: "\nThe name of the outer element for the vocabulary entry.\n"
    - id: writer
      type: System.Xml.XmlWriter
      description: "\nThe XmlWriter to write the vocabulary entry to.\n"
  overridden: Microsoft.Health.ItemTypes.HealthRecordItemData.WriteXml(System.String,System.Xml.XmlWriter)
  overload: Microsoft.Health.ItemTypes.CodableValue.WriteXml*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">nodeName</span> parameter is <strong>null</strong> or empty.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <span class=\"paramref\">writer</span> parameter is <strong>null</strong>.\n"
  - type: Microsoft.Health.HealthRecordItemSerializationException
    commentId: T:Microsoft.Health.HealthRecordItemSerializationException
    description: "\nThe <xref href=\"Microsoft.Health.ItemTypes.CodableValue.Text\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"Microsoft.Health.ItemTypes.CodedValue.Value\" data-throw-if-not-resolved=\"false\"></xref>, or\n<xref href=\"Microsoft.Health.ItemTypes.CodedValue.Family\" data-throw-if-not-resolved=\"false\"></xref> parameter is <strong>null</strong> or empty.\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Health.ItemTypes.CodableValue.Text
  commentId: P:Microsoft.Health.ItemTypes.CodableValue.Text
  id: Text
  parent: Microsoft.Health.ItemTypes.CodableValue
  langs:
  - csharp
  - vb
  name: Text
  nameWithType: CodableValue.Text
  fullName: Microsoft.Health.ItemTypes.CodableValue.Text
  type: Property
  source:
    remote:
      path: Microsoft.Health.ItemTypes/CodableValue.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Text
    path: CodableValue.cs
    startLine: 514
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nGets or sets the value of the codable value.\n"
  example: []
  syntax:
    content: public string Text { get; set; }
    content.vb: Public Property Text As String
    parameters: []
    return:
      type: System.String
      description: "\nA string representing the value.\n"
  overload: Microsoft.Health.ItemTypes.CodableValue.Text*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">value</span> parameter is <strong>null</strong>, empty, or contains only\nwhitespace when setting.\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.ItemTypes.CodableValue.ToString
  commentId: M:Microsoft.Health.ItemTypes.CodableValue.ToString
  id: ToString
  parent: Microsoft.Health.ItemTypes.CodableValue
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: CodableValue.ToString()
  fullName: Microsoft.Health.ItemTypes.CodableValue.ToString()
  type: Method
  source:
    remote:
      path: Microsoft.Health.ItemTypes/CodableValue.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ToString
    path: CodableValue.cs
    startLine: 534
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nGets the string representation of a codable value.\n"
  example: []
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\nA string representing the value.\n"
  overridden: System.Object.ToString
  overload: Microsoft.Health.ItemTypes.CodableValue.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Microsoft.Health.ItemTypes
  commentId: N:Microsoft.Health.ItemTypes
  isExternal: false
  name: Microsoft.Health.ItemTypes
  nameWithType: Microsoft.Health.ItemTypes
  fullName: Microsoft.Health.ItemTypes
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Health.ItemTypes.HealthRecordItemData
  commentId: T:Microsoft.Health.ItemTypes.HealthRecordItemData
  parent: Microsoft.Health.ItemTypes
  isExternal: false
  name: HealthRecordItemData
  nameWithType: HealthRecordItemData
  fullName: Microsoft.Health.ItemTypes.HealthRecordItemData
- uid: System.Collections.Generic.IList{Microsoft.Health.ItemTypes.CodedValue}
  commentId: T:System.Collections.Generic.IList{Microsoft.Health.ItemTypes.CodedValue}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<CodedValue>
  nameWithType: IList<CodedValue>
  fullName: System.Collections.Generic.IList<Microsoft.Health.ItemTypes.CodedValue>
  nameWithType.vb: IList(Of CodedValue)
  fullName.vb: System.Collections.Generic.IList(Of Microsoft.Health.ItemTypes.CodedValue)
  name.vb: IList(Of CodedValue)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.ItemTypes.CodedValue
    name: CodedValue
    nameWithType: CodedValue
    fullName: Microsoft.Health.ItemTypes.CodedValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.ItemTypes.CodedValue
    name: CodedValue
    nameWithType: CodedValue
    fullName: Microsoft.Health.ItemTypes.CodedValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{Microsoft.Health.ItemTypes.CodedValue}
  commentId: T:System.Collections.Generic.ICollection{Microsoft.Health.ItemTypes.CodedValue}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<CodedValue>
  nameWithType: ICollection<CodedValue>
  fullName: System.Collections.Generic.ICollection<Microsoft.Health.ItemTypes.CodedValue>
  nameWithType.vb: ICollection(Of CodedValue)
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Health.ItemTypes.CodedValue)
  name.vb: ICollection(Of CodedValue)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.ItemTypes.CodedValue
    name: CodedValue
    nameWithType: CodedValue
    fullName: Microsoft.Health.ItemTypes.CodedValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.ItemTypes.CodedValue
    name: CodedValue
    nameWithType: CodedValue
    fullName: Microsoft.Health.ItemTypes.CodedValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Microsoft.Health.ItemTypes.CodedValue}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Health.ItemTypes.CodedValue}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<CodedValue>
  nameWithType: IEnumerable<CodedValue>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Health.ItemTypes.CodedValue>
  nameWithType.vb: IEnumerable(Of CodedValue)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Health.ItemTypes.CodedValue)
  name.vb: IEnumerable(Of CodedValue)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.ItemTypes.CodedValue
    name: CodedValue
    nameWithType: CodedValue
    fullName: Microsoft.Health.ItemTypes.CodedValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.ItemTypes.CodedValue
    name: CodedValue
    nameWithType: CodedValue
    fullName: Microsoft.Health.ItemTypes.CodedValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: Microsoft.Health.ItemTypes.CodableValue.#ctor*
  commentId: Overload:Microsoft.Health.ItemTypes.CodableValue.#ctor
  isExternal: false
  name: CodableValue
  nameWithType: CodableValue.CodableValue
  fullName: Microsoft.Health.ItemTypes.CodableValue.CodableValue
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: Microsoft.Health.ItemTypes.CodedValue
  commentId: T:Microsoft.Health.ItemTypes.CodedValue
  parent: Microsoft.Health.ItemTypes
  isExternal: false
  name: CodedValue
  nameWithType: CodedValue
  fullName: Microsoft.Health.ItemTypes.CodedValue
- uid: Microsoft.Health.VocabularyItem
  commentId: T:Microsoft.Health.VocabularyItem
  parent: Microsoft.Health
  isExternal: false
  name: VocabularyItem
  nameWithType: VocabularyItem
  fullName: Microsoft.Health.VocabularyItem
- uid: Microsoft.Health
  commentId: N:Microsoft.Health
  isExternal: false
  name: Microsoft.Health
  nameWithType: Microsoft.Health
  fullName: Microsoft.Health
- uid: Microsoft.Health.ItemTypes.CodableValue
  commentId: T:Microsoft.Health.ItemTypes.CodableValue
  parent: Microsoft.Health.ItemTypes
  isExternal: false
  name: CodableValue
  nameWithType: CodableValue
  fullName: Microsoft.Health.ItemTypes.CodableValue
- uid: Microsoft.Health.VocabularyKey
  commentId: T:Microsoft.Health.VocabularyKey
  parent: Microsoft.Health
  isExternal: false
  name: VocabularyKey
  nameWithType: VocabularyKey
  fullName: Microsoft.Health.VocabularyKey
- uid: Microsoft.Health.ItemTypes.CodableValue.Item*
  commentId: Overload:Microsoft.Health.ItemTypes.CodableValue.Item
  isExternal: false
  name: Item
  nameWithType: CodableValue.Item
  fullName: Microsoft.Health.ItemTypes.CodableValue.Item
- uid: System.Collections.Generic.IList{Microsoft.Health.ItemTypes.CodedValue}.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList{Microsoft.Health.ItemTypes.CodedValue}.Item(System.Int32)
  parent: System.Collections.Generic.IList{Microsoft.Health.ItemTypes.CodedValue}
  definition: System.Collections.Generic.IList`1.Item(System.Int32)
  name: Item[Int32]
  nameWithType: IList<CodedValue>.Item[Int32]
  fullName: System.Collections.Generic.IList<Microsoft.Health.ItemTypes.CodedValue>.Item[System.Int32]
  nameWithType.vb: IList(Of CodedValue).Item(Int32)
  fullName.vb: System.Collections.Generic.IList(Of Microsoft.Health.ItemTypes.CodedValue).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<CodedValue>.Item
    fullName: System.Collections.Generic.IList<Microsoft.Health.ItemTypes.CodedValue>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of CodedValue).Item
    fullName: System.Collections.Generic.IList(Of Microsoft.Health.ItemTypes.CodedValue).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IList`1.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList`1.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: IList<T>.Item[Int32]
  fullName: System.Collections.Generic.IList<T>.Item[System.Int32]
  nameWithType.vb: IList(Of T).Item(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<T>.Item
    fullName: System.Collections.Generic.IList<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of T).Item
    fullName: System.Collections.Generic.IList(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ItemTypes.CodableValue.IndexOf*
  commentId: Overload:Microsoft.Health.ItemTypes.CodableValue.IndexOf
  isExternal: false
  name: IndexOf
  nameWithType: CodableValue.IndexOf
  fullName: Microsoft.Health.ItemTypes.CodableValue.IndexOf
- uid: System.Collections.Generic.IList{Microsoft.Health.ItemTypes.CodedValue}.IndexOf(Microsoft.Health.ItemTypes.CodedValue)
  commentId: M:System.Collections.Generic.IList{Microsoft.Health.ItemTypes.CodedValue}.IndexOf(Microsoft.Health.ItemTypes.CodedValue)
  parent: System.Collections.Generic.IList{Microsoft.Health.ItemTypes.CodedValue}
  definition: System.Collections.Generic.IList`1.IndexOf(`0)
  name: IndexOf(CodedValue)
  nameWithType: IList<CodedValue>.IndexOf(CodedValue)
  fullName: System.Collections.Generic.IList<Microsoft.Health.ItemTypes.CodedValue>.IndexOf(Microsoft.Health.ItemTypes.CodedValue)
  nameWithType.vb: IList(Of CodedValue).IndexOf(CodedValue)
  fullName.vb: System.Collections.Generic.IList(Of Microsoft.Health.ItemTypes.CodedValue).IndexOf(Microsoft.Health.ItemTypes.CodedValue)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<CodedValue>.IndexOf
    fullName: System.Collections.Generic.IList<Microsoft.Health.ItemTypes.CodedValue>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.ItemTypes.CodedValue
    name: CodedValue
    nameWithType: CodedValue
    fullName: Microsoft.Health.ItemTypes.CodedValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of CodedValue).IndexOf
    fullName: System.Collections.Generic.IList(Of Microsoft.Health.ItemTypes.CodedValue).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.ItemTypes.CodedValue
    name: CodedValue
    nameWithType: CodedValue
    fullName: Microsoft.Health.ItemTypes.CodedValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.IndexOf(`0)
  commentId: M:System.Collections.Generic.IList`1.IndexOf(`0)
  isExternal: true
  name: IndexOf(T)
  nameWithType: IList<T>.IndexOf(T)
  fullName: System.Collections.Generic.IList<T>.IndexOf(T)
  nameWithType.vb: IList(Of T).IndexOf(T)
  fullName.vb: System.Collections.Generic.IList(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<T>.IndexOf
    fullName: System.Collections.Generic.IList<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of T).IndexOf
    fullName: System.Collections.Generic.IList(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ItemTypes.CodableValue.Insert*
  commentId: Overload:Microsoft.Health.ItemTypes.CodableValue.Insert
  isExternal: false
  name: Insert
  nameWithType: CodableValue.Insert
  fullName: Microsoft.Health.ItemTypes.CodableValue.Insert
- uid: System.Collections.Generic.IList{Microsoft.Health.ItemTypes.CodedValue}.Insert(System.Int32,Microsoft.Health.ItemTypes.CodedValue)
  commentId: M:System.Collections.Generic.IList{Microsoft.Health.ItemTypes.CodedValue}.Insert(System.Int32,Microsoft.Health.ItemTypes.CodedValue)
  parent: System.Collections.Generic.IList{Microsoft.Health.ItemTypes.CodedValue}
  definition: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  name: Insert(Int32, CodedValue)
  nameWithType: IList<CodedValue>.Insert(Int32, CodedValue)
  fullName: System.Collections.Generic.IList<Microsoft.Health.ItemTypes.CodedValue>.Insert(System.Int32, Microsoft.Health.ItemTypes.CodedValue)
  nameWithType.vb: IList(Of CodedValue).Insert(Int32, CodedValue)
  fullName.vb: System.Collections.Generic.IList(Of Microsoft.Health.ItemTypes.CodedValue).Insert(System.Int32, Microsoft.Health.ItemTypes.CodedValue)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<CodedValue>.Insert
    fullName: System.Collections.Generic.IList<Microsoft.Health.ItemTypes.CodedValue>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.ItemTypes.CodedValue
    name: CodedValue
    nameWithType: CodedValue
    fullName: Microsoft.Health.ItemTypes.CodedValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of CodedValue).Insert
    fullName: System.Collections.Generic.IList(Of Microsoft.Health.ItemTypes.CodedValue).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.ItemTypes.CodedValue
    name: CodedValue
    nameWithType: CodedValue
    fullName: Microsoft.Health.ItemTypes.CodedValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  commentId: M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  isExternal: true
  name: Insert(Int32, T)
  nameWithType: IList<T>.Insert(Int32, T)
  fullName: System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  nameWithType.vb: IList(Of T).Insert(Int32, T)
  fullName.vb: System.Collections.Generic.IList(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<T>.Insert
    fullName: System.Collections.Generic.IList<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of T).Insert
    fullName: System.Collections.Generic.IList(Of T).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ItemTypes.CodableValue.RemoveAt*
  commentId: Overload:Microsoft.Health.ItemTypes.CodableValue.RemoveAt
  isExternal: false
  name: RemoveAt
  nameWithType: CodableValue.RemoveAt
  fullName: Microsoft.Health.ItemTypes.CodableValue.RemoveAt
- uid: System.Collections.Generic.IList{Microsoft.Health.ItemTypes.CodedValue}.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList{Microsoft.Health.ItemTypes.CodedValue}.RemoveAt(System.Int32)
  parent: System.Collections.Generic.IList{Microsoft.Health.ItemTypes.CodedValue}
  definition: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  name: RemoveAt(Int32)
  nameWithType: IList<CodedValue>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<Microsoft.Health.ItemTypes.CodedValue>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of CodedValue).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.IList(Of Microsoft.Health.ItemTypes.CodedValue).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<CodedValue>.RemoveAt
    fullName: System.Collections.Generic.IList<Microsoft.Health.ItemTypes.CodedValue>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of CodedValue).RemoveAt
    fullName: System.Collections.Generic.IList(Of Microsoft.Health.ItemTypes.CodedValue).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  isExternal: true
  name: RemoveAt(Int32)
  nameWithType: IList<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of T).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<T>.RemoveAt
    fullName: System.Collections.Generic.IList<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of T).RemoveAt
    fullName: System.Collections.Generic.IList(Of T).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ItemTypes.CodableValue.Count*
  commentId: Overload:Microsoft.Health.ItemTypes.CodableValue.Count
  isExternal: false
  name: Count
  nameWithType: CodableValue.Count
  fullName: Microsoft.Health.ItemTypes.CodableValue.Count
- uid: System.Collections.Generic.ICollection{Microsoft.Health.ItemTypes.CodedValue}.Count
  commentId: P:System.Collections.Generic.ICollection{Microsoft.Health.ItemTypes.CodedValue}.Count
  parent: System.Collections.Generic.ICollection{Microsoft.Health.ItemTypes.CodedValue}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<CodedValue>.Count
  fullName: System.Collections.Generic.ICollection<Microsoft.Health.ItemTypes.CodedValue>.Count
  nameWithType.vb: ICollection(Of CodedValue).Count
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Health.ItemTypes.CodedValue).Count
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: Microsoft.Health.ItemTypes.CodableValue.IsReadOnly*
  commentId: Overload:Microsoft.Health.ItemTypes.CodableValue.IsReadOnly
  isExternal: false
  name: IsReadOnly
  nameWithType: CodableValue.IsReadOnly
  fullName: Microsoft.Health.ItemTypes.CodableValue.IsReadOnly
- uid: System.Collections.Generic.ICollection{Microsoft.Health.ItemTypes.CodedValue}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{Microsoft.Health.ItemTypes.CodedValue}.IsReadOnly
  parent: System.Collections.Generic.ICollection{Microsoft.Health.ItemTypes.CodedValue}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ICollection<CodedValue>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<Microsoft.Health.ItemTypes.CodedValue>.IsReadOnly
  nameWithType.vb: ICollection(Of CodedValue).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Health.ItemTypes.CodedValue).IsReadOnly
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: Microsoft.Health.ItemTypes.CodableValue.Add*
  commentId: Overload:Microsoft.Health.ItemTypes.CodableValue.Add
  isExternal: false
  name: Add
  nameWithType: CodableValue.Add
  fullName: Microsoft.Health.ItemTypes.CodableValue.Add
- uid: System.Collections.Generic.ICollection{Microsoft.Health.ItemTypes.CodedValue}.Add(Microsoft.Health.ItemTypes.CodedValue)
  commentId: M:System.Collections.Generic.ICollection{Microsoft.Health.ItemTypes.CodedValue}.Add(Microsoft.Health.ItemTypes.CodedValue)
  parent: System.Collections.Generic.ICollection{Microsoft.Health.ItemTypes.CodedValue}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(CodedValue)
  nameWithType: ICollection<CodedValue>.Add(CodedValue)
  fullName: System.Collections.Generic.ICollection<Microsoft.Health.ItemTypes.CodedValue>.Add(Microsoft.Health.ItemTypes.CodedValue)
  nameWithType.vb: ICollection(Of CodedValue).Add(CodedValue)
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Health.ItemTypes.CodedValue).Add(Microsoft.Health.ItemTypes.CodedValue)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<CodedValue>.Add
    fullName: System.Collections.Generic.ICollection<Microsoft.Health.ItemTypes.CodedValue>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.ItemTypes.CodedValue
    name: CodedValue
    nameWithType: CodedValue
    fullName: Microsoft.Health.ItemTypes.CodedValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of CodedValue).Add
    fullName: System.Collections.Generic.ICollection(Of Microsoft.Health.ItemTypes.CodedValue).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.ItemTypes.CodedValue
    name: CodedValue
    nameWithType: CodedValue
    fullName: Microsoft.Health.ItemTypes.CodedValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ItemTypes.CodableValue.Clear*
  commentId: Overload:Microsoft.Health.ItemTypes.CodableValue.Clear
  isExternal: false
  name: Clear
  nameWithType: CodableValue.Clear
  fullName: Microsoft.Health.ItemTypes.CodableValue.Clear
- uid: System.Collections.Generic.ICollection{Microsoft.Health.ItemTypes.CodedValue}.Clear
  commentId: M:System.Collections.Generic.ICollection{Microsoft.Health.ItemTypes.CodedValue}.Clear
  parent: System.Collections.Generic.ICollection{Microsoft.Health.ItemTypes.CodedValue}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<CodedValue>.Clear()
  fullName: System.Collections.Generic.ICollection<Microsoft.Health.ItemTypes.CodedValue>.Clear()
  nameWithType.vb: ICollection(Of CodedValue).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Health.ItemTypes.CodedValue).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<CodedValue>.Clear
    fullName: System.Collections.Generic.ICollection<Microsoft.Health.ItemTypes.CodedValue>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of CodedValue).Clear
    fullName: System.Collections.Generic.ICollection(Of Microsoft.Health.ItemTypes.CodedValue).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ItemTypes.CodableValue.Contains*
  commentId: Overload:Microsoft.Health.ItemTypes.CodableValue.Contains
  isExternal: false
  name: Contains
  nameWithType: CodableValue.Contains
  fullName: Microsoft.Health.ItemTypes.CodableValue.Contains
- uid: System.Collections.Generic.ICollection{Microsoft.Health.ItemTypes.CodedValue}.Contains(Microsoft.Health.ItemTypes.CodedValue)
  commentId: M:System.Collections.Generic.ICollection{Microsoft.Health.ItemTypes.CodedValue}.Contains(Microsoft.Health.ItemTypes.CodedValue)
  parent: System.Collections.Generic.ICollection{Microsoft.Health.ItemTypes.CodedValue}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(CodedValue)
  nameWithType: ICollection<CodedValue>.Contains(CodedValue)
  fullName: System.Collections.Generic.ICollection<Microsoft.Health.ItemTypes.CodedValue>.Contains(Microsoft.Health.ItemTypes.CodedValue)
  nameWithType.vb: ICollection(Of CodedValue).Contains(CodedValue)
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Health.ItemTypes.CodedValue).Contains(Microsoft.Health.ItemTypes.CodedValue)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<CodedValue>.Contains
    fullName: System.Collections.Generic.ICollection<Microsoft.Health.ItemTypes.CodedValue>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.ItemTypes.CodedValue
    name: CodedValue
    nameWithType: CodedValue
    fullName: Microsoft.Health.ItemTypes.CodedValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of CodedValue).Contains
    fullName: System.Collections.Generic.ICollection(Of Microsoft.Health.ItemTypes.CodedValue).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.ItemTypes.CodedValue
    name: CodedValue
    nameWithType: CodedValue
    fullName: Microsoft.Health.ItemTypes.CodedValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ItemTypes.CodableValue.CopyTo*
  commentId: Overload:Microsoft.Health.ItemTypes.CodableValue.CopyTo
  isExternal: false
  name: CopyTo
  nameWithType: CodableValue.CopyTo
  fullName: Microsoft.Health.ItemTypes.CodableValue.CopyTo
- uid: System.Collections.Generic.ICollection{Microsoft.Health.ItemTypes.CodedValue}.CopyTo(Microsoft.Health.ItemTypes.CodedValue[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{Microsoft.Health.ItemTypes.CodedValue}.CopyTo(Microsoft.Health.ItemTypes.CodedValue[],System.Int32)
  parent: System.Collections.Generic.ICollection{Microsoft.Health.ItemTypes.CodedValue}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(CodedValue[], Int32)
  nameWithType: ICollection<CodedValue>.CopyTo(CodedValue[], Int32)
  fullName: System.Collections.Generic.ICollection<Microsoft.Health.ItemTypes.CodedValue>.CopyTo(Microsoft.Health.ItemTypes.CodedValue[], System.Int32)
  nameWithType.vb: ICollection(Of CodedValue).CopyTo(CodedValue(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Health.ItemTypes.CodedValue).CopyTo(Microsoft.Health.ItemTypes.CodedValue(), System.Int32)
  name.vb: CopyTo(CodedValue(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<CodedValue>.CopyTo
    fullName: System.Collections.Generic.ICollection<Microsoft.Health.ItemTypes.CodedValue>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.ItemTypes.CodedValue
    name: CodedValue
    nameWithType: CodedValue
    fullName: Microsoft.Health.ItemTypes.CodedValue
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of CodedValue).CopyTo
    fullName: System.Collections.Generic.ICollection(Of Microsoft.Health.ItemTypes.CodedValue).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.ItemTypes.CodedValue
    name: CodedValue
    nameWithType: CodedValue
    fullName: Microsoft.Health.ItemTypes.CodedValue
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ItemTypes.CodedValue[]
  name: CodedValue[]
  nameWithType: CodedValue[]
  fullName: Microsoft.Health.ItemTypes.CodedValue[]
  nameWithType.vb: CodedValue()
  fullName.vb: Microsoft.Health.ItemTypes.CodedValue()
  name.vb: CodedValue()
  spec.csharp:
  - uid: Microsoft.Health.ItemTypes.CodedValue
    name: CodedValue
    nameWithType: CodedValue
    fullName: Microsoft.Health.ItemTypes.CodedValue
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Microsoft.Health.ItemTypes.CodedValue
    name: CodedValue
    nameWithType: CodedValue
    fullName: Microsoft.Health.ItemTypes.CodedValue
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ItemTypes.CodableValue.Remove*
  commentId: Overload:Microsoft.Health.ItemTypes.CodableValue.Remove
  isExternal: false
  name: Remove
  nameWithType: CodableValue.Remove
  fullName: Microsoft.Health.ItemTypes.CodableValue.Remove
- uid: System.Collections.Generic.ICollection{Microsoft.Health.ItemTypes.CodedValue}.Remove(Microsoft.Health.ItemTypes.CodedValue)
  commentId: M:System.Collections.Generic.ICollection{Microsoft.Health.ItemTypes.CodedValue}.Remove(Microsoft.Health.ItemTypes.CodedValue)
  parent: System.Collections.Generic.ICollection{Microsoft.Health.ItemTypes.CodedValue}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(CodedValue)
  nameWithType: ICollection<CodedValue>.Remove(CodedValue)
  fullName: System.Collections.Generic.ICollection<Microsoft.Health.ItemTypes.CodedValue>.Remove(Microsoft.Health.ItemTypes.CodedValue)
  nameWithType.vb: ICollection(Of CodedValue).Remove(CodedValue)
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Health.ItemTypes.CodedValue).Remove(Microsoft.Health.ItemTypes.CodedValue)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<CodedValue>.Remove
    fullName: System.Collections.Generic.ICollection<Microsoft.Health.ItemTypes.CodedValue>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.ItemTypes.CodedValue
    name: CodedValue
    nameWithType: CodedValue
    fullName: Microsoft.Health.ItemTypes.CodedValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of CodedValue).Remove
    fullName: System.Collections.Generic.ICollection(Of Microsoft.Health.ItemTypes.CodedValue).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.ItemTypes.CodedValue
    name: CodedValue
    nameWithType: CodedValue
    fullName: Microsoft.Health.ItemTypes.CodedValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ItemTypes.CodableValue.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:Microsoft.Health.ItemTypes.CodableValue.System#Collections#IEnumerable#GetEnumerator
  isExternal: false
  name: IEnumerable.GetEnumerator
  nameWithType: CodableValue.IEnumerable.GetEnumerator
  fullName: Microsoft.Health.ItemTypes.CodableValue.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: CodableValue.System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: Microsoft.Health.ItemTypes.CodableValue.GetEnumerator*
  commentId: Overload:Microsoft.Health.ItemTypes.CodableValue.GetEnumerator
  isExternal: false
  name: GetEnumerator
  nameWithType: CodableValue.GetEnumerator
  fullName: Microsoft.Health.ItemTypes.CodableValue.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{Microsoft.Health.ItemTypes.CodedValue}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{Microsoft.Health.ItemTypes.CodedValue}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{Microsoft.Health.ItemTypes.CodedValue}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<CodedValue>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Health.ItemTypes.CodedValue>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of CodedValue).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Health.ItemTypes.CodedValue).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<CodedValue>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<Microsoft.Health.ItemTypes.CodedValue>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of CodedValue).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of Microsoft.Health.ItemTypes.CodedValue).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{Microsoft.Health.ItemTypes.CodedValue}
  commentId: T:System.Collections.Generic.IEnumerator{Microsoft.Health.ItemTypes.CodedValue}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<CodedValue>
  nameWithType: IEnumerator<CodedValue>
  fullName: System.Collections.Generic.IEnumerator<Microsoft.Health.ItemTypes.CodedValue>
  nameWithType.vb: IEnumerator(Of CodedValue)
  fullName.vb: System.Collections.Generic.IEnumerator(Of Microsoft.Health.ItemTypes.CodedValue)
  name.vb: IEnumerator(Of CodedValue)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.ItemTypes.CodedValue
    name: CodedValue
    nameWithType: CodedValue
    fullName: Microsoft.Health.ItemTypes.CodedValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.ItemTypes.CodedValue
    name: CodedValue
    nameWithType: CodedValue
    fullName: Microsoft.Health.ItemTypes.CodedValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ItemTypes.HealthRecordItemData.ParseXml(System.Xml.XPath.XPathNavigator)
  commentId: M:Microsoft.Health.ItemTypes.HealthRecordItemData.ParseXml(System.Xml.XPath.XPathNavigator)
  parent: Microsoft.Health.ItemTypes.HealthRecordItemData
  isExternal: true
  name: ParseXml(XPathNavigator)
  nameWithType: HealthRecordItemData.ParseXml(XPathNavigator)
  fullName: Microsoft.Health.ItemTypes.HealthRecordItemData.ParseXml(System.Xml.XPath.XPathNavigator)
  spec.csharp:
  - uid: Microsoft.Health.ItemTypes.HealthRecordItemData.ParseXml(System.Xml.XPath.XPathNavigator)
    name: ParseXml
    nameWithType: HealthRecordItemData.ParseXml
    fullName: Microsoft.Health.ItemTypes.HealthRecordItemData.ParseXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XPath.XPathNavigator
    name: XPathNavigator
    nameWithType: XPathNavigator
    fullName: System.Xml.XPath.XPathNavigator
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.ItemTypes.HealthRecordItemData.ParseXml(System.Xml.XPath.XPathNavigator)
    name: ParseXml
    nameWithType: HealthRecordItemData.ParseXml
    fullName: Microsoft.Health.ItemTypes.HealthRecordItemData.ParseXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XPath.XPathNavigator
    name: XPathNavigator
    nameWithType: XPathNavigator
    fullName: System.Xml.XPath.XPathNavigator
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ItemTypes.CodableValue.ParseXml*
  commentId: Overload:Microsoft.Health.ItemTypes.CodableValue.ParseXml
  isExternal: false
  name: ParseXml
  nameWithType: CodableValue.ParseXml
  fullName: Microsoft.Health.ItemTypes.CodableValue.ParseXml
- uid: System.Xml.XPath.XPathNavigator
  commentId: T:System.Xml.XPath.XPathNavigator
  parent: System.Xml.XPath
  isExternal: true
  name: XPathNavigator
  nameWithType: XPathNavigator
  fullName: System.Xml.XPath.XPathNavigator
- uid: System.Xml.XPath
  commentId: N:System.Xml.XPath
  isExternal: false
  name: System.Xml.XPath
  nameWithType: System.Xml.XPath
  fullName: System.Xml.XPath
- uid: Microsoft.Health.ItemTypes.CodableValue.Text
  commentId: P:Microsoft.Health.ItemTypes.CodableValue.Text
- uid: Microsoft.Health.ItemTypes.CodedValue.Value
  commentId: P:Microsoft.Health.ItemTypes.CodedValue.Value
- uid: Microsoft.Health.ItemTypes.CodedValue.Family
  commentId: P:Microsoft.Health.ItemTypes.CodedValue.Family
- uid: Microsoft.Health.ItemTypes.HealthRecordItemData.WriteXml(System.String,System.Xml.XmlWriter)
  commentId: M:Microsoft.Health.ItemTypes.HealthRecordItemData.WriteXml(System.String,System.Xml.XmlWriter)
  parent: Microsoft.Health.ItemTypes.HealthRecordItemData
  isExternal: true
  name: WriteXml(String, XmlWriter)
  nameWithType: HealthRecordItemData.WriteXml(String, XmlWriter)
  fullName: Microsoft.Health.ItemTypes.HealthRecordItemData.WriteXml(System.String, System.Xml.XmlWriter)
  spec.csharp:
  - uid: Microsoft.Health.ItemTypes.HealthRecordItemData.WriteXml(System.String,System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: HealthRecordItemData.WriteXml
    fullName: Microsoft.Health.ItemTypes.HealthRecordItemData.WriteXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.ItemTypes.HealthRecordItemData.WriteXml(System.String,System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: HealthRecordItemData.WriteXml
    fullName: Microsoft.Health.ItemTypes.HealthRecordItemData.WriteXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ItemTypes.CodableValue.WriteXml*
  commentId: Overload:Microsoft.Health.ItemTypes.CodableValue.WriteXml
  isExternal: false
  name: WriteXml
  nameWithType: CodableValue.WriteXml
  fullName: Microsoft.Health.ItemTypes.CodableValue.WriteXml
- uid: Microsoft.Health.HealthRecordItemSerializationException
  commentId: T:Microsoft.Health.HealthRecordItemSerializationException
- uid: System.Xml.XmlWriter
  commentId: T:System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: false
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: Microsoft.Health.ItemTypes.CodableValue.Text*
  commentId: Overload:Microsoft.Health.ItemTypes.CodableValue.Text
  isExternal: false
  name: Text
  nameWithType: CodableValue.Text
  fullName: Microsoft.Health.ItemTypes.CodableValue.Text
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ItemTypes.CodableValue.ToString*
  commentId: Overload:Microsoft.Health.ItemTypes.CodableValue.ToString
  isExternal: false
  name: ToString
  nameWithType: CodableValue.ToString
  fullName: Microsoft.Health.ItemTypes.CodableValue.ToString
