### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.ItemTypes.ContactInfo
  commentId: T:Microsoft.Health.ItemTypes.ContactInfo
  id: ContactInfo
  parent: Microsoft.Health.ItemTypes
  children:
  - Microsoft.Health.ItemTypes.ContactInfo.#ctor
  - Microsoft.Health.ItemTypes.ContactInfo.Address
  - Microsoft.Health.ItemTypes.ContactInfo.Email
  - Microsoft.Health.ItemTypes.ContactInfo.ParseXml(System.Xml.XPath.XPathNavigator)
  - Microsoft.Health.ItemTypes.ContactInfo.Phone
  - Microsoft.Health.ItemTypes.ContactInfo.PrimaryAddress
  - Microsoft.Health.ItemTypes.ContactInfo.PrimaryEmail
  - Microsoft.Health.ItemTypes.ContactInfo.PrimaryPhone
  - Microsoft.Health.ItemTypes.ContactInfo.ToString
  - Microsoft.Health.ItemTypes.ContactInfo.WriteXml(System.String,System.Xml.XmlWriter)
  langs:
  - csharp
  - vb
  name: ContactInfo
  nameWithType: ContactInfo
  fullName: Microsoft.Health.ItemTypes.ContactInfo
  type: Class
  source:
    remote:
      path: Microsoft.Health.ItemTypes/ContactInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ContactInfo
    path: ContactInfo.cs
    startLine: 20
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nRepresents information about a contact person.\n"
  example: []
  syntax:
    content: 'public class ContactInfo : HealthRecordItemData'
    content.vb: >-
      Public Class ContactInfo
          Inherits HealthRecordItemData
  inheritance:
  - System.Object
  - Microsoft.Health.ItemTypes.HealthRecordItemData
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.ItemTypes.ContactInfo.#ctor
  commentId: M:Microsoft.Health.ItemTypes.ContactInfo.#ctor
  id: '#ctor'
  parent: Microsoft.Health.ItemTypes.ContactInfo
  langs:
  - csharp
  - vb
  name: ContactInfo()
  nameWithType: ContactInfo.ContactInfo()
  fullName: Microsoft.Health.ItemTypes.ContactInfo.ContactInfo()
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.ItemTypes/ContactInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ContactInfo.cs
    startLine: 26
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nCreates a new instance of the <xref href=\"Microsoft.Health.ItemTypes.ContactInfo\" data-throw-if-not-resolved=\"false\"></xref> class with default values.\n"
  example: []
  syntax:
    content: public ContactInfo()
    content.vb: Public Sub New
  overload: Microsoft.Health.ItemTypes.ContactInfo.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.ItemTypes.ContactInfo.ParseXml(System.Xml.XPath.XPathNavigator)
  commentId: M:Microsoft.Health.ItemTypes.ContactInfo.ParseXml(System.Xml.XPath.XPathNavigator)
  id: ParseXml(System.Xml.XPath.XPathNavigator)
  parent: Microsoft.Health.ItemTypes.ContactInfo
  langs:
  - csharp
  - vb
  name: ParseXml(XPathNavigator)
  nameWithType: ContactInfo.ParseXml(XPathNavigator)
  fullName: Microsoft.Health.ItemTypes.ContactInfo.ParseXml(System.Xml.XPath.XPathNavigator)
  type: Method
  source:
    remote:
      path: Microsoft.Health.ItemTypes/ContactInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ParseXml
    path: ContactInfo.cs
    startLine: 42
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nPopulates the data from the specified XML.\n"
  example: []
  syntax:
    content: public override void ParseXml(XPathNavigator navigator)
    content.vb: Public Overrides Sub ParseXml(navigator As XPathNavigator)
    parameters:
    - id: navigator
      type: System.Xml.XPath.XPathNavigator
      description: "\nThe XML containing the contact information.\n"
  overridden: Microsoft.Health.ItemTypes.HealthRecordItemData.ParseXml(System.Xml.XPath.XPathNavigator)
  overload: Microsoft.Health.ItemTypes.ContactInfo.ParseXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <span class=\"paramref\">navigator</span> parameter is <strong>null</strong>.\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Health.ItemTypes.ContactInfo.WriteXml(System.String,System.Xml.XmlWriter)
  commentId: M:Microsoft.Health.ItemTypes.ContactInfo.WriteXml(System.String,System.Xml.XmlWriter)
  id: WriteXml(System.String,System.Xml.XmlWriter)
  parent: Microsoft.Health.ItemTypes.ContactInfo
  langs:
  - csharp
  - vb
  name: WriteXml(String, XmlWriter)
  nameWithType: ContactInfo.WriteXml(String, XmlWriter)
  fullName: Microsoft.Health.ItemTypes.ContactInfo.WriteXml(System.String, System.Xml.XmlWriter)
  type: Method
  source:
    remote:
      path: Microsoft.Health.ItemTypes/ContactInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: WriteXml
    path: ContactInfo.cs
    startLine: 100
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nWrites the XML representation of the contact information into\nthe specified XML writer.\n"
  example: []
  syntax:
    content: public override void WriteXml(string nodeName, XmlWriter writer)
    content.vb: Public Overrides Sub WriteXml(nodeName As String, writer As XmlWriter)
    parameters:
    - id: nodeName
      type: System.String
      description: "\nThe name of the outer node for the contact information.\n"
    - id: writer
      type: System.Xml.XmlWriter
      description: "\nThe XML writer into which the contact information should be \nwritten.\n"
  overridden: Microsoft.Health.ItemTypes.HealthRecordItemData.WriteXml(System.String,System.Xml.XmlWriter)
  overload: Microsoft.Health.ItemTypes.ContactInfo.WriteXml*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">nodeName</span> parameter is <strong>null</strong> or empty.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <span class=\"paramref\">writer</span> parameter is <strong>null</strong>.\n"
  - type: Microsoft.Health.HealthRecordItemSerializationException
    commentId: T:Microsoft.Health.HealthRecordItemSerializationException
    description: "\nA mandatory property has not been set.\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Health.ItemTypes.ContactInfo.PrimaryAddress
  commentId: P:Microsoft.Health.ItemTypes.ContactInfo.PrimaryAddress
  id: PrimaryAddress
  parent: Microsoft.Health.ItemTypes.ContactInfo
  langs:
  - csharp
  - vb
  name: PrimaryAddress
  nameWithType: ContactInfo.PrimaryAddress
  fullName: Microsoft.Health.ItemTypes.ContactInfo.PrimaryAddress
  type: Property
  source:
    remote:
      path: Microsoft.Health.ItemTypes/ContactInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: PrimaryAddress
    path: ContactInfo.cs
    startLine: 134
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nGets the first address that is marked as IsPrimary\".\n"
  example: []
  syntax:
    content: public Address PrimaryAddress { get; }
    content.vb: Public ReadOnly Property PrimaryAddress As Address
    parameters: []
    return:
      type: Microsoft.Health.ItemTypes.Address
      description: "\nThe first <xref href=\"Microsoft.Health.ItemTypes.ContactInfo.Address\" data-throw-if-not-resolved=\"false\"></xref> value that is marked as IsPrimary, \nor <strong>null</strong> if no primary addresses were found.\n"
  overload: Microsoft.Health.ItemTypes.ContactInfo.PrimaryAddress*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.ItemTypes.ContactInfo.PrimaryPhone
  commentId: P:Microsoft.Health.ItemTypes.ContactInfo.PrimaryPhone
  id: PrimaryPhone
  parent: Microsoft.Health.ItemTypes.ContactInfo
  langs:
  - csharp
  - vb
  name: PrimaryPhone
  nameWithType: ContactInfo.PrimaryPhone
  fullName: Microsoft.Health.ItemTypes.ContactInfo.PrimaryPhone
  type: Property
  source:
    remote:
      path: Microsoft.Health.ItemTypes/ContactInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: PrimaryPhone
    path: ContactInfo.cs
    startLine: 165
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nGets the first telephone number that is marked as IsPrimary.\n"
  example: []
  syntax:
    content: public Phone PrimaryPhone { get; }
    content.vb: Public ReadOnly Property PrimaryPhone As Phone
    parameters: []
    return:
      type: Microsoft.Health.ItemTypes.Phone
      description: "\nThe first value of <xref href=\"Microsoft.Health.ItemTypes.ContactInfo.Phone\" data-throw-if-not-resolved=\"false\"></xref> that is marked as \nIsPrimary, or <strong>null</strong> if no primary telephone numbers \nwere found.\n"
  overload: Microsoft.Health.ItemTypes.ContactInfo.PrimaryPhone*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.ItemTypes.ContactInfo.PrimaryEmail
  commentId: P:Microsoft.Health.ItemTypes.ContactInfo.PrimaryEmail
  id: PrimaryEmail
  parent: Microsoft.Health.ItemTypes.ContactInfo
  langs:
  - csharp
  - vb
  name: PrimaryEmail
  nameWithType: ContactInfo.PrimaryEmail
  fullName: Microsoft.Health.ItemTypes.ContactInfo.PrimaryEmail
  type: Property
  source:
    remote:
      path: Microsoft.Health.ItemTypes/ContactInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: PrimaryEmail
    path: ContactInfo.cs
    startLine: 195
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nGets the first email that is marked as IsPrimary.\n"
  example: []
  syntax:
    content: public Email PrimaryEmail { get; }
    content.vb: Public ReadOnly Property PrimaryEmail As Email
    parameters: []
    return:
      type: Microsoft.Health.ItemTypes.Email
      description: "\nThe first value of <xref href=\"Microsoft.Health.ItemTypes.ContactInfo.Email\" data-throw-if-not-resolved=\"false\"></xref> that is marked as IsPrimary, \nor <strong>null</strong> if no primary email addresses were found.\n"
  overload: Microsoft.Health.ItemTypes.ContactInfo.PrimaryEmail*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.ItemTypes.ContactInfo.Address
  commentId: P:Microsoft.Health.ItemTypes.ContactInfo.Address
  id: Address
  parent: Microsoft.Health.ItemTypes.ContactInfo
  langs:
  - csharp
  - vb
  name: Address
  nameWithType: ContactInfo.Address
  fullName: Microsoft.Health.ItemTypes.ContactInfo.Address
  type: Property
  source:
    remote:
      path: Microsoft.Health.ItemTypes/ContactInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Address
    path: ContactInfo.cs
    startLine: 225
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nGets the addresses for the contact.\n"
  example: []
  syntax:
    content: public Collection<Address> Address { get; }
    content.vb: Public ReadOnly Property Address As Collection(Of Address)
    parameters: []
    return:
      type: System.Collections.ObjectModel.Collection{Microsoft.Health.ItemTypes.Address}
      description: "\nA collection of addresses.\n"
  overload: Microsoft.Health.ItemTypes.ContactInfo.Address*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.ItemTypes.ContactInfo.Phone
  commentId: P:Microsoft.Health.ItemTypes.ContactInfo.Phone
  id: Phone
  parent: Microsoft.Health.ItemTypes.ContactInfo
  langs:
  - csharp
  - vb
  name: Phone
  nameWithType: ContactInfo.Phone
  fullName: Microsoft.Health.ItemTypes.ContactInfo.Phone
  type: Property
  source:
    remote:
      path: Microsoft.Health.ItemTypes/ContactInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Phone
    path: ContactInfo.cs
    startLine: 239
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nGets the telephone numbers for the contact.\n"
  example: []
  syntax:
    content: public Collection<Phone> Phone { get; }
    content.vb: Public ReadOnly Property Phone As Collection(Of Phone)
    parameters: []
    return:
      type: System.Collections.ObjectModel.Collection{Microsoft.Health.ItemTypes.Phone}
      description: "\nA collection of phone numbers.\n"
  overload: Microsoft.Health.ItemTypes.ContactInfo.Phone*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.ItemTypes.ContactInfo.Email
  commentId: P:Microsoft.Health.ItemTypes.ContactInfo.Email
  id: Email
  parent: Microsoft.Health.ItemTypes.ContactInfo
  langs:
  - csharp
  - vb
  name: Email
  nameWithType: ContactInfo.Email
  fullName: Microsoft.Health.ItemTypes.ContactInfo.Email
  type: Property
  source:
    remote:
      path: Microsoft.Health.ItemTypes/ContactInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Email
    path: ContactInfo.cs
    startLine: 253
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nGets the email addresses for the contact.\n"
  example: []
  syntax:
    content: public Collection<Email> Email { get; }
    content.vb: Public ReadOnly Property Email As Collection(Of Email)
    parameters: []
    return:
      type: System.Collections.ObjectModel.Collection{Microsoft.Health.ItemTypes.Email}
      description: "\nA collection of email addresses.\n"
  overload: Microsoft.Health.ItemTypes.ContactInfo.Email*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.ItemTypes.ContactInfo.ToString
  commentId: M:Microsoft.Health.ItemTypes.ContactInfo.ToString
  id: ToString
  parent: Microsoft.Health.ItemTypes.ContactInfo
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: ContactInfo.ToString()
  fullName: Microsoft.Health.ItemTypes.ContactInfo.ToString()
  type: Method
  source:
    remote:
      path: Microsoft.Health.ItemTypes/ContactInfo.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ToString
    path: ContactInfo.cs
    startLine: 267
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nGets a string representation of the contact information.\n"
  example: []
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\nA string representation of the contact information.\n"
  overridden: System.Object.ToString
  overload: Microsoft.Health.ItemTypes.ContactInfo.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Microsoft.Health.ItemTypes
  commentId: N:Microsoft.Health.ItemTypes
  isExternal: false
  name: Microsoft.Health.ItemTypes
  nameWithType: Microsoft.Health.ItemTypes
  fullName: Microsoft.Health.ItemTypes
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Health.ItemTypes.HealthRecordItemData
  commentId: T:Microsoft.Health.ItemTypes.HealthRecordItemData
  parent: Microsoft.Health.ItemTypes
  isExternal: false
  name: HealthRecordItemData
  nameWithType: HealthRecordItemData
  fullName: Microsoft.Health.ItemTypes.HealthRecordItemData
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.ItemTypes.ContactInfo
  commentId: T:Microsoft.Health.ItemTypes.ContactInfo
  parent: Microsoft.Health.ItemTypes
  isExternal: false
  name: ContactInfo
  nameWithType: ContactInfo
  fullName: Microsoft.Health.ItemTypes.ContactInfo
- uid: Microsoft.Health.ItemTypes.ContactInfo.#ctor*
  commentId: Overload:Microsoft.Health.ItemTypes.ContactInfo.#ctor
  isExternal: false
  name: ContactInfo
  nameWithType: ContactInfo.ContactInfo
  fullName: Microsoft.Health.ItemTypes.ContactInfo.ContactInfo
- uid: Microsoft.Health.ItemTypes.HealthRecordItemData.ParseXml(System.Xml.XPath.XPathNavigator)
  commentId: M:Microsoft.Health.ItemTypes.HealthRecordItemData.ParseXml(System.Xml.XPath.XPathNavigator)
  parent: Microsoft.Health.ItemTypes.HealthRecordItemData
  isExternal: true
  name: ParseXml(XPathNavigator)
  nameWithType: HealthRecordItemData.ParseXml(XPathNavigator)
  fullName: Microsoft.Health.ItemTypes.HealthRecordItemData.ParseXml(System.Xml.XPath.XPathNavigator)
  spec.csharp:
  - uid: Microsoft.Health.ItemTypes.HealthRecordItemData.ParseXml(System.Xml.XPath.XPathNavigator)
    name: ParseXml
    nameWithType: HealthRecordItemData.ParseXml
    fullName: Microsoft.Health.ItemTypes.HealthRecordItemData.ParseXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XPath.XPathNavigator
    name: XPathNavigator
    nameWithType: XPathNavigator
    fullName: System.Xml.XPath.XPathNavigator
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.ItemTypes.HealthRecordItemData.ParseXml(System.Xml.XPath.XPathNavigator)
    name: ParseXml
    nameWithType: HealthRecordItemData.ParseXml
    fullName: Microsoft.Health.ItemTypes.HealthRecordItemData.ParseXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XPath.XPathNavigator
    name: XPathNavigator
    nameWithType: XPathNavigator
    fullName: System.Xml.XPath.XPathNavigator
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ItemTypes.ContactInfo.ParseXml*
  commentId: Overload:Microsoft.Health.ItemTypes.ContactInfo.ParseXml
  isExternal: false
  name: ParseXml
  nameWithType: ContactInfo.ParseXml
  fullName: Microsoft.Health.ItemTypes.ContactInfo.ParseXml
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.Xml.XPath.XPathNavigator
  commentId: T:System.Xml.XPath.XPathNavigator
  parent: System.Xml.XPath
  isExternal: true
  name: XPathNavigator
  nameWithType: XPathNavigator
  fullName: System.Xml.XPath.XPathNavigator
- uid: System.Xml.XPath
  commentId: N:System.Xml.XPath
  isExternal: false
  name: System.Xml.XPath
  nameWithType: System.Xml.XPath
  fullName: System.Xml.XPath
- uid: Microsoft.Health.ItemTypes.HealthRecordItemData.WriteXml(System.String,System.Xml.XmlWriter)
  commentId: M:Microsoft.Health.ItemTypes.HealthRecordItemData.WriteXml(System.String,System.Xml.XmlWriter)
  parent: Microsoft.Health.ItemTypes.HealthRecordItemData
  isExternal: true
  name: WriteXml(String, XmlWriter)
  nameWithType: HealthRecordItemData.WriteXml(String, XmlWriter)
  fullName: Microsoft.Health.ItemTypes.HealthRecordItemData.WriteXml(System.String, System.Xml.XmlWriter)
  spec.csharp:
  - uid: Microsoft.Health.ItemTypes.HealthRecordItemData.WriteXml(System.String,System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: HealthRecordItemData.WriteXml
    fullName: Microsoft.Health.ItemTypes.HealthRecordItemData.WriteXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.ItemTypes.HealthRecordItemData.WriteXml(System.String,System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: HealthRecordItemData.WriteXml
    fullName: Microsoft.Health.ItemTypes.HealthRecordItemData.WriteXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ItemTypes.ContactInfo.WriteXml*
  commentId: Overload:Microsoft.Health.ItemTypes.ContactInfo.WriteXml
  isExternal: false
  name: WriteXml
  nameWithType: ContactInfo.WriteXml
  fullName: Microsoft.Health.ItemTypes.ContactInfo.WriteXml
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: Microsoft.Health.HealthRecordItemSerializationException
  commentId: T:Microsoft.Health.HealthRecordItemSerializationException
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.XmlWriter
  commentId: T:System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: false
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: Microsoft.Health.ItemTypes.ContactInfo.Address
  commentId: P:Microsoft.Health.ItemTypes.ContactInfo.Address
- uid: Microsoft.Health.ItemTypes.ContactInfo.PrimaryAddress*
  commentId: Overload:Microsoft.Health.ItemTypes.ContactInfo.PrimaryAddress
  isExternal: false
  name: PrimaryAddress
  nameWithType: ContactInfo.PrimaryAddress
  fullName: Microsoft.Health.ItemTypes.ContactInfo.PrimaryAddress
- uid: Microsoft.Health.ItemTypes.Address
  commentId: T:Microsoft.Health.ItemTypes.Address
  parent: Microsoft.Health.ItemTypes
  isExternal: false
  name: Address
  nameWithType: Address
  fullName: Microsoft.Health.ItemTypes.Address
- uid: Microsoft.Health.ItemTypes.ContactInfo.Phone
  commentId: P:Microsoft.Health.ItemTypes.ContactInfo.Phone
- uid: Microsoft.Health.ItemTypes.ContactInfo.PrimaryPhone*
  commentId: Overload:Microsoft.Health.ItemTypes.ContactInfo.PrimaryPhone
  isExternal: false
  name: PrimaryPhone
  nameWithType: ContactInfo.PrimaryPhone
  fullName: Microsoft.Health.ItemTypes.ContactInfo.PrimaryPhone
- uid: Microsoft.Health.ItemTypes.Phone
  commentId: T:Microsoft.Health.ItemTypes.Phone
  parent: Microsoft.Health.ItemTypes
  isExternal: false
  name: Phone
  nameWithType: Phone
  fullName: Microsoft.Health.ItemTypes.Phone
- uid: Microsoft.Health.ItemTypes.ContactInfo.Email
  commentId: P:Microsoft.Health.ItemTypes.ContactInfo.Email
- uid: Microsoft.Health.ItemTypes.ContactInfo.PrimaryEmail*
  commentId: Overload:Microsoft.Health.ItemTypes.ContactInfo.PrimaryEmail
  isExternal: false
  name: PrimaryEmail
  nameWithType: ContactInfo.PrimaryEmail
  fullName: Microsoft.Health.ItemTypes.ContactInfo.PrimaryEmail
- uid: Microsoft.Health.ItemTypes.Email
  commentId: T:Microsoft.Health.ItemTypes.Email
  parent: Microsoft.Health.ItemTypes
  isExternal: false
  name: Email
  nameWithType: Email
  fullName: Microsoft.Health.ItemTypes.Email
- uid: Microsoft.Health.ItemTypes.ContactInfo.Address*
  commentId: Overload:Microsoft.Health.ItemTypes.ContactInfo.Address
  isExternal: false
  name: Address
  nameWithType: ContactInfo.Address
  fullName: Microsoft.Health.ItemTypes.ContactInfo.Address
- uid: System.Collections.ObjectModel.Collection{Microsoft.Health.ItemTypes.Address}
  commentId: T:System.Collections.ObjectModel.Collection{Microsoft.Health.ItemTypes.Address}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.Collection`1
  name: Collection<Address>
  nameWithType: Collection<Address>
  fullName: System.Collections.ObjectModel.Collection<Microsoft.Health.ItemTypes.Address>
  nameWithType.vb: Collection(Of Address)
  fullName.vb: System.Collections.ObjectModel.Collection(Of Microsoft.Health.ItemTypes.Address)
  name.vb: Collection(Of Address)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.ItemTypes.Address
    name: Address
    nameWithType: Address
    fullName: Microsoft.Health.ItemTypes.Address
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.ItemTypes.Address
    name: Address
    nameWithType: Address
    fullName: Microsoft.Health.ItemTypes.Address
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.Collection`1
  commentId: T:System.Collections.ObjectModel.Collection`1
  isExternal: true
  name: Collection<T>
  nameWithType: Collection<T>
  fullName: System.Collections.ObjectModel.Collection<T>
  nameWithType.vb: Collection(Of T)
  fullName.vb: System.Collections.ObjectModel.Collection(Of T)
  name.vb: Collection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: Microsoft.Health.ItemTypes.ContactInfo.Phone*
  commentId: Overload:Microsoft.Health.ItemTypes.ContactInfo.Phone
  isExternal: false
  name: Phone
  nameWithType: ContactInfo.Phone
  fullName: Microsoft.Health.ItemTypes.ContactInfo.Phone
- uid: System.Collections.ObjectModel.Collection{Microsoft.Health.ItemTypes.Phone}
  commentId: T:System.Collections.ObjectModel.Collection{Microsoft.Health.ItemTypes.Phone}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.Collection`1
  name: Collection<Phone>
  nameWithType: Collection<Phone>
  fullName: System.Collections.ObjectModel.Collection<Microsoft.Health.ItemTypes.Phone>
  nameWithType.vb: Collection(Of Phone)
  fullName.vb: System.Collections.ObjectModel.Collection(Of Microsoft.Health.ItemTypes.Phone)
  name.vb: Collection(Of Phone)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.ItemTypes.Phone
    name: Phone
    nameWithType: Phone
    fullName: Microsoft.Health.ItemTypes.Phone
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.ItemTypes.Phone
    name: Phone
    nameWithType: Phone
    fullName: Microsoft.Health.ItemTypes.Phone
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ItemTypes.ContactInfo.Email*
  commentId: Overload:Microsoft.Health.ItemTypes.ContactInfo.Email
  isExternal: false
  name: Email
  nameWithType: ContactInfo.Email
  fullName: Microsoft.Health.ItemTypes.ContactInfo.Email
- uid: System.Collections.ObjectModel.Collection{Microsoft.Health.ItemTypes.Email}
  commentId: T:System.Collections.ObjectModel.Collection{Microsoft.Health.ItemTypes.Email}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.Collection`1
  name: Collection<Email>
  nameWithType: Collection<Email>
  fullName: System.Collections.ObjectModel.Collection<Microsoft.Health.ItemTypes.Email>
  nameWithType.vb: Collection(Of Email)
  fullName.vb: System.Collections.ObjectModel.Collection(Of Microsoft.Health.ItemTypes.Email)
  name.vb: Collection(Of Email)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.ItemTypes.Email
    name: Email
    nameWithType: Email
    fullName: Microsoft.Health.ItemTypes.Email
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.ItemTypes.Email
    name: Email
    nameWithType: Email
    fullName: Microsoft.Health.ItemTypes.Email
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ItemTypes.ContactInfo.ToString*
  commentId: Overload:Microsoft.Health.ItemTypes.ContactInfo.ToString
  isExternal: false
  name: ToString
  nameWithType: ContactInfo.ToString
  fullName: Microsoft.Health.ItemTypes.ContactInfo.ToString
