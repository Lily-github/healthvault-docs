### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.ItemTypes.ExerciseSegment
  commentId: T:Microsoft.Health.ItemTypes.ExerciseSegment
  id: ExerciseSegment
  parent: Microsoft.Health.ItemTypes
  children:
  - Microsoft.Health.ItemTypes.ExerciseSegment.#ctor
  - Microsoft.Health.ItemTypes.ExerciseSegment.#ctor(Microsoft.Health.ItemTypes.CodableValue)
  - Microsoft.Health.ItemTypes.ExerciseSegment.Activity
  - Microsoft.Health.ItemTypes.ExerciseSegment.Details
  - Microsoft.Health.ItemTypes.ExerciseSegment.Distance
  - Microsoft.Health.ItemTypes.ExerciseSegment.Duration
  - Microsoft.Health.ItemTypes.ExerciseSegment.Offset
  - Microsoft.Health.ItemTypes.ExerciseSegment.ParseXml(System.Xml.XPath.XPathNavigator)
  - Microsoft.Health.ItemTypes.ExerciseSegment.Title
  - Microsoft.Health.ItemTypes.ExerciseSegment.ToString
  - Microsoft.Health.ItemTypes.ExerciseSegment.WriteXml(System.String,System.Xml.XmlWriter)
  langs:
  - csharp
  - vb
  name: ExerciseSegment
  nameWithType: ExerciseSegment
  fullName: Microsoft.Health.ItemTypes.ExerciseSegment
  type: Class
  source:
    remote:
      path: Microsoft.Health.ItemTypes/ExerciseSegment.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ExerciseSegment
    path: ExerciseSegment.cs
    startLine: 24
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nInformation pertaining to a portion of the overall exercise.\n"
  remarks: "\nThis is typically used to store information about separate laps in a race or individual events within\na triathlon.\n"
  example: []
  syntax:
    content: 'public class ExerciseSegment : HealthRecordItemData'
    content.vb: >-
      Public Class ExerciseSegment
          Inherits HealthRecordItemData
  inheritance:
  - System.Object
  - Microsoft.Health.ItemTypes.HealthRecordItemData
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.ItemTypes.ExerciseSegment.#ctor
  commentId: M:Microsoft.Health.ItemTypes.ExerciseSegment.#ctor
  id: '#ctor'
  parent: Microsoft.Health.ItemTypes.ExerciseSegment
  langs:
  - csharp
  - vb
  name: ExerciseSegment()
  nameWithType: ExerciseSegment.ExerciseSegment()
  fullName: Microsoft.Health.ItemTypes.ExerciseSegment.ExerciseSegment()
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.ItemTypes/ExerciseSegment.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ExerciseSegment.cs
    startLine: 31
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nCreates a new instance of the <xref href=\"Microsoft.Health.ItemTypes.ExerciseSegment\" data-throw-if-not-resolved=\"false\"></xref> class \nwith default values.\n"
  example: []
  syntax:
    content: public ExerciseSegment()
    content.vb: Public Sub New
  overload: Microsoft.Health.ItemTypes.ExerciseSegment.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.ItemTypes.ExerciseSegment.#ctor(Microsoft.Health.ItemTypes.CodableValue)
  commentId: M:Microsoft.Health.ItemTypes.ExerciseSegment.#ctor(Microsoft.Health.ItemTypes.CodableValue)
  id: '#ctor(Microsoft.Health.ItemTypes.CodableValue)'
  parent: Microsoft.Health.ItemTypes.ExerciseSegment
  langs:
  - csharp
  - vb
  name: ExerciseSegment(CodableValue)
  nameWithType: ExerciseSegment.ExerciseSegment(CodableValue)
  fullName: Microsoft.Health.ItemTypes.ExerciseSegment.ExerciseSegment(Microsoft.Health.ItemTypes.CodableValue)
  type: Constructor
  source:
    remote:
      path: Microsoft.Health.ItemTypes/ExerciseSegment.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: .ctor
    path: ExerciseSegment.cs
    startLine: 45
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nCreates a new instance of the <xref href=\"Microsoft.Health.ItemTypes.ExerciseSegment\" data-throw-if-not-resolved=\"false\"></xref> class \nwith the specified values.\n"
  example: []
  syntax:
    content: public ExerciseSegment(CodableValue activity)
    content.vb: Public Sub New(activity As CodableValue)
    parameters:
    - id: activity
      type: Microsoft.Health.ItemTypes.CodableValue
      description: The type of activity for this segment.
  overload: Microsoft.Health.ItemTypes.ExerciseSegment.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">activity</span> is <strong>null</strong>. \n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.ItemTypes.ExerciseSegment.ParseXml(System.Xml.XPath.XPathNavigator)
  commentId: M:Microsoft.Health.ItemTypes.ExerciseSegment.ParseXml(System.Xml.XPath.XPathNavigator)
  id: ParseXml(System.Xml.XPath.XPathNavigator)
  parent: Microsoft.Health.ItemTypes.ExerciseSegment
  langs:
  - csharp
  - vb
  name: ParseXml(XPathNavigator)
  nameWithType: ExerciseSegment.ParseXml(XPathNavigator)
  fullName: Microsoft.Health.ItemTypes.ExerciseSegment.ParseXml(System.Xml.XPath.XPathNavigator)
  type: Method
  source:
    remote:
      path: Microsoft.Health.ItemTypes/ExerciseSegment.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ParseXml
    path: ExerciseSegment.cs
    startLine: 63
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nPopulates the data for the lap from the XML.\n"
  example: []
  syntax:
    content: public override void ParseXml(XPathNavigator navigator)
    content.vb: Public Overrides Sub ParseXml(navigator As XPathNavigator)
    parameters:
    - id: navigator
      type: System.Xml.XPath.XPathNavigator
      description: "\nThe XML node representing the lap.\n"
  overridden: Microsoft.Health.ItemTypes.HealthRecordItemData.ParseXml(System.Xml.XPath.XPathNavigator)
  overload: Microsoft.Health.ItemTypes.ExerciseSegment.ParseXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <span class=\"paramref\">navigator</span> parameter is <strong>null</strong>.\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Health.ItemTypes.ExerciseSegment.WriteXml(System.String,System.Xml.XmlWriter)
  commentId: M:Microsoft.Health.ItemTypes.ExerciseSegment.WriteXml(System.String,System.Xml.XmlWriter)
  id: WriteXml(System.String,System.Xml.XmlWriter)
  parent: Microsoft.Health.ItemTypes.ExerciseSegment
  langs:
  - csharp
  - vb
  name: WriteXml(String, XmlWriter)
  nameWithType: ExerciseSegment.WriteXml(String, XmlWriter)
  fullName: Microsoft.Health.ItemTypes.ExerciseSegment.WriteXml(System.String, System.Xml.XmlWriter)
  type: Method
  source:
    remote:
      path: Microsoft.Health.ItemTypes/ExerciseSegment.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: WriteXml
    path: ExerciseSegment.cs
    startLine: 122
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nWrites the lap to the specified XML writer.\n"
  example: []
  syntax:
    content: public override void WriteXml(string nodeName, XmlWriter writer)
    content.vb: Public Overrides Sub WriteXml(nodeName As String, writer As XmlWriter)
    parameters:
    - id: nodeName
      type: System.String
      description: "\nThe name of the outer element for the lap.\n"
    - id: writer
      type: System.Xml.XmlWriter
      description: "\nThe XmlWriter to write the lap data to.\n"
  overridden: Microsoft.Health.ItemTypes.HealthRecordItemData.WriteXml(System.String,System.Xml.XmlWriter)
  overload: Microsoft.Health.ItemTypes.ExerciseSegment.WriteXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThe <span class=\"paramref\">writer</span> parameter is <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThe <span class=\"paramref\">nodeName</span> parameter is <strong>null</strong> or empty.\n"
  - type: Microsoft.Health.HealthRecordItemSerializationException
    commentId: T:Microsoft.Health.HealthRecordItemSerializationException
    description: "\nThe Activity property is <strong>null</strong>.\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Health.ItemTypes.ExerciseSegment.Activity
  commentId: P:Microsoft.Health.ItemTypes.ExerciseSegment.Activity
  id: Activity
  parent: Microsoft.Health.ItemTypes.ExerciseSegment
  langs:
  - csharp
  - vb
  name: Activity
  nameWithType: ExerciseSegment.Activity
  fullName: Microsoft.Health.ItemTypes.ExerciseSegment.Activity
  type: Property
  source:
    remote:
      path: Microsoft.Health.ItemTypes/ExerciseSegment.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Activity
    path: ExerciseSegment.cs
    startLine: 182
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nGets or sets the type of activity for this segment of the exercise.\n"
  remarks: "\nExamples: Running, hiking, walking, golfing, dancing.\nThe preferred vocabulary for route is \"exercise-activities\".\n"
  example: []
  syntax:
    content: public CodableValue Activity { get; set; }
    content.vb: Public Property Activity As CodableValue
    parameters: []
    return:
      type: Microsoft.Health.ItemTypes.CodableValue
  overload: Microsoft.Health.ItemTypes.ExerciseSegment.Activity*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nIf <span class=\"paramref\">Activity</span> is <strong>null</strong>. \n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.ItemTypes.ExerciseSegment.Title
  commentId: P:Microsoft.Health.ItemTypes.ExerciseSegment.Title
  id: Title
  parent: Microsoft.Health.ItemTypes.ExerciseSegment
  langs:
  - csharp
  - vb
  name: Title
  nameWithType: ExerciseSegment.Title
  fullName: Microsoft.Health.ItemTypes.ExerciseSegment.Title
  type: Property
  source:
    remote:
      path: Microsoft.Health.ItemTypes/ExerciseSegment.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Title
    path: ExerciseSegment.cs
    startLine: 209
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nGets or sets a descriptive title for this segment.\n"
  remarks: "\nExamples: Lap 1, bicycle leg, first half.\n"
  example: []
  syntax:
    content: public string Title { get; set; }
    content.vb: Public Property Title As String
    parameters: []
    return:
      type: System.String
      description: "\nString. \n"
  overload: Microsoft.Health.ItemTypes.ExerciseSegment.Title*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf <span class=\"paramref\">value</span> contains only whitespace.\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.ItemTypes.ExerciseSegment.Distance
  commentId: P:Microsoft.Health.ItemTypes.ExerciseSegment.Distance
  id: Distance
  parent: Microsoft.Health.ItemTypes.ExerciseSegment
  langs:
  - csharp
  - vb
  name: Distance
  nameWithType: ExerciseSegment.Distance
  fullName: Microsoft.Health.ItemTypes.ExerciseSegment.Distance
  type: Property
  source:
    remote:
      path: Microsoft.Health.ItemTypes/ExerciseSegment.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Distance
    path: ExerciseSegment.cs
    startLine: 239
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nGets or sets the distance covered in the segment.\n"
  remarks: "\nDistances are stored in meters. The application \nmust convert the distance entered by the user\ninto meters and should also store the distance\nand units entered by the user in the display-value\nso that it can be displayed to the user in their\npreferred unit of measure when viewing the data.\n\nSet the value to <strong>null</strong> if there is no distance.\n"
  example: []
  syntax:
    content: public Length Distance { get; set; }
    content.vb: Public Property Distance As Length
    parameters: []
    return:
      type: Microsoft.Health.ItemTypes.Length
      description: "\nA <xref href=\"Microsoft.Health.ItemTypes.Length\" data-throw-if-not-resolved=\"false\"></xref> value representing the distance.\n"
  overload: Microsoft.Health.ItemTypes.ExerciseSegment.Distance*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.ItemTypes.ExerciseSegment.Duration
  commentId: P:Microsoft.Health.ItemTypes.ExerciseSegment.Duration
  id: Duration
  parent: Microsoft.Health.ItemTypes.ExerciseSegment
  langs:
  - csharp
  - vb
  name: Duration
  nameWithType: ExerciseSegment.Duration
  fullName: Microsoft.Health.ItemTypes.ExerciseSegment.Duration
  type: Property
  source:
    remote:
      path: Microsoft.Health.ItemTypes/ExerciseSegment.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Duration
    path: ExerciseSegment.cs
    startLine: 258
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nGets or sets the duration of the segment in minutes.\n"
  remarks: "\nSet the value to <strong>null</strong> if there is no duration.\n"
  example: []
  syntax:
    content: public double ? Duration { get; set; }
    content.vb: Public Property Duration As Double?
    parameters: []
    return:
      type: System.Nullable{System.Double}
  overload: Microsoft.Health.ItemTypes.ExerciseSegment.Duration*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\nThe <span class=\"paramref\">value</span> parameter is negative or zero when set.\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.ItemTypes.ExerciseSegment.Offset
  commentId: P:Microsoft.Health.ItemTypes.ExerciseSegment.Offset
  id: Offset
  parent: Microsoft.Health.ItemTypes.ExerciseSegment
  langs:
  - csharp
  - vb
  name: Offset
  nameWithType: ExerciseSegment.Offset
  fullName: Microsoft.Health.ItemTypes.ExerciseSegment.Offset
  type: Property
  source:
    remote:
      path: Microsoft.Health.ItemTypes/ExerciseSegment.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Offset
    path: ExerciseSegment.cs
    startLine: 284
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nGets or sets the offset in minutes of the segment from the start of exercise.\n"
  remarks: "\nSet the value to <strong>null</strong> if there is no offset.\n"
  example: []
  syntax:
    content: public double ? Offset { get; set; }
    content.vb: Public Property Offset As Double?
    parameters: []
    return:
      type: System.Nullable{System.Double}
  overload: Microsoft.Health.ItemTypes.ExerciseSegment.Offset*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\nThe <span class=\"paramref\">value</span> parameter is negative or zero when set.\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.ItemTypes.ExerciseSegment.Details
  commentId: P:Microsoft.Health.ItemTypes.ExerciseSegment.Details
  id: Details
  parent: Microsoft.Health.ItemTypes.ExerciseSegment
  langs:
  - csharp
  - vb
  name: Details
  nameWithType: ExerciseSegment.Details
  fullName: Microsoft.Health.ItemTypes.ExerciseSegment.Details
  type: Property
  source:
    remote:
      path: Microsoft.Health.ItemTypes/ExerciseSegment.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: Details
    path: ExerciseSegment.cs
    startLine: 311
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nGets additional information about the segment.\n"
  remarks: "\nDetails is a dictionary of the items, where the key is the \nstring name of the item.\n"
  example: []
  syntax:
    content: public IDictionary<string, ExerciseDetail> Details { get; }
    content.vb: Public ReadOnly Property Details As IDictionary(Of String, ExerciseDetail)
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,Microsoft.Health.ItemTypes.ExerciseDetail}
      description: "\nA dictionary of <xref href=\"Microsoft.Health.ItemTypes.ExerciseDetail\" data-throw-if-not-resolved=\"false\"></xref> items.\n"
  overload: Microsoft.Health.ItemTypes.ExerciseSegment.Details*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.ItemTypes.ExerciseSegment.ToString
  commentId: M:Microsoft.Health.ItemTypes.ExerciseSegment.ToString
  id: ToString
  parent: Microsoft.Health.ItemTypes.ExerciseSegment
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: ExerciseSegment.ToString()
  fullName: Microsoft.Health.ItemTypes.ExerciseSegment.ToString()
  type: Method
  source:
    remote:
      path: Microsoft.Health.ItemTypes/ExerciseSegment.cs
      branch: personal/justhu/docfx
      repo: https://microsofthealth.visualstudio.com/DefaultCollection/Health/_git/healthvault-sdk
    id: ToString
    path: ExerciseSegment.cs
    startLine: 325
  assemblies:
  - Microsoft.Health.ItemTypes
  namespace: Microsoft.Health.ItemTypes
  summary: "\nGets a string representation of the ExerciseSegment item.\n"
  example: []
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\nA string representation of the ExerciseSegment item.\n"
  overridden: System.Object.ToString
  overload: Microsoft.Health.ItemTypes.ExerciseSegment.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Microsoft.Health.ItemTypes
  commentId: N:Microsoft.Health.ItemTypes
  isExternal: false
  name: Microsoft.Health.ItemTypes
  nameWithType: Microsoft.Health.ItemTypes
  fullName: Microsoft.Health.ItemTypes
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Health.ItemTypes.HealthRecordItemData
  commentId: T:Microsoft.Health.ItemTypes.HealthRecordItemData
  parent: Microsoft.Health.ItemTypes
  isExternal: false
  name: HealthRecordItemData
  nameWithType: HealthRecordItemData
  fullName: Microsoft.Health.ItemTypes.HealthRecordItemData
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.ItemTypes.ExerciseSegment
  commentId: T:Microsoft.Health.ItemTypes.ExerciseSegment
  isExternal: false
  name: ExerciseSegment
  nameWithType: ExerciseSegment
  fullName: Microsoft.Health.ItemTypes.ExerciseSegment
- uid: Microsoft.Health.ItemTypes.ExerciseSegment.#ctor*
  commentId: Overload:Microsoft.Health.ItemTypes.ExerciseSegment.#ctor
  isExternal: false
  name: ExerciseSegment
  nameWithType: ExerciseSegment.ExerciseSegment
  fullName: Microsoft.Health.ItemTypes.ExerciseSegment.ExerciseSegment
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: Microsoft.Health.ItemTypes.CodableValue
  commentId: T:Microsoft.Health.ItemTypes.CodableValue
  parent: Microsoft.Health.ItemTypes
  isExternal: false
  name: CodableValue
  nameWithType: CodableValue
  fullName: Microsoft.Health.ItemTypes.CodableValue
- uid: Microsoft.Health.ItemTypes.HealthRecordItemData.ParseXml(System.Xml.XPath.XPathNavigator)
  commentId: M:Microsoft.Health.ItemTypes.HealthRecordItemData.ParseXml(System.Xml.XPath.XPathNavigator)
  parent: Microsoft.Health.ItemTypes.HealthRecordItemData
  isExternal: true
  name: ParseXml(XPathNavigator)
  nameWithType: HealthRecordItemData.ParseXml(XPathNavigator)
  fullName: Microsoft.Health.ItemTypes.HealthRecordItemData.ParseXml(System.Xml.XPath.XPathNavigator)
  spec.csharp:
  - uid: Microsoft.Health.ItemTypes.HealthRecordItemData.ParseXml(System.Xml.XPath.XPathNavigator)
    name: ParseXml
    nameWithType: HealthRecordItemData.ParseXml
    fullName: Microsoft.Health.ItemTypes.HealthRecordItemData.ParseXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XPath.XPathNavigator
    name: XPathNavigator
    nameWithType: XPathNavigator
    fullName: System.Xml.XPath.XPathNavigator
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.ItemTypes.HealthRecordItemData.ParseXml(System.Xml.XPath.XPathNavigator)
    name: ParseXml
    nameWithType: HealthRecordItemData.ParseXml
    fullName: Microsoft.Health.ItemTypes.HealthRecordItemData.ParseXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XPath.XPathNavigator
    name: XPathNavigator
    nameWithType: XPathNavigator
    fullName: System.Xml.XPath.XPathNavigator
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ItemTypes.ExerciseSegment.ParseXml*
  commentId: Overload:Microsoft.Health.ItemTypes.ExerciseSegment.ParseXml
  isExternal: false
  name: ParseXml
  nameWithType: ExerciseSegment.ParseXml
  fullName: Microsoft.Health.ItemTypes.ExerciseSegment.ParseXml
- uid: System.Xml.XPath.XPathNavigator
  commentId: T:System.Xml.XPath.XPathNavigator
  parent: System.Xml.XPath
  isExternal: true
  name: XPathNavigator
  nameWithType: XPathNavigator
  fullName: System.Xml.XPath.XPathNavigator
- uid: System.Xml.XPath
  commentId: N:System.Xml.XPath
  isExternal: false
  name: System.Xml.XPath
  nameWithType: System.Xml.XPath
  fullName: System.Xml.XPath
- uid: Microsoft.Health.ItemTypes.HealthRecordItemData.WriteXml(System.String,System.Xml.XmlWriter)
  commentId: M:Microsoft.Health.ItemTypes.HealthRecordItemData.WriteXml(System.String,System.Xml.XmlWriter)
  parent: Microsoft.Health.ItemTypes.HealthRecordItemData
  isExternal: true
  name: WriteXml(String, XmlWriter)
  nameWithType: HealthRecordItemData.WriteXml(String, XmlWriter)
  fullName: Microsoft.Health.ItemTypes.HealthRecordItemData.WriteXml(System.String, System.Xml.XmlWriter)
  spec.csharp:
  - uid: Microsoft.Health.ItemTypes.HealthRecordItemData.WriteXml(System.String,System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: HealthRecordItemData.WriteXml
    fullName: Microsoft.Health.ItemTypes.HealthRecordItemData.WriteXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.ItemTypes.HealthRecordItemData.WriteXml(System.String,System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: HealthRecordItemData.WriteXml
    fullName: Microsoft.Health.ItemTypes.HealthRecordItemData.WriteXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ItemTypes.ExerciseSegment.WriteXml*
  commentId: Overload:Microsoft.Health.ItemTypes.ExerciseSegment.WriteXml
  isExternal: false
  name: WriteXml
  nameWithType: ExerciseSegment.WriteXml
  fullName: Microsoft.Health.ItemTypes.ExerciseSegment.WriteXml
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: Microsoft.Health.HealthRecordItemSerializationException
  commentId: T:Microsoft.Health.HealthRecordItemSerializationException
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.XmlWriter
  commentId: T:System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: false
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: Microsoft.Health.ItemTypes.ExerciseSegment.Activity*
  commentId: Overload:Microsoft.Health.ItemTypes.ExerciseSegment.Activity
  isExternal: false
  name: Activity
  nameWithType: ExerciseSegment.Activity
  fullName: Microsoft.Health.ItemTypes.ExerciseSegment.Activity
- uid: Microsoft.Health.ItemTypes.ExerciseSegment.Title*
  commentId: Overload:Microsoft.Health.ItemTypes.ExerciseSegment.Title
  isExternal: false
  name: Title
  nameWithType: ExerciseSegment.Title
  fullName: Microsoft.Health.ItemTypes.ExerciseSegment.Title
- uid: Microsoft.Health.ItemTypes.Length
  commentId: T:Microsoft.Health.ItemTypes.Length
  parent: Microsoft.Health.ItemTypes
  isExternal: false
  name: Length
  nameWithType: Length
  fullName: Microsoft.Health.ItemTypes.Length
- uid: Microsoft.Health.ItemTypes.ExerciseSegment.Distance*
  commentId: Overload:Microsoft.Health.ItemTypes.ExerciseSegment.Distance
  isExternal: false
  name: Distance
  nameWithType: ExerciseSegment.Distance
  fullName: Microsoft.Health.ItemTypes.ExerciseSegment.Distance
- uid: Microsoft.Health.ItemTypes.ExerciseSegment.Duration*
  commentId: Overload:Microsoft.Health.ItemTypes.ExerciseSegment.Duration
  isExternal: false
  name: Duration
  nameWithType: ExerciseSegment.Duration
  fullName: Microsoft.Health.ItemTypes.ExerciseSegment.Duration
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
- uid: System.Nullable{System.Double}
  commentId: T:System.Nullable{System.Double}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Double>
  nameWithType: Nullable<Double>
  fullName: System.Nullable<System.Double>
  nameWithType.vb: Nullable(Of Double)
  fullName.vb: System.Nullable(Of System.Double)
  name.vb: Nullable(Of Double)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ItemTypes.ExerciseSegment.Offset*
  commentId: Overload:Microsoft.Health.ItemTypes.ExerciseSegment.Offset
  isExternal: false
  name: Offset
  nameWithType: ExerciseSegment.Offset
  fullName: Microsoft.Health.ItemTypes.ExerciseSegment.Offset
- uid: Microsoft.Health.ItemTypes.ExerciseDetail
  commentId: T:Microsoft.Health.ItemTypes.ExerciseDetail
  isExternal: false
  name: ExerciseDetail
  nameWithType: ExerciseDetail
  fullName: Microsoft.Health.ItemTypes.ExerciseDetail
- uid: Microsoft.Health.ItemTypes.ExerciseSegment.Details*
  commentId: Overload:Microsoft.Health.ItemTypes.ExerciseSegment.Details
  isExternal: false
  name: Details
  nameWithType: ExerciseSegment.Details
  fullName: Microsoft.Health.ItemTypes.ExerciseSegment.Details
- uid: System.Collections.Generic.IDictionary{System.String,Microsoft.Health.ItemTypes.ExerciseDetail}
  commentId: T:System.Collections.Generic.IDictionary{System.String,Microsoft.Health.ItemTypes.ExerciseDetail}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, ExerciseDetail>
  nameWithType: IDictionary<String, ExerciseDetail>
  fullName: System.Collections.Generic.IDictionary<System.String, Microsoft.Health.ItemTypes.ExerciseDetail>
  nameWithType.vb: IDictionary(Of String, ExerciseDetail)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, Microsoft.Health.ItemTypes.ExerciseDetail)
  name.vb: IDictionary(Of String, ExerciseDetail)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.ItemTypes.ExerciseDetail
    name: ExerciseDetail
    nameWithType: ExerciseDetail
    fullName: Microsoft.Health.ItemTypes.ExerciseDetail
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.ItemTypes.ExerciseDetail
    name: ExerciseDetail
    nameWithType: ExerciseDetail
    fullName: Microsoft.Health.ItemTypes.ExerciseDetail
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.ItemTypes.ExerciseSegment.ToString*
  commentId: Overload:Microsoft.Health.ItemTypes.ExerciseSegment.ToString
  isExternal: false
  name: ToString
  nameWithType: ExerciseSegment.ToString
  fullName: Microsoft.Health.ItemTypes.ExerciseSegment.ToString
